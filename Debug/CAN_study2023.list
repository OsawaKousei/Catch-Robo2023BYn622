
CAN_study2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ee8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  080080e8  080080e8  000180e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008304  08008304  000201b0  2**0
                  CONTENTS
  4 .ARM          00000008  08008304  08008304  00018304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800830c  0800830c  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800830c  0800830c  0001830c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008310  08008310  00018310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000070  08008384  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000110  08008424  00020110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00002a6c  200001b0  080084c4  000201b0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20002c1c  080084c4  00022c1c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017c6e  00000000  00000000  000201de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002fd5  00000000  00000000  00037e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001110  00000000  00000000  0003ae28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000ff0  00000000  00000000  0003bf38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a77c  00000000  00000000  0003cf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000154c2  00000000  00000000  000676a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ff17d  00000000  00000000  0007cb66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0017bce3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004eec  00000000  00000000  0017bd34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b0 	.word	0x200001b0
 800021c:	00000000 	.word	0x00000000
 8000220:	080080d0 	.word	0x080080d0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b4 	.word	0x200001b4
 800023c:	080080d0 	.word	0x080080d0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <PushTx8Bytes>:
CANTxBuf buffer[CAN_TXBUFFER_SIZE];
uint32_t readpoint = 0;
uint32_t writepoint = 0;
uint8_t isfull = 0;

HAL_StatusTypeDef PushTx8Bytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){
 80005e4:	b480      	push	{r7}
 80005e6:	b087      	sub	sp, #28
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
	buffer[writepoint].DLC = size;
 80005f0:	4b24      	ldr	r3, [pc, #144]	; (8000684 <PushTx8Bytes+0xa0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a24      	ldr	r2, [pc, #144]	; (8000688 <PushTx8Bytes+0xa4>)
 80005f6:	011b      	lsls	r3, r3, #4
 80005f8:	4413      	add	r3, r2
 80005fa:	3304      	adds	r3, #4
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	601a      	str	r2, [r3, #0]
	buffer[writepoint].ExtId = ExtId;
 8000600:	4b20      	ldr	r3, [pc, #128]	; (8000684 <PushTx8Bytes+0xa0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a20      	ldr	r2, [pc, #128]	; (8000688 <PushTx8Bytes+0xa4>)
 8000606:	011b      	lsls	r3, r3, #4
 8000608:	4413      	add	r3, r2
 800060a:	68fa      	ldr	r2, [r7, #12]
 800060c:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++)buffer[writepoint].bytes[i] = bytes[i];
 800060e:	2300      	movs	r3, #0
 8000610:	75fb      	strb	r3, [r7, #23]
 8000612:	e010      	b.n	8000636 <PushTx8Bytes+0x52>
 8000614:	7dfb      	ldrb	r3, [r7, #23]
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	18d1      	adds	r1, r2, r3
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <PushTx8Bytes+0xa0>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	7dfb      	ldrb	r3, [r7, #23]
 8000620:	7808      	ldrb	r0, [r1, #0]
 8000622:	4919      	ldr	r1, [pc, #100]	; (8000688 <PushTx8Bytes+0xa4>)
 8000624:	0112      	lsls	r2, r2, #4
 8000626:	440a      	add	r2, r1
 8000628:	4413      	add	r3, r2
 800062a:	3308      	adds	r3, #8
 800062c:	4602      	mov	r2, r0
 800062e:	701a      	strb	r2, [r3, #0]
 8000630:	7dfb      	ldrb	r3, [r7, #23]
 8000632:	3301      	adds	r3, #1
 8000634:	75fb      	strb	r3, [r7, #23]
 8000636:	7dfb      	ldrb	r3, [r7, #23]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	429a      	cmp	r2, r3
 800063c:	d8ea      	bhi.n	8000614 <PushTx8Bytes+0x30>

	if (isfull == 1)readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <PushTx8Bytes+0xa8>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d106      	bne.n	8000654 <PushTx8Bytes+0x70>
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <PushTx8Bytes+0xac>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	3301      	adds	r3, #1
 800064c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000650:	4a0f      	ldr	r2, [pc, #60]	; (8000690 <PushTx8Bytes+0xac>)
 8000652:	6013      	str	r3, [r2, #0]
	writepoint = (writepoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000654:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <PushTx8Bytes+0xa0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3301      	adds	r3, #1
 800065a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800065e:	4a09      	ldr	r2, [pc, #36]	; (8000684 <PushTx8Bytes+0xa0>)
 8000660:	6013      	str	r3, [r2, #0]

	if (writepoint == readpoint){
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <PushTx8Bytes+0xa0>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <PushTx8Bytes+0xac>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	429a      	cmp	r2, r3
 800066c:	d102      	bne.n	8000674 <PushTx8Bytes+0x90>
		isfull = 1;
 800066e:	4b07      	ldr	r3, [pc, #28]	; (800068c <PushTx8Bytes+0xa8>)
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
	}

	return HAL_OK;
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	371c      	adds	r7, #28
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	200024a4 	.word	0x200024a4
 8000688:	200004a0 	.word	0x200004a0
 800068c:	200024a8 	.word	0x200024a8
 8000690:	200024a0 	.word	0x200024a0

08000694 <PopSendTx8Bytes>:

HAL_StatusTypeDef PopSendTx8Bytes(){
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;

	txHeader.RTR = CAN_RTR_DATA; // Data frame
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
	txHeader.IDE = CAN_ID_EXT;	 // CAN Extend ID
 800069e:	2304      	movs	r3, #4
 80006a0:	60fb      	str	r3, [r7, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	763b      	strb	r3, [r7, #24]

	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 80006a6:	e035      	b.n	8000714 <PopSendTx8Bytes+0x80>
		if (isfull == 0 && readpoint == writepoint)break;
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <PopSendTx8Bytes+0xa0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d105      	bne.n	80006bc <PopSendTx8Bytes+0x28>
 80006b0:	4b21      	ldr	r3, [pc, #132]	; (8000738 <PopSendTx8Bytes+0xa4>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b21      	ldr	r3, [pc, #132]	; (800073c <PopSendTx8Bytes+0xa8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d034      	beq.n	8000726 <PopSendTx8Bytes+0x92>

		txHeader.DLC = buffer[readpoint].DLC;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <PopSendTx8Bytes+0xa4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a1f      	ldr	r2, [pc, #124]	; (8000740 <PopSendTx8Bytes+0xac>)
 80006c2:	011b      	lsls	r3, r3, #4
 80006c4:	4413      	add	r3, r2
 80006c6:	3304      	adds	r3, #4
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	617b      	str	r3, [r7, #20]
		txHeader.ExtId = buffer[readpoint].ExtId;
 80006cc:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <PopSendTx8Bytes+0xa4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a1b      	ldr	r2, [pc, #108]	; (8000740 <PopSendTx8Bytes+0xac>)
 80006d2:	011b      	lsls	r3, r3, #4
 80006d4:	4413      	add	r3, r2
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	60bb      	str	r3, [r7, #8]

		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, buffer[readpoint].bytes, &txMailbox);
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <PopSendTx8Bytes+0xb0>)
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <PopSendTx8Bytes+0xa4>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	011b      	lsls	r3, r3, #4
 80006e4:	3308      	adds	r3, #8
 80006e6:	4a16      	ldr	r2, [pc, #88]	; (8000740 <PopSendTx8Bytes+0xac>)
 80006e8:	441a      	add	r2, r3
 80006ea:	463b      	mov	r3, r7
 80006ec:	1d39      	adds	r1, r7, #4
 80006ee:	f002 f8d5 	bl	800289c <HAL_CAN_AddTxMessage>
 80006f2:	4603      	mov	r3, r0
 80006f4:	77fb      	strb	r3, [r7, #31]
		if (ret != HAL_OK)return ret;
 80006f6:	7ffb      	ldrb	r3, [r7, #31]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <PopSendTx8Bytes+0x6c>
 80006fc:	7ffb      	ldrb	r3, [r7, #31]
 80006fe:	e014      	b.n	800072a <PopSendTx8Bytes+0x96>

		readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000700:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <PopSendTx8Bytes+0xa4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	3301      	adds	r3, #1
 8000706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800070a:	4a0b      	ldr	r2, [pc, #44]	; (8000738 <PopSendTx8Bytes+0xa4>)
 800070c:	6013      	str	r3, [r2, #0]
		isfull = 0;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <PopSendTx8Bytes+0xa0>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <PopSendTx8Bytes+0xb0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f002 f98f 	bl	8002a3c <HAL_CAN_GetTxMailboxesFreeLevel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d1c1      	bne.n	80006a8 <PopSendTx8Bytes+0x14>
 8000724:	e000      	b.n	8000728 <PopSendTx8Bytes+0x94>
		if (isfull == 0 && readpoint == writepoint)break;
 8000726:	bf00      	nop
	}

	return HAL_OK;
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	3720      	adds	r7, #32
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200024a8 	.word	0x200024a8
 8000738:	200024a0 	.word	0x200024a0
 800073c:	200024a4 	.word	0x200024a4
 8000740:	200004a0 	.word	0x200004a0
 8000744:	200001cc 	.word	0x200001cc

08000748 <WhenTxMailbox0_1_2CompleteCallbackCalled>:

void WhenTxMailbox0_1_2CompleteCallbackCalled(){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 800074c:	f7ff ffa2 	bl	8000694 <PopSendTx8Bytes>
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}

08000754 <WhenTxMailbox0_1_2AbortCallbackCalled>:

void WhenTxMailbox0_1_2AbortCallbackCalled(){
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 8000758:	f7ff ff9c 	bl	8000694 <PopSendTx8Bytes>
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <WhenCANRxFifo0MsgPending>:

void WhenCANRxFifo0MsgPending(CAN_HandleTypeDef *phcan, NUM_OF_DEVICES *num_of){ // Fifo0MsgPendingで呼び出すこと. CAN受信時に呼び出される関数
 8000760:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000764:	b08e      	sub	sp, #56	; 0x38
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
 800076a:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_CAN_GetRxMessage(phcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK){
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	f107 0218 	add.w	r2, r7, #24
 8000774:	2100      	movs	r1, #0
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f002 f995 	bl	8002aa6 <HAL_CAN_GetRxMessage>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d004      	beq.n	800078c <WhenCANRxFifo0MsgPending+0x2c>
		// Reception Error
		printf("GetRxMessage error\n\r");
 8000782:	486e      	ldr	r0, [pc, #440]	; (800093c <WhenCANRxFifo0MsgPending+0x1dc>)
 8000784:	f006 fca0 	bl	80070c8 <iprintf>
		Error_Handler();
 8000788:	f001 fa4e 	bl	8001c28 <Error_Handler>
	}
	// awakeコマンドを受信した場合
	CAN_Device can_device = Extract_CAN_Device(rxHeader.ExtId);
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	2200      	movs	r2, #0
 8000790:	4698      	mov	r8, r3
 8000792:	4691      	mov	r9, r2
 8000794:	4640      	mov	r0, r8
 8000796:	4649      	mov	r1, r9
 8000798:	f000 feb6 	bl	8001508 <Extract_CAN_Device>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	733a      	strb	r2, [r7, #12]
 80007a2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80007a6:	737a      	strb	r2, [r7, #13]
 80007a8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80007ac:	73bb      	strb	r3, [r7, #14]
	uint8_t extracted_cmd = Extract_CAN_CMD(rxHeader.ExtId);
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	2200      	movs	r2, #0
 80007b2:	461c      	mov	r4, r3
 80007b4:	4615      	mov	r5, r2
 80007b6:	4620      	mov	r0, r4
 80007b8:	4629      	mov	r1, r5
 80007ba:	f000 fef1 	bl	80015a0 <Extract_CAN_CMD>
 80007be:	4603      	mov	r3, r0
 80007c0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(extracted_cmd == AWAKE_CMD){
 80007c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d139      	bne.n	8000840 <WhenCANRxFifo0MsgPending+0xe0>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 80007cc:	2300      	movs	r3, #0
 80007ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80007d2:	e013      	b.n	80007fc <WhenCANRxFifo0MsgPending+0x9c>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 80007d4:	7b3b      	ldrb	r3, [r7, #12]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80007dc:	4958      	ldr	r1, [pc, #352]	; (8000940 <WhenCANRxFifo0MsgPending+0x1e0>)
 80007de:	4603      	mov	r3, r0
 80007e0:	00db      	lsls	r3, r3, #3
 80007e2:	1a1b      	subs	r3, r3, r0
 80007e4:	440b      	add	r3, r1
 80007e6:	4413      	add	r3, r2
 80007e8:	781a      	ldrb	r2, [r3, #0]
 80007ea:	7c3b      	ldrb	r3, [r7, #16]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	f000 80a0 	beq.w	8000932 <WhenCANRxFifo0MsgPending+0x1d2>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 80007f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007f6:	3301      	adds	r3, #1
 80007f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80007fc:	7b3b      	ldrb	r3, [r7, #12]
 80007fe:	461a      	mov	r2, r3
 8000800:	4b50      	ldr	r3, [pc, #320]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000802:	5c9b      	ldrb	r3, [r3, r2]
 8000804:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000808:	429a      	cmp	r2, r3
 800080a:	d3e3      	bcc.n	80007d4 <WhenCANRxFifo0MsgPending+0x74>
		}
		node_id_list[can_device.node_type][num_detected[can_device.node_type]] = rxData[0];
 800080c:	7b3b      	ldrb	r3, [r7, #12]
 800080e:	4619      	mov	r1, r3
 8000810:	7b3b      	ldrb	r3, [r7, #12]
 8000812:	461a      	mov	r2, r3
 8000814:	4b4b      	ldr	r3, [pc, #300]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000816:	5c9b      	ldrb	r3, [r3, r2]
 8000818:	461c      	mov	r4, r3
 800081a:	7c38      	ldrb	r0, [r7, #16]
 800081c:	4a48      	ldr	r2, [pc, #288]	; (8000940 <WhenCANRxFifo0MsgPending+0x1e0>)
 800081e:	460b      	mov	r3, r1
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	1a5b      	subs	r3, r3, r1
 8000824:	4413      	add	r3, r2
 8000826:	4423      	add	r3, r4
 8000828:	4602      	mov	r2, r0
 800082a:	701a      	strb	r2, [r3, #0]
		num_detected[can_device.node_type] += 1;
 800082c:	7b3b      	ldrb	r3, [r7, #12]
 800082e:	461a      	mov	r2, r3
 8000830:	4b44      	ldr	r3, [pc, #272]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000832:	5c9b      	ldrb	r3, [r3, r2]
 8000834:	7b3a      	ldrb	r2, [r7, #12]
 8000836:	3301      	adds	r3, #1
 8000838:	b2d9      	uxtb	r1, r3
 800083a:	4b42      	ldr	r3, [pc, #264]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 800083c:	5499      	strb	r1, [r3, r2]
 800083e:	e04a      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
	}else if(extracted_cmd == FB_CMD){
 8000840:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000844:	2b01      	cmp	r3, #1
 8000846:	d146      	bne.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
		if (can_device.node_type == NODE_MCMD1){
 8000848:	7b3b      	ldrb	r3, [r7, #12]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d10d      	bne.n	800086a <WhenCANRxFifo0MsgPending+0x10a>
			memcpy(&(_feedback_table_mcmd1[can_device.node_id].feedback_motor[can_device.device_num]),
 800084e:	7b7b      	ldrb	r3, [r7, #13]
 8000850:	7bba      	ldrb	r2, [r7, #14]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	4413      	add	r3, r2
 8000856:	00db      	lsls	r3, r3, #3
 8000858:	4a3b      	ldr	r2, [pc, #236]	; (8000948 <WhenCANRxFifo0MsgPending+0x1e8>)
 800085a:	4413      	add	r3, r2
 800085c:	461a      	mov	r2, r3
 800085e:	f107 0310 	add.w	r3, r7, #16
 8000862:	cb03      	ldmia	r3!, {r0, r1}
 8000864:	6010      	str	r0, [r2, #0]
 8000866:	6051      	str	r1, [r2, #4]
 8000868:	e035      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
                   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD2){
 800086a:	7b3b      	ldrb	r3, [r7, #12]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d10d      	bne.n	800088c <WhenCANRxFifo0MsgPending+0x12c>
			memcpy(&(_feedback_table_mcmd2[can_device.node_id].feedback_motor[can_device.device_num]),
 8000870:	7b7b      	ldrb	r3, [r7, #13]
 8000872:	7bba      	ldrb	r2, [r7, #14]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	4413      	add	r3, r2
 8000878:	00db      	lsls	r3, r3, #3
 800087a:	4a34      	ldr	r2, [pc, #208]	; (800094c <WhenCANRxFifo0MsgPending+0x1ec>)
 800087c:	4413      	add	r3, r2
 800087e:	461a      	mov	r2, r3
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	cb03      	ldmia	r3!, {r0, r1}
 8000886:	6010      	str	r0, [r2, #0]
 8000888:	6051      	str	r1, [r2, #4]
 800088a:	e024      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD3){
 800088c:	7b3b      	ldrb	r3, [r7, #12]
 800088e:	2b03      	cmp	r3, #3
 8000890:	d10d      	bne.n	80008ae <WhenCANRxFifo0MsgPending+0x14e>
			memcpy(&(_feedback_table_mcmd3[can_device.node_id].feedback_motor[can_device.device_num]),
 8000892:	7b7b      	ldrb	r3, [r7, #13]
 8000894:	7bba      	ldrb	r2, [r7, #14]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	4413      	add	r3, r2
 800089a:	00db      	lsls	r3, r3, #3
 800089c:	4a2c      	ldr	r2, [pc, #176]	; (8000950 <WhenCANRxFifo0MsgPending+0x1f0>)
 800089e:	4413      	add	r3, r2
 80008a0:	461a      	mov	r2, r3
 80008a2:	f107 0310 	add.w	r3, r7, #16
 80008a6:	cb03      	ldmia	r3!, {r0, r1}
 80008a8:	6010      	str	r0, [r2, #0]
 80008aa:	6051      	str	r1, [r2, #4]
 80008ac:	e013      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD4){
 80008ae:	7b3b      	ldrb	r3, [r7, #12]
 80008b0:	2b06      	cmp	r3, #6
 80008b2:	d10d      	bne.n	80008d0 <WhenCANRxFifo0MsgPending+0x170>
			memcpy(&(_feedback_table_mcmd4[can_device.node_id].feedback_motor[can_device.device_num]),
 80008b4:	7b7b      	ldrb	r3, [r7, #13]
 80008b6:	7bba      	ldrb	r2, [r7, #14]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	4413      	add	r3, r2
 80008bc:	00db      	lsls	r3, r3, #3
 80008be:	4a25      	ldr	r2, [pc, #148]	; (8000954 <WhenCANRxFifo0MsgPending+0x1f4>)
 80008c0:	4413      	add	r3, r2
 80008c2:	461a      	mov	r2, r3
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	cb03      	ldmia	r3!, {r0, r1}
 80008ca:	6010      	str	r0, [r2, #0]
 80008cc:	6051      	str	r1, [r2, #4]
 80008ce:	e002      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else{
			printf("Error\n\r");
 80008d0:	4821      	ldr	r0, [pc, #132]	; (8000958 <WhenCANRxFifo0MsgPending+0x1f8>)
 80008d2:	f006 fbf9 	bl	80070c8 <iprintf>
		}
	}else{

    }
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 80008d6:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008d8:	785a      	ldrb	r2, [r3, #1]
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	429a      	cmp	r2, r3
 80008e0:	d128      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008e4:	789a      	ldrb	r2, [r3, #2]
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	785b      	ldrb	r3, [r3, #1]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d122      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008f0:	78da      	ldrb	r2, [r3, #3]
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	789b      	ldrb	r3, [r3, #2]
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d11c      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008fc:	791a      	ldrb	r2, [r3, #4]
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	78db      	ldrb	r3, [r3, #3]
 8000902:	429a      	cmp	r2, r3
 8000904:	d116      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000908:	795a      	ldrb	r2, [r3, #5]
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	791b      	ldrb	r3, [r3, #4]
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 800090e:	429a      	cmp	r2, r3
 8000910:	d110      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000914:	799a      	ldrb	r2, [r3, #6]
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	795b      	ldrb	r3, [r3, #5]
 800091a:	429a      	cmp	r2, r3
 800091c:	d10a      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000920:	7a1a      	ldrb	r2, [r3, #8]
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	799b      	ldrb	r3, [r3, #6]
 8000926:	429a      	cmp	r2, r3
 8000928:	d104      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		all_node_detected = 1;
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <WhenCANRxFifo0MsgPending+0x1fc>)
 800092c:	2201      	movs	r2, #1
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	e000      	b.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000932:	bf00      	nop
	}
}
 8000934:	3738      	adds	r7, #56	; 0x38
 8000936:	46bd      	mov	sp, r7
 8000938:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800093c:	080080e8 	.word	0x080080e8
 8000940:	200001e0 	.word	0x200001e0
 8000944:	200001d4 	.word	0x200001d4
 8000948:	20000220 	.word	0x20000220
 800094c:	200002c0 	.word	0x200002c0
 8000950:	20000360 	.word	0x20000360
 8000954:	20000400 	.word	0x20000400
 8000958:	08008100 	.word	0x08008100
 800095c:	200001d0 	.word	0x200001d0

08000960 <SendBytes>:

HAL_StatusTypeDef SendBytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){ // 命令を送信する関数
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
	uint32_t quotient = size / 8;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	08db      	lsrs	r3, r3, #3
 8000970:	61bb      	str	r3, [r7, #24]
	uint32_t remainder = size - (8 * quotient);
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef ret;

	for (uint8_t i = 0; i < quotient; i++){
 800097c:	2300      	movs	r3, #0
 800097e:	77fb      	strb	r3, [r7, #31]
 8000980:	e015      	b.n	80009ae <SendBytes+0x4e>
		ret = PushTx8Bytes(ExtId, bytes + i * 8, 8);
 8000982:	7ffb      	ldrb	r3, [r7, #31]
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	461a      	mov	r2, r3
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	4413      	add	r3, r2
 800098c:	2208      	movs	r2, #8
 800098e:	4619      	mov	r1, r3
 8000990:	68f8      	ldr	r0, [r7, #12]
 8000992:	f7ff fe27 	bl	80005e4 <PushTx8Bytes>
 8000996:	4603      	mov	r3, r0
 8000998:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 800099a:	7cfb      	ldrb	r3, [r7, #19]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d003      	beq.n	80009a8 <SendBytes+0x48>
			Error_Handler();
 80009a0:	f001 f942 	bl	8001c28 <Error_Handler>
			return ret;
 80009a4:	7cfb      	ldrb	r3, [r7, #19]
 80009a6:	e027      	b.n	80009f8 <SendBytes+0x98>
	for (uint8_t i = 0; i < quotient; i++){
 80009a8:	7ffb      	ldrb	r3, [r7, #31]
 80009aa:	3301      	adds	r3, #1
 80009ac:	77fb      	strb	r3, [r7, #31]
 80009ae:	7ffb      	ldrb	r3, [r7, #31]
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d8e5      	bhi.n	8000982 <SendBytes+0x22>
		}
	}

	if(remainder != 0){
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d011      	beq.n	80009e0 <SendBytes+0x80>
		ret = PushTx8Bytes(ExtId, bytes + quotient * 8, remainder);
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	00db      	lsls	r3, r3, #3
 80009c0:	68ba      	ldr	r2, [r7, #8]
 80009c2:	4413      	add	r3, r2
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	4619      	mov	r1, r3
 80009c8:	68f8      	ldr	r0, [r7, #12]
 80009ca:	f7ff fe0b 	bl	80005e4 <PushTx8Bytes>
 80009ce:	4603      	mov	r3, r0
 80009d0:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 80009d2:	7cfb      	ldrb	r3, [r7, #19]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d003      	beq.n	80009e0 <SendBytes+0x80>
			Error_Handler();
 80009d8:	f001 f926 	bl	8001c28 <Error_Handler>
			return ret;
 80009dc:	7cfb      	ldrb	r3, [r7, #19]
 80009de:	e00b      	b.n	80009f8 <SendBytes+0x98>
		}
	}

	ret = PopSendTx8Bytes();
 80009e0:	f7ff fe58 	bl	8000694 <PopSendTx8Bytes>
 80009e4:	4603      	mov	r3, r0
 80009e6:	74fb      	strb	r3, [r7, #19]
	if (ret != HAL_OK){
 80009e8:	7cfb      	ldrb	r3, [r7, #19]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d003      	beq.n	80009f6 <SendBytes+0x96>
		Error_Handler();
 80009ee:	f001 f91b 	bl	8001c28 <Error_Handler>
		return ret;
 80009f2:	7cfb      	ldrb	r3, [r7, #19]
 80009f4:	e000      	b.n	80009f8 <SendBytes+0x98>
	}

	return HAL_OK;
 80009f6:	2300      	movs	r3, #0
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3720      	adds	r7, #32
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <CAN_SystemInit>:
 * @brief CANのシステムをアクティベートする. 具体的にはメッセージフィルターの設定とhal_can_start.
 *
 * @param _hcan
 * @param can_param
 */
void CAN_SystemInit(CAN_HandleTypeDef *_hcan){ // CANの初期化
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08e      	sub	sp, #56	; 0x38
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	phcan = _hcan;
 8000a08:	4a09      	ldr	r2, [pc, #36]	; (8000a30 <CAN_SystemInit+0x30>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6013      	str	r3, [r2, #0]

	all_node_detected = 0;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <CAN_SystemInit+0x34>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000a14:	2300      	movs	r3, #0
 8000a16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000a1a:	e029      	b.n	8000a70 <CAN_SystemInit+0x70>
		num_detected[type] = 0;
 8000a1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a20:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <CAN_SystemInit+0x38>)
 8000a22:	2100      	movs	r1, #0
 8000a24:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 0b111; i++){
 8000a26:	2300      	movs	r3, #0
 8000a28:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000a2c:	e017      	b.n	8000a5e <CAN_SystemInit+0x5e>
 8000a2e:	bf00      	nop
 8000a30:	200001cc 	.word	0x200001cc
 8000a34:	200001d0 	.word	0x200001d0
 8000a38:	200001d4 	.word	0x200001d4
			node_id_list[type][i] = 0xff;
 8000a3c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000a40:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8000a44:	48d7      	ldr	r0, [pc, #860]	; (8000da4 <CAN_SystemInit+0x3a4>)
 8000a46:	4613      	mov	r3, r2
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	1a9b      	subs	r3, r3, r2
 8000a4c:	4403      	add	r3, r0
 8000a4e:	440b      	add	r3, r1
 8000a50:	22ff      	movs	r2, #255	; 0xff
 8000a52:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 0b111; i++){
 8000a54:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000a58:	3301      	adds	r3, #1
 8000a5a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000a5e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d9ea      	bls.n	8000a3c <CAN_SystemInit+0x3c>
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000a66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000a70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a74:	2b08      	cmp	r3, #8
 8000a76:	d9d1      	bls.n	8000a1c <CAN_SystemInit+0x1c>
		}
	}

	//フィルタバンク設定
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000a84:	2301      	movs	r3, #1
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.SlaveStartFilterBank = 14;
 8000a88:	230e      	movs	r3, #14
 8000a8a:	633b      	str	r3, [r7, #48]	; 0x30

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000a90:	2300      	movs	r3, #0
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	2001      	movs	r0, #1
 8000a98:	f000 fd09 	bl	80014ae <Make_CAN_ID>
 8000a9c:	f04f 0200 	mov.w	r2, #0
 8000aa0:	f04f 0300 	mov.w	r3, #0
 8000aa4:	0b42      	lsrs	r2, r0, #13
 8000aa6:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000aaa:	0b4b      	lsrs	r3, r1, #13
 8000aac:	4613      	mov	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) >> 13;
 8000ab0:	231f      	movs	r3, #31
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f000 fcf9 	bl	80014ae <Make_CAN_ID>
 8000abc:	f04f 0200 	mov.w	r2, #0
 8000ac0:	f04f 0300 	mov.w	r3, #0
 8000ac4:	0b42      	lsrs	r2, r0, #13
 8000ac6:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000aca:	0b4b      	lsrs	r3, r1, #13
 8000acc:	4613      	mov	r3, r2
 8000ace:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f000 fce9 	bl	80014ae <Make_CAN_ID>
 8000adc:	4602      	mov	r2, r0
 8000ade:	460b      	mov	r3, r1
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	00da      	lsls	r2, r3, #3
 8000ae4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ae8:	4013      	ands	r3, r2
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000af0:	231f      	movs	r3, #31
 8000af2:	2200      	movs	r2, #0
 8000af4:	2100      	movs	r1, #0
 8000af6:	2001      	movs	r0, #1
 8000af8:	f000 fcd9 	bl	80014ae <Make_CAN_ID>
 8000afc:	4602      	mov	r2, r0
 8000afe:	460b      	mov	r3, r1
 8000b00:	4613      	mov	r3, r2
 8000b02:	00da      	lsls	r2, r3, #3
 8000b04:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000b08:	4013      	ands	r3, r2
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000b10:	4ba5      	ldr	r3, [pc, #660]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f107 020c 	add.w	r2, r7, #12
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 fd8e 	bl	800263c <HAL_CAN_ConfigFilter>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <CAN_SystemInit+0x12a>
		/* Filter configuration Error */
		Error_Handler();
 8000b26:	f001 f87f 	bl	8001c28 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 1;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000b2e:	2300      	movs	r3, #0
 8000b30:	2200      	movs	r2, #0
 8000b32:	2100      	movs	r1, #0
 8000b34:	2002      	movs	r0, #2
 8000b36:	f000 fcba 	bl	80014ae <Make_CAN_ID>
 8000b3a:	f04f 0200 	mov.w	r2, #0
 8000b3e:	f04f 0300 	mov.w	r3, #0
 8000b42:	0b42      	lsrs	r2, r0, #13
 8000b44:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000b48:	0b4b      	lsrs	r3, r1, #13
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) >> 13;
 8000b4e:	231f      	movs	r3, #31
 8000b50:	2200      	movs	r2, #0
 8000b52:	2100      	movs	r1, #0
 8000b54:	2002      	movs	r0, #2
 8000b56:	f000 fcaa 	bl	80014ae <Make_CAN_ID>
 8000b5a:	f04f 0200 	mov.w	r2, #0
 8000b5e:	f04f 0300 	mov.w	r3, #0
 8000b62:	0b42      	lsrs	r2, r0, #13
 8000b64:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000b68:	0b4b      	lsrs	r3, r1, #13
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000b6e:	2300      	movs	r3, #0
 8000b70:	2200      	movs	r2, #0
 8000b72:	2100      	movs	r1, #0
 8000b74:	2002      	movs	r0, #2
 8000b76:	f000 fc9a 	bl	80014ae <Make_CAN_ID>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	4613      	mov	r3, r2
 8000b80:	00da      	lsls	r2, r3, #3
 8000b82:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000b86:	4013      	ands	r3, r2
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000b8e:	231f      	movs	r3, #31
 8000b90:	2200      	movs	r2, #0
 8000b92:	2100      	movs	r1, #0
 8000b94:	2002      	movs	r0, #2
 8000b96:	f000 fc8a 	bl	80014ae <Make_CAN_ID>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	00da      	lsls	r2, r3, #3
 8000ba2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	f043 0304 	orr.w	r3, r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000bae:	4b7e      	ldr	r3, [pc, #504]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f107 020c 	add.w	r2, r7, #12
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 fd3f 	bl	800263c <HAL_CAN_ConfigFilter>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <CAN_SystemInit+0x1c8>
		/* Filter configuration Error */
		Error_Handler();
 8000bc4:	f001 f830 	bl	8001c28 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 2;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) >> 13;				   // 上16bit
 8000bcc:	2300      	movs	r3, #0
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2003      	movs	r0, #3
 8000bd4:	f000 fc6b 	bl	80014ae <Make_CAN_ID>
 8000bd8:	f04f 0200 	mov.w	r2, #0
 8000bdc:	f04f 0300 	mov.w	r3, #0
 8000be0:	0b42      	lsrs	r2, r0, #13
 8000be2:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000be6:	0b4b      	lsrs	r3, r1, #13
 8000be8:	4613      	mov	r3, r2
 8000bea:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) >> 13;					   // TODO : 治す
 8000bec:	231f      	movs	r3, #31
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2003      	movs	r0, #3
 8000bf4:	f000 fc5b 	bl	80014ae <Make_CAN_ID>
 8000bf8:	f04f 0200 	mov.w	r2, #0
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	0b42      	lsrs	r2, r0, #13
 8000c02:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000c06:	0b4b      	lsrs	r3, r1, #13
 8000c08:	4613      	mov	r3, r2
 8000c0a:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2003      	movs	r0, #3
 8000c14:	f000 fc4b 	bl	80014ae <Make_CAN_ID>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	00da      	lsls	r2, r3, #3
 8000c20:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000c24:	4013      	ands	r3, r2
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000c2c:	231f      	movs	r3, #31
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2003      	movs	r0, #3
 8000c34:	f000 fc3b 	bl	80014ae <Make_CAN_ID>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	00da      	lsls	r2, r3, #3
 8000c40:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000c44:	4013      	ands	r3, r2
 8000c46:	f043 0304 	orr.w	r3, r3, #4
 8000c4a:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000c4c:	4b56      	ldr	r3, [pc, #344]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f107 020c 	add.w	r2, r7, #12
 8000c54:	4611      	mov	r1, r2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 fcf0 	bl	800263c <HAL_CAN_ConfigFilter>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <CAN_SystemInit+0x266>
		/* Filter configuration Error */
		Error_Handler();
 8000c62:	f000 ffe1 	bl	8001c28 <Error_Handler>
	}

	// FIFO0にfeedback用のフィルタを設定
	sFilterConfig.FilterBank = 3;
 8000c66:	2303      	movs	r3, #3
 8000c68:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) >> 13; // 上16bit
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2000      	movs	r0, #0
 8000c72:	f000 fc1c 	bl	80014ae <Make_CAN_ID>
 8000c76:	f04f 0200 	mov.w	r2, #0
 8000c7a:	f04f 0300 	mov.w	r3, #0
 8000c7e:	0b42      	lsrs	r2, r0, #13
 8000c80:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000c84:	0b4b      	lsrs	r3, r1, #13
 8000c86:	4613      	mov	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(0, 0, 0, 0b11111) >> 13;
 8000c8a:	231f      	movs	r3, #31
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2000      	movs	r0, #0
 8000c92:	f000 fc0c 	bl	80014ae <Make_CAN_ID>
 8000c96:	f04f 0200 	mov.w	r2, #0
 8000c9a:	f04f 0300 	mov.w	r3, #0
 8000c9e:	0b42      	lsrs	r2, r0, #13
 8000ca0:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000ca4:	0b4b      	lsrs	r3, r1, #13
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000caa:	2301      	movs	r3, #1
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f000 fbfc 	bl	80014ae <Make_CAN_ID>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	460b      	mov	r3, r1
 8000cba:	4613      	mov	r3, r2
 8000cbc:	00da      	lsls	r2, r3, #3
 8000cbe:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(0, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000cca:	231f      	movs	r3, #31
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f000 fbec 	bl	80014ae <Make_CAN_ID>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	460b      	mov	r3, r1
 8000cda:	4613      	mov	r3, r2
 8000cdc:	00da      	lsls	r2, r3, #3
 8000cde:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000cea:	4b2f      	ldr	r3, [pc, #188]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f107 020c 	add.w	r2, r7, #12
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f001 fca1 	bl	800263c <HAL_CAN_ConfigFilter>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <CAN_SystemInit+0x304>
		/* Filter configuration Error */
		Error_Handler();
 8000d00:	f000 ff92 	bl	8001c28 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 4;
 8000d04:	2304      	movs	r3, #4
 8000d06:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) >> 13; // 上16bit
 8000d08:	2300      	movs	r3, #0
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2004      	movs	r0, #4
 8000d10:	f000 fbcd 	bl	80014ae <Make_CAN_ID>
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	0b42      	lsrs	r2, r0, #13
 8000d1e:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000d22:	0b4b      	lsrs	r3, r1, #13
 8000d24:	4613      	mov	r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) >> 13;
 8000d28:	231f      	movs	r3, #31
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2004      	movs	r0, #4
 8000d30:	f000 fbbd 	bl	80014ae <Make_CAN_ID>
 8000d34:	f04f 0200 	mov.w	r2, #0
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	0b42      	lsrs	r2, r0, #13
 8000d3e:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000d42:	0b4b      	lsrs	r3, r1, #13
 8000d44:	4613      	mov	r3, r2
 8000d46:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000d48:	2300      	movs	r3, #0
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2004      	movs	r0, #4
 8000d50:	f000 fbad 	bl	80014ae <Make_CAN_ID>
 8000d54:	4602      	mov	r2, r0
 8000d56:	460b      	mov	r3, r1
 8000d58:	4613      	mov	r3, r2
 8000d5a:	00da      	lsls	r2, r3, #3
 8000d5c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000d60:	4013      	ands	r3, r2
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000d68:	231f      	movs	r3, #31
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2004      	movs	r0, #4
 8000d70:	f000 fb9d 	bl	80014ae <Make_CAN_ID>
 8000d74:	4602      	mov	r2, r0
 8000d76:	460b      	mov	r3, r1
 8000d78:	4613      	mov	r3, r2
 8000d7a:	00da      	lsls	r2, r3, #3
 8000d7c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000d80:	4013      	ands	r3, r2
 8000d82:	f043 0304 	orr.w	r3, r3, #4
 8000d86:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f107 020c 	add.w	r2, r7, #12
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 fc52 	bl	800263c <HAL_CAN_ConfigFilter>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d006      	beq.n	8000dac <CAN_SystemInit+0x3ac>
		/* Filter configuration Error */
		Error_Handler();
 8000d9e:	f000 ff43 	bl	8001c28 <Error_Handler>
 8000da2:	e003      	b.n	8000dac <CAN_SystemInit+0x3ac>
 8000da4:	200001e0 	.word	0x200001e0
 8000da8:	200001cc 	.word	0x200001cc
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 5;
 8000dac:	2305      	movs	r3, #5
 8000dae:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 8000db0:	2300      	movs	r3, #0
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	2005      	movs	r0, #5
 8000db8:	f000 fb79 	bl	80014ae <Make_CAN_ID>
 8000dbc:	f04f 0200 	mov.w	r2, #0
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	0b42      	lsrs	r2, r0, #13
 8000dc6:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000dca:	0b4b      	lsrs	r3, r1, #13
 8000dcc:	4613      	mov	r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) >> 13;
 8000dd0:	231f      	movs	r3, #31
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2005      	movs	r0, #5
 8000dd8:	f000 fb69 	bl	80014ae <Make_CAN_ID>
 8000ddc:	f04f 0200 	mov.w	r2, #0
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	0b42      	lsrs	r2, r0, #13
 8000de6:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000dea:	0b4b      	lsrs	r3, r1, #13
 8000dec:	4613      	mov	r3, r2
 8000dee:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000df0:	2300      	movs	r3, #0
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	2005      	movs	r0, #5
 8000df8:	f000 fb59 	bl	80014ae <Make_CAN_ID>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	4613      	mov	r3, r2
 8000e02:	00da      	lsls	r2, r3, #3
 8000e04:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000e08:	4013      	ands	r3, r2
 8000e0a:	f043 0304 	orr.w	r3, r3, #4
 8000e0e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000e10:	231f      	movs	r3, #31
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	2005      	movs	r0, #5
 8000e18:	f000 fb49 	bl	80014ae <Make_CAN_ID>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	4613      	mov	r3, r2
 8000e22:	00da      	lsls	r2, r3, #3
 8000e24:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000e28:	4013      	ands	r3, r2
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000e30:	4b44      	ldr	r3, [pc, #272]	; (8000f44 <CAN_SystemInit+0x544>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f107 020c 	add.w	r2, r7, #12
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 fbfe 	bl	800263c <HAL_CAN_ConfigFilter>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <CAN_SystemInit+0x44a>
		/* Filter configuration Error */
		Error_Handler();
 8000e46:	f000 feef 	bl	8001c28 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 6;
 8000e4a:	2306      	movs	r3, #6
 8000e4c:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 8000e4e:	2300      	movs	r3, #0
 8000e50:	2200      	movs	r2, #0
 8000e52:	2100      	movs	r1, #0
 8000e54:	2006      	movs	r0, #6
 8000e56:	f000 fb2a 	bl	80014ae <Make_CAN_ID>
 8000e5a:	f04f 0200 	mov.w	r2, #0
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	0b42      	lsrs	r2, r0, #13
 8000e64:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000e68:	0b4b      	lsrs	r3, r1, #13
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) >> 13;
 8000e6e:	231f      	movs	r3, #31
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	2006      	movs	r0, #6
 8000e76:	f000 fb1a 	bl	80014ae <Make_CAN_ID>
 8000e7a:	f04f 0200 	mov.w	r2, #0
 8000e7e:	f04f 0300 	mov.w	r3, #0
 8000e82:	0b42      	lsrs	r2, r0, #13
 8000e84:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000e88:	0b4b      	lsrs	r3, r1, #13
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000e8e:	2300      	movs	r3, #0
 8000e90:	2200      	movs	r2, #0
 8000e92:	2100      	movs	r1, #0
 8000e94:	2006      	movs	r0, #6
 8000e96:	f000 fb0a 	bl	80014ae <Make_CAN_ID>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	00da      	lsls	r2, r3, #3
 8000ea2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000eae:	231f      	movs	r3, #31
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2006      	movs	r0, #6
 8000eb6:	f000 fafa 	bl	80014ae <Make_CAN_ID>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	00da      	lsls	r2, r3, #3
 8000ec2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000ece:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <CAN_SystemInit+0x544>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f107 020c 	add.w	r2, r7, #12
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f001 fbaf 	bl	800263c <HAL_CAN_ConfigFilter>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <CAN_SystemInit+0x4e8>
		/* Filter configuration Error */
		Error_Handler();
 8000ee4:	f000 fea0 	bl	8001c28 <Error_Handler>
	}

	if (HAL_CAN_Start(phcan) != HAL_OK){
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <CAN_SystemInit+0x544>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 fc91 	bl	8002814 <HAL_CAN_Start>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d004      	beq.n	8000f02 <CAN_SystemInit+0x502>
		printf(" -> Start Error\n");
 8000ef8:	4813      	ldr	r0, [pc, #76]	; (8000f48 <CAN_SystemInit+0x548>)
 8000efa:	f006 f96b 	bl	80071d4 <puts>
		Error_Handler();
 8000efe:	f000 fe93 	bl	8001c28 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <CAN_SystemInit+0x544>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2102      	movs	r1, #2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f001 fede 	bl	8002cca <HAL_CAN_ActivateNotification>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d004      	beq.n	8000f1e <CAN_SystemInit+0x51e>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 8000f14:	480d      	ldr	r0, [pc, #52]	; (8000f4c <CAN_SystemInit+0x54c>)
 8000f16:	f006 f8d7 	bl	80070c8 <iprintf>
		Error_Handler();
 8000f1a:	f000 fe85 	bl	8001c28 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK){
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <CAN_SystemInit+0x544>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2101      	movs	r1, #1
 8000f24:	4618      	mov	r0, r3
 8000f26:	f001 fed0 	bl	8002cca <HAL_CAN_ActivateNotification>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d004      	beq.n	8000f3a <CAN_SystemInit+0x53a>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 8000f30:	4806      	ldr	r0, [pc, #24]	; (8000f4c <CAN_SystemInit+0x54c>)
 8000f32:	f006 f8c9 	bl	80070c8 <iprintf>
		Error_Handler();
 8000f36:	f000 fe77 	bl	8001c28 <Error_Handler>
	}
}
 8000f3a:	bf00      	nop
 8000f3c:	3738      	adds	r7, #56	; 0x38
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200001cc 	.word	0x200001cc
 8000f48:	08008108 	.word	0x08008108
 8000f4c:	08008118 	.word	0x08008118

08000f50 <CAN_WaitConnect>:

/**
 * @brief CANの全デバイスの接続が確認されるまで待つ.
 *
 */
void CAN_WaitConnect(NUM_OF_DEVICES *num_of){ // 他のデバイスが接続されるのを待つ
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	while (all_node_detected == 0){
 8000f58:	e006      	b.n	8000f68 <CAN_WaitConnect+0x18>
		printf("Waiting CAN_NODES Wake Up...\n\r");
 8000f5a:	484c      	ldr	r0, [pc, #304]	; (800108c <CAN_WaitConnect+0x13c>)
 8000f5c:	f006 f8b4 	bl	80070c8 <iprintf>
		HAL_Delay(500);
 8000f60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f64:	f001 fa4a 	bl	80023fc <HAL_Delay>
	while (all_node_detected == 0){
 8000f68:	4b49      	ldr	r3, [pc, #292]	; (8001090 <CAN_WaitConnect+0x140>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0f3      	beq.n	8000f5a <CAN_WaitConnect+0xa>
	}
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	e00a      	b.n	8000f8e <CAN_WaitConnect+0x3e>
		printf("MCMD1 No.%d\n\r", node_id_list[NODE_MCMD1][i]);
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	4a46      	ldr	r2, [pc, #280]	; (8001094 <CAN_WaitConnect+0x144>)
 8000f7c:	4413      	add	r3, r2
 8000f7e:	79db      	ldrb	r3, [r3, #7]
 8000f80:	4619      	mov	r1, r3
 8000f82:	4845      	ldr	r0, [pc, #276]	; (8001098 <CAN_WaitConnect+0x148>)
 8000f84:	f006 f8a0 	bl	80070c8 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	73fb      	strb	r3, [r7, #15]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	7bfa      	ldrb	r2, [r7, #15]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d3ef      	bcc.n	8000f78 <CAN_WaitConnect+0x28>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	73bb      	strb	r3, [r7, #14]
 8000f9c:	e00a      	b.n	8000fb4 <CAN_WaitConnect+0x64>
		printf("MCMD2 No.%d\n\r", node_id_list[NODE_MCMD2][i]);
 8000f9e:	7bbb      	ldrb	r3, [r7, #14]
 8000fa0:	4a3c      	ldr	r2, [pc, #240]	; (8001094 <CAN_WaitConnect+0x144>)
 8000fa2:	4413      	add	r3, r2
 8000fa4:	7b9b      	ldrb	r3, [r3, #14]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	483c      	ldr	r0, [pc, #240]	; (800109c <CAN_WaitConnect+0x14c>)
 8000faa:	f006 f88d 	bl	80070c8 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	73bb      	strb	r3, [r7, #14]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	785b      	ldrb	r3, [r3, #1]
 8000fb8:	7bba      	ldrb	r2, [r7, #14]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d3ef      	bcc.n	8000f9e <CAN_WaitConnect+0x4e>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	737b      	strb	r3, [r7, #13]
 8000fc2:	e00a      	b.n	8000fda <CAN_WaitConnect+0x8a>
		printf("MCMD3 No.%d\n\r", node_id_list[NODE_MCMD3][i]);
 8000fc4:	7b7b      	ldrb	r3, [r7, #13]
 8000fc6:	4a33      	ldr	r2, [pc, #204]	; (8001094 <CAN_WaitConnect+0x144>)
 8000fc8:	4413      	add	r3, r2
 8000fca:	7d5b      	ldrb	r3, [r3, #21]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4834      	ldr	r0, [pc, #208]	; (80010a0 <CAN_WaitConnect+0x150>)
 8000fd0:	f006 f87a 	bl	80070c8 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 8000fd4:	7b7b      	ldrb	r3, [r7, #13]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	737b      	strb	r3, [r7, #13]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	789b      	ldrb	r3, [r3, #2]
 8000fde:	7b7a      	ldrb	r2, [r7, #13]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d3ef      	bcc.n	8000fc4 <CAN_WaitConnect+0x74>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	733b      	strb	r3, [r7, #12]
 8000fe8:	e00b      	b.n	8001002 <CAN_WaitConnect+0xb2>
		printf("MCMD4 No.%d\n\r", node_id_list[NODE_MCMD4][i]);
 8000fea:	7b3b      	ldrb	r3, [r7, #12]
 8000fec:	4a29      	ldr	r2, [pc, #164]	; (8001094 <CAN_WaitConnect+0x144>)
 8000fee:	4413      	add	r3, r2
 8000ff0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	482b      	ldr	r0, [pc, #172]	; (80010a4 <CAN_WaitConnect+0x154>)
 8000ff8:	f006 f866 	bl	80070c8 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 8000ffc:	7b3b      	ldrb	r3, [r7, #12]
 8000ffe:	3301      	adds	r3, #1
 8001000:	733b      	strb	r3, [r7, #12]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	795b      	ldrb	r3, [r3, #5]
 8001006:	7b3a      	ldrb	r2, [r7, #12]
 8001008:	429a      	cmp	r2, r3
 800100a:	d3ee      	bcc.n	8000fea <CAN_WaitConnect+0x9a>
	for (uint8_t i = 0; i < num_of->servo; i++)
 800100c:	2300      	movs	r3, #0
 800100e:	72fb      	strb	r3, [r7, #11]
 8001010:	e00a      	b.n	8001028 <CAN_WaitConnect+0xd8>
		printf("Servo No.%d\n\r", node_id_list[NODE_SERVO][i]);
 8001012:	7afb      	ldrb	r3, [r7, #11]
 8001014:	4a1f      	ldr	r2, [pc, #124]	; (8001094 <CAN_WaitConnect+0x144>)
 8001016:	4413      	add	r3, r2
 8001018:	7f1b      	ldrb	r3, [r3, #28]
 800101a:	4619      	mov	r1, r3
 800101c:	4822      	ldr	r0, [pc, #136]	; (80010a8 <CAN_WaitConnect+0x158>)
 800101e:	f006 f853 	bl	80070c8 <iprintf>
	for (uint8_t i = 0; i < num_of->servo; i++)
 8001022:	7afb      	ldrb	r3, [r7, #11]
 8001024:	3301      	adds	r3, #1
 8001026:	72fb      	strb	r3, [r7, #11]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	78db      	ldrb	r3, [r3, #3]
 800102c:	7afa      	ldrb	r2, [r7, #11]
 800102e:	429a      	cmp	r2, r3
 8001030:	d3ef      	bcc.n	8001012 <CAN_WaitConnect+0xc2>
	for (uint8_t i = 0; i < num_of->air; i++)
 8001032:	2300      	movs	r3, #0
 8001034:	72bb      	strb	r3, [r7, #10]
 8001036:	e00b      	b.n	8001050 <CAN_WaitConnect+0x100>
		printf("Air No.%d\n\r", node_id_list[NODE_AIR][i]);
 8001038:	7abb      	ldrb	r3, [r7, #10]
 800103a:	4a16      	ldr	r2, [pc, #88]	; (8001094 <CAN_WaitConnect+0x144>)
 800103c:	4413      	add	r3, r2
 800103e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001042:	4619      	mov	r1, r3
 8001044:	4819      	ldr	r0, [pc, #100]	; (80010ac <CAN_WaitConnect+0x15c>)
 8001046:	f006 f83f 	bl	80070c8 <iprintf>
	for (uint8_t i = 0; i < num_of->air; i++)
 800104a:	7abb      	ldrb	r3, [r7, #10]
 800104c:	3301      	adds	r3, #1
 800104e:	72bb      	strb	r3, [r7, #10]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	791b      	ldrb	r3, [r3, #4]
 8001054:	7aba      	ldrb	r2, [r7, #10]
 8001056:	429a      	cmp	r2, r3
 8001058:	d3ee      	bcc.n	8001038 <CAN_WaitConnect+0xe8>
	for (uint8_t i = 0; i < num_of->other; i++)
 800105a:	2300      	movs	r3, #0
 800105c:	727b      	strb	r3, [r7, #9]
 800105e:	e00b      	b.n	8001078 <CAN_WaitConnect+0x128>
		printf("Others No.%d\n\r", node_id_list[NODE_OTHER][i]);
 8001060:	7a7b      	ldrb	r3, [r7, #9]
 8001062:	4a0c      	ldr	r2, [pc, #48]	; (8001094 <CAN_WaitConnect+0x144>)
 8001064:	4413      	add	r3, r2
 8001066:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800106a:	4619      	mov	r1, r3
 800106c:	4810      	ldr	r0, [pc, #64]	; (80010b0 <CAN_WaitConnect+0x160>)
 800106e:	f006 f82b 	bl	80070c8 <iprintf>
	for (uint8_t i = 0; i < num_of->other; i++)
 8001072:	7a7b      	ldrb	r3, [r7, #9]
 8001074:	3301      	adds	r3, #1
 8001076:	727b      	strb	r3, [r7, #9]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	799b      	ldrb	r3, [r3, #6]
 800107c:	7a7a      	ldrb	r2, [r7, #9]
 800107e:	429a      	cmp	r2, r3
 8001080:	d3ee      	bcc.n	8001060 <CAN_WaitConnect+0x110>
}
 8001082:	bf00      	nop
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	0800813c 	.word	0x0800813c
 8001090:	200001d0 	.word	0x200001d0
 8001094:	200001e0 	.word	0x200001e0
 8001098:	0800815c 	.word	0x0800815c
 800109c:	0800816c 	.word	0x0800816c
 80010a0:	0800817c 	.word	0x0800817c
 80010a4:	0800818c 	.word	0x0800818c
 80010a8:	0800819c 	.word	0x0800819c
 80010ac:	080081ac 	.word	0x080081ac
 80010b0:	080081b8 	.word	0x080081b8

080010b4 <MCMD_ChangeControl>:

//// MCMD
void MCMD_ChangeControl(MCMD_HandleTypedef *hmcmd){ // Ctrl typeを変更する.
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	float fdata[2];
	fdata[0] = hmcmd->ctrl_param.PID_param.kp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.PID_param.ki;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL1), (uint8_t *)&fdata, sizeof(fdata));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2105      	movs	r1, #5
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 f9c5 	bl	800145c <Make_CAN_ID_from_CAN_Device>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4610      	mov	r0, r2
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	2208      	movs	r2, #8
 80010de:	4619      	mov	r1, r3
 80010e0:	f7ff fc3e 	bl	8000960 <SendBytes>
	fdata[0] = hmcmd->ctrl_param.PID_param.kd;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.accel_limit_size;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ee:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL2), (uint8_t *)&fdata, sizeof(fdata));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2106      	movs	r1, #6
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 f9b1 	bl	800145c <Make_CAN_ID_from_CAN_Device>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4610      	mov	r0, r2
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	2208      	movs	r2, #8
 8001106:	4619      	mov	r1, r3
 8001108:	f7ff fc2a 	bl	8000960 <SendBytes>

    fdata[0] = hmcmd->ctrl_param.PID_param.kff;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001110:	613b      	str	r3, [r7, #16]
    fdata[1] = hmcmd->ctrl_param.gravity_compensation_gain;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001116:	617b      	str	r3, [r7, #20]
    SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL3), (uint8_t *)&fdata, sizeof(fdata));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2107      	movs	r1, #7
 800111c:	4618      	mov	r0, r3
 800111e:	f000 f99d 	bl	800145c <Make_CAN_ID_from_CAN_Device>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4610      	mov	r0, r2
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	2208      	movs	r2, #8
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fc16 	bl	8000960 <SendBytes>

	uint8_t bdata[6];
	bdata[0] = hmcmd->ctrl_param.ctrl_type;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7d1b      	ldrb	r3, [r3, #20]
 8001138:	723b      	strb	r3, [r7, #8]
	bdata[1] = hmcmd->ctrl_param.accel_limit;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001140:	727b      	strb	r3, [r7, #9]
	bdata[2] = hmcmd->ctrl_param.feedback;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001148:	72bb      	strb	r3, [r7, #10]
	bdata[3] = hmcmd->ctrl_param.timup_monitor;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001150:	72fb      	strb	r3, [r7, #11]
	bdata[4] = hmcmd->fb_type;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	78db      	ldrb	r3, [r3, #3]
 8001156:	733b      	strb	r3, [r7, #12]
    bdata[5] = hmcmd->ctrl_param.gravity_compensation; // TODO : new
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800115e:	737b      	strb	r3, [r7, #13]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL4), (uint8_t *)&bdata, sizeof(bdata));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2108      	movs	r1, #8
 8001164:	4618      	mov	r0, r3
 8001166:	f000 f979 	bl	800145c <Make_CAN_ID_from_CAN_Device>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4610      	mov	r0, r2
 8001170:	f107 0308 	add.w	r3, r7, #8
 8001174:	2206      	movs	r2, #6
 8001176:	4619      	mov	r1, r3
 8001178:	f7ff fbf2 	bl	8000960 <SendBytes>
}
 800117c:	bf00      	nop
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <MCMD_init>:

void MCMD_init(MCMD_HandleTypedef *hmcmd){
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	bdata[0] = hmcmd->enc_dir;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	791b      	ldrb	r3, [r3, #4]
 8001190:	753b      	strb	r3, [r7, #20]
	bdata[1] = hmcmd->rot_dir;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	795b      	ldrb	r3, [r3, #5]
 8001196:	757b      	strb	r3, [r7, #21]
	bdata[2] = hmcmd->calib;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	79db      	ldrb	r3, [r3, #7]
 800119c:	75bb      	strb	r3, [r7, #22]
	bdata[3] = hmcmd->limit_sw_type;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	799b      	ldrb	r3, [r3, #6]
 80011a2:	75fb      	strb	r3, [r7, #23]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT1), bdata, sizeof(bdata));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2102      	movs	r1, #2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 f957 	bl	800145c <Make_CAN_ID_from_CAN_Device>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4610      	mov	r0, r2
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2204      	movs	r2, #4
 80011ba:	4619      	mov	r1, r3
 80011bc:	f7ff fbd0 	bl	8000960 <SendBytes>
	float fdata[2];
	fdata[0] = hmcmd->offset;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	60fb      	str	r3, [r7, #12]
	fdata[1] = hmcmd->calib_duty;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	613b      	str	r3, [r7, #16]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT2), (uint8_t *)&fdata, sizeof(fdata));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2103      	movs	r1, #3
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f943 	bl	800145c <Make_CAN_ID_from_CAN_Device>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	2208      	movs	r2, #8
 80011e2:	4619      	mov	r1, r3
 80011e4:	f7ff fbbc 	bl	8000960 <SendBytes>

	fdata[0] = hmcmd->quant_per_unit;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	60fb      	str	r3, [r7, #12]
	fdata[1] = 0;
 80011ee:	f04f 0300 	mov.w	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT3), (uint8_t *)&fdata, sizeof(fdata));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2104      	movs	r1, #4
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 f92f 	bl	800145c <Make_CAN_ID_from_CAN_Device>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	2208      	movs	r2, #8
 800120a:	4619      	mov	r1, r3
 800120c:	f7ff fba8 	bl	8000960 <SendBytes>
	HAL_Delay(50); // これないと動かない(なぜ?)
 8001210:	2032      	movs	r0, #50	; 0x32
 8001212:	f001 f8f3 	bl	80023fc <HAL_Delay>
	MCMD_ChangeControl(hmcmd);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ff4c 	bl	80010b4 <MCMD_ChangeControl>
}
 800121c:	bf00      	nop
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <MCMD_Calib>:

void MCMD_Calib(MCMD_HandleTypedef *hmcmd){
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CALIB), bdata, sizeof(bdata));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2109      	movs	r1, #9
 8001230:	4618      	mov	r0, r3
 8001232:	f000 f913 	bl	800145c <Make_CAN_ID_from_CAN_Device>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	2204      	movs	r2, #4
 8001242:	4619      	mov	r1, r3
 8001244:	f7ff fb8c 	bl	8000960 <SendBytes>
}
 8001248:	bf00      	nop
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <MCMD_Control_Enable>:

void MCMD_Control_Enable(MCMD_HandleTypedef *hmcmd){
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_ENABLE), bdata, sizeof(bdata));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	210a      	movs	r1, #10
 800125c:	4618      	mov	r0, r3
 800125e:	f000 f8fd 	bl	800145c <Make_CAN_ID_from_CAN_Device>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4610      	mov	r0, r2
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2204      	movs	r2, #4
 800126e:	4619      	mov	r1, r3
 8001270:	f7ff fb76 	bl	8000960 <SendBytes>
}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <MCMD_SetTarget>:
void MCMD_Control_Disable(MCMD_HandleTypedef *hmcmd){
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_DISABLE), bdata, sizeof(bdata));
}

void MCMD_SetTarget(MCMD_HandleTypedef *hmcmd, float target){
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	ed87 0a00 	vstr	s0, [r7]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_SET_TARGET), (uint8_t *)&target, sizeof(target));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	210c      	movs	r1, #12
 800128c:	4618      	mov	r0, r3
 800128e:	f000 f8e5 	bl	800145c <Make_CAN_ID_from_CAN_Device>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	463b      	mov	r3, r7
 800129a:	2204      	movs	r2, #4
 800129c:	4619      	mov	r1, r3
 800129e:	f7ff fb5f 	bl	8000960 <SendBytes>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <Get_MCMD_Feedback>:

MCMD_Feedback_Typedef Get_MCMD_Feedback(CAN_Device *can_device){
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
	MCMD_Feedback_Typedef ans;
	if (can_device->node_type == NODE_MCMD1){
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d12f      	bne.n	800131e <Get_MCMD_Feedback+0x72>
		ans.fb_type = _feedback_table_mcmd1[(can_device->node_id)].feedback_motor[(can_device->device_num)].fb_type;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	785b      	ldrb	r3, [r3, #1]
 80012c2:	4618      	mov	r0, r3
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	789b      	ldrb	r3, [r3, #2]
 80012c8:	4619      	mov	r1, r3
 80012ca:	4a5f      	ldr	r2, [pc, #380]	; (8001448 <Get_MCMD_Feedback+0x19c>)
 80012cc:	0043      	lsls	r3, r0, #1
 80012ce:	440b      	add	r3, r1
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	4413      	add	r3, r2
 80012d4:	791b      	ldrb	r3, [r3, #4]
 80012d6:	733b      	strb	r3, [r7, #12]
		ans.status = _feedback_table_mcmd1[(can_device->node_id)].feedback_motor[(can_device->device_num)].status;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	785b      	ldrb	r3, [r3, #1]
 80012dc:	4618      	mov	r0, r3
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	789b      	ldrb	r3, [r3, #2]
 80012e2:	4619      	mov	r1, r3
 80012e4:	4a58      	ldr	r2, [pc, #352]	; (8001448 <Get_MCMD_Feedback+0x19c>)
 80012e6:	0043      	lsls	r3, r0, #1
 80012e8:	440b      	add	r3, r1
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	4413      	add	r3, r2
 80012ee:	795b      	ldrb	r3, [r3, #5]
 80012f0:	737b      	strb	r3, [r7, #13]
		ans.value = _feedback_table_mcmd1[(can_device->node_id)].feedback_motor[(can_device->device_num)].value;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	785b      	ldrb	r3, [r3, #1]
 80012f6:	4618      	mov	r0, r3
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	789b      	ldrb	r3, [r3, #2]
 80012fc:	4619      	mov	r1, r3
 80012fe:	4a52      	ldr	r2, [pc, #328]	; (8001448 <Get_MCMD_Feedback+0x19c>)
 8001300:	0043      	lsls	r3, r0, #1
 8001302:	440b      	add	r3, r1
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	4413      	add	r3, r2
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	60bb      	str	r3, [r7, #8]
		return ans;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	461a      	mov	r2, r3
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001318:	e882 0003 	stmia.w	r2, {r0, r1}
 800131c:	e08f      	b.n	800143e <Get_MCMD_Feedback+0x192>
	}else if (can_device->node_type == NODE_MCMD2){
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b02      	cmp	r3, #2
 8001324:	d111      	bne.n	800134a <Get_MCMD_Feedback+0x9e>
		return _feedback_table_mcmd2[(can_device->node_id)].feedback_motor[(can_device->device_num)];
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	785b      	ldrb	r3, [r3, #1]
 800132a:	461c      	mov	r4, r3
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	789b      	ldrb	r3, [r3, #2]
 8001330:	4618      	mov	r0, r3
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	4a45      	ldr	r2, [pc, #276]	; (800144c <Get_MCMD_Feedback+0x1a0>)
 8001336:	0063      	lsls	r3, r4, #1
 8001338:	4403      	add	r3, r0
 800133a:	460c      	mov	r4, r1
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	4413      	add	r3, r2
 8001340:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001344:	e884 0003 	stmia.w	r4, {r0, r1}
 8001348:	e079      	b.n	800143e <Get_MCMD_Feedback+0x192>
	}else if (can_device->node_type == NODE_MCMD3){
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b03      	cmp	r3, #3
 8001350:	d12f      	bne.n	80013b2 <Get_MCMD_Feedback+0x106>
		ans.fb_type = _feedback_table_mcmd3[(can_device->node_id)].feedback_motor[(can_device->device_num)].fb_type;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	785b      	ldrb	r3, [r3, #1]
 8001356:	4618      	mov	r0, r3
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	789b      	ldrb	r3, [r3, #2]
 800135c:	4619      	mov	r1, r3
 800135e:	4a3c      	ldr	r2, [pc, #240]	; (8001450 <Get_MCMD_Feedback+0x1a4>)
 8001360:	0043      	lsls	r3, r0, #1
 8001362:	440b      	add	r3, r1
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	4413      	add	r3, r2
 8001368:	791b      	ldrb	r3, [r3, #4]
 800136a:	733b      	strb	r3, [r7, #12]
		ans.status = _feedback_table_mcmd3[(can_device->node_id)].feedback_motor[(can_device->device_num)].status;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	785b      	ldrb	r3, [r3, #1]
 8001370:	4618      	mov	r0, r3
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	789b      	ldrb	r3, [r3, #2]
 8001376:	4619      	mov	r1, r3
 8001378:	4a35      	ldr	r2, [pc, #212]	; (8001450 <Get_MCMD_Feedback+0x1a4>)
 800137a:	0043      	lsls	r3, r0, #1
 800137c:	440b      	add	r3, r1
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	4413      	add	r3, r2
 8001382:	795b      	ldrb	r3, [r3, #5]
 8001384:	737b      	strb	r3, [r7, #13]
		ans.value = _feedback_table_mcmd3[(can_device->node_id)].feedback_motor[(can_device->device_num)].value;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	785b      	ldrb	r3, [r3, #1]
 800138a:	4618      	mov	r0, r3
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	789b      	ldrb	r3, [r3, #2]
 8001390:	4619      	mov	r1, r3
 8001392:	4a2f      	ldr	r2, [pc, #188]	; (8001450 <Get_MCMD_Feedback+0x1a4>)
 8001394:	0043      	lsls	r3, r0, #1
 8001396:	440b      	add	r3, r1
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4413      	add	r3, r2
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	60bb      	str	r3, [r7, #8]
		return ans;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	461a      	mov	r2, r3
 80013a4:	f107 0308 	add.w	r3, r7, #8
 80013a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013ac:	e882 0003 	stmia.w	r2, {r0, r1}
 80013b0:	e045      	b.n	800143e <Get_MCMD_Feedback+0x192>
	}else if (can_device->node_type == NODE_MCMD4){
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d12f      	bne.n	800141a <Get_MCMD_Feedback+0x16e>
		ans.fb_type = _feedback_table_mcmd4[(can_device->node_id)].feedback_motor[(can_device->device_num)].fb_type;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	785b      	ldrb	r3, [r3, #1]
 80013be:	4618      	mov	r0, r3
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	789b      	ldrb	r3, [r3, #2]
 80013c4:	4619      	mov	r1, r3
 80013c6:	4a23      	ldr	r2, [pc, #140]	; (8001454 <Get_MCMD_Feedback+0x1a8>)
 80013c8:	0043      	lsls	r3, r0, #1
 80013ca:	440b      	add	r3, r1
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	4413      	add	r3, r2
 80013d0:	791b      	ldrb	r3, [r3, #4]
 80013d2:	733b      	strb	r3, [r7, #12]
		ans.status = _feedback_table_mcmd4[(can_device->node_id)].feedback_motor[(can_device->device_num)].status;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	785b      	ldrb	r3, [r3, #1]
 80013d8:	4618      	mov	r0, r3
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	789b      	ldrb	r3, [r3, #2]
 80013de:	4619      	mov	r1, r3
 80013e0:	4a1c      	ldr	r2, [pc, #112]	; (8001454 <Get_MCMD_Feedback+0x1a8>)
 80013e2:	0043      	lsls	r3, r0, #1
 80013e4:	440b      	add	r3, r1
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	4413      	add	r3, r2
 80013ea:	795b      	ldrb	r3, [r3, #5]
 80013ec:	737b      	strb	r3, [r7, #13]
		ans.value = _feedback_table_mcmd4[(can_device->node_id)].feedback_motor[(can_device->device_num)].value;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	785b      	ldrb	r3, [r3, #1]
 80013f2:	4618      	mov	r0, r3
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	789b      	ldrb	r3, [r3, #2]
 80013f8:	4619      	mov	r1, r3
 80013fa:	4a16      	ldr	r2, [pc, #88]	; (8001454 <Get_MCMD_Feedback+0x1a8>)
 80013fc:	0043      	lsls	r3, r0, #1
 80013fe:	440b      	add	r3, r1
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	4413      	add	r3, r2
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	60bb      	str	r3, [r7, #8]
		return ans;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	461a      	mov	r2, r3
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001414:	e882 0003 	stmia.w	r2, {r0, r1}
 8001418:	e011      	b.n	800143e <Get_MCMD_Feedback+0x192>
	}else{
		ans.fb_type = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	733b      	strb	r3, [r7, #12]
		ans.status = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	737b      	strb	r3, [r7, #13]
		ans.value = 0.0f;
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
		printf("get feed back error\n\r");
 8001428:	480b      	ldr	r0, [pc, #44]	; (8001458 <Get_MCMD_Feedback+0x1ac>)
 800142a:	f005 fe4d 	bl	80070c8 <iprintf>
		return ans;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	461a      	mov	r2, r3
 8001432:	f107 0308 	add.w	r3, r7, #8
 8001436:	e893 0003 	ldmia.w	r3, {r0, r1}
 800143a:	e882 0003 	stmia.w	r2, {r0, r1}
	}
}
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	bd90      	pop	{r4, r7, pc}
 8001446:	bf00      	nop
 8001448:	20000220 	.word	0x20000220
 800144c:	200002c0 	.word	0x200002c0
 8001450:	20000360 	.word	0x20000360
 8001454:	20000400 	.word	0x20000400
 8001458:	080081c8 	.word	0x080081c8

0800145c <Make_CAN_ID_from_CAN_Device>:
/**
 * @brief CANのIDを設定する. 上16bitのみを使用
 * @param CAN_Device*
 * @param cmd
 */
uint64_t Make_CAN_ID_from_CAN_Device(CAN_Device* _can_device, uint8_t cmd){  // mainからmcmdなどへの送信
 800145c:	b4b0      	push	{r4, r5, r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	70fb      	strb	r3, [r7, #3]
    uint8_t node_type = (uint8_t)(_can_device->node_type) & (0b111);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	73fb      	strb	r3, [r7, #15]
    return (((node_type&0b111)<<11) | (((_can_device->node_id)&0b111)<<8) | (((_can_device->device_num)&0b111)<<5)
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	02db      	lsls	r3, r3, #11
 8001476:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	785b      	ldrb	r3, [r3, #1]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001484:	431a      	orrs	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	789b      	ldrb	r3, [r3, #2]
 800148a:	015b      	lsls	r3, r3, #5
 800148c:	b2db      	uxtb	r3, r3
 800148e:	431a      	orrs	r2, r3
            | (cmd&0b11111) );
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	f003 031f 	and.w	r3, r3, #31
 8001496:	4313      	orrs	r3, r2
 8001498:	17da      	asrs	r2, r3, #31
 800149a:	461c      	mov	r4, r3
 800149c:	4615      	mov	r5, r2
 800149e:	4622      	mov	r2, r4
 80014a0:	462b      	mov	r3, r5
}
 80014a2:	4610      	mov	r0, r2
 80014a4:	4619      	mov	r1, r3
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bcb0      	pop	{r4, r5, r7}
 80014ac:	4770      	bx	lr

080014ae <Make_CAN_ID>:
 * @param node_type
 * @param node_id
 * @param device_num
 * @param cmd
 */
uint64_t Make_CAN_ID(Node_Type node_type, uint8_t node_id, uint8_t device_num, uint8_t cmd){
 80014ae:	e92d 0390 	stmdb	sp!, {r4, r7, r8, r9}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4604      	mov	r4, r0
 80014b8:	4608      	mov	r0, r1
 80014ba:	4611      	mov	r1, r2
 80014bc:	461a      	mov	r2, r3
 80014be:	4623      	mov	r3, r4
 80014c0:	71fb      	strb	r3, [r7, #7]
 80014c2:	4603      	mov	r3, r0
 80014c4:	71bb      	strb	r3, [r7, #6]
 80014c6:	460b      	mov	r3, r1
 80014c8:	717b      	strb	r3, [r7, #5]
 80014ca:	4613      	mov	r3, r2
 80014cc:	713b      	strb	r3, [r7, #4]
    return ( (((uint8_t)node_type & 0b111) << 11) | (((node_id)&0b111) << 8) | ((device_num&0b111) << 5)
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	02db      	lsls	r3, r3, #11
 80014d2:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 80014d6:	79bb      	ldrb	r3, [r7, #6]
 80014d8:	021b      	lsls	r3, r3, #8
 80014da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80014de:	431a      	orrs	r2, r3
 80014e0:	797b      	ldrb	r3, [r7, #5]
 80014e2:	015b      	lsls	r3, r3, #5
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	431a      	orrs	r2, r3
             | (cmd&0b11111) );
 80014e8:	793b      	ldrb	r3, [r7, #4]
 80014ea:	f003 031f 	and.w	r3, r3, #31
 80014ee:	4313      	orrs	r3, r2
 80014f0:	17da      	asrs	r2, r3, #31
 80014f2:	4698      	mov	r8, r3
 80014f4:	4691      	mov	r9, r2
 80014f6:	4642      	mov	r2, r8
 80014f8:	464b      	mov	r3, r9
}
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	e8bd 0390 	ldmia.w	sp!, {r4, r7, r8, r9}
 8001506:	4770      	bx	lr

08001508 <Extract_CAN_Device>:

CAN_Device Extract_CAN_Device(uint64_t can_id) {  // CAN_IDからCAN_Deviceを抽出する
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	e9c7 0100 	strd	r0, r1, [r7]
    CAN_Device ans;
    ans.device_num = ((can_id>>5) & 0b111);
 8001512:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	f04f 0300 	mov.w	r3, #0
 800151e:	0942      	lsrs	r2, r0, #5
 8001520:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 8001524:	094b      	lsrs	r3, r1, #5
 8001526:	b2d3      	uxtb	r3, r2
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	b2db      	uxtb	r3, r3
 800152e:	72bb      	strb	r3, [r7, #10]
    ans.node_id = ((can_id>>8) & 0b111);
 8001530:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	0a02      	lsrs	r2, r0, #8
 800153e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001542:	0a0b      	lsrs	r3, r1, #8
 8001544:	b2d3      	uxtb	r3, r2
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	b2db      	uxtb	r3, r3
 800154c:	727b      	strb	r3, [r7, #9]
    ans.node_type = (Node_Type)( (can_id>>11) & 0b111);
 800154e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	f04f 0300 	mov.w	r3, #0
 800155a:	0ac2      	lsrs	r2, r0, #11
 800155c:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8001560:	0acb      	lsrs	r3, r1, #11
 8001562:	b2d3      	uxtb	r3, r2
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	b2db      	uxtb	r3, r3
 800156a:	723b      	strb	r3, [r7, #8]
    return ans;
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	f107 0208 	add.w	r2, r7, #8
 8001574:	6812      	ldr	r2, [r2, #0]
 8001576:	4611      	mov	r1, r2
 8001578:	8019      	strh	r1, [r3, #0]
 800157a:	3302      	adds	r3, #2
 800157c:	0c12      	lsrs	r2, r2, #16
 800157e:	701a      	strb	r2, [r3, #0]
 8001580:	2300      	movs	r3, #0
 8001582:	7b3a      	ldrb	r2, [r7, #12]
 8001584:	f362 0307 	bfi	r3, r2, #0, #8
 8001588:	7b7a      	ldrb	r2, [r7, #13]
 800158a:	f362 230f 	bfi	r3, r2, #8, #8
 800158e:	7bba      	ldrb	r2, [r7, #14]
 8001590:	f362 4317 	bfi	r3, r2, #16, #8
}
 8001594:	4618      	mov	r0, r3
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <Extract_CAN_CMD>:

uint8_t Extract_CAN_CMD(uint64_t can_id){ return ( can_id & 0b11111); }  // cmdを抽出
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	e9c7 0100 	strd	r0, r1, [r7]
 80015aa:	783b      	ldrb	r3, [r7, #0]
 80015ac:	f003 031f 	and.w	r3, r3, #31
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(uint8_t ch)
#else
#define PUTCHAR_PROTYPE int fputc(int ch,FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, &ch, 1, 500);
 80015ca:	1df9      	adds	r1, r7, #7
 80015cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015d0:	2201      	movs	r2, #1
 80015d2:	4804      	ldr	r0, [pc, #16]	; (80015e4 <__io_putchar+0x24>)
 80015d4:	f004 f9fe 	bl	80059d4 <HAL_UART_Transmit>
    return ch;
 80015d8:	79fb      	ldrb	r3, [r7, #7]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200025bc 	.word	0x200025bc

080015e8 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 80015f0:	f7ff f8aa 	bl	8000748 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8001604:	f7ff f8a6 	bl	8000754 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8001618:	f7ff f896 	bl	8000748 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan){
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 800162c:	f7ff f892 	bl	8000754 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8001640:	f7ff f882 	bl	8000748 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan){
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8001654:	f7ff f87e 	bl	8000754 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
    WhenCANRxFifo0MsgPending(hcan, &num_of_devices);
 8001668:	4903      	ldr	r1, [pc, #12]	; (8001678 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff f878 	bl	8000760 <WhenCANRxFifo0MsgPending>
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20002bac 	.word	0x20002bac

0800167c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800167c:	b590      	push	{r4, r7, lr}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001682:	f000 fe5e 	bl	8002342 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001686:	f000 f8bb 	bl	8001800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800168a:	f000 fa2b 	bl	8001ae4 <MX_GPIO_Init>
  MX_DMA_Init();
 800168e:	f000 fa0b 	bl	8001aa8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001692:	f000 f9ab 	bl	80019ec <MX_USART3_UART_Init>
  MX_ETH_Init();
 8001696:	f000 f95b 	bl	8001950 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 800169a:	f000 f9d7 	bl	8001a4c <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 800169e:	f000 f921 	bl	80018e4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  printf("Start Initializing CAN System:Begin\n\r");
 80016a2:	484b      	ldr	r0, [pc, #300]	; (80017d0 <main+0x154>)
 80016a4:	f005 fd10 	bl	80070c8 <iprintf>
   HAL_Delay(100);
 80016a8:	2064      	movs	r0, #100	; 0x64
 80016aa:	f000 fea7 	bl	80023fc <HAL_Delay>

   CAN_SystemInit(&hcan1); // F7のCAN通信のinit
 80016ae:	4849      	ldr	r0, [pc, #292]	; (80017d4 <main+0x158>)
 80016b0:	f7ff f9a6 	bl	8000a00 <CAN_SystemInit>

   // デバイス数の設定 (今回はmcmd4が1枚)
   num_of_devices.mcmd3 = 1;
 80016b4:	4b48      	ldr	r3, [pc, #288]	; (80017d8 <main+0x15c>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	709a      	strb	r2, [r3, #2]
   num_of_devices.mcmd4 = 0;
 80016ba:	4b47      	ldr	r3, [pc, #284]	; (80017d8 <main+0x15c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	715a      	strb	r2, [r3, #5]
   num_of_devices.air = 0;
 80016c0:	4b45      	ldr	r3, [pc, #276]	; (80017d8 <main+0x15c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	711a      	strb	r2, [r3, #4]
   num_of_devices.servo = 0;
 80016c6:	4b44      	ldr	r3, [pc, #272]	; (80017d8 <main+0x15c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	70da      	strb	r2, [r3, #3]

   printf("Start Initializing CAN System:End\n\r");
 80016cc:	4843      	ldr	r0, [pc, #268]	; (80017dc <main+0x160>)
 80016ce:	f005 fcfb 	bl	80070c8 <iprintf>
   HAL_Delay(100);
 80016d2:	2064      	movs	r0, #100	; 0x64
 80016d4:	f000 fe92 	bl	80023fc <HAL_Delay>
   CAN_WaitConnect(&num_of_devices);  // 設定された全てのCANモジュール基板との接続が確認できるまで待機
 80016d8:	483f      	ldr	r0, [pc, #252]	; (80017d8 <main+0x15c>)
 80016da:	f7ff fc39 	bl	8000f50 <CAN_WaitConnect>

   // ここからはCANモジュール基板の設定
    // 接続先のMCMDの設定
    mcmd4_struct.device.node_type = NODE_MCMD3;  // nodeのタイプ (NODE_MCMD3など)
 80016de:	4b40      	ldr	r3, [pc, #256]	; (80017e0 <main+0x164>)
 80016e0:	2203      	movs	r2, #3
 80016e2:	701a      	strb	r2, [r3, #0]
    mcmd4_struct.device.node_id = 1;  // 基板の番号 (基板上の半固定抵抗を回す事で設定できる)
 80016e4:	4b3e      	ldr	r3, [pc, #248]	; (80017e0 <main+0x164>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	705a      	strb	r2, [r3, #1]
    mcmd4_struct.device.device_num = 0;  // モーターの番号(MCMDなら0と1の2つが選べる)
 80016ea:	4b3d      	ldr	r3, [pc, #244]	; (80017e0 <main+0x164>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	709a      	strb	r2, [r3, #2]

    // 制御パラメータの設定
    mcmd4_struct.ctrl_param.ctrl_type = MCMD_CTRL_POS;  //制御タイプを設定
 80016f0:	4b3b      	ldr	r3, [pc, #236]	; (80017e0 <main+0x164>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	751a      	strb	r2, [r3, #20]
    mcmd4_struct.ctrl_param.PID_param.kp = 0.3f;  // Pゲイン 1.0
 80016f6:	4b3a      	ldr	r3, [pc, #232]	; (80017e0 <main+0x164>)
 80016f8:	4a3a      	ldr	r2, [pc, #232]	; (80017e4 <main+0x168>)
 80016fa:	619a      	str	r2, [r3, #24]
    mcmd4_struct.ctrl_param.PID_param.ki = 0.0f;  // Iゲイン 0.0
 80016fc:	4b38      	ldr	r3, [pc, #224]	; (80017e0 <main+0x164>)
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	61da      	str	r2, [r3, #28]
    mcmd4_struct.ctrl_param.PID_param.kd = 0.0f;  // Dゲイン 0.0 (Dゲインは使いにくい)
 8001704:	4b36      	ldr	r3, [pc, #216]	; (80017e0 <main+0x164>)
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
    mcmd4_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;  // PIDの偏差をclipするか
 800170c:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <main+0x164>)
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    mcmd4_struct.ctrl_param.accel_limit_size = 2.0f;  // PIDの偏差をclipする場合の絶対値のmax値
 8001714:	4b32      	ldr	r3, [pc, #200]	; (80017e0 <main+0x164>)
 8001716:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800171a:	635a      	str	r2, [r3, #52]	; 0x34
    mcmd4_struct.ctrl_param.feedback = MCMD_FB_ENABLE;  // MCMDからF7にフィードバックを送信するか否か
 800171c:	4b30      	ldr	r3, [pc, #192]	; (80017e0 <main+0x164>)
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    mcmd4_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;  // timeupは未実装なのでDISABLE。
 8001724:	4b2e      	ldr	r3, [pc, #184]	; (80017e0 <main+0x164>)
 8001726:	2201      	movs	r2, #1
 8001728:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    mcmd4_struct.enc_dir = MCMD_DIR_FW;  // Encoderの回転方向設定
 800172c:	4b2c      	ldr	r3, [pc, #176]	; (80017e0 <main+0x164>)
 800172e:	2200      	movs	r2, #0
 8001730:	711a      	strb	r2, [r3, #4]
    mcmd4_struct.rot_dir = MCMD_DIR_BC;  // モーターの回転方向設定
 8001732:	4b2b      	ldr	r3, [pc, #172]	; (80017e0 <main+0x164>)
 8001734:	2201      	movs	r2, #1
 8001736:	715a      	strb	r2, [r3, #5]
    mcmd4_struct.quant_per_unit = 59.0/6400.0f;  // エンコーダーの分解能に対する制御値の変化量の割合
 8001738:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <main+0x164>)
 800173a:	4a2b      	ldr	r2, [pc, #172]	; (80017e8 <main+0x16c>)
 800173c:	611a      	str	r2, [r3, #16]

    // 原点サーチの設定
    mcmd4_struct.limit_sw_type = LIMIT_SW_NC;  // 原点サーチにNomaly Closedのスイッチを用いる
 800173e:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <main+0x164>)
 8001740:	2200      	movs	r2, #0
 8001742:	719a      	strb	r2, [r3, #6]
    mcmd4_struct.calib = CALIBRATION_DISABLE;  // 原点サーチを行う。
 8001744:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <main+0x164>)
 8001746:	2201      	movs	r2, #1
 8001748:	71da      	strb	r2, [r3, #7]
    mcmd4_struct.calib_duty = 0.1f;  // 原点サーチ時のduty
 800174a:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <main+0x164>)
 800174c:	4a27      	ldr	r2, [pc, #156]	; (80017ec <main+0x170>)
 800174e:	609a      	str	r2, [r3, #8]
    mcmd4_struct.offset = 0.0f;  // 原点のオフセット
 8001750:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <main+0x164>)
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	60da      	str	r2, [r3, #12]
    mcmd4_struct.fb_type = MCMD_FB_POS;  // 読み取った位置情報をF7にフィードバックする。
 8001758:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <main+0x164>)
 800175a:	2200      	movs	r2, #0
 800175c:	70da      	strb	r2, [r3, #3]


    // パラメータなどの設定と動作命令をMCMDに送信する
     MCMD_init(&mcmd4_struct);
 800175e:	4820      	ldr	r0, [pc, #128]	; (80017e0 <main+0x164>)
 8001760:	f7ff fd10 	bl	8001184 <MCMD_init>
     HAL_Delay(10);
 8001764:	200a      	movs	r0, #10
 8001766:	f000 fe49 	bl	80023fc <HAL_Delay>
     MCMD_Calib(&mcmd4_struct);  // キャリブレーションを行う
 800176a:	481d      	ldr	r0, [pc, #116]	; (80017e0 <main+0x164>)
 800176c:	f7ff fd5a 	bl	8001224 <MCMD_Calib>
     HAL_Delay(2000);  // キャリブレーションが終わるまで待つ
 8001770:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001774:	f000 fe42 	bl	80023fc <HAL_Delay>
     MCMD_SetTarget(&mcmd4_struct, 0.4f);  // 目標値(0.0)を設定
 8001778:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80017f0 <main+0x174>
 800177c:	4818      	ldr	r0, [pc, #96]	; (80017e0 <main+0x164>)
 800177e:	f7ff fd7d 	bl	800127c <MCMD_SetTarget>
     HAL_Delay(10);
 8001782:	200a      	movs	r0, #10
 8001784:	f000 fe3a 	bl	80023fc <HAL_Delay>
     MCMD_Control_Enable(&mcmd4_struct);  // 制御開始
 8001788:	4815      	ldr	r0, [pc, #84]	; (80017e0 <main+0x164>)
 800178a:	f7ff fd61 	bl	8001250 <MCMD_Control_Enable>
     printf("start");
 800178e:	4819      	ldr	r0, [pc, #100]	; (80017f4 <main+0x178>)
 8001790:	f005 fc9a 	bl	80070c8 <iprintf>
     HAL_Delay(10);
 8001794:	200a      	movs	r0, #10
 8001796:	f000 fe31 	bl	80023fc <HAL_Delay>
     for(;;){
    	 mcmd_fb = Get_MCMD_Feedback(&(mcmd4_struct.device));
 800179a:	4c17      	ldr	r4, [pc, #92]	; (80017f8 <main+0x17c>)
 800179c:	463b      	mov	r3, r7
 800179e:	4910      	ldr	r1, [pc, #64]	; (80017e0 <main+0x164>)
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fd83 	bl	80012ac <Get_MCMD_Feedback>
 80017a6:	4622      	mov	r2, r4
 80017a8:	463b      	mov	r3, r7
 80017aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017ae:	e882 0003 	stmia.w	r2, {r0, r1}
    	 printf("value of tyokudou %d\r\n",(int)(mcmd_fb.value));
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <main+0x17c>)
 80017b4:	edd3 7a00 	vldr	s15, [r3]
 80017b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017bc:	ee17 1a90 	vmov	r1, s15
 80017c0:	480e      	ldr	r0, [pc, #56]	; (80017fc <main+0x180>)
 80017c2:	f005 fc81 	bl	80070c8 <iprintf>
    	 HAL_Delay(10);
 80017c6:	200a      	movs	r0, #10
 80017c8:	f000 fe18 	bl	80023fc <HAL_Delay>
    	 mcmd_fb = Get_MCMD_Feedback(&(mcmd4_struct.device));
 80017cc:	e7e5      	b.n	800179a <main+0x11e>
 80017ce:	bf00      	nop
 80017d0:	080081e0 	.word	0x080081e0
 80017d4:	200024e4 	.word	0x200024e4
 80017d8:	20002bac 	.word	0x20002bac
 80017dc:	08008208 	.word	0x08008208
 80017e0:	20002bb4 	.word	0x20002bb4
 80017e4:	3e99999a 	.word	0x3e99999a
 80017e8:	3c170a3d 	.word	0x3c170a3d
 80017ec:	3dcccccd 	.word	0x3dcccccd
 80017f0:	3ecccccd 	.word	0x3ecccccd
 80017f4:	0800822c 	.word	0x0800822c
 80017f8:	20002bf4 	.word	0x20002bf4
 80017fc:	08008234 	.word	0x08008234

08001800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b094      	sub	sp, #80	; 0x50
 8001804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001806:	f107 031c 	add.w	r3, r7, #28
 800180a:	2234      	movs	r2, #52	; 0x34
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f005 fc52 	bl	80070b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001814:	f107 0308 	add.w	r3, r7, #8
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001824:	f002 ff2c 	bl	8004680 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001828:	4b2c      	ldr	r3, [pc, #176]	; (80018dc <SystemClock_Config+0xdc>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	4a2b      	ldr	r2, [pc, #172]	; (80018dc <SystemClock_Config+0xdc>)
 800182e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001832:	6413      	str	r3, [r2, #64]	; 0x40
 8001834:	4b29      	ldr	r3, [pc, #164]	; (80018dc <SystemClock_Config+0xdc>)
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001840:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <SystemClock_Config+0xe0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001848:	4a25      	ldr	r2, [pc, #148]	; (80018e0 <SystemClock_Config+0xe0>)
 800184a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <SystemClock_Config+0xe0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001858:	603b      	str	r3, [r7, #0]
 800185a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800185c:	2301      	movs	r3, #1
 800185e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001860:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001864:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001866:	2302      	movs	r3, #2
 8001868:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800186a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800186e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001870:	2304      	movs	r3, #4
 8001872:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001874:	2360      	movs	r3, #96	; 0x60
 8001876:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001878:	2302      	movs	r3, #2
 800187a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800187c:	2304      	movs	r3, #4
 800187e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001880:	2302      	movs	r3, #2
 8001882:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	4618      	mov	r0, r3
 800188a:	f002 ff59 	bl	8004740 <HAL_RCC_OscConfig>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001894:	f000 f9c8 	bl	8001c28 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001898:	f002 ff02 	bl	80046a0 <HAL_PWREx_EnableOverDrive>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80018a2:	f000 f9c1 	bl	8001c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a6:	230f      	movs	r3, #15
 80018a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018aa:	2302      	movs	r3, #2
 80018ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018bc:	f107 0308 	add.w	r3, r7, #8
 80018c0:	2103      	movs	r1, #3
 80018c2:	4618      	mov	r0, r3
 80018c4:	f003 f9ea 	bl	8004c9c <HAL_RCC_ClockConfig>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80018ce:	f000 f9ab 	bl	8001c28 <Error_Handler>
  }
}
 80018d2:	bf00      	nop
 80018d4:	3750      	adds	r7, #80	; 0x50
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40007000 	.word	0x40007000

080018e4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80018e8:	4b17      	ldr	r3, [pc, #92]	; (8001948 <MX_CAN1_Init+0x64>)
 80018ea:	4a18      	ldr	r2, [pc, #96]	; (800194c <MX_CAN1_Init+0x68>)
 80018ec:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80018ee:	4b16      	ldr	r3, [pc, #88]	; (8001948 <MX_CAN1_Init+0x64>)
 80018f0:	2206      	movs	r2, #6
 80018f2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <MX_CAN1_Init+0x64>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80018fa:	4b13      	ldr	r3, [pc, #76]	; (8001948 <MX_CAN1_Init+0x64>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_CAN1_Init+0x64>)
 8001902:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001906:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <MX_CAN1_Init+0x64>)
 800190a:	2200      	movs	r2, #0
 800190c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_CAN1_Init+0x64>)
 8001910:	2200      	movs	r2, #0
 8001912:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_CAN1_Init+0x64>)
 8001916:	2200      	movs	r2, #0
 8001918:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <MX_CAN1_Init+0x64>)
 800191c:	2200      	movs	r2, #0
 800191e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_CAN1_Init+0x64>)
 8001922:	2200      	movs	r2, #0
 8001924:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <MX_CAN1_Init+0x64>)
 8001928:	2200      	movs	r2, #0
 800192a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_CAN1_Init+0x64>)
 800192e:	2201      	movs	r2, #1
 8001930:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001932:	4805      	ldr	r0, [pc, #20]	; (8001948 <MX_CAN1_Init+0x64>)
 8001934:	f000 fd86 	bl	8002444 <HAL_CAN_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800193e:	f000 f973 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200024e4 	.word	0x200024e4
 800194c:	40006400 	.word	0x40006400

08001950 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001954:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <MX_ETH_Init+0x84>)
 8001956:	4a20      	ldr	r2, [pc, #128]	; (80019d8 <MX_ETH_Init+0x88>)
 8001958:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800195a:	4b20      	ldr	r3, [pc, #128]	; (80019dc <MX_ETH_Init+0x8c>)
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001960:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <MX_ETH_Init+0x8c>)
 8001962:	2280      	movs	r2, #128	; 0x80
 8001964:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001966:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <MX_ETH_Init+0x8c>)
 8001968:	22e1      	movs	r2, #225	; 0xe1
 800196a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800196c:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <MX_ETH_Init+0x8c>)
 800196e:	2200      	movs	r2, #0
 8001970:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001972:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <MX_ETH_Init+0x8c>)
 8001974:	2200      	movs	r2, #0
 8001976:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001978:	4b18      	ldr	r3, [pc, #96]	; (80019dc <MX_ETH_Init+0x8c>)
 800197a:	2200      	movs	r2, #0
 800197c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <MX_ETH_Init+0x84>)
 8001980:	4a16      	ldr	r2, [pc, #88]	; (80019dc <MX_ETH_Init+0x8c>)
 8001982:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <MX_ETH_Init+0x84>)
 8001986:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800198a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <MX_ETH_Init+0x84>)
 800198e:	4a14      	ldr	r2, [pc, #80]	; (80019e0 <MX_ETH_Init+0x90>)
 8001990:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <MX_ETH_Init+0x84>)
 8001994:	4a13      	ldr	r2, [pc, #76]	; (80019e4 <MX_ETH_Init+0x94>)
 8001996:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001998:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <MX_ETH_Init+0x84>)
 800199a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800199e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80019a0:	480c      	ldr	r0, [pc, #48]	; (80019d4 <MX_ETH_Init+0x84>)
 80019a2:	f002 f839 	bl	8003a18 <HAL_ETH_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80019ac:	f000 f93c 	bl	8001c28 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80019b0:	2238      	movs	r2, #56	; 0x38
 80019b2:	2100      	movs	r1, #0
 80019b4:	480c      	ldr	r0, [pc, #48]	; (80019e8 <MX_ETH_Init+0x98>)
 80019b6:	f005 fb7f 	bl	80070b8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <MX_ETH_Init+0x98>)
 80019bc:	2221      	movs	r2, #33	; 0x21
 80019be:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <MX_ETH_Init+0x98>)
 80019c2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80019c6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <MX_ETH_Init+0x98>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	2000250c 	.word	0x2000250c
 80019d8:	40028000 	.word	0x40028000
 80019dc:	20002bfc 	.word	0x20002bfc
 80019e0:	20000110 	.word	0x20000110
 80019e4:	20000070 	.word	0x20000070
 80019e8:	200024ac 	.word	0x200024ac

080019ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <MX_USART3_UART_Init+0x58>)
 80019f2:	4a15      	ldr	r2, [pc, #84]	; (8001a48 <MX_USART3_UART_Init+0x5c>)
 80019f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <MX_USART3_UART_Init+0x58>)
 80019f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <MX_USART3_UART_Init+0x58>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <MX_USART3_UART_Init+0x58>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <MX_USART3_UART_Init+0x58>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <MX_USART3_UART_Init+0x58>)
 8001a12:	220c      	movs	r2, #12
 8001a14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <MX_USART3_UART_Init+0x58>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <MX_USART3_UART_Init+0x58>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <MX_USART3_UART_Init+0x58>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <MX_USART3_UART_Init+0x58>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a2e:	4805      	ldr	r0, [pc, #20]	; (8001a44 <MX_USART3_UART_Init+0x58>)
 8001a30:	f003 ff82 	bl	8005938 <HAL_UART_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001a3a:	f000 f8f5 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200025bc 	.word	0x200025bc
 8001a48:	40004800 	.word	0x40004800

08001a4c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001a56:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a5a:	2206      	movs	r2, #6
 8001a5c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a60:	2202      	movs	r2, #2
 8001a62:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a8e:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a90:	f002 fcad 	bl	80043ee <HAL_PCD_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001a9a:	f000 f8c5 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200026a4 	.word	0x200026a4

08001aa8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aae:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <MX_DMA_Init+0x38>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a0b      	ldr	r2, [pc, #44]	; (8001ae0 <MX_DMA_Init+0x38>)
 8001ab4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <MX_DMA_Init+0x38>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	200e      	movs	r0, #14
 8001acc:	f001 fbf1 	bl	80032b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001ad0:	200e      	movs	r0, #14
 8001ad2:	f001 fc0a 	bl	80032ea <HAL_NVIC_EnableIRQ>

}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800

08001ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08c      	sub	sp, #48	; 0x30
 8001ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aea:	f107 031c 	add.w	r3, r7, #28
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
 8001af8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afa:	4b47      	ldr	r3, [pc, #284]	; (8001c18 <MX_GPIO_Init+0x134>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a46      	ldr	r2, [pc, #280]	; (8001c18 <MX_GPIO_Init+0x134>)
 8001b00:	f043 0304 	orr.w	r3, r3, #4
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b44      	ldr	r3, [pc, #272]	; (8001c18 <MX_GPIO_Init+0x134>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0304 	and.w	r3, r3, #4
 8001b0e:	61bb      	str	r3, [r7, #24]
 8001b10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b12:	4b41      	ldr	r3, [pc, #260]	; (8001c18 <MX_GPIO_Init+0x134>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a40      	ldr	r2, [pc, #256]	; (8001c18 <MX_GPIO_Init+0x134>)
 8001b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b3e      	ldr	r3, [pc, #248]	; (8001c18 <MX_GPIO_Init+0x134>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2a:	4b3b      	ldr	r3, [pc, #236]	; (8001c18 <MX_GPIO_Init+0x134>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a3a      	ldr	r2, [pc, #232]	; (8001c18 <MX_GPIO_Init+0x134>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b38      	ldr	r3, [pc, #224]	; (8001c18 <MX_GPIO_Init+0x134>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b42:	4b35      	ldr	r3, [pc, #212]	; (8001c18 <MX_GPIO_Init+0x134>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a34      	ldr	r2, [pc, #208]	; (8001c18 <MX_GPIO_Init+0x134>)
 8001b48:	f043 0302 	orr.w	r3, r3, #2
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b32      	ldr	r3, [pc, #200]	; (8001c18 <MX_GPIO_Init+0x134>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b5a:	4b2f      	ldr	r3, [pc, #188]	; (8001c18 <MX_GPIO_Init+0x134>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a2e      	ldr	r2, [pc, #184]	; (8001c18 <MX_GPIO_Init+0x134>)
 8001b60:	f043 0308 	orr.w	r3, r3, #8
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b2c      	ldr	r3, [pc, #176]	; (8001c18 <MX_GPIO_Init+0x134>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b72:	4b29      	ldr	r3, [pc, #164]	; (8001c18 <MX_GPIO_Init+0x134>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a28      	ldr	r2, [pc, #160]	; (8001c18 <MX_GPIO_Init+0x134>)
 8001b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <MX_GPIO_Init+0x134>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001b90:	4822      	ldr	r0, [pc, #136]	; (8001c1c <MX_GPIO_Init+0x138>)
 8001b92:	f002 fc13 	bl	80043bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2140      	movs	r1, #64	; 0x40
 8001b9a:	4821      	ldr	r0, [pc, #132]	; (8001c20 <MX_GPIO_Init+0x13c>)
 8001b9c:	f002 fc0e 	bl	80043bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ba6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001bb0:	f107 031c 	add.w	r3, r7, #28
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	481b      	ldr	r0, [pc, #108]	; (8001c24 <MX_GPIO_Init+0x140>)
 8001bb8:	f002 fa54 	bl	8004064 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001bbc:	f244 0381 	movw	r3, #16513	; 0x4081
 8001bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bce:	f107 031c 	add.w	r3, r7, #28
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4811      	ldr	r0, [pc, #68]	; (8001c1c <MX_GPIO_Init+0x138>)
 8001bd6:	f002 fa45 	bl	8004064 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001bda:	2340      	movs	r3, #64	; 0x40
 8001bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bde:	2301      	movs	r3, #1
 8001be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be6:	2300      	movs	r3, #0
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001bea:	f107 031c 	add.w	r3, r7, #28
 8001bee:	4619      	mov	r1, r3
 8001bf0:	480b      	ldr	r0, [pc, #44]	; (8001c20 <MX_GPIO_Init+0x13c>)
 8001bf2:	f002 fa37 	bl	8004064 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c02:	f107 031c 	add.w	r3, r7, #28
 8001c06:	4619      	mov	r1, r3
 8001c08:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_GPIO_Init+0x13c>)
 8001c0a:	f002 fa2b 	bl	8004064 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c0e:	bf00      	nop
 8001c10:	3730      	adds	r7, #48	; 0x30
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40020400 	.word	0x40020400
 8001c20:	40021800 	.word	0x40021800
 8001c24:	40020800 	.word	0x40020800

08001c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c2c:	b672      	cpsid	i
}
 8001c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <Error_Handler+0x8>
	...

08001c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <HAL_MspInit+0x44>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	4a0e      	ldr	r2, [pc, #56]	; (8001c78 <HAL_MspInit+0x44>)
 8001c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c44:	6413      	str	r3, [r2, #64]	; 0x40
 8001c46:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <HAL_MspInit+0x44>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_MspInit+0x44>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	4a08      	ldr	r2, [pc, #32]	; (8001c78 <HAL_MspInit+0x44>)
 8001c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_MspInit+0x44>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40023800 	.word	0x40023800

08001c7c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a23      	ldr	r2, [pc, #140]	; (8001d28 <HAL_CAN_MspInit+0xac>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d13f      	bne.n	8001d1e <HAL_CAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c9e:	4b23      	ldr	r3, [pc, #140]	; (8001d2c <HAL_CAN_MspInit+0xb0>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	4a22      	ldr	r2, [pc, #136]	; (8001d2c <HAL_CAN_MspInit+0xb0>)
 8001ca4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8001caa:	4b20      	ldr	r3, [pc, #128]	; (8001d2c <HAL_CAN_MspInit+0xb0>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cb6:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <HAL_CAN_MspInit+0xb0>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a1c      	ldr	r2, [pc, #112]	; (8001d2c <HAL_CAN_MspInit+0xb0>)
 8001cbc:	f043 0308 	orr.w	r3, r3, #8
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <HAL_CAN_MspInit+0xb0>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001cde:	2309      	movs	r3, #9
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4811      	ldr	r0, [pc, #68]	; (8001d30 <HAL_CAN_MspInit+0xb4>)
 8001cea:	f002 f9bb 	bl	8004064 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	2013      	movs	r0, #19
 8001cf4:	f001 fadd 	bl	80032b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001cf8:	2013      	movs	r0, #19
 8001cfa:	f001 faf6 	bl	80032ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2100      	movs	r1, #0
 8001d02:	2014      	movs	r0, #20
 8001d04:	f001 fad5 	bl	80032b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001d08:	2014      	movs	r0, #20
 8001d0a:	f001 faee 	bl	80032ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	2015      	movs	r0, #21
 8001d14:	f001 facd 	bl	80032b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001d18:	2015      	movs	r0, #21
 8001d1a:	f001 fae6 	bl	80032ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001d1e:	bf00      	nop
 8001d20:	3728      	adds	r7, #40	; 0x28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40006400 	.word	0x40006400
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020c00 	.word	0x40020c00

08001d34 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08e      	sub	sp, #56	; 0x38
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a4e      	ldr	r2, [pc, #312]	; (8001e8c <HAL_ETH_MspInit+0x158>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	f040 8096 	bne.w	8001e84 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001d58:	4b4d      	ldr	r3, [pc, #308]	; (8001e90 <HAL_ETH_MspInit+0x15c>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	4a4c      	ldr	r2, [pc, #304]	; (8001e90 <HAL_ETH_MspInit+0x15c>)
 8001d5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d62:	6313      	str	r3, [r2, #48]	; 0x30
 8001d64:	4b4a      	ldr	r3, [pc, #296]	; (8001e90 <HAL_ETH_MspInit+0x15c>)
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6c:	623b      	str	r3, [r7, #32]
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	4b47      	ldr	r3, [pc, #284]	; (8001e90 <HAL_ETH_MspInit+0x15c>)
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	4a46      	ldr	r2, [pc, #280]	; (8001e90 <HAL_ETH_MspInit+0x15c>)
 8001d76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7c:	4b44      	ldr	r3, [pc, #272]	; (8001e90 <HAL_ETH_MspInit+0x15c>)
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	4b41      	ldr	r3, [pc, #260]	; (8001e90 <HAL_ETH_MspInit+0x15c>)
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	4a40      	ldr	r2, [pc, #256]	; (8001e90 <HAL_ETH_MspInit+0x15c>)
 8001d8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d92:	6313      	str	r3, [r2, #48]	; 0x30
 8001d94:	4b3e      	ldr	r3, [pc, #248]	; (8001e90 <HAL_ETH_MspInit+0x15c>)
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d9c:	61bb      	str	r3, [r7, #24]
 8001d9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da0:	4b3b      	ldr	r3, [pc, #236]	; (8001e90 <HAL_ETH_MspInit+0x15c>)
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	4a3a      	ldr	r2, [pc, #232]	; (8001e90 <HAL_ETH_MspInit+0x15c>)
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	6313      	str	r3, [r2, #48]	; 0x30
 8001dac:	4b38      	ldr	r3, [pc, #224]	; (8001e90 <HAL_ETH_MspInit+0x15c>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db8:	4b35      	ldr	r3, [pc, #212]	; (8001e90 <HAL_ETH_MspInit+0x15c>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	4a34      	ldr	r2, [pc, #208]	; (8001e90 <HAL_ETH_MspInit+0x15c>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc4:	4b32      	ldr	r3, [pc, #200]	; (8001e90 <HAL_ETH_MspInit+0x15c>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd0:	4b2f      	ldr	r3, [pc, #188]	; (8001e90 <HAL_ETH_MspInit+0x15c>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	4a2e      	ldr	r2, [pc, #184]	; (8001e90 <HAL_ETH_MspInit+0x15c>)
 8001dd6:	f043 0302 	orr.w	r3, r3, #2
 8001dda:	6313      	str	r3, [r2, #48]	; 0x30
 8001ddc:	4b2c      	ldr	r3, [pc, #176]	; (8001e90 <HAL_ETH_MspInit+0x15c>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001de8:	4b29      	ldr	r3, [pc, #164]	; (8001e90 <HAL_ETH_MspInit+0x15c>)
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	4a28      	ldr	r2, [pc, #160]	; (8001e90 <HAL_ETH_MspInit+0x15c>)
 8001dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001df2:	6313      	str	r3, [r2, #48]	; 0x30
 8001df4:	4b26      	ldr	r3, [pc, #152]	; (8001e90 <HAL_ETH_MspInit+0x15c>)
 8001df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001e00:	2332      	movs	r3, #50	; 0x32
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e10:	230b      	movs	r3, #11
 8001e12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e18:	4619      	mov	r1, r3
 8001e1a:	481e      	ldr	r0, [pc, #120]	; (8001e94 <HAL_ETH_MspInit+0x160>)
 8001e1c:	f002 f922 	bl	8004064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e20:	2386      	movs	r3, #134	; 0x86
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	2302      	movs	r3, #2
 8001e26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e30:	230b      	movs	r3, #11
 8001e32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4817      	ldr	r0, [pc, #92]	; (8001e98 <HAL_ETH_MspInit+0x164>)
 8001e3c:	f002 f912 	bl	8004064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001e40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e52:	230b      	movs	r3, #11
 8001e54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	480f      	ldr	r0, [pc, #60]	; (8001e9c <HAL_ETH_MspInit+0x168>)
 8001e5e:	f002 f901 	bl	8004064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001e62:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e70:	2303      	movs	r3, #3
 8001e72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e74:	230b      	movs	r3, #11
 8001e76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4808      	ldr	r0, [pc, #32]	; (8001ea0 <HAL_ETH_MspInit+0x16c>)
 8001e80:	f002 f8f0 	bl	8004064 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001e84:	bf00      	nop
 8001e86:	3738      	adds	r7, #56	; 0x38
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40028000 	.word	0x40028000
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40020800 	.word	0x40020800
 8001e98:	40020000 	.word	0x40020000
 8001e9c:	40020400 	.word	0x40020400
 8001ea0:	40021800 	.word	0x40021800

08001ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b0ae      	sub	sp, #184	; 0xb8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	2290      	movs	r2, #144	; 0x90
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f005 f8f7 	bl	80070b8 <memset>
  if(huart->Instance==USART3)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a3d      	ldr	r2, [pc, #244]	; (8001fc4 <HAL_UART_MspInit+0x120>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d172      	bne.n	8001fba <HAL_UART_MspInit+0x116>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ed4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ed8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001eda:	2300      	movs	r3, #0
 8001edc:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f003 f900 	bl	80050e8 <HAL_RCCEx_PeriphCLKConfig>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001eee:	f7ff fe9b 	bl	8001c28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ef2:	4b35      	ldr	r3, [pc, #212]	; (8001fc8 <HAL_UART_MspInit+0x124>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	4a34      	ldr	r2, [pc, #208]	; (8001fc8 <HAL_UART_MspInit+0x124>)
 8001ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001efc:	6413      	str	r3, [r2, #64]	; 0x40
 8001efe:	4b32      	ldr	r3, [pc, #200]	; (8001fc8 <HAL_UART_MspInit+0x124>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f0a:	4b2f      	ldr	r3, [pc, #188]	; (8001fc8 <HAL_UART_MspInit+0x124>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a2e      	ldr	r2, [pc, #184]	; (8001fc8 <HAL_UART_MspInit+0x124>)
 8001f10:	f043 0308 	orr.w	r3, r3, #8
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b2c      	ldr	r3, [pc, #176]	; (8001fc8 <HAL_UART_MspInit+0x124>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f36:	2303      	movs	r3, #3
 8001f38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f3c:	2307      	movs	r3, #7
 8001f3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f42:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f46:	4619      	mov	r1, r3
 8001f48:	4820      	ldr	r0, [pc, #128]	; (8001fcc <HAL_UART_MspInit+0x128>)
 8001f4a:	f002 f88b 	bl	8004064 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001f4e:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <HAL_UART_MspInit+0x12c>)
 8001f50:	4a20      	ldr	r2, [pc, #128]	; (8001fd4 <HAL_UART_MspInit+0x130>)
 8001f52:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001f54:	4b1e      	ldr	r3, [pc, #120]	; (8001fd0 <HAL_UART_MspInit+0x12c>)
 8001f56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f5a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f5c:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <HAL_UART_MspInit+0x12c>)
 8001f5e:	2240      	movs	r2, #64	; 0x40
 8001f60:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f62:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <HAL_UART_MspInit+0x12c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f68:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <HAL_UART_MspInit+0x12c>)
 8001f6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f6e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f70:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <HAL_UART_MspInit+0x12c>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f76:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <HAL_UART_MspInit+0x12c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001f7c:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <HAL_UART_MspInit+0x12c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_UART_MspInit+0x12c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <HAL_UART_MspInit+0x12c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001f8e:	4810      	ldr	r0, [pc, #64]	; (8001fd0 <HAL_UART_MspInit+0x12c>)
 8001f90:	f001 f9c6 	bl	8003320 <HAL_DMA_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001f9a:	f7ff fe45 	bl	8001c28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a0b      	ldr	r2, [pc, #44]	; (8001fd0 <HAL_UART_MspInit+0x12c>)
 8001fa2:	671a      	str	r2, [r3, #112]	; 0x70
 8001fa4:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <HAL_UART_MspInit+0x12c>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2100      	movs	r1, #0
 8001fae:	2027      	movs	r0, #39	; 0x27
 8001fb0:	f001 f97f 	bl	80032b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001fb4:	2027      	movs	r0, #39	; 0x27
 8001fb6:	f001 f998 	bl	80032ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001fba:	bf00      	nop
 8001fbc:	37b8      	adds	r7, #184	; 0xb8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40004800 	.word	0x40004800
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40020c00 	.word	0x40020c00
 8001fd0:	20002644 	.word	0x20002644
 8001fd4:	40026058 	.word	0x40026058

08001fd8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b0ae      	sub	sp, #184	; 0xb8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	2290      	movs	r2, #144	; 0x90
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f005 f85d 	bl	80070b8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002006:	d159      	bne.n	80020bc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002008:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800200c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800200e:	2300      	movs	r3, #0
 8002010:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	4618      	mov	r0, r3
 800201a:	f003 f865 	bl	80050e8 <HAL_RCCEx_PeriphCLKConfig>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002024:	f7ff fe00 	bl	8001c28 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002028:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <HAL_PCD_MspInit+0xec>)
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	4a25      	ldr	r2, [pc, #148]	; (80020c4 <HAL_PCD_MspInit+0xec>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6313      	str	r3, [r2, #48]	; 0x30
 8002034:	4b23      	ldr	r3, [pc, #140]	; (80020c4 <HAL_PCD_MspInit+0xec>)
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002040:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002044:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	2302      	movs	r3, #2
 800204a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002054:	2303      	movs	r3, #3
 8002056:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800205a:	230a      	movs	r3, #10
 800205c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002060:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002064:	4619      	mov	r1, r3
 8002066:	4818      	ldr	r0, [pc, #96]	; (80020c8 <HAL_PCD_MspInit+0xf0>)
 8002068:	f001 fffc 	bl	8004064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800206c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002070:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002074:	2300      	movs	r3, #0
 8002076:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002080:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002084:	4619      	mov	r1, r3
 8002086:	4810      	ldr	r0, [pc, #64]	; (80020c8 <HAL_PCD_MspInit+0xf0>)
 8002088:	f001 ffec 	bl	8004064 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800208c:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_PCD_MspInit+0xec>)
 800208e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002090:	4a0c      	ldr	r2, [pc, #48]	; (80020c4 <HAL_PCD_MspInit+0xec>)
 8002092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002096:	6353      	str	r3, [r2, #52]	; 0x34
 8002098:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_PCD_MspInit+0xec>)
 800209a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <HAL_PCD_MspInit+0xec>)
 80020a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a8:	4a06      	ldr	r2, [pc, #24]	; (80020c4 <HAL_PCD_MspInit+0xec>)
 80020aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ae:	6453      	str	r3, [r2, #68]	; 0x44
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <HAL_PCD_MspInit+0xec>)
 80020b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80020bc:	bf00      	nop
 80020be:	37b8      	adds	r7, #184	; 0xb8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40020000 	.word	0x40020000

080020cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020d0:	e7fe      	b.n	80020d0 <NMI_Handler+0x4>

080020d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d6:	e7fe      	b.n	80020d6 <HardFault_Handler+0x4>

080020d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020dc:	e7fe      	b.n	80020dc <MemManage_Handler+0x4>

080020de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020e2:	e7fe      	b.n	80020e2 <BusFault_Handler+0x4>

080020e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <UsageFault_Handler+0x4>

080020ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002118:	f000 f950 	bl	80023bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}

08002120 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <DMA1_Stream3_IRQHandler+0x10>)
 8002126:	f001 fa3b 	bl	80035a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20002644 	.word	0x20002644

08002134 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002138:	4802      	ldr	r0, [pc, #8]	; (8002144 <CAN1_TX_IRQHandler+0x10>)
 800213a:	f000 fdec 	bl	8002d16 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	200024e4 	.word	0x200024e4

08002148 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800214c:	4802      	ldr	r0, [pc, #8]	; (8002158 <CAN1_RX0_IRQHandler+0x10>)
 800214e:	f000 fde2 	bl	8002d16 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200024e4 	.word	0x200024e4

0800215c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002160:	4802      	ldr	r0, [pc, #8]	; (800216c <CAN1_RX1_IRQHandler+0x10>)
 8002162:	f000 fdd8 	bl	8002d16 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	200024e4 	.word	0x200024e4

08002170 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002174:	4802      	ldr	r0, [pc, #8]	; (8002180 <USART3_IRQHandler+0x10>)
 8002176:	f003 fcb1 	bl	8005adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	200025bc 	.word	0x200025bc

08002184 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	e00a      	b.n	80021ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002196:	f3af 8000 	nop.w
 800219a:	4601      	mov	r1, r0
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	60ba      	str	r2, [r7, #8]
 80021a2:	b2ca      	uxtb	r2, r1
 80021a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	3301      	adds	r3, #1
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	dbf0      	blt.n	8002196 <_read+0x12>
  }

  return len;
 80021b4:	687b      	ldr	r3, [r7, #4]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	e009      	b.n	80021e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	60ba      	str	r2, [r7, #8]
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff f9f1 	bl	80015c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	3301      	adds	r3, #1
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	dbf1      	blt.n	80021d0 <_write+0x12>
  }
  return len;
 80021ec:	687b      	ldr	r3, [r7, #4]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <_close>:

int _close(int file)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800221e:	605a      	str	r2, [r3, #4]
  return 0;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <_isatty>:

int _isatty(int file)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002236:	2301      	movs	r3, #1
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002268:	4a14      	ldr	r2, [pc, #80]	; (80022bc <_sbrk+0x5c>)
 800226a:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <_sbrk+0x60>)
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002274:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <_sbrk+0x64>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d102      	bne.n	8002282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <_sbrk+0x64>)
 800227e:	4a12      	ldr	r2, [pc, #72]	; (80022c8 <_sbrk+0x68>)
 8002280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002282:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <_sbrk+0x64>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	429a      	cmp	r2, r3
 800228e:	d207      	bcs.n	80022a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002290:	f004 fee8 	bl	8007064 <__errno>
 8002294:	4603      	mov	r3, r0
 8002296:	220c      	movs	r2, #12
 8002298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800229a:	f04f 33ff 	mov.w	r3, #4294967295
 800229e:	e009      	b.n	80022b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022a0:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <_sbrk+0x64>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022a6:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <_sbrk+0x64>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	4a05      	ldr	r2, [pc, #20]	; (80022c4 <_sbrk+0x64>)
 80022b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022b2:	68fb      	ldr	r3, [r7, #12]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20080000 	.word	0x20080000
 80022c0:	00000400 	.word	0x00000400
 80022c4:	20002c04 	.word	0x20002c04
 80022c8:	20002c20 	.word	0x20002c20

080022cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <SystemInit+0x20>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	4a05      	ldr	r2, [pc, #20]	; (80022ec <SystemInit+0x20>)
 80022d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002328 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022f4:	480d      	ldr	r0, [pc, #52]	; (800232c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022f6:	490e      	ldr	r1, [pc, #56]	; (8002330 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022f8:	4a0e      	ldr	r2, [pc, #56]	; (8002334 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022fc:	e002      	b.n	8002304 <LoopCopyDataInit>

080022fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002302:	3304      	adds	r3, #4

08002304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002308:	d3f9      	bcc.n	80022fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800230a:	4a0b      	ldr	r2, [pc, #44]	; (8002338 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800230c:	4c0b      	ldr	r4, [pc, #44]	; (800233c <LoopFillZerobss+0x26>)
  movs r3, #0
 800230e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002310:	e001      	b.n	8002316 <LoopFillZerobss>

08002312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002314:	3204      	adds	r2, #4

08002316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002318:	d3fb      	bcc.n	8002312 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800231a:	f7ff ffd7 	bl	80022cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800231e:	f004 fea7 	bl	8007070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002322:	f7ff f9ab 	bl	800167c <main>
  bx  lr    
 8002326:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002328:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800232c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002330:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002334:	08008314 	.word	0x08008314
  ldr r2, =_sbss
 8002338:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 800233c:	20002c1c 	.word	0x20002c1c

08002340 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002340:	e7fe      	b.n	8002340 <ADC_IRQHandler>

08002342 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002346:	2003      	movs	r0, #3
 8002348:	f000 ffa8 	bl	800329c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800234c:	2000      	movs	r0, #0
 800234e:	f000 f805 	bl	800235c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002352:	f7ff fc6f 	bl	8001c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002364:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <HAL_InitTick+0x54>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <HAL_InitTick+0x58>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	4619      	mov	r1, r3
 800236e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002372:	fbb3 f3f1 	udiv	r3, r3, r1
 8002376:	fbb2 f3f3 	udiv	r3, r2, r3
 800237a:	4618      	mov	r0, r3
 800237c:	f000 ffc3 	bl	8003306 <HAL_SYSTICK_Config>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e00e      	b.n	80023a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b0f      	cmp	r3, #15
 800238e:	d80a      	bhi.n	80023a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002390:	2200      	movs	r2, #0
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	f04f 30ff 	mov.w	r0, #4294967295
 8002398:	f000 ff8b 	bl	80032b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800239c:	4a06      	ldr	r2, [pc, #24]	; (80023b8 <HAL_InitTick+0x5c>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	e000      	b.n	80023a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20000000 	.word	0x20000000
 80023b4:	20000008 	.word	0x20000008
 80023b8:	20000004 	.word	0x20000004

080023bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_IncTick+0x20>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	461a      	mov	r2, r3
 80023c6:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <HAL_IncTick+0x24>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4413      	add	r3, r2
 80023cc:	4a04      	ldr	r2, [pc, #16]	; (80023e0 <HAL_IncTick+0x24>)
 80023ce:	6013      	str	r3, [r2, #0]
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20000008 	.word	0x20000008
 80023e0:	20002c08 	.word	0x20002c08

080023e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return uwTick;
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <HAL_GetTick+0x14>)
 80023ea:	681b      	ldr	r3, [r3, #0]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20002c08 	.word	0x20002c08

080023fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002404:	f7ff ffee 	bl	80023e4 <HAL_GetTick>
 8002408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002414:	d005      	beq.n	8002422 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002416:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <HAL_Delay+0x44>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4413      	add	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002422:	bf00      	nop
 8002424:	f7ff ffde 	bl	80023e4 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	429a      	cmp	r2, r3
 8002432:	d8f7      	bhi.n	8002424 <HAL_Delay+0x28>
  {
  }
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000008 	.word	0x20000008

08002444 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e0ed      	b.n	8002632 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3020 	ldrb.w	r3, [r3, #32]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d102      	bne.n	8002468 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff fc0a 	bl	8001c7c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0201 	orr.w	r2, r2, #1
 8002476:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002478:	f7ff ffb4 	bl	80023e4 <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800247e:	e012      	b.n	80024a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002480:	f7ff ffb0 	bl	80023e4 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b0a      	cmp	r3, #10
 800248c:	d90b      	bls.n	80024a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2205      	movs	r2, #5
 800249e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e0c5      	b.n	8002632 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0e5      	beq.n	8002480 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0202 	bic.w	r2, r2, #2
 80024c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024c4:	f7ff ff8e 	bl	80023e4 <HAL_GetTick>
 80024c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024ca:	e012      	b.n	80024f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024cc:	f7ff ff8a 	bl	80023e4 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b0a      	cmp	r3, #10
 80024d8:	d90b      	bls.n	80024f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2205      	movs	r2, #5
 80024ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e09f      	b.n	8002632 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1e5      	bne.n	80024cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	7e1b      	ldrb	r3, [r3, #24]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d108      	bne.n	800251a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	e007      	b.n	800252a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002528:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	7e5b      	ldrb	r3, [r3, #25]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d108      	bne.n	8002544 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	e007      	b.n	8002554 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002552:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	7e9b      	ldrb	r3, [r3, #26]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d108      	bne.n	800256e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0220 	orr.w	r2, r2, #32
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	e007      	b.n	800257e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0220 	bic.w	r2, r2, #32
 800257c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	7edb      	ldrb	r3, [r3, #27]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d108      	bne.n	8002598 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0210 	bic.w	r2, r2, #16
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	e007      	b.n	80025a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0210 	orr.w	r2, r2, #16
 80025a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	7f1b      	ldrb	r3, [r3, #28]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d108      	bne.n	80025c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0208 	orr.w	r2, r2, #8
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	e007      	b.n	80025d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0208 	bic.w	r2, r2, #8
 80025d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	7f5b      	ldrb	r3, [r3, #29]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d108      	bne.n	80025ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f042 0204 	orr.w	r2, r2, #4
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	e007      	b.n	80025fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0204 	bic.w	r2, r2, #4
 80025fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	ea42 0103 	orr.w	r1, r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	1e5a      	subs	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002652:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d003      	beq.n	8002662 <HAL_CAN_ConfigFilter+0x26>
 800265a:	7cfb      	ldrb	r3, [r7, #19]
 800265c:	2b02      	cmp	r3, #2
 800265e:	f040 80c7 	bne.w	80027f0 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a69      	ldr	r2, [pc, #420]	; (800280c <HAL_CAN_ConfigFilter+0x1d0>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d001      	beq.n	8002670 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 800266c:	4b68      	ldr	r3, [pc, #416]	; (8002810 <HAL_CAN_ConfigFilter+0x1d4>)
 800266e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002676:	f043 0201 	orr.w	r2, r3, #1
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	4a63      	ldr	r2, [pc, #396]	; (8002810 <HAL_CAN_ConfigFilter+0x1d4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d111      	bne.n	80026ac <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800268e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	021b      	lsls	r3, r3, #8
 80026a4:	431a      	orrs	r2, r3
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	f003 031f 	and.w	r3, r3, #31
 80026b4:	2201      	movs	r2, #1
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	401a      	ands	r2, r3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d123      	bne.n	800271e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	43db      	mvns	r3, r3
 80026e0:	401a      	ands	r2, r3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026f8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	3248      	adds	r2, #72	; 0x48
 80026fe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002712:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002714:	6979      	ldr	r1, [r7, #20]
 8002716:	3348      	adds	r3, #72	; 0x48
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	440b      	add	r3, r1
 800271c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d122      	bne.n	800276c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	431a      	orrs	r2, r3
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002746:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	3248      	adds	r2, #72	; 0x48
 800274c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002760:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002762:	6979      	ldr	r1, [r7, #20]
 8002764:	3348      	adds	r3, #72	; 0x48
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	440b      	add	r3, r1
 800276a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d109      	bne.n	8002788 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	43db      	mvns	r3, r3
 800277e:	401a      	ands	r2, r3
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002786:	e007      	b.n	8002798 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	431a      	orrs	r2, r3
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d109      	bne.n	80027b4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	401a      	ands	r2, r3
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80027b2:	e007      	b.n	80027c4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	431a      	orrs	r2, r3
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d107      	bne.n	80027dc <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	431a      	orrs	r2, r3
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027e2:	f023 0201 	bic.w	r2, r3, #1
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	e006      	b.n	80027fe <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
  }
}
 80027fe:	4618      	mov	r0, r3
 8002800:	371c      	adds	r7, #28
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40003400 	.word	0x40003400
 8002810:	40006400 	.word	0x40006400

08002814 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b01      	cmp	r3, #1
 8002826:	d12e      	bne.n	8002886 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0201 	bic.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002840:	f7ff fdd0 	bl	80023e4 <HAL_GetTick>
 8002844:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002846:	e012      	b.n	800286e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002848:	f7ff fdcc 	bl	80023e4 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b0a      	cmp	r3, #10
 8002854:	d90b      	bls.n	800286e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2205      	movs	r2, #5
 8002866:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e012      	b.n	8002894 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1e5      	bne.n	8002848 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	e006      	b.n	8002894 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
  }
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800289c:	b480      	push	{r7}
 800289e:	b089      	sub	sp, #36	; 0x24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028b0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80028ba:	7ffb      	ldrb	r3, [r7, #31]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d003      	beq.n	80028c8 <HAL_CAN_AddTxMessage+0x2c>
 80028c0:	7ffb      	ldrb	r3, [r7, #31]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	f040 80ad 	bne.w	8002a22 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10a      	bne.n	80028e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d105      	bne.n	80028e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 8095 	beq.w	8002a12 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	0e1b      	lsrs	r3, r3, #24
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80028f2:	2201      	movs	r2, #1
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	409a      	lsls	r2, r3
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10d      	bne.n	8002920 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800290e:	68f9      	ldr	r1, [r7, #12]
 8002910:	6809      	ldr	r1, [r1, #0]
 8002912:	431a      	orrs	r2, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	3318      	adds	r3, #24
 8002918:	011b      	lsls	r3, r3, #4
 800291a:	440b      	add	r3, r1
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	e00f      	b.n	8002940 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800292a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002930:	68f9      	ldr	r1, [r7, #12]
 8002932:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002934:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	3318      	adds	r3, #24
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	440b      	add	r3, r1
 800293e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6819      	ldr	r1, [r3, #0]
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	3318      	adds	r3, #24
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	440b      	add	r3, r1
 8002950:	3304      	adds	r3, #4
 8002952:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	7d1b      	ldrb	r3, [r3, #20]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d111      	bne.n	8002980 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	3318      	adds	r3, #24
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	4413      	add	r3, r2
 8002968:	3304      	adds	r3, #4
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	6811      	ldr	r1, [r2, #0]
 8002970:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	3318      	adds	r3, #24
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	440b      	add	r3, r1
 800297c:	3304      	adds	r3, #4
 800297e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3307      	adds	r3, #7
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	061a      	lsls	r2, r3, #24
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3306      	adds	r3, #6
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	041b      	lsls	r3, r3, #16
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3305      	adds	r3, #5
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	021b      	lsls	r3, r3, #8
 800299a:	4313      	orrs	r3, r2
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	3204      	adds	r2, #4
 80029a0:	7812      	ldrb	r2, [r2, #0]
 80029a2:	4610      	mov	r0, r2
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	6811      	ldr	r1, [r2, #0]
 80029a8:	ea43 0200 	orr.w	r2, r3, r0
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	440b      	add	r3, r1
 80029b2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80029b6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3303      	adds	r3, #3
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	061a      	lsls	r2, r3, #24
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3302      	adds	r3, #2
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	041b      	lsls	r3, r3, #16
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3301      	adds	r3, #1
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	021b      	lsls	r3, r3, #8
 80029d2:	4313      	orrs	r3, r2
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	7812      	ldrb	r2, [r2, #0]
 80029d8:	4610      	mov	r0, r2
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	6811      	ldr	r1, [r2, #0]
 80029de:	ea43 0200 	orr.w	r2, r3, r0
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	440b      	add	r3, r1
 80029e8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80029ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	3318      	adds	r3, #24
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	4413      	add	r3, r2
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	6811      	ldr	r1, [r2, #0]
 8002a00:	f043 0201 	orr.w	r2, r3, #1
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	3318      	adds	r3, #24
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	440b      	add	r3, r1
 8002a0c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	e00e      	b.n	8002a30 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e006      	b.n	8002a30 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
  }
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3724      	adds	r7, #36	; 0x24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a4e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a50:	7afb      	ldrb	r3, [r7, #11]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d002      	beq.n	8002a5c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002a56:	7afb      	ldrb	r3, [r7, #11]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d11d      	bne.n	8002a98 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	3301      	adds	r3, #1
 8002a82:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	3301      	adds	r3, #1
 8002a96:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002a98:	68fb      	ldr	r3, [r7, #12]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b087      	sub	sp, #28
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aba:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002abc:	7dfb      	ldrb	r3, [r7, #23]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d003      	beq.n	8002aca <HAL_CAN_GetRxMessage+0x24>
 8002ac2:	7dfb      	ldrb	r3, [r7, #23]
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	f040 80f3 	bne.w	8002cb0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10e      	bne.n	8002aee <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d116      	bne.n	8002b0c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e0e7      	b.n	8002cbe <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d107      	bne.n	8002b0c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0d8      	b.n	8002cbe <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	331b      	adds	r3, #27
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	4413      	add	r3, r2
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0204 	and.w	r2, r3, #4
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10c      	bne.n	8002b44 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	331b      	adds	r3, #27
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	4413      	add	r3, r2
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	0d5b      	lsrs	r3, r3, #21
 8002b3a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	e00b      	b.n	8002b5c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	331b      	adds	r3, #27
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	4413      	add	r3, r2
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	08db      	lsrs	r3, r3, #3
 8002b54:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	331b      	adds	r3, #27
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	4413      	add	r3, r2
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0202 	and.w	r2, r3, #2
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	331b      	adds	r3, #27
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3304      	adds	r3, #4
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 020f 	and.w	r2, r3, #15
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	331b      	adds	r3, #27
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	4413      	add	r3, r2
 8002b96:	3304      	adds	r3, #4
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	0a1b      	lsrs	r3, r3, #8
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	331b      	adds	r3, #27
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	4413      	add	r3, r2
 8002bae:	3304      	adds	r3, #4
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	0c1b      	lsrs	r3, r3, #16
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	0a1a      	lsrs	r2, r3, #8
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	3301      	adds	r3, #1
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	0c1a      	lsrs	r2, r3, #16
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	3302      	adds	r3, #2
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	0e1a      	lsrs	r2, r3, #24
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	3303      	adds	r3, #3
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	3304      	adds	r3, #4
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	0a1a      	lsrs	r2, r3, #8
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	3305      	adds	r3, #5
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	4413      	add	r3, r2
 8002c5a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	0c1a      	lsrs	r2, r3, #16
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	3306      	adds	r3, #6
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	0e1a      	lsrs	r2, r3, #24
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	3307      	adds	r3, #7
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d108      	bne.n	8002c9c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0220 	orr.w	r2, r2, #32
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	e007      	b.n	8002cac <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691a      	ldr	r2, [r3, #16]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0220 	orr.w	r2, r2, #32
 8002caa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	e006      	b.n	8002cbe <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
  }
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	371c      	adds	r7, #28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b085      	sub	sp, #20
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cda:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d002      	beq.n	8002ce8 <HAL_CAN_ActivateNotification+0x1e>
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d109      	bne.n	8002cfc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6959      	ldr	r1, [r3, #20]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	e006      	b.n	8002d0a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
  }
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b08a      	sub	sp, #40	; 0x28
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d07c      	beq.n	8002e56 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d023      	beq.n	8002dae <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7fe fc35 	bl	80015e8 <HAL_CAN_TxMailbox0CompleteCallback>
 8002d7e:	e016      	b.n	8002dae <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d004      	beq.n	8002d94 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
 8002d92:	e00c      	b.n	8002dae <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d004      	beq.n	8002da8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
 8002da6:	e002      	b.n	8002dae <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7fe fc27 	bl	80015fc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d024      	beq.n	8002e02 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dc0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7fe fc1f 	bl	8001610 <HAL_CAN_TxMailbox1CompleteCallback>
 8002dd2:	e016      	b.n	8002e02 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d004      	beq.n	8002de8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
 8002de6:	e00c      	b.n	8002e02 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d004      	beq.n	8002dfc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfa:	e002      	b.n	8002e02 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7fe fc11 	bl	8001624 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d024      	beq.n	8002e56 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e14:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7fe fc09 	bl	8001638 <HAL_CAN_TxMailbox2CompleteCallback>
 8002e26:	e016      	b.n	8002e56 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d004      	beq.n	8002e3c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
 8002e3a:	e00c      	b.n	8002e56 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d004      	beq.n	8002e50 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e4e:	e002      	b.n	8002e56 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f7fe fbfb 	bl	800164c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00c      	beq.n	8002e7a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f003 0310 	and.w	r3, r3, #16
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d007      	beq.n	8002e7a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2210      	movs	r2, #16
 8002e78:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00b      	beq.n	8002e9c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d006      	beq.n	8002e9c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2208      	movs	r2, #8
 8002e94:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f8f4 	bl	8003084 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7fe fbd3 	bl	8001660 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00c      	beq.n	8002ede <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f003 0310 	and.w	r3, r3, #16
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d007      	beq.n	8002ede <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2210      	movs	r2, #16
 8002edc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	f003 0320 	and.w	r3, r3, #32
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00b      	beq.n	8002f00 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d006      	beq.n	8002f00 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2208      	movs	r2, #8
 8002ef8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f8d6 	bl	80030ac <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d009      	beq.n	8002f1e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	f003 0303 	and.w	r3, r3, #3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f8bd 	bl	8003098 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00b      	beq.n	8002f40 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f003 0310 	and.w	r3, r3, #16
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d006      	beq.n	8002f40 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2210      	movs	r2, #16
 8002f38:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f8c0 	bl	80030c0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00b      	beq.n	8002f62 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	f003 0308 	and.w	r3, r3, #8
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d006      	beq.n	8002f62 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2208      	movs	r2, #8
 8002f5a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f8b9 	bl	80030d4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d07b      	beq.n	8003064 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f003 0304 	and.w	r3, r3, #4
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d072      	beq.n	800305c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d008      	beq.n	8002f92 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	f043 0302 	orr.w	r3, r3, #2
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	f043 0304 	orr.w	r3, r3, #4
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d043      	beq.n	800305c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d03e      	beq.n	800305c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fe4:	2b60      	cmp	r3, #96	; 0x60
 8002fe6:	d02b      	beq.n	8003040 <HAL_CAN_IRQHandler+0x32a>
 8002fe8:	2b60      	cmp	r3, #96	; 0x60
 8002fea:	d82e      	bhi.n	800304a <HAL_CAN_IRQHandler+0x334>
 8002fec:	2b50      	cmp	r3, #80	; 0x50
 8002fee:	d022      	beq.n	8003036 <HAL_CAN_IRQHandler+0x320>
 8002ff0:	2b50      	cmp	r3, #80	; 0x50
 8002ff2:	d82a      	bhi.n	800304a <HAL_CAN_IRQHandler+0x334>
 8002ff4:	2b40      	cmp	r3, #64	; 0x40
 8002ff6:	d019      	beq.n	800302c <HAL_CAN_IRQHandler+0x316>
 8002ff8:	2b40      	cmp	r3, #64	; 0x40
 8002ffa:	d826      	bhi.n	800304a <HAL_CAN_IRQHandler+0x334>
 8002ffc:	2b30      	cmp	r3, #48	; 0x30
 8002ffe:	d010      	beq.n	8003022 <HAL_CAN_IRQHandler+0x30c>
 8003000:	2b30      	cmp	r3, #48	; 0x30
 8003002:	d822      	bhi.n	800304a <HAL_CAN_IRQHandler+0x334>
 8003004:	2b10      	cmp	r3, #16
 8003006:	d002      	beq.n	800300e <HAL_CAN_IRQHandler+0x2f8>
 8003008:	2b20      	cmp	r3, #32
 800300a:	d005      	beq.n	8003018 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800300c:	e01d      	b.n	800304a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	f043 0308 	orr.w	r3, r3, #8
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003016:	e019      	b.n	800304c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	f043 0310 	orr.w	r3, r3, #16
 800301e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003020:	e014      	b.n	800304c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	f043 0320 	orr.w	r3, r3, #32
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800302a:	e00f      	b.n	800304c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003034:	e00a      	b.n	800304c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800303e:	e005      	b.n	800304c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003048:	e000      	b.n	800304c <HAL_CAN_IRQHandler+0x336>
            break;
 800304a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800305a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2204      	movs	r2, #4
 8003062:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	2b00      	cmp	r3, #0
 8003068:	d008      	beq.n	800307c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	431a      	orrs	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f836 	bl	80030e8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800307c:	bf00      	nop
 800307e:	3728      	adds	r7, #40	; 0x28
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800310c:	4b0b      	ldr	r3, [pc, #44]	; (800313c <__NVIC_SetPriorityGrouping+0x40>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003118:	4013      	ands	r3, r2
 800311a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003124:	4b06      	ldr	r3, [pc, #24]	; (8003140 <__NVIC_SetPriorityGrouping+0x44>)
 8003126:	4313      	orrs	r3, r2
 8003128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800312a:	4a04      	ldr	r2, [pc, #16]	; (800313c <__NVIC_SetPriorityGrouping+0x40>)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	60d3      	str	r3, [r2, #12]
}
 8003130:	bf00      	nop
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	e000ed00 	.word	0xe000ed00
 8003140:	05fa0000 	.word	0x05fa0000

08003144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003148:	4b04      	ldr	r3, [pc, #16]	; (800315c <__NVIC_GetPriorityGrouping+0x18>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	0a1b      	lsrs	r3, r3, #8
 800314e:	f003 0307 	and.w	r3, r3, #7
}
 8003152:	4618      	mov	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000ed00 	.word	0xe000ed00

08003160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800316a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316e:	2b00      	cmp	r3, #0
 8003170:	db0b      	blt.n	800318a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	f003 021f 	and.w	r2, r3, #31
 8003178:	4907      	ldr	r1, [pc, #28]	; (8003198 <__NVIC_EnableIRQ+0x38>)
 800317a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	2001      	movs	r0, #1
 8003182:	fa00 f202 	lsl.w	r2, r0, r2
 8003186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	e000e100 	.word	0xe000e100

0800319c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	6039      	str	r1, [r7, #0]
 80031a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	db0a      	blt.n	80031c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	490c      	ldr	r1, [pc, #48]	; (80031e8 <__NVIC_SetPriority+0x4c>)
 80031b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ba:	0112      	lsls	r2, r2, #4
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	440b      	add	r3, r1
 80031c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031c4:	e00a      	b.n	80031dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	4908      	ldr	r1, [pc, #32]	; (80031ec <__NVIC_SetPriority+0x50>)
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	3b04      	subs	r3, #4
 80031d4:	0112      	lsls	r2, r2, #4
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	440b      	add	r3, r1
 80031da:	761a      	strb	r2, [r3, #24]
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000e100 	.word	0xe000e100
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b089      	sub	sp, #36	; 0x24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f1c3 0307 	rsb	r3, r3, #7
 800320a:	2b04      	cmp	r3, #4
 800320c:	bf28      	it	cs
 800320e:	2304      	movcs	r3, #4
 8003210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	3304      	adds	r3, #4
 8003216:	2b06      	cmp	r3, #6
 8003218:	d902      	bls.n	8003220 <NVIC_EncodePriority+0x30>
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3b03      	subs	r3, #3
 800321e:	e000      	b.n	8003222 <NVIC_EncodePriority+0x32>
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003224:	f04f 32ff 	mov.w	r2, #4294967295
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43da      	mvns	r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	401a      	ands	r2, r3
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003238:	f04f 31ff 	mov.w	r1, #4294967295
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	fa01 f303 	lsl.w	r3, r1, r3
 8003242:	43d9      	mvns	r1, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003248:	4313      	orrs	r3, r2
         );
}
 800324a:	4618      	mov	r0, r3
 800324c:	3724      	adds	r7, #36	; 0x24
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3b01      	subs	r3, #1
 8003264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003268:	d301      	bcc.n	800326e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800326a:	2301      	movs	r3, #1
 800326c:	e00f      	b.n	800328e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800326e:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <SysTick_Config+0x40>)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3b01      	subs	r3, #1
 8003274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003276:	210f      	movs	r1, #15
 8003278:	f04f 30ff 	mov.w	r0, #4294967295
 800327c:	f7ff ff8e 	bl	800319c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003280:	4b05      	ldr	r3, [pc, #20]	; (8003298 <SysTick_Config+0x40>)
 8003282:	2200      	movs	r2, #0
 8003284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003286:	4b04      	ldr	r3, [pc, #16]	; (8003298 <SysTick_Config+0x40>)
 8003288:	2207      	movs	r2, #7
 800328a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	e000e010 	.word	0xe000e010

0800329c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff ff29 	bl	80030fc <__NVIC_SetPriorityGrouping>
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b086      	sub	sp, #24
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	4603      	mov	r3, r0
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
 80032be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032c4:	f7ff ff3e 	bl	8003144 <__NVIC_GetPriorityGrouping>
 80032c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	6978      	ldr	r0, [r7, #20]
 80032d0:	f7ff ff8e 	bl	80031f0 <NVIC_EncodePriority>
 80032d4:	4602      	mov	r2, r0
 80032d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff5d 	bl	800319c <__NVIC_SetPriority>
}
 80032e2:	bf00      	nop
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	4603      	mov	r3, r0
 80032f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff ff31 	bl	8003160 <__NVIC_EnableIRQ>
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff ffa2 	bl	8003258 <SysTick_Config>
 8003314:	4603      	mov	r3, r0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800332c:	f7ff f85a 	bl	80023e4 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e099      	b.n	8003470 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0201 	bic.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800335c:	e00f      	b.n	800337e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800335e:	f7ff f841 	bl	80023e4 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b05      	cmp	r3, #5
 800336a:	d908      	bls.n	800337e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2203      	movs	r2, #3
 8003376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e078      	b.n	8003470 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1e8      	bne.n	800335e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	4b38      	ldr	r3, [pc, #224]	; (8003478 <HAL_DMA_Init+0x158>)
 8003398:	4013      	ands	r3, r2
 800339a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d107      	bne.n	80033e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e0:	4313      	orrs	r3, r2
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f023 0307 	bic.w	r3, r3, #7
 80033fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	4313      	orrs	r3, r2
 8003408:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	2b04      	cmp	r3, #4
 8003410:	d117      	bne.n	8003442 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	4313      	orrs	r3, r2
 800341a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00e      	beq.n	8003442 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 fa7b 	bl	8003920 <DMA_CheckFifoParam>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d008      	beq.n	8003442 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2240      	movs	r2, #64	; 0x40
 8003434:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800343e:	2301      	movs	r3, #1
 8003440:	e016      	b.n	8003470 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fa32 	bl	80038b4 <DMA_CalcBaseAndBitshift>
 8003450:	4603      	mov	r3, r0
 8003452:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003458:	223f      	movs	r2, #63	; 0x3f
 800345a:	409a      	lsls	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	e010803f 	.word	0xe010803f

0800347c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003488:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800348a:	f7fe ffab 	bl	80023e4 <HAL_GetTick>
 800348e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d008      	beq.n	80034ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2280      	movs	r2, #128	; 0x80
 80034a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e052      	b.n	8003554 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0216 	bic.w	r2, r2, #22
 80034bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695a      	ldr	r2, [r3, #20]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d103      	bne.n	80034de <HAL_DMA_Abort+0x62>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d007      	beq.n	80034ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0208 	bic.w	r2, r2, #8
 80034ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0201 	bic.w	r2, r2, #1
 80034fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034fe:	e013      	b.n	8003528 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003500:	f7fe ff70 	bl	80023e4 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b05      	cmp	r3, #5
 800350c:	d90c      	bls.n	8003528 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2203      	movs	r2, #3
 8003518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e015      	b.n	8003554 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1e4      	bne.n	8003500 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353a:	223f      	movs	r2, #63	; 0x3f
 800353c:	409a      	lsls	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d004      	beq.n	800357a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2280      	movs	r2, #128	; 0x80
 8003574:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e00c      	b.n	8003594 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2205      	movs	r2, #5
 800357e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0201 	bic.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80035ac:	4b8e      	ldr	r3, [pc, #568]	; (80037e8 <HAL_DMA_IRQHandler+0x248>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a8e      	ldr	r2, [pc, #568]	; (80037ec <HAL_DMA_IRQHandler+0x24c>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	0a9b      	lsrs	r3, r3, #10
 80035b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ca:	2208      	movs	r2, #8
 80035cc:	409a      	lsls	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d01a      	beq.n	800360c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d013      	beq.n	800360c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0204 	bic.w	r2, r2, #4
 80035f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f8:	2208      	movs	r2, #8
 80035fa:	409a      	lsls	r2, r3
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003604:	f043 0201 	orr.w	r2, r3, #1
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003610:	2201      	movs	r2, #1
 8003612:	409a      	lsls	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4013      	ands	r3, r2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d012      	beq.n	8003642 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00b      	beq.n	8003642 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362e:	2201      	movs	r2, #1
 8003630:	409a      	lsls	r2, r3
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363a:	f043 0202 	orr.w	r2, r3, #2
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003646:	2204      	movs	r2, #4
 8003648:	409a      	lsls	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4013      	ands	r3, r2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d012      	beq.n	8003678 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00b      	beq.n	8003678 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003664:	2204      	movs	r2, #4
 8003666:	409a      	lsls	r2, r3
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003670:	f043 0204 	orr.w	r2, r3, #4
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367c:	2210      	movs	r2, #16
 800367e:	409a      	lsls	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4013      	ands	r3, r2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d043      	beq.n	8003710 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d03c      	beq.n	8003710 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369a:	2210      	movs	r2, #16
 800369c:	409a      	lsls	r2, r3
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d018      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d108      	bne.n	80036d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d024      	beq.n	8003710 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	4798      	blx	r3
 80036ce:	e01f      	b.n	8003710 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d01b      	beq.n	8003710 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	4798      	blx	r3
 80036e0:	e016      	b.n	8003710 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d107      	bne.n	8003700 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0208 	bic.w	r2, r2, #8
 80036fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003714:	2220      	movs	r2, #32
 8003716:	409a      	lsls	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4013      	ands	r3, r2
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 808f 	beq.w	8003840 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 8087 	beq.w	8003840 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003736:	2220      	movs	r2, #32
 8003738:	409a      	lsls	r2, r3
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b05      	cmp	r3, #5
 8003748:	d136      	bne.n	80037b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0216 	bic.w	r2, r2, #22
 8003758:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695a      	ldr	r2, [r3, #20]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003768:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	d103      	bne.n	800377a <HAL_DMA_IRQHandler+0x1da>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003776:	2b00      	cmp	r3, #0
 8003778:	d007      	beq.n	800378a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0208 	bic.w	r2, r2, #8
 8003788:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378e:	223f      	movs	r2, #63	; 0x3f
 8003790:	409a      	lsls	r2, r3
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d07e      	beq.n	80038ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	4798      	blx	r3
        }
        return;
 80037b6:	e079      	b.n	80038ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d01d      	beq.n	8003802 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10d      	bne.n	80037f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d031      	beq.n	8003840 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	4798      	blx	r3
 80037e4:	e02c      	b.n	8003840 <HAL_DMA_IRQHandler+0x2a0>
 80037e6:	bf00      	nop
 80037e8:	20000000 	.word	0x20000000
 80037ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d023      	beq.n	8003840 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	4798      	blx	r3
 8003800:	e01e      	b.n	8003840 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10f      	bne.n	8003830 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0210 	bic.w	r2, r2, #16
 800381e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003844:	2b00      	cmp	r3, #0
 8003846:	d032      	beq.n	80038ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d022      	beq.n	800389a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2205      	movs	r2, #5
 8003858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0201 	bic.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	3301      	adds	r3, #1
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	429a      	cmp	r2, r3
 8003876:	d307      	bcc.n	8003888 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f2      	bne.n	800386c <HAL_DMA_IRQHandler+0x2cc>
 8003886:	e000      	b.n	800388a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003888:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d005      	beq.n	80038ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	4798      	blx	r3
 80038aa:	e000      	b.n	80038ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80038ac:	bf00      	nop
    }
  }
}
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	3b10      	subs	r3, #16
 80038c4:	4a13      	ldr	r2, [pc, #76]	; (8003914 <DMA_CalcBaseAndBitshift+0x60>)
 80038c6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ca:	091b      	lsrs	r3, r3, #4
 80038cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038ce:	4a12      	ldr	r2, [pc, #72]	; (8003918 <DMA_CalcBaseAndBitshift+0x64>)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4413      	add	r3, r2
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b03      	cmp	r3, #3
 80038e0:	d908      	bls.n	80038f4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	4b0c      	ldr	r3, [pc, #48]	; (800391c <DMA_CalcBaseAndBitshift+0x68>)
 80038ea:	4013      	ands	r3, r2
 80038ec:	1d1a      	adds	r2, r3, #4
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	659a      	str	r2, [r3, #88]	; 0x58
 80038f2:	e006      	b.n	8003902 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	461a      	mov	r2, r3
 80038fa:	4b08      	ldr	r3, [pc, #32]	; (800391c <DMA_CalcBaseAndBitshift+0x68>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003906:	4618      	mov	r0, r3
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	aaaaaaab 	.word	0xaaaaaaab
 8003918:	08008264 	.word	0x08008264
 800391c:	fffffc00 	.word	0xfffffc00

08003920 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003930:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d11f      	bne.n	800397a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2b03      	cmp	r3, #3
 800393e:	d856      	bhi.n	80039ee <DMA_CheckFifoParam+0xce>
 8003940:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <DMA_CheckFifoParam+0x28>)
 8003942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003946:	bf00      	nop
 8003948:	08003959 	.word	0x08003959
 800394c:	0800396b 	.word	0x0800396b
 8003950:	08003959 	.word	0x08003959
 8003954:	080039ef 	.word	0x080039ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d046      	beq.n	80039f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003968:	e043      	b.n	80039f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003972:	d140      	bne.n	80039f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003978:	e03d      	b.n	80039f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003982:	d121      	bne.n	80039c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2b03      	cmp	r3, #3
 8003988:	d837      	bhi.n	80039fa <DMA_CheckFifoParam+0xda>
 800398a:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <DMA_CheckFifoParam+0x70>)
 800398c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003990:	080039a1 	.word	0x080039a1
 8003994:	080039a7 	.word	0x080039a7
 8003998:	080039a1 	.word	0x080039a1
 800399c:	080039b9 	.word	0x080039b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	73fb      	strb	r3, [r7, #15]
      break;
 80039a4:	e030      	b.n	8003a08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d025      	beq.n	80039fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039b6:	e022      	b.n	80039fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039c0:	d11f      	bne.n	8003a02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039c6:	e01c      	b.n	8003a02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d903      	bls.n	80039d6 <DMA_CheckFifoParam+0xb6>
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d003      	beq.n	80039dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039d4:	e018      	b.n	8003a08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	73fb      	strb	r3, [r7, #15]
      break;
 80039da:	e015      	b.n	8003a08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00e      	beq.n	8003a06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	73fb      	strb	r3, [r7, #15]
      break;
 80039ec:	e00b      	b.n	8003a06 <DMA_CheckFifoParam+0xe6>
      break;
 80039ee:	bf00      	nop
 80039f0:	e00a      	b.n	8003a08 <DMA_CheckFifoParam+0xe8>
      break;
 80039f2:	bf00      	nop
 80039f4:	e008      	b.n	8003a08 <DMA_CheckFifoParam+0xe8>
      break;
 80039f6:	bf00      	nop
 80039f8:	e006      	b.n	8003a08 <DMA_CheckFifoParam+0xe8>
      break;
 80039fa:	bf00      	nop
 80039fc:	e004      	b.n	8003a08 <DMA_CheckFifoParam+0xe8>
      break;
 80039fe:	bf00      	nop
 8003a00:	e002      	b.n	8003a08 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a02:	bf00      	nop
 8003a04:	e000      	b.n	8003a08 <DMA_CheckFifoParam+0xe8>
      break;
 8003a06:	bf00      	nop
    }
  } 
  
  return status; 
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3714      	adds	r7, #20
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop

08003a18 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e06a      	b.n	8003b00 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d106      	bne.n	8003a42 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2223      	movs	r2, #35	; 0x23
 8003a38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7fe f979 	bl	8001d34 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a42:	4b31      	ldr	r3, [pc, #196]	; (8003b08 <HAL_ETH_Init+0xf0>)
 8003a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a46:	4a30      	ldr	r2, [pc, #192]	; (8003b08 <HAL_ETH_Init+0xf0>)
 8003a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a4e:	4b2e      	ldr	r3, [pc, #184]	; (8003b08 <HAL_ETH_Init+0xf0>)
 8003a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a56:	60bb      	str	r3, [r7, #8]
 8003a58:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003a5a:	4b2c      	ldr	r3, [pc, #176]	; (8003b0c <HAL_ETH_Init+0xf4>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	4a2b      	ldr	r2, [pc, #172]	; (8003b0c <HAL_ETH_Init+0xf4>)
 8003a60:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a64:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003a66:	4b29      	ldr	r3, [pc, #164]	; (8003b0c <HAL_ETH_Init+0xf4>)
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	4927      	ldr	r1, [pc, #156]	; (8003b0c <HAL_ETH_Init+0xf4>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003a74:	4b25      	ldr	r3, [pc, #148]	; (8003b0c <HAL_ETH_Init+0xf4>)
 8003a76:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6812      	ldr	r2, [r2, #0]
 8003a86:	f043 0301 	orr.w	r3, r3, #1
 8003a8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a8e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a90:	f7fe fca8 	bl	80023e4 <HAL_GetTick>
 8003a94:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003a96:	e011      	b.n	8003abc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003a98:	f7fe fca4 	bl	80023e4 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003aa6:	d909      	bls.n	8003abc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2204      	movs	r2, #4
 8003aac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	22e0      	movs	r2, #224	; 0xe0
 8003ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e021      	b.n	8003b00 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1e4      	bne.n	8003a98 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f958 	bl	8003d84 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f9ff 	bl	8003ed8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 fa55 	bl	8003f8a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f9bd 	bl	8003e68 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2210      	movs	r2, #16
 8003afa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	40013800 	.word	0x40013800

08003b10 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	4b51      	ldr	r3, [pc, #324]	; (8003c6c <ETH_SetMACConfig+0x15c>)
 8003b26:	4013      	ands	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	7c1b      	ldrb	r3, [r3, #16]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d102      	bne.n	8003b38 <ETH_SetMACConfig+0x28>
 8003b32:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003b36:	e000      	b.n	8003b3a <ETH_SetMACConfig+0x2a>
 8003b38:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	7c5b      	ldrb	r3, [r3, #17]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d102      	bne.n	8003b48 <ETH_SetMACConfig+0x38>
 8003b42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b46:	e000      	b.n	8003b4a <ETH_SetMACConfig+0x3a>
 8003b48:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003b4a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003b50:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	7fdb      	ldrb	r3, [r3, #31]
 8003b56:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003b58:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003b5e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	7f92      	ldrb	r2, [r2, #30]
 8003b64:	2a00      	cmp	r2, #0
 8003b66:	d102      	bne.n	8003b6e <ETH_SetMACConfig+0x5e>
 8003b68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b6c:	e000      	b.n	8003b70 <ETH_SetMACConfig+0x60>
 8003b6e:	2200      	movs	r2, #0
                        macconf->Speed |
 8003b70:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	7f1b      	ldrb	r3, [r3, #28]
 8003b76:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003b78:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003b7e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	791b      	ldrb	r3, [r3, #4]
 8003b84:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003b86:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003b8e:	2a00      	cmp	r2, #0
 8003b90:	d102      	bne.n	8003b98 <ETH_SetMACConfig+0x88>
 8003b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b96:	e000      	b.n	8003b9a <ETH_SetMACConfig+0x8a>
 8003b98:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003b9a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	7bdb      	ldrb	r3, [r3, #15]
 8003ba0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003ba2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003ba8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bb0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003bca:	2001      	movs	r0, #1
 8003bcc:	f7fe fc16 	bl	80023fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003be6:	4013      	ands	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bee:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003bf6:	2a00      	cmp	r2, #0
 8003bf8:	d101      	bne.n	8003bfe <ETH_SetMACConfig+0xee>
 8003bfa:	2280      	movs	r2, #128	; 0x80
 8003bfc:	e000      	b.n	8003c00 <ETH_SetMACConfig+0xf0>
 8003bfe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003c00:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003c06:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003c0e:	2a01      	cmp	r2, #1
 8003c10:	d101      	bne.n	8003c16 <ETH_SetMACConfig+0x106>
 8003c12:	2208      	movs	r2, #8
 8003c14:	e000      	b.n	8003c18 <ETH_SetMACConfig+0x108>
 8003c16:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003c18:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003c20:	2a01      	cmp	r2, #1
 8003c22:	d101      	bne.n	8003c28 <ETH_SetMACConfig+0x118>
 8003c24:	2204      	movs	r2, #4
 8003c26:	e000      	b.n	8003c2a <ETH_SetMACConfig+0x11a>
 8003c28:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003c2a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003c32:	2a01      	cmp	r2, #1
 8003c34:	d101      	bne.n	8003c3a <ETH_SetMACConfig+0x12a>
 8003c36:	2202      	movs	r2, #2
 8003c38:	e000      	b.n	8003c3c <ETH_SetMACConfig+0x12c>
 8003c3a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c54:	2001      	movs	r0, #1
 8003c56:	f7fe fbd1 	bl	80023fc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	619a      	str	r2, [r3, #24]
}
 8003c62:	bf00      	nop
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	ff20810f 	.word	0xff20810f

08003c70 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4b3d      	ldr	r3, [pc, #244]	; (8003d80 <ETH_SetDMAConfig+0x110>)
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	7b1b      	ldrb	r3, [r3, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d102      	bne.n	8003c9c <ETH_SetDMAConfig+0x2c>
 8003c96:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003c9a:	e000      	b.n	8003c9e <ETH_SetDMAConfig+0x2e>
 8003c9c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	7b5b      	ldrb	r3, [r3, #13]
 8003ca2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003ca4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	7f52      	ldrb	r2, [r2, #29]
 8003caa:	2a00      	cmp	r2, #0
 8003cac:	d102      	bne.n	8003cb4 <ETH_SetDMAConfig+0x44>
 8003cae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003cb2:	e000      	b.n	8003cb6 <ETH_SetDMAConfig+0x46>
 8003cb4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003cb6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	7b9b      	ldrb	r3, [r3, #14]
 8003cbc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003cbe:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003cc4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	7f1b      	ldrb	r3, [r3, #28]
 8003cca:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003ccc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	7f9b      	ldrb	r3, [r3, #30]
 8003cd2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003cd4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003cda:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ce2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d06:	2001      	movs	r0, #1
 8003d08:	f7fe fb78 	bl	80023fc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d14:	461a      	mov	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	791b      	ldrb	r3, [r3, #4]
 8003d1e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003d24:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003d2a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003d30:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d38:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003d3a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d40:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003d42:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003d48:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6812      	ldr	r2, [r2, #0]
 8003d4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d56:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d64:	2001      	movs	r0, #1
 8003d66:	f7fe fb49 	bl	80023fc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d72:	461a      	mov	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6013      	str	r3, [r2, #0]
}
 8003d78:	bf00      	nop
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	f8de3f23 	.word	0xf8de3f23

08003d84 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b0a6      	sub	sp, #152	; 0x98
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003d92:	2301      	movs	r3, #1
 8003d94:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003da2:	2301      	movs	r3, #1
 8003da4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003da8:	2300      	movs	r3, #0
 8003daa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003dae:	2301      	movs	r3, #1
 8003db0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003db4:	2300      	movs	r3, #0
 8003db6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003de0:	2300      	movs	r3, #0
 8003de2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003de6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003dea:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003dec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003df0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003df2:	2300      	movs	r3, #0
 8003df4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003df8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7ff fe86 	bl	8003b10 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003e04:	2301      	movs	r3, #1
 8003e06:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003e12:	2301      	movs	r3, #1
 8003e14:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003e16:	2300      	movs	r3, #0
 8003e18:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003e20:	2300      	movs	r3, #0
 8003e22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003e26:	2300      	movs	r3, #0
 8003e28:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003e30:	2301      	movs	r3, #1
 8003e32:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003e34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e38:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003e3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e3e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003e40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e44:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003e46:	2301      	movs	r3, #1
 8003e48:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003e50:	2300      	movs	r3, #0
 8003e52:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003e54:	f107 0308 	add.w	r3, r7, #8
 8003e58:	4619      	mov	r1, r3
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff ff08 	bl	8003c70 <ETH_SetDMAConfig>
}
 8003e60:	bf00      	nop
 8003e62:	3798      	adds	r7, #152	; 0x98
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3305      	adds	r3, #5
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	021b      	lsls	r3, r3, #8
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	3204      	adds	r2, #4
 8003e80:	7812      	ldrb	r2, [r2, #0]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	4b11      	ldr	r3, [pc, #68]	; (8003ed0 <ETH_MACAddressConfig+0x68>)
 8003e8a:	4413      	add	r3, r2
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	3303      	adds	r3, #3
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	061a      	lsls	r2, r3, #24
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3302      	adds	r3, #2
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	041b      	lsls	r3, r3, #16
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	021b      	lsls	r3, r3, #8
 8003eac:	4313      	orrs	r3, r2
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	7812      	ldrb	r2, [r2, #0]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	4b06      	ldr	r3, [pc, #24]	; (8003ed4 <ETH_MACAddressConfig+0x6c>)
 8003eba:	4413      	add	r3, r2
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	6013      	str	r3, [r2, #0]
}
 8003ec2:	bf00      	nop
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40028040 	.word	0x40028040
 8003ed4:	40028044 	.word	0x40028044

08003ed8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	e03e      	b.n	8003f64 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68d9      	ldr	r1, [r3, #12]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4613      	mov	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	440b      	add	r3, r1
 8003ef6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2200      	movs	r2, #0
 8003f02:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2200      	movs	r2, #0
 8003f08:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	3206      	adds	r2, #6
 8003f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d80c      	bhi.n	8003f48 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68d9      	ldr	r1, [r3, #12]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	4613      	mov	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	440b      	add	r3, r1
 8003f40:	461a      	mov	r2, r3
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	60da      	str	r2, [r3, #12]
 8003f46:	e004      	b.n	8003f52 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	3301      	adds	r3, #1
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b03      	cmp	r3, #3
 8003f68:	d9bd      	bls.n	8003ee6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68da      	ldr	r2, [r3, #12]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f7c:	611a      	str	r2, [r3, #16]
}
 8003f7e:	bf00      	nop
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b085      	sub	sp, #20
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003f92:	2300      	movs	r3, #0
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	e046      	b.n	8004026 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6919      	ldr	r1, [r3, #16]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	440b      	add	r3, r1
 8003fa8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003fd4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003fdc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003fea:	68b9      	ldr	r1, [r7, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	3212      	adds	r2, #18
 8003ff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d80c      	bhi.n	8004016 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6919      	ldr	r1, [r3, #16]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	1c5a      	adds	r2, r3, #1
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	440b      	add	r3, r1
 800400e:	461a      	mov	r2, r3
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	60da      	str	r2, [r3, #12]
 8004014:	e004      	b.n	8004020 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	461a      	mov	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3301      	adds	r3, #1
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b03      	cmp	r3, #3
 800402a:	d9b5      	bls.n	8003f98 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691a      	ldr	r2, [r3, #16]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004056:	60da      	str	r2, [r3, #12]
}
 8004058:	bf00      	nop
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004064:	b480      	push	{r7}
 8004066:	b089      	sub	sp, #36	; 0x24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800406e:	2300      	movs	r3, #0
 8004070:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004076:	2300      	movs	r3, #0
 8004078:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800407a:	2300      	movs	r3, #0
 800407c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
 8004082:	e175      	b.n	8004370 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004084:	2201      	movs	r2, #1
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4013      	ands	r3, r2
 8004096:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	429a      	cmp	r2, r3
 800409e:	f040 8164 	bne.w	800436a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d005      	beq.n	80040ba <HAL_GPIO_Init+0x56>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d130      	bne.n	800411c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	2203      	movs	r2, #3
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	43db      	mvns	r3, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4013      	ands	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040f0:	2201      	movs	r2, #1
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	43db      	mvns	r3, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	091b      	lsrs	r3, r3, #4
 8004106:	f003 0201 	and.w	r2, r3, #1
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	4313      	orrs	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f003 0303 	and.w	r3, r3, #3
 8004124:	2b03      	cmp	r3, #3
 8004126:	d017      	beq.n	8004158 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	2203      	movs	r2, #3
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	43db      	mvns	r3, r3
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	4013      	ands	r3, r2
 800413e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	4313      	orrs	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d123      	bne.n	80041ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	08da      	lsrs	r2, r3, #3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3208      	adds	r2, #8
 800416c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	220f      	movs	r2, #15
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	43db      	mvns	r3, r3
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	4013      	ands	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	4313      	orrs	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	08da      	lsrs	r2, r3, #3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3208      	adds	r2, #8
 80041a6:	69b9      	ldr	r1, [r7, #24]
 80041a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	2203      	movs	r2, #3
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	43db      	mvns	r3, r3
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	4013      	ands	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 0203 	and.w	r2, r3, #3
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 80be 	beq.w	800436a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ee:	4b66      	ldr	r3, [pc, #408]	; (8004388 <HAL_GPIO_Init+0x324>)
 80041f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f2:	4a65      	ldr	r2, [pc, #404]	; (8004388 <HAL_GPIO_Init+0x324>)
 80041f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041f8:	6453      	str	r3, [r2, #68]	; 0x44
 80041fa:	4b63      	ldr	r3, [pc, #396]	; (8004388 <HAL_GPIO_Init+0x324>)
 80041fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004206:	4a61      	ldr	r2, [pc, #388]	; (800438c <HAL_GPIO_Init+0x328>)
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	089b      	lsrs	r3, r3, #2
 800420c:	3302      	adds	r3, #2
 800420e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004212:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	220f      	movs	r2, #15
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	43db      	mvns	r3, r3
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	4013      	ands	r3, r2
 8004228:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a58      	ldr	r2, [pc, #352]	; (8004390 <HAL_GPIO_Init+0x32c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d037      	beq.n	80042a2 <HAL_GPIO_Init+0x23e>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a57      	ldr	r2, [pc, #348]	; (8004394 <HAL_GPIO_Init+0x330>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d031      	beq.n	800429e <HAL_GPIO_Init+0x23a>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a56      	ldr	r2, [pc, #344]	; (8004398 <HAL_GPIO_Init+0x334>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d02b      	beq.n	800429a <HAL_GPIO_Init+0x236>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a55      	ldr	r2, [pc, #340]	; (800439c <HAL_GPIO_Init+0x338>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d025      	beq.n	8004296 <HAL_GPIO_Init+0x232>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a54      	ldr	r2, [pc, #336]	; (80043a0 <HAL_GPIO_Init+0x33c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d01f      	beq.n	8004292 <HAL_GPIO_Init+0x22e>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a53      	ldr	r2, [pc, #332]	; (80043a4 <HAL_GPIO_Init+0x340>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d019      	beq.n	800428e <HAL_GPIO_Init+0x22a>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a52      	ldr	r2, [pc, #328]	; (80043a8 <HAL_GPIO_Init+0x344>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d013      	beq.n	800428a <HAL_GPIO_Init+0x226>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a51      	ldr	r2, [pc, #324]	; (80043ac <HAL_GPIO_Init+0x348>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d00d      	beq.n	8004286 <HAL_GPIO_Init+0x222>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a50      	ldr	r2, [pc, #320]	; (80043b0 <HAL_GPIO_Init+0x34c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d007      	beq.n	8004282 <HAL_GPIO_Init+0x21e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a4f      	ldr	r2, [pc, #316]	; (80043b4 <HAL_GPIO_Init+0x350>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d101      	bne.n	800427e <HAL_GPIO_Init+0x21a>
 800427a:	2309      	movs	r3, #9
 800427c:	e012      	b.n	80042a4 <HAL_GPIO_Init+0x240>
 800427e:	230a      	movs	r3, #10
 8004280:	e010      	b.n	80042a4 <HAL_GPIO_Init+0x240>
 8004282:	2308      	movs	r3, #8
 8004284:	e00e      	b.n	80042a4 <HAL_GPIO_Init+0x240>
 8004286:	2307      	movs	r3, #7
 8004288:	e00c      	b.n	80042a4 <HAL_GPIO_Init+0x240>
 800428a:	2306      	movs	r3, #6
 800428c:	e00a      	b.n	80042a4 <HAL_GPIO_Init+0x240>
 800428e:	2305      	movs	r3, #5
 8004290:	e008      	b.n	80042a4 <HAL_GPIO_Init+0x240>
 8004292:	2304      	movs	r3, #4
 8004294:	e006      	b.n	80042a4 <HAL_GPIO_Init+0x240>
 8004296:	2303      	movs	r3, #3
 8004298:	e004      	b.n	80042a4 <HAL_GPIO_Init+0x240>
 800429a:	2302      	movs	r3, #2
 800429c:	e002      	b.n	80042a4 <HAL_GPIO_Init+0x240>
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <HAL_GPIO_Init+0x240>
 80042a2:	2300      	movs	r3, #0
 80042a4:	69fa      	ldr	r2, [r7, #28]
 80042a6:	f002 0203 	and.w	r2, r2, #3
 80042aa:	0092      	lsls	r2, r2, #2
 80042ac:	4093      	lsls	r3, r2
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80042b4:	4935      	ldr	r1, [pc, #212]	; (800438c <HAL_GPIO_Init+0x328>)
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	089b      	lsrs	r3, r3, #2
 80042ba:	3302      	adds	r3, #2
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042c2:	4b3d      	ldr	r3, [pc, #244]	; (80043b8 <HAL_GPIO_Init+0x354>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	43db      	mvns	r3, r3
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	4013      	ands	r3, r2
 80042d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042e6:	4a34      	ldr	r2, [pc, #208]	; (80043b8 <HAL_GPIO_Init+0x354>)
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042ec:	4b32      	ldr	r3, [pc, #200]	; (80043b8 <HAL_GPIO_Init+0x354>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	43db      	mvns	r3, r3
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	4013      	ands	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	4313      	orrs	r3, r2
 800430e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004310:	4a29      	ldr	r2, [pc, #164]	; (80043b8 <HAL_GPIO_Init+0x354>)
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004316:	4b28      	ldr	r3, [pc, #160]	; (80043b8 <HAL_GPIO_Init+0x354>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	43db      	mvns	r3, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4013      	ands	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800433a:	4a1f      	ldr	r2, [pc, #124]	; (80043b8 <HAL_GPIO_Init+0x354>)
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004340:	4b1d      	ldr	r3, [pc, #116]	; (80043b8 <HAL_GPIO_Init+0x354>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	43db      	mvns	r3, r3
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	4013      	ands	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004364:	4a14      	ldr	r2, [pc, #80]	; (80043b8 <HAL_GPIO_Init+0x354>)
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	3301      	adds	r3, #1
 800436e:	61fb      	str	r3, [r7, #28]
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	2b0f      	cmp	r3, #15
 8004374:	f67f ae86 	bls.w	8004084 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004378:	bf00      	nop
 800437a:	bf00      	nop
 800437c:	3724      	adds	r7, #36	; 0x24
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	40023800 	.word	0x40023800
 800438c:	40013800 	.word	0x40013800
 8004390:	40020000 	.word	0x40020000
 8004394:	40020400 	.word	0x40020400
 8004398:	40020800 	.word	0x40020800
 800439c:	40020c00 	.word	0x40020c00
 80043a0:	40021000 	.word	0x40021000
 80043a4:	40021400 	.word	0x40021400
 80043a8:	40021800 	.word	0x40021800
 80043ac:	40021c00 	.word	0x40021c00
 80043b0:	40022000 	.word	0x40022000
 80043b4:	40022400 	.word	0x40022400
 80043b8:	40013c00 	.word	0x40013c00

080043bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	460b      	mov	r3, r1
 80043c6:	807b      	strh	r3, [r7, #2]
 80043c8:	4613      	mov	r3, r2
 80043ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043cc:	787b      	ldrb	r3, [r7, #1]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043d2:	887a      	ldrh	r2, [r7, #2]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80043d8:	e003      	b.n	80043e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80043da:	887b      	ldrh	r3, [r7, #2]
 80043dc:	041a      	lsls	r2, r3, #16
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	619a      	str	r2, [r3, #24]
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80043ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f0:	b08f      	sub	sp, #60	; 0x3c
 80043f2:	af0a      	add	r7, sp, #40	; 0x28
 80043f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e116      	b.n	800462e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d106      	bne.n	8004420 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7fd fddc 	bl	8001fd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2203      	movs	r2, #3
 8004424:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004430:	2b00      	cmp	r3, #0
 8004432:	d102      	bne.n	800443a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f002 fb74 	bl	8006b2c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	603b      	str	r3, [r7, #0]
 800444a:	687e      	ldr	r6, [r7, #4]
 800444c:	466d      	mov	r5, sp
 800444e:	f106 0410 	add.w	r4, r6, #16
 8004452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004456:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004458:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800445a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800445e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004462:	1d33      	adds	r3, r6, #4
 8004464:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004466:	6838      	ldr	r0, [r7, #0]
 8004468:	f002 fb08 	bl	8006a7c <USB_CoreInit>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d005      	beq.n	800447e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2202      	movs	r2, #2
 8004476:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e0d7      	b.n	800462e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2100      	movs	r1, #0
 8004484:	4618      	mov	r0, r3
 8004486:	f002 fb62 	bl	8006b4e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800448a:	2300      	movs	r3, #0
 800448c:	73fb      	strb	r3, [r7, #15]
 800448e:	e04a      	b.n	8004526 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004490:	7bfa      	ldrb	r2, [r7, #15]
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	4613      	mov	r3, r2
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	4413      	add	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	333d      	adds	r3, #61	; 0x3d
 80044a0:	2201      	movs	r2, #1
 80044a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80044a4:	7bfa      	ldrb	r2, [r7, #15]
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	4613      	mov	r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	4413      	add	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	440b      	add	r3, r1
 80044b2:	333c      	adds	r3, #60	; 0x3c
 80044b4:	7bfa      	ldrb	r2, [r7, #15]
 80044b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80044b8:	7bfa      	ldrb	r2, [r7, #15]
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
 80044bc:	b298      	uxth	r0, r3
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	4413      	add	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	3344      	adds	r3, #68	; 0x44
 80044cc:	4602      	mov	r2, r0
 80044ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80044d0:	7bfa      	ldrb	r2, [r7, #15]
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	4613      	mov	r3, r2
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	4413      	add	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	3340      	adds	r3, #64	; 0x40
 80044e0:	2200      	movs	r2, #0
 80044e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80044e4:	7bfa      	ldrb	r2, [r7, #15]
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	4613      	mov	r3, r2
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	3348      	adds	r3, #72	; 0x48
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80044f8:	7bfa      	ldrb	r2, [r7, #15]
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	4613      	mov	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	4413      	add	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	440b      	add	r3, r1
 8004506:	334c      	adds	r3, #76	; 0x4c
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800450c:	7bfa      	ldrb	r2, [r7, #15]
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	4613      	mov	r3, r2
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	4413      	add	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	3354      	adds	r3, #84	; 0x54
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004520:	7bfb      	ldrb	r3, [r7, #15]
 8004522:	3301      	adds	r3, #1
 8004524:	73fb      	strb	r3, [r7, #15]
 8004526:	7bfa      	ldrb	r2, [r7, #15]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	429a      	cmp	r2, r3
 800452e:	d3af      	bcc.n	8004490 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004530:	2300      	movs	r3, #0
 8004532:	73fb      	strb	r3, [r7, #15]
 8004534:	e044      	b.n	80045c0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004536:	7bfa      	ldrb	r2, [r7, #15]
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	4613      	mov	r3, r2
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	4413      	add	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	440b      	add	r3, r1
 8004544:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004548:	2200      	movs	r2, #0
 800454a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800454c:	7bfa      	ldrb	r2, [r7, #15]
 800454e:	6879      	ldr	r1, [r7, #4]
 8004550:	4613      	mov	r3, r2
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	4413      	add	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	440b      	add	r3, r1
 800455a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800455e:	7bfa      	ldrb	r2, [r7, #15]
 8004560:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004562:	7bfa      	ldrb	r2, [r7, #15]
 8004564:	6879      	ldr	r1, [r7, #4]
 8004566:	4613      	mov	r3, r2
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	4413      	add	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	440b      	add	r3, r1
 8004570:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004574:	2200      	movs	r2, #0
 8004576:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004578:	7bfa      	ldrb	r2, [r7, #15]
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	4613      	mov	r3, r2
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	4413      	add	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800458e:	7bfa      	ldrb	r2, [r7, #15]
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	4413      	add	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045a4:	7bfa      	ldrb	r2, [r7, #15]
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	4613      	mov	r3, r2
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	4413      	add	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
 80045bc:	3301      	adds	r3, #1
 80045be:	73fb      	strb	r3, [r7, #15]
 80045c0:	7bfa      	ldrb	r2, [r7, #15]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d3b5      	bcc.n	8004536 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	603b      	str	r3, [r7, #0]
 80045d0:	687e      	ldr	r6, [r7, #4]
 80045d2:	466d      	mov	r5, sp
 80045d4:	f106 0410 	add.w	r4, r6, #16
 80045d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80045e8:	1d33      	adds	r3, r6, #4
 80045ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045ec:	6838      	ldr	r0, [r7, #0]
 80045ee:	f002 fafb 	bl	8006be8 <USB_DevInit>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d005      	beq.n	8004604 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e014      	b.n	800462e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	2b01      	cmp	r3, #1
 800461a:	d102      	bne.n	8004622 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f80b 	bl	8004638 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4618      	mov	r0, r3
 8004628:	f002 fcb9 	bl	8006f9e <USB_DevDisconnect>

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004638 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004666:	4b05      	ldr	r3, [pc, #20]	; (800467c <HAL_PCDEx_ActivateLPM+0x44>)
 8004668:	4313      	orrs	r3, r2
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	10000003 	.word	0x10000003

08004680 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004684:	4b05      	ldr	r3, [pc, #20]	; (800469c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a04      	ldr	r2, [pc, #16]	; (800469c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800468a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800468e:	6013      	str	r3, [r2, #0]
}
 8004690:	bf00      	nop
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	40007000 	.word	0x40007000

080046a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80046a6:	2300      	movs	r3, #0
 80046a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80046aa:	4b23      	ldr	r3, [pc, #140]	; (8004738 <HAL_PWREx_EnableOverDrive+0x98>)
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	4a22      	ldr	r2, [pc, #136]	; (8004738 <HAL_PWREx_EnableOverDrive+0x98>)
 80046b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b4:	6413      	str	r3, [r2, #64]	; 0x40
 80046b6:	4b20      	ldr	r3, [pc, #128]	; (8004738 <HAL_PWREx_EnableOverDrive+0x98>)
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80046c2:	4b1e      	ldr	r3, [pc, #120]	; (800473c <HAL_PWREx_EnableOverDrive+0x9c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a1d      	ldr	r2, [pc, #116]	; (800473c <HAL_PWREx_EnableOverDrive+0x9c>)
 80046c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046cc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046ce:	f7fd fe89 	bl	80023e4 <HAL_GetTick>
 80046d2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80046d4:	e009      	b.n	80046ea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046d6:	f7fd fe85 	bl	80023e4 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046e4:	d901      	bls.n	80046ea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e022      	b.n	8004730 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80046ea:	4b14      	ldr	r3, [pc, #80]	; (800473c <HAL_PWREx_EnableOverDrive+0x9c>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f6:	d1ee      	bne.n	80046d6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80046f8:	4b10      	ldr	r3, [pc, #64]	; (800473c <HAL_PWREx_EnableOverDrive+0x9c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a0f      	ldr	r2, [pc, #60]	; (800473c <HAL_PWREx_EnableOverDrive+0x9c>)
 80046fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004702:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004704:	f7fd fe6e 	bl	80023e4 <HAL_GetTick>
 8004708:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800470a:	e009      	b.n	8004720 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800470c:	f7fd fe6a 	bl	80023e4 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800471a:	d901      	bls.n	8004720 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e007      	b.n	8004730 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004720:	4b06      	ldr	r3, [pc, #24]	; (800473c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004728:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800472c:	d1ee      	bne.n	800470c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40023800 	.word	0x40023800
 800473c:	40007000 	.word	0x40007000

08004740 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004748:	2300      	movs	r3, #0
 800474a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e29b      	b.n	8004c8e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 8087 	beq.w	8004872 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004764:	4b96      	ldr	r3, [pc, #600]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 030c 	and.w	r3, r3, #12
 800476c:	2b04      	cmp	r3, #4
 800476e:	d00c      	beq.n	800478a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004770:	4b93      	ldr	r3, [pc, #588]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f003 030c 	and.w	r3, r3, #12
 8004778:	2b08      	cmp	r3, #8
 800477a:	d112      	bne.n	80047a2 <HAL_RCC_OscConfig+0x62>
 800477c:	4b90      	ldr	r3, [pc, #576]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004784:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004788:	d10b      	bne.n	80047a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800478a:	4b8d      	ldr	r3, [pc, #564]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d06c      	beq.n	8004870 <HAL_RCC_OscConfig+0x130>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d168      	bne.n	8004870 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e275      	b.n	8004c8e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047aa:	d106      	bne.n	80047ba <HAL_RCC_OscConfig+0x7a>
 80047ac:	4b84      	ldr	r3, [pc, #528]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a83      	ldr	r2, [pc, #524]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 80047b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	e02e      	b.n	8004818 <HAL_RCC_OscConfig+0xd8>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10c      	bne.n	80047dc <HAL_RCC_OscConfig+0x9c>
 80047c2:	4b7f      	ldr	r3, [pc, #508]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a7e      	ldr	r2, [pc, #504]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 80047c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047cc:	6013      	str	r3, [r2, #0]
 80047ce:	4b7c      	ldr	r3, [pc, #496]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a7b      	ldr	r2, [pc, #492]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 80047d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	e01d      	b.n	8004818 <HAL_RCC_OscConfig+0xd8>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047e4:	d10c      	bne.n	8004800 <HAL_RCC_OscConfig+0xc0>
 80047e6:	4b76      	ldr	r3, [pc, #472]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a75      	ldr	r2, [pc, #468]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 80047ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	4b73      	ldr	r3, [pc, #460]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a72      	ldr	r2, [pc, #456]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 80047f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	e00b      	b.n	8004818 <HAL_RCC_OscConfig+0xd8>
 8004800:	4b6f      	ldr	r3, [pc, #444]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a6e      	ldr	r2, [pc, #440]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 8004806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800480a:	6013      	str	r3, [r2, #0]
 800480c:	4b6c      	ldr	r3, [pc, #432]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a6b      	ldr	r2, [pc, #428]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 8004812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d013      	beq.n	8004848 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004820:	f7fd fde0 	bl	80023e4 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004828:	f7fd fddc 	bl	80023e4 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b64      	cmp	r3, #100	; 0x64
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e229      	b.n	8004c8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483a:	4b61      	ldr	r3, [pc, #388]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0f0      	beq.n	8004828 <HAL_RCC_OscConfig+0xe8>
 8004846:	e014      	b.n	8004872 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004848:	f7fd fdcc 	bl	80023e4 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004850:	f7fd fdc8 	bl	80023e4 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b64      	cmp	r3, #100	; 0x64
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e215      	b.n	8004c8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004862:	4b57      	ldr	r3, [pc, #348]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f0      	bne.n	8004850 <HAL_RCC_OscConfig+0x110>
 800486e:	e000      	b.n	8004872 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d069      	beq.n	8004952 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800487e:	4b50      	ldr	r3, [pc, #320]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 030c 	and.w	r3, r3, #12
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00b      	beq.n	80048a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800488a:	4b4d      	ldr	r3, [pc, #308]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 030c 	and.w	r3, r3, #12
 8004892:	2b08      	cmp	r3, #8
 8004894:	d11c      	bne.n	80048d0 <HAL_RCC_OscConfig+0x190>
 8004896:	4b4a      	ldr	r3, [pc, #296]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d116      	bne.n	80048d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048a2:	4b47      	ldr	r3, [pc, #284]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d005      	beq.n	80048ba <HAL_RCC_OscConfig+0x17a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d001      	beq.n	80048ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e1e9      	b.n	8004c8e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ba:	4b41      	ldr	r3, [pc, #260]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	493d      	ldr	r1, [pc, #244]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ce:	e040      	b.n	8004952 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d023      	beq.n	8004920 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048d8:	4b39      	ldr	r3, [pc, #228]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a38      	ldr	r2, [pc, #224]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 80048de:	f043 0301 	orr.w	r3, r3, #1
 80048e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e4:	f7fd fd7e 	bl	80023e4 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048ec:	f7fd fd7a 	bl	80023e4 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e1c7      	b.n	8004c8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fe:	4b30      	ldr	r3, [pc, #192]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0f0      	beq.n	80048ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800490a:	4b2d      	ldr	r3, [pc, #180]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	4929      	ldr	r1, [pc, #164]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 800491a:	4313      	orrs	r3, r2
 800491c:	600b      	str	r3, [r1, #0]
 800491e:	e018      	b.n	8004952 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004920:	4b27      	ldr	r3, [pc, #156]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a26      	ldr	r2, [pc, #152]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 8004926:	f023 0301 	bic.w	r3, r3, #1
 800492a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492c:	f7fd fd5a 	bl	80023e4 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004934:	f7fd fd56 	bl	80023e4 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e1a3      	b.n	8004c8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004946:	4b1e      	ldr	r3, [pc, #120]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f0      	bne.n	8004934 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b00      	cmp	r3, #0
 800495c:	d038      	beq.n	80049d0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d019      	beq.n	800499a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004966:	4b16      	ldr	r3, [pc, #88]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 8004968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800496a:	4a15      	ldr	r2, [pc, #84]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 800496c:	f043 0301 	orr.w	r3, r3, #1
 8004970:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004972:	f7fd fd37 	bl	80023e4 <HAL_GetTick>
 8004976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004978:	e008      	b.n	800498c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800497a:	f7fd fd33 	bl	80023e4 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e180      	b.n	8004c8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800498c:	4b0c      	ldr	r3, [pc, #48]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 800498e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0f0      	beq.n	800497a <HAL_RCC_OscConfig+0x23a>
 8004998:	e01a      	b.n	80049d0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800499a:	4b09      	ldr	r3, [pc, #36]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 800499c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800499e:	4a08      	ldr	r2, [pc, #32]	; (80049c0 <HAL_RCC_OscConfig+0x280>)
 80049a0:	f023 0301 	bic.w	r3, r3, #1
 80049a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a6:	f7fd fd1d 	bl	80023e4 <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049ac:	e00a      	b.n	80049c4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ae:	f7fd fd19 	bl	80023e4 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d903      	bls.n	80049c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e166      	b.n	8004c8e <HAL_RCC_OscConfig+0x54e>
 80049c0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c4:	4b92      	ldr	r3, [pc, #584]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 80049c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1ee      	bne.n	80049ae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 80a4 	beq.w	8004b26 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049de:	4b8c      	ldr	r3, [pc, #560]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10d      	bne.n	8004a06 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ea:	4b89      	ldr	r3, [pc, #548]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	4a88      	ldr	r2, [pc, #544]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 80049f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f4:	6413      	str	r3, [r2, #64]	; 0x40
 80049f6:	4b86      	ldr	r3, [pc, #536]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fe:	60bb      	str	r3, [r7, #8]
 8004a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a02:	2301      	movs	r3, #1
 8004a04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a06:	4b83      	ldr	r3, [pc, #524]	; (8004c14 <HAL_RCC_OscConfig+0x4d4>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d118      	bne.n	8004a44 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004a12:	4b80      	ldr	r3, [pc, #512]	; (8004c14 <HAL_RCC_OscConfig+0x4d4>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a7f      	ldr	r2, [pc, #508]	; (8004c14 <HAL_RCC_OscConfig+0x4d4>)
 8004a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a1e:	f7fd fce1 	bl	80023e4 <HAL_GetTick>
 8004a22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a24:	e008      	b.n	8004a38 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a26:	f7fd fcdd 	bl	80023e4 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b64      	cmp	r3, #100	; 0x64
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e12a      	b.n	8004c8e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a38:	4b76      	ldr	r3, [pc, #472]	; (8004c14 <HAL_RCC_OscConfig+0x4d4>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0f0      	beq.n	8004a26 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d106      	bne.n	8004a5a <HAL_RCC_OscConfig+0x31a>
 8004a4c:	4b70      	ldr	r3, [pc, #448]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a50:	4a6f      	ldr	r2, [pc, #444]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004a52:	f043 0301 	orr.w	r3, r3, #1
 8004a56:	6713      	str	r3, [r2, #112]	; 0x70
 8004a58:	e02d      	b.n	8004ab6 <HAL_RCC_OscConfig+0x376>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10c      	bne.n	8004a7c <HAL_RCC_OscConfig+0x33c>
 8004a62:	4b6b      	ldr	r3, [pc, #428]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a66:	4a6a      	ldr	r2, [pc, #424]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004a68:	f023 0301 	bic.w	r3, r3, #1
 8004a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a6e:	4b68      	ldr	r3, [pc, #416]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a72:	4a67      	ldr	r2, [pc, #412]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004a74:	f023 0304 	bic.w	r3, r3, #4
 8004a78:	6713      	str	r3, [r2, #112]	; 0x70
 8004a7a:	e01c      	b.n	8004ab6 <HAL_RCC_OscConfig+0x376>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2b05      	cmp	r3, #5
 8004a82:	d10c      	bne.n	8004a9e <HAL_RCC_OscConfig+0x35e>
 8004a84:	4b62      	ldr	r3, [pc, #392]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a88:	4a61      	ldr	r2, [pc, #388]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004a8a:	f043 0304 	orr.w	r3, r3, #4
 8004a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a90:	4b5f      	ldr	r3, [pc, #380]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a94:	4a5e      	ldr	r2, [pc, #376]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004a96:	f043 0301 	orr.w	r3, r3, #1
 8004a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a9c:	e00b      	b.n	8004ab6 <HAL_RCC_OscConfig+0x376>
 8004a9e:	4b5c      	ldr	r3, [pc, #368]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa2:	4a5b      	ldr	r2, [pc, #364]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004aa4:	f023 0301 	bic.w	r3, r3, #1
 8004aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8004aaa:	4b59      	ldr	r3, [pc, #356]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aae:	4a58      	ldr	r2, [pc, #352]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004ab0:	f023 0304 	bic.w	r3, r3, #4
 8004ab4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d015      	beq.n	8004aea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004abe:	f7fd fc91 	bl	80023e4 <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac4:	e00a      	b.n	8004adc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ac6:	f7fd fc8d 	bl	80023e4 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e0d8      	b.n	8004c8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004adc:	4b4c      	ldr	r3, [pc, #304]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0ee      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x386>
 8004ae8:	e014      	b.n	8004b14 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aea:	f7fd fc7b 	bl	80023e4 <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af0:	e00a      	b.n	8004b08 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004af2:	f7fd fc77 	bl	80023e4 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d901      	bls.n	8004b08 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e0c2      	b.n	8004c8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b08:	4b41      	ldr	r3, [pc, #260]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1ee      	bne.n	8004af2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b14:	7dfb      	ldrb	r3, [r7, #23]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d105      	bne.n	8004b26 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b1a:	4b3d      	ldr	r3, [pc, #244]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	4a3c      	ldr	r2, [pc, #240]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 80ae 	beq.w	8004c8c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b30:	4b37      	ldr	r3, [pc, #220]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 030c 	and.w	r3, r3, #12
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d06d      	beq.n	8004c18 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d14b      	bne.n	8004bdc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b44:	4b32      	ldr	r3, [pc, #200]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a31      	ldr	r2, [pc, #196]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b50:	f7fd fc48 	bl	80023e4 <HAL_GetTick>
 8004b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b56:	e008      	b.n	8004b6a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b58:	f7fd fc44 	bl	80023e4 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e091      	b.n	8004c8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6a:	4b29      	ldr	r3, [pc, #164]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1f0      	bne.n	8004b58 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	69da      	ldr	r2, [r3, #28]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	019b      	lsls	r3, r3, #6
 8004b86:	431a      	orrs	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8c:	085b      	lsrs	r3, r3, #1
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	041b      	lsls	r3, r3, #16
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b98:	061b      	lsls	r3, r3, #24
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba0:	071b      	lsls	r3, r3, #28
 8004ba2:	491b      	ldr	r1, [pc, #108]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ba8:	4b19      	ldr	r3, [pc, #100]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a18      	ldr	r2, [pc, #96]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb4:	f7fd fc16 	bl	80023e4 <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bbc:	f7fd fc12 	bl	80023e4 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e05f      	b.n	8004c8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bce:	4b10      	ldr	r3, [pc, #64]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0f0      	beq.n	8004bbc <HAL_RCC_OscConfig+0x47c>
 8004bda:	e057      	b.n	8004c8c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bdc:	4b0c      	ldr	r3, [pc, #48]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a0b      	ldr	r2, [pc, #44]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004be2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be8:	f7fd fbfc 	bl	80023e4 <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf0:	f7fd fbf8 	bl	80023e4 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e045      	b.n	8004c8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c02:	4b03      	ldr	r3, [pc, #12]	; (8004c10 <HAL_RCC_OscConfig+0x4d0>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1f0      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x4b0>
 8004c0e:	e03d      	b.n	8004c8c <HAL_RCC_OscConfig+0x54c>
 8004c10:	40023800 	.word	0x40023800
 8004c14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004c18:	4b1f      	ldr	r3, [pc, #124]	; (8004c98 <HAL_RCC_OscConfig+0x558>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d030      	beq.n	8004c88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d129      	bne.n	8004c88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d122      	bne.n	8004c88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c48:	4013      	ands	r3, r2
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c4e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d119      	bne.n	8004c88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5e:	085b      	lsrs	r3, r3, #1
 8004c60:	3b01      	subs	r3, #1
 8004c62:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d10f      	bne.n	8004c88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d107      	bne.n	8004c88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c82:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d001      	beq.n	8004c8c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e000      	b.n	8004c8e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	40023800 	.word	0x40023800

08004c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e0d0      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cb4:	4b6a      	ldr	r3, [pc, #424]	; (8004e60 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 030f 	and.w	r3, r3, #15
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d910      	bls.n	8004ce4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc2:	4b67      	ldr	r3, [pc, #412]	; (8004e60 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f023 020f 	bic.w	r2, r3, #15
 8004cca:	4965      	ldr	r1, [pc, #404]	; (8004e60 <HAL_RCC_ClockConfig+0x1c4>)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd2:	4b63      	ldr	r3, [pc, #396]	; (8004e60 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d001      	beq.n	8004ce4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e0b8      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d020      	beq.n	8004d32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d005      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cfc:	4b59      	ldr	r3, [pc, #356]	; (8004e64 <HAL_RCC_ClockConfig+0x1c8>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	4a58      	ldr	r2, [pc, #352]	; (8004e64 <HAL_RCC_ClockConfig+0x1c8>)
 8004d02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0308 	and.w	r3, r3, #8
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d14:	4b53      	ldr	r3, [pc, #332]	; (8004e64 <HAL_RCC_ClockConfig+0x1c8>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	4a52      	ldr	r2, [pc, #328]	; (8004e64 <HAL_RCC_ClockConfig+0x1c8>)
 8004d1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d20:	4b50      	ldr	r3, [pc, #320]	; (8004e64 <HAL_RCC_ClockConfig+0x1c8>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	494d      	ldr	r1, [pc, #308]	; (8004e64 <HAL_RCC_ClockConfig+0x1c8>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d040      	beq.n	8004dc0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d107      	bne.n	8004d56 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d46:	4b47      	ldr	r3, [pc, #284]	; (8004e64 <HAL_RCC_ClockConfig+0x1c8>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d115      	bne.n	8004d7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e07f      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d107      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d5e:	4b41      	ldr	r3, [pc, #260]	; (8004e64 <HAL_RCC_ClockConfig+0x1c8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d109      	bne.n	8004d7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e073      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d6e:	4b3d      	ldr	r3, [pc, #244]	; (8004e64 <HAL_RCC_ClockConfig+0x1c8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e06b      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d7e:	4b39      	ldr	r3, [pc, #228]	; (8004e64 <HAL_RCC_ClockConfig+0x1c8>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f023 0203 	bic.w	r2, r3, #3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	4936      	ldr	r1, [pc, #216]	; (8004e64 <HAL_RCC_ClockConfig+0x1c8>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d90:	f7fd fb28 	bl	80023e4 <HAL_GetTick>
 8004d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d96:	e00a      	b.n	8004dae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d98:	f7fd fb24 	bl	80023e4 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e053      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dae:	4b2d      	ldr	r3, [pc, #180]	; (8004e64 <HAL_RCC_ClockConfig+0x1c8>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 020c 	and.w	r2, r3, #12
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d1eb      	bne.n	8004d98 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dc0:	4b27      	ldr	r3, [pc, #156]	; (8004e60 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 030f 	and.w	r3, r3, #15
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d210      	bcs.n	8004df0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dce:	4b24      	ldr	r3, [pc, #144]	; (8004e60 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f023 020f 	bic.w	r2, r3, #15
 8004dd6:	4922      	ldr	r1, [pc, #136]	; (8004e60 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dde:	4b20      	ldr	r3, [pc, #128]	; (8004e60 <HAL_RCC_ClockConfig+0x1c4>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d001      	beq.n	8004df0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e032      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d008      	beq.n	8004e0e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dfc:	4b19      	ldr	r3, [pc, #100]	; (8004e64 <HAL_RCC_ClockConfig+0x1c8>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	4916      	ldr	r1, [pc, #88]	; (8004e64 <HAL_RCC_ClockConfig+0x1c8>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d009      	beq.n	8004e2e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e1a:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <HAL_RCC_ClockConfig+0x1c8>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	490e      	ldr	r1, [pc, #56]	; (8004e64 <HAL_RCC_ClockConfig+0x1c8>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e2e:	f000 f821 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8004e32:	4602      	mov	r2, r0
 8004e34:	4b0b      	ldr	r3, [pc, #44]	; (8004e64 <HAL_RCC_ClockConfig+0x1c8>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	091b      	lsrs	r3, r3, #4
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	490a      	ldr	r1, [pc, #40]	; (8004e68 <HAL_RCC_ClockConfig+0x1cc>)
 8004e40:	5ccb      	ldrb	r3, [r1, r3]
 8004e42:	fa22 f303 	lsr.w	r3, r2, r3
 8004e46:	4a09      	ldr	r2, [pc, #36]	; (8004e6c <HAL_RCC_ClockConfig+0x1d0>)
 8004e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e4a:	4b09      	ldr	r3, [pc, #36]	; (8004e70 <HAL_RCC_ClockConfig+0x1d4>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fd fa84 	bl	800235c <HAL_InitTick>

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	40023c00 	.word	0x40023c00
 8004e64:	40023800 	.word	0x40023800
 8004e68:	0800824c 	.word	0x0800824c
 8004e6c:	20000000 	.word	0x20000000
 8004e70:	20000004 	.word	0x20000004

08004e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e78:	b094      	sub	sp, #80	; 0x50
 8004e7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	647b      	str	r3, [r7, #68]	; 0x44
 8004e80:	2300      	movs	r3, #0
 8004e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e84:	2300      	movs	r3, #0
 8004e86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e8c:	4b79      	ldr	r3, [pc, #484]	; (8005074 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 030c 	and.w	r3, r3, #12
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d00d      	beq.n	8004eb4 <HAL_RCC_GetSysClockFreq+0x40>
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	f200 80e1 	bhi.w	8005060 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d002      	beq.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d003      	beq.n	8004eae <HAL_RCC_GetSysClockFreq+0x3a>
 8004ea6:	e0db      	b.n	8005060 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ea8:	4b73      	ldr	r3, [pc, #460]	; (8005078 <HAL_RCC_GetSysClockFreq+0x204>)
 8004eaa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004eac:	e0db      	b.n	8005066 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eae:	4b73      	ldr	r3, [pc, #460]	; (800507c <HAL_RCC_GetSysClockFreq+0x208>)
 8004eb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004eb2:	e0d8      	b.n	8005066 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004eb4:	4b6f      	ldr	r3, [pc, #444]	; (8005074 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ebc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004ebe:	4b6d      	ldr	r3, [pc, #436]	; (8005074 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d063      	beq.n	8004f92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eca:	4b6a      	ldr	r3, [pc, #424]	; (8005074 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	099b      	lsrs	r3, r3, #6
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ed4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004edc:	633b      	str	r3, [r7, #48]	; 0x30
 8004ede:	2300      	movs	r3, #0
 8004ee0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ee2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ee6:	4622      	mov	r2, r4
 8004ee8:	462b      	mov	r3, r5
 8004eea:	f04f 0000 	mov.w	r0, #0
 8004eee:	f04f 0100 	mov.w	r1, #0
 8004ef2:	0159      	lsls	r1, r3, #5
 8004ef4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ef8:	0150      	lsls	r0, r2, #5
 8004efa:	4602      	mov	r2, r0
 8004efc:	460b      	mov	r3, r1
 8004efe:	4621      	mov	r1, r4
 8004f00:	1a51      	subs	r1, r2, r1
 8004f02:	6139      	str	r1, [r7, #16]
 8004f04:	4629      	mov	r1, r5
 8004f06:	eb63 0301 	sbc.w	r3, r3, r1
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f18:	4659      	mov	r1, fp
 8004f1a:	018b      	lsls	r3, r1, #6
 8004f1c:	4651      	mov	r1, sl
 8004f1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f22:	4651      	mov	r1, sl
 8004f24:	018a      	lsls	r2, r1, #6
 8004f26:	4651      	mov	r1, sl
 8004f28:	ebb2 0801 	subs.w	r8, r2, r1
 8004f2c:	4659      	mov	r1, fp
 8004f2e:	eb63 0901 	sbc.w	r9, r3, r1
 8004f32:	f04f 0200 	mov.w	r2, #0
 8004f36:	f04f 0300 	mov.w	r3, #0
 8004f3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f46:	4690      	mov	r8, r2
 8004f48:	4699      	mov	r9, r3
 8004f4a:	4623      	mov	r3, r4
 8004f4c:	eb18 0303 	adds.w	r3, r8, r3
 8004f50:	60bb      	str	r3, [r7, #8]
 8004f52:	462b      	mov	r3, r5
 8004f54:	eb49 0303 	adc.w	r3, r9, r3
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	f04f 0200 	mov.w	r2, #0
 8004f5e:	f04f 0300 	mov.w	r3, #0
 8004f62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f66:	4629      	mov	r1, r5
 8004f68:	024b      	lsls	r3, r1, #9
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f70:	4621      	mov	r1, r4
 8004f72:	024a      	lsls	r2, r1, #9
 8004f74:	4610      	mov	r0, r2
 8004f76:	4619      	mov	r1, r3
 8004f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f84:	f7fb f9ac 	bl	80002e0 <__aeabi_uldivmod>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f90:	e058      	b.n	8005044 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f92:	4b38      	ldr	r3, [pc, #224]	; (8005074 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	099b      	lsrs	r3, r3, #6
 8004f98:	2200      	movs	r2, #0
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004fa2:	623b      	str	r3, [r7, #32]
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004fac:	4642      	mov	r2, r8
 8004fae:	464b      	mov	r3, r9
 8004fb0:	f04f 0000 	mov.w	r0, #0
 8004fb4:	f04f 0100 	mov.w	r1, #0
 8004fb8:	0159      	lsls	r1, r3, #5
 8004fba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fbe:	0150      	lsls	r0, r2, #5
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4641      	mov	r1, r8
 8004fc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fca:	4649      	mov	r1, r9
 8004fcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fe0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fe4:	ebb2 040a 	subs.w	r4, r2, sl
 8004fe8:	eb63 050b 	sbc.w	r5, r3, fp
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	00eb      	lsls	r3, r5, #3
 8004ff6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ffa:	00e2      	lsls	r2, r4, #3
 8004ffc:	4614      	mov	r4, r2
 8004ffe:	461d      	mov	r5, r3
 8005000:	4643      	mov	r3, r8
 8005002:	18e3      	adds	r3, r4, r3
 8005004:	603b      	str	r3, [r7, #0]
 8005006:	464b      	mov	r3, r9
 8005008:	eb45 0303 	adc.w	r3, r5, r3
 800500c:	607b      	str	r3, [r7, #4]
 800500e:	f04f 0200 	mov.w	r2, #0
 8005012:	f04f 0300 	mov.w	r3, #0
 8005016:	e9d7 4500 	ldrd	r4, r5, [r7]
 800501a:	4629      	mov	r1, r5
 800501c:	028b      	lsls	r3, r1, #10
 800501e:	4621      	mov	r1, r4
 8005020:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005024:	4621      	mov	r1, r4
 8005026:	028a      	lsls	r2, r1, #10
 8005028:	4610      	mov	r0, r2
 800502a:	4619      	mov	r1, r3
 800502c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800502e:	2200      	movs	r2, #0
 8005030:	61bb      	str	r3, [r7, #24]
 8005032:	61fa      	str	r2, [r7, #28]
 8005034:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005038:	f7fb f952 	bl	80002e0 <__aeabi_uldivmod>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	4613      	mov	r3, r2
 8005042:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005044:	4b0b      	ldr	r3, [pc, #44]	; (8005074 <HAL_RCC_GetSysClockFreq+0x200>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	0c1b      	lsrs	r3, r3, #16
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	3301      	adds	r3, #1
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005054:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005058:	fbb2 f3f3 	udiv	r3, r2, r3
 800505c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800505e:	e002      	b.n	8005066 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005060:	4b05      	ldr	r3, [pc, #20]	; (8005078 <HAL_RCC_GetSysClockFreq+0x204>)
 8005062:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005068:	4618      	mov	r0, r3
 800506a:	3750      	adds	r7, #80	; 0x50
 800506c:	46bd      	mov	sp, r7
 800506e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005072:	bf00      	nop
 8005074:	40023800 	.word	0x40023800
 8005078:	00f42400 	.word	0x00f42400
 800507c:	007a1200 	.word	0x007a1200

08005080 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005084:	4b03      	ldr	r3, [pc, #12]	; (8005094 <HAL_RCC_GetHCLKFreq+0x14>)
 8005086:	681b      	ldr	r3, [r3, #0]
}
 8005088:	4618      	mov	r0, r3
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	20000000 	.word	0x20000000

08005098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800509c:	f7ff fff0 	bl	8005080 <HAL_RCC_GetHCLKFreq>
 80050a0:	4602      	mov	r2, r0
 80050a2:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	0a9b      	lsrs	r3, r3, #10
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	4903      	ldr	r1, [pc, #12]	; (80050bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80050ae:	5ccb      	ldrb	r3, [r1, r3]
 80050b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	40023800 	.word	0x40023800
 80050bc:	0800825c 	.word	0x0800825c

080050c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050c4:	f7ff ffdc 	bl	8005080 <HAL_RCC_GetHCLKFreq>
 80050c8:	4602      	mov	r2, r0
 80050ca:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	0b5b      	lsrs	r3, r3, #13
 80050d0:	f003 0307 	and.w	r3, r3, #7
 80050d4:	4903      	ldr	r1, [pc, #12]	; (80050e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050d6:	5ccb      	ldrb	r3, [r1, r3]
 80050d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050dc:	4618      	mov	r0, r3
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	40023800 	.word	0x40023800
 80050e4:	0800825c 	.word	0x0800825c

080050e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b088      	sub	sp, #32
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80050f0:	2300      	movs	r3, #0
 80050f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80050f4:	2300      	movs	r3, #0
 80050f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80050fc:	2300      	movs	r3, #0
 80050fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005100:	2300      	movs	r3, #0
 8005102:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	2b00      	cmp	r3, #0
 800510e:	d012      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005110:	4b69      	ldr	r3, [pc, #420]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	4a68      	ldr	r2, [pc, #416]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005116:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800511a:	6093      	str	r3, [r2, #8]
 800511c:	4b66      	ldr	r3, [pc, #408]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005124:	4964      	ldr	r1, [pc, #400]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005126:	4313      	orrs	r3, r2
 8005128:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005132:	2301      	movs	r3, #1
 8005134:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d017      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005142:	4b5d      	ldr	r3, [pc, #372]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005148:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005150:	4959      	ldr	r1, [pc, #356]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005160:	d101      	bne.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005162:	2301      	movs	r3, #1
 8005164:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800516e:	2301      	movs	r3, #1
 8005170:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d017      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800517e:	4b4e      	ldr	r3, [pc, #312]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005184:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518c:	494a      	ldr	r1, [pc, #296]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800518e:	4313      	orrs	r3, r2
 8005190:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800519c:	d101      	bne.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800519e:	2301      	movs	r3, #1
 80051a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80051aa:	2301      	movs	r3, #1
 80051ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80051ba:	2301      	movs	r3, #1
 80051bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0320 	and.w	r3, r3, #32
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f000 808b 	beq.w	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051cc:	4b3a      	ldr	r3, [pc, #232]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d0:	4a39      	ldr	r2, [pc, #228]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d6:	6413      	str	r3, [r2, #64]	; 0x40
 80051d8:	4b37      	ldr	r3, [pc, #220]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e0:	60bb      	str	r3, [r7, #8]
 80051e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051e4:	4b35      	ldr	r3, [pc, #212]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a34      	ldr	r2, [pc, #208]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f0:	f7fd f8f8 	bl	80023e4 <HAL_GetTick>
 80051f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051f6:	e008      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051f8:	f7fd f8f4 	bl	80023e4 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b64      	cmp	r3, #100	; 0x64
 8005204:	d901      	bls.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e38f      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800520a:	4b2c      	ldr	r3, [pc, #176]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0f0      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005216:	4b28      	ldr	r3, [pc, #160]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800521e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d035      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	429a      	cmp	r2, r3
 8005232:	d02e      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005234:	4b20      	ldr	r3, [pc, #128]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800523c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800523e:	4b1e      	ldr	r3, [pc, #120]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005242:	4a1d      	ldr	r2, [pc, #116]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005248:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800524a:	4b1b      	ldr	r3, [pc, #108]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800524c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524e:	4a1a      	ldr	r2, [pc, #104]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005254:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005256:	4a18      	ldr	r2, [pc, #96]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800525c:	4b16      	ldr	r3, [pc, #88]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800525e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b01      	cmp	r3, #1
 8005266:	d114      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005268:	f7fd f8bc 	bl	80023e4 <HAL_GetTick>
 800526c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800526e:	e00a      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005270:	f7fd f8b8 	bl	80023e4 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	f241 3288 	movw	r2, #5000	; 0x1388
 800527e:	4293      	cmp	r3, r2
 8005280:	d901      	bls.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e351      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005286:	4b0c      	ldr	r3, [pc, #48]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d0ee      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800529a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800529e:	d111      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80052a0:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052ac:	4b04      	ldr	r3, [pc, #16]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80052ae:	400b      	ands	r3, r1
 80052b0:	4901      	ldr	r1, [pc, #4]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	608b      	str	r3, [r1, #8]
 80052b6:	e00b      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80052b8:	40023800 	.word	0x40023800
 80052bc:	40007000 	.word	0x40007000
 80052c0:	0ffffcff 	.word	0x0ffffcff
 80052c4:	4bac      	ldr	r3, [pc, #688]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	4aab      	ldr	r2, [pc, #684]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80052ce:	6093      	str	r3, [r2, #8]
 80052d0:	4ba9      	ldr	r3, [pc, #676]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052dc:	49a6      	ldr	r1, [pc, #664]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0310 	and.w	r3, r3, #16
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d010      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052ee:	4ba2      	ldr	r3, [pc, #648]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052f4:	4aa0      	ldr	r2, [pc, #640]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80052fe:	4b9e      	ldr	r3, [pc, #632]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005300:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005308:	499b      	ldr	r1, [pc, #620]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800530a:	4313      	orrs	r3, r2
 800530c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800531c:	4b96      	ldr	r3, [pc, #600]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800531e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005322:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800532a:	4993      	ldr	r1, [pc, #588]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800532c:	4313      	orrs	r3, r2
 800532e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800533e:	4b8e      	ldr	r3, [pc, #568]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005344:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800534c:	498a      	ldr	r1, [pc, #552]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800534e:	4313      	orrs	r3, r2
 8005350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00a      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005360:	4b85      	ldr	r3, [pc, #532]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005366:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800536e:	4982      	ldr	r1, [pc, #520]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005370:	4313      	orrs	r3, r2
 8005372:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005382:	4b7d      	ldr	r3, [pc, #500]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005388:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005390:	4979      	ldr	r1, [pc, #484]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00a      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053a4:	4b74      	ldr	r3, [pc, #464]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053aa:	f023 0203 	bic.w	r2, r3, #3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b2:	4971      	ldr	r1, [pc, #452]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053c6:	4b6c      	ldr	r3, [pc, #432]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053cc:	f023 020c 	bic.w	r2, r3, #12
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053d4:	4968      	ldr	r1, [pc, #416]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00a      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053e8:	4b63      	ldr	r3, [pc, #396]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f6:	4960      	ldr	r1, [pc, #384]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800540a:	4b5b      	ldr	r3, [pc, #364]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800540c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005410:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005418:	4957      	ldr	r1, [pc, #348]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800541a:	4313      	orrs	r3, r2
 800541c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00a      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800542c:	4b52      	ldr	r3, [pc, #328]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800542e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005432:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543a:	494f      	ldr	r1, [pc, #316]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800543c:	4313      	orrs	r3, r2
 800543e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00a      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800544e:	4b4a      	ldr	r3, [pc, #296]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005454:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800545c:	4946      	ldr	r1, [pc, #280]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800545e:	4313      	orrs	r3, r2
 8005460:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00a      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005470:	4b41      	ldr	r3, [pc, #260]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005476:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800547e:	493e      	ldr	r1, [pc, #248]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005480:	4313      	orrs	r3, r2
 8005482:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00a      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005492:	4b39      	ldr	r3, [pc, #228]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005498:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a0:	4935      	ldr	r1, [pc, #212]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00a      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80054b4:	4b30      	ldr	r3, [pc, #192]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054c2:	492d      	ldr	r1, [pc, #180]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d011      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80054d6:	4b28      	ldr	r3, [pc, #160]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054e4:	4924      	ldr	r1, [pc, #144]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054f4:	d101      	bne.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80054f6:	2301      	movs	r3, #1
 80054f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0308 	and.w	r3, r3, #8
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005506:	2301      	movs	r3, #1
 8005508:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00a      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005516:	4b18      	ldr	r3, [pc, #96]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005524:	4914      	ldr	r1, [pc, #80]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005526:	4313      	orrs	r3, r2
 8005528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00b      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005538:	4b0f      	ldr	r3, [pc, #60]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800553a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800553e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005548:	490b      	ldr	r1, [pc, #44]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800554a:	4313      	orrs	r3, r2
 800554c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00f      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800555c:	4b06      	ldr	r3, [pc, #24]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800555e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005562:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800556c:	4902      	ldr	r1, [pc, #8]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800556e:	4313      	orrs	r3, r2
 8005570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005574:	e002      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005576:	bf00      	nop
 8005578:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00b      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005588:	4b8a      	ldr	r3, [pc, #552]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800558a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800558e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005598:	4986      	ldr	r1, [pc, #536]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800559a:	4313      	orrs	r3, r2
 800559c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00b      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80055ac:	4b81      	ldr	r3, [pc, #516]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055bc:	497d      	ldr	r1, [pc, #500]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d006      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f000 80d6 	beq.w	8005784 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055d8:	4b76      	ldr	r3, [pc, #472]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a75      	ldr	r2, [pc, #468]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055e4:	f7fc fefe 	bl	80023e4 <HAL_GetTick>
 80055e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055ea:	e008      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055ec:	f7fc fefa 	bl	80023e4 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b64      	cmp	r3, #100	; 0x64
 80055f8:	d901      	bls.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e195      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055fe:	4b6d      	ldr	r3, [pc, #436]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1f0      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d021      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561a:	2b00      	cmp	r3, #0
 800561c:	d11d      	bne.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800561e:	4b65      	ldr	r3, [pc, #404]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005624:	0c1b      	lsrs	r3, r3, #16
 8005626:	f003 0303 	and.w	r3, r3, #3
 800562a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800562c:	4b61      	ldr	r3, [pc, #388]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800562e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005632:	0e1b      	lsrs	r3, r3, #24
 8005634:	f003 030f 	and.w	r3, r3, #15
 8005638:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	019a      	lsls	r2, r3, #6
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	041b      	lsls	r3, r3, #16
 8005644:	431a      	orrs	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	061b      	lsls	r3, r3, #24
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	071b      	lsls	r3, r3, #28
 8005652:	4958      	ldr	r1, [pc, #352]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005654:	4313      	orrs	r3, r2
 8005656:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d004      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800566a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800566e:	d00a      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005678:	2b00      	cmp	r3, #0
 800567a:	d02e      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005680:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005684:	d129      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005686:	4b4b      	ldr	r3, [pc, #300]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800568c:	0c1b      	lsrs	r3, r3, #16
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005694:	4b47      	ldr	r3, [pc, #284]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800569a:	0f1b      	lsrs	r3, r3, #28
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	019a      	lsls	r2, r3, #6
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	041b      	lsls	r3, r3, #16
 80056ac:	431a      	orrs	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	061b      	lsls	r3, r3, #24
 80056b4:	431a      	orrs	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	071b      	lsls	r3, r3, #28
 80056ba:	493e      	ldr	r1, [pc, #248]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80056c2:	4b3c      	ldr	r3, [pc, #240]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056c8:	f023 021f 	bic.w	r2, r3, #31
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	3b01      	subs	r3, #1
 80056d2:	4938      	ldr	r1, [pc, #224]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d01d      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056e6:	4b33      	ldr	r3, [pc, #204]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ec:	0e1b      	lsrs	r3, r3, #24
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056f4:	4b2f      	ldr	r3, [pc, #188]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056fa:	0f1b      	lsrs	r3, r3, #28
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	019a      	lsls	r2, r3, #6
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	041b      	lsls	r3, r3, #16
 800570e:	431a      	orrs	r2, r3
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	061b      	lsls	r3, r3, #24
 8005714:	431a      	orrs	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	071b      	lsls	r3, r3, #28
 800571a:	4926      	ldr	r1, [pc, #152]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800571c:	4313      	orrs	r3, r2
 800571e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d011      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	019a      	lsls	r2, r3, #6
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	041b      	lsls	r3, r3, #16
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	061b      	lsls	r3, r3, #24
 8005742:	431a      	orrs	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	071b      	lsls	r3, r3, #28
 800574a:	491a      	ldr	r1, [pc, #104]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800574c:	4313      	orrs	r3, r2
 800574e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005752:	4b18      	ldr	r3, [pc, #96]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a17      	ldr	r2, [pc, #92]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005758:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800575c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800575e:	f7fc fe41 	bl	80023e4 <HAL_GetTick>
 8005762:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005764:	e008      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005766:	f7fc fe3d 	bl	80023e4 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b64      	cmp	r3, #100	; 0x64
 8005772:	d901      	bls.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e0d8      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005778:	4b0e      	ldr	r3, [pc, #56]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d0f0      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	2b01      	cmp	r3, #1
 8005788:	f040 80ce 	bne.w	8005928 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800578c:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a08      	ldr	r2, [pc, #32]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005796:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005798:	f7fc fe24 	bl	80023e4 <HAL_GetTick>
 800579c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800579e:	e00b      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80057a0:	f7fc fe20 	bl	80023e4 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b64      	cmp	r3, #100	; 0x64
 80057ac:	d904      	bls.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e0bb      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80057b2:	bf00      	nop
 80057b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057b8:	4b5e      	ldr	r3, [pc, #376]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057c4:	d0ec      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d009      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d02e      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d12a      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80057ee:	4b51      	ldr	r3, [pc, #324]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f4:	0c1b      	lsrs	r3, r3, #16
 80057f6:	f003 0303 	and.w	r3, r3, #3
 80057fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057fc:	4b4d      	ldr	r3, [pc, #308]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005802:	0f1b      	lsrs	r3, r3, #28
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	019a      	lsls	r2, r3, #6
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	041b      	lsls	r3, r3, #16
 8005814:	431a      	orrs	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	061b      	lsls	r3, r3, #24
 800581c:	431a      	orrs	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	071b      	lsls	r3, r3, #28
 8005822:	4944      	ldr	r1, [pc, #272]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005824:	4313      	orrs	r3, r2
 8005826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800582a:	4b42      	ldr	r3, [pc, #264]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800582c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005830:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005838:	3b01      	subs	r3, #1
 800583a:	021b      	lsls	r3, r3, #8
 800583c:	493d      	ldr	r1, [pc, #244]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800583e:	4313      	orrs	r3, r2
 8005840:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d022      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005854:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005858:	d11d      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800585a:	4b36      	ldr	r3, [pc, #216]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800585c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005860:	0e1b      	lsrs	r3, r3, #24
 8005862:	f003 030f 	and.w	r3, r3, #15
 8005866:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005868:	4b32      	ldr	r3, [pc, #200]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800586a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586e:	0f1b      	lsrs	r3, r3, #28
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	019a      	lsls	r2, r3, #6
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	041b      	lsls	r3, r3, #16
 8005882:	431a      	orrs	r2, r3
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	061b      	lsls	r3, r3, #24
 8005888:	431a      	orrs	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	071b      	lsls	r3, r3, #28
 800588e:	4929      	ldr	r1, [pc, #164]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005890:	4313      	orrs	r3, r2
 8005892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d028      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80058a2:	4b24      	ldr	r3, [pc, #144]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a8:	0e1b      	lsrs	r3, r3, #24
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80058b0:	4b20      	ldr	r3, [pc, #128]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b6:	0c1b      	lsrs	r3, r3, #16
 80058b8:	f003 0303 	and.w	r3, r3, #3
 80058bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	019a      	lsls	r2, r3, #6
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	041b      	lsls	r3, r3, #16
 80058c8:	431a      	orrs	r2, r3
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	061b      	lsls	r3, r3, #24
 80058ce:	431a      	orrs	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	071b      	lsls	r3, r3, #28
 80058d6:	4917      	ldr	r1, [pc, #92]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80058de:	4b15      	ldr	r3, [pc, #84]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ec:	4911      	ldr	r1, [pc, #68]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058f4:	4b0f      	ldr	r3, [pc, #60]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a0e      	ldr	r2, [pc, #56]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005900:	f7fc fd70 	bl	80023e4 <HAL_GetTick>
 8005904:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005906:	e008      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005908:	f7fc fd6c 	bl	80023e4 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b64      	cmp	r3, #100	; 0x64
 8005914:	d901      	bls.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e007      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800591a:	4b06      	ldr	r3, [pc, #24]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005922:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005926:	d1ef      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3720      	adds	r7, #32
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	40023800 	.word	0x40023800

08005938 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e040      	b.n	80059cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800594e:	2b00      	cmp	r3, #0
 8005950:	d106      	bne.n	8005960 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7fc faa2 	bl	8001ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2224      	movs	r2, #36	; 0x24
 8005964:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 0201 	bic.w	r2, r2, #1
 8005974:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fbc2 	bl	8006100 <UART_SetConfig>
 800597c:	4603      	mov	r3, r0
 800597e:	2b01      	cmp	r3, #1
 8005980:	d101      	bne.n	8005986 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e022      	b.n	80059cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fe1a 	bl	80065c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689a      	ldr	r2, [r3, #8]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 fea1 	bl	800670c <UART_CheckIdleState>
 80059ca:	4603      	mov	r3, r0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08a      	sub	sp, #40	; 0x28
 80059d8:	af02      	add	r7, sp, #8
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	603b      	str	r3, [r7, #0]
 80059e0:	4613      	mov	r3, r2
 80059e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059e8:	2b20      	cmp	r3, #32
 80059ea:	d171      	bne.n	8005ad0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d002      	beq.n	80059f8 <HAL_UART_Transmit+0x24>
 80059f2:	88fb      	ldrh	r3, [r7, #6]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e06a      	b.n	8005ad2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2221      	movs	r2, #33	; 0x21
 8005a08:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a0a:	f7fc fceb 	bl	80023e4 <HAL_GetTick>
 8005a0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	88fa      	ldrh	r2, [r7, #6]
 8005a14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	88fa      	ldrh	r2, [r7, #6]
 8005a1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a28:	d108      	bne.n	8005a3c <HAL_UART_Transmit+0x68>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d104      	bne.n	8005a3c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005a32:	2300      	movs	r3, #0
 8005a34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	61bb      	str	r3, [r7, #24]
 8005a3a:	e003      	b.n	8005a44 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a40:	2300      	movs	r3, #0
 8005a42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a44:	e02c      	b.n	8005aa0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2180      	movs	r1, #128	; 0x80
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 fea8 	bl	80067a6 <UART_WaitOnFlagUntilTimeout>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e038      	b.n	8005ad2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10b      	bne.n	8005a7e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a74:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	3302      	adds	r3, #2
 8005a7a:	61bb      	str	r3, [r7, #24]
 8005a7c:	e007      	b.n	8005a8e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	781a      	ldrb	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	3b01      	subs	r3, #1
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1cc      	bne.n	8005a46 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	2140      	movs	r1, #64	; 0x40
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 fe75 	bl	80067a6 <UART_WaitOnFlagUntilTimeout>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e005      	b.n	8005ad2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005acc:	2300      	movs	r3, #0
 8005ace:	e000      	b.n	8005ad2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005ad0:	2302      	movs	r3, #2
  }
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3720      	adds	r7, #32
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
	...

08005adc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b0ba      	sub	sp, #232	; 0xe8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005b06:	f640 030f 	movw	r3, #2063	; 0x80f
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005b10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d115      	bne.n	8005b44 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b1c:	f003 0320 	and.w	r3, r3, #32
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00f      	beq.n	8005b44 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b28:	f003 0320 	and.w	r3, r3, #32
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d009      	beq.n	8005b44 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 82ac 	beq.w	8006092 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	4798      	blx	r3
      }
      return;
 8005b42:	e2a6      	b.n	8006092 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 8117 	beq.w	8005d7c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d106      	bne.n	8005b68 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005b5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005b5e:	4b85      	ldr	r3, [pc, #532]	; (8005d74 <HAL_UART_IRQHandler+0x298>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 810a 	beq.w	8005d7c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d011      	beq.n	8005b98 <HAL_UART_IRQHandler+0xbc>
 8005b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00b      	beq.n	8005b98 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2201      	movs	r2, #1
 8005b86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b8e:	f043 0201 	orr.w	r2, r3, #1
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d011      	beq.n	8005bc8 <HAL_UART_IRQHandler+0xec>
 8005ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00b      	beq.n	8005bc8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bbe:	f043 0204 	orr.w	r2, r3, #4
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bcc:	f003 0304 	and.w	r3, r3, #4
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d011      	beq.n	8005bf8 <HAL_UART_IRQHandler+0x11c>
 8005bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00b      	beq.n	8005bf8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2204      	movs	r2, #4
 8005be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bee:	f043 0202 	orr.w	r2, r3, #2
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bfc:	f003 0308 	and.w	r3, r3, #8
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d017      	beq.n	8005c34 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c08:	f003 0320 	and.w	r3, r3, #32
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d105      	bne.n	8005c1c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005c10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c14:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00b      	beq.n	8005c34 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2208      	movs	r2, #8
 8005c22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c2a:	f043 0208 	orr.w	r2, r3, #8
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d012      	beq.n	8005c66 <HAL_UART_IRQHandler+0x18a>
 8005c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00c      	beq.n	8005c66 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c5c:	f043 0220 	orr.w	r2, r3, #32
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f000 8212 	beq.w	8006096 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c76:	f003 0320 	and.w	r3, r3, #32
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00d      	beq.n	8005c9a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c82:	f003 0320 	and.w	r3, r3, #32
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d007      	beq.n	8005c9a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ca0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cae:	2b40      	cmp	r3, #64	; 0x40
 8005cb0:	d005      	beq.n	8005cbe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005cb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d04f      	beq.n	8005d5e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fe37 	bl	8006932 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cce:	2b40      	cmp	r3, #64	; 0x40
 8005cd0:	d141      	bne.n	8005d56 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3308      	adds	r3, #8
 8005cd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ce0:	e853 3f00 	ldrex	r3, [r3]
 8005ce4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ce8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3308      	adds	r3, #8
 8005cfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005cfe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1d9      	bne.n	8005cd2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d013      	beq.n	8005d4e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d2a:	4a13      	ldr	r2, [pc, #76]	; (8005d78 <HAL_UART_IRQHandler+0x29c>)
 8005d2c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fd fc12 	bl	800355c <HAL_DMA_Abort_IT>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d017      	beq.n	8005d6e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005d48:	4610      	mov	r0, r2
 8005d4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d4c:	e00f      	b.n	8005d6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f9b6 	bl	80060c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d54:	e00b      	b.n	8005d6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f9b2 	bl	80060c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d5c:	e007      	b.n	8005d6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f9ae 	bl	80060c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005d6c:	e193      	b.n	8006096 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d6e:	bf00      	nop
    return;
 8005d70:	e191      	b.n	8006096 <HAL_UART_IRQHandler+0x5ba>
 8005d72:	bf00      	nop
 8005d74:	04000120 	.word	0x04000120
 8005d78:	080069fb 	.word	0x080069fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	f040 814c 	bne.w	800601e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d8a:	f003 0310 	and.w	r3, r3, #16
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 8145 	beq.w	800601e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d98:	f003 0310 	and.w	r3, r3, #16
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 813e 	beq.w	800601e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2210      	movs	r2, #16
 8005da8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db4:	2b40      	cmp	r3, #64	; 0x40
 8005db6:	f040 80b6 	bne.w	8005f26 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005dc6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 8165 	beq.w	800609a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005dd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	f080 815d 	bcs.w	800609a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005de6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df4:	f000 8086 	beq.w	8005f04 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e04:	e853 3f00 	ldrex	r3, [r3]
 8005e08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e26:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e32:	e841 2300 	strex	r3, r2, [r1]
 8005e36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1da      	bne.n	8005df8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3308      	adds	r3, #8
 8005e48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e4c:	e853 3f00 	ldrex	r3, [r3]
 8005e50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e54:	f023 0301 	bic.w	r3, r3, #1
 8005e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	3308      	adds	r3, #8
 8005e62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e72:	e841 2300 	strex	r3, r2, [r1]
 8005e76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1e1      	bne.n	8005e42 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3308      	adds	r3, #8
 8005e84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e88:	e853 3f00 	ldrex	r3, [r3]
 8005e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3308      	adds	r3, #8
 8005e9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ea2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ea4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ea8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005eaa:	e841 2300 	strex	r3, r2, [r1]
 8005eae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005eb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1e3      	bne.n	8005e7e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ecc:	e853 3f00 	ldrex	r3, [r3]
 8005ed0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ed4:	f023 0310 	bic.w	r3, r3, #16
 8005ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ee6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ee8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005eec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eee:	e841 2300 	strex	r3, r2, [r1]
 8005ef2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1e4      	bne.n	8005ec4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fd fabc 	bl	800347c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f8d8 	bl	80060d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f24:	e0b9      	b.n	800609a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f000 80ab 	beq.w	800609e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005f48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f000 80a6 	beq.w	800609e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5a:	e853 3f00 	ldrex	r3, [r3]
 8005f5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f74:	647b      	str	r3, [r7, #68]	; 0x44
 8005f76:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f7c:	e841 2300 	strex	r3, r2, [r1]
 8005f80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1e4      	bne.n	8005f52 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3308      	adds	r3, #8
 8005f8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	e853 3f00 	ldrex	r3, [r3]
 8005f96:	623b      	str	r3, [r7, #32]
   return(result);
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	f023 0301 	bic.w	r3, r3, #1
 8005f9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	3308      	adds	r3, #8
 8005fa8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005fac:	633a      	str	r2, [r7, #48]	; 0x30
 8005fae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fb4:	e841 2300 	strex	r3, r2, [r1]
 8005fb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1e3      	bne.n	8005f88 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	e853 3f00 	ldrex	r3, [r3]
 8005fe0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f023 0310 	bic.w	r3, r3, #16
 8005fe8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ff6:	61fb      	str	r3, [r7, #28]
 8005ff8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffa:	69b9      	ldr	r1, [r7, #24]
 8005ffc:	69fa      	ldr	r2, [r7, #28]
 8005ffe:	e841 2300 	strex	r3, r2, [r1]
 8006002:	617b      	str	r3, [r7, #20]
   return(result);
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1e4      	bne.n	8005fd4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2202      	movs	r2, #2
 800600e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006010:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006014:	4619      	mov	r1, r3
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f85c 	bl	80060d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800601c:	e03f      	b.n	800609e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800601e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00e      	beq.n	8006048 <HAL_UART_IRQHandler+0x56c>
 800602a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800602e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d008      	beq.n	8006048 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800603e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f853 	bl	80060ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006046:	e02d      	b.n	80060a4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800604c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00e      	beq.n	8006072 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800605c:	2b00      	cmp	r3, #0
 800605e:	d008      	beq.n	8006072 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006064:	2b00      	cmp	r3, #0
 8006066:	d01c      	beq.n	80060a2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	4798      	blx	r3
    }
    return;
 8006070:	e017      	b.n	80060a2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607a:	2b00      	cmp	r3, #0
 800607c:	d012      	beq.n	80060a4 <HAL_UART_IRQHandler+0x5c8>
 800607e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00c      	beq.n	80060a4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fccb 	bl	8006a26 <UART_EndTransmit_IT>
    return;
 8006090:	e008      	b.n	80060a4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006092:	bf00      	nop
 8006094:	e006      	b.n	80060a4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006096:	bf00      	nop
 8006098:	e004      	b.n	80060a4 <HAL_UART_IRQHandler+0x5c8>
      return;
 800609a:	bf00      	nop
 800609c:	e002      	b.n	80060a4 <HAL_UART_IRQHandler+0x5c8>
      return;
 800609e:	bf00      	nop
 80060a0:	e000      	b.n	80060a4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80060a2:	bf00      	nop
  }

}
 80060a4:	37e8      	adds	r7, #232	; 0xe8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop

080060ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	460b      	mov	r3, r1
 80060de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b088      	sub	sp, #32
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	431a      	orrs	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	431a      	orrs	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	4313      	orrs	r3, r2
 8006122:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	4ba6      	ldr	r3, [pc, #664]	; (80063c4 <UART_SetConfig+0x2c4>)
 800612c:	4013      	ands	r3, r2
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6812      	ldr	r2, [r2, #0]
 8006132:	6979      	ldr	r1, [r7, #20]
 8006134:	430b      	orrs	r3, r1
 8006136:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68da      	ldr	r2, [r3, #12]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	4313      	orrs	r3, r2
 800615c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	430a      	orrs	r2, r1
 8006170:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a94      	ldr	r2, [pc, #592]	; (80063c8 <UART_SetConfig+0x2c8>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d120      	bne.n	80061be <UART_SetConfig+0xbe>
 800617c:	4b93      	ldr	r3, [pc, #588]	; (80063cc <UART_SetConfig+0x2cc>)
 800617e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006182:	f003 0303 	and.w	r3, r3, #3
 8006186:	2b03      	cmp	r3, #3
 8006188:	d816      	bhi.n	80061b8 <UART_SetConfig+0xb8>
 800618a:	a201      	add	r2, pc, #4	; (adr r2, 8006190 <UART_SetConfig+0x90>)
 800618c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006190:	080061a1 	.word	0x080061a1
 8006194:	080061ad 	.word	0x080061ad
 8006198:	080061a7 	.word	0x080061a7
 800619c:	080061b3 	.word	0x080061b3
 80061a0:	2301      	movs	r3, #1
 80061a2:	77fb      	strb	r3, [r7, #31]
 80061a4:	e150      	b.n	8006448 <UART_SetConfig+0x348>
 80061a6:	2302      	movs	r3, #2
 80061a8:	77fb      	strb	r3, [r7, #31]
 80061aa:	e14d      	b.n	8006448 <UART_SetConfig+0x348>
 80061ac:	2304      	movs	r3, #4
 80061ae:	77fb      	strb	r3, [r7, #31]
 80061b0:	e14a      	b.n	8006448 <UART_SetConfig+0x348>
 80061b2:	2308      	movs	r3, #8
 80061b4:	77fb      	strb	r3, [r7, #31]
 80061b6:	e147      	b.n	8006448 <UART_SetConfig+0x348>
 80061b8:	2310      	movs	r3, #16
 80061ba:	77fb      	strb	r3, [r7, #31]
 80061bc:	e144      	b.n	8006448 <UART_SetConfig+0x348>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a83      	ldr	r2, [pc, #524]	; (80063d0 <UART_SetConfig+0x2d0>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d132      	bne.n	800622e <UART_SetConfig+0x12e>
 80061c8:	4b80      	ldr	r3, [pc, #512]	; (80063cc <UART_SetConfig+0x2cc>)
 80061ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ce:	f003 030c 	and.w	r3, r3, #12
 80061d2:	2b0c      	cmp	r3, #12
 80061d4:	d828      	bhi.n	8006228 <UART_SetConfig+0x128>
 80061d6:	a201      	add	r2, pc, #4	; (adr r2, 80061dc <UART_SetConfig+0xdc>)
 80061d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061dc:	08006211 	.word	0x08006211
 80061e0:	08006229 	.word	0x08006229
 80061e4:	08006229 	.word	0x08006229
 80061e8:	08006229 	.word	0x08006229
 80061ec:	0800621d 	.word	0x0800621d
 80061f0:	08006229 	.word	0x08006229
 80061f4:	08006229 	.word	0x08006229
 80061f8:	08006229 	.word	0x08006229
 80061fc:	08006217 	.word	0x08006217
 8006200:	08006229 	.word	0x08006229
 8006204:	08006229 	.word	0x08006229
 8006208:	08006229 	.word	0x08006229
 800620c:	08006223 	.word	0x08006223
 8006210:	2300      	movs	r3, #0
 8006212:	77fb      	strb	r3, [r7, #31]
 8006214:	e118      	b.n	8006448 <UART_SetConfig+0x348>
 8006216:	2302      	movs	r3, #2
 8006218:	77fb      	strb	r3, [r7, #31]
 800621a:	e115      	b.n	8006448 <UART_SetConfig+0x348>
 800621c:	2304      	movs	r3, #4
 800621e:	77fb      	strb	r3, [r7, #31]
 8006220:	e112      	b.n	8006448 <UART_SetConfig+0x348>
 8006222:	2308      	movs	r3, #8
 8006224:	77fb      	strb	r3, [r7, #31]
 8006226:	e10f      	b.n	8006448 <UART_SetConfig+0x348>
 8006228:	2310      	movs	r3, #16
 800622a:	77fb      	strb	r3, [r7, #31]
 800622c:	e10c      	b.n	8006448 <UART_SetConfig+0x348>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a68      	ldr	r2, [pc, #416]	; (80063d4 <UART_SetConfig+0x2d4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d120      	bne.n	800627a <UART_SetConfig+0x17a>
 8006238:	4b64      	ldr	r3, [pc, #400]	; (80063cc <UART_SetConfig+0x2cc>)
 800623a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800623e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006242:	2b30      	cmp	r3, #48	; 0x30
 8006244:	d013      	beq.n	800626e <UART_SetConfig+0x16e>
 8006246:	2b30      	cmp	r3, #48	; 0x30
 8006248:	d814      	bhi.n	8006274 <UART_SetConfig+0x174>
 800624a:	2b20      	cmp	r3, #32
 800624c:	d009      	beq.n	8006262 <UART_SetConfig+0x162>
 800624e:	2b20      	cmp	r3, #32
 8006250:	d810      	bhi.n	8006274 <UART_SetConfig+0x174>
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <UART_SetConfig+0x15c>
 8006256:	2b10      	cmp	r3, #16
 8006258:	d006      	beq.n	8006268 <UART_SetConfig+0x168>
 800625a:	e00b      	b.n	8006274 <UART_SetConfig+0x174>
 800625c:	2300      	movs	r3, #0
 800625e:	77fb      	strb	r3, [r7, #31]
 8006260:	e0f2      	b.n	8006448 <UART_SetConfig+0x348>
 8006262:	2302      	movs	r3, #2
 8006264:	77fb      	strb	r3, [r7, #31]
 8006266:	e0ef      	b.n	8006448 <UART_SetConfig+0x348>
 8006268:	2304      	movs	r3, #4
 800626a:	77fb      	strb	r3, [r7, #31]
 800626c:	e0ec      	b.n	8006448 <UART_SetConfig+0x348>
 800626e:	2308      	movs	r3, #8
 8006270:	77fb      	strb	r3, [r7, #31]
 8006272:	e0e9      	b.n	8006448 <UART_SetConfig+0x348>
 8006274:	2310      	movs	r3, #16
 8006276:	77fb      	strb	r3, [r7, #31]
 8006278:	e0e6      	b.n	8006448 <UART_SetConfig+0x348>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a56      	ldr	r2, [pc, #344]	; (80063d8 <UART_SetConfig+0x2d8>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d120      	bne.n	80062c6 <UART_SetConfig+0x1c6>
 8006284:	4b51      	ldr	r3, [pc, #324]	; (80063cc <UART_SetConfig+0x2cc>)
 8006286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800628a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800628e:	2bc0      	cmp	r3, #192	; 0xc0
 8006290:	d013      	beq.n	80062ba <UART_SetConfig+0x1ba>
 8006292:	2bc0      	cmp	r3, #192	; 0xc0
 8006294:	d814      	bhi.n	80062c0 <UART_SetConfig+0x1c0>
 8006296:	2b80      	cmp	r3, #128	; 0x80
 8006298:	d009      	beq.n	80062ae <UART_SetConfig+0x1ae>
 800629a:	2b80      	cmp	r3, #128	; 0x80
 800629c:	d810      	bhi.n	80062c0 <UART_SetConfig+0x1c0>
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <UART_SetConfig+0x1a8>
 80062a2:	2b40      	cmp	r3, #64	; 0x40
 80062a4:	d006      	beq.n	80062b4 <UART_SetConfig+0x1b4>
 80062a6:	e00b      	b.n	80062c0 <UART_SetConfig+0x1c0>
 80062a8:	2300      	movs	r3, #0
 80062aa:	77fb      	strb	r3, [r7, #31]
 80062ac:	e0cc      	b.n	8006448 <UART_SetConfig+0x348>
 80062ae:	2302      	movs	r3, #2
 80062b0:	77fb      	strb	r3, [r7, #31]
 80062b2:	e0c9      	b.n	8006448 <UART_SetConfig+0x348>
 80062b4:	2304      	movs	r3, #4
 80062b6:	77fb      	strb	r3, [r7, #31]
 80062b8:	e0c6      	b.n	8006448 <UART_SetConfig+0x348>
 80062ba:	2308      	movs	r3, #8
 80062bc:	77fb      	strb	r3, [r7, #31]
 80062be:	e0c3      	b.n	8006448 <UART_SetConfig+0x348>
 80062c0:	2310      	movs	r3, #16
 80062c2:	77fb      	strb	r3, [r7, #31]
 80062c4:	e0c0      	b.n	8006448 <UART_SetConfig+0x348>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a44      	ldr	r2, [pc, #272]	; (80063dc <UART_SetConfig+0x2dc>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d125      	bne.n	800631c <UART_SetConfig+0x21c>
 80062d0:	4b3e      	ldr	r3, [pc, #248]	; (80063cc <UART_SetConfig+0x2cc>)
 80062d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062de:	d017      	beq.n	8006310 <UART_SetConfig+0x210>
 80062e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062e4:	d817      	bhi.n	8006316 <UART_SetConfig+0x216>
 80062e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ea:	d00b      	beq.n	8006304 <UART_SetConfig+0x204>
 80062ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062f0:	d811      	bhi.n	8006316 <UART_SetConfig+0x216>
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d003      	beq.n	80062fe <UART_SetConfig+0x1fe>
 80062f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062fa:	d006      	beq.n	800630a <UART_SetConfig+0x20a>
 80062fc:	e00b      	b.n	8006316 <UART_SetConfig+0x216>
 80062fe:	2300      	movs	r3, #0
 8006300:	77fb      	strb	r3, [r7, #31]
 8006302:	e0a1      	b.n	8006448 <UART_SetConfig+0x348>
 8006304:	2302      	movs	r3, #2
 8006306:	77fb      	strb	r3, [r7, #31]
 8006308:	e09e      	b.n	8006448 <UART_SetConfig+0x348>
 800630a:	2304      	movs	r3, #4
 800630c:	77fb      	strb	r3, [r7, #31]
 800630e:	e09b      	b.n	8006448 <UART_SetConfig+0x348>
 8006310:	2308      	movs	r3, #8
 8006312:	77fb      	strb	r3, [r7, #31]
 8006314:	e098      	b.n	8006448 <UART_SetConfig+0x348>
 8006316:	2310      	movs	r3, #16
 8006318:	77fb      	strb	r3, [r7, #31]
 800631a:	e095      	b.n	8006448 <UART_SetConfig+0x348>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a2f      	ldr	r2, [pc, #188]	; (80063e0 <UART_SetConfig+0x2e0>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d125      	bne.n	8006372 <UART_SetConfig+0x272>
 8006326:	4b29      	ldr	r3, [pc, #164]	; (80063cc <UART_SetConfig+0x2cc>)
 8006328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006330:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006334:	d017      	beq.n	8006366 <UART_SetConfig+0x266>
 8006336:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800633a:	d817      	bhi.n	800636c <UART_SetConfig+0x26c>
 800633c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006340:	d00b      	beq.n	800635a <UART_SetConfig+0x25a>
 8006342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006346:	d811      	bhi.n	800636c <UART_SetConfig+0x26c>
 8006348:	2b00      	cmp	r3, #0
 800634a:	d003      	beq.n	8006354 <UART_SetConfig+0x254>
 800634c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006350:	d006      	beq.n	8006360 <UART_SetConfig+0x260>
 8006352:	e00b      	b.n	800636c <UART_SetConfig+0x26c>
 8006354:	2301      	movs	r3, #1
 8006356:	77fb      	strb	r3, [r7, #31]
 8006358:	e076      	b.n	8006448 <UART_SetConfig+0x348>
 800635a:	2302      	movs	r3, #2
 800635c:	77fb      	strb	r3, [r7, #31]
 800635e:	e073      	b.n	8006448 <UART_SetConfig+0x348>
 8006360:	2304      	movs	r3, #4
 8006362:	77fb      	strb	r3, [r7, #31]
 8006364:	e070      	b.n	8006448 <UART_SetConfig+0x348>
 8006366:	2308      	movs	r3, #8
 8006368:	77fb      	strb	r3, [r7, #31]
 800636a:	e06d      	b.n	8006448 <UART_SetConfig+0x348>
 800636c:	2310      	movs	r3, #16
 800636e:	77fb      	strb	r3, [r7, #31]
 8006370:	e06a      	b.n	8006448 <UART_SetConfig+0x348>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a1b      	ldr	r2, [pc, #108]	; (80063e4 <UART_SetConfig+0x2e4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d138      	bne.n	80063ee <UART_SetConfig+0x2ee>
 800637c:	4b13      	ldr	r3, [pc, #76]	; (80063cc <UART_SetConfig+0x2cc>)
 800637e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006382:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006386:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800638a:	d017      	beq.n	80063bc <UART_SetConfig+0x2bc>
 800638c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006390:	d82a      	bhi.n	80063e8 <UART_SetConfig+0x2e8>
 8006392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006396:	d00b      	beq.n	80063b0 <UART_SetConfig+0x2b0>
 8006398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800639c:	d824      	bhi.n	80063e8 <UART_SetConfig+0x2e8>
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <UART_SetConfig+0x2aa>
 80063a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063a6:	d006      	beq.n	80063b6 <UART_SetConfig+0x2b6>
 80063a8:	e01e      	b.n	80063e8 <UART_SetConfig+0x2e8>
 80063aa:	2300      	movs	r3, #0
 80063ac:	77fb      	strb	r3, [r7, #31]
 80063ae:	e04b      	b.n	8006448 <UART_SetConfig+0x348>
 80063b0:	2302      	movs	r3, #2
 80063b2:	77fb      	strb	r3, [r7, #31]
 80063b4:	e048      	b.n	8006448 <UART_SetConfig+0x348>
 80063b6:	2304      	movs	r3, #4
 80063b8:	77fb      	strb	r3, [r7, #31]
 80063ba:	e045      	b.n	8006448 <UART_SetConfig+0x348>
 80063bc:	2308      	movs	r3, #8
 80063be:	77fb      	strb	r3, [r7, #31]
 80063c0:	e042      	b.n	8006448 <UART_SetConfig+0x348>
 80063c2:	bf00      	nop
 80063c4:	efff69f3 	.word	0xefff69f3
 80063c8:	40011000 	.word	0x40011000
 80063cc:	40023800 	.word	0x40023800
 80063d0:	40004400 	.word	0x40004400
 80063d4:	40004800 	.word	0x40004800
 80063d8:	40004c00 	.word	0x40004c00
 80063dc:	40005000 	.word	0x40005000
 80063e0:	40011400 	.word	0x40011400
 80063e4:	40007800 	.word	0x40007800
 80063e8:	2310      	movs	r3, #16
 80063ea:	77fb      	strb	r3, [r7, #31]
 80063ec:	e02c      	b.n	8006448 <UART_SetConfig+0x348>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a72      	ldr	r2, [pc, #456]	; (80065bc <UART_SetConfig+0x4bc>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d125      	bne.n	8006444 <UART_SetConfig+0x344>
 80063f8:	4b71      	ldr	r3, [pc, #452]	; (80065c0 <UART_SetConfig+0x4c0>)
 80063fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006402:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006406:	d017      	beq.n	8006438 <UART_SetConfig+0x338>
 8006408:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800640c:	d817      	bhi.n	800643e <UART_SetConfig+0x33e>
 800640e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006412:	d00b      	beq.n	800642c <UART_SetConfig+0x32c>
 8006414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006418:	d811      	bhi.n	800643e <UART_SetConfig+0x33e>
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <UART_SetConfig+0x326>
 800641e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006422:	d006      	beq.n	8006432 <UART_SetConfig+0x332>
 8006424:	e00b      	b.n	800643e <UART_SetConfig+0x33e>
 8006426:	2300      	movs	r3, #0
 8006428:	77fb      	strb	r3, [r7, #31]
 800642a:	e00d      	b.n	8006448 <UART_SetConfig+0x348>
 800642c:	2302      	movs	r3, #2
 800642e:	77fb      	strb	r3, [r7, #31]
 8006430:	e00a      	b.n	8006448 <UART_SetConfig+0x348>
 8006432:	2304      	movs	r3, #4
 8006434:	77fb      	strb	r3, [r7, #31]
 8006436:	e007      	b.n	8006448 <UART_SetConfig+0x348>
 8006438:	2308      	movs	r3, #8
 800643a:	77fb      	strb	r3, [r7, #31]
 800643c:	e004      	b.n	8006448 <UART_SetConfig+0x348>
 800643e:	2310      	movs	r3, #16
 8006440:	77fb      	strb	r3, [r7, #31]
 8006442:	e001      	b.n	8006448 <UART_SetConfig+0x348>
 8006444:	2310      	movs	r3, #16
 8006446:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	69db      	ldr	r3, [r3, #28]
 800644c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006450:	d15b      	bne.n	800650a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006452:	7ffb      	ldrb	r3, [r7, #31]
 8006454:	2b08      	cmp	r3, #8
 8006456:	d828      	bhi.n	80064aa <UART_SetConfig+0x3aa>
 8006458:	a201      	add	r2, pc, #4	; (adr r2, 8006460 <UART_SetConfig+0x360>)
 800645a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800645e:	bf00      	nop
 8006460:	08006485 	.word	0x08006485
 8006464:	0800648d 	.word	0x0800648d
 8006468:	08006495 	.word	0x08006495
 800646c:	080064ab 	.word	0x080064ab
 8006470:	0800649b 	.word	0x0800649b
 8006474:	080064ab 	.word	0x080064ab
 8006478:	080064ab 	.word	0x080064ab
 800647c:	080064ab 	.word	0x080064ab
 8006480:	080064a3 	.word	0x080064a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006484:	f7fe fe08 	bl	8005098 <HAL_RCC_GetPCLK1Freq>
 8006488:	61b8      	str	r0, [r7, #24]
        break;
 800648a:	e013      	b.n	80064b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800648c:	f7fe fe18 	bl	80050c0 <HAL_RCC_GetPCLK2Freq>
 8006490:	61b8      	str	r0, [r7, #24]
        break;
 8006492:	e00f      	b.n	80064b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006494:	4b4b      	ldr	r3, [pc, #300]	; (80065c4 <UART_SetConfig+0x4c4>)
 8006496:	61bb      	str	r3, [r7, #24]
        break;
 8006498:	e00c      	b.n	80064b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800649a:	f7fe fceb 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 800649e:	61b8      	str	r0, [r7, #24]
        break;
 80064a0:	e008      	b.n	80064b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064a6:	61bb      	str	r3, [r7, #24]
        break;
 80064a8:	e004      	b.n	80064b4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80064aa:	2300      	movs	r3, #0
 80064ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	77bb      	strb	r3, [r7, #30]
        break;
 80064b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d074      	beq.n	80065a4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	005a      	lsls	r2, r3, #1
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	085b      	lsrs	r3, r3, #1
 80064c4:	441a      	add	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	2b0f      	cmp	r3, #15
 80064d4:	d916      	bls.n	8006504 <UART_SetConfig+0x404>
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064dc:	d212      	bcs.n	8006504 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	f023 030f 	bic.w	r3, r3, #15
 80064e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	085b      	lsrs	r3, r3, #1
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	f003 0307 	and.w	r3, r3, #7
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	89fb      	ldrh	r3, [r7, #14]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	89fa      	ldrh	r2, [r7, #14]
 8006500:	60da      	str	r2, [r3, #12]
 8006502:	e04f      	b.n	80065a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	77bb      	strb	r3, [r7, #30]
 8006508:	e04c      	b.n	80065a4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800650a:	7ffb      	ldrb	r3, [r7, #31]
 800650c:	2b08      	cmp	r3, #8
 800650e:	d828      	bhi.n	8006562 <UART_SetConfig+0x462>
 8006510:	a201      	add	r2, pc, #4	; (adr r2, 8006518 <UART_SetConfig+0x418>)
 8006512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006516:	bf00      	nop
 8006518:	0800653d 	.word	0x0800653d
 800651c:	08006545 	.word	0x08006545
 8006520:	0800654d 	.word	0x0800654d
 8006524:	08006563 	.word	0x08006563
 8006528:	08006553 	.word	0x08006553
 800652c:	08006563 	.word	0x08006563
 8006530:	08006563 	.word	0x08006563
 8006534:	08006563 	.word	0x08006563
 8006538:	0800655b 	.word	0x0800655b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800653c:	f7fe fdac 	bl	8005098 <HAL_RCC_GetPCLK1Freq>
 8006540:	61b8      	str	r0, [r7, #24]
        break;
 8006542:	e013      	b.n	800656c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006544:	f7fe fdbc 	bl	80050c0 <HAL_RCC_GetPCLK2Freq>
 8006548:	61b8      	str	r0, [r7, #24]
        break;
 800654a:	e00f      	b.n	800656c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800654c:	4b1d      	ldr	r3, [pc, #116]	; (80065c4 <UART_SetConfig+0x4c4>)
 800654e:	61bb      	str	r3, [r7, #24]
        break;
 8006550:	e00c      	b.n	800656c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006552:	f7fe fc8f 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8006556:	61b8      	str	r0, [r7, #24]
        break;
 8006558:	e008      	b.n	800656c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800655a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800655e:	61bb      	str	r3, [r7, #24]
        break;
 8006560:	e004      	b.n	800656c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006562:	2300      	movs	r3, #0
 8006564:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	77bb      	strb	r3, [r7, #30]
        break;
 800656a:	bf00      	nop
    }

    if (pclk != 0U)
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d018      	beq.n	80065a4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	085a      	lsrs	r2, r3, #1
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	441a      	add	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	fbb2 f3f3 	udiv	r3, r2, r3
 8006584:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	2b0f      	cmp	r3, #15
 800658a:	d909      	bls.n	80065a0 <UART_SetConfig+0x4a0>
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006592:	d205      	bcs.n	80065a0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	b29a      	uxth	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	60da      	str	r2, [r3, #12]
 800659e:	e001      	b.n	80065a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80065b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3720      	adds	r7, #32
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	40007c00 	.word	0x40007c00
 80065c0:	40023800 	.word	0x40023800
 80065c4:	00f42400 	.word	0x00f42400

080065c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00a      	beq.n	80065f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00a      	beq.n	8006614 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	430a      	orrs	r2, r1
 8006612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00a      	beq.n	8006636 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663a:	f003 0308 	and.w	r3, r3, #8
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00a      	beq.n	8006658 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	430a      	orrs	r2, r1
 8006656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665c:	f003 0310 	and.w	r3, r3, #16
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00a      	beq.n	800667a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667e:	f003 0320 	and.w	r3, r3, #32
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00a      	beq.n	800669c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	430a      	orrs	r2, r1
 800669a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d01a      	beq.n	80066de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066c6:	d10a      	bne.n	80066de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	605a      	str	r2, [r3, #4]
  }
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af02      	add	r7, sp, #8
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800671c:	f7fb fe62 	bl	80023e4 <HAL_GetTick>
 8006720:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0308 	and.w	r3, r3, #8
 800672c:	2b08      	cmp	r3, #8
 800672e:	d10e      	bne.n	800674e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006730:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f831 	bl	80067a6 <UART_WaitOnFlagUntilTimeout>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e027      	b.n	800679e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0304 	and.w	r3, r3, #4
 8006758:	2b04      	cmp	r3, #4
 800675a:	d10e      	bne.n	800677a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800675c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f81b 	bl	80067a6 <UART_WaitOnFlagUntilTimeout>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e011      	b.n	800679e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2220      	movs	r2, #32
 800677e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2220      	movs	r2, #32
 8006784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b09c      	sub	sp, #112	; 0x70
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	60f8      	str	r0, [r7, #12]
 80067ae:	60b9      	str	r1, [r7, #8]
 80067b0:	603b      	str	r3, [r7, #0]
 80067b2:	4613      	mov	r3, r2
 80067b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067b6:	e0a7      	b.n	8006908 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067be:	f000 80a3 	beq.w	8006908 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067c2:	f7fb fe0f 	bl	80023e4 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d302      	bcc.n	80067d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80067d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d13f      	bne.n	8006858 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067e0:	e853 3f00 	ldrex	r3, [r3]
 80067e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80067e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067ec:	667b      	str	r3, [r7, #100]	; 0x64
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	461a      	mov	r2, r3
 80067f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067f8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067fe:	e841 2300 	strex	r3, r2, [r1]
 8006802:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1e6      	bne.n	80067d8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3308      	adds	r3, #8
 8006810:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006814:	e853 3f00 	ldrex	r3, [r3]
 8006818:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800681a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681c:	f023 0301 	bic.w	r3, r3, #1
 8006820:	663b      	str	r3, [r7, #96]	; 0x60
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3308      	adds	r3, #8
 8006828:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800682a:	64ba      	str	r2, [r7, #72]	; 0x48
 800682c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1e5      	bne.n	800680a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2220      	movs	r2, #32
 8006842:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2220      	movs	r2, #32
 8006848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e068      	b.n	800692a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0304 	and.w	r3, r3, #4
 8006862:	2b00      	cmp	r3, #0
 8006864:	d050      	beq.n	8006908 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006874:	d148      	bne.n	8006908 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800687e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006888:	e853 3f00 	ldrex	r3, [r3]
 800688c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006894:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	461a      	mov	r2, r3
 800689c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800689e:	637b      	str	r3, [r7, #52]	; 0x34
 80068a0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068a6:	e841 2300 	strex	r3, r2, [r1]
 80068aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1e6      	bne.n	8006880 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	3308      	adds	r3, #8
 80068b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	e853 3f00 	ldrex	r3, [r3]
 80068c0:	613b      	str	r3, [r7, #16]
   return(result);
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f023 0301 	bic.w	r3, r3, #1
 80068c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3308      	adds	r3, #8
 80068d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068d2:	623a      	str	r2, [r7, #32]
 80068d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d6:	69f9      	ldr	r1, [r7, #28]
 80068d8:	6a3a      	ldr	r2, [r7, #32]
 80068da:	e841 2300 	strex	r3, r2, [r1]
 80068de:	61bb      	str	r3, [r7, #24]
   return(result);
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1e5      	bne.n	80068b2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2220      	movs	r2, #32
 80068ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2220      	movs	r2, #32
 80068f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2220      	movs	r2, #32
 80068f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e010      	b.n	800692a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	69da      	ldr	r2, [r3, #28]
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	4013      	ands	r3, r2
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	429a      	cmp	r2, r3
 8006916:	bf0c      	ite	eq
 8006918:	2301      	moveq	r3, #1
 800691a:	2300      	movne	r3, #0
 800691c:	b2db      	uxtb	r3, r3
 800691e:	461a      	mov	r2, r3
 8006920:	79fb      	ldrb	r3, [r7, #7]
 8006922:	429a      	cmp	r2, r3
 8006924:	f43f af48 	beq.w	80067b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3770      	adds	r7, #112	; 0x70
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006932:	b480      	push	{r7}
 8006934:	b095      	sub	sp, #84	; 0x54
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006942:	e853 3f00 	ldrex	r3, [r3]
 8006946:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800694e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	461a      	mov	r2, r3
 8006956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006958:	643b      	str	r3, [r7, #64]	; 0x40
 800695a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800695e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006960:	e841 2300 	strex	r3, r2, [r1]
 8006964:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1e6      	bne.n	800693a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	3308      	adds	r3, #8
 8006972:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	e853 3f00 	ldrex	r3, [r3]
 800697a:	61fb      	str	r3, [r7, #28]
   return(result);
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	f023 0301 	bic.w	r3, r3, #1
 8006982:	64bb      	str	r3, [r7, #72]	; 0x48
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3308      	adds	r3, #8
 800698a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800698c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800698e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006990:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006994:	e841 2300 	strex	r3, r2, [r1]
 8006998:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1e5      	bne.n	800696c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d118      	bne.n	80069da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	e853 3f00 	ldrex	r3, [r3]
 80069b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	f023 0310 	bic.w	r3, r3, #16
 80069bc:	647b      	str	r3, [r7, #68]	; 0x44
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	461a      	mov	r2, r3
 80069c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069c6:	61bb      	str	r3, [r7, #24]
 80069c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ca:	6979      	ldr	r1, [r7, #20]
 80069cc:	69ba      	ldr	r2, [r7, #24]
 80069ce:	e841 2300 	strex	r3, r2, [r1]
 80069d2:	613b      	str	r3, [r7, #16]
   return(result);
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1e6      	bne.n	80069a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2220      	movs	r2, #32
 80069de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	669a      	str	r2, [r3, #104]	; 0x68
}
 80069ee:	bf00      	nop
 80069f0:	3754      	adds	r7, #84	; 0x54
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b084      	sub	sp, #16
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f7ff fb51 	bl	80060c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a1e:	bf00      	nop
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b088      	sub	sp, #32
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	e853 3f00 	ldrex	r3, [r3]
 8006a3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a42:	61fb      	str	r3, [r7, #28]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	461a      	mov	r2, r3
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	61bb      	str	r3, [r7, #24]
 8006a4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a50:	6979      	ldr	r1, [r7, #20]
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	e841 2300 	strex	r3, r2, [r1]
 8006a58:	613b      	str	r3, [r7, #16]
   return(result);
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1e6      	bne.n	8006a2e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2220      	movs	r2, #32
 8006a64:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f7ff fb1d 	bl	80060ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a72:	bf00      	nop
 8006a74:	3720      	adds	r7, #32
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
	...

08006a7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a7c:	b084      	sub	sp, #16
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b084      	sub	sp, #16
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	f107 001c 	add.w	r0, r7, #28
 8006a8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d120      	bne.n	8006ad6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68da      	ldr	r2, [r3, #12]
 8006aa4:	4b20      	ldr	r3, [pc, #128]	; (8006b28 <USB_CoreInit+0xac>)
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d105      	bne.n	8006aca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fa96 	bl	8006ffc <USB_CoreReset>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	73fb      	strb	r3, [r7, #15]
 8006ad4:	e010      	b.n	8006af8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fa8a 	bl	8006ffc <USB_CoreReset>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d10b      	bne.n	8006b16 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f043 0206 	orr.w	r2, r3, #6
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f043 0220 	orr.w	r2, r3, #32
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b22:	b004      	add	sp, #16
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	ffbdffbf 	.word	0xffbdffbf

08006b2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f023 0201 	bic.w	r2, r3, #1
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b084      	sub	sp, #16
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	460b      	mov	r3, r1
 8006b58:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b6a:	78fb      	ldrb	r3, [r7, #3]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d115      	bne.n	8006b9c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b7c:	2001      	movs	r0, #1
 8006b7e:	f7fb fc3d 	bl	80023fc <HAL_Delay>
      ms++;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3301      	adds	r3, #1
 8006b86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fa29 	bl	8006fe0 <USB_GetMode>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d01e      	beq.n	8006bd2 <USB_SetCurrentMode+0x84>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2b31      	cmp	r3, #49	; 0x31
 8006b98:	d9f0      	bls.n	8006b7c <USB_SetCurrentMode+0x2e>
 8006b9a:	e01a      	b.n	8006bd2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b9c:	78fb      	ldrb	r3, [r7, #3]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d115      	bne.n	8006bce <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006bae:	2001      	movs	r0, #1
 8006bb0:	f7fb fc24 	bl	80023fc <HAL_Delay>
      ms++;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fa10 	bl	8006fe0 <USB_GetMode>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d005      	beq.n	8006bd2 <USB_SetCurrentMode+0x84>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2b31      	cmp	r3, #49	; 0x31
 8006bca:	d9f0      	bls.n	8006bae <USB_SetCurrentMode+0x60>
 8006bcc:	e001      	b.n	8006bd2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e005      	b.n	8006bde <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2b32      	cmp	r3, #50	; 0x32
 8006bd6:	d101      	bne.n	8006bdc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e000      	b.n	8006bde <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
	...

08006be8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006be8:	b084      	sub	sp, #16
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b086      	sub	sp, #24
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
 8006bf2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006bf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c02:	2300      	movs	r3, #0
 8006c04:	613b      	str	r3, [r7, #16]
 8006c06:	e009      	b.n	8006c1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	3340      	adds	r3, #64	; 0x40
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	2200      	movs	r2, #0
 8006c14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	613b      	str	r3, [r7, #16]
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	2b0e      	cmp	r3, #14
 8006c20:	d9f2      	bls.n	8006c08 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d11c      	bne.n	8006c62 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c36:	f043 0302 	orr.w	r3, r3, #2
 8006c3a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c40:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	e005      	b.n	8006c6e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c74:	461a      	mov	r2, r3
 8006c76:	2300      	movs	r3, #0
 8006c78:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c80:	4619      	mov	r1, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c88:	461a      	mov	r2, r3
 8006c8a:	680b      	ldr	r3, [r1, #0]
 8006c8c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d10c      	bne.n	8006cae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d104      	bne.n	8006ca4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f965 	bl	8006f6c <USB_SetDevSpeed>
 8006ca2:	e008      	b.n	8006cb6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f960 	bl	8006f6c <USB_SetDevSpeed>
 8006cac:	e003      	b.n	8006cb6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006cae:	2103      	movs	r1, #3
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f95b 	bl	8006f6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006cb6:	2110      	movs	r1, #16
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f8f3 	bl	8006ea4 <USB_FlushTxFifo>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d001      	beq.n	8006cc8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f91f 	bl	8006f0c <USB_FlushRxFifo>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d001      	beq.n	8006cd8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cde:	461a      	mov	r2, r3
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cea:	461a      	mov	r2, r3
 8006cec:	2300      	movs	r3, #0
 8006cee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	613b      	str	r3, [r7, #16]
 8006d00:	e043      	b.n	8006d8a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	015a      	lsls	r2, r3, #5
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d18:	d118      	bne.n	8006d4c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10a      	bne.n	8006d36 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d32:	6013      	str	r3, [r2, #0]
 8006d34:	e013      	b.n	8006d5e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	015a      	lsls	r2, r3, #5
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d42:	461a      	mov	r2, r3
 8006d44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d48:	6013      	str	r3, [r2, #0]
 8006d4a:	e008      	b.n	8006d5e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d58:	461a      	mov	r2, r3
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	015a      	lsls	r2, r3, #5
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	4413      	add	r3, r2
 8006d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	3301      	adds	r3, #1
 8006d88:	613b      	str	r3, [r7, #16]
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d3b7      	bcc.n	8006d02 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d92:	2300      	movs	r3, #0
 8006d94:	613b      	str	r3, [r7, #16]
 8006d96:	e043      	b.n	8006e20 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006daa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dae:	d118      	bne.n	8006de2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10a      	bne.n	8006dcc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	015a      	lsls	r2, r3, #5
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006dc8:	6013      	str	r3, [r2, #0]
 8006dca:	e013      	b.n	8006df4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd8:	461a      	mov	r2, r3
 8006dda:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006dde:	6013      	str	r3, [r2, #0]
 8006de0:	e008      	b.n	8006df4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	015a      	lsls	r2, r3, #5
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	4413      	add	r3, r2
 8006dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dee:	461a      	mov	r2, r3
 8006df0:	2300      	movs	r3, #0
 8006df2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e00:	461a      	mov	r2, r3
 8006e02:	2300      	movs	r3, #0
 8006e04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	015a      	lsls	r2, r3, #5
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e12:	461a      	mov	r2, r3
 8006e14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	613b      	str	r3, [r7, #16]
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d3b7      	bcc.n	8006d98 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e3a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e48:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d105      	bne.n	8006e5c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	f043 0210 	orr.w	r2, r3, #16
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	699a      	ldr	r2, [r3, #24]
 8006e60:	4b0e      	ldr	r3, [pc, #56]	; (8006e9c <USB_DevInit+0x2b4>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d005      	beq.n	8006e7a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	f043 0208 	orr.w	r2, r3, #8
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d105      	bne.n	8006e8c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	699a      	ldr	r2, [r3, #24]
 8006e84:	4b06      	ldr	r3, [pc, #24]	; (8006ea0 <USB_DevInit+0x2b8>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e98:	b004      	add	sp, #16
 8006e9a:	4770      	bx	lr
 8006e9c:	803c3800 	.word	0x803c3800
 8006ea0:	40000004 	.word	0x40000004

08006ea4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4a13      	ldr	r2, [pc, #76]	; (8006f08 <USB_FlushTxFifo+0x64>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d901      	bls.n	8006ec4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e01b      	b.n	8006efc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	daf2      	bge.n	8006eb2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	019b      	lsls	r3, r3, #6
 8006ed4:	f043 0220 	orr.w	r2, r3, #32
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	4a08      	ldr	r2, [pc, #32]	; (8006f08 <USB_FlushTxFifo+0x64>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d901      	bls.n	8006eee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e006      	b.n	8006efc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	f003 0320 	and.w	r3, r3, #32
 8006ef6:	2b20      	cmp	r3, #32
 8006ef8:	d0f0      	beq.n	8006edc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3714      	adds	r7, #20
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr
 8006f08:	00030d40 	.word	0x00030d40

08006f0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f14:	2300      	movs	r3, #0
 8006f16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	4a11      	ldr	r2, [pc, #68]	; (8006f68 <USB_FlushRxFifo+0x5c>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d901      	bls.n	8006f2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e018      	b.n	8006f5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	daf2      	bge.n	8006f18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2210      	movs	r2, #16
 8006f3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	4a08      	ldr	r2, [pc, #32]	; (8006f68 <USB_FlushRxFifo+0x5c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d901      	bls.n	8006f4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e006      	b.n	8006f5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	f003 0310 	and.w	r3, r3, #16
 8006f56:	2b10      	cmp	r3, #16
 8006f58:	d0f0      	beq.n	8006f3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	00030d40 	.word	0x00030d40

08006f6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	460b      	mov	r3, r1
 8006f76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	78fb      	ldrb	r3, [r7, #3]
 8006f86:	68f9      	ldr	r1, [r7, #12]
 8006f88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b085      	sub	sp, #20
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006fb8:	f023 0303 	bic.w	r3, r3, #3
 8006fbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fcc:	f043 0302 	orr.w	r3, r3, #2
 8006fd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	f003 0301 	and.w	r3, r3, #1
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007004:	2300      	movs	r3, #0
 8007006:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	3301      	adds	r3, #1
 800700c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	4a13      	ldr	r2, [pc, #76]	; (8007060 <USB_CoreReset+0x64>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d901      	bls.n	800701a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e01b      	b.n	8007052 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	2b00      	cmp	r3, #0
 8007020:	daf2      	bge.n	8007008 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007022:	2300      	movs	r3, #0
 8007024:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	f043 0201 	orr.w	r2, r3, #1
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	3301      	adds	r3, #1
 8007036:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	4a09      	ldr	r2, [pc, #36]	; (8007060 <USB_CoreReset+0x64>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d901      	bls.n	8007044 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007040:	2303      	movs	r3, #3
 8007042:	e006      	b.n	8007052 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	2b01      	cmp	r3, #1
 800704e:	d0f0      	beq.n	8007032 <USB_CoreReset+0x36>

  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	00030d40 	.word	0x00030d40

08007064 <__errno>:
 8007064:	4b01      	ldr	r3, [pc, #4]	; (800706c <__errno+0x8>)
 8007066:	6818      	ldr	r0, [r3, #0]
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	2000000c 	.word	0x2000000c

08007070 <__libc_init_array>:
 8007070:	b570      	push	{r4, r5, r6, lr}
 8007072:	4d0d      	ldr	r5, [pc, #52]	; (80070a8 <__libc_init_array+0x38>)
 8007074:	4c0d      	ldr	r4, [pc, #52]	; (80070ac <__libc_init_array+0x3c>)
 8007076:	1b64      	subs	r4, r4, r5
 8007078:	10a4      	asrs	r4, r4, #2
 800707a:	2600      	movs	r6, #0
 800707c:	42a6      	cmp	r6, r4
 800707e:	d109      	bne.n	8007094 <__libc_init_array+0x24>
 8007080:	4d0b      	ldr	r5, [pc, #44]	; (80070b0 <__libc_init_array+0x40>)
 8007082:	4c0c      	ldr	r4, [pc, #48]	; (80070b4 <__libc_init_array+0x44>)
 8007084:	f001 f824 	bl	80080d0 <_init>
 8007088:	1b64      	subs	r4, r4, r5
 800708a:	10a4      	asrs	r4, r4, #2
 800708c:	2600      	movs	r6, #0
 800708e:	42a6      	cmp	r6, r4
 8007090:	d105      	bne.n	800709e <__libc_init_array+0x2e>
 8007092:	bd70      	pop	{r4, r5, r6, pc}
 8007094:	f855 3b04 	ldr.w	r3, [r5], #4
 8007098:	4798      	blx	r3
 800709a:	3601      	adds	r6, #1
 800709c:	e7ee      	b.n	800707c <__libc_init_array+0xc>
 800709e:	f855 3b04 	ldr.w	r3, [r5], #4
 80070a2:	4798      	blx	r3
 80070a4:	3601      	adds	r6, #1
 80070a6:	e7f2      	b.n	800708e <__libc_init_array+0x1e>
 80070a8:	0800830c 	.word	0x0800830c
 80070ac:	0800830c 	.word	0x0800830c
 80070b0:	0800830c 	.word	0x0800830c
 80070b4:	08008310 	.word	0x08008310

080070b8 <memset>:
 80070b8:	4402      	add	r2, r0
 80070ba:	4603      	mov	r3, r0
 80070bc:	4293      	cmp	r3, r2
 80070be:	d100      	bne.n	80070c2 <memset+0xa>
 80070c0:	4770      	bx	lr
 80070c2:	f803 1b01 	strb.w	r1, [r3], #1
 80070c6:	e7f9      	b.n	80070bc <memset+0x4>

080070c8 <iprintf>:
 80070c8:	b40f      	push	{r0, r1, r2, r3}
 80070ca:	4b0a      	ldr	r3, [pc, #40]	; (80070f4 <iprintf+0x2c>)
 80070cc:	b513      	push	{r0, r1, r4, lr}
 80070ce:	681c      	ldr	r4, [r3, #0]
 80070d0:	b124      	cbz	r4, 80070dc <iprintf+0x14>
 80070d2:	69a3      	ldr	r3, [r4, #24]
 80070d4:	b913      	cbnz	r3, 80070dc <iprintf+0x14>
 80070d6:	4620      	mov	r0, r4
 80070d8:	f000 fa5e 	bl	8007598 <__sinit>
 80070dc:	ab05      	add	r3, sp, #20
 80070de:	9a04      	ldr	r2, [sp, #16]
 80070e0:	68a1      	ldr	r1, [r4, #8]
 80070e2:	9301      	str	r3, [sp, #4]
 80070e4:	4620      	mov	r0, r4
 80070e6:	f000 fc67 	bl	80079b8 <_vfiprintf_r>
 80070ea:	b002      	add	sp, #8
 80070ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070f0:	b004      	add	sp, #16
 80070f2:	4770      	bx	lr
 80070f4:	2000000c 	.word	0x2000000c

080070f8 <_puts_r>:
 80070f8:	b570      	push	{r4, r5, r6, lr}
 80070fa:	460e      	mov	r6, r1
 80070fc:	4605      	mov	r5, r0
 80070fe:	b118      	cbz	r0, 8007108 <_puts_r+0x10>
 8007100:	6983      	ldr	r3, [r0, #24]
 8007102:	b90b      	cbnz	r3, 8007108 <_puts_r+0x10>
 8007104:	f000 fa48 	bl	8007598 <__sinit>
 8007108:	69ab      	ldr	r3, [r5, #24]
 800710a:	68ac      	ldr	r4, [r5, #8]
 800710c:	b913      	cbnz	r3, 8007114 <_puts_r+0x1c>
 800710e:	4628      	mov	r0, r5
 8007110:	f000 fa42 	bl	8007598 <__sinit>
 8007114:	4b2c      	ldr	r3, [pc, #176]	; (80071c8 <_puts_r+0xd0>)
 8007116:	429c      	cmp	r4, r3
 8007118:	d120      	bne.n	800715c <_puts_r+0x64>
 800711a:	686c      	ldr	r4, [r5, #4]
 800711c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800711e:	07db      	lsls	r3, r3, #31
 8007120:	d405      	bmi.n	800712e <_puts_r+0x36>
 8007122:	89a3      	ldrh	r3, [r4, #12]
 8007124:	0598      	lsls	r0, r3, #22
 8007126:	d402      	bmi.n	800712e <_puts_r+0x36>
 8007128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800712a:	f000 fad3 	bl	80076d4 <__retarget_lock_acquire_recursive>
 800712e:	89a3      	ldrh	r3, [r4, #12]
 8007130:	0719      	lsls	r1, r3, #28
 8007132:	d51d      	bpl.n	8007170 <_puts_r+0x78>
 8007134:	6923      	ldr	r3, [r4, #16]
 8007136:	b1db      	cbz	r3, 8007170 <_puts_r+0x78>
 8007138:	3e01      	subs	r6, #1
 800713a:	68a3      	ldr	r3, [r4, #8]
 800713c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007140:	3b01      	subs	r3, #1
 8007142:	60a3      	str	r3, [r4, #8]
 8007144:	bb39      	cbnz	r1, 8007196 <_puts_r+0x9e>
 8007146:	2b00      	cmp	r3, #0
 8007148:	da38      	bge.n	80071bc <_puts_r+0xc4>
 800714a:	4622      	mov	r2, r4
 800714c:	210a      	movs	r1, #10
 800714e:	4628      	mov	r0, r5
 8007150:	f000 f848 	bl	80071e4 <__swbuf_r>
 8007154:	3001      	adds	r0, #1
 8007156:	d011      	beq.n	800717c <_puts_r+0x84>
 8007158:	250a      	movs	r5, #10
 800715a:	e011      	b.n	8007180 <_puts_r+0x88>
 800715c:	4b1b      	ldr	r3, [pc, #108]	; (80071cc <_puts_r+0xd4>)
 800715e:	429c      	cmp	r4, r3
 8007160:	d101      	bne.n	8007166 <_puts_r+0x6e>
 8007162:	68ac      	ldr	r4, [r5, #8]
 8007164:	e7da      	b.n	800711c <_puts_r+0x24>
 8007166:	4b1a      	ldr	r3, [pc, #104]	; (80071d0 <_puts_r+0xd8>)
 8007168:	429c      	cmp	r4, r3
 800716a:	bf08      	it	eq
 800716c:	68ec      	ldreq	r4, [r5, #12]
 800716e:	e7d5      	b.n	800711c <_puts_r+0x24>
 8007170:	4621      	mov	r1, r4
 8007172:	4628      	mov	r0, r5
 8007174:	f000 f888 	bl	8007288 <__swsetup_r>
 8007178:	2800      	cmp	r0, #0
 800717a:	d0dd      	beq.n	8007138 <_puts_r+0x40>
 800717c:	f04f 35ff 	mov.w	r5, #4294967295
 8007180:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007182:	07da      	lsls	r2, r3, #31
 8007184:	d405      	bmi.n	8007192 <_puts_r+0x9a>
 8007186:	89a3      	ldrh	r3, [r4, #12]
 8007188:	059b      	lsls	r3, r3, #22
 800718a:	d402      	bmi.n	8007192 <_puts_r+0x9a>
 800718c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800718e:	f000 faa2 	bl	80076d6 <__retarget_lock_release_recursive>
 8007192:	4628      	mov	r0, r5
 8007194:	bd70      	pop	{r4, r5, r6, pc}
 8007196:	2b00      	cmp	r3, #0
 8007198:	da04      	bge.n	80071a4 <_puts_r+0xac>
 800719a:	69a2      	ldr	r2, [r4, #24]
 800719c:	429a      	cmp	r2, r3
 800719e:	dc06      	bgt.n	80071ae <_puts_r+0xb6>
 80071a0:	290a      	cmp	r1, #10
 80071a2:	d004      	beq.n	80071ae <_puts_r+0xb6>
 80071a4:	6823      	ldr	r3, [r4, #0]
 80071a6:	1c5a      	adds	r2, r3, #1
 80071a8:	6022      	str	r2, [r4, #0]
 80071aa:	7019      	strb	r1, [r3, #0]
 80071ac:	e7c5      	b.n	800713a <_puts_r+0x42>
 80071ae:	4622      	mov	r2, r4
 80071b0:	4628      	mov	r0, r5
 80071b2:	f000 f817 	bl	80071e4 <__swbuf_r>
 80071b6:	3001      	adds	r0, #1
 80071b8:	d1bf      	bne.n	800713a <_puts_r+0x42>
 80071ba:	e7df      	b.n	800717c <_puts_r+0x84>
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	250a      	movs	r5, #10
 80071c0:	1c5a      	adds	r2, r3, #1
 80071c2:	6022      	str	r2, [r4, #0]
 80071c4:	701d      	strb	r5, [r3, #0]
 80071c6:	e7db      	b.n	8007180 <_puts_r+0x88>
 80071c8:	08008290 	.word	0x08008290
 80071cc:	080082b0 	.word	0x080082b0
 80071d0:	08008270 	.word	0x08008270

080071d4 <puts>:
 80071d4:	4b02      	ldr	r3, [pc, #8]	; (80071e0 <puts+0xc>)
 80071d6:	4601      	mov	r1, r0
 80071d8:	6818      	ldr	r0, [r3, #0]
 80071da:	f7ff bf8d 	b.w	80070f8 <_puts_r>
 80071de:	bf00      	nop
 80071e0:	2000000c 	.word	0x2000000c

080071e4 <__swbuf_r>:
 80071e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e6:	460e      	mov	r6, r1
 80071e8:	4614      	mov	r4, r2
 80071ea:	4605      	mov	r5, r0
 80071ec:	b118      	cbz	r0, 80071f6 <__swbuf_r+0x12>
 80071ee:	6983      	ldr	r3, [r0, #24]
 80071f0:	b90b      	cbnz	r3, 80071f6 <__swbuf_r+0x12>
 80071f2:	f000 f9d1 	bl	8007598 <__sinit>
 80071f6:	4b21      	ldr	r3, [pc, #132]	; (800727c <__swbuf_r+0x98>)
 80071f8:	429c      	cmp	r4, r3
 80071fa:	d12b      	bne.n	8007254 <__swbuf_r+0x70>
 80071fc:	686c      	ldr	r4, [r5, #4]
 80071fe:	69a3      	ldr	r3, [r4, #24]
 8007200:	60a3      	str	r3, [r4, #8]
 8007202:	89a3      	ldrh	r3, [r4, #12]
 8007204:	071a      	lsls	r2, r3, #28
 8007206:	d52f      	bpl.n	8007268 <__swbuf_r+0x84>
 8007208:	6923      	ldr	r3, [r4, #16]
 800720a:	b36b      	cbz	r3, 8007268 <__swbuf_r+0x84>
 800720c:	6923      	ldr	r3, [r4, #16]
 800720e:	6820      	ldr	r0, [r4, #0]
 8007210:	1ac0      	subs	r0, r0, r3
 8007212:	6963      	ldr	r3, [r4, #20]
 8007214:	b2f6      	uxtb	r6, r6
 8007216:	4283      	cmp	r3, r0
 8007218:	4637      	mov	r7, r6
 800721a:	dc04      	bgt.n	8007226 <__swbuf_r+0x42>
 800721c:	4621      	mov	r1, r4
 800721e:	4628      	mov	r0, r5
 8007220:	f000 f926 	bl	8007470 <_fflush_r>
 8007224:	bb30      	cbnz	r0, 8007274 <__swbuf_r+0x90>
 8007226:	68a3      	ldr	r3, [r4, #8]
 8007228:	3b01      	subs	r3, #1
 800722a:	60a3      	str	r3, [r4, #8]
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	1c5a      	adds	r2, r3, #1
 8007230:	6022      	str	r2, [r4, #0]
 8007232:	701e      	strb	r6, [r3, #0]
 8007234:	6963      	ldr	r3, [r4, #20]
 8007236:	3001      	adds	r0, #1
 8007238:	4283      	cmp	r3, r0
 800723a:	d004      	beq.n	8007246 <__swbuf_r+0x62>
 800723c:	89a3      	ldrh	r3, [r4, #12]
 800723e:	07db      	lsls	r3, r3, #31
 8007240:	d506      	bpl.n	8007250 <__swbuf_r+0x6c>
 8007242:	2e0a      	cmp	r6, #10
 8007244:	d104      	bne.n	8007250 <__swbuf_r+0x6c>
 8007246:	4621      	mov	r1, r4
 8007248:	4628      	mov	r0, r5
 800724a:	f000 f911 	bl	8007470 <_fflush_r>
 800724e:	b988      	cbnz	r0, 8007274 <__swbuf_r+0x90>
 8007250:	4638      	mov	r0, r7
 8007252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007254:	4b0a      	ldr	r3, [pc, #40]	; (8007280 <__swbuf_r+0x9c>)
 8007256:	429c      	cmp	r4, r3
 8007258:	d101      	bne.n	800725e <__swbuf_r+0x7a>
 800725a:	68ac      	ldr	r4, [r5, #8]
 800725c:	e7cf      	b.n	80071fe <__swbuf_r+0x1a>
 800725e:	4b09      	ldr	r3, [pc, #36]	; (8007284 <__swbuf_r+0xa0>)
 8007260:	429c      	cmp	r4, r3
 8007262:	bf08      	it	eq
 8007264:	68ec      	ldreq	r4, [r5, #12]
 8007266:	e7ca      	b.n	80071fe <__swbuf_r+0x1a>
 8007268:	4621      	mov	r1, r4
 800726a:	4628      	mov	r0, r5
 800726c:	f000 f80c 	bl	8007288 <__swsetup_r>
 8007270:	2800      	cmp	r0, #0
 8007272:	d0cb      	beq.n	800720c <__swbuf_r+0x28>
 8007274:	f04f 37ff 	mov.w	r7, #4294967295
 8007278:	e7ea      	b.n	8007250 <__swbuf_r+0x6c>
 800727a:	bf00      	nop
 800727c:	08008290 	.word	0x08008290
 8007280:	080082b0 	.word	0x080082b0
 8007284:	08008270 	.word	0x08008270

08007288 <__swsetup_r>:
 8007288:	4b32      	ldr	r3, [pc, #200]	; (8007354 <__swsetup_r+0xcc>)
 800728a:	b570      	push	{r4, r5, r6, lr}
 800728c:	681d      	ldr	r5, [r3, #0]
 800728e:	4606      	mov	r6, r0
 8007290:	460c      	mov	r4, r1
 8007292:	b125      	cbz	r5, 800729e <__swsetup_r+0x16>
 8007294:	69ab      	ldr	r3, [r5, #24]
 8007296:	b913      	cbnz	r3, 800729e <__swsetup_r+0x16>
 8007298:	4628      	mov	r0, r5
 800729a:	f000 f97d 	bl	8007598 <__sinit>
 800729e:	4b2e      	ldr	r3, [pc, #184]	; (8007358 <__swsetup_r+0xd0>)
 80072a0:	429c      	cmp	r4, r3
 80072a2:	d10f      	bne.n	80072c4 <__swsetup_r+0x3c>
 80072a4:	686c      	ldr	r4, [r5, #4]
 80072a6:	89a3      	ldrh	r3, [r4, #12]
 80072a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072ac:	0719      	lsls	r1, r3, #28
 80072ae:	d42c      	bmi.n	800730a <__swsetup_r+0x82>
 80072b0:	06dd      	lsls	r5, r3, #27
 80072b2:	d411      	bmi.n	80072d8 <__swsetup_r+0x50>
 80072b4:	2309      	movs	r3, #9
 80072b6:	6033      	str	r3, [r6, #0]
 80072b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80072bc:	81a3      	strh	r3, [r4, #12]
 80072be:	f04f 30ff 	mov.w	r0, #4294967295
 80072c2:	e03e      	b.n	8007342 <__swsetup_r+0xba>
 80072c4:	4b25      	ldr	r3, [pc, #148]	; (800735c <__swsetup_r+0xd4>)
 80072c6:	429c      	cmp	r4, r3
 80072c8:	d101      	bne.n	80072ce <__swsetup_r+0x46>
 80072ca:	68ac      	ldr	r4, [r5, #8]
 80072cc:	e7eb      	b.n	80072a6 <__swsetup_r+0x1e>
 80072ce:	4b24      	ldr	r3, [pc, #144]	; (8007360 <__swsetup_r+0xd8>)
 80072d0:	429c      	cmp	r4, r3
 80072d2:	bf08      	it	eq
 80072d4:	68ec      	ldreq	r4, [r5, #12]
 80072d6:	e7e6      	b.n	80072a6 <__swsetup_r+0x1e>
 80072d8:	0758      	lsls	r0, r3, #29
 80072da:	d512      	bpl.n	8007302 <__swsetup_r+0x7a>
 80072dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072de:	b141      	cbz	r1, 80072f2 <__swsetup_r+0x6a>
 80072e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072e4:	4299      	cmp	r1, r3
 80072e6:	d002      	beq.n	80072ee <__swsetup_r+0x66>
 80072e8:	4630      	mov	r0, r6
 80072ea:	f000 fa5b 	bl	80077a4 <_free_r>
 80072ee:	2300      	movs	r3, #0
 80072f0:	6363      	str	r3, [r4, #52]	; 0x34
 80072f2:	89a3      	ldrh	r3, [r4, #12]
 80072f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80072f8:	81a3      	strh	r3, [r4, #12]
 80072fa:	2300      	movs	r3, #0
 80072fc:	6063      	str	r3, [r4, #4]
 80072fe:	6923      	ldr	r3, [r4, #16]
 8007300:	6023      	str	r3, [r4, #0]
 8007302:	89a3      	ldrh	r3, [r4, #12]
 8007304:	f043 0308 	orr.w	r3, r3, #8
 8007308:	81a3      	strh	r3, [r4, #12]
 800730a:	6923      	ldr	r3, [r4, #16]
 800730c:	b94b      	cbnz	r3, 8007322 <__swsetup_r+0x9a>
 800730e:	89a3      	ldrh	r3, [r4, #12]
 8007310:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007318:	d003      	beq.n	8007322 <__swsetup_r+0x9a>
 800731a:	4621      	mov	r1, r4
 800731c:	4630      	mov	r0, r6
 800731e:	f000 fa01 	bl	8007724 <__smakebuf_r>
 8007322:	89a0      	ldrh	r0, [r4, #12]
 8007324:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007328:	f010 0301 	ands.w	r3, r0, #1
 800732c:	d00a      	beq.n	8007344 <__swsetup_r+0xbc>
 800732e:	2300      	movs	r3, #0
 8007330:	60a3      	str	r3, [r4, #8]
 8007332:	6963      	ldr	r3, [r4, #20]
 8007334:	425b      	negs	r3, r3
 8007336:	61a3      	str	r3, [r4, #24]
 8007338:	6923      	ldr	r3, [r4, #16]
 800733a:	b943      	cbnz	r3, 800734e <__swsetup_r+0xc6>
 800733c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007340:	d1ba      	bne.n	80072b8 <__swsetup_r+0x30>
 8007342:	bd70      	pop	{r4, r5, r6, pc}
 8007344:	0781      	lsls	r1, r0, #30
 8007346:	bf58      	it	pl
 8007348:	6963      	ldrpl	r3, [r4, #20]
 800734a:	60a3      	str	r3, [r4, #8]
 800734c:	e7f4      	b.n	8007338 <__swsetup_r+0xb0>
 800734e:	2000      	movs	r0, #0
 8007350:	e7f7      	b.n	8007342 <__swsetup_r+0xba>
 8007352:	bf00      	nop
 8007354:	2000000c 	.word	0x2000000c
 8007358:	08008290 	.word	0x08008290
 800735c:	080082b0 	.word	0x080082b0
 8007360:	08008270 	.word	0x08008270

08007364 <__sflush_r>:
 8007364:	898a      	ldrh	r2, [r1, #12]
 8007366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800736a:	4605      	mov	r5, r0
 800736c:	0710      	lsls	r0, r2, #28
 800736e:	460c      	mov	r4, r1
 8007370:	d458      	bmi.n	8007424 <__sflush_r+0xc0>
 8007372:	684b      	ldr	r3, [r1, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	dc05      	bgt.n	8007384 <__sflush_r+0x20>
 8007378:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800737a:	2b00      	cmp	r3, #0
 800737c:	dc02      	bgt.n	8007384 <__sflush_r+0x20>
 800737e:	2000      	movs	r0, #0
 8007380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007384:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007386:	2e00      	cmp	r6, #0
 8007388:	d0f9      	beq.n	800737e <__sflush_r+0x1a>
 800738a:	2300      	movs	r3, #0
 800738c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007390:	682f      	ldr	r7, [r5, #0]
 8007392:	602b      	str	r3, [r5, #0]
 8007394:	d032      	beq.n	80073fc <__sflush_r+0x98>
 8007396:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007398:	89a3      	ldrh	r3, [r4, #12]
 800739a:	075a      	lsls	r2, r3, #29
 800739c:	d505      	bpl.n	80073aa <__sflush_r+0x46>
 800739e:	6863      	ldr	r3, [r4, #4]
 80073a0:	1ac0      	subs	r0, r0, r3
 80073a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073a4:	b10b      	cbz	r3, 80073aa <__sflush_r+0x46>
 80073a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073a8:	1ac0      	subs	r0, r0, r3
 80073aa:	2300      	movs	r3, #0
 80073ac:	4602      	mov	r2, r0
 80073ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073b0:	6a21      	ldr	r1, [r4, #32]
 80073b2:	4628      	mov	r0, r5
 80073b4:	47b0      	blx	r6
 80073b6:	1c43      	adds	r3, r0, #1
 80073b8:	89a3      	ldrh	r3, [r4, #12]
 80073ba:	d106      	bne.n	80073ca <__sflush_r+0x66>
 80073bc:	6829      	ldr	r1, [r5, #0]
 80073be:	291d      	cmp	r1, #29
 80073c0:	d82c      	bhi.n	800741c <__sflush_r+0xb8>
 80073c2:	4a2a      	ldr	r2, [pc, #168]	; (800746c <__sflush_r+0x108>)
 80073c4:	40ca      	lsrs	r2, r1
 80073c6:	07d6      	lsls	r6, r2, #31
 80073c8:	d528      	bpl.n	800741c <__sflush_r+0xb8>
 80073ca:	2200      	movs	r2, #0
 80073cc:	6062      	str	r2, [r4, #4]
 80073ce:	04d9      	lsls	r1, r3, #19
 80073d0:	6922      	ldr	r2, [r4, #16]
 80073d2:	6022      	str	r2, [r4, #0]
 80073d4:	d504      	bpl.n	80073e0 <__sflush_r+0x7c>
 80073d6:	1c42      	adds	r2, r0, #1
 80073d8:	d101      	bne.n	80073de <__sflush_r+0x7a>
 80073da:	682b      	ldr	r3, [r5, #0]
 80073dc:	b903      	cbnz	r3, 80073e0 <__sflush_r+0x7c>
 80073de:	6560      	str	r0, [r4, #84]	; 0x54
 80073e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073e2:	602f      	str	r7, [r5, #0]
 80073e4:	2900      	cmp	r1, #0
 80073e6:	d0ca      	beq.n	800737e <__sflush_r+0x1a>
 80073e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073ec:	4299      	cmp	r1, r3
 80073ee:	d002      	beq.n	80073f6 <__sflush_r+0x92>
 80073f0:	4628      	mov	r0, r5
 80073f2:	f000 f9d7 	bl	80077a4 <_free_r>
 80073f6:	2000      	movs	r0, #0
 80073f8:	6360      	str	r0, [r4, #52]	; 0x34
 80073fa:	e7c1      	b.n	8007380 <__sflush_r+0x1c>
 80073fc:	6a21      	ldr	r1, [r4, #32]
 80073fe:	2301      	movs	r3, #1
 8007400:	4628      	mov	r0, r5
 8007402:	47b0      	blx	r6
 8007404:	1c41      	adds	r1, r0, #1
 8007406:	d1c7      	bne.n	8007398 <__sflush_r+0x34>
 8007408:	682b      	ldr	r3, [r5, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d0c4      	beq.n	8007398 <__sflush_r+0x34>
 800740e:	2b1d      	cmp	r3, #29
 8007410:	d001      	beq.n	8007416 <__sflush_r+0xb2>
 8007412:	2b16      	cmp	r3, #22
 8007414:	d101      	bne.n	800741a <__sflush_r+0xb6>
 8007416:	602f      	str	r7, [r5, #0]
 8007418:	e7b1      	b.n	800737e <__sflush_r+0x1a>
 800741a:	89a3      	ldrh	r3, [r4, #12]
 800741c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007420:	81a3      	strh	r3, [r4, #12]
 8007422:	e7ad      	b.n	8007380 <__sflush_r+0x1c>
 8007424:	690f      	ldr	r7, [r1, #16]
 8007426:	2f00      	cmp	r7, #0
 8007428:	d0a9      	beq.n	800737e <__sflush_r+0x1a>
 800742a:	0793      	lsls	r3, r2, #30
 800742c:	680e      	ldr	r6, [r1, #0]
 800742e:	bf08      	it	eq
 8007430:	694b      	ldreq	r3, [r1, #20]
 8007432:	600f      	str	r7, [r1, #0]
 8007434:	bf18      	it	ne
 8007436:	2300      	movne	r3, #0
 8007438:	eba6 0807 	sub.w	r8, r6, r7
 800743c:	608b      	str	r3, [r1, #8]
 800743e:	f1b8 0f00 	cmp.w	r8, #0
 8007442:	dd9c      	ble.n	800737e <__sflush_r+0x1a>
 8007444:	6a21      	ldr	r1, [r4, #32]
 8007446:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007448:	4643      	mov	r3, r8
 800744a:	463a      	mov	r2, r7
 800744c:	4628      	mov	r0, r5
 800744e:	47b0      	blx	r6
 8007450:	2800      	cmp	r0, #0
 8007452:	dc06      	bgt.n	8007462 <__sflush_r+0xfe>
 8007454:	89a3      	ldrh	r3, [r4, #12]
 8007456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800745a:	81a3      	strh	r3, [r4, #12]
 800745c:	f04f 30ff 	mov.w	r0, #4294967295
 8007460:	e78e      	b.n	8007380 <__sflush_r+0x1c>
 8007462:	4407      	add	r7, r0
 8007464:	eba8 0800 	sub.w	r8, r8, r0
 8007468:	e7e9      	b.n	800743e <__sflush_r+0xda>
 800746a:	bf00      	nop
 800746c:	20400001 	.word	0x20400001

08007470 <_fflush_r>:
 8007470:	b538      	push	{r3, r4, r5, lr}
 8007472:	690b      	ldr	r3, [r1, #16]
 8007474:	4605      	mov	r5, r0
 8007476:	460c      	mov	r4, r1
 8007478:	b913      	cbnz	r3, 8007480 <_fflush_r+0x10>
 800747a:	2500      	movs	r5, #0
 800747c:	4628      	mov	r0, r5
 800747e:	bd38      	pop	{r3, r4, r5, pc}
 8007480:	b118      	cbz	r0, 800748a <_fflush_r+0x1a>
 8007482:	6983      	ldr	r3, [r0, #24]
 8007484:	b90b      	cbnz	r3, 800748a <_fflush_r+0x1a>
 8007486:	f000 f887 	bl	8007598 <__sinit>
 800748a:	4b14      	ldr	r3, [pc, #80]	; (80074dc <_fflush_r+0x6c>)
 800748c:	429c      	cmp	r4, r3
 800748e:	d11b      	bne.n	80074c8 <_fflush_r+0x58>
 8007490:	686c      	ldr	r4, [r5, #4]
 8007492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d0ef      	beq.n	800747a <_fflush_r+0xa>
 800749a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800749c:	07d0      	lsls	r0, r2, #31
 800749e:	d404      	bmi.n	80074aa <_fflush_r+0x3a>
 80074a0:	0599      	lsls	r1, r3, #22
 80074a2:	d402      	bmi.n	80074aa <_fflush_r+0x3a>
 80074a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074a6:	f000 f915 	bl	80076d4 <__retarget_lock_acquire_recursive>
 80074aa:	4628      	mov	r0, r5
 80074ac:	4621      	mov	r1, r4
 80074ae:	f7ff ff59 	bl	8007364 <__sflush_r>
 80074b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074b4:	07da      	lsls	r2, r3, #31
 80074b6:	4605      	mov	r5, r0
 80074b8:	d4e0      	bmi.n	800747c <_fflush_r+0xc>
 80074ba:	89a3      	ldrh	r3, [r4, #12]
 80074bc:	059b      	lsls	r3, r3, #22
 80074be:	d4dd      	bmi.n	800747c <_fflush_r+0xc>
 80074c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074c2:	f000 f908 	bl	80076d6 <__retarget_lock_release_recursive>
 80074c6:	e7d9      	b.n	800747c <_fflush_r+0xc>
 80074c8:	4b05      	ldr	r3, [pc, #20]	; (80074e0 <_fflush_r+0x70>)
 80074ca:	429c      	cmp	r4, r3
 80074cc:	d101      	bne.n	80074d2 <_fflush_r+0x62>
 80074ce:	68ac      	ldr	r4, [r5, #8]
 80074d0:	e7df      	b.n	8007492 <_fflush_r+0x22>
 80074d2:	4b04      	ldr	r3, [pc, #16]	; (80074e4 <_fflush_r+0x74>)
 80074d4:	429c      	cmp	r4, r3
 80074d6:	bf08      	it	eq
 80074d8:	68ec      	ldreq	r4, [r5, #12]
 80074da:	e7da      	b.n	8007492 <_fflush_r+0x22>
 80074dc:	08008290 	.word	0x08008290
 80074e0:	080082b0 	.word	0x080082b0
 80074e4:	08008270 	.word	0x08008270

080074e8 <std>:
 80074e8:	2300      	movs	r3, #0
 80074ea:	b510      	push	{r4, lr}
 80074ec:	4604      	mov	r4, r0
 80074ee:	e9c0 3300 	strd	r3, r3, [r0]
 80074f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074f6:	6083      	str	r3, [r0, #8]
 80074f8:	8181      	strh	r1, [r0, #12]
 80074fa:	6643      	str	r3, [r0, #100]	; 0x64
 80074fc:	81c2      	strh	r2, [r0, #14]
 80074fe:	6183      	str	r3, [r0, #24]
 8007500:	4619      	mov	r1, r3
 8007502:	2208      	movs	r2, #8
 8007504:	305c      	adds	r0, #92	; 0x5c
 8007506:	f7ff fdd7 	bl	80070b8 <memset>
 800750a:	4b05      	ldr	r3, [pc, #20]	; (8007520 <std+0x38>)
 800750c:	6263      	str	r3, [r4, #36]	; 0x24
 800750e:	4b05      	ldr	r3, [pc, #20]	; (8007524 <std+0x3c>)
 8007510:	62a3      	str	r3, [r4, #40]	; 0x28
 8007512:	4b05      	ldr	r3, [pc, #20]	; (8007528 <std+0x40>)
 8007514:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007516:	4b05      	ldr	r3, [pc, #20]	; (800752c <std+0x44>)
 8007518:	6224      	str	r4, [r4, #32]
 800751a:	6323      	str	r3, [r4, #48]	; 0x30
 800751c:	bd10      	pop	{r4, pc}
 800751e:	bf00      	nop
 8007520:	08007f61 	.word	0x08007f61
 8007524:	08007f83 	.word	0x08007f83
 8007528:	08007fbb 	.word	0x08007fbb
 800752c:	08007fdf 	.word	0x08007fdf

08007530 <_cleanup_r>:
 8007530:	4901      	ldr	r1, [pc, #4]	; (8007538 <_cleanup_r+0x8>)
 8007532:	f000 b8af 	b.w	8007694 <_fwalk_reent>
 8007536:	bf00      	nop
 8007538:	08007471 	.word	0x08007471

0800753c <__sfmoreglue>:
 800753c:	b570      	push	{r4, r5, r6, lr}
 800753e:	2268      	movs	r2, #104	; 0x68
 8007540:	1e4d      	subs	r5, r1, #1
 8007542:	4355      	muls	r5, r2
 8007544:	460e      	mov	r6, r1
 8007546:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800754a:	f000 f997 	bl	800787c <_malloc_r>
 800754e:	4604      	mov	r4, r0
 8007550:	b140      	cbz	r0, 8007564 <__sfmoreglue+0x28>
 8007552:	2100      	movs	r1, #0
 8007554:	e9c0 1600 	strd	r1, r6, [r0]
 8007558:	300c      	adds	r0, #12
 800755a:	60a0      	str	r0, [r4, #8]
 800755c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007560:	f7ff fdaa 	bl	80070b8 <memset>
 8007564:	4620      	mov	r0, r4
 8007566:	bd70      	pop	{r4, r5, r6, pc}

08007568 <__sfp_lock_acquire>:
 8007568:	4801      	ldr	r0, [pc, #4]	; (8007570 <__sfp_lock_acquire+0x8>)
 800756a:	f000 b8b3 	b.w	80076d4 <__retarget_lock_acquire_recursive>
 800756e:	bf00      	nop
 8007570:	20002c0d 	.word	0x20002c0d

08007574 <__sfp_lock_release>:
 8007574:	4801      	ldr	r0, [pc, #4]	; (800757c <__sfp_lock_release+0x8>)
 8007576:	f000 b8ae 	b.w	80076d6 <__retarget_lock_release_recursive>
 800757a:	bf00      	nop
 800757c:	20002c0d 	.word	0x20002c0d

08007580 <__sinit_lock_acquire>:
 8007580:	4801      	ldr	r0, [pc, #4]	; (8007588 <__sinit_lock_acquire+0x8>)
 8007582:	f000 b8a7 	b.w	80076d4 <__retarget_lock_acquire_recursive>
 8007586:	bf00      	nop
 8007588:	20002c0e 	.word	0x20002c0e

0800758c <__sinit_lock_release>:
 800758c:	4801      	ldr	r0, [pc, #4]	; (8007594 <__sinit_lock_release+0x8>)
 800758e:	f000 b8a2 	b.w	80076d6 <__retarget_lock_release_recursive>
 8007592:	bf00      	nop
 8007594:	20002c0e 	.word	0x20002c0e

08007598 <__sinit>:
 8007598:	b510      	push	{r4, lr}
 800759a:	4604      	mov	r4, r0
 800759c:	f7ff fff0 	bl	8007580 <__sinit_lock_acquire>
 80075a0:	69a3      	ldr	r3, [r4, #24]
 80075a2:	b11b      	cbz	r3, 80075ac <__sinit+0x14>
 80075a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075a8:	f7ff bff0 	b.w	800758c <__sinit_lock_release>
 80075ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80075b0:	6523      	str	r3, [r4, #80]	; 0x50
 80075b2:	4b13      	ldr	r3, [pc, #76]	; (8007600 <__sinit+0x68>)
 80075b4:	4a13      	ldr	r2, [pc, #76]	; (8007604 <__sinit+0x6c>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80075ba:	42a3      	cmp	r3, r4
 80075bc:	bf04      	itt	eq
 80075be:	2301      	moveq	r3, #1
 80075c0:	61a3      	streq	r3, [r4, #24]
 80075c2:	4620      	mov	r0, r4
 80075c4:	f000 f820 	bl	8007608 <__sfp>
 80075c8:	6060      	str	r0, [r4, #4]
 80075ca:	4620      	mov	r0, r4
 80075cc:	f000 f81c 	bl	8007608 <__sfp>
 80075d0:	60a0      	str	r0, [r4, #8]
 80075d2:	4620      	mov	r0, r4
 80075d4:	f000 f818 	bl	8007608 <__sfp>
 80075d8:	2200      	movs	r2, #0
 80075da:	60e0      	str	r0, [r4, #12]
 80075dc:	2104      	movs	r1, #4
 80075de:	6860      	ldr	r0, [r4, #4]
 80075e0:	f7ff ff82 	bl	80074e8 <std>
 80075e4:	68a0      	ldr	r0, [r4, #8]
 80075e6:	2201      	movs	r2, #1
 80075e8:	2109      	movs	r1, #9
 80075ea:	f7ff ff7d 	bl	80074e8 <std>
 80075ee:	68e0      	ldr	r0, [r4, #12]
 80075f0:	2202      	movs	r2, #2
 80075f2:	2112      	movs	r1, #18
 80075f4:	f7ff ff78 	bl	80074e8 <std>
 80075f8:	2301      	movs	r3, #1
 80075fa:	61a3      	str	r3, [r4, #24]
 80075fc:	e7d2      	b.n	80075a4 <__sinit+0xc>
 80075fe:	bf00      	nop
 8007600:	0800826c 	.word	0x0800826c
 8007604:	08007531 	.word	0x08007531

08007608 <__sfp>:
 8007608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760a:	4607      	mov	r7, r0
 800760c:	f7ff ffac 	bl	8007568 <__sfp_lock_acquire>
 8007610:	4b1e      	ldr	r3, [pc, #120]	; (800768c <__sfp+0x84>)
 8007612:	681e      	ldr	r6, [r3, #0]
 8007614:	69b3      	ldr	r3, [r6, #24]
 8007616:	b913      	cbnz	r3, 800761e <__sfp+0x16>
 8007618:	4630      	mov	r0, r6
 800761a:	f7ff ffbd 	bl	8007598 <__sinit>
 800761e:	3648      	adds	r6, #72	; 0x48
 8007620:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007624:	3b01      	subs	r3, #1
 8007626:	d503      	bpl.n	8007630 <__sfp+0x28>
 8007628:	6833      	ldr	r3, [r6, #0]
 800762a:	b30b      	cbz	r3, 8007670 <__sfp+0x68>
 800762c:	6836      	ldr	r6, [r6, #0]
 800762e:	e7f7      	b.n	8007620 <__sfp+0x18>
 8007630:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007634:	b9d5      	cbnz	r5, 800766c <__sfp+0x64>
 8007636:	4b16      	ldr	r3, [pc, #88]	; (8007690 <__sfp+0x88>)
 8007638:	60e3      	str	r3, [r4, #12]
 800763a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800763e:	6665      	str	r5, [r4, #100]	; 0x64
 8007640:	f000 f847 	bl	80076d2 <__retarget_lock_init_recursive>
 8007644:	f7ff ff96 	bl	8007574 <__sfp_lock_release>
 8007648:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800764c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007650:	6025      	str	r5, [r4, #0]
 8007652:	61a5      	str	r5, [r4, #24]
 8007654:	2208      	movs	r2, #8
 8007656:	4629      	mov	r1, r5
 8007658:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800765c:	f7ff fd2c 	bl	80070b8 <memset>
 8007660:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007664:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007668:	4620      	mov	r0, r4
 800766a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800766c:	3468      	adds	r4, #104	; 0x68
 800766e:	e7d9      	b.n	8007624 <__sfp+0x1c>
 8007670:	2104      	movs	r1, #4
 8007672:	4638      	mov	r0, r7
 8007674:	f7ff ff62 	bl	800753c <__sfmoreglue>
 8007678:	4604      	mov	r4, r0
 800767a:	6030      	str	r0, [r6, #0]
 800767c:	2800      	cmp	r0, #0
 800767e:	d1d5      	bne.n	800762c <__sfp+0x24>
 8007680:	f7ff ff78 	bl	8007574 <__sfp_lock_release>
 8007684:	230c      	movs	r3, #12
 8007686:	603b      	str	r3, [r7, #0]
 8007688:	e7ee      	b.n	8007668 <__sfp+0x60>
 800768a:	bf00      	nop
 800768c:	0800826c 	.word	0x0800826c
 8007690:	ffff0001 	.word	0xffff0001

08007694 <_fwalk_reent>:
 8007694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007698:	4606      	mov	r6, r0
 800769a:	4688      	mov	r8, r1
 800769c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80076a0:	2700      	movs	r7, #0
 80076a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076a6:	f1b9 0901 	subs.w	r9, r9, #1
 80076aa:	d505      	bpl.n	80076b8 <_fwalk_reent+0x24>
 80076ac:	6824      	ldr	r4, [r4, #0]
 80076ae:	2c00      	cmp	r4, #0
 80076b0:	d1f7      	bne.n	80076a2 <_fwalk_reent+0xe>
 80076b2:	4638      	mov	r0, r7
 80076b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076b8:	89ab      	ldrh	r3, [r5, #12]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d907      	bls.n	80076ce <_fwalk_reent+0x3a>
 80076be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076c2:	3301      	adds	r3, #1
 80076c4:	d003      	beq.n	80076ce <_fwalk_reent+0x3a>
 80076c6:	4629      	mov	r1, r5
 80076c8:	4630      	mov	r0, r6
 80076ca:	47c0      	blx	r8
 80076cc:	4307      	orrs	r7, r0
 80076ce:	3568      	adds	r5, #104	; 0x68
 80076d0:	e7e9      	b.n	80076a6 <_fwalk_reent+0x12>

080076d2 <__retarget_lock_init_recursive>:
 80076d2:	4770      	bx	lr

080076d4 <__retarget_lock_acquire_recursive>:
 80076d4:	4770      	bx	lr

080076d6 <__retarget_lock_release_recursive>:
 80076d6:	4770      	bx	lr

080076d8 <__swhatbuf_r>:
 80076d8:	b570      	push	{r4, r5, r6, lr}
 80076da:	460e      	mov	r6, r1
 80076dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e0:	2900      	cmp	r1, #0
 80076e2:	b096      	sub	sp, #88	; 0x58
 80076e4:	4614      	mov	r4, r2
 80076e6:	461d      	mov	r5, r3
 80076e8:	da08      	bge.n	80076fc <__swhatbuf_r+0x24>
 80076ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80076ee:	2200      	movs	r2, #0
 80076f0:	602a      	str	r2, [r5, #0]
 80076f2:	061a      	lsls	r2, r3, #24
 80076f4:	d410      	bmi.n	8007718 <__swhatbuf_r+0x40>
 80076f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076fa:	e00e      	b.n	800771a <__swhatbuf_r+0x42>
 80076fc:	466a      	mov	r2, sp
 80076fe:	f000 fc95 	bl	800802c <_fstat_r>
 8007702:	2800      	cmp	r0, #0
 8007704:	dbf1      	blt.n	80076ea <__swhatbuf_r+0x12>
 8007706:	9a01      	ldr	r2, [sp, #4]
 8007708:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800770c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007710:	425a      	negs	r2, r3
 8007712:	415a      	adcs	r2, r3
 8007714:	602a      	str	r2, [r5, #0]
 8007716:	e7ee      	b.n	80076f6 <__swhatbuf_r+0x1e>
 8007718:	2340      	movs	r3, #64	; 0x40
 800771a:	2000      	movs	r0, #0
 800771c:	6023      	str	r3, [r4, #0]
 800771e:	b016      	add	sp, #88	; 0x58
 8007720:	bd70      	pop	{r4, r5, r6, pc}
	...

08007724 <__smakebuf_r>:
 8007724:	898b      	ldrh	r3, [r1, #12]
 8007726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007728:	079d      	lsls	r5, r3, #30
 800772a:	4606      	mov	r6, r0
 800772c:	460c      	mov	r4, r1
 800772e:	d507      	bpl.n	8007740 <__smakebuf_r+0x1c>
 8007730:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	6123      	str	r3, [r4, #16]
 8007738:	2301      	movs	r3, #1
 800773a:	6163      	str	r3, [r4, #20]
 800773c:	b002      	add	sp, #8
 800773e:	bd70      	pop	{r4, r5, r6, pc}
 8007740:	ab01      	add	r3, sp, #4
 8007742:	466a      	mov	r2, sp
 8007744:	f7ff ffc8 	bl	80076d8 <__swhatbuf_r>
 8007748:	9900      	ldr	r1, [sp, #0]
 800774a:	4605      	mov	r5, r0
 800774c:	4630      	mov	r0, r6
 800774e:	f000 f895 	bl	800787c <_malloc_r>
 8007752:	b948      	cbnz	r0, 8007768 <__smakebuf_r+0x44>
 8007754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007758:	059a      	lsls	r2, r3, #22
 800775a:	d4ef      	bmi.n	800773c <__smakebuf_r+0x18>
 800775c:	f023 0303 	bic.w	r3, r3, #3
 8007760:	f043 0302 	orr.w	r3, r3, #2
 8007764:	81a3      	strh	r3, [r4, #12]
 8007766:	e7e3      	b.n	8007730 <__smakebuf_r+0xc>
 8007768:	4b0d      	ldr	r3, [pc, #52]	; (80077a0 <__smakebuf_r+0x7c>)
 800776a:	62b3      	str	r3, [r6, #40]	; 0x28
 800776c:	89a3      	ldrh	r3, [r4, #12]
 800776e:	6020      	str	r0, [r4, #0]
 8007770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007774:	81a3      	strh	r3, [r4, #12]
 8007776:	9b00      	ldr	r3, [sp, #0]
 8007778:	6163      	str	r3, [r4, #20]
 800777a:	9b01      	ldr	r3, [sp, #4]
 800777c:	6120      	str	r0, [r4, #16]
 800777e:	b15b      	cbz	r3, 8007798 <__smakebuf_r+0x74>
 8007780:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007784:	4630      	mov	r0, r6
 8007786:	f000 fc63 	bl	8008050 <_isatty_r>
 800778a:	b128      	cbz	r0, 8007798 <__smakebuf_r+0x74>
 800778c:	89a3      	ldrh	r3, [r4, #12]
 800778e:	f023 0303 	bic.w	r3, r3, #3
 8007792:	f043 0301 	orr.w	r3, r3, #1
 8007796:	81a3      	strh	r3, [r4, #12]
 8007798:	89a0      	ldrh	r0, [r4, #12]
 800779a:	4305      	orrs	r5, r0
 800779c:	81a5      	strh	r5, [r4, #12]
 800779e:	e7cd      	b.n	800773c <__smakebuf_r+0x18>
 80077a0:	08007531 	.word	0x08007531

080077a4 <_free_r>:
 80077a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077a6:	2900      	cmp	r1, #0
 80077a8:	d044      	beq.n	8007834 <_free_r+0x90>
 80077aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077ae:	9001      	str	r0, [sp, #4]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f1a1 0404 	sub.w	r4, r1, #4
 80077b6:	bfb8      	it	lt
 80077b8:	18e4      	addlt	r4, r4, r3
 80077ba:	f000 fc6b 	bl	8008094 <__malloc_lock>
 80077be:	4a1e      	ldr	r2, [pc, #120]	; (8007838 <_free_r+0x94>)
 80077c0:	9801      	ldr	r0, [sp, #4]
 80077c2:	6813      	ldr	r3, [r2, #0]
 80077c4:	b933      	cbnz	r3, 80077d4 <_free_r+0x30>
 80077c6:	6063      	str	r3, [r4, #4]
 80077c8:	6014      	str	r4, [r2, #0]
 80077ca:	b003      	add	sp, #12
 80077cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077d0:	f000 bc66 	b.w	80080a0 <__malloc_unlock>
 80077d4:	42a3      	cmp	r3, r4
 80077d6:	d908      	bls.n	80077ea <_free_r+0x46>
 80077d8:	6825      	ldr	r5, [r4, #0]
 80077da:	1961      	adds	r1, r4, r5
 80077dc:	428b      	cmp	r3, r1
 80077de:	bf01      	itttt	eq
 80077e0:	6819      	ldreq	r1, [r3, #0]
 80077e2:	685b      	ldreq	r3, [r3, #4]
 80077e4:	1949      	addeq	r1, r1, r5
 80077e6:	6021      	streq	r1, [r4, #0]
 80077e8:	e7ed      	b.n	80077c6 <_free_r+0x22>
 80077ea:	461a      	mov	r2, r3
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	b10b      	cbz	r3, 80077f4 <_free_r+0x50>
 80077f0:	42a3      	cmp	r3, r4
 80077f2:	d9fa      	bls.n	80077ea <_free_r+0x46>
 80077f4:	6811      	ldr	r1, [r2, #0]
 80077f6:	1855      	adds	r5, r2, r1
 80077f8:	42a5      	cmp	r5, r4
 80077fa:	d10b      	bne.n	8007814 <_free_r+0x70>
 80077fc:	6824      	ldr	r4, [r4, #0]
 80077fe:	4421      	add	r1, r4
 8007800:	1854      	adds	r4, r2, r1
 8007802:	42a3      	cmp	r3, r4
 8007804:	6011      	str	r1, [r2, #0]
 8007806:	d1e0      	bne.n	80077ca <_free_r+0x26>
 8007808:	681c      	ldr	r4, [r3, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	6053      	str	r3, [r2, #4]
 800780e:	4421      	add	r1, r4
 8007810:	6011      	str	r1, [r2, #0]
 8007812:	e7da      	b.n	80077ca <_free_r+0x26>
 8007814:	d902      	bls.n	800781c <_free_r+0x78>
 8007816:	230c      	movs	r3, #12
 8007818:	6003      	str	r3, [r0, #0]
 800781a:	e7d6      	b.n	80077ca <_free_r+0x26>
 800781c:	6825      	ldr	r5, [r4, #0]
 800781e:	1961      	adds	r1, r4, r5
 8007820:	428b      	cmp	r3, r1
 8007822:	bf04      	itt	eq
 8007824:	6819      	ldreq	r1, [r3, #0]
 8007826:	685b      	ldreq	r3, [r3, #4]
 8007828:	6063      	str	r3, [r4, #4]
 800782a:	bf04      	itt	eq
 800782c:	1949      	addeq	r1, r1, r5
 800782e:	6021      	streq	r1, [r4, #0]
 8007830:	6054      	str	r4, [r2, #4]
 8007832:	e7ca      	b.n	80077ca <_free_r+0x26>
 8007834:	b003      	add	sp, #12
 8007836:	bd30      	pop	{r4, r5, pc}
 8007838:	20002c10 	.word	0x20002c10

0800783c <sbrk_aligned>:
 800783c:	b570      	push	{r4, r5, r6, lr}
 800783e:	4e0e      	ldr	r6, [pc, #56]	; (8007878 <sbrk_aligned+0x3c>)
 8007840:	460c      	mov	r4, r1
 8007842:	6831      	ldr	r1, [r6, #0]
 8007844:	4605      	mov	r5, r0
 8007846:	b911      	cbnz	r1, 800784e <sbrk_aligned+0x12>
 8007848:	f000 fb7a 	bl	8007f40 <_sbrk_r>
 800784c:	6030      	str	r0, [r6, #0]
 800784e:	4621      	mov	r1, r4
 8007850:	4628      	mov	r0, r5
 8007852:	f000 fb75 	bl	8007f40 <_sbrk_r>
 8007856:	1c43      	adds	r3, r0, #1
 8007858:	d00a      	beq.n	8007870 <sbrk_aligned+0x34>
 800785a:	1cc4      	adds	r4, r0, #3
 800785c:	f024 0403 	bic.w	r4, r4, #3
 8007860:	42a0      	cmp	r0, r4
 8007862:	d007      	beq.n	8007874 <sbrk_aligned+0x38>
 8007864:	1a21      	subs	r1, r4, r0
 8007866:	4628      	mov	r0, r5
 8007868:	f000 fb6a 	bl	8007f40 <_sbrk_r>
 800786c:	3001      	adds	r0, #1
 800786e:	d101      	bne.n	8007874 <sbrk_aligned+0x38>
 8007870:	f04f 34ff 	mov.w	r4, #4294967295
 8007874:	4620      	mov	r0, r4
 8007876:	bd70      	pop	{r4, r5, r6, pc}
 8007878:	20002c14 	.word	0x20002c14

0800787c <_malloc_r>:
 800787c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007880:	1ccd      	adds	r5, r1, #3
 8007882:	f025 0503 	bic.w	r5, r5, #3
 8007886:	3508      	adds	r5, #8
 8007888:	2d0c      	cmp	r5, #12
 800788a:	bf38      	it	cc
 800788c:	250c      	movcc	r5, #12
 800788e:	2d00      	cmp	r5, #0
 8007890:	4607      	mov	r7, r0
 8007892:	db01      	blt.n	8007898 <_malloc_r+0x1c>
 8007894:	42a9      	cmp	r1, r5
 8007896:	d905      	bls.n	80078a4 <_malloc_r+0x28>
 8007898:	230c      	movs	r3, #12
 800789a:	603b      	str	r3, [r7, #0]
 800789c:	2600      	movs	r6, #0
 800789e:	4630      	mov	r0, r6
 80078a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078a4:	4e2e      	ldr	r6, [pc, #184]	; (8007960 <_malloc_r+0xe4>)
 80078a6:	f000 fbf5 	bl	8008094 <__malloc_lock>
 80078aa:	6833      	ldr	r3, [r6, #0]
 80078ac:	461c      	mov	r4, r3
 80078ae:	bb34      	cbnz	r4, 80078fe <_malloc_r+0x82>
 80078b0:	4629      	mov	r1, r5
 80078b2:	4638      	mov	r0, r7
 80078b4:	f7ff ffc2 	bl	800783c <sbrk_aligned>
 80078b8:	1c43      	adds	r3, r0, #1
 80078ba:	4604      	mov	r4, r0
 80078bc:	d14d      	bne.n	800795a <_malloc_r+0xde>
 80078be:	6834      	ldr	r4, [r6, #0]
 80078c0:	4626      	mov	r6, r4
 80078c2:	2e00      	cmp	r6, #0
 80078c4:	d140      	bne.n	8007948 <_malloc_r+0xcc>
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	4631      	mov	r1, r6
 80078ca:	4638      	mov	r0, r7
 80078cc:	eb04 0803 	add.w	r8, r4, r3
 80078d0:	f000 fb36 	bl	8007f40 <_sbrk_r>
 80078d4:	4580      	cmp	r8, r0
 80078d6:	d13a      	bne.n	800794e <_malloc_r+0xd2>
 80078d8:	6821      	ldr	r1, [r4, #0]
 80078da:	3503      	adds	r5, #3
 80078dc:	1a6d      	subs	r5, r5, r1
 80078de:	f025 0503 	bic.w	r5, r5, #3
 80078e2:	3508      	adds	r5, #8
 80078e4:	2d0c      	cmp	r5, #12
 80078e6:	bf38      	it	cc
 80078e8:	250c      	movcc	r5, #12
 80078ea:	4629      	mov	r1, r5
 80078ec:	4638      	mov	r0, r7
 80078ee:	f7ff ffa5 	bl	800783c <sbrk_aligned>
 80078f2:	3001      	adds	r0, #1
 80078f4:	d02b      	beq.n	800794e <_malloc_r+0xd2>
 80078f6:	6823      	ldr	r3, [r4, #0]
 80078f8:	442b      	add	r3, r5
 80078fa:	6023      	str	r3, [r4, #0]
 80078fc:	e00e      	b.n	800791c <_malloc_r+0xa0>
 80078fe:	6822      	ldr	r2, [r4, #0]
 8007900:	1b52      	subs	r2, r2, r5
 8007902:	d41e      	bmi.n	8007942 <_malloc_r+0xc6>
 8007904:	2a0b      	cmp	r2, #11
 8007906:	d916      	bls.n	8007936 <_malloc_r+0xba>
 8007908:	1961      	adds	r1, r4, r5
 800790a:	42a3      	cmp	r3, r4
 800790c:	6025      	str	r5, [r4, #0]
 800790e:	bf18      	it	ne
 8007910:	6059      	strne	r1, [r3, #4]
 8007912:	6863      	ldr	r3, [r4, #4]
 8007914:	bf08      	it	eq
 8007916:	6031      	streq	r1, [r6, #0]
 8007918:	5162      	str	r2, [r4, r5]
 800791a:	604b      	str	r3, [r1, #4]
 800791c:	4638      	mov	r0, r7
 800791e:	f104 060b 	add.w	r6, r4, #11
 8007922:	f000 fbbd 	bl	80080a0 <__malloc_unlock>
 8007926:	f026 0607 	bic.w	r6, r6, #7
 800792a:	1d23      	adds	r3, r4, #4
 800792c:	1af2      	subs	r2, r6, r3
 800792e:	d0b6      	beq.n	800789e <_malloc_r+0x22>
 8007930:	1b9b      	subs	r3, r3, r6
 8007932:	50a3      	str	r3, [r4, r2]
 8007934:	e7b3      	b.n	800789e <_malloc_r+0x22>
 8007936:	6862      	ldr	r2, [r4, #4]
 8007938:	42a3      	cmp	r3, r4
 800793a:	bf0c      	ite	eq
 800793c:	6032      	streq	r2, [r6, #0]
 800793e:	605a      	strne	r2, [r3, #4]
 8007940:	e7ec      	b.n	800791c <_malloc_r+0xa0>
 8007942:	4623      	mov	r3, r4
 8007944:	6864      	ldr	r4, [r4, #4]
 8007946:	e7b2      	b.n	80078ae <_malloc_r+0x32>
 8007948:	4634      	mov	r4, r6
 800794a:	6876      	ldr	r6, [r6, #4]
 800794c:	e7b9      	b.n	80078c2 <_malloc_r+0x46>
 800794e:	230c      	movs	r3, #12
 8007950:	603b      	str	r3, [r7, #0]
 8007952:	4638      	mov	r0, r7
 8007954:	f000 fba4 	bl	80080a0 <__malloc_unlock>
 8007958:	e7a1      	b.n	800789e <_malloc_r+0x22>
 800795a:	6025      	str	r5, [r4, #0]
 800795c:	e7de      	b.n	800791c <_malloc_r+0xa0>
 800795e:	bf00      	nop
 8007960:	20002c10 	.word	0x20002c10

08007964 <__sfputc_r>:
 8007964:	6893      	ldr	r3, [r2, #8]
 8007966:	3b01      	subs	r3, #1
 8007968:	2b00      	cmp	r3, #0
 800796a:	b410      	push	{r4}
 800796c:	6093      	str	r3, [r2, #8]
 800796e:	da08      	bge.n	8007982 <__sfputc_r+0x1e>
 8007970:	6994      	ldr	r4, [r2, #24]
 8007972:	42a3      	cmp	r3, r4
 8007974:	db01      	blt.n	800797a <__sfputc_r+0x16>
 8007976:	290a      	cmp	r1, #10
 8007978:	d103      	bne.n	8007982 <__sfputc_r+0x1e>
 800797a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800797e:	f7ff bc31 	b.w	80071e4 <__swbuf_r>
 8007982:	6813      	ldr	r3, [r2, #0]
 8007984:	1c58      	adds	r0, r3, #1
 8007986:	6010      	str	r0, [r2, #0]
 8007988:	7019      	strb	r1, [r3, #0]
 800798a:	4608      	mov	r0, r1
 800798c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007990:	4770      	bx	lr

08007992 <__sfputs_r>:
 8007992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007994:	4606      	mov	r6, r0
 8007996:	460f      	mov	r7, r1
 8007998:	4614      	mov	r4, r2
 800799a:	18d5      	adds	r5, r2, r3
 800799c:	42ac      	cmp	r4, r5
 800799e:	d101      	bne.n	80079a4 <__sfputs_r+0x12>
 80079a0:	2000      	movs	r0, #0
 80079a2:	e007      	b.n	80079b4 <__sfputs_r+0x22>
 80079a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079a8:	463a      	mov	r2, r7
 80079aa:	4630      	mov	r0, r6
 80079ac:	f7ff ffda 	bl	8007964 <__sfputc_r>
 80079b0:	1c43      	adds	r3, r0, #1
 80079b2:	d1f3      	bne.n	800799c <__sfputs_r+0xa>
 80079b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079b8 <_vfiprintf_r>:
 80079b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079bc:	460d      	mov	r5, r1
 80079be:	b09d      	sub	sp, #116	; 0x74
 80079c0:	4614      	mov	r4, r2
 80079c2:	4698      	mov	r8, r3
 80079c4:	4606      	mov	r6, r0
 80079c6:	b118      	cbz	r0, 80079d0 <_vfiprintf_r+0x18>
 80079c8:	6983      	ldr	r3, [r0, #24]
 80079ca:	b90b      	cbnz	r3, 80079d0 <_vfiprintf_r+0x18>
 80079cc:	f7ff fde4 	bl	8007598 <__sinit>
 80079d0:	4b89      	ldr	r3, [pc, #548]	; (8007bf8 <_vfiprintf_r+0x240>)
 80079d2:	429d      	cmp	r5, r3
 80079d4:	d11b      	bne.n	8007a0e <_vfiprintf_r+0x56>
 80079d6:	6875      	ldr	r5, [r6, #4]
 80079d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079da:	07d9      	lsls	r1, r3, #31
 80079dc:	d405      	bmi.n	80079ea <_vfiprintf_r+0x32>
 80079de:	89ab      	ldrh	r3, [r5, #12]
 80079e0:	059a      	lsls	r2, r3, #22
 80079e2:	d402      	bmi.n	80079ea <_vfiprintf_r+0x32>
 80079e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079e6:	f7ff fe75 	bl	80076d4 <__retarget_lock_acquire_recursive>
 80079ea:	89ab      	ldrh	r3, [r5, #12]
 80079ec:	071b      	lsls	r3, r3, #28
 80079ee:	d501      	bpl.n	80079f4 <_vfiprintf_r+0x3c>
 80079f0:	692b      	ldr	r3, [r5, #16]
 80079f2:	b9eb      	cbnz	r3, 8007a30 <_vfiprintf_r+0x78>
 80079f4:	4629      	mov	r1, r5
 80079f6:	4630      	mov	r0, r6
 80079f8:	f7ff fc46 	bl	8007288 <__swsetup_r>
 80079fc:	b1c0      	cbz	r0, 8007a30 <_vfiprintf_r+0x78>
 80079fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a00:	07dc      	lsls	r4, r3, #31
 8007a02:	d50e      	bpl.n	8007a22 <_vfiprintf_r+0x6a>
 8007a04:	f04f 30ff 	mov.w	r0, #4294967295
 8007a08:	b01d      	add	sp, #116	; 0x74
 8007a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a0e:	4b7b      	ldr	r3, [pc, #492]	; (8007bfc <_vfiprintf_r+0x244>)
 8007a10:	429d      	cmp	r5, r3
 8007a12:	d101      	bne.n	8007a18 <_vfiprintf_r+0x60>
 8007a14:	68b5      	ldr	r5, [r6, #8]
 8007a16:	e7df      	b.n	80079d8 <_vfiprintf_r+0x20>
 8007a18:	4b79      	ldr	r3, [pc, #484]	; (8007c00 <_vfiprintf_r+0x248>)
 8007a1a:	429d      	cmp	r5, r3
 8007a1c:	bf08      	it	eq
 8007a1e:	68f5      	ldreq	r5, [r6, #12]
 8007a20:	e7da      	b.n	80079d8 <_vfiprintf_r+0x20>
 8007a22:	89ab      	ldrh	r3, [r5, #12]
 8007a24:	0598      	lsls	r0, r3, #22
 8007a26:	d4ed      	bmi.n	8007a04 <_vfiprintf_r+0x4c>
 8007a28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a2a:	f7ff fe54 	bl	80076d6 <__retarget_lock_release_recursive>
 8007a2e:	e7e9      	b.n	8007a04 <_vfiprintf_r+0x4c>
 8007a30:	2300      	movs	r3, #0
 8007a32:	9309      	str	r3, [sp, #36]	; 0x24
 8007a34:	2320      	movs	r3, #32
 8007a36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a3e:	2330      	movs	r3, #48	; 0x30
 8007a40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007c04 <_vfiprintf_r+0x24c>
 8007a44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a48:	f04f 0901 	mov.w	r9, #1
 8007a4c:	4623      	mov	r3, r4
 8007a4e:	469a      	mov	sl, r3
 8007a50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a54:	b10a      	cbz	r2, 8007a5a <_vfiprintf_r+0xa2>
 8007a56:	2a25      	cmp	r2, #37	; 0x25
 8007a58:	d1f9      	bne.n	8007a4e <_vfiprintf_r+0x96>
 8007a5a:	ebba 0b04 	subs.w	fp, sl, r4
 8007a5e:	d00b      	beq.n	8007a78 <_vfiprintf_r+0xc0>
 8007a60:	465b      	mov	r3, fp
 8007a62:	4622      	mov	r2, r4
 8007a64:	4629      	mov	r1, r5
 8007a66:	4630      	mov	r0, r6
 8007a68:	f7ff ff93 	bl	8007992 <__sfputs_r>
 8007a6c:	3001      	adds	r0, #1
 8007a6e:	f000 80aa 	beq.w	8007bc6 <_vfiprintf_r+0x20e>
 8007a72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a74:	445a      	add	r2, fp
 8007a76:	9209      	str	r2, [sp, #36]	; 0x24
 8007a78:	f89a 3000 	ldrb.w	r3, [sl]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 80a2 	beq.w	8007bc6 <_vfiprintf_r+0x20e>
 8007a82:	2300      	movs	r3, #0
 8007a84:	f04f 32ff 	mov.w	r2, #4294967295
 8007a88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a8c:	f10a 0a01 	add.w	sl, sl, #1
 8007a90:	9304      	str	r3, [sp, #16]
 8007a92:	9307      	str	r3, [sp, #28]
 8007a94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a98:	931a      	str	r3, [sp, #104]	; 0x68
 8007a9a:	4654      	mov	r4, sl
 8007a9c:	2205      	movs	r2, #5
 8007a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aa2:	4858      	ldr	r0, [pc, #352]	; (8007c04 <_vfiprintf_r+0x24c>)
 8007aa4:	f7f8 fbcc 	bl	8000240 <memchr>
 8007aa8:	9a04      	ldr	r2, [sp, #16]
 8007aaa:	b9d8      	cbnz	r0, 8007ae4 <_vfiprintf_r+0x12c>
 8007aac:	06d1      	lsls	r1, r2, #27
 8007aae:	bf44      	itt	mi
 8007ab0:	2320      	movmi	r3, #32
 8007ab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ab6:	0713      	lsls	r3, r2, #28
 8007ab8:	bf44      	itt	mi
 8007aba:	232b      	movmi	r3, #43	; 0x2b
 8007abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ac0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ac4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ac6:	d015      	beq.n	8007af4 <_vfiprintf_r+0x13c>
 8007ac8:	9a07      	ldr	r2, [sp, #28]
 8007aca:	4654      	mov	r4, sl
 8007acc:	2000      	movs	r0, #0
 8007ace:	f04f 0c0a 	mov.w	ip, #10
 8007ad2:	4621      	mov	r1, r4
 8007ad4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ad8:	3b30      	subs	r3, #48	; 0x30
 8007ada:	2b09      	cmp	r3, #9
 8007adc:	d94e      	bls.n	8007b7c <_vfiprintf_r+0x1c4>
 8007ade:	b1b0      	cbz	r0, 8007b0e <_vfiprintf_r+0x156>
 8007ae0:	9207      	str	r2, [sp, #28]
 8007ae2:	e014      	b.n	8007b0e <_vfiprintf_r+0x156>
 8007ae4:	eba0 0308 	sub.w	r3, r0, r8
 8007ae8:	fa09 f303 	lsl.w	r3, r9, r3
 8007aec:	4313      	orrs	r3, r2
 8007aee:	9304      	str	r3, [sp, #16]
 8007af0:	46a2      	mov	sl, r4
 8007af2:	e7d2      	b.n	8007a9a <_vfiprintf_r+0xe2>
 8007af4:	9b03      	ldr	r3, [sp, #12]
 8007af6:	1d19      	adds	r1, r3, #4
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	9103      	str	r1, [sp, #12]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	bfbb      	ittet	lt
 8007b00:	425b      	neglt	r3, r3
 8007b02:	f042 0202 	orrlt.w	r2, r2, #2
 8007b06:	9307      	strge	r3, [sp, #28]
 8007b08:	9307      	strlt	r3, [sp, #28]
 8007b0a:	bfb8      	it	lt
 8007b0c:	9204      	strlt	r2, [sp, #16]
 8007b0e:	7823      	ldrb	r3, [r4, #0]
 8007b10:	2b2e      	cmp	r3, #46	; 0x2e
 8007b12:	d10c      	bne.n	8007b2e <_vfiprintf_r+0x176>
 8007b14:	7863      	ldrb	r3, [r4, #1]
 8007b16:	2b2a      	cmp	r3, #42	; 0x2a
 8007b18:	d135      	bne.n	8007b86 <_vfiprintf_r+0x1ce>
 8007b1a:	9b03      	ldr	r3, [sp, #12]
 8007b1c:	1d1a      	adds	r2, r3, #4
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	9203      	str	r2, [sp, #12]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	bfb8      	it	lt
 8007b26:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b2a:	3402      	adds	r4, #2
 8007b2c:	9305      	str	r3, [sp, #20]
 8007b2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c14 <_vfiprintf_r+0x25c>
 8007b32:	7821      	ldrb	r1, [r4, #0]
 8007b34:	2203      	movs	r2, #3
 8007b36:	4650      	mov	r0, sl
 8007b38:	f7f8 fb82 	bl	8000240 <memchr>
 8007b3c:	b140      	cbz	r0, 8007b50 <_vfiprintf_r+0x198>
 8007b3e:	2340      	movs	r3, #64	; 0x40
 8007b40:	eba0 000a 	sub.w	r0, r0, sl
 8007b44:	fa03 f000 	lsl.w	r0, r3, r0
 8007b48:	9b04      	ldr	r3, [sp, #16]
 8007b4a:	4303      	orrs	r3, r0
 8007b4c:	3401      	adds	r4, #1
 8007b4e:	9304      	str	r3, [sp, #16]
 8007b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b54:	482c      	ldr	r0, [pc, #176]	; (8007c08 <_vfiprintf_r+0x250>)
 8007b56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b5a:	2206      	movs	r2, #6
 8007b5c:	f7f8 fb70 	bl	8000240 <memchr>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	d03f      	beq.n	8007be4 <_vfiprintf_r+0x22c>
 8007b64:	4b29      	ldr	r3, [pc, #164]	; (8007c0c <_vfiprintf_r+0x254>)
 8007b66:	bb1b      	cbnz	r3, 8007bb0 <_vfiprintf_r+0x1f8>
 8007b68:	9b03      	ldr	r3, [sp, #12]
 8007b6a:	3307      	adds	r3, #7
 8007b6c:	f023 0307 	bic.w	r3, r3, #7
 8007b70:	3308      	adds	r3, #8
 8007b72:	9303      	str	r3, [sp, #12]
 8007b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b76:	443b      	add	r3, r7
 8007b78:	9309      	str	r3, [sp, #36]	; 0x24
 8007b7a:	e767      	b.n	8007a4c <_vfiprintf_r+0x94>
 8007b7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b80:	460c      	mov	r4, r1
 8007b82:	2001      	movs	r0, #1
 8007b84:	e7a5      	b.n	8007ad2 <_vfiprintf_r+0x11a>
 8007b86:	2300      	movs	r3, #0
 8007b88:	3401      	adds	r4, #1
 8007b8a:	9305      	str	r3, [sp, #20]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	f04f 0c0a 	mov.w	ip, #10
 8007b92:	4620      	mov	r0, r4
 8007b94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b98:	3a30      	subs	r2, #48	; 0x30
 8007b9a:	2a09      	cmp	r2, #9
 8007b9c:	d903      	bls.n	8007ba6 <_vfiprintf_r+0x1ee>
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d0c5      	beq.n	8007b2e <_vfiprintf_r+0x176>
 8007ba2:	9105      	str	r1, [sp, #20]
 8007ba4:	e7c3      	b.n	8007b2e <_vfiprintf_r+0x176>
 8007ba6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007baa:	4604      	mov	r4, r0
 8007bac:	2301      	movs	r3, #1
 8007bae:	e7f0      	b.n	8007b92 <_vfiprintf_r+0x1da>
 8007bb0:	ab03      	add	r3, sp, #12
 8007bb2:	9300      	str	r3, [sp, #0]
 8007bb4:	462a      	mov	r2, r5
 8007bb6:	4b16      	ldr	r3, [pc, #88]	; (8007c10 <_vfiprintf_r+0x258>)
 8007bb8:	a904      	add	r1, sp, #16
 8007bba:	4630      	mov	r0, r6
 8007bbc:	f3af 8000 	nop.w
 8007bc0:	4607      	mov	r7, r0
 8007bc2:	1c78      	adds	r0, r7, #1
 8007bc4:	d1d6      	bne.n	8007b74 <_vfiprintf_r+0x1bc>
 8007bc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bc8:	07d9      	lsls	r1, r3, #31
 8007bca:	d405      	bmi.n	8007bd8 <_vfiprintf_r+0x220>
 8007bcc:	89ab      	ldrh	r3, [r5, #12]
 8007bce:	059a      	lsls	r2, r3, #22
 8007bd0:	d402      	bmi.n	8007bd8 <_vfiprintf_r+0x220>
 8007bd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bd4:	f7ff fd7f 	bl	80076d6 <__retarget_lock_release_recursive>
 8007bd8:	89ab      	ldrh	r3, [r5, #12]
 8007bda:	065b      	lsls	r3, r3, #25
 8007bdc:	f53f af12 	bmi.w	8007a04 <_vfiprintf_r+0x4c>
 8007be0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007be2:	e711      	b.n	8007a08 <_vfiprintf_r+0x50>
 8007be4:	ab03      	add	r3, sp, #12
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	462a      	mov	r2, r5
 8007bea:	4b09      	ldr	r3, [pc, #36]	; (8007c10 <_vfiprintf_r+0x258>)
 8007bec:	a904      	add	r1, sp, #16
 8007bee:	4630      	mov	r0, r6
 8007bf0:	f000 f880 	bl	8007cf4 <_printf_i>
 8007bf4:	e7e4      	b.n	8007bc0 <_vfiprintf_r+0x208>
 8007bf6:	bf00      	nop
 8007bf8:	08008290 	.word	0x08008290
 8007bfc:	080082b0 	.word	0x080082b0
 8007c00:	08008270 	.word	0x08008270
 8007c04:	080082d0 	.word	0x080082d0
 8007c08:	080082da 	.word	0x080082da
 8007c0c:	00000000 	.word	0x00000000
 8007c10:	08007993 	.word	0x08007993
 8007c14:	080082d6 	.word	0x080082d6

08007c18 <_printf_common>:
 8007c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c1c:	4616      	mov	r6, r2
 8007c1e:	4699      	mov	r9, r3
 8007c20:	688a      	ldr	r2, [r1, #8]
 8007c22:	690b      	ldr	r3, [r1, #16]
 8007c24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	bfb8      	it	lt
 8007c2c:	4613      	movlt	r3, r2
 8007c2e:	6033      	str	r3, [r6, #0]
 8007c30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c34:	4607      	mov	r7, r0
 8007c36:	460c      	mov	r4, r1
 8007c38:	b10a      	cbz	r2, 8007c3e <_printf_common+0x26>
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	6033      	str	r3, [r6, #0]
 8007c3e:	6823      	ldr	r3, [r4, #0]
 8007c40:	0699      	lsls	r1, r3, #26
 8007c42:	bf42      	ittt	mi
 8007c44:	6833      	ldrmi	r3, [r6, #0]
 8007c46:	3302      	addmi	r3, #2
 8007c48:	6033      	strmi	r3, [r6, #0]
 8007c4a:	6825      	ldr	r5, [r4, #0]
 8007c4c:	f015 0506 	ands.w	r5, r5, #6
 8007c50:	d106      	bne.n	8007c60 <_printf_common+0x48>
 8007c52:	f104 0a19 	add.w	sl, r4, #25
 8007c56:	68e3      	ldr	r3, [r4, #12]
 8007c58:	6832      	ldr	r2, [r6, #0]
 8007c5a:	1a9b      	subs	r3, r3, r2
 8007c5c:	42ab      	cmp	r3, r5
 8007c5e:	dc26      	bgt.n	8007cae <_printf_common+0x96>
 8007c60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c64:	1e13      	subs	r3, r2, #0
 8007c66:	6822      	ldr	r2, [r4, #0]
 8007c68:	bf18      	it	ne
 8007c6a:	2301      	movne	r3, #1
 8007c6c:	0692      	lsls	r2, r2, #26
 8007c6e:	d42b      	bmi.n	8007cc8 <_printf_common+0xb0>
 8007c70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c74:	4649      	mov	r1, r9
 8007c76:	4638      	mov	r0, r7
 8007c78:	47c0      	blx	r8
 8007c7a:	3001      	adds	r0, #1
 8007c7c:	d01e      	beq.n	8007cbc <_printf_common+0xa4>
 8007c7e:	6823      	ldr	r3, [r4, #0]
 8007c80:	68e5      	ldr	r5, [r4, #12]
 8007c82:	6832      	ldr	r2, [r6, #0]
 8007c84:	f003 0306 	and.w	r3, r3, #6
 8007c88:	2b04      	cmp	r3, #4
 8007c8a:	bf08      	it	eq
 8007c8c:	1aad      	subeq	r5, r5, r2
 8007c8e:	68a3      	ldr	r3, [r4, #8]
 8007c90:	6922      	ldr	r2, [r4, #16]
 8007c92:	bf0c      	ite	eq
 8007c94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c98:	2500      	movne	r5, #0
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	bfc4      	itt	gt
 8007c9e:	1a9b      	subgt	r3, r3, r2
 8007ca0:	18ed      	addgt	r5, r5, r3
 8007ca2:	2600      	movs	r6, #0
 8007ca4:	341a      	adds	r4, #26
 8007ca6:	42b5      	cmp	r5, r6
 8007ca8:	d11a      	bne.n	8007ce0 <_printf_common+0xc8>
 8007caa:	2000      	movs	r0, #0
 8007cac:	e008      	b.n	8007cc0 <_printf_common+0xa8>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	4652      	mov	r2, sl
 8007cb2:	4649      	mov	r1, r9
 8007cb4:	4638      	mov	r0, r7
 8007cb6:	47c0      	blx	r8
 8007cb8:	3001      	adds	r0, #1
 8007cba:	d103      	bne.n	8007cc4 <_printf_common+0xac>
 8007cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cc4:	3501      	adds	r5, #1
 8007cc6:	e7c6      	b.n	8007c56 <_printf_common+0x3e>
 8007cc8:	18e1      	adds	r1, r4, r3
 8007cca:	1c5a      	adds	r2, r3, #1
 8007ccc:	2030      	movs	r0, #48	; 0x30
 8007cce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cd2:	4422      	add	r2, r4
 8007cd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cdc:	3302      	adds	r3, #2
 8007cde:	e7c7      	b.n	8007c70 <_printf_common+0x58>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	4622      	mov	r2, r4
 8007ce4:	4649      	mov	r1, r9
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	47c0      	blx	r8
 8007cea:	3001      	adds	r0, #1
 8007cec:	d0e6      	beq.n	8007cbc <_printf_common+0xa4>
 8007cee:	3601      	adds	r6, #1
 8007cf0:	e7d9      	b.n	8007ca6 <_printf_common+0x8e>
	...

08007cf4 <_printf_i>:
 8007cf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf8:	7e0f      	ldrb	r7, [r1, #24]
 8007cfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007cfc:	2f78      	cmp	r7, #120	; 0x78
 8007cfe:	4691      	mov	r9, r2
 8007d00:	4680      	mov	r8, r0
 8007d02:	460c      	mov	r4, r1
 8007d04:	469a      	mov	sl, r3
 8007d06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d0a:	d807      	bhi.n	8007d1c <_printf_i+0x28>
 8007d0c:	2f62      	cmp	r7, #98	; 0x62
 8007d0e:	d80a      	bhi.n	8007d26 <_printf_i+0x32>
 8007d10:	2f00      	cmp	r7, #0
 8007d12:	f000 80d8 	beq.w	8007ec6 <_printf_i+0x1d2>
 8007d16:	2f58      	cmp	r7, #88	; 0x58
 8007d18:	f000 80a3 	beq.w	8007e62 <_printf_i+0x16e>
 8007d1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d24:	e03a      	b.n	8007d9c <_printf_i+0xa8>
 8007d26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d2a:	2b15      	cmp	r3, #21
 8007d2c:	d8f6      	bhi.n	8007d1c <_printf_i+0x28>
 8007d2e:	a101      	add	r1, pc, #4	; (adr r1, 8007d34 <_printf_i+0x40>)
 8007d30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d34:	08007d8d 	.word	0x08007d8d
 8007d38:	08007da1 	.word	0x08007da1
 8007d3c:	08007d1d 	.word	0x08007d1d
 8007d40:	08007d1d 	.word	0x08007d1d
 8007d44:	08007d1d 	.word	0x08007d1d
 8007d48:	08007d1d 	.word	0x08007d1d
 8007d4c:	08007da1 	.word	0x08007da1
 8007d50:	08007d1d 	.word	0x08007d1d
 8007d54:	08007d1d 	.word	0x08007d1d
 8007d58:	08007d1d 	.word	0x08007d1d
 8007d5c:	08007d1d 	.word	0x08007d1d
 8007d60:	08007ead 	.word	0x08007ead
 8007d64:	08007dd1 	.word	0x08007dd1
 8007d68:	08007e8f 	.word	0x08007e8f
 8007d6c:	08007d1d 	.word	0x08007d1d
 8007d70:	08007d1d 	.word	0x08007d1d
 8007d74:	08007ecf 	.word	0x08007ecf
 8007d78:	08007d1d 	.word	0x08007d1d
 8007d7c:	08007dd1 	.word	0x08007dd1
 8007d80:	08007d1d 	.word	0x08007d1d
 8007d84:	08007d1d 	.word	0x08007d1d
 8007d88:	08007e97 	.word	0x08007e97
 8007d8c:	682b      	ldr	r3, [r5, #0]
 8007d8e:	1d1a      	adds	r2, r3, #4
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	602a      	str	r2, [r5, #0]
 8007d94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e0a3      	b.n	8007ee8 <_printf_i+0x1f4>
 8007da0:	6820      	ldr	r0, [r4, #0]
 8007da2:	6829      	ldr	r1, [r5, #0]
 8007da4:	0606      	lsls	r6, r0, #24
 8007da6:	f101 0304 	add.w	r3, r1, #4
 8007daa:	d50a      	bpl.n	8007dc2 <_printf_i+0xce>
 8007dac:	680e      	ldr	r6, [r1, #0]
 8007dae:	602b      	str	r3, [r5, #0]
 8007db0:	2e00      	cmp	r6, #0
 8007db2:	da03      	bge.n	8007dbc <_printf_i+0xc8>
 8007db4:	232d      	movs	r3, #45	; 0x2d
 8007db6:	4276      	negs	r6, r6
 8007db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dbc:	485e      	ldr	r0, [pc, #376]	; (8007f38 <_printf_i+0x244>)
 8007dbe:	230a      	movs	r3, #10
 8007dc0:	e019      	b.n	8007df6 <_printf_i+0x102>
 8007dc2:	680e      	ldr	r6, [r1, #0]
 8007dc4:	602b      	str	r3, [r5, #0]
 8007dc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007dca:	bf18      	it	ne
 8007dcc:	b236      	sxthne	r6, r6
 8007dce:	e7ef      	b.n	8007db0 <_printf_i+0xbc>
 8007dd0:	682b      	ldr	r3, [r5, #0]
 8007dd2:	6820      	ldr	r0, [r4, #0]
 8007dd4:	1d19      	adds	r1, r3, #4
 8007dd6:	6029      	str	r1, [r5, #0]
 8007dd8:	0601      	lsls	r1, r0, #24
 8007dda:	d501      	bpl.n	8007de0 <_printf_i+0xec>
 8007ddc:	681e      	ldr	r6, [r3, #0]
 8007dde:	e002      	b.n	8007de6 <_printf_i+0xf2>
 8007de0:	0646      	lsls	r6, r0, #25
 8007de2:	d5fb      	bpl.n	8007ddc <_printf_i+0xe8>
 8007de4:	881e      	ldrh	r6, [r3, #0]
 8007de6:	4854      	ldr	r0, [pc, #336]	; (8007f38 <_printf_i+0x244>)
 8007de8:	2f6f      	cmp	r7, #111	; 0x6f
 8007dea:	bf0c      	ite	eq
 8007dec:	2308      	moveq	r3, #8
 8007dee:	230a      	movne	r3, #10
 8007df0:	2100      	movs	r1, #0
 8007df2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007df6:	6865      	ldr	r5, [r4, #4]
 8007df8:	60a5      	str	r5, [r4, #8]
 8007dfa:	2d00      	cmp	r5, #0
 8007dfc:	bfa2      	ittt	ge
 8007dfe:	6821      	ldrge	r1, [r4, #0]
 8007e00:	f021 0104 	bicge.w	r1, r1, #4
 8007e04:	6021      	strge	r1, [r4, #0]
 8007e06:	b90e      	cbnz	r6, 8007e0c <_printf_i+0x118>
 8007e08:	2d00      	cmp	r5, #0
 8007e0a:	d04d      	beq.n	8007ea8 <_printf_i+0x1b4>
 8007e0c:	4615      	mov	r5, r2
 8007e0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e12:	fb03 6711 	mls	r7, r3, r1, r6
 8007e16:	5dc7      	ldrb	r7, [r0, r7]
 8007e18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e1c:	4637      	mov	r7, r6
 8007e1e:	42bb      	cmp	r3, r7
 8007e20:	460e      	mov	r6, r1
 8007e22:	d9f4      	bls.n	8007e0e <_printf_i+0x11a>
 8007e24:	2b08      	cmp	r3, #8
 8007e26:	d10b      	bne.n	8007e40 <_printf_i+0x14c>
 8007e28:	6823      	ldr	r3, [r4, #0]
 8007e2a:	07de      	lsls	r6, r3, #31
 8007e2c:	d508      	bpl.n	8007e40 <_printf_i+0x14c>
 8007e2e:	6923      	ldr	r3, [r4, #16]
 8007e30:	6861      	ldr	r1, [r4, #4]
 8007e32:	4299      	cmp	r1, r3
 8007e34:	bfde      	ittt	le
 8007e36:	2330      	movle	r3, #48	; 0x30
 8007e38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e40:	1b52      	subs	r2, r2, r5
 8007e42:	6122      	str	r2, [r4, #16]
 8007e44:	f8cd a000 	str.w	sl, [sp]
 8007e48:	464b      	mov	r3, r9
 8007e4a:	aa03      	add	r2, sp, #12
 8007e4c:	4621      	mov	r1, r4
 8007e4e:	4640      	mov	r0, r8
 8007e50:	f7ff fee2 	bl	8007c18 <_printf_common>
 8007e54:	3001      	adds	r0, #1
 8007e56:	d14c      	bne.n	8007ef2 <_printf_i+0x1fe>
 8007e58:	f04f 30ff 	mov.w	r0, #4294967295
 8007e5c:	b004      	add	sp, #16
 8007e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e62:	4835      	ldr	r0, [pc, #212]	; (8007f38 <_printf_i+0x244>)
 8007e64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e68:	6829      	ldr	r1, [r5, #0]
 8007e6a:	6823      	ldr	r3, [r4, #0]
 8007e6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e70:	6029      	str	r1, [r5, #0]
 8007e72:	061d      	lsls	r5, r3, #24
 8007e74:	d514      	bpl.n	8007ea0 <_printf_i+0x1ac>
 8007e76:	07df      	lsls	r7, r3, #31
 8007e78:	bf44      	itt	mi
 8007e7a:	f043 0320 	orrmi.w	r3, r3, #32
 8007e7e:	6023      	strmi	r3, [r4, #0]
 8007e80:	b91e      	cbnz	r6, 8007e8a <_printf_i+0x196>
 8007e82:	6823      	ldr	r3, [r4, #0]
 8007e84:	f023 0320 	bic.w	r3, r3, #32
 8007e88:	6023      	str	r3, [r4, #0]
 8007e8a:	2310      	movs	r3, #16
 8007e8c:	e7b0      	b.n	8007df0 <_printf_i+0xfc>
 8007e8e:	6823      	ldr	r3, [r4, #0]
 8007e90:	f043 0320 	orr.w	r3, r3, #32
 8007e94:	6023      	str	r3, [r4, #0]
 8007e96:	2378      	movs	r3, #120	; 0x78
 8007e98:	4828      	ldr	r0, [pc, #160]	; (8007f3c <_printf_i+0x248>)
 8007e9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e9e:	e7e3      	b.n	8007e68 <_printf_i+0x174>
 8007ea0:	0659      	lsls	r1, r3, #25
 8007ea2:	bf48      	it	mi
 8007ea4:	b2b6      	uxthmi	r6, r6
 8007ea6:	e7e6      	b.n	8007e76 <_printf_i+0x182>
 8007ea8:	4615      	mov	r5, r2
 8007eaa:	e7bb      	b.n	8007e24 <_printf_i+0x130>
 8007eac:	682b      	ldr	r3, [r5, #0]
 8007eae:	6826      	ldr	r6, [r4, #0]
 8007eb0:	6961      	ldr	r1, [r4, #20]
 8007eb2:	1d18      	adds	r0, r3, #4
 8007eb4:	6028      	str	r0, [r5, #0]
 8007eb6:	0635      	lsls	r5, r6, #24
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	d501      	bpl.n	8007ec0 <_printf_i+0x1cc>
 8007ebc:	6019      	str	r1, [r3, #0]
 8007ebe:	e002      	b.n	8007ec6 <_printf_i+0x1d2>
 8007ec0:	0670      	lsls	r0, r6, #25
 8007ec2:	d5fb      	bpl.n	8007ebc <_printf_i+0x1c8>
 8007ec4:	8019      	strh	r1, [r3, #0]
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	6123      	str	r3, [r4, #16]
 8007eca:	4615      	mov	r5, r2
 8007ecc:	e7ba      	b.n	8007e44 <_printf_i+0x150>
 8007ece:	682b      	ldr	r3, [r5, #0]
 8007ed0:	1d1a      	adds	r2, r3, #4
 8007ed2:	602a      	str	r2, [r5, #0]
 8007ed4:	681d      	ldr	r5, [r3, #0]
 8007ed6:	6862      	ldr	r2, [r4, #4]
 8007ed8:	2100      	movs	r1, #0
 8007eda:	4628      	mov	r0, r5
 8007edc:	f7f8 f9b0 	bl	8000240 <memchr>
 8007ee0:	b108      	cbz	r0, 8007ee6 <_printf_i+0x1f2>
 8007ee2:	1b40      	subs	r0, r0, r5
 8007ee4:	6060      	str	r0, [r4, #4]
 8007ee6:	6863      	ldr	r3, [r4, #4]
 8007ee8:	6123      	str	r3, [r4, #16]
 8007eea:	2300      	movs	r3, #0
 8007eec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ef0:	e7a8      	b.n	8007e44 <_printf_i+0x150>
 8007ef2:	6923      	ldr	r3, [r4, #16]
 8007ef4:	462a      	mov	r2, r5
 8007ef6:	4649      	mov	r1, r9
 8007ef8:	4640      	mov	r0, r8
 8007efa:	47d0      	blx	sl
 8007efc:	3001      	adds	r0, #1
 8007efe:	d0ab      	beq.n	8007e58 <_printf_i+0x164>
 8007f00:	6823      	ldr	r3, [r4, #0]
 8007f02:	079b      	lsls	r3, r3, #30
 8007f04:	d413      	bmi.n	8007f2e <_printf_i+0x23a>
 8007f06:	68e0      	ldr	r0, [r4, #12]
 8007f08:	9b03      	ldr	r3, [sp, #12]
 8007f0a:	4298      	cmp	r0, r3
 8007f0c:	bfb8      	it	lt
 8007f0e:	4618      	movlt	r0, r3
 8007f10:	e7a4      	b.n	8007e5c <_printf_i+0x168>
 8007f12:	2301      	movs	r3, #1
 8007f14:	4632      	mov	r2, r6
 8007f16:	4649      	mov	r1, r9
 8007f18:	4640      	mov	r0, r8
 8007f1a:	47d0      	blx	sl
 8007f1c:	3001      	adds	r0, #1
 8007f1e:	d09b      	beq.n	8007e58 <_printf_i+0x164>
 8007f20:	3501      	adds	r5, #1
 8007f22:	68e3      	ldr	r3, [r4, #12]
 8007f24:	9903      	ldr	r1, [sp, #12]
 8007f26:	1a5b      	subs	r3, r3, r1
 8007f28:	42ab      	cmp	r3, r5
 8007f2a:	dcf2      	bgt.n	8007f12 <_printf_i+0x21e>
 8007f2c:	e7eb      	b.n	8007f06 <_printf_i+0x212>
 8007f2e:	2500      	movs	r5, #0
 8007f30:	f104 0619 	add.w	r6, r4, #25
 8007f34:	e7f5      	b.n	8007f22 <_printf_i+0x22e>
 8007f36:	bf00      	nop
 8007f38:	080082e1 	.word	0x080082e1
 8007f3c:	080082f2 	.word	0x080082f2

08007f40 <_sbrk_r>:
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	4d06      	ldr	r5, [pc, #24]	; (8007f5c <_sbrk_r+0x1c>)
 8007f44:	2300      	movs	r3, #0
 8007f46:	4604      	mov	r4, r0
 8007f48:	4608      	mov	r0, r1
 8007f4a:	602b      	str	r3, [r5, #0]
 8007f4c:	f7fa f988 	bl	8002260 <_sbrk>
 8007f50:	1c43      	adds	r3, r0, #1
 8007f52:	d102      	bne.n	8007f5a <_sbrk_r+0x1a>
 8007f54:	682b      	ldr	r3, [r5, #0]
 8007f56:	b103      	cbz	r3, 8007f5a <_sbrk_r+0x1a>
 8007f58:	6023      	str	r3, [r4, #0]
 8007f5a:	bd38      	pop	{r3, r4, r5, pc}
 8007f5c:	20002c18 	.word	0x20002c18

08007f60 <__sread>:
 8007f60:	b510      	push	{r4, lr}
 8007f62:	460c      	mov	r4, r1
 8007f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f68:	f000 f8a0 	bl	80080ac <_read_r>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	bfab      	itete	ge
 8007f70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f72:	89a3      	ldrhlt	r3, [r4, #12]
 8007f74:	181b      	addge	r3, r3, r0
 8007f76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f7a:	bfac      	ite	ge
 8007f7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f7e:	81a3      	strhlt	r3, [r4, #12]
 8007f80:	bd10      	pop	{r4, pc}

08007f82 <__swrite>:
 8007f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f86:	461f      	mov	r7, r3
 8007f88:	898b      	ldrh	r3, [r1, #12]
 8007f8a:	05db      	lsls	r3, r3, #23
 8007f8c:	4605      	mov	r5, r0
 8007f8e:	460c      	mov	r4, r1
 8007f90:	4616      	mov	r6, r2
 8007f92:	d505      	bpl.n	8007fa0 <__swrite+0x1e>
 8007f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f98:	2302      	movs	r3, #2
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f000 f868 	bl	8008070 <_lseek_r>
 8007fa0:	89a3      	ldrh	r3, [r4, #12]
 8007fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007faa:	81a3      	strh	r3, [r4, #12]
 8007fac:	4632      	mov	r2, r6
 8007fae:	463b      	mov	r3, r7
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb6:	f000 b817 	b.w	8007fe8 <_write_r>

08007fba <__sseek>:
 8007fba:	b510      	push	{r4, lr}
 8007fbc:	460c      	mov	r4, r1
 8007fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc2:	f000 f855 	bl	8008070 <_lseek_r>
 8007fc6:	1c43      	adds	r3, r0, #1
 8007fc8:	89a3      	ldrh	r3, [r4, #12]
 8007fca:	bf15      	itete	ne
 8007fcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8007fce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007fd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007fd6:	81a3      	strheq	r3, [r4, #12]
 8007fd8:	bf18      	it	ne
 8007fda:	81a3      	strhne	r3, [r4, #12]
 8007fdc:	bd10      	pop	{r4, pc}

08007fde <__sclose>:
 8007fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe2:	f000 b813 	b.w	800800c <_close_r>
	...

08007fe8 <_write_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	4d07      	ldr	r5, [pc, #28]	; (8008008 <_write_r+0x20>)
 8007fec:	4604      	mov	r4, r0
 8007fee:	4608      	mov	r0, r1
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	602a      	str	r2, [r5, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	f7fa f8e1 	bl	80021be <_write>
 8007ffc:	1c43      	adds	r3, r0, #1
 8007ffe:	d102      	bne.n	8008006 <_write_r+0x1e>
 8008000:	682b      	ldr	r3, [r5, #0]
 8008002:	b103      	cbz	r3, 8008006 <_write_r+0x1e>
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	bd38      	pop	{r3, r4, r5, pc}
 8008008:	20002c18 	.word	0x20002c18

0800800c <_close_r>:
 800800c:	b538      	push	{r3, r4, r5, lr}
 800800e:	4d06      	ldr	r5, [pc, #24]	; (8008028 <_close_r+0x1c>)
 8008010:	2300      	movs	r3, #0
 8008012:	4604      	mov	r4, r0
 8008014:	4608      	mov	r0, r1
 8008016:	602b      	str	r3, [r5, #0]
 8008018:	f7fa f8ed 	bl	80021f6 <_close>
 800801c:	1c43      	adds	r3, r0, #1
 800801e:	d102      	bne.n	8008026 <_close_r+0x1a>
 8008020:	682b      	ldr	r3, [r5, #0]
 8008022:	b103      	cbz	r3, 8008026 <_close_r+0x1a>
 8008024:	6023      	str	r3, [r4, #0]
 8008026:	bd38      	pop	{r3, r4, r5, pc}
 8008028:	20002c18 	.word	0x20002c18

0800802c <_fstat_r>:
 800802c:	b538      	push	{r3, r4, r5, lr}
 800802e:	4d07      	ldr	r5, [pc, #28]	; (800804c <_fstat_r+0x20>)
 8008030:	2300      	movs	r3, #0
 8008032:	4604      	mov	r4, r0
 8008034:	4608      	mov	r0, r1
 8008036:	4611      	mov	r1, r2
 8008038:	602b      	str	r3, [r5, #0]
 800803a:	f7fa f8e8 	bl	800220e <_fstat>
 800803e:	1c43      	adds	r3, r0, #1
 8008040:	d102      	bne.n	8008048 <_fstat_r+0x1c>
 8008042:	682b      	ldr	r3, [r5, #0]
 8008044:	b103      	cbz	r3, 8008048 <_fstat_r+0x1c>
 8008046:	6023      	str	r3, [r4, #0]
 8008048:	bd38      	pop	{r3, r4, r5, pc}
 800804a:	bf00      	nop
 800804c:	20002c18 	.word	0x20002c18

08008050 <_isatty_r>:
 8008050:	b538      	push	{r3, r4, r5, lr}
 8008052:	4d06      	ldr	r5, [pc, #24]	; (800806c <_isatty_r+0x1c>)
 8008054:	2300      	movs	r3, #0
 8008056:	4604      	mov	r4, r0
 8008058:	4608      	mov	r0, r1
 800805a:	602b      	str	r3, [r5, #0]
 800805c:	f7fa f8e7 	bl	800222e <_isatty>
 8008060:	1c43      	adds	r3, r0, #1
 8008062:	d102      	bne.n	800806a <_isatty_r+0x1a>
 8008064:	682b      	ldr	r3, [r5, #0]
 8008066:	b103      	cbz	r3, 800806a <_isatty_r+0x1a>
 8008068:	6023      	str	r3, [r4, #0]
 800806a:	bd38      	pop	{r3, r4, r5, pc}
 800806c:	20002c18 	.word	0x20002c18

08008070 <_lseek_r>:
 8008070:	b538      	push	{r3, r4, r5, lr}
 8008072:	4d07      	ldr	r5, [pc, #28]	; (8008090 <_lseek_r+0x20>)
 8008074:	4604      	mov	r4, r0
 8008076:	4608      	mov	r0, r1
 8008078:	4611      	mov	r1, r2
 800807a:	2200      	movs	r2, #0
 800807c:	602a      	str	r2, [r5, #0]
 800807e:	461a      	mov	r2, r3
 8008080:	f7fa f8e0 	bl	8002244 <_lseek>
 8008084:	1c43      	adds	r3, r0, #1
 8008086:	d102      	bne.n	800808e <_lseek_r+0x1e>
 8008088:	682b      	ldr	r3, [r5, #0]
 800808a:	b103      	cbz	r3, 800808e <_lseek_r+0x1e>
 800808c:	6023      	str	r3, [r4, #0]
 800808e:	bd38      	pop	{r3, r4, r5, pc}
 8008090:	20002c18 	.word	0x20002c18

08008094 <__malloc_lock>:
 8008094:	4801      	ldr	r0, [pc, #4]	; (800809c <__malloc_lock+0x8>)
 8008096:	f7ff bb1d 	b.w	80076d4 <__retarget_lock_acquire_recursive>
 800809a:	bf00      	nop
 800809c:	20002c0c 	.word	0x20002c0c

080080a0 <__malloc_unlock>:
 80080a0:	4801      	ldr	r0, [pc, #4]	; (80080a8 <__malloc_unlock+0x8>)
 80080a2:	f7ff bb18 	b.w	80076d6 <__retarget_lock_release_recursive>
 80080a6:	bf00      	nop
 80080a8:	20002c0c 	.word	0x20002c0c

080080ac <_read_r>:
 80080ac:	b538      	push	{r3, r4, r5, lr}
 80080ae:	4d07      	ldr	r5, [pc, #28]	; (80080cc <_read_r+0x20>)
 80080b0:	4604      	mov	r4, r0
 80080b2:	4608      	mov	r0, r1
 80080b4:	4611      	mov	r1, r2
 80080b6:	2200      	movs	r2, #0
 80080b8:	602a      	str	r2, [r5, #0]
 80080ba:	461a      	mov	r2, r3
 80080bc:	f7fa f862 	bl	8002184 <_read>
 80080c0:	1c43      	adds	r3, r0, #1
 80080c2:	d102      	bne.n	80080ca <_read_r+0x1e>
 80080c4:	682b      	ldr	r3, [r5, #0]
 80080c6:	b103      	cbz	r3, 80080ca <_read_r+0x1e>
 80080c8:	6023      	str	r3, [r4, #0]
 80080ca:	bd38      	pop	{r3, r4, r5, pc}
 80080cc:	20002c18 	.word	0x20002c18

080080d0 <_init>:
 80080d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d2:	bf00      	nop
 80080d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080d6:	bc08      	pop	{r3}
 80080d8:	469e      	mov	lr, r3
 80080da:	4770      	bx	lr

080080dc <_fini>:
 80080dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080de:	bf00      	nop
 80080e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080e2:	bc08      	pop	{r3}
 80080e4:	469e      	mov	lr, r3
 80080e6:	4770      	bx	lr
