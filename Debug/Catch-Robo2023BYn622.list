
Catch-Robo2023BYn622.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a80  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08009c80  08009c80  00019c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009eb4  08009eb4  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  08009eb4  08009eb4  00019eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ebc  08009ebc  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ebc  08009ebc  00019ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ec0  08009ec0  00019ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009ec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000074  08009f38  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000114  08009fd8  00020114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000804c  200001b4  0800a078  000201b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20008200  0800a078  00028200  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f564  00000000  00000000  000201e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000443d  00000000  00000000  0003f746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017b8  00000000  00000000  00043b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001618  00000000  00000000  00045340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002c787  00000000  00000000  00046958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001cd0f  00000000  00000000  000730df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00108505  00000000  00000000  0008fdee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001982f3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006a2c  00000000  00000000  00198344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b4 	.word	0x200001b4
 800021c:	00000000 	.word	0x00000000
 8000220:	08009c68 	.word	0x08009c68

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b8 	.word	0x200001b8
 800023c:	08009c68 	.word	0x08009c68

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <PopSendTx8Bytes>:
	}

	return HAL_OK;
}

HAL_StatusTypeDef PopSendTx8Bytes(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;

	txHeader.RTR = CAN_RTR_DATA; // Data frame
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]
	txHeader.IDE = CAN_ID_EXT;	 // CAN Extend ID
 80005ee:	2304      	movs	r3, #4
 80005f0:	60fb      	str	r3, [r7, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	763b      	strb	r3, [r7, #24]

	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 80005f6:	e035      	b.n	8000664 <PopSendTx8Bytes+0x80>
		if (isfull == 0 && readpoint == writepoint)break;
 80005f8:	4b22      	ldr	r3, [pc, #136]	; (8000684 <PopSendTx8Bytes+0xa0>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d105      	bne.n	800060c <PopSendTx8Bytes+0x28>
 8000600:	4b21      	ldr	r3, [pc, #132]	; (8000688 <PopSendTx8Bytes+0xa4>)
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	4b21      	ldr	r3, [pc, #132]	; (800068c <PopSendTx8Bytes+0xa8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	429a      	cmp	r2, r3
 800060a:	d034      	beq.n	8000676 <PopSendTx8Bytes+0x92>

		txHeader.DLC = buffer[readpoint].DLC;
 800060c:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <PopSendTx8Bytes+0xa4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a1f      	ldr	r2, [pc, #124]	; (8000690 <PopSendTx8Bytes+0xac>)
 8000612:	011b      	lsls	r3, r3, #4
 8000614:	4413      	add	r3, r2
 8000616:	3304      	adds	r3, #4
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	617b      	str	r3, [r7, #20]
		txHeader.ExtId = buffer[readpoint].ExtId;
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <PopSendTx8Bytes+0xa4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a1b      	ldr	r2, [pc, #108]	; (8000690 <PopSendTx8Bytes+0xac>)
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	4413      	add	r3, r2
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	60bb      	str	r3, [r7, #8]

		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, buffer[readpoint].bytes, &txMailbox);
 800062a:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <PopSendTx8Bytes+0xb0>)
 800062c:	6818      	ldr	r0, [r3, #0]
 800062e:	4b16      	ldr	r3, [pc, #88]	; (8000688 <PopSendTx8Bytes+0xa4>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	011b      	lsls	r3, r3, #4
 8000634:	3308      	adds	r3, #8
 8000636:	4a16      	ldr	r2, [pc, #88]	; (8000690 <PopSendTx8Bytes+0xac>)
 8000638:	441a      	add	r2, r3
 800063a:	463b      	mov	r3, r7
 800063c:	1d39      	adds	r1, r7, #4
 800063e:	f001 faa2 	bl	8001b86 <HAL_CAN_AddTxMessage>
 8000642:	4603      	mov	r3, r0
 8000644:	77fb      	strb	r3, [r7, #31]
		if (ret != HAL_OK)return ret;
 8000646:	7ffb      	ldrb	r3, [r7, #31]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <PopSendTx8Bytes+0x6c>
 800064c:	7ffb      	ldrb	r3, [r7, #31]
 800064e:	e014      	b.n	800067a <PopSendTx8Bytes+0x96>

		readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000650:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <PopSendTx8Bytes+0xa4>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	3301      	adds	r3, #1
 8000656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800065a:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <PopSendTx8Bytes+0xa4>)
 800065c:	6013      	str	r3, [r2, #0]
		isfull = 0;
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <PopSendTx8Bytes+0xa0>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000664:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <PopSendTx8Bytes+0xb0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f001 fb5c 	bl	8001d26 <HAL_CAN_GetTxMailboxesFreeLevel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1c1      	bne.n	80005f8 <PopSendTx8Bytes+0x14>
 8000674:	e000      	b.n	8000678 <PopSendTx8Bytes+0x94>
		if (isfull == 0 && readpoint == writepoint)break;
 8000676:	bf00      	nop
	}

	return HAL_OK;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	3720      	adds	r7, #32
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200024ac 	.word	0x200024ac
 8000688:	200024a4 	.word	0x200024a4
 800068c:	200024a8 	.word	0x200024a8
 8000690:	200004a4 	.word	0x200004a4
 8000694:	200001d0 	.word	0x200001d0

08000698 <WhenTxMailbox0_1_2CompleteCallbackCalled>:

void WhenTxMailbox0_1_2CompleteCallbackCalled(){
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 800069c:	f7ff ffa2 	bl	80005e4 <PopSendTx8Bytes>
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <WhenTxMailbox0_1_2AbortCallbackCalled>:

void WhenTxMailbox0_1_2AbortCallbackCalled(){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 80006a8:	f7ff ff9c 	bl	80005e4 <PopSendTx8Bytes>
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <WhenCANRxFifo0MsgPending>:

void WhenCANRxFifo0MsgPending(CAN_HandleTypeDef *phcan, NUM_OF_DEVICES *num_of){ // Fifo0MsgPendingで呼び出すこと. CAN受信時に呼び出される関数
 80006b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80006b4:	b08e      	sub	sp, #56	; 0x38
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
 80006ba:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_CAN_GetRxMessage(phcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK){
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	f107 0218 	add.w	r2, r7, #24
 80006c4:	2100      	movs	r1, #0
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f001 fb62 	bl	8001d90 <HAL_CAN_GetRxMessage>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d004      	beq.n	80006dc <WhenCANRxFifo0MsgPending+0x2c>
		// Reception Error
		printf("GetRxMessage error\n\r");
 80006d2:	486e      	ldr	r0, [pc, #440]	; (800088c <WhenCANRxFifo0MsgPending+0x1dc>)
 80006d4:	f008 fb3a 	bl	8008d4c <iprintf>
		Error_Handler();
 80006d8:	f000 fd4f 	bl	800117a <Error_Handler>
	}
	// awakeコマンドを受信した場合
	CAN_Device can_device = Extract_CAN_Device(rxHeader.ExtId);
 80006dc:	69fb      	ldr	r3, [r7, #28]
 80006de:	2200      	movs	r2, #0
 80006e0:	4698      	mov	r8, r3
 80006e2:	4691      	mov	r9, r2
 80006e4:	4640      	mov	r0, r8
 80006e6:	4649      	mov	r1, r9
 80006e8:	f000 f9ba 	bl	8000a60 <Extract_CAN_Device>
 80006ec:	4603      	mov	r3, r0
 80006ee:	461a      	mov	r2, r3
 80006f0:	733a      	strb	r2, [r7, #12]
 80006f2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80006f6:	737a      	strb	r2, [r7, #13]
 80006f8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80006fc:	73bb      	strb	r3, [r7, #14]
	uint8_t extracted_cmd = Extract_CAN_CMD(rxHeader.ExtId);
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	2200      	movs	r2, #0
 8000702:	461c      	mov	r4, r3
 8000704:	4615      	mov	r5, r2
 8000706:	4620      	mov	r0, r4
 8000708:	4629      	mov	r1, r5
 800070a:	f000 f9f5 	bl	8000af8 <Extract_CAN_CMD>
 800070e:	4603      	mov	r3, r0
 8000710:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(extracted_cmd == AWAKE_CMD){
 8000714:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000718:	2b00      	cmp	r3, #0
 800071a:	d139      	bne.n	8000790 <WhenCANRxFifo0MsgPending+0xe0>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 800071c:	2300      	movs	r3, #0
 800071e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000722:	e013      	b.n	800074c <WhenCANRxFifo0MsgPending+0x9c>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000724:	7b3b      	ldrb	r3, [r7, #12]
 8000726:	4618      	mov	r0, r3
 8000728:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800072c:	4958      	ldr	r1, [pc, #352]	; (8000890 <WhenCANRxFifo0MsgPending+0x1e0>)
 800072e:	4603      	mov	r3, r0
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	1a1b      	subs	r3, r3, r0
 8000734:	440b      	add	r3, r1
 8000736:	4413      	add	r3, r2
 8000738:	781a      	ldrb	r2, [r3, #0]
 800073a:	7c3b      	ldrb	r3, [r7, #16]
 800073c:	429a      	cmp	r2, r3
 800073e:	f000 80a0 	beq.w	8000882 <WhenCANRxFifo0MsgPending+0x1d2>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000742:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000746:	3301      	adds	r3, #1
 8000748:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800074c:	7b3b      	ldrb	r3, [r7, #12]
 800074e:	461a      	mov	r2, r3
 8000750:	4b50      	ldr	r3, [pc, #320]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000752:	5c9b      	ldrb	r3, [r3, r2]
 8000754:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000758:	429a      	cmp	r2, r3
 800075a:	d3e3      	bcc.n	8000724 <WhenCANRxFifo0MsgPending+0x74>
		}
		node_id_list[can_device.node_type][num_detected[can_device.node_type]] = rxData[0];
 800075c:	7b3b      	ldrb	r3, [r7, #12]
 800075e:	4619      	mov	r1, r3
 8000760:	7b3b      	ldrb	r3, [r7, #12]
 8000762:	461a      	mov	r2, r3
 8000764:	4b4b      	ldr	r3, [pc, #300]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000766:	5c9b      	ldrb	r3, [r3, r2]
 8000768:	461c      	mov	r4, r3
 800076a:	7c38      	ldrb	r0, [r7, #16]
 800076c:	4a48      	ldr	r2, [pc, #288]	; (8000890 <WhenCANRxFifo0MsgPending+0x1e0>)
 800076e:	460b      	mov	r3, r1
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	1a5b      	subs	r3, r3, r1
 8000774:	4413      	add	r3, r2
 8000776:	4423      	add	r3, r4
 8000778:	4602      	mov	r2, r0
 800077a:	701a      	strb	r2, [r3, #0]
		num_detected[can_device.node_type] += 1;
 800077c:	7b3b      	ldrb	r3, [r7, #12]
 800077e:	461a      	mov	r2, r3
 8000780:	4b44      	ldr	r3, [pc, #272]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000782:	5c9b      	ldrb	r3, [r3, r2]
 8000784:	7b3a      	ldrb	r2, [r7, #12]
 8000786:	3301      	adds	r3, #1
 8000788:	b2d9      	uxtb	r1, r3
 800078a:	4b42      	ldr	r3, [pc, #264]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 800078c:	5499      	strb	r1, [r3, r2]
 800078e:	e04a      	b.n	8000826 <WhenCANRxFifo0MsgPending+0x176>
	}else if(extracted_cmd == FB_CMD){
 8000790:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000794:	2b01      	cmp	r3, #1
 8000796:	d146      	bne.n	8000826 <WhenCANRxFifo0MsgPending+0x176>
		if (can_device.node_type == NODE_MCMD1){
 8000798:	7b3b      	ldrb	r3, [r7, #12]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d10d      	bne.n	80007ba <WhenCANRxFifo0MsgPending+0x10a>
			memcpy(&(_feedback_table_mcmd1[can_device.node_id].feedback_motor[can_device.device_num]),
 800079e:	7b7b      	ldrb	r3, [r7, #13]
 80007a0:	7bba      	ldrb	r2, [r7, #14]
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	4413      	add	r3, r2
 80007a6:	00db      	lsls	r3, r3, #3
 80007a8:	4a3b      	ldr	r2, [pc, #236]	; (8000898 <WhenCANRxFifo0MsgPending+0x1e8>)
 80007aa:	4413      	add	r3, r2
 80007ac:	461a      	mov	r2, r3
 80007ae:	f107 0310 	add.w	r3, r7, #16
 80007b2:	cb03      	ldmia	r3!, {r0, r1}
 80007b4:	6010      	str	r0, [r2, #0]
 80007b6:	6051      	str	r1, [r2, #4]
 80007b8:	e035      	b.n	8000826 <WhenCANRxFifo0MsgPending+0x176>
                   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD2){
 80007ba:	7b3b      	ldrb	r3, [r7, #12]
 80007bc:	2b02      	cmp	r3, #2
 80007be:	d10d      	bne.n	80007dc <WhenCANRxFifo0MsgPending+0x12c>
			memcpy(&(_feedback_table_mcmd2[can_device.node_id].feedback_motor[can_device.device_num]),
 80007c0:	7b7b      	ldrb	r3, [r7, #13]
 80007c2:	7bba      	ldrb	r2, [r7, #14]
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	4413      	add	r3, r2
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	4a34      	ldr	r2, [pc, #208]	; (800089c <WhenCANRxFifo0MsgPending+0x1ec>)
 80007cc:	4413      	add	r3, r2
 80007ce:	461a      	mov	r2, r3
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	cb03      	ldmia	r3!, {r0, r1}
 80007d6:	6010      	str	r0, [r2, #0]
 80007d8:	6051      	str	r1, [r2, #4]
 80007da:	e024      	b.n	8000826 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD3){
 80007dc:	7b3b      	ldrb	r3, [r7, #12]
 80007de:	2b03      	cmp	r3, #3
 80007e0:	d10d      	bne.n	80007fe <WhenCANRxFifo0MsgPending+0x14e>
			memcpy(&(_feedback_table_mcmd3[can_device.node_id].feedback_motor[can_device.device_num]),
 80007e2:	7b7b      	ldrb	r3, [r7, #13]
 80007e4:	7bba      	ldrb	r2, [r7, #14]
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	4413      	add	r3, r2
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	4a2c      	ldr	r2, [pc, #176]	; (80008a0 <WhenCANRxFifo0MsgPending+0x1f0>)
 80007ee:	4413      	add	r3, r2
 80007f0:	461a      	mov	r2, r3
 80007f2:	f107 0310 	add.w	r3, r7, #16
 80007f6:	cb03      	ldmia	r3!, {r0, r1}
 80007f8:	6010      	str	r0, [r2, #0]
 80007fa:	6051      	str	r1, [r2, #4]
 80007fc:	e013      	b.n	8000826 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD4){
 80007fe:	7b3b      	ldrb	r3, [r7, #12]
 8000800:	2b06      	cmp	r3, #6
 8000802:	d10d      	bne.n	8000820 <WhenCANRxFifo0MsgPending+0x170>
			memcpy(&(_feedback_table_mcmd4[can_device.node_id].feedback_motor[can_device.device_num]),
 8000804:	7b7b      	ldrb	r3, [r7, #13]
 8000806:	7bba      	ldrb	r2, [r7, #14]
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	4413      	add	r3, r2
 800080c:	00db      	lsls	r3, r3, #3
 800080e:	4a25      	ldr	r2, [pc, #148]	; (80008a4 <WhenCANRxFifo0MsgPending+0x1f4>)
 8000810:	4413      	add	r3, r2
 8000812:	461a      	mov	r2, r3
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	cb03      	ldmia	r3!, {r0, r1}
 800081a:	6010      	str	r0, [r2, #0]
 800081c:	6051      	str	r1, [r2, #4]
 800081e:	e002      	b.n	8000826 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else{
			printf("Error\n\r");
 8000820:	4821      	ldr	r0, [pc, #132]	; (80008a8 <WhenCANRxFifo0MsgPending+0x1f8>)
 8000822:	f008 fa93 	bl	8008d4c <iprintf>
		}
	}else{

    }
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000826:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000828:	785a      	ldrb	r2, [r3, #1]
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	429a      	cmp	r2, r3
 8000830:	d128      	bne.n	8000884 <WhenCANRxFifo0MsgPending+0x1d4>
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000834:	789a      	ldrb	r2, [r3, #2]
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	785b      	ldrb	r3, [r3, #1]
 800083a:	429a      	cmp	r2, r3
 800083c:	d122      	bne.n	8000884 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000840:	78da      	ldrb	r2, [r3, #3]
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	789b      	ldrb	r3, [r3, #2]
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000846:	429a      	cmp	r2, r3
 8000848:	d11c      	bne.n	8000884 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 800084c:	791a      	ldrb	r2, [r3, #4]
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	78db      	ldrb	r3, [r3, #3]
 8000852:	429a      	cmp	r2, r3
 8000854:	d116      	bne.n	8000884 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000858:	795a      	ldrb	r2, [r3, #5]
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	791b      	ldrb	r3, [r3, #4]
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 800085e:	429a      	cmp	r2, r3
 8000860:	d110      	bne.n	8000884 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000864:	799a      	ldrb	r2, [r3, #6]
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	795b      	ldrb	r3, [r3, #5]
 800086a:	429a      	cmp	r2, r3
 800086c:	d10a      	bne.n	8000884 <WhenCANRxFifo0MsgPending+0x1d4>
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000870:	7a1a      	ldrb	r2, [r3, #8]
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	799b      	ldrb	r3, [r3, #6]
 8000876:	429a      	cmp	r2, r3
 8000878:	d104      	bne.n	8000884 <WhenCANRxFifo0MsgPending+0x1d4>
		all_node_detected = 1;
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <WhenCANRxFifo0MsgPending+0x1fc>)
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
 8000880:	e000      	b.n	8000884 <WhenCANRxFifo0MsgPending+0x1d4>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000882:	bf00      	nop
	}
}
 8000884:	3738      	adds	r7, #56	; 0x38
 8000886:	46bd      	mov	sp, r7
 8000888:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800088c:	08009c80 	.word	0x08009c80
 8000890:	200001e4 	.word	0x200001e4
 8000894:	200001d8 	.word	0x200001d8
 8000898:	20000224 	.word	0x20000224
 800089c:	200002c4 	.word	0x200002c4
 80008a0:	20000364 	.word	0x20000364
 80008a4:	20000404 	.word	0x20000404
 80008a8:	08009c98 	.word	0x08009c98
 80008ac:	200001d4 	.word	0x200001d4

080008b0 <Get_MCMD_Feedback>:

void MCMD_SetTarget(MCMD_HandleTypedef *hmcmd, float target){
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_SET_TARGET), (uint8_t *)&target, sizeof(target));
}

MCMD_Feedback_Typedef Get_MCMD_Feedback(CAN_Device *can_device){
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
	MCMD_Feedback_Typedef ans;
	if (can_device->node_type == NODE_MCMD1){
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d12f      	bne.n	8000922 <Get_MCMD_Feedback+0x72>
		ans.fb_type = _feedback_table_mcmd1[(can_device->node_id)].feedback_motor[(can_device->device_num)].fb_type;
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	785b      	ldrb	r3, [r3, #1]
 80008c6:	4618      	mov	r0, r3
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	789b      	ldrb	r3, [r3, #2]
 80008cc:	4619      	mov	r1, r3
 80008ce:	4a5f      	ldr	r2, [pc, #380]	; (8000a4c <Get_MCMD_Feedback+0x19c>)
 80008d0:	0043      	lsls	r3, r0, #1
 80008d2:	440b      	add	r3, r1
 80008d4:	00db      	lsls	r3, r3, #3
 80008d6:	4413      	add	r3, r2
 80008d8:	791b      	ldrb	r3, [r3, #4]
 80008da:	733b      	strb	r3, [r7, #12]
		ans.status = _feedback_table_mcmd1[(can_device->node_id)].feedback_motor[(can_device->device_num)].status;
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	785b      	ldrb	r3, [r3, #1]
 80008e0:	4618      	mov	r0, r3
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	789b      	ldrb	r3, [r3, #2]
 80008e6:	4619      	mov	r1, r3
 80008e8:	4a58      	ldr	r2, [pc, #352]	; (8000a4c <Get_MCMD_Feedback+0x19c>)
 80008ea:	0043      	lsls	r3, r0, #1
 80008ec:	440b      	add	r3, r1
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	4413      	add	r3, r2
 80008f2:	795b      	ldrb	r3, [r3, #5]
 80008f4:	737b      	strb	r3, [r7, #13]
		ans.value = _feedback_table_mcmd1[(can_device->node_id)].feedback_motor[(can_device->device_num)].value;
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	785b      	ldrb	r3, [r3, #1]
 80008fa:	4618      	mov	r0, r3
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	789b      	ldrb	r3, [r3, #2]
 8000900:	4619      	mov	r1, r3
 8000902:	4a52      	ldr	r2, [pc, #328]	; (8000a4c <Get_MCMD_Feedback+0x19c>)
 8000904:	0043      	lsls	r3, r0, #1
 8000906:	440b      	add	r3, r1
 8000908:	00db      	lsls	r3, r3, #3
 800090a:	4413      	add	r3, r2
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	60bb      	str	r3, [r7, #8]
		return ans;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	461a      	mov	r2, r3
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	e893 0003 	ldmia.w	r3, {r0, r1}
 800091c:	e882 0003 	stmia.w	r2, {r0, r1}
 8000920:	e08f      	b.n	8000a42 <Get_MCMD_Feedback+0x192>
	}else if (can_device->node_type == NODE_MCMD2){
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b02      	cmp	r3, #2
 8000928:	d111      	bne.n	800094e <Get_MCMD_Feedback+0x9e>
		return _feedback_table_mcmd2[(can_device->node_id)].feedback_motor[(can_device->device_num)];
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	785b      	ldrb	r3, [r3, #1]
 800092e:	461c      	mov	r4, r3
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	789b      	ldrb	r3, [r3, #2]
 8000934:	4618      	mov	r0, r3
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	4a45      	ldr	r2, [pc, #276]	; (8000a50 <Get_MCMD_Feedback+0x1a0>)
 800093a:	0063      	lsls	r3, r4, #1
 800093c:	4403      	add	r3, r0
 800093e:	460c      	mov	r4, r1
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	4413      	add	r3, r2
 8000944:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000948:	e884 0003 	stmia.w	r4, {r0, r1}
 800094c:	e079      	b.n	8000a42 <Get_MCMD_Feedback+0x192>
	}else if (can_device->node_type == NODE_MCMD3){
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b03      	cmp	r3, #3
 8000954:	d12f      	bne.n	80009b6 <Get_MCMD_Feedback+0x106>
		ans.fb_type = _feedback_table_mcmd3[(can_device->node_id)].feedback_motor[(can_device->device_num)].fb_type;
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	785b      	ldrb	r3, [r3, #1]
 800095a:	4618      	mov	r0, r3
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	789b      	ldrb	r3, [r3, #2]
 8000960:	4619      	mov	r1, r3
 8000962:	4a3c      	ldr	r2, [pc, #240]	; (8000a54 <Get_MCMD_Feedback+0x1a4>)
 8000964:	0043      	lsls	r3, r0, #1
 8000966:	440b      	add	r3, r1
 8000968:	00db      	lsls	r3, r3, #3
 800096a:	4413      	add	r3, r2
 800096c:	791b      	ldrb	r3, [r3, #4]
 800096e:	733b      	strb	r3, [r7, #12]
		ans.status = _feedback_table_mcmd3[(can_device->node_id)].feedback_motor[(can_device->device_num)].status;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	785b      	ldrb	r3, [r3, #1]
 8000974:	4618      	mov	r0, r3
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	789b      	ldrb	r3, [r3, #2]
 800097a:	4619      	mov	r1, r3
 800097c:	4a35      	ldr	r2, [pc, #212]	; (8000a54 <Get_MCMD_Feedback+0x1a4>)
 800097e:	0043      	lsls	r3, r0, #1
 8000980:	440b      	add	r3, r1
 8000982:	00db      	lsls	r3, r3, #3
 8000984:	4413      	add	r3, r2
 8000986:	795b      	ldrb	r3, [r3, #5]
 8000988:	737b      	strb	r3, [r7, #13]
		ans.value = _feedback_table_mcmd3[(can_device->node_id)].feedback_motor[(can_device->device_num)].value;
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	785b      	ldrb	r3, [r3, #1]
 800098e:	4618      	mov	r0, r3
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	789b      	ldrb	r3, [r3, #2]
 8000994:	4619      	mov	r1, r3
 8000996:	4a2f      	ldr	r2, [pc, #188]	; (8000a54 <Get_MCMD_Feedback+0x1a4>)
 8000998:	0043      	lsls	r3, r0, #1
 800099a:	440b      	add	r3, r1
 800099c:	00db      	lsls	r3, r3, #3
 800099e:	4413      	add	r3, r2
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	60bb      	str	r3, [r7, #8]
		return ans;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	461a      	mov	r2, r3
 80009a8:	f107 0308 	add.w	r3, r7, #8
 80009ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009b0:	e882 0003 	stmia.w	r2, {r0, r1}
 80009b4:	e045      	b.n	8000a42 <Get_MCMD_Feedback+0x192>
	}else if (can_device->node_type == NODE_MCMD4){
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b06      	cmp	r3, #6
 80009bc:	d12f      	bne.n	8000a1e <Get_MCMD_Feedback+0x16e>
		ans.fb_type = _feedback_table_mcmd4[(can_device->node_id)].feedback_motor[(can_device->device_num)].fb_type;
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	785b      	ldrb	r3, [r3, #1]
 80009c2:	4618      	mov	r0, r3
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	789b      	ldrb	r3, [r3, #2]
 80009c8:	4619      	mov	r1, r3
 80009ca:	4a23      	ldr	r2, [pc, #140]	; (8000a58 <Get_MCMD_Feedback+0x1a8>)
 80009cc:	0043      	lsls	r3, r0, #1
 80009ce:	440b      	add	r3, r1
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	4413      	add	r3, r2
 80009d4:	791b      	ldrb	r3, [r3, #4]
 80009d6:	733b      	strb	r3, [r7, #12]
		ans.status = _feedback_table_mcmd4[(can_device->node_id)].feedback_motor[(can_device->device_num)].status;
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	785b      	ldrb	r3, [r3, #1]
 80009dc:	4618      	mov	r0, r3
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	789b      	ldrb	r3, [r3, #2]
 80009e2:	4619      	mov	r1, r3
 80009e4:	4a1c      	ldr	r2, [pc, #112]	; (8000a58 <Get_MCMD_Feedback+0x1a8>)
 80009e6:	0043      	lsls	r3, r0, #1
 80009e8:	440b      	add	r3, r1
 80009ea:	00db      	lsls	r3, r3, #3
 80009ec:	4413      	add	r3, r2
 80009ee:	795b      	ldrb	r3, [r3, #5]
 80009f0:	737b      	strb	r3, [r7, #13]
		ans.value = _feedback_table_mcmd4[(can_device->node_id)].feedback_motor[(can_device->device_num)].value;
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	785b      	ldrb	r3, [r3, #1]
 80009f6:	4618      	mov	r0, r3
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	789b      	ldrb	r3, [r3, #2]
 80009fc:	4619      	mov	r1, r3
 80009fe:	4a16      	ldr	r2, [pc, #88]	; (8000a58 <Get_MCMD_Feedback+0x1a8>)
 8000a00:	0043      	lsls	r3, r0, #1
 8000a02:	440b      	add	r3, r1
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	4413      	add	r3, r2
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	60bb      	str	r3, [r7, #8]
		return ans;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	f107 0308 	add.w	r3, r7, #8
 8000a14:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a18:	e882 0003 	stmia.w	r2, {r0, r1}
 8000a1c:	e011      	b.n	8000a42 <Get_MCMD_Feedback+0x192>
	}else{
		ans.fb_type = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	733b      	strb	r3, [r7, #12]
		ans.status = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	737b      	strb	r3, [r7, #13]
		ans.value = 0.0f;
 8000a26:	f04f 0300 	mov.w	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
		printf("get feed back error\n\r");
 8000a2c:	480b      	ldr	r0, [pc, #44]	; (8000a5c <Get_MCMD_Feedback+0x1ac>)
 8000a2e:	f008 f98d 	bl	8008d4c <iprintf>
		return ans;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	461a      	mov	r2, r3
 8000a36:	f107 0308 	add.w	r3, r7, #8
 8000a3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a3e:	e882 0003 	stmia.w	r2, {r0, r1}
	}
}
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd90      	pop	{r4, r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000224 	.word	0x20000224
 8000a50:	200002c4 	.word	0x200002c4
 8000a54:	20000364 	.word	0x20000364
 8000a58:	20000404 	.word	0x20000404
 8000a5c:	08009d60 	.word	0x08009d60

08000a60 <Extract_CAN_Device>:
uint64_t Make_CAN_ID(Node_Type node_type, uint8_t node_id, uint8_t device_num, uint8_t cmd){
    return ( (((uint8_t)node_type & 0b111) << 11) | (((node_id)&0b111) << 8) | ((device_num&0b111) << 5)
             | (cmd&0b11111) );
}

CAN_Device Extract_CAN_Device(uint64_t can_id) {  // CAN_IDからCAN_Deviceを抽出する
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	e9c7 0100 	strd	r0, r1, [r7]
    CAN_Device ans;
    ans.device_num = ((can_id>>5) & 0b111);
 8000a6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000a6e:	f04f 0200 	mov.w	r2, #0
 8000a72:	f04f 0300 	mov.w	r3, #0
 8000a76:	0942      	lsrs	r2, r0, #5
 8000a78:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 8000a7c:	094b      	lsrs	r3, r1, #5
 8000a7e:	b2d3      	uxtb	r3, r2
 8000a80:	f003 0307 	and.w	r3, r3, #7
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	72bb      	strb	r3, [r7, #10]
    ans.node_id = ((can_id>>8) & 0b111);
 8000a88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000a8c:	f04f 0200 	mov.w	r2, #0
 8000a90:	f04f 0300 	mov.w	r3, #0
 8000a94:	0a02      	lsrs	r2, r0, #8
 8000a96:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000a9a:	0a0b      	lsrs	r3, r1, #8
 8000a9c:	b2d3      	uxtb	r3, r2
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	727b      	strb	r3, [r7, #9]
    ans.node_type = (Node_Type)( (can_id>>11) & 0b111);
 8000aa6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000aaa:	f04f 0200 	mov.w	r2, #0
 8000aae:	f04f 0300 	mov.w	r3, #0
 8000ab2:	0ac2      	lsrs	r2, r0, #11
 8000ab4:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8000ab8:	0acb      	lsrs	r3, r1, #11
 8000aba:	b2d3      	uxtb	r3, r2
 8000abc:	f003 0307 	and.w	r3, r3, #7
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	723b      	strb	r3, [r7, #8]
    return ans;
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	f107 0208 	add.w	r2, r7, #8
 8000acc:	6812      	ldr	r2, [r2, #0]
 8000ace:	4611      	mov	r1, r2
 8000ad0:	8019      	strh	r1, [r3, #0]
 8000ad2:	3302      	adds	r3, #2
 8000ad4:	0c12      	lsrs	r2, r2, #16
 8000ad6:	701a      	strb	r2, [r3, #0]
 8000ad8:	2300      	movs	r3, #0
 8000ada:	7b3a      	ldrb	r2, [r7, #12]
 8000adc:	f362 0307 	bfi	r3, r2, #0, #8
 8000ae0:	7b7a      	ldrb	r2, [r7, #13]
 8000ae2:	f362 230f 	bfi	r3, r2, #8, #8
 8000ae6:	7bba      	ldrb	r2, [r7, #14]
 8000ae8:	f362 4317 	bfi	r3, r2, #16, #8
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <Extract_CAN_CMD>:

uint8_t Extract_CAN_CMD(uint64_t can_id){ return ( can_id & 0b11111); }  // cmdを抽出
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	e9c7 0100 	strd	r0, r1, [r7]
 8000b02:	783b      	ldrb	r3, [r7, #0]
 8000b04:	f003 031f 	and.w	r3, r3, #31
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <vApplicationGetIdleTaskMemory+0x30>)
 8000b2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2280      	movs	r2, #128	; 0x80
 8000b34:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b36:	bf00      	nop
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	200024b0 	.word	0x200024b0
 8000b48:	20002504 	.word	0x20002504

08000b4c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <vApplicationGetTimerTaskMemory+0x2c>)
 8000b5c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	4a06      	ldr	r2, [pc, #24]	; (8000b7c <vApplicationGetTimerTaskMemory+0x30>)
 8000b62:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b6a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	20002704 	.word	0x20002704
 8000b7c:	20002758 	.word	0x20002758

08000b80 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(uint8_t ch)
#else
#define PUTCHAR_PROTYPE int fputc(int ch,FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, &ch, 1, 500);
 8000b8a:	1df9      	adds	r1, r7, #7
 8000b8c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b90:	2201      	movs	r2, #1
 8000b92:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <__io_putchar+0x24>)
 8000b94:	f004 f888 	bl	8004ca8 <HAL_UART_Transmit>
    return ch;
 8000b98:	79fb      	ldrb	r3, [r7, #7]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20002c68 	.word	0x20002c68

08000ba8 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8000bb0:	f7ff fd72 	bl	8000698 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8000bc4:	f7ff fd6e 	bl	80006a4 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8000bd8:	f7ff fd5e 	bl	8000698 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8000bec:	f7ff fd5a 	bl	80006a4 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8000c00:	f7ff fd4a 	bl	8000698 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8000c14:	f7ff fd46 	bl	80006a4 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
    WhenCANRxFifo0MsgPending(hcan, &num_of_devices);
 8000c28:	4903      	ldr	r1, [pc, #12]	; (8000c38 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff fd40 	bl	80006b0 <WhenCANRxFifo0MsgPending>
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20004308 	.word	0x20004308

08000c3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c3c:	b5b0      	push	{r4, r5, r7, lr}
 8000c3e:	b090      	sub	sp, #64	; 0x40
 8000c40:	af00      	add	r7, sp, #0
int main(void)
 8000c42:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c48:	f000 fe21 	bl	800188e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c4c:	f000 f83c 	bl	8000cc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c50:	f000 f9ac 	bl	8000fac <MX_GPIO_Init>
  MX_DMA_Init();
 8000c54:	f000 f98c 	bl	8000f70 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000c58:	f000 f92c 	bl	8000eb4 <MX_USART3_UART_Init>
  MX_ETH_Init();
 8000c5c:	f000 f8dc 	bl	8000e18 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c60:	f000 f958 	bl	8000f14 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 8000c64:	f000 f8a2 	bl	8000dac <MX_CAN1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512, defaultTaskBuffer, &defaultTaskControlBlock);
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <main+0x7c>)
 8000c6a:	f107 0420 	add.w	r4, r7, #32
 8000c6e:	461d      	mov	r5, r3
 8000c70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c7c:	f107 0320 	add.w	r3, r7, #32
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f005 fb77 	bl	8006376 <osThreadCreate>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	4a0c      	ldr	r2, [pc, #48]	; (8000cbc <main+0x80>)
 8000c8c:	6013      	str	r3, [r2, #0]

  /* definition and creation of systemCheckTask */
  osThreadStaticDef(systemCheckTask, StartTask02, osPriorityLow, 0, 512, systemCheckTaskBuffer, &systemCheckTaskControlBlock);
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <main+0x84>)
 8000c90:	1d3c      	adds	r4, r7, #4
 8000c92:	461d      	mov	r5, r3
 8000c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  systemCheckTaskHandle = osThreadCreate(osThread(systemCheckTask), NULL);
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f005 fb66 	bl	8006376 <osThreadCreate>
 8000caa:	4603      	mov	r3, r0
 8000cac:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <main+0x88>)
 8000cae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000cb0:	f005 fb5a 	bl	8006368 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <main+0x78>
 8000cb6:	bf00      	nop
 8000cb8:	08009d94 	.word	0x08009d94
 8000cbc:	20003258 	.word	0x20003258
 8000cc0:	08009db0 	.word	0x08009db0
 8000cc4:	20003ab0 	.word	0x20003ab0

08000cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b094      	sub	sp, #80	; 0x50
 8000ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	2234      	movs	r2, #52	; 0x34
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f008 f830 	bl	8008d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cdc:	f107 0308 	add.w	r3, r7, #8
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000cec:	f002 fe32 	bl	8003954 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf0:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <SystemClock_Config+0xdc>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	4a2b      	ldr	r2, [pc, #172]	; (8000da4 <SystemClock_Config+0xdc>)
 8000cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfc:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <SystemClock_Config+0xdc>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d08:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <SystemClock_Config+0xe0>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d10:	4a25      	ldr	r2, [pc, #148]	; (8000da8 <SystemClock_Config+0xe0>)
 8000d12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	4b23      	ldr	r3, [pc, #140]	; (8000da8 <SystemClock_Config+0xe0>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d24:	2301      	movs	r3, #1
 8000d26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d28:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d2c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d38:	2304      	movs	r3, #4
 8000d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000d3c:	2360      	movs	r3, #96	; 0x60
 8000d3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d40:	2302      	movs	r3, #2
 8000d42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d44:	2304      	movs	r3, #4
 8000d46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	4618      	mov	r0, r3
 8000d52:	f002 fe5f 	bl	8003a14 <HAL_RCC_OscConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d5c:	f000 fa0d 	bl	800117a <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d60:	f002 fe08 	bl	8003974 <HAL_PWREx_EnableOverDrive>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d6a:	f000 fa06 	bl	800117a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6e:	230f      	movs	r3, #15
 8000d70:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d72:	2302      	movs	r3, #2
 8000d74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d84:	f107 0308 	add.w	r3, r7, #8
 8000d88:	2103      	movs	r1, #3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f003 f8f0 	bl	8003f70 <HAL_RCC_ClockConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000d96:	f000 f9f0 	bl	800117a <Error_Handler>
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	3750      	adds	r7, #80	; 0x50
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40007000 	.word	0x40007000

08000dac <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000db0:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <MX_CAN1_Init+0x64>)
 8000db2:	4a18      	ldr	r2, [pc, #96]	; (8000e14 <MX_CAN1_Init+0x68>)
 8000db4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000db6:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <MX_CAN1_Init+0x64>)
 8000db8:	2206      	movs	r2, #6
 8000dba:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000dbc:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <MX_CAN1_Init+0x64>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <MX_CAN1_Init+0x64>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <MX_CAN1_Init+0x64>)
 8000dca:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000dce:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <MX_CAN1_Init+0x64>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <MX_CAN1_Init+0x64>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <MX_CAN1_Init+0x64>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <MX_CAN1_Init+0x64>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <MX_CAN1_Init+0x64>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <MX_CAN1_Init+0x64>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <MX_CAN1_Init+0x64>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <MX_CAN1_Init+0x64>)
 8000dfc:	f000 fdc8 	bl	8001990 <HAL_CAN_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000e06:	f000 f9b8 	bl	800117a <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20002b90 	.word	0x20002b90
 8000e14:	40006400 	.word	0x40006400

08000e18 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000e1c:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <MX_ETH_Init+0x84>)
 8000e1e:	4a20      	ldr	r2, [pc, #128]	; (8000ea0 <MX_ETH_Init+0x88>)
 8000e20:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <MX_ETH_Init+0x8c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000e28:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <MX_ETH_Init+0x8c>)
 8000e2a:	2280      	movs	r2, #128	; 0x80
 8000e2c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <MX_ETH_Init+0x8c>)
 8000e30:	22e1      	movs	r2, #225	; 0xe1
 8000e32:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000e34:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <MX_ETH_Init+0x8c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <MX_ETH_Init+0x8c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000e40:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <MX_ETH_Init+0x8c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <MX_ETH_Init+0x84>)
 8000e48:	4a16      	ldr	r2, [pc, #88]	; (8000ea4 <MX_ETH_Init+0x8c>)
 8000e4a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <MX_ETH_Init+0x84>)
 8000e4e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e52:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_ETH_Init+0x84>)
 8000e56:	4a14      	ldr	r2, [pc, #80]	; (8000ea8 <MX_ETH_Init+0x90>)
 8000e58:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <MX_ETH_Init+0x84>)
 8000e5c:	4a13      	ldr	r2, [pc, #76]	; (8000eac <MX_ETH_Init+0x94>)
 8000e5e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000e60:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_ETH_Init+0x84>)
 8000e62:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e66:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000e68:	480c      	ldr	r0, [pc, #48]	; (8000e9c <MX_ETH_Init+0x84>)
 8000e6a:	f001 ff25 	bl	8002cb8 <HAL_ETH_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000e74:	f000 f981 	bl	800117a <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000e78:	2238      	movs	r2, #56	; 0x38
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <MX_ETH_Init+0x98>)
 8000e7e:	f007 ff5d 	bl	8008d3c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <MX_ETH_Init+0x98>)
 8000e84:	2221      	movs	r2, #33	; 0x21
 8000e86:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_ETH_Init+0x98>)
 8000e8a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000e8e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000e90:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <MX_ETH_Init+0x98>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20002bb8 	.word	0x20002bb8
 8000ea0:	40028000 	.word	0x40028000
 8000ea4:	20004358 	.word	0x20004358
 8000ea8:	20000114 	.word	0x20000114
 8000eac:	20000074 	.word	0x20000074
 8000eb0:	20002b58 	.word	0x20002b58

08000eb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <MX_USART3_UART_Init+0x58>)
 8000eba:	4a15      	ldr	r2, [pc, #84]	; (8000f10 <MX_USART3_UART_Init+0x5c>)
 8000ebc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <MX_USART3_UART_Init+0x58>)
 8000ec0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <MX_USART3_UART_Init+0x58>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_USART3_UART_Init+0x58>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_USART3_UART_Init+0x58>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <MX_USART3_UART_Init+0x58>)
 8000eda:	220c      	movs	r2, #12
 8000edc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <MX_USART3_UART_Init+0x58>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_USART3_UART_Init+0x58>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <MX_USART3_UART_Init+0x58>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_USART3_UART_Init+0x58>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_USART3_UART_Init+0x58>)
 8000ef8:	f003 fe88 	bl	8004c0c <HAL_UART_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f02:	f000 f93a 	bl	800117a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20002c68 	.word	0x20002c68
 8000f10:	40004800 	.word	0x40004800

08000f14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f22:	2206      	movs	r2, #6
 8000f24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f28:	2202      	movs	r2, #2
 8000f2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f34:	2202      	movs	r2, #2
 8000f36:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f56:	4805      	ldr	r0, [pc, #20]	; (8000f6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f58:	f002 fbb3 	bl	80036c2 <HAL_PCD_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f62:	f000 f90a 	bl	800117a <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20002d50 	.word	0x20002d50

08000f70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_DMA_Init+0x38>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <MX_DMA_Init+0x38>)
 8000f7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_DMA_Init+0x38>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2105      	movs	r1, #5
 8000f92:	200e      	movs	r0, #14
 8000f94:	f001 fadd 	bl	8002552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f98:	200e      	movs	r0, #14
 8000f9a:	f001 faf6 	bl	800258a <HAL_NVIC_EnableIRQ>

}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800

08000fac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08c      	sub	sp, #48	; 0x30
 8000fb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc2:	4b47      	ldr	r3, [pc, #284]	; (80010e0 <MX_GPIO_Init+0x134>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a46      	ldr	r2, [pc, #280]	; (80010e0 <MX_GPIO_Init+0x134>)
 8000fc8:	f043 0304 	orr.w	r3, r3, #4
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b44      	ldr	r3, [pc, #272]	; (80010e0 <MX_GPIO_Init+0x134>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0304 	and.w	r3, r3, #4
 8000fd6:	61bb      	str	r3, [r7, #24]
 8000fd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fda:	4b41      	ldr	r3, [pc, #260]	; (80010e0 <MX_GPIO_Init+0x134>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a40      	ldr	r2, [pc, #256]	; (80010e0 <MX_GPIO_Init+0x134>)
 8000fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b3e      	ldr	r3, [pc, #248]	; (80010e0 <MX_GPIO_Init+0x134>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	4b3b      	ldr	r3, [pc, #236]	; (80010e0 <MX_GPIO_Init+0x134>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a3a      	ldr	r2, [pc, #232]	; (80010e0 <MX_GPIO_Init+0x134>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b38      	ldr	r3, [pc, #224]	; (80010e0 <MX_GPIO_Init+0x134>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	4b35      	ldr	r3, [pc, #212]	; (80010e0 <MX_GPIO_Init+0x134>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a34      	ldr	r2, [pc, #208]	; (80010e0 <MX_GPIO_Init+0x134>)
 8001010:	f043 0302 	orr.w	r3, r3, #2
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b32      	ldr	r3, [pc, #200]	; (80010e0 <MX_GPIO_Init+0x134>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001022:	4b2f      	ldr	r3, [pc, #188]	; (80010e0 <MX_GPIO_Init+0x134>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a2e      	ldr	r2, [pc, #184]	; (80010e0 <MX_GPIO_Init+0x134>)
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <MX_GPIO_Init+0x134>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800103a:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <MX_GPIO_Init+0x134>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a28      	ldr	r2, [pc, #160]	; (80010e0 <MX_GPIO_Init+0x134>)
 8001040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <MX_GPIO_Init+0x134>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f244 0181 	movw	r1, #16513	; 0x4081
 8001058:	4822      	ldr	r0, [pc, #136]	; (80010e4 <MX_GPIO_Init+0x138>)
 800105a:	f002 faff 	bl	800365c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	2140      	movs	r1, #64	; 0x40
 8001062:	4821      	ldr	r0, [pc, #132]	; (80010e8 <MX_GPIO_Init+0x13c>)
 8001064:	f002 fafa 	bl	800365c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001068:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800106e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001072:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	4619      	mov	r1, r3
 800107e:	481b      	ldr	r0, [pc, #108]	; (80010ec <MX_GPIO_Init+0x140>)
 8001080:	f002 f940 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001084:	f244 0381 	movw	r3, #16513	; 0x4081
 8001088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4619      	mov	r1, r3
 800109c:	4811      	ldr	r0, [pc, #68]	; (80010e4 <MX_GPIO_Init+0x138>)
 800109e:	f002 f931 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010a2:	2340      	movs	r3, #64	; 0x40
 80010a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	4619      	mov	r1, r3
 80010b8:	480b      	ldr	r0, [pc, #44]	; (80010e8 <MX_GPIO_Init+0x13c>)
 80010ba:	f002 f923 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_GPIO_Init+0x13c>)
 80010d2:	f002 f917 	bl	8003304 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010d6:	bf00      	nop
 80010d8:	3730      	adds	r7, #48	; 0x30
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020400 	.word	0x40020400
 80010e8:	40021800 	.word	0x40021800
 80010ec:	40020800 	.word	0x40020800

080010f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1000);
 80010f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010fc:	f005 f987 	bl	800640e <osDelay>
 8001100:	e7fa      	b.n	80010f8 <StartDefaultTask+0x8>
	...

08001104 <freeRTOSChecker>:
/**
* @brief Function implementing the systemCheckTask thread.
* @param argument: Not used
* @retval None
*/
void freeRTOSChecker(){//無限ループの中で実行
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, LD2_Pin);  // PINのPin stateを反転
 8001108:	2180      	movs	r1, #128	; 0x80
 800110a:	4802      	ldr	r0, [pc, #8]	; (8001114 <freeRTOSChecker+0x10>)
 800110c:	f002 fabf 	bl	800368e <HAL_GPIO_TogglePin>
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40020400 	.word	0x40020400

08001118 <mcmdChecker>:

void mcmdChecker(){//無限ループの中で実行
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
	mcmd_fb = Get_MCMD_Feedback(&(mcmd4_struct.device));
 800111e:	4c0d      	ldr	r4, [pc, #52]	; (8001154 <mcmdChecker+0x3c>)
 8001120:	463b      	mov	r3, r7
 8001122:	490d      	ldr	r1, [pc, #52]	; (8001158 <mcmdChecker+0x40>)
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fbc3 	bl	80008b0 <Get_MCMD_Feedback>
 800112a:	4622      	mov	r2, r4
 800112c:	463b      	mov	r3, r7
 800112e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001132:	e882 0003 	stmia.w	r2, {r0, r1}
	printf("value of tyokudou %d\r\n",(int)(mcmd_fb.value));
 8001136:	4b07      	ldr	r3, [pc, #28]	; (8001154 <mcmdChecker+0x3c>)
 8001138:	edd3 7a00 	vldr	s15, [r3]
 800113c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001140:	ee17 1a90 	vmov	r1, s15
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <mcmdChecker+0x44>)
 8001146:	f007 fe01 	bl	8008d4c <iprintf>
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	bd90      	pop	{r4, r7, pc}
 8001152:	bf00      	nop
 8001154:	20004350 	.word	0x20004350
 8001158:	20004310 	.word	0x20004310
 800115c:	08009dcc 	.word	0x08009dcc

08001160 <StartTask02>:
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  freeRTOSChecker();
 8001168:	f7ff ffcc 	bl	8001104 <freeRTOSChecker>
	  mcmdChecker();
 800116c:	f7ff ffd4 	bl	8001118 <mcmdChecker>
      osDelay(1000);
 8001170:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001174:	f005 f94b 	bl	800640e <osDelay>
	  freeRTOSChecker();
 8001178:	e7f6      	b.n	8001168 <StartTask02+0x8>

0800117a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800117e:	b672      	cpsid	i
}
 8001180:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001182:	e7fe      	b.n	8001182 <Error_Handler+0x8>

08001184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HAL_MspInit+0x4c>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	4a10      	ldr	r2, [pc, #64]	; (80011d0 <HAL_MspInit+0x4c>)
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001194:	6413      	str	r3, [r2, #64]	; 0x40
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <HAL_MspInit+0x4c>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <HAL_MspInit+0x4c>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <HAL_MspInit+0x4c>)
 80011a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ac:	6453      	str	r3, [r2, #68]	; 0x44
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <HAL_MspInit+0x4c>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	210f      	movs	r1, #15
 80011be:	f06f 0001 	mvn.w	r0, #1
 80011c2:	f001 f9c6 	bl	8002552 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800

080011d4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a23      	ldr	r2, [pc, #140]	; (8001280 <HAL_CAN_MspInit+0xac>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d13f      	bne.n	8001276 <HAL_CAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011f6:	4b23      	ldr	r3, [pc, #140]	; (8001284 <HAL_CAN_MspInit+0xb0>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	4a22      	ldr	r2, [pc, #136]	; (8001284 <HAL_CAN_MspInit+0xb0>)
 80011fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001200:	6413      	str	r3, [r2, #64]	; 0x40
 8001202:	4b20      	ldr	r3, [pc, #128]	; (8001284 <HAL_CAN_MspInit+0xb0>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800120e:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <HAL_CAN_MspInit+0xb0>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a1c      	ldr	r2, [pc, #112]	; (8001284 <HAL_CAN_MspInit+0xb0>)
 8001214:	f043 0308 	orr.w	r3, r3, #8
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <HAL_CAN_MspInit+0xb0>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001226:	2303      	movs	r3, #3
 8001228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001236:	2309      	movs	r3, #9
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	4811      	ldr	r0, [pc, #68]	; (8001288 <HAL_CAN_MspInit+0xb4>)
 8001242:	f002 f85f 	bl	8003304 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2105      	movs	r1, #5
 800124a:	2013      	movs	r0, #19
 800124c:	f001 f981 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001250:	2013      	movs	r0, #19
 8001252:	f001 f99a 	bl	800258a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2105      	movs	r1, #5
 800125a:	2014      	movs	r0, #20
 800125c:	f001 f979 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001260:	2014      	movs	r0, #20
 8001262:	f001 f992 	bl	800258a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2105      	movs	r1, #5
 800126a:	2015      	movs	r0, #21
 800126c:	f001 f971 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001270:	2015      	movs	r0, #21
 8001272:	f001 f98a 	bl	800258a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001276:	bf00      	nop
 8001278:	3728      	adds	r7, #40	; 0x28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40006400 	.word	0x40006400
 8001284:	40023800 	.word	0x40023800
 8001288:	40020c00 	.word	0x40020c00

0800128c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08e      	sub	sp, #56	; 0x38
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a4e      	ldr	r2, [pc, #312]	; (80013e4 <HAL_ETH_MspInit+0x158>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	f040 8096 	bne.w	80013dc <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80012b0:	4b4d      	ldr	r3, [pc, #308]	; (80013e8 <HAL_ETH_MspInit+0x15c>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	4a4c      	ldr	r2, [pc, #304]	; (80013e8 <HAL_ETH_MspInit+0x15c>)
 80012b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012ba:	6313      	str	r3, [r2, #48]	; 0x30
 80012bc:	4b4a      	ldr	r3, [pc, #296]	; (80013e8 <HAL_ETH_MspInit+0x15c>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c4:	623b      	str	r3, [r7, #32]
 80012c6:	6a3b      	ldr	r3, [r7, #32]
 80012c8:	4b47      	ldr	r3, [pc, #284]	; (80013e8 <HAL_ETH_MspInit+0x15c>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	4a46      	ldr	r2, [pc, #280]	; (80013e8 <HAL_ETH_MspInit+0x15c>)
 80012ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012d2:	6313      	str	r3, [r2, #48]	; 0x30
 80012d4:	4b44      	ldr	r3, [pc, #272]	; (80013e8 <HAL_ETH_MspInit+0x15c>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012dc:	61fb      	str	r3, [r7, #28]
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	4b41      	ldr	r3, [pc, #260]	; (80013e8 <HAL_ETH_MspInit+0x15c>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	4a40      	ldr	r2, [pc, #256]	; (80013e8 <HAL_ETH_MspInit+0x15c>)
 80012e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80012ea:	6313      	str	r3, [r2, #48]	; 0x30
 80012ec:	4b3e      	ldr	r3, [pc, #248]	; (80013e8 <HAL_ETH_MspInit+0x15c>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012f4:	61bb      	str	r3, [r7, #24]
 80012f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f8:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <HAL_ETH_MspInit+0x15c>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	4a3a      	ldr	r2, [pc, #232]	; (80013e8 <HAL_ETH_MspInit+0x15c>)
 80012fe:	f043 0304 	orr.w	r3, r3, #4
 8001302:	6313      	str	r3, [r2, #48]	; 0x30
 8001304:	4b38      	ldr	r3, [pc, #224]	; (80013e8 <HAL_ETH_MspInit+0x15c>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001310:	4b35      	ldr	r3, [pc, #212]	; (80013e8 <HAL_ETH_MspInit+0x15c>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001314:	4a34      	ldr	r2, [pc, #208]	; (80013e8 <HAL_ETH_MspInit+0x15c>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6313      	str	r3, [r2, #48]	; 0x30
 800131c:	4b32      	ldr	r3, [pc, #200]	; (80013e8 <HAL_ETH_MspInit+0x15c>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001328:	4b2f      	ldr	r3, [pc, #188]	; (80013e8 <HAL_ETH_MspInit+0x15c>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132c:	4a2e      	ldr	r2, [pc, #184]	; (80013e8 <HAL_ETH_MspInit+0x15c>)
 800132e:	f043 0302 	orr.w	r3, r3, #2
 8001332:	6313      	str	r3, [r2, #48]	; 0x30
 8001334:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <HAL_ETH_MspInit+0x15c>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001340:	4b29      	ldr	r3, [pc, #164]	; (80013e8 <HAL_ETH_MspInit+0x15c>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	4a28      	ldr	r2, [pc, #160]	; (80013e8 <HAL_ETH_MspInit+0x15c>)
 8001346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800134a:	6313      	str	r3, [r2, #48]	; 0x30
 800134c:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <HAL_ETH_MspInit+0x15c>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001358:	2332      	movs	r3, #50	; 0x32
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001364:	2303      	movs	r3, #3
 8001366:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001368:	230b      	movs	r3, #11
 800136a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800136c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001370:	4619      	mov	r1, r3
 8001372:	481e      	ldr	r0, [pc, #120]	; (80013ec <HAL_ETH_MspInit+0x160>)
 8001374:	f001 ffc6 	bl	8003304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001378:	2386      	movs	r3, #134	; 0x86
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001388:	230b      	movs	r3, #11
 800138a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001390:	4619      	mov	r1, r3
 8001392:	4817      	ldr	r0, [pc, #92]	; (80013f0 <HAL_ETH_MspInit+0x164>)
 8001394:	f001 ffb6 	bl	8003304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013aa:	230b      	movs	r3, #11
 80013ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b2:	4619      	mov	r1, r3
 80013b4:	480f      	ldr	r0, [pc, #60]	; (80013f4 <HAL_ETH_MspInit+0x168>)
 80013b6:	f001 ffa5 	bl	8003304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80013ba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013cc:	230b      	movs	r3, #11
 80013ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d4:	4619      	mov	r1, r3
 80013d6:	4808      	ldr	r0, [pc, #32]	; (80013f8 <HAL_ETH_MspInit+0x16c>)
 80013d8:	f001 ff94 	bl	8003304 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80013dc:	bf00      	nop
 80013de:	3738      	adds	r7, #56	; 0x38
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40028000 	.word	0x40028000
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020000 	.word	0x40020000
 80013f4:	40020400 	.word	0x40020400
 80013f8:	40021800 	.word	0x40021800

080013fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b0ae      	sub	sp, #184	; 0xb8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2290      	movs	r2, #144	; 0x90
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f007 fc8d 	bl	8008d3c <memset>
  if(huart->Instance==USART3)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a3d      	ldr	r2, [pc, #244]	; (800151c <HAL_UART_MspInit+0x120>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d172      	bne.n	8001512 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800142c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001430:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001432:	2300      	movs	r3, #0
 8001434:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4618      	mov	r0, r3
 800143c:	f002 ffbe 	bl	80043bc <HAL_RCCEx_PeriphCLKConfig>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001446:	f7ff fe98 	bl	800117a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800144a:	4b35      	ldr	r3, [pc, #212]	; (8001520 <HAL_UART_MspInit+0x124>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a34      	ldr	r2, [pc, #208]	; (8001520 <HAL_UART_MspInit+0x124>)
 8001450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b32      	ldr	r3, [pc, #200]	; (8001520 <HAL_UART_MspInit+0x124>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001462:	4b2f      	ldr	r3, [pc, #188]	; (8001520 <HAL_UART_MspInit+0x124>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a2e      	ldr	r2, [pc, #184]	; (8001520 <HAL_UART_MspInit+0x124>)
 8001468:	f043 0308 	orr.w	r3, r3, #8
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b2c      	ldr	r3, [pc, #176]	; (8001520 <HAL_UART_MspInit+0x124>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800147a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800147e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001494:	2307      	movs	r3, #7
 8001496:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800149a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800149e:	4619      	mov	r1, r3
 80014a0:	4820      	ldr	r0, [pc, #128]	; (8001524 <HAL_UART_MspInit+0x128>)
 80014a2:	f001 ff2f 	bl	8003304 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80014a6:	4b20      	ldr	r3, [pc, #128]	; (8001528 <HAL_UART_MspInit+0x12c>)
 80014a8:	4a20      	ldr	r2, [pc, #128]	; (800152c <HAL_UART_MspInit+0x130>)
 80014aa:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80014ac:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <HAL_UART_MspInit+0x12c>)
 80014ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014b2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014b4:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <HAL_UART_MspInit+0x12c>)
 80014b6:	2240      	movs	r2, #64	; 0x40
 80014b8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ba:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <HAL_UART_MspInit+0x12c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_UART_MspInit+0x12c>)
 80014c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014c6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014c8:	4b17      	ldr	r3, [pc, #92]	; (8001528 <HAL_UART_MspInit+0x12c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ce:	4b16      	ldr	r3, [pc, #88]	; (8001528 <HAL_UART_MspInit+0x12c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80014d4:	4b14      	ldr	r3, [pc, #80]	; (8001528 <HAL_UART_MspInit+0x12c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <HAL_UART_MspInit+0x12c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <HAL_UART_MspInit+0x12c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80014e6:	4810      	ldr	r0, [pc, #64]	; (8001528 <HAL_UART_MspInit+0x12c>)
 80014e8:	f001 f86a 	bl	80025c0 <HAL_DMA_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 80014f2:	f7ff fe42 	bl	800117a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <HAL_UART_MspInit+0x12c>)
 80014fa:	671a      	str	r2, [r3, #112]	; 0x70
 80014fc:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <HAL_UART_MspInit+0x12c>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2105      	movs	r1, #5
 8001506:	2027      	movs	r0, #39	; 0x27
 8001508:	f001 f823 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800150c:	2027      	movs	r0, #39	; 0x27
 800150e:	f001 f83c 	bl	800258a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001512:	bf00      	nop
 8001514:	37b8      	adds	r7, #184	; 0xb8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40004800 	.word	0x40004800
 8001520:	40023800 	.word	0x40023800
 8001524:	40020c00 	.word	0x40020c00
 8001528:	20002cf0 	.word	0x20002cf0
 800152c:	40026058 	.word	0x40026058

08001530 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b0ae      	sub	sp, #184	; 0xb8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2290      	movs	r2, #144	; 0x90
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f007 fbf3 	bl	8008d3c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800155e:	d159      	bne.n	8001614 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001560:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001564:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001566:	2300      	movs	r3, #0
 8001568:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4618      	mov	r0, r3
 8001572:	f002 ff23 	bl	80043bc <HAL_RCCEx_PeriphCLKConfig>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800157c:	f7ff fdfd 	bl	800117a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001580:	4b26      	ldr	r3, [pc, #152]	; (800161c <HAL_PCD_MspInit+0xec>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001584:	4a25      	ldr	r2, [pc, #148]	; (800161c <HAL_PCD_MspInit+0xec>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6313      	str	r3, [r2, #48]	; 0x30
 800158c:	4b23      	ldr	r3, [pc, #140]	; (800161c <HAL_PCD_MspInit+0xec>)
 800158e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001598:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800159c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015b2:	230a      	movs	r3, #10
 80015b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015bc:	4619      	mov	r1, r3
 80015be:	4818      	ldr	r0, [pc, #96]	; (8001620 <HAL_PCD_MspInit+0xf0>)
 80015c0:	f001 fea0 	bl	8003304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80015c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015dc:	4619      	mov	r1, r3
 80015de:	4810      	ldr	r0, [pc, #64]	; (8001620 <HAL_PCD_MspInit+0xf0>)
 80015e0:	f001 fe90 	bl	8003304 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015e4:	4b0d      	ldr	r3, [pc, #52]	; (800161c <HAL_PCD_MspInit+0xec>)
 80015e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e8:	4a0c      	ldr	r2, [pc, #48]	; (800161c <HAL_PCD_MspInit+0xec>)
 80015ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ee:	6353      	str	r3, [r2, #52]	; 0x34
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <HAL_PCD_MspInit+0xec>)
 80015f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <HAL_PCD_MspInit+0xec>)
 80015fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001600:	4a06      	ldr	r2, [pc, #24]	; (800161c <HAL_PCD_MspInit+0xec>)
 8001602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001606:	6453      	str	r3, [r2, #68]	; 0x44
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <HAL_PCD_MspInit+0xec>)
 800160a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001614:	bf00      	nop
 8001616:	37b8      	adds	r7, #184	; 0xb8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40023800 	.word	0x40023800
 8001620:	40020000 	.word	0x40020000

08001624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <NMI_Handler+0x4>

0800162a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800162e:	e7fe      	b.n	800162e <HardFault_Handler+0x4>

08001630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <MemManage_Handler+0x4>

08001636 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163a:	e7fe      	b.n	800163a <BusFault_Handler+0x4>

0800163c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <UsageFault_Handler+0x4>

08001642 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001654:	f000 f958 	bl	8001908 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001658:	f006 fad0 	bl	8007bfc <xTaskGetSchedulerState>
 800165c:	4603      	mov	r3, r0
 800165e:	2b01      	cmp	r3, #1
 8001660:	d001      	beq.n	8001666 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001662:	f007 f8b9 	bl	80087d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <DMA1_Stream3_IRQHandler+0x10>)
 8001672:	f001 f8e5 	bl	8002840 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20002cf0 	.word	0x20002cf0

08001680 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <CAN1_TX_IRQHandler+0x10>)
 8001686:	f000 fc95 	bl	8001fb4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20002b90 	.word	0x20002b90

08001694 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <CAN1_RX0_IRQHandler+0x10>)
 800169a:	f000 fc8b 	bl	8001fb4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20002b90 	.word	0x20002b90

080016a8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <CAN1_RX1_IRQHandler+0x10>)
 80016ae:	f000 fc81 	bl	8001fb4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20002b90 	.word	0x20002b90

080016bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <USART3_IRQHandler+0x10>)
 80016c2:	f003 fb75 	bl	8004db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20002c68 	.word	0x20002c68

080016d0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	e00a      	b.n	80016f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016e2:	f3af 8000 	nop.w
 80016e6:	4601      	mov	r1, r0
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	1c5a      	adds	r2, r3, #1
 80016ec:	60ba      	str	r2, [r7, #8]
 80016ee:	b2ca      	uxtb	r2, r1
 80016f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	3301      	adds	r3, #1
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	dbf0      	blt.n	80016e2 <_read+0x12>
  }

  return len;
 8001700:	687b      	ldr	r3, [r7, #4]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b086      	sub	sp, #24
 800170e:	af00      	add	r7, sp, #0
 8001710:	60f8      	str	r0, [r7, #12]
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	e009      	b.n	8001730 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	1c5a      	adds	r2, r3, #1
 8001720:	60ba      	str	r2, [r7, #8]
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fa2b 	bl	8000b80 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	3301      	adds	r3, #1
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	429a      	cmp	r2, r3
 8001736:	dbf1      	blt.n	800171c <_write+0x12>
  }
  return len;
 8001738:	687b      	ldr	r3, [r7, #4]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <_close>:

int _close(int file)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800176a:	605a      	str	r2, [r3, #4]
  return 0;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <_isatty>:

int _isatty(int file)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001782:	2301      	movs	r3, #1
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b4:	4a14      	ldr	r2, [pc, #80]	; (8001808 <_sbrk+0x5c>)
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <_sbrk+0x60>)
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <_sbrk+0x64>)
 80017ca:	4a12      	ldr	r2, [pc, #72]	; (8001814 <_sbrk+0x68>)
 80017cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d207      	bcs.n	80017ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017dc:	f007 fa76 	bl	8008ccc <__errno>
 80017e0:	4603      	mov	r3, r0
 80017e2:	220c      	movs	r2, #12
 80017e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ea:	e009      	b.n	8001800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f2:	4b07      	ldr	r3, [pc, #28]	; (8001810 <_sbrk+0x64>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	4a05      	ldr	r2, [pc, #20]	; (8001810 <_sbrk+0x64>)
 80017fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017fe:	68fb      	ldr	r3, [r7, #12]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20080000 	.word	0x20080000
 800180c:	00000400 	.word	0x00000400
 8001810:	20004360 	.word	0x20004360
 8001814:	20008200 	.word	0x20008200

08001818 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <SystemInit+0x20>)
 800181e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <SystemInit+0x20>)
 8001824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800183c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001874 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001840:	480d      	ldr	r0, [pc, #52]	; (8001878 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001842:	490e      	ldr	r1, [pc, #56]	; (800187c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001844:	4a0e      	ldr	r2, [pc, #56]	; (8001880 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001848:	e002      	b.n	8001850 <LoopCopyDataInit>

0800184a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800184c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184e:	3304      	adds	r3, #4

08001850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001854:	d3f9      	bcc.n	800184a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001856:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001858:	4c0b      	ldr	r4, [pc, #44]	; (8001888 <LoopFillZerobss+0x26>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800185c:	e001      	b.n	8001862 <LoopFillZerobss>

0800185e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001860:	3204      	adds	r2, #4

08001862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001864:	d3fb      	bcc.n	800185e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001866:	f7ff ffd7 	bl	8001818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800186a:	f007 fa35 	bl	8008cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800186e:	f7ff f9e5 	bl	8000c3c <main>
  bx  lr    
 8001872:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001874:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800187c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001880:	08009ec4 	.word	0x08009ec4
  ldr r2, =_sbss
 8001884:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8001888:	20008200 	.word	0x20008200

0800188c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC_IRQHandler>

0800188e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001892:	2003      	movs	r0, #3
 8001894:	f000 fe52 	bl	800253c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001898:	200f      	movs	r0, #15
 800189a:	f000 f805 	bl	80018a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800189e:	f7ff fc71 	bl	8001184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_InitTick+0x54>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_InitTick+0x58>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018be:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 fe6d 	bl	80025a6 <HAL_SYSTICK_Config>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00e      	b.n	80018f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b0f      	cmp	r3, #15
 80018da:	d80a      	bhi.n	80018f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018dc:	2200      	movs	r2, #0
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f000 fe35 	bl	8002552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e8:	4a06      	ldr	r2, [pc, #24]	; (8001904 <HAL_InitTick+0x5c>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	e000      	b.n	80018f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000000 	.word	0x20000000
 8001900:	20000008 	.word	0x20000008
 8001904:	20000004 	.word	0x20000004

08001908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_IncTick+0x20>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x24>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4413      	add	r3, r2
 8001918:	4a04      	ldr	r2, [pc, #16]	; (800192c <HAL_IncTick+0x24>)
 800191a:	6013      	str	r3, [r2, #0]
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000008 	.word	0x20000008
 800192c:	20004364 	.word	0x20004364

08001930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return uwTick;
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <HAL_GetTick+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20004364 	.word	0x20004364

08001948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001950:	f7ff ffee 	bl	8001930 <HAL_GetTick>
 8001954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001960:	d005      	beq.n	800196e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_Delay+0x44>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800196e:	bf00      	nop
 8001970:	f7ff ffde 	bl	8001930 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	429a      	cmp	r2, r3
 800197e:	d8f7      	bhi.n	8001970 <HAL_Delay+0x28>
  {
  }
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000008 	.word	0x20000008

08001990 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e0ed      	b.n	8001b7e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d102      	bne.n	80019b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff fc10 	bl	80011d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 0201 	orr.w	r2, r2, #1
 80019c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019c4:	f7ff ffb4 	bl	8001930 <HAL_GetTick>
 80019c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019ca:	e012      	b.n	80019f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019cc:	f7ff ffb0 	bl	8001930 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b0a      	cmp	r3, #10
 80019d8:	d90b      	bls.n	80019f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2205      	movs	r2, #5
 80019ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e0c5      	b.n	8001b7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0e5      	beq.n	80019cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0202 	bic.w	r2, r2, #2
 8001a0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a10:	f7ff ff8e 	bl	8001930 <HAL_GetTick>
 8001a14:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a16:	e012      	b.n	8001a3e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a18:	f7ff ff8a 	bl	8001930 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b0a      	cmp	r3, #10
 8001a24:	d90b      	bls.n	8001a3e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2205      	movs	r2, #5
 8001a36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e09f      	b.n	8001b7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1e5      	bne.n	8001a18 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7e1b      	ldrb	r3, [r3, #24]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d108      	bne.n	8001a66 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	e007      	b.n	8001a76 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	7e5b      	ldrb	r3, [r3, #25]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d108      	bne.n	8001a90 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	e007      	b.n	8001aa0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7e9b      	ldrb	r3, [r3, #26]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d108      	bne.n	8001aba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0220 	orr.w	r2, r2, #32
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	e007      	b.n	8001aca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 0220 	bic.w	r2, r2, #32
 8001ac8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	7edb      	ldrb	r3, [r3, #27]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d108      	bne.n	8001ae4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0210 	bic.w	r2, r2, #16
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	e007      	b.n	8001af4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0210 	orr.w	r2, r2, #16
 8001af2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7f1b      	ldrb	r3, [r3, #28]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d108      	bne.n	8001b0e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0208 	orr.w	r2, r2, #8
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	e007      	b.n	8001b1e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0208 	bic.w	r2, r2, #8
 8001b1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	7f5b      	ldrb	r3, [r3, #29]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d108      	bne.n	8001b38 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f042 0204 	orr.w	r2, r2, #4
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	e007      	b.n	8001b48 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0204 	bic.w	r2, r2, #4
 8001b46:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	ea42 0103 	orr.w	r1, r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	1e5a      	subs	r2, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b089      	sub	sp, #36	; 0x24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ba4:	7ffb      	ldrb	r3, [r7, #31]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d003      	beq.n	8001bb2 <HAL_CAN_AddTxMessage+0x2c>
 8001baa:	7ffb      	ldrb	r3, [r7, #31]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	f040 80ad 	bne.w	8001d0c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10a      	bne.n	8001bd2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d105      	bne.n	8001bd2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 8095 	beq.w	8001cfc <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	0e1b      	lsrs	r3, r3, #24
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001bdc:	2201      	movs	r2, #1
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	409a      	lsls	r2, r3
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10d      	bne.n	8001c0a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001bf8:	68f9      	ldr	r1, [r7, #12]
 8001bfa:	6809      	ldr	r1, [r1, #0]
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	3318      	adds	r3, #24
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	440b      	add	r3, r1
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	e00f      	b.n	8001c2a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c14:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c1a:	68f9      	ldr	r1, [r7, #12]
 8001c1c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001c1e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	3318      	adds	r3, #24
 8001c24:	011b      	lsls	r3, r3, #4
 8001c26:	440b      	add	r3, r1
 8001c28:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6819      	ldr	r1, [r3, #0]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	3318      	adds	r3, #24
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	440b      	add	r3, r1
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	7d1b      	ldrb	r3, [r3, #20]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d111      	bne.n	8001c6a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	3318      	adds	r3, #24
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	4413      	add	r3, r2
 8001c52:	3304      	adds	r3, #4
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	6811      	ldr	r1, [r2, #0]
 8001c5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	3318      	adds	r3, #24
 8001c62:	011b      	lsls	r3, r3, #4
 8001c64:	440b      	add	r3, r1
 8001c66:	3304      	adds	r3, #4
 8001c68:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3307      	adds	r3, #7
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	061a      	lsls	r2, r3, #24
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3306      	adds	r3, #6
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	041b      	lsls	r3, r3, #16
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3305      	adds	r3, #5
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	021b      	lsls	r3, r3, #8
 8001c84:	4313      	orrs	r3, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	3204      	adds	r2, #4
 8001c8a:	7812      	ldrb	r2, [r2, #0]
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	6811      	ldr	r1, [r2, #0]
 8001c92:	ea43 0200 	orr.w	r2, r3, r0
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	011b      	lsls	r3, r3, #4
 8001c9a:	440b      	add	r3, r1
 8001c9c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001ca0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3303      	adds	r3, #3
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	061a      	lsls	r2, r3, #24
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3302      	adds	r3, #2
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	041b      	lsls	r3, r3, #16
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	021b      	lsls	r3, r3, #8
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	7812      	ldrb	r2, [r2, #0]
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	6811      	ldr	r1, [r2, #0]
 8001cc8:	ea43 0200 	orr.w	r2, r3, r0
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	011b      	lsls	r3, r3, #4
 8001cd0:	440b      	add	r3, r1
 8001cd2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001cd6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	3318      	adds	r3, #24
 8001ce0:	011b      	lsls	r3, r3, #4
 8001ce2:	4413      	add	r3, r2
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	6811      	ldr	r1, [r2, #0]
 8001cea:	f043 0201 	orr.w	r2, r3, #1
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	3318      	adds	r3, #24
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	440b      	add	r3, r1
 8001cf6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e00e      	b.n	8001d1a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e006      	b.n	8001d1a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
  }
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3724      	adds	r7, #36	; 0x24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b085      	sub	sp, #20
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d38:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001d3a:	7afb      	ldrb	r3, [r7, #11]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d002      	beq.n	8001d46 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001d40:	7afb      	ldrb	r3, [r7, #11]
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d11d      	bne.n	8001d82 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	3301      	adds	r3, #1
 8001d58:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d002      	beq.n	8001d6e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001d82:	68fb      	ldr	r3, [r7, #12]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001d90:	b480      	push	{r7}
 8001d92:	b087      	sub	sp, #28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
 8001d9c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001da6:	7dfb      	ldrb	r3, [r7, #23]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d003      	beq.n	8001db4 <HAL_CAN_GetRxMessage+0x24>
 8001dac:	7dfb      	ldrb	r3, [r7, #23]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	f040 80f3 	bne.w	8001f9a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10e      	bne.n	8001dd8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d116      	bne.n	8001df6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0e7      	b.n	8001fa8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d107      	bne.n	8001df6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e0d8      	b.n	8001fa8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	331b      	adds	r3, #27
 8001dfe:	011b      	lsls	r3, r3, #4
 8001e00:	4413      	add	r3, r2
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0204 	and.w	r2, r3, #4
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10c      	bne.n	8001e2e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	331b      	adds	r3, #27
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	4413      	add	r3, r2
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	0d5b      	lsrs	r3, r3, #21
 8001e24:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	e00b      	b.n	8001e46 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	331b      	adds	r3, #27
 8001e36:	011b      	lsls	r3, r3, #4
 8001e38:	4413      	add	r3, r2
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	08db      	lsrs	r3, r3, #3
 8001e3e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	331b      	adds	r3, #27
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	4413      	add	r3, r2
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0202 	and.w	r2, r3, #2
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	331b      	adds	r3, #27
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	4413      	add	r3, r2
 8001e68:	3304      	adds	r3, #4
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 020f 	and.w	r2, r3, #15
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	331b      	adds	r3, #27
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	4413      	add	r3, r2
 8001e80:	3304      	adds	r3, #4
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	331b      	adds	r3, #27
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	4413      	add	r3, r2
 8001e98:	3304      	adds	r3, #4
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	0c1b      	lsrs	r3, r3, #16
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	011b      	lsls	r3, r3, #4
 8001eac:	4413      	add	r3, r2
 8001eae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	011b      	lsls	r3, r3, #4
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	0a1a      	lsrs	r2, r3, #8
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	0c1a      	lsrs	r2, r3, #16
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	3302      	adds	r3, #2
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	011b      	lsls	r3, r3, #4
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	0e1a      	lsrs	r2, r3, #24
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	3303      	adds	r3, #3
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	4413      	add	r3, r2
 8001f12:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	011b      	lsls	r3, r3, #4
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	0a1a      	lsrs	r2, r3, #8
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	3305      	adds	r3, #5
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	4413      	add	r3, r2
 8001f44:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	0c1a      	lsrs	r2, r3, #16
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	3306      	adds	r3, #6
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	0e1a      	lsrs	r2, r3, #24
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	3307      	adds	r3, #7
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d108      	bne.n	8001f86 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0220 	orr.w	r2, r2, #32
 8001f82:	60da      	str	r2, [r3, #12]
 8001f84:	e007      	b.n	8001f96 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f042 0220 	orr.w	r2, r2, #32
 8001f94:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	e006      	b.n	8001fa8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
  }
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	371c      	adds	r7, #28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	; 0x28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d07c      	beq.n	80020f4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d023      	beq.n	800204c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2201      	movs	r2, #1
 800200a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7fe fdc6 	bl	8000ba8 <HAL_CAN_TxMailbox0CompleteCallback>
 800201c:	e016      	b.n	800204c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d004      	beq.n	8002032 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
 8002030:	e00c      	b.n	800204c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d004      	beq.n	8002046 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
 8002044:	e002      	b.n	800204c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7fe fdb8 	bl	8000bbc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002052:	2b00      	cmp	r3, #0
 8002054:	d024      	beq.n	80020a0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800205e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7fe fdb0 	bl	8000bd0 <HAL_CAN_TxMailbox1CompleteCallback>
 8002070:	e016      	b.n	80020a0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002078:	2b00      	cmp	r3, #0
 800207a:	d004      	beq.n	8002086 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
 8002084:	e00c      	b.n	80020a0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800208c:	2b00      	cmp	r3, #0
 800208e:	d004      	beq.n	800209a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
 8002098:	e002      	b.n	80020a0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7fe fda2 	bl	8000be4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d024      	beq.n	80020f4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7fe fd9a 	bl	8000bf8 <HAL_CAN_TxMailbox2CompleteCallback>
 80020c4:	e016      	b.n	80020f4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d004      	beq.n	80020da <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
 80020d8:	e00c      	b.n	80020f4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d004      	beq.n	80020ee <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
 80020ec:	e002      	b.n	80020f4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7fe fd8c 	bl	8000c0c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00c      	beq.n	8002118 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	2b00      	cmp	r3, #0
 8002106:	d007      	beq.n	8002118 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800210e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2210      	movs	r2, #16
 8002116:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00b      	beq.n	800213a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d006      	beq.n	800213a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2208      	movs	r2, #8
 8002132:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f8f4 	bl	8002322 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d009      	beq.n	8002158 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d002      	beq.n	8002158 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7fe fd64 	bl	8000c20 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002158:	6a3b      	ldr	r3, [r7, #32]
 800215a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00c      	beq.n	800217c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b00      	cmp	r3, #0
 800216a:	d007      	beq.n	800217c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002172:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2210      	movs	r2, #16
 800217a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	f003 0320 	and.w	r3, r3, #32
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00b      	beq.n	800219e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	2b00      	cmp	r3, #0
 800218e:	d006      	beq.n	800219e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2208      	movs	r2, #8
 8002196:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f8d6 	bl	800234a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d009      	beq.n	80021bc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f8bd 	bl	8002336 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00b      	beq.n	80021de <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d006      	beq.n	80021de <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2210      	movs	r2, #16
 80021d6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f8c0 	bl	800235e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80021de:	6a3b      	ldr	r3, [r7, #32]
 80021e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00b      	beq.n	8002200 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d006      	beq.n	8002200 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2208      	movs	r2, #8
 80021f8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f8b9 	bl	8002372 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d07b      	beq.n	8002302 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d072      	beq.n	80022fa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002214:	6a3b      	ldr	r3, [r7, #32]
 8002216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221a:	2b00      	cmp	r3, #0
 800221c:	d008      	beq.n	8002230 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002236:	2b00      	cmp	r3, #0
 8002238:	d008      	beq.n	800224c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	f043 0302 	orr.w	r3, r3, #2
 800224a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002252:	2b00      	cmp	r3, #0
 8002254:	d008      	beq.n	8002268 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	f043 0304 	orr.w	r3, r3, #4
 8002266:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800226e:	2b00      	cmp	r3, #0
 8002270:	d043      	beq.n	80022fa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002278:	2b00      	cmp	r3, #0
 800227a:	d03e      	beq.n	80022fa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002282:	2b60      	cmp	r3, #96	; 0x60
 8002284:	d02b      	beq.n	80022de <HAL_CAN_IRQHandler+0x32a>
 8002286:	2b60      	cmp	r3, #96	; 0x60
 8002288:	d82e      	bhi.n	80022e8 <HAL_CAN_IRQHandler+0x334>
 800228a:	2b50      	cmp	r3, #80	; 0x50
 800228c:	d022      	beq.n	80022d4 <HAL_CAN_IRQHandler+0x320>
 800228e:	2b50      	cmp	r3, #80	; 0x50
 8002290:	d82a      	bhi.n	80022e8 <HAL_CAN_IRQHandler+0x334>
 8002292:	2b40      	cmp	r3, #64	; 0x40
 8002294:	d019      	beq.n	80022ca <HAL_CAN_IRQHandler+0x316>
 8002296:	2b40      	cmp	r3, #64	; 0x40
 8002298:	d826      	bhi.n	80022e8 <HAL_CAN_IRQHandler+0x334>
 800229a:	2b30      	cmp	r3, #48	; 0x30
 800229c:	d010      	beq.n	80022c0 <HAL_CAN_IRQHandler+0x30c>
 800229e:	2b30      	cmp	r3, #48	; 0x30
 80022a0:	d822      	bhi.n	80022e8 <HAL_CAN_IRQHandler+0x334>
 80022a2:	2b10      	cmp	r3, #16
 80022a4:	d002      	beq.n	80022ac <HAL_CAN_IRQHandler+0x2f8>
 80022a6:	2b20      	cmp	r3, #32
 80022a8:	d005      	beq.n	80022b6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80022aa:	e01d      	b.n	80022e8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	f043 0308 	orr.w	r3, r3, #8
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022b4:	e019      	b.n	80022ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	f043 0310 	orr.w	r3, r3, #16
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022be:	e014      	b.n	80022ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	f043 0320 	orr.w	r3, r3, #32
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022c8:	e00f      	b.n	80022ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022d2:	e00a      	b.n	80022ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022dc:	e005      	b.n	80022ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022e6:	e000      	b.n	80022ea <HAL_CAN_IRQHandler+0x336>
            break;
 80022e8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699a      	ldr	r2, [r3, #24]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80022f8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2204      	movs	r2, #4
 8002300:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	2b00      	cmp	r3, #0
 8002306:	d008      	beq.n	800231a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f836 	bl	8002386 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800231a:	bf00      	nop
 800231c:	3728      	adds	r7, #40	; 0x28
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <__NVIC_SetPriorityGrouping+0x40>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023b8:	4013      	ands	r3, r2
 80023ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <__NVIC_SetPriorityGrouping+0x44>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ca:	4a04      	ldr	r2, [pc, #16]	; (80023dc <__NVIC_SetPriorityGrouping+0x40>)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	60d3      	str	r3, [r2, #12]
}
 80023d0:	bf00      	nop
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	e000ed00 	.word	0xe000ed00
 80023e0:	05fa0000 	.word	0x05fa0000

080023e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e8:	4b04      	ldr	r3, [pc, #16]	; (80023fc <__NVIC_GetPriorityGrouping+0x18>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	0a1b      	lsrs	r3, r3, #8
 80023ee:	f003 0307 	and.w	r3, r3, #7
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	2b00      	cmp	r3, #0
 8002410:	db0b      	blt.n	800242a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	f003 021f 	and.w	r2, r3, #31
 8002418:	4907      	ldr	r1, [pc, #28]	; (8002438 <__NVIC_EnableIRQ+0x38>)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	2001      	movs	r0, #1
 8002422:	fa00 f202 	lsl.w	r2, r0, r2
 8002426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	e000e100 	.word	0xe000e100

0800243c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	6039      	str	r1, [r7, #0]
 8002446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244c:	2b00      	cmp	r3, #0
 800244e:	db0a      	blt.n	8002466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	b2da      	uxtb	r2, r3
 8002454:	490c      	ldr	r1, [pc, #48]	; (8002488 <__NVIC_SetPriority+0x4c>)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	0112      	lsls	r2, r2, #4
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	440b      	add	r3, r1
 8002460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002464:	e00a      	b.n	800247c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	b2da      	uxtb	r2, r3
 800246a:	4908      	ldr	r1, [pc, #32]	; (800248c <__NVIC_SetPriority+0x50>)
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	3b04      	subs	r3, #4
 8002474:	0112      	lsls	r2, r2, #4
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	440b      	add	r3, r1
 800247a:	761a      	strb	r2, [r3, #24]
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	e000e100 	.word	0xe000e100
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002490:	b480      	push	{r7}
 8002492:	b089      	sub	sp, #36	; 0x24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f1c3 0307 	rsb	r3, r3, #7
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	bf28      	it	cs
 80024ae:	2304      	movcs	r3, #4
 80024b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3304      	adds	r3, #4
 80024b6:	2b06      	cmp	r3, #6
 80024b8:	d902      	bls.n	80024c0 <NVIC_EncodePriority+0x30>
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3b03      	subs	r3, #3
 80024be:	e000      	b.n	80024c2 <NVIC_EncodePriority+0x32>
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c4:	f04f 32ff 	mov.w	r2, #4294967295
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43da      	mvns	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	401a      	ands	r2, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d8:	f04f 31ff 	mov.w	r1, #4294967295
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	fa01 f303 	lsl.w	r3, r1, r3
 80024e2:	43d9      	mvns	r1, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e8:	4313      	orrs	r3, r2
         );
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3724      	adds	r7, #36	; 0x24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3b01      	subs	r3, #1
 8002504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002508:	d301      	bcc.n	800250e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800250a:	2301      	movs	r3, #1
 800250c:	e00f      	b.n	800252e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800250e:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <SysTick_Config+0x40>)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002516:	210f      	movs	r1, #15
 8002518:	f04f 30ff 	mov.w	r0, #4294967295
 800251c:	f7ff ff8e 	bl	800243c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002520:	4b05      	ldr	r3, [pc, #20]	; (8002538 <SysTick_Config+0x40>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002526:	4b04      	ldr	r3, [pc, #16]	; (8002538 <SysTick_Config+0x40>)
 8002528:	2207      	movs	r2, #7
 800252a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	e000e010 	.word	0xe000e010

0800253c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff ff29 	bl	800239c <__NVIC_SetPriorityGrouping>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002552:	b580      	push	{r7, lr}
 8002554:	b086      	sub	sp, #24
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
 800255e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002564:	f7ff ff3e 	bl	80023e4 <__NVIC_GetPriorityGrouping>
 8002568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68b9      	ldr	r1, [r7, #8]
 800256e:	6978      	ldr	r0, [r7, #20]
 8002570:	f7ff ff8e 	bl	8002490 <NVIC_EncodePriority>
 8002574:	4602      	mov	r2, r0
 8002576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800257a:	4611      	mov	r1, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff5d 	bl	800243c <__NVIC_SetPriority>
}
 8002582:	bf00      	nop
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	4603      	mov	r3, r0
 8002592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff31 	bl	8002400 <__NVIC_EnableIRQ>
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff ffa2 	bl	80024f8 <SysTick_Config>
 80025b4:	4603      	mov	r3, r0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025cc:	f7ff f9b0 	bl	8001930 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e099      	b.n	8002710 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2202      	movs	r2, #2
 80025e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0201 	bic.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025fc:	e00f      	b.n	800261e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025fe:	f7ff f997 	bl	8001930 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b05      	cmp	r3, #5
 800260a:	d908      	bls.n	800261e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2220      	movs	r2, #32
 8002610:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2203      	movs	r2, #3
 8002616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e078      	b.n	8002710 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1e8      	bne.n	80025fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	4b38      	ldr	r3, [pc, #224]	; (8002718 <HAL_DMA_Init+0x158>)
 8002638:	4013      	ands	r3, r2
 800263a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800264a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002656:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002662:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	4313      	orrs	r3, r2
 800266e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	2b04      	cmp	r3, #4
 8002676:	d107      	bne.n	8002688 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	4313      	orrs	r3, r2
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	4313      	orrs	r3, r2
 8002686:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f023 0307 	bic.w	r3, r3, #7
 800269e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d117      	bne.n	80026e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00e      	beq.n	80026e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 fa7b 	bl	8002bc0 <DMA_CheckFifoParam>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2240      	movs	r2, #64	; 0x40
 80026d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026de:	2301      	movs	r3, #1
 80026e0:	e016      	b.n	8002710 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 fa32 	bl	8002b54 <DMA_CalcBaseAndBitshift>
 80026f0:	4603      	mov	r3, r0
 80026f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f8:	223f      	movs	r2, #63	; 0x3f
 80026fa:	409a      	lsls	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	e010803f 	.word	0xe010803f

0800271c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800272a:	f7ff f901 	bl	8001930 <HAL_GetTick>
 800272e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d008      	beq.n	800274e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2280      	movs	r2, #128	; 0x80
 8002740:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e052      	b.n	80027f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0216 	bic.w	r2, r2, #22
 800275c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800276c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	d103      	bne.n	800277e <HAL_DMA_Abort+0x62>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800277a:	2b00      	cmp	r3, #0
 800277c:	d007      	beq.n	800278e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0208 	bic.w	r2, r2, #8
 800278c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0201 	bic.w	r2, r2, #1
 800279c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800279e:	e013      	b.n	80027c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027a0:	f7ff f8c6 	bl	8001930 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b05      	cmp	r3, #5
 80027ac:	d90c      	bls.n	80027c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2220      	movs	r2, #32
 80027b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2203      	movs	r2, #3
 80027b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e015      	b.n	80027f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1e4      	bne.n	80027a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027da:	223f      	movs	r2, #63	; 0x3f
 80027dc:	409a      	lsls	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d004      	beq.n	800281a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2280      	movs	r2, #128	; 0x80
 8002814:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e00c      	b.n	8002834 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2205      	movs	r2, #5
 800281e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0201 	bic.w	r2, r2, #1
 8002830:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800284c:	4b8e      	ldr	r3, [pc, #568]	; (8002a88 <HAL_DMA_IRQHandler+0x248>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a8e      	ldr	r2, [pc, #568]	; (8002a8c <HAL_DMA_IRQHandler+0x24c>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	0a9b      	lsrs	r3, r3, #10
 8002858:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286a:	2208      	movs	r2, #8
 800286c:	409a      	lsls	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4013      	ands	r3, r2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d01a      	beq.n	80028ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	d013      	beq.n	80028ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0204 	bic.w	r2, r2, #4
 8002892:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002898:	2208      	movs	r2, #8
 800289a:	409a      	lsls	r2, r3
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a4:	f043 0201 	orr.w	r2, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b0:	2201      	movs	r2, #1
 80028b2:	409a      	lsls	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d012      	beq.n	80028e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ce:	2201      	movs	r2, #1
 80028d0:	409a      	lsls	r2, r3
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028da:	f043 0202 	orr.w	r2, r3, #2
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e6:	2204      	movs	r2, #4
 80028e8:	409a      	lsls	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d012      	beq.n	8002918 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00b      	beq.n	8002918 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002904:	2204      	movs	r2, #4
 8002906:	409a      	lsls	r2, r3
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002910:	f043 0204 	orr.w	r2, r3, #4
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291c:	2210      	movs	r2, #16
 800291e:	409a      	lsls	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4013      	ands	r3, r2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d043      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d03c      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293a:	2210      	movs	r2, #16
 800293c:	409a      	lsls	r2, r3
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d018      	beq.n	8002982 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d108      	bne.n	8002970 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	2b00      	cmp	r3, #0
 8002964:	d024      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	4798      	blx	r3
 800296e:	e01f      	b.n	80029b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002974:	2b00      	cmp	r3, #0
 8002976:	d01b      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	4798      	blx	r3
 8002980:	e016      	b.n	80029b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298c:	2b00      	cmp	r3, #0
 800298e:	d107      	bne.n	80029a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0208 	bic.w	r2, r2, #8
 800299e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b4:	2220      	movs	r2, #32
 80029b6:	409a      	lsls	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 808f 	beq.w	8002ae0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0310 	and.w	r3, r3, #16
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 8087 	beq.w	8002ae0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d6:	2220      	movs	r2, #32
 80029d8:	409a      	lsls	r2, r3
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b05      	cmp	r3, #5
 80029e8:	d136      	bne.n	8002a58 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0216 	bic.w	r2, r2, #22
 80029f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695a      	ldr	r2, [r3, #20]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d103      	bne.n	8002a1a <HAL_DMA_IRQHandler+0x1da>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d007      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0208 	bic.w	r2, r2, #8
 8002a28:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2e:	223f      	movs	r2, #63	; 0x3f
 8002a30:	409a      	lsls	r2, r3
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d07e      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	4798      	blx	r3
        }
        return;
 8002a56:	e079      	b.n	8002b4c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d01d      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10d      	bne.n	8002a90 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d031      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	4798      	blx	r3
 8002a84:	e02c      	b.n	8002ae0 <HAL_DMA_IRQHandler+0x2a0>
 8002a86:	bf00      	nop
 8002a88:	20000000 	.word	0x20000000
 8002a8c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d023      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	4798      	blx	r3
 8002aa0:	e01e      	b.n	8002ae0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10f      	bne.n	8002ad0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0210 	bic.w	r2, r2, #16
 8002abe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d032      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d022      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2205      	movs	r2, #5
 8002af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0201 	bic.w	r2, r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d307      	bcc.n	8002b28 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f2      	bne.n	8002b0c <HAL_DMA_IRQHandler+0x2cc>
 8002b26:	e000      	b.n	8002b2a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b28:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d005      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	4798      	blx	r3
 8002b4a:	e000      	b.n	8002b4e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b4c:	bf00      	nop
    }
  }
}
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	3b10      	subs	r3, #16
 8002b64:	4a13      	ldr	r2, [pc, #76]	; (8002bb4 <DMA_CalcBaseAndBitshift+0x60>)
 8002b66:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6a:	091b      	lsrs	r3, r3, #4
 8002b6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b6e:	4a12      	ldr	r2, [pc, #72]	; (8002bb8 <DMA_CalcBaseAndBitshift+0x64>)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4413      	add	r3, r2
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d908      	bls.n	8002b94 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <DMA_CalcBaseAndBitshift+0x68>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	1d1a      	adds	r2, r3, #4
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	659a      	str	r2, [r3, #88]	; 0x58
 8002b92:	e006      	b.n	8002ba2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <DMA_CalcBaseAndBitshift+0x68>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	aaaaaaab 	.word	0xaaaaaaab
 8002bb8:	08009e14 	.word	0x08009e14
 8002bbc:	fffffc00 	.word	0xfffffc00

08002bc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d11f      	bne.n	8002c1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d856      	bhi.n	8002c8e <DMA_CheckFifoParam+0xce>
 8002be0:	a201      	add	r2, pc, #4	; (adr r2, 8002be8 <DMA_CheckFifoParam+0x28>)
 8002be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be6:	bf00      	nop
 8002be8:	08002bf9 	.word	0x08002bf9
 8002bec:	08002c0b 	.word	0x08002c0b
 8002bf0:	08002bf9 	.word	0x08002bf9
 8002bf4:	08002c8f 	.word	0x08002c8f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d046      	beq.n	8002c92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c08:	e043      	b.n	8002c92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c12:	d140      	bne.n	8002c96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c18:	e03d      	b.n	8002c96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c22:	d121      	bne.n	8002c68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d837      	bhi.n	8002c9a <DMA_CheckFifoParam+0xda>
 8002c2a:	a201      	add	r2, pc, #4	; (adr r2, 8002c30 <DMA_CheckFifoParam+0x70>)
 8002c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c30:	08002c41 	.word	0x08002c41
 8002c34:	08002c47 	.word	0x08002c47
 8002c38:	08002c41 	.word	0x08002c41
 8002c3c:	08002c59 	.word	0x08002c59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
      break;
 8002c44:	e030      	b.n	8002ca8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d025      	beq.n	8002c9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c56:	e022      	b.n	8002c9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c60:	d11f      	bne.n	8002ca2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c66:	e01c      	b.n	8002ca2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d903      	bls.n	8002c76 <DMA_CheckFifoParam+0xb6>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d003      	beq.n	8002c7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c74:	e018      	b.n	8002ca8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	73fb      	strb	r3, [r7, #15]
      break;
 8002c7a:	e015      	b.n	8002ca8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00e      	beq.n	8002ca6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c8c:	e00b      	b.n	8002ca6 <DMA_CheckFifoParam+0xe6>
      break;
 8002c8e:	bf00      	nop
 8002c90:	e00a      	b.n	8002ca8 <DMA_CheckFifoParam+0xe8>
      break;
 8002c92:	bf00      	nop
 8002c94:	e008      	b.n	8002ca8 <DMA_CheckFifoParam+0xe8>
      break;
 8002c96:	bf00      	nop
 8002c98:	e006      	b.n	8002ca8 <DMA_CheckFifoParam+0xe8>
      break;
 8002c9a:	bf00      	nop
 8002c9c:	e004      	b.n	8002ca8 <DMA_CheckFifoParam+0xe8>
      break;
 8002c9e:	bf00      	nop
 8002ca0:	e002      	b.n	8002ca8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ca2:	bf00      	nop
 8002ca4:	e000      	b.n	8002ca8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ca6:	bf00      	nop
    }
  } 
  
  return status; 
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop

08002cb8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e06a      	b.n	8002da0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d106      	bne.n	8002ce2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2223      	movs	r2, #35	; 0x23
 8002cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7fe fad5 	bl	800128c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce2:	4b31      	ldr	r3, [pc, #196]	; (8002da8 <HAL_ETH_Init+0xf0>)
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	4a30      	ldr	r2, [pc, #192]	; (8002da8 <HAL_ETH_Init+0xf0>)
 8002ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cec:	6453      	str	r3, [r2, #68]	; 0x44
 8002cee:	4b2e      	ldr	r3, [pc, #184]	; (8002da8 <HAL_ETH_Init+0xf0>)
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002cfa:	4b2c      	ldr	r3, [pc, #176]	; (8002dac <HAL_ETH_Init+0xf4>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	4a2b      	ldr	r2, [pc, #172]	; (8002dac <HAL_ETH_Init+0xf4>)
 8002d00:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d04:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002d06:	4b29      	ldr	r3, [pc, #164]	; (8002dac <HAL_ETH_Init+0xf4>)
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	4927      	ldr	r1, [pc, #156]	; (8002dac <HAL_ETH_Init+0xf4>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002d14:	4b25      	ldr	r3, [pc, #148]	; (8002dac <HAL_ETH_Init+0xf4>)
 8002d16:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6812      	ldr	r2, [r2, #0]
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d2e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d30:	f7fe fdfe 	bl	8001930 <HAL_GetTick>
 8002d34:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002d36:	e011      	b.n	8002d5c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002d38:	f7fe fdfa 	bl	8001930 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d46:	d909      	bls.n	8002d5c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2204      	movs	r2, #4
 8002d4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	22e0      	movs	r2, #224	; 0xe0
 8002d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e021      	b.n	8002da0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1e4      	bne.n	8002d38 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f958 	bl	8003024 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f9ff 	bl	8003178 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fa55 	bl	800322a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	461a      	mov	r2, r3
 8002d86:	2100      	movs	r1, #0
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f9bd 	bl	8003108 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2210      	movs	r2, #16
 8002d9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40013800 	.word	0x40013800

08002db0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4b51      	ldr	r3, [pc, #324]	; (8002f0c <ETH_SetMACConfig+0x15c>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	7c1b      	ldrb	r3, [r3, #16]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d102      	bne.n	8002dd8 <ETH_SetMACConfig+0x28>
 8002dd2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002dd6:	e000      	b.n	8002dda <ETH_SetMACConfig+0x2a>
 8002dd8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	7c5b      	ldrb	r3, [r3, #17]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d102      	bne.n	8002de8 <ETH_SetMACConfig+0x38>
 8002de2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002de6:	e000      	b.n	8002dea <ETH_SetMACConfig+0x3a>
 8002de8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002dea:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002df0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	7fdb      	ldrb	r3, [r3, #31]
 8002df6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002df8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002dfe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	7f92      	ldrb	r2, [r2, #30]
 8002e04:	2a00      	cmp	r2, #0
 8002e06:	d102      	bne.n	8002e0e <ETH_SetMACConfig+0x5e>
 8002e08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e0c:	e000      	b.n	8002e10 <ETH_SetMACConfig+0x60>
 8002e0e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002e10:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	7f1b      	ldrb	r3, [r3, #28]
 8002e16:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002e18:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002e1e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	791b      	ldrb	r3, [r3, #4]
 8002e24:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002e26:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002e2e:	2a00      	cmp	r2, #0
 8002e30:	d102      	bne.n	8002e38 <ETH_SetMACConfig+0x88>
 8002e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e36:	e000      	b.n	8002e3a <ETH_SetMACConfig+0x8a>
 8002e38:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002e3a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	7bdb      	ldrb	r3, [r3, #15]
 8002e40:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002e42:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002e48:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e50:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e52:	4313      	orrs	r3, r2
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e6a:	2001      	movs	r0, #1
 8002e6c:	f7fe fd6c 	bl	8001948 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002e86:	4013      	ands	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e8e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002e96:	2a00      	cmp	r2, #0
 8002e98:	d101      	bne.n	8002e9e <ETH_SetMACConfig+0xee>
 8002e9a:	2280      	movs	r2, #128	; 0x80
 8002e9c:	e000      	b.n	8002ea0 <ETH_SetMACConfig+0xf0>
 8002e9e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ea0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ea6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002eae:	2a01      	cmp	r2, #1
 8002eb0:	d101      	bne.n	8002eb6 <ETH_SetMACConfig+0x106>
 8002eb2:	2208      	movs	r2, #8
 8002eb4:	e000      	b.n	8002eb8 <ETH_SetMACConfig+0x108>
 8002eb6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002eb8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002ec0:	2a01      	cmp	r2, #1
 8002ec2:	d101      	bne.n	8002ec8 <ETH_SetMACConfig+0x118>
 8002ec4:	2204      	movs	r2, #4
 8002ec6:	e000      	b.n	8002eca <ETH_SetMACConfig+0x11a>
 8002ec8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002eca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002ed2:	2a01      	cmp	r2, #1
 8002ed4:	d101      	bne.n	8002eda <ETH_SetMACConfig+0x12a>
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	e000      	b.n	8002edc <ETH_SetMACConfig+0x12c>
 8002eda:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002edc:	4313      	orrs	r3, r2
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ef4:	2001      	movs	r0, #1
 8002ef6:	f7fe fd27 	bl	8001948 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	619a      	str	r2, [r3, #24]
}
 8002f02:	bf00      	nop
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	ff20810f 	.word	0xff20810f

08002f10 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4b3d      	ldr	r3, [pc, #244]	; (8003020 <ETH_SetDMAConfig+0x110>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	7b1b      	ldrb	r3, [r3, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d102      	bne.n	8002f3c <ETH_SetDMAConfig+0x2c>
 8002f36:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002f3a:	e000      	b.n	8002f3e <ETH_SetDMAConfig+0x2e>
 8002f3c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	7b5b      	ldrb	r3, [r3, #13]
 8002f42:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f44:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	7f52      	ldrb	r2, [r2, #29]
 8002f4a:	2a00      	cmp	r2, #0
 8002f4c:	d102      	bne.n	8002f54 <ETH_SetDMAConfig+0x44>
 8002f4e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f52:	e000      	b.n	8002f56 <ETH_SetDMAConfig+0x46>
 8002f54:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002f56:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	7b9b      	ldrb	r3, [r3, #14]
 8002f5c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002f5e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f64:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	7f1b      	ldrb	r3, [r3, #28]
 8002f6a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002f6c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	7f9b      	ldrb	r3, [r3, #30]
 8002f72:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f74:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f7a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f82:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f84:	4313      	orrs	r3, r2
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f94:	461a      	mov	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	f7fe fcce 	bl	8001948 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	791b      	ldrb	r3, [r3, #4]
 8002fbe:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002fc4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002fca:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002fd0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002fd8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002fda:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002fe2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002fe8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6812      	ldr	r2, [r2, #0]
 8002fee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ff2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ff6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003004:	2001      	movs	r0, #1
 8003006:	f7fe fc9f 	bl	8001948 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003012:	461a      	mov	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6013      	str	r3, [r2, #0]
}
 8003018:	bf00      	nop
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	f8de3f23 	.word	0xf8de3f23

08003024 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b0a6      	sub	sp, #152	; 0x98
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800302c:	2301      	movs	r3, #1
 800302e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003032:	2301      	movs	r3, #1
 8003034:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003038:	2300      	movs	r3, #0
 800303a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800303c:	2300      	movs	r3, #0
 800303e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003042:	2301      	movs	r3, #1
 8003044:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003048:	2300      	movs	r3, #0
 800304a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800304e:	2301      	movs	r3, #1
 8003050:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003054:	2300      	movs	r3, #0
 8003056:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800305a:	2300      	movs	r3, #0
 800305c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003060:	2300      	movs	r3, #0
 8003062:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003064:	2300      	movs	r3, #0
 8003066:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800306a:	2300      	movs	r3, #0
 800306c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800306e:	2300      	movs	r3, #0
 8003070:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003074:	2300      	movs	r3, #0
 8003076:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800307a:	2300      	movs	r3, #0
 800307c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003080:	2300      	movs	r3, #0
 8003082:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003086:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800308a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800308c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003090:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003092:	2300      	movs	r3, #0
 8003094:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003098:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800309c:	4619      	mov	r1, r3
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7ff fe86 	bl	8002db0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80030a4:	2301      	movs	r3, #1
 80030a6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80030a8:	2301      	movs	r3, #1
 80030aa:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80030ac:	2301      	movs	r3, #1
 80030ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80030b2:	2301      	movs	r3, #1
 80030b4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80030ba:	2300      	movs	r3, #0
 80030bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80030c0:	2300      	movs	r3, #0
 80030c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80030c6:	2300      	movs	r3, #0
 80030c8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80030ca:	2301      	movs	r3, #1
 80030cc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80030d0:	2301      	movs	r3, #1
 80030d2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80030d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030d8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80030da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030de:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80030e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030e4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80030e6:	2301      	movs	r3, #1
 80030e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80030f4:	f107 0308 	add.w	r3, r7, #8
 80030f8:	4619      	mov	r1, r3
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff ff08 	bl	8002f10 <ETH_SetDMAConfig>
}
 8003100:	bf00      	nop
 8003102:	3798      	adds	r7, #152	; 0x98
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003108:	b480      	push	{r7}
 800310a:	b087      	sub	sp, #28
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3305      	adds	r3, #5
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	021b      	lsls	r3, r3, #8
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	3204      	adds	r2, #4
 8003120:	7812      	ldrb	r2, [r2, #0]
 8003122:	4313      	orrs	r3, r2
 8003124:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	4b11      	ldr	r3, [pc, #68]	; (8003170 <ETH_MACAddressConfig+0x68>)
 800312a:	4413      	add	r3, r2
 800312c:	461a      	mov	r2, r3
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3303      	adds	r3, #3
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	061a      	lsls	r2, r3, #24
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3302      	adds	r3, #2
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	041b      	lsls	r3, r3, #16
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3301      	adds	r3, #1
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	021b      	lsls	r3, r3, #8
 800314c:	4313      	orrs	r3, r2
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	7812      	ldrb	r2, [r2, #0]
 8003152:	4313      	orrs	r3, r2
 8003154:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	4b06      	ldr	r3, [pc, #24]	; (8003174 <ETH_MACAddressConfig+0x6c>)
 800315a:	4413      	add	r3, r2
 800315c:	461a      	mov	r2, r3
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	6013      	str	r3, [r2, #0]
}
 8003162:	bf00      	nop
 8003164:	371c      	adds	r7, #28
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	40028040 	.word	0x40028040
 8003174:	40028044 	.word	0x40028044

08003178 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003180:	2300      	movs	r3, #0
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	e03e      	b.n	8003204 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68d9      	ldr	r1, [r3, #12]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	440b      	add	r3, r1
 8003196:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2200      	movs	r2, #0
 80031a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2200      	movs	r2, #0
 80031a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2200      	movs	r2, #0
 80031ae:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	3206      	adds	r2, #6
 80031b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d80c      	bhi.n	80031e8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68d9      	ldr	r1, [r3, #12]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	440b      	add	r3, r1
 80031e0:	461a      	mov	r2, r3
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	60da      	str	r2, [r3, #12]
 80031e6:	e004      	b.n	80031f2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	461a      	mov	r2, r3
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	3301      	adds	r3, #1
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2b03      	cmp	r3, #3
 8003208:	d9bd      	bls.n	8003186 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800321c:	611a      	str	r2, [r3, #16]
}
 800321e:	bf00      	nop
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800322a:	b480      	push	{r7}
 800322c:	b085      	sub	sp, #20
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	e046      	b.n	80032c6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6919      	ldr	r1, [r3, #16]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	440b      	add	r3, r1
 8003248:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2200      	movs	r2, #0
 8003254:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2200      	movs	r2, #0
 800325a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2200      	movs	r2, #0
 8003260:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2200      	movs	r2, #0
 8003266:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2200      	movs	r2, #0
 800326c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003274:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800327c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800328a:	68b9      	ldr	r1, [r7, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	3212      	adds	r2, #18
 8003292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b02      	cmp	r3, #2
 800329a:	d80c      	bhi.n	80032b6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6919      	ldr	r1, [r3, #16]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	440b      	add	r3, r1
 80032ae:	461a      	mov	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	60da      	str	r2, [r3, #12]
 80032b4:	e004      	b.n	80032c0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	461a      	mov	r2, r3
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	3301      	adds	r3, #1
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d9b5      	bls.n	8003238 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032f6:	60da      	str	r2, [r3, #12]
}
 80032f8:	bf00      	nop
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003304:	b480      	push	{r7}
 8003306:	b089      	sub	sp, #36	; 0x24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800330e:	2300      	movs	r3, #0
 8003310:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003316:	2300      	movs	r3, #0
 8003318:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800331a:	2300      	movs	r3, #0
 800331c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800331e:	2300      	movs	r3, #0
 8003320:	61fb      	str	r3, [r7, #28]
 8003322:	e175      	b.n	8003610 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003324:	2201      	movs	r2, #1
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4013      	ands	r3, r2
 8003336:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	429a      	cmp	r2, r3
 800333e:	f040 8164 	bne.w	800360a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	2b01      	cmp	r3, #1
 800334c:	d005      	beq.n	800335a <HAL_GPIO_Init+0x56>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d130      	bne.n	80033bc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	2203      	movs	r2, #3
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43db      	mvns	r3, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4013      	ands	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4313      	orrs	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003390:	2201      	movs	r2, #1
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	43db      	mvns	r3, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4013      	ands	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	f003 0201 	and.w	r2, r3, #1
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d017      	beq.n	80033f8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	2203      	movs	r2, #3
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	43db      	mvns	r3, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4013      	ands	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d123      	bne.n	800344c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	08da      	lsrs	r2, r3, #3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3208      	adds	r2, #8
 800340c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	220f      	movs	r2, #15
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	08da      	lsrs	r2, r3, #3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3208      	adds	r2, #8
 8003446:	69b9      	ldr	r1, [r7, #24]
 8003448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	2203      	movs	r2, #3
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 0203 	and.w	r2, r3, #3
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80be 	beq.w	800360a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800348e:	4b66      	ldr	r3, [pc, #408]	; (8003628 <HAL_GPIO_Init+0x324>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	4a65      	ldr	r2, [pc, #404]	; (8003628 <HAL_GPIO_Init+0x324>)
 8003494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003498:	6453      	str	r3, [r2, #68]	; 0x44
 800349a:	4b63      	ldr	r3, [pc, #396]	; (8003628 <HAL_GPIO_Init+0x324>)
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80034a6:	4a61      	ldr	r2, [pc, #388]	; (800362c <HAL_GPIO_Init+0x328>)
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	089b      	lsrs	r3, r3, #2
 80034ac:	3302      	adds	r3, #2
 80034ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	220f      	movs	r2, #15
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4013      	ands	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a58      	ldr	r2, [pc, #352]	; (8003630 <HAL_GPIO_Init+0x32c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d037      	beq.n	8003542 <HAL_GPIO_Init+0x23e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a57      	ldr	r2, [pc, #348]	; (8003634 <HAL_GPIO_Init+0x330>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d031      	beq.n	800353e <HAL_GPIO_Init+0x23a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a56      	ldr	r2, [pc, #344]	; (8003638 <HAL_GPIO_Init+0x334>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d02b      	beq.n	800353a <HAL_GPIO_Init+0x236>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a55      	ldr	r2, [pc, #340]	; (800363c <HAL_GPIO_Init+0x338>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d025      	beq.n	8003536 <HAL_GPIO_Init+0x232>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a54      	ldr	r2, [pc, #336]	; (8003640 <HAL_GPIO_Init+0x33c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d01f      	beq.n	8003532 <HAL_GPIO_Init+0x22e>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a53      	ldr	r2, [pc, #332]	; (8003644 <HAL_GPIO_Init+0x340>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d019      	beq.n	800352e <HAL_GPIO_Init+0x22a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a52      	ldr	r2, [pc, #328]	; (8003648 <HAL_GPIO_Init+0x344>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d013      	beq.n	800352a <HAL_GPIO_Init+0x226>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a51      	ldr	r2, [pc, #324]	; (800364c <HAL_GPIO_Init+0x348>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d00d      	beq.n	8003526 <HAL_GPIO_Init+0x222>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a50      	ldr	r2, [pc, #320]	; (8003650 <HAL_GPIO_Init+0x34c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d007      	beq.n	8003522 <HAL_GPIO_Init+0x21e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a4f      	ldr	r2, [pc, #316]	; (8003654 <HAL_GPIO_Init+0x350>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d101      	bne.n	800351e <HAL_GPIO_Init+0x21a>
 800351a:	2309      	movs	r3, #9
 800351c:	e012      	b.n	8003544 <HAL_GPIO_Init+0x240>
 800351e:	230a      	movs	r3, #10
 8003520:	e010      	b.n	8003544 <HAL_GPIO_Init+0x240>
 8003522:	2308      	movs	r3, #8
 8003524:	e00e      	b.n	8003544 <HAL_GPIO_Init+0x240>
 8003526:	2307      	movs	r3, #7
 8003528:	e00c      	b.n	8003544 <HAL_GPIO_Init+0x240>
 800352a:	2306      	movs	r3, #6
 800352c:	e00a      	b.n	8003544 <HAL_GPIO_Init+0x240>
 800352e:	2305      	movs	r3, #5
 8003530:	e008      	b.n	8003544 <HAL_GPIO_Init+0x240>
 8003532:	2304      	movs	r3, #4
 8003534:	e006      	b.n	8003544 <HAL_GPIO_Init+0x240>
 8003536:	2303      	movs	r3, #3
 8003538:	e004      	b.n	8003544 <HAL_GPIO_Init+0x240>
 800353a:	2302      	movs	r3, #2
 800353c:	e002      	b.n	8003544 <HAL_GPIO_Init+0x240>
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <HAL_GPIO_Init+0x240>
 8003542:	2300      	movs	r3, #0
 8003544:	69fa      	ldr	r2, [r7, #28]
 8003546:	f002 0203 	and.w	r2, r2, #3
 800354a:	0092      	lsls	r2, r2, #2
 800354c:	4093      	lsls	r3, r2
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4313      	orrs	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003554:	4935      	ldr	r1, [pc, #212]	; (800362c <HAL_GPIO_Init+0x328>)
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	089b      	lsrs	r3, r3, #2
 800355a:	3302      	adds	r3, #2
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003562:	4b3d      	ldr	r3, [pc, #244]	; (8003658 <HAL_GPIO_Init+0x354>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	43db      	mvns	r3, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4013      	ands	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003586:	4a34      	ldr	r2, [pc, #208]	; (8003658 <HAL_GPIO_Init+0x354>)
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800358c:	4b32      	ldr	r3, [pc, #200]	; (8003658 <HAL_GPIO_Init+0x354>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	43db      	mvns	r3, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4013      	ands	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035b0:	4a29      	ldr	r2, [pc, #164]	; (8003658 <HAL_GPIO_Init+0x354>)
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035b6:	4b28      	ldr	r3, [pc, #160]	; (8003658 <HAL_GPIO_Init+0x354>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	43db      	mvns	r3, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4013      	ands	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035da:	4a1f      	ldr	r2, [pc, #124]	; (8003658 <HAL_GPIO_Init+0x354>)
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035e0:	4b1d      	ldr	r3, [pc, #116]	; (8003658 <HAL_GPIO_Init+0x354>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	43db      	mvns	r3, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4013      	ands	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003604:	4a14      	ldr	r2, [pc, #80]	; (8003658 <HAL_GPIO_Init+0x354>)
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	3301      	adds	r3, #1
 800360e:	61fb      	str	r3, [r7, #28]
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	2b0f      	cmp	r3, #15
 8003614:	f67f ae86 	bls.w	8003324 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003618:	bf00      	nop
 800361a:	bf00      	nop
 800361c:	3724      	adds	r7, #36	; 0x24
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40023800 	.word	0x40023800
 800362c:	40013800 	.word	0x40013800
 8003630:	40020000 	.word	0x40020000
 8003634:	40020400 	.word	0x40020400
 8003638:	40020800 	.word	0x40020800
 800363c:	40020c00 	.word	0x40020c00
 8003640:	40021000 	.word	0x40021000
 8003644:	40021400 	.word	0x40021400
 8003648:	40021800 	.word	0x40021800
 800364c:	40021c00 	.word	0x40021c00
 8003650:	40022000 	.word	0x40022000
 8003654:	40022400 	.word	0x40022400
 8003658:	40013c00 	.word	0x40013c00

0800365c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	807b      	strh	r3, [r7, #2]
 8003668:	4613      	mov	r3, r2
 800366a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800366c:	787b      	ldrb	r3, [r7, #1]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003672:	887a      	ldrh	r2, [r7, #2]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003678:	e003      	b.n	8003682 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800367a:	887b      	ldrh	r3, [r7, #2]
 800367c:	041a      	lsls	r2, r3, #16
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	619a      	str	r2, [r3, #24]
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800368e:	b480      	push	{r7}
 8003690:	b085      	sub	sp, #20
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	460b      	mov	r3, r1
 8003698:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036a0:	887a      	ldrh	r2, [r7, #2]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4013      	ands	r3, r2
 80036a6:	041a      	lsls	r2, r3, #16
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	43d9      	mvns	r1, r3
 80036ac:	887b      	ldrh	r3, [r7, #2]
 80036ae:	400b      	ands	r3, r1
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	619a      	str	r2, [r3, #24]
}
 80036b6:	bf00      	nop
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036c4:	b08f      	sub	sp, #60	; 0x3c
 80036c6:	af0a      	add	r7, sp, #40	; 0x28
 80036c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e116      	b.n	8003902 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7fd ff1e 	bl	8001530 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2203      	movs	r2, #3
 80036f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003704:	2b00      	cmp	r3, #0
 8003706:	d102      	bne.n	800370e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f002 fb74 	bl	8005e00 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	603b      	str	r3, [r7, #0]
 800371e:	687e      	ldr	r6, [r7, #4]
 8003720:	466d      	mov	r5, sp
 8003722:	f106 0410 	add.w	r4, r6, #16
 8003726:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003728:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800372a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800372c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800372e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003732:	e885 0003 	stmia.w	r5, {r0, r1}
 8003736:	1d33      	adds	r3, r6, #4
 8003738:	cb0e      	ldmia	r3, {r1, r2, r3}
 800373a:	6838      	ldr	r0, [r7, #0]
 800373c:	f002 fb08 	bl	8005d50 <USB_CoreInit>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d005      	beq.n	8003752 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2202      	movs	r2, #2
 800374a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e0d7      	b.n	8003902 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2100      	movs	r1, #0
 8003758:	4618      	mov	r0, r3
 800375a:	f002 fb62 	bl	8005e22 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800375e:	2300      	movs	r3, #0
 8003760:	73fb      	strb	r3, [r7, #15]
 8003762:	e04a      	b.n	80037fa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003764:	7bfa      	ldrb	r2, [r7, #15]
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	4613      	mov	r3, r2
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	4413      	add	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	333d      	adds	r3, #61	; 0x3d
 8003774:	2201      	movs	r2, #1
 8003776:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003778:	7bfa      	ldrb	r2, [r7, #15]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	4413      	add	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	333c      	adds	r3, #60	; 0x3c
 8003788:	7bfa      	ldrb	r2, [r7, #15]
 800378a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800378c:	7bfa      	ldrb	r2, [r7, #15]
 800378e:	7bfb      	ldrb	r3, [r7, #15]
 8003790:	b298      	uxth	r0, r3
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	4613      	mov	r3, r2
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	3344      	adds	r3, #68	; 0x44
 80037a0:	4602      	mov	r2, r0
 80037a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037a4:	7bfa      	ldrb	r2, [r7, #15]
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	4413      	add	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	3340      	adds	r3, #64	; 0x40
 80037b4:	2200      	movs	r2, #0
 80037b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037b8:	7bfa      	ldrb	r2, [r7, #15]
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	4413      	add	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	3348      	adds	r3, #72	; 0x48
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037cc:	7bfa      	ldrb	r2, [r7, #15]
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	334c      	adds	r3, #76	; 0x4c
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037e0:	7bfa      	ldrb	r2, [r7, #15]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	3354      	adds	r3, #84	; 0x54
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	3301      	adds	r3, #1
 80037f8:	73fb      	strb	r3, [r7, #15]
 80037fa:	7bfa      	ldrb	r2, [r7, #15]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	429a      	cmp	r2, r3
 8003802:	d3af      	bcc.n	8003764 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003804:	2300      	movs	r3, #0
 8003806:	73fb      	strb	r3, [r7, #15]
 8003808:	e044      	b.n	8003894 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800380a:	7bfa      	ldrb	r2, [r7, #15]
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	4613      	mov	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003820:	7bfa      	ldrb	r2, [r7, #15]
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	4613      	mov	r3, r2
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	4413      	add	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003832:	7bfa      	ldrb	r2, [r7, #15]
 8003834:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003836:	7bfa      	ldrb	r2, [r7, #15]
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800384c:	7bfa      	ldrb	r2, [r7, #15]
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	4613      	mov	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003862:	7bfa      	ldrb	r2, [r7, #15]
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003878:	7bfa      	ldrb	r2, [r7, #15]
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800388e:	7bfb      	ldrb	r3, [r7, #15]
 8003890:	3301      	adds	r3, #1
 8003892:	73fb      	strb	r3, [r7, #15]
 8003894:	7bfa      	ldrb	r2, [r7, #15]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	429a      	cmp	r2, r3
 800389c:	d3b5      	bcc.n	800380a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	603b      	str	r3, [r7, #0]
 80038a4:	687e      	ldr	r6, [r7, #4]
 80038a6:	466d      	mov	r5, sp
 80038a8:	f106 0410 	add.w	r4, r6, #16
 80038ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80038bc:	1d33      	adds	r3, r6, #4
 80038be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038c0:	6838      	ldr	r0, [r7, #0]
 80038c2:	f002 fafb 	bl	8005ebc <USB_DevInit>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e014      	b.n	8003902 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d102      	bne.n	80038f6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f80b 	bl	800390c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f002 fcb9 	bl	8006272 <USB_DevDisconnect>

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800390c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800393a:	4b05      	ldr	r3, [pc, #20]	; (8003950 <HAL_PCDEx_ActivateLPM+0x44>)
 800393c:	4313      	orrs	r3, r2
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	10000003 	.word	0x10000003

08003954 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003958:	4b05      	ldr	r3, [pc, #20]	; (8003970 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a04      	ldr	r2, [pc, #16]	; (8003970 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800395e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003962:	6013      	str	r3, [r2, #0]
}
 8003964:	bf00      	nop
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40007000 	.word	0x40007000

08003974 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800397e:	4b23      	ldr	r3, [pc, #140]	; (8003a0c <HAL_PWREx_EnableOverDrive+0x98>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	4a22      	ldr	r2, [pc, #136]	; (8003a0c <HAL_PWREx_EnableOverDrive+0x98>)
 8003984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003988:	6413      	str	r3, [r2, #64]	; 0x40
 800398a:	4b20      	ldr	r3, [pc, #128]	; (8003a0c <HAL_PWREx_EnableOverDrive+0x98>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003996:	4b1e      	ldr	r3, [pc, #120]	; (8003a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a1d      	ldr	r2, [pc, #116]	; (8003a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 800399c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039a2:	f7fd ffc5 	bl	8001930 <HAL_GetTick>
 80039a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039a8:	e009      	b.n	80039be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039aa:	f7fd ffc1 	bl	8001930 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039b8:	d901      	bls.n	80039be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e022      	b.n	8003a04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039be:	4b14      	ldr	r3, [pc, #80]	; (8003a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ca:	d1ee      	bne.n	80039aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80039cc:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a0f      	ldr	r2, [pc, #60]	; (8003a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039d8:	f7fd ffaa 	bl	8001930 <HAL_GetTick>
 80039dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039de:	e009      	b.n	80039f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039e0:	f7fd ffa6 	bl	8001930 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039ee:	d901      	bls.n	80039f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e007      	b.n	8003a04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039f4:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a00:	d1ee      	bne.n	80039e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40007000 	.word	0x40007000

08003a14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e29b      	b.n	8003f62 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 8087 	beq.w	8003b46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a38:	4b96      	ldr	r3, [pc, #600]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 030c 	and.w	r3, r3, #12
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d00c      	beq.n	8003a5e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a44:	4b93      	ldr	r3, [pc, #588]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 030c 	and.w	r3, r3, #12
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d112      	bne.n	8003a76 <HAL_RCC_OscConfig+0x62>
 8003a50:	4b90      	ldr	r3, [pc, #576]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a5c:	d10b      	bne.n	8003a76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5e:	4b8d      	ldr	r3, [pc, #564]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d06c      	beq.n	8003b44 <HAL_RCC_OscConfig+0x130>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d168      	bne.n	8003b44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e275      	b.n	8003f62 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a7e:	d106      	bne.n	8003a8e <HAL_RCC_OscConfig+0x7a>
 8003a80:	4b84      	ldr	r3, [pc, #528]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a83      	ldr	r2, [pc, #524]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	e02e      	b.n	8003aec <HAL_RCC_OscConfig+0xd8>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10c      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x9c>
 8003a96:	4b7f      	ldr	r3, [pc, #508]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a7e      	ldr	r2, [pc, #504]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	4b7c      	ldr	r3, [pc, #496]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a7b      	ldr	r2, [pc, #492]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003aa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	e01d      	b.n	8003aec <HAL_RCC_OscConfig+0xd8>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ab8:	d10c      	bne.n	8003ad4 <HAL_RCC_OscConfig+0xc0>
 8003aba:	4b76      	ldr	r3, [pc, #472]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a75      	ldr	r2, [pc, #468]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	4b73      	ldr	r3, [pc, #460]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a72      	ldr	r2, [pc, #456]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	e00b      	b.n	8003aec <HAL_RCC_OscConfig+0xd8>
 8003ad4:	4b6f      	ldr	r3, [pc, #444]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a6e      	ldr	r2, [pc, #440]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	4b6c      	ldr	r3, [pc, #432]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a6b      	ldr	r2, [pc, #428]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d013      	beq.n	8003b1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af4:	f7fd ff1c 	bl	8001930 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003afc:	f7fd ff18 	bl	8001930 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b64      	cmp	r3, #100	; 0x64
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e229      	b.n	8003f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0e:	4b61      	ldr	r3, [pc, #388]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0f0      	beq.n	8003afc <HAL_RCC_OscConfig+0xe8>
 8003b1a:	e014      	b.n	8003b46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1c:	f7fd ff08 	bl	8001930 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b24:	f7fd ff04 	bl	8001930 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b64      	cmp	r3, #100	; 0x64
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e215      	b.n	8003f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b36:	4b57      	ldr	r3, [pc, #348]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0x110>
 8003b42:	e000      	b.n	8003b46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d069      	beq.n	8003c26 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b52:	4b50      	ldr	r3, [pc, #320]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 030c 	and.w	r3, r3, #12
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b5e:	4b4d      	ldr	r3, [pc, #308]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d11c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x190>
 8003b6a:	4b4a      	ldr	r3, [pc, #296]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d116      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b76:	4b47      	ldr	r3, [pc, #284]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <HAL_RCC_OscConfig+0x17a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d001      	beq.n	8003b8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e1e9      	b.n	8003f62 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8e:	4b41      	ldr	r3, [pc, #260]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	493d      	ldr	r1, [pc, #244]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ba2:	e040      	b.n	8003c26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d023      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bac:	4b39      	ldr	r3, [pc, #228]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a38      	ldr	r2, [pc, #224]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003bb2:	f043 0301 	orr.w	r3, r3, #1
 8003bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb8:	f7fd feba 	bl	8001930 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bc0:	f7fd feb6 	bl	8001930 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e1c7      	b.n	8003f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd2:	4b30      	ldr	r3, [pc, #192]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0f0      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bde:	4b2d      	ldr	r3, [pc, #180]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	4929      	ldr	r1, [pc, #164]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	600b      	str	r3, [r1, #0]
 8003bf2:	e018      	b.n	8003c26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bf4:	4b27      	ldr	r3, [pc, #156]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a26      	ldr	r2, [pc, #152]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003bfa:	f023 0301 	bic.w	r3, r3, #1
 8003bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c00:	f7fd fe96 	bl	8001930 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c08:	f7fd fe92 	bl	8001930 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e1a3      	b.n	8003f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c1a:	4b1e      	ldr	r3, [pc, #120]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f0      	bne.n	8003c08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d038      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d019      	beq.n	8003c6e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c3a:	4b16      	ldr	r3, [pc, #88]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c3e:	4a15      	ldr	r2, [pc, #84]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003c40:	f043 0301 	orr.w	r3, r3, #1
 8003c44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c46:	f7fd fe73 	bl	8001930 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c4e:	f7fd fe6f 	bl	8001930 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e180      	b.n	8003f62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c60:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0f0      	beq.n	8003c4e <HAL_RCC_OscConfig+0x23a>
 8003c6c:	e01a      	b.n	8003ca4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c6e:	4b09      	ldr	r3, [pc, #36]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c72:	4a08      	ldr	r2, [pc, #32]	; (8003c94 <HAL_RCC_OscConfig+0x280>)
 8003c74:	f023 0301 	bic.w	r3, r3, #1
 8003c78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7a:	f7fd fe59 	bl	8001930 <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c80:	e00a      	b.n	8003c98 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c82:	f7fd fe55 	bl	8001930 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d903      	bls.n	8003c98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e166      	b.n	8003f62 <HAL_RCC_OscConfig+0x54e>
 8003c94:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c98:	4b92      	ldr	r3, [pc, #584]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1ee      	bne.n	8003c82 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 80a4 	beq.w	8003dfa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cb2:	4b8c      	ldr	r3, [pc, #560]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10d      	bne.n	8003cda <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cbe:	4b89      	ldr	r3, [pc, #548]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	4a88      	ldr	r2, [pc, #544]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cca:	4b86      	ldr	r3, [pc, #536]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd2:	60bb      	str	r3, [r7, #8]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cda:	4b83      	ldr	r3, [pc, #524]	; (8003ee8 <HAL_RCC_OscConfig+0x4d4>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d118      	bne.n	8003d18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003ce6:	4b80      	ldr	r3, [pc, #512]	; (8003ee8 <HAL_RCC_OscConfig+0x4d4>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a7f      	ldr	r2, [pc, #508]	; (8003ee8 <HAL_RCC_OscConfig+0x4d4>)
 8003cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cf2:	f7fd fe1d 	bl	8001930 <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cfa:	f7fd fe19 	bl	8001930 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b64      	cmp	r3, #100	; 0x64
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e12a      	b.n	8003f62 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d0c:	4b76      	ldr	r3, [pc, #472]	; (8003ee8 <HAL_RCC_OscConfig+0x4d4>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d106      	bne.n	8003d2e <HAL_RCC_OscConfig+0x31a>
 8003d20:	4b70      	ldr	r3, [pc, #448]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d24:	4a6f      	ldr	r2, [pc, #444]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2c:	e02d      	b.n	8003d8a <HAL_RCC_OscConfig+0x376>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10c      	bne.n	8003d50 <HAL_RCC_OscConfig+0x33c>
 8003d36:	4b6b      	ldr	r3, [pc, #428]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3a:	4a6a      	ldr	r2, [pc, #424]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003d3c:	f023 0301 	bic.w	r3, r3, #1
 8003d40:	6713      	str	r3, [r2, #112]	; 0x70
 8003d42:	4b68      	ldr	r3, [pc, #416]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d46:	4a67      	ldr	r2, [pc, #412]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003d48:	f023 0304 	bic.w	r3, r3, #4
 8003d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d4e:	e01c      	b.n	8003d8a <HAL_RCC_OscConfig+0x376>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	2b05      	cmp	r3, #5
 8003d56:	d10c      	bne.n	8003d72 <HAL_RCC_OscConfig+0x35e>
 8003d58:	4b62      	ldr	r3, [pc, #392]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5c:	4a61      	ldr	r2, [pc, #388]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003d5e:	f043 0304 	orr.w	r3, r3, #4
 8003d62:	6713      	str	r3, [r2, #112]	; 0x70
 8003d64:	4b5f      	ldr	r3, [pc, #380]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d68:	4a5e      	ldr	r2, [pc, #376]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d70:	e00b      	b.n	8003d8a <HAL_RCC_OscConfig+0x376>
 8003d72:	4b5c      	ldr	r3, [pc, #368]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d76:	4a5b      	ldr	r2, [pc, #364]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003d78:	f023 0301 	bic.w	r3, r3, #1
 8003d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d7e:	4b59      	ldr	r3, [pc, #356]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d82:	4a58      	ldr	r2, [pc, #352]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003d84:	f023 0304 	bic.w	r3, r3, #4
 8003d88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d015      	beq.n	8003dbe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d92:	f7fd fdcd 	bl	8001930 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d98:	e00a      	b.n	8003db0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d9a:	f7fd fdc9 	bl	8001930 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e0d8      	b.n	8003f62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db0:	4b4c      	ldr	r3, [pc, #304]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0ee      	beq.n	8003d9a <HAL_RCC_OscConfig+0x386>
 8003dbc:	e014      	b.n	8003de8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbe:	f7fd fdb7 	bl	8001930 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc4:	e00a      	b.n	8003ddc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc6:	f7fd fdb3 	bl	8001930 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e0c2      	b.n	8003f62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ddc:	4b41      	ldr	r3, [pc, #260]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1ee      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003de8:	7dfb      	ldrb	r3, [r7, #23]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d105      	bne.n	8003dfa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dee:	4b3d      	ldr	r3, [pc, #244]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	4a3c      	ldr	r2, [pc, #240]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003df8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 80ae 	beq.w	8003f60 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e04:	4b37      	ldr	r3, [pc, #220]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 030c 	and.w	r3, r3, #12
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d06d      	beq.n	8003eec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d14b      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e18:	4b32      	ldr	r3, [pc, #200]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a31      	ldr	r2, [pc, #196]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e24:	f7fd fd84 	bl	8001930 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e2c:	f7fd fd80 	bl	8001930 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e091      	b.n	8003f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3e:	4b29      	ldr	r3, [pc, #164]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1f0      	bne.n	8003e2c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69da      	ldr	r2, [r3, #28]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	019b      	lsls	r3, r3, #6
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e60:	085b      	lsrs	r3, r3, #1
 8003e62:	3b01      	subs	r3, #1
 8003e64:	041b      	lsls	r3, r3, #16
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6c:	061b      	lsls	r3, r3, #24
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	071b      	lsls	r3, r3, #28
 8003e76:	491b      	ldr	r1, [pc, #108]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e7c:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a18      	ldr	r2, [pc, #96]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003e82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e88:	f7fd fd52 	bl	8001930 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e90:	f7fd fd4e 	bl	8001930 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e05f      	b.n	8003f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea2:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0x47c>
 8003eae:	e057      	b.n	8003f60 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a0b      	ldr	r2, [pc, #44]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebc:	f7fd fd38 	bl	8001930 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec4:	f7fd fd34 	bl	8001930 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e045      	b.n	8003f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed6:	4b03      	ldr	r3, [pc, #12]	; (8003ee4 <HAL_RCC_OscConfig+0x4d0>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1f0      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x4b0>
 8003ee2:	e03d      	b.n	8003f60 <HAL_RCC_OscConfig+0x54c>
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003eec:	4b1f      	ldr	r3, [pc, #124]	; (8003f6c <HAL_RCC_OscConfig+0x558>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d030      	beq.n	8003f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d129      	bne.n	8003f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d122      	bne.n	8003f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f22:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d119      	bne.n	8003f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	085b      	lsrs	r3, r3, #1
 8003f34:	3b01      	subs	r3, #1
 8003f36:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d10f      	bne.n	8003f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f46:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d107      	bne.n	8003f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f56:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d001      	beq.n	8003f60 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e000      	b.n	8003f62 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40023800 	.word	0x40023800

08003f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e0d0      	b.n	800412a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f88:	4b6a      	ldr	r3, [pc, #424]	; (8004134 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d910      	bls.n	8003fb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b67      	ldr	r3, [pc, #412]	; (8004134 <HAL_RCC_ClockConfig+0x1c4>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 020f 	bic.w	r2, r3, #15
 8003f9e:	4965      	ldr	r1, [pc, #404]	; (8004134 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa6:	4b63      	ldr	r3, [pc, #396]	; (8004134 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0b8      	b.n	800412a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d020      	beq.n	8004006 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d005      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fd0:	4b59      	ldr	r3, [pc, #356]	; (8004138 <HAL_RCC_ClockConfig+0x1c8>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	4a58      	ldr	r2, [pc, #352]	; (8004138 <HAL_RCC_ClockConfig+0x1c8>)
 8003fd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0308 	and.w	r3, r3, #8
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fe8:	4b53      	ldr	r3, [pc, #332]	; (8004138 <HAL_RCC_ClockConfig+0x1c8>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	4a52      	ldr	r2, [pc, #328]	; (8004138 <HAL_RCC_ClockConfig+0x1c8>)
 8003fee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ff2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff4:	4b50      	ldr	r3, [pc, #320]	; (8004138 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	494d      	ldr	r1, [pc, #308]	; (8004138 <HAL_RCC_ClockConfig+0x1c8>)
 8004002:	4313      	orrs	r3, r2
 8004004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d040      	beq.n	8004094 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d107      	bne.n	800402a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401a:	4b47      	ldr	r3, [pc, #284]	; (8004138 <HAL_RCC_ClockConfig+0x1c8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d115      	bne.n	8004052 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e07f      	b.n	800412a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b02      	cmp	r3, #2
 8004030:	d107      	bne.n	8004042 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004032:	4b41      	ldr	r3, [pc, #260]	; (8004138 <HAL_RCC_ClockConfig+0x1c8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d109      	bne.n	8004052 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e073      	b.n	800412a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004042:	4b3d      	ldr	r3, [pc, #244]	; (8004138 <HAL_RCC_ClockConfig+0x1c8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e06b      	b.n	800412a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004052:	4b39      	ldr	r3, [pc, #228]	; (8004138 <HAL_RCC_ClockConfig+0x1c8>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f023 0203 	bic.w	r2, r3, #3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	4936      	ldr	r1, [pc, #216]	; (8004138 <HAL_RCC_ClockConfig+0x1c8>)
 8004060:	4313      	orrs	r3, r2
 8004062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004064:	f7fd fc64 	bl	8001930 <HAL_GetTick>
 8004068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406a:	e00a      	b.n	8004082 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800406c:	f7fd fc60 	bl	8001930 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	f241 3288 	movw	r2, #5000	; 0x1388
 800407a:	4293      	cmp	r3, r2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e053      	b.n	800412a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004082:	4b2d      	ldr	r3, [pc, #180]	; (8004138 <HAL_RCC_ClockConfig+0x1c8>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 020c 	and.w	r2, r3, #12
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	429a      	cmp	r2, r3
 8004092:	d1eb      	bne.n	800406c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004094:	4b27      	ldr	r3, [pc, #156]	; (8004134 <HAL_RCC_ClockConfig+0x1c4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 030f 	and.w	r3, r3, #15
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d210      	bcs.n	80040c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a2:	4b24      	ldr	r3, [pc, #144]	; (8004134 <HAL_RCC_ClockConfig+0x1c4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f023 020f 	bic.w	r2, r3, #15
 80040aa:	4922      	ldr	r1, [pc, #136]	; (8004134 <HAL_RCC_ClockConfig+0x1c4>)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b2:	4b20      	ldr	r3, [pc, #128]	; (8004134 <HAL_RCC_ClockConfig+0x1c4>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d001      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e032      	b.n	800412a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d008      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040d0:	4b19      	ldr	r3, [pc, #100]	; (8004138 <HAL_RCC_ClockConfig+0x1c8>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	4916      	ldr	r1, [pc, #88]	; (8004138 <HAL_RCC_ClockConfig+0x1c8>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d009      	beq.n	8004102 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040ee:	4b12      	ldr	r3, [pc, #72]	; (8004138 <HAL_RCC_ClockConfig+0x1c8>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	490e      	ldr	r1, [pc, #56]	; (8004138 <HAL_RCC_ClockConfig+0x1c8>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004102:	f000 f821 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8004106:	4602      	mov	r2, r0
 8004108:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <HAL_RCC_ClockConfig+0x1c8>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	091b      	lsrs	r3, r3, #4
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	490a      	ldr	r1, [pc, #40]	; (800413c <HAL_RCC_ClockConfig+0x1cc>)
 8004114:	5ccb      	ldrb	r3, [r1, r3]
 8004116:	fa22 f303 	lsr.w	r3, r2, r3
 800411a:	4a09      	ldr	r2, [pc, #36]	; (8004140 <HAL_RCC_ClockConfig+0x1d0>)
 800411c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800411e:	4b09      	ldr	r3, [pc, #36]	; (8004144 <HAL_RCC_ClockConfig+0x1d4>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f7fd fbc0 	bl	80018a8 <HAL_InitTick>

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	40023c00 	.word	0x40023c00
 8004138:	40023800 	.word	0x40023800
 800413c:	08009dfc 	.word	0x08009dfc
 8004140:	20000000 	.word	0x20000000
 8004144:	20000004 	.word	0x20000004

08004148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800414c:	b094      	sub	sp, #80	; 0x50
 800414e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004150:	2300      	movs	r3, #0
 8004152:	647b      	str	r3, [r7, #68]	; 0x44
 8004154:	2300      	movs	r3, #0
 8004156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004158:	2300      	movs	r3, #0
 800415a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800415c:	2300      	movs	r3, #0
 800415e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004160:	4b79      	ldr	r3, [pc, #484]	; (8004348 <HAL_RCC_GetSysClockFreq+0x200>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 030c 	and.w	r3, r3, #12
 8004168:	2b08      	cmp	r3, #8
 800416a:	d00d      	beq.n	8004188 <HAL_RCC_GetSysClockFreq+0x40>
 800416c:	2b08      	cmp	r3, #8
 800416e:	f200 80e1 	bhi.w	8004334 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <HAL_RCC_GetSysClockFreq+0x34>
 8004176:	2b04      	cmp	r3, #4
 8004178:	d003      	beq.n	8004182 <HAL_RCC_GetSysClockFreq+0x3a>
 800417a:	e0db      	b.n	8004334 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800417c:	4b73      	ldr	r3, [pc, #460]	; (800434c <HAL_RCC_GetSysClockFreq+0x204>)
 800417e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004180:	e0db      	b.n	800433a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004182:	4b73      	ldr	r3, [pc, #460]	; (8004350 <HAL_RCC_GetSysClockFreq+0x208>)
 8004184:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004186:	e0d8      	b.n	800433a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004188:	4b6f      	ldr	r3, [pc, #444]	; (8004348 <HAL_RCC_GetSysClockFreq+0x200>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004190:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004192:	4b6d      	ldr	r3, [pc, #436]	; (8004348 <HAL_RCC_GetSysClockFreq+0x200>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d063      	beq.n	8004266 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800419e:	4b6a      	ldr	r3, [pc, #424]	; (8004348 <HAL_RCC_GetSysClockFreq+0x200>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	099b      	lsrs	r3, r3, #6
 80041a4:	2200      	movs	r2, #0
 80041a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80041a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041b0:	633b      	str	r3, [r7, #48]	; 0x30
 80041b2:	2300      	movs	r3, #0
 80041b4:	637b      	str	r3, [r7, #52]	; 0x34
 80041b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041ba:	4622      	mov	r2, r4
 80041bc:	462b      	mov	r3, r5
 80041be:	f04f 0000 	mov.w	r0, #0
 80041c2:	f04f 0100 	mov.w	r1, #0
 80041c6:	0159      	lsls	r1, r3, #5
 80041c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041cc:	0150      	lsls	r0, r2, #5
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4621      	mov	r1, r4
 80041d4:	1a51      	subs	r1, r2, r1
 80041d6:	6139      	str	r1, [r7, #16]
 80041d8:	4629      	mov	r1, r5
 80041da:	eb63 0301 	sbc.w	r3, r3, r1
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041ec:	4659      	mov	r1, fp
 80041ee:	018b      	lsls	r3, r1, #6
 80041f0:	4651      	mov	r1, sl
 80041f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041f6:	4651      	mov	r1, sl
 80041f8:	018a      	lsls	r2, r1, #6
 80041fa:	4651      	mov	r1, sl
 80041fc:	ebb2 0801 	subs.w	r8, r2, r1
 8004200:	4659      	mov	r1, fp
 8004202:	eb63 0901 	sbc.w	r9, r3, r1
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	f04f 0300 	mov.w	r3, #0
 800420e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004212:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004216:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800421a:	4690      	mov	r8, r2
 800421c:	4699      	mov	r9, r3
 800421e:	4623      	mov	r3, r4
 8004220:	eb18 0303 	adds.w	r3, r8, r3
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	462b      	mov	r3, r5
 8004228:	eb49 0303 	adc.w	r3, r9, r3
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800423a:	4629      	mov	r1, r5
 800423c:	024b      	lsls	r3, r1, #9
 800423e:	4621      	mov	r1, r4
 8004240:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004244:	4621      	mov	r1, r4
 8004246:	024a      	lsls	r2, r1, #9
 8004248:	4610      	mov	r0, r2
 800424a:	4619      	mov	r1, r3
 800424c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800424e:	2200      	movs	r2, #0
 8004250:	62bb      	str	r3, [r7, #40]	; 0x28
 8004252:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004254:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004258:	f7fc f842 	bl	80002e0 <__aeabi_uldivmod>
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4613      	mov	r3, r2
 8004262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004264:	e058      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004266:	4b38      	ldr	r3, [pc, #224]	; (8004348 <HAL_RCC_GetSysClockFreq+0x200>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	099b      	lsrs	r3, r3, #6
 800426c:	2200      	movs	r2, #0
 800426e:	4618      	mov	r0, r3
 8004270:	4611      	mov	r1, r2
 8004272:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004276:	623b      	str	r3, [r7, #32]
 8004278:	2300      	movs	r3, #0
 800427a:	627b      	str	r3, [r7, #36]	; 0x24
 800427c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004280:	4642      	mov	r2, r8
 8004282:	464b      	mov	r3, r9
 8004284:	f04f 0000 	mov.w	r0, #0
 8004288:	f04f 0100 	mov.w	r1, #0
 800428c:	0159      	lsls	r1, r3, #5
 800428e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004292:	0150      	lsls	r0, r2, #5
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4641      	mov	r1, r8
 800429a:	ebb2 0a01 	subs.w	sl, r2, r1
 800429e:	4649      	mov	r1, r9
 80042a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80042a4:	f04f 0200 	mov.w	r2, #0
 80042a8:	f04f 0300 	mov.w	r3, #0
 80042ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042b8:	ebb2 040a 	subs.w	r4, r2, sl
 80042bc:	eb63 050b 	sbc.w	r5, r3, fp
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	00eb      	lsls	r3, r5, #3
 80042ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042ce:	00e2      	lsls	r2, r4, #3
 80042d0:	4614      	mov	r4, r2
 80042d2:	461d      	mov	r5, r3
 80042d4:	4643      	mov	r3, r8
 80042d6:	18e3      	adds	r3, r4, r3
 80042d8:	603b      	str	r3, [r7, #0]
 80042da:	464b      	mov	r3, r9
 80042dc:	eb45 0303 	adc.w	r3, r5, r3
 80042e0:	607b      	str	r3, [r7, #4]
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042ee:	4629      	mov	r1, r5
 80042f0:	028b      	lsls	r3, r1, #10
 80042f2:	4621      	mov	r1, r4
 80042f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042f8:	4621      	mov	r1, r4
 80042fa:	028a      	lsls	r2, r1, #10
 80042fc:	4610      	mov	r0, r2
 80042fe:	4619      	mov	r1, r3
 8004300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004302:	2200      	movs	r2, #0
 8004304:	61bb      	str	r3, [r7, #24]
 8004306:	61fa      	str	r2, [r7, #28]
 8004308:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800430c:	f7fb ffe8 	bl	80002e0 <__aeabi_uldivmod>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4613      	mov	r3, r2
 8004316:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004318:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <HAL_RCC_GetSysClockFreq+0x200>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	0c1b      	lsrs	r3, r3, #16
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	3301      	adds	r3, #1
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004328:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800432a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800432c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004330:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004332:	e002      	b.n	800433a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004334:	4b05      	ldr	r3, [pc, #20]	; (800434c <HAL_RCC_GetSysClockFreq+0x204>)
 8004336:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004338:	bf00      	nop
    }
  }
  return sysclockfreq;
 800433a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800433c:	4618      	mov	r0, r3
 800433e:	3750      	adds	r7, #80	; 0x50
 8004340:	46bd      	mov	sp, r7
 8004342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004346:	bf00      	nop
 8004348:	40023800 	.word	0x40023800
 800434c:	00f42400 	.word	0x00f42400
 8004350:	007a1200 	.word	0x007a1200

08004354 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004358:	4b03      	ldr	r3, [pc, #12]	; (8004368 <HAL_RCC_GetHCLKFreq+0x14>)
 800435a:	681b      	ldr	r3, [r3, #0]
}
 800435c:	4618      	mov	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	20000000 	.word	0x20000000

0800436c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004370:	f7ff fff0 	bl	8004354 <HAL_RCC_GetHCLKFreq>
 8004374:	4602      	mov	r2, r0
 8004376:	4b05      	ldr	r3, [pc, #20]	; (800438c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	0a9b      	lsrs	r3, r3, #10
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	4903      	ldr	r1, [pc, #12]	; (8004390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004382:	5ccb      	ldrb	r3, [r1, r3]
 8004384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004388:	4618      	mov	r0, r3
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40023800 	.word	0x40023800
 8004390:	08009e0c 	.word	0x08009e0c

08004394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004398:	f7ff ffdc 	bl	8004354 <HAL_RCC_GetHCLKFreq>
 800439c:	4602      	mov	r2, r0
 800439e:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	0b5b      	lsrs	r3, r3, #13
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	4903      	ldr	r1, [pc, #12]	; (80043b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043aa:	5ccb      	ldrb	r3, [r1, r3]
 80043ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40023800 	.word	0x40023800
 80043b8:	08009e0c 	.word	0x08009e0c

080043bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80043c4:	2300      	movs	r3, #0
 80043c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80043c8:	2300      	movs	r3, #0
 80043ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80043d0:	2300      	movs	r3, #0
 80043d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80043d4:	2300      	movs	r3, #0
 80043d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d012      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043e4:	4b69      	ldr	r3, [pc, #420]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	4a68      	ldr	r2, [pc, #416]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80043ee:	6093      	str	r3, [r2, #8]
 80043f0:	4b66      	ldr	r3, [pc, #408]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f8:	4964      	ldr	r1, [pc, #400]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004406:	2301      	movs	r3, #1
 8004408:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d017      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004416:	4b5d      	ldr	r3, [pc, #372]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800441c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004424:	4959      	ldr	r1, [pc, #356]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004430:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004434:	d101      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004436:	2301      	movs	r3, #1
 8004438:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004442:	2301      	movs	r3, #1
 8004444:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d017      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004452:	4b4e      	ldr	r3, [pc, #312]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004458:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	494a      	ldr	r1, [pc, #296]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004470:	d101      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004472:	2301      	movs	r3, #1
 8004474:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800447e:	2301      	movs	r3, #1
 8004480:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800448e:	2301      	movs	r3, #1
 8004490:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 808b 	beq.w	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044a0:	4b3a      	ldr	r3, [pc, #232]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a4:	4a39      	ldr	r2, [pc, #228]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044aa:	6413      	str	r3, [r2, #64]	; 0x40
 80044ac:	4b37      	ldr	r3, [pc, #220]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b4:	60bb      	str	r3, [r7, #8]
 80044b6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044b8:	4b35      	ldr	r3, [pc, #212]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a34      	ldr	r2, [pc, #208]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c4:	f7fd fa34 	bl	8001930 <HAL_GetTick>
 80044c8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044ca:	e008      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044cc:	f7fd fa30 	bl	8001930 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b64      	cmp	r3, #100	; 0x64
 80044d8:	d901      	bls.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e38f      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044de:	4b2c      	ldr	r3, [pc, #176]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0f0      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044ea:	4b28      	ldr	r3, [pc, #160]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d035      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	429a      	cmp	r2, r3
 8004506:	d02e      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004508:	4b20      	ldr	r3, [pc, #128]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004510:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004512:	4b1e      	ldr	r3, [pc, #120]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004516:	4a1d      	ldr	r2, [pc, #116]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800451c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800451e:	4b1b      	ldr	r3, [pc, #108]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004522:	4a1a      	ldr	r2, [pc, #104]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004528:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800452a:	4a18      	ldr	r2, [pc, #96]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004530:	4b16      	ldr	r3, [pc, #88]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b01      	cmp	r3, #1
 800453a:	d114      	bne.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453c:	f7fd f9f8 	bl	8001930 <HAL_GetTick>
 8004540:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004542:	e00a      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004544:	f7fd f9f4 	bl	8001930 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004552:	4293      	cmp	r3, r2
 8004554:	d901      	bls.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e351      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800455a:	4b0c      	ldr	r3, [pc, #48]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800455c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0ee      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800456e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004572:	d111      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004574:	4b05      	ldr	r3, [pc, #20]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004580:	4b04      	ldr	r3, [pc, #16]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004582:	400b      	ands	r3, r1
 8004584:	4901      	ldr	r1, [pc, #4]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004586:	4313      	orrs	r3, r2
 8004588:	608b      	str	r3, [r1, #8]
 800458a:	e00b      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800458c:	40023800 	.word	0x40023800
 8004590:	40007000 	.word	0x40007000
 8004594:	0ffffcff 	.word	0x0ffffcff
 8004598:	4bac      	ldr	r3, [pc, #688]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	4aab      	ldr	r2, [pc, #684]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800459e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045a2:	6093      	str	r3, [r2, #8]
 80045a4:	4ba9      	ldr	r3, [pc, #676]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045b0:	49a6      	ldr	r1, [pc, #664]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0310 	and.w	r3, r3, #16
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d010      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045c2:	4ba2      	ldr	r3, [pc, #648]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045c8:	4aa0      	ldr	r2, [pc, #640]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80045d2:	4b9e      	ldr	r3, [pc, #632]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045dc:	499b      	ldr	r1, [pc, #620]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045f0:	4b96      	ldr	r3, [pc, #600]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045fe:	4993      	ldr	r1, [pc, #588]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004612:	4b8e      	ldr	r3, [pc, #568]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004618:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004620:	498a      	ldr	r1, [pc, #552]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00a      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004634:	4b85      	ldr	r3, [pc, #532]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004642:	4982      	ldr	r1, [pc, #520]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004656:	4b7d      	ldr	r3, [pc, #500]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004664:	4979      	ldr	r1, [pc, #484]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004666:	4313      	orrs	r3, r2
 8004668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00a      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004678:	4b74      	ldr	r3, [pc, #464]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800467a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467e:	f023 0203 	bic.w	r2, r3, #3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004686:	4971      	ldr	r1, [pc, #452]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800469a:	4b6c      	ldr	r3, [pc, #432]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800469c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a0:	f023 020c 	bic.w	r2, r3, #12
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a8:	4968      	ldr	r1, [pc, #416]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00a      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046bc:	4b63      	ldr	r3, [pc, #396]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ca:	4960      	ldr	r1, [pc, #384]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046de:	4b5b      	ldr	r3, [pc, #364]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ec:	4957      	ldr	r1, [pc, #348]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00a      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004700:	4b52      	ldr	r3, [pc, #328]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004706:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470e:	494f      	ldr	r1, [pc, #316]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004710:	4313      	orrs	r3, r2
 8004712:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004722:	4b4a      	ldr	r3, [pc, #296]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004728:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004730:	4946      	ldr	r1, [pc, #280]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00a      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004744:	4b41      	ldr	r3, [pc, #260]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004752:	493e      	ldr	r1, [pc, #248]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004754:	4313      	orrs	r3, r2
 8004756:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004766:	4b39      	ldr	r3, [pc, #228]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004774:	4935      	ldr	r1, [pc, #212]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00a      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004788:	4b30      	ldr	r3, [pc, #192]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800478a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004796:	492d      	ldr	r1, [pc, #180]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d011      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80047aa:	4b28      	ldr	r3, [pc, #160]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047b8:	4924      	ldr	r1, [pc, #144]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047c8:	d101      	bne.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80047ca:	2301      	movs	r3, #1
 80047cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80047da:	2301      	movs	r3, #1
 80047dc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047ea:	4b18      	ldr	r3, [pc, #96]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f8:	4914      	ldr	r1, [pc, #80]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00b      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800480c:	4b0f      	ldr	r3, [pc, #60]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800480e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004812:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800481c:	490b      	ldr	r1, [pc, #44]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00f      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004830:	4b06      	ldr	r3, [pc, #24]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004836:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004840:	4902      	ldr	r1, [pc, #8]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004848:	e002      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800484a:	bf00      	nop
 800484c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00b      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800485c:	4b8a      	ldr	r3, [pc, #552]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800485e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004862:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486c:	4986      	ldr	r1, [pc, #536]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800486e:	4313      	orrs	r3, r2
 8004870:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00b      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004880:	4b81      	ldr	r3, [pc, #516]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004882:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004886:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004890:	497d      	ldr	r1, [pc, #500]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004892:	4313      	orrs	r3, r2
 8004894:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d006      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 80d6 	beq.w	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048ac:	4b76      	ldr	r3, [pc, #472]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a75      	ldr	r2, [pc, #468]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b8:	f7fd f83a 	bl	8001930 <HAL_GetTick>
 80048bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048c0:	f7fd f836 	bl	8001930 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b64      	cmp	r3, #100	; 0x64
 80048cc:	d901      	bls.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e195      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048d2:	4b6d      	ldr	r3, [pc, #436]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1f0      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d021      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d11d      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048f2:	4b65      	ldr	r3, [pc, #404]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048f8:	0c1b      	lsrs	r3, r3, #16
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004900:	4b61      	ldr	r3, [pc, #388]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004906:	0e1b      	lsrs	r3, r3, #24
 8004908:	f003 030f 	and.w	r3, r3, #15
 800490c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	019a      	lsls	r2, r3, #6
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	041b      	lsls	r3, r3, #16
 8004918:	431a      	orrs	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	061b      	lsls	r3, r3, #24
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	071b      	lsls	r3, r3, #28
 8004926:	4958      	ldr	r1, [pc, #352]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d004      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004942:	d00a      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800494c:	2b00      	cmp	r3, #0
 800494e:	d02e      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004958:	d129      	bne.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800495a:	4b4b      	ldr	r3, [pc, #300]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800495c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004960:	0c1b      	lsrs	r3, r3, #16
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004968:	4b47      	ldr	r3, [pc, #284]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800496a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800496e:	0f1b      	lsrs	r3, r3, #28
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	019a      	lsls	r2, r3, #6
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	041b      	lsls	r3, r3, #16
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	061b      	lsls	r3, r3, #24
 8004988:	431a      	orrs	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	071b      	lsls	r3, r3, #28
 800498e:	493e      	ldr	r1, [pc, #248]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004990:	4313      	orrs	r3, r2
 8004992:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004996:	4b3c      	ldr	r3, [pc, #240]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800499c:	f023 021f 	bic.w	r2, r3, #31
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	3b01      	subs	r3, #1
 80049a6:	4938      	ldr	r1, [pc, #224]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d01d      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049ba:	4b33      	ldr	r3, [pc, #204]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049c0:	0e1b      	lsrs	r3, r3, #24
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049c8:	4b2f      	ldr	r3, [pc, #188]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ce:	0f1b      	lsrs	r3, r3, #28
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	019a      	lsls	r2, r3, #6
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	041b      	lsls	r3, r3, #16
 80049e2:	431a      	orrs	r2, r3
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	061b      	lsls	r3, r3, #24
 80049e8:	431a      	orrs	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	071b      	lsls	r3, r3, #28
 80049ee:	4926      	ldr	r1, [pc, #152]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d011      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	019a      	lsls	r2, r3, #6
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	041b      	lsls	r3, r3, #16
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	061b      	lsls	r3, r3, #24
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	071b      	lsls	r3, r3, #28
 8004a1e:	491a      	ldr	r1, [pc, #104]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a26:	4b18      	ldr	r3, [pc, #96]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a17      	ldr	r2, [pc, #92]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a32:	f7fc ff7d 	bl	8001930 <HAL_GetTick>
 8004a36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a38:	e008      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a3a:	f7fc ff79 	bl	8001930 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b64      	cmp	r3, #100	; 0x64
 8004a46:	d901      	bls.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e0d8      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a4c:	4b0e      	ldr	r3, [pc, #56]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0f0      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	f040 80ce 	bne.w	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a60:	4b09      	ldr	r3, [pc, #36]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a08      	ldr	r2, [pc, #32]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a6c:	f7fc ff60 	bl	8001930 <HAL_GetTick>
 8004a70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a72:	e00b      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a74:	f7fc ff5c 	bl	8001930 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b64      	cmp	r3, #100	; 0x64
 8004a80:	d904      	bls.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e0bb      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004a86:	bf00      	nop
 8004a88:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a8c:	4b5e      	ldr	r3, [pc, #376]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a98:	d0ec      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d009      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d02e      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d12a      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ac2:	4b51      	ldr	r3, [pc, #324]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac8:	0c1b      	lsrs	r3, r3, #16
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ad0:	4b4d      	ldr	r3, [pc, #308]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad6:	0f1b      	lsrs	r3, r3, #28
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	019a      	lsls	r2, r3, #6
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	041b      	lsls	r3, r3, #16
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	061b      	lsls	r3, r3, #24
 8004af0:	431a      	orrs	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	071b      	lsls	r3, r3, #28
 8004af6:	4944      	ldr	r1, [pc, #272]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004afe:	4b42      	ldr	r3, [pc, #264]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b04:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	021b      	lsls	r3, r3, #8
 8004b10:	493d      	ldr	r1, [pc, #244]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d022      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b2c:	d11d      	bne.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b2e:	4b36      	ldr	r3, [pc, #216]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b34:	0e1b      	lsrs	r3, r3, #24
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b3c:	4b32      	ldr	r3, [pc, #200]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b42:	0f1b      	lsrs	r3, r3, #28
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	019a      	lsls	r2, r3, #6
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	041b      	lsls	r3, r3, #16
 8004b56:	431a      	orrs	r2, r3
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	061b      	lsls	r3, r3, #24
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	071b      	lsls	r3, r3, #28
 8004b62:	4929      	ldr	r1, [pc, #164]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d028      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b76:	4b24      	ldr	r3, [pc, #144]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7c:	0e1b      	lsrs	r3, r3, #24
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b84:	4b20      	ldr	r3, [pc, #128]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8a:	0c1b      	lsrs	r3, r3, #16
 8004b8c:	f003 0303 	and.w	r3, r3, #3
 8004b90:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	019a      	lsls	r2, r3, #6
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	041b      	lsls	r3, r3, #16
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	061b      	lsls	r3, r3, #24
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	071b      	lsls	r3, r3, #28
 8004baa:	4917      	ldr	r1, [pc, #92]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004bb2:	4b15      	ldr	r3, [pc, #84]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc0:	4911      	ldr	r1, [pc, #68]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004bc8:	4b0f      	ldr	r3, [pc, #60]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a0e      	ldr	r2, [pc, #56]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd4:	f7fc feac 	bl	8001930 <HAL_GetTick>
 8004bd8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bda:	e008      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bdc:	f7fc fea8 	bl	8001930 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b64      	cmp	r3, #100	; 0x64
 8004be8:	d901      	bls.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e007      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bee:	4b06      	ldr	r3, [pc, #24]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bfa:	d1ef      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3720      	adds	r7, #32
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40023800 	.word	0x40023800

08004c0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e040      	b.n	8004ca0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d106      	bne.n	8004c34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7fc fbe4 	bl	80013fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2224      	movs	r2, #36	; 0x24
 8004c38:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0201 	bic.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fbc2 	bl	80053d4 <UART_SetConfig>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d101      	bne.n	8004c5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e022      	b.n	8004ca0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 fe1a 	bl	800589c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689a      	ldr	r2, [r3, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0201 	orr.w	r2, r2, #1
 8004c96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 fea1 	bl	80059e0 <UART_CheckIdleState>
 8004c9e:	4603      	mov	r3, r0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08a      	sub	sp, #40	; 0x28
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	603b      	str	r3, [r7, #0]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cbc:	2b20      	cmp	r3, #32
 8004cbe:	d171      	bne.n	8004da4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <HAL_UART_Transmit+0x24>
 8004cc6:	88fb      	ldrh	r3, [r7, #6]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e06a      	b.n	8004da6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2221      	movs	r2, #33	; 0x21
 8004cdc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cde:	f7fc fe27 	bl	8001930 <HAL_GetTick>
 8004ce2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	88fa      	ldrh	r2, [r7, #6]
 8004ce8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	88fa      	ldrh	r2, [r7, #6]
 8004cf0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cfc:	d108      	bne.n	8004d10 <HAL_UART_Transmit+0x68>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d104      	bne.n	8004d10 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	61bb      	str	r3, [r7, #24]
 8004d0e:	e003      	b.n	8004d18 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d14:	2300      	movs	r3, #0
 8004d16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d18:	e02c      	b.n	8004d74 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2200      	movs	r2, #0
 8004d22:	2180      	movs	r1, #128	; 0x80
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 fea8 	bl	8005a7a <UART_WaitOnFlagUntilTimeout>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e038      	b.n	8004da6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10b      	bne.n	8004d52 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d48:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	3302      	adds	r3, #2
 8004d4e:	61bb      	str	r3, [r7, #24]
 8004d50:	e007      	b.n	8004d62 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	781a      	ldrb	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1cc      	bne.n	8004d1a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	2200      	movs	r2, #0
 8004d88:	2140      	movs	r1, #64	; 0x40
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 fe75 	bl	8005a7a <UART_WaitOnFlagUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e005      	b.n	8004da6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	e000      	b.n	8004da6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004da4:	2302      	movs	r3, #2
  }
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3720      	adds	r7, #32
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b0ba      	sub	sp, #232	; 0xe8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004dd6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004dda:	f640 030f 	movw	r3, #2063	; 0x80f
 8004dde:	4013      	ands	r3, r2
 8004de0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004de4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d115      	bne.n	8004e18 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df0:	f003 0320 	and.w	r3, r3, #32
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00f      	beq.n	8004e18 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dfc:	f003 0320 	and.w	r3, r3, #32
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d009      	beq.n	8004e18 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 82ac 	beq.w	8005366 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	4798      	blx	r3
      }
      return;
 8004e16:	e2a6      	b.n	8005366 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004e18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 8117 	beq.w	8005050 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004e2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004e32:	4b85      	ldr	r3, [pc, #532]	; (8005048 <HAL_UART_IRQHandler+0x298>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 810a 	beq.w	8005050 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d011      	beq.n	8004e6c <HAL_UART_IRQHandler+0xbc>
 8004e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00b      	beq.n	8004e6c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e62:	f043 0201 	orr.w	r2, r3, #1
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d011      	beq.n	8004e9c <HAL_UART_IRQHandler+0xec>
 8004e78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00b      	beq.n	8004e9c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2202      	movs	r2, #2
 8004e8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e92:	f043 0204 	orr.w	r2, r3, #4
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d011      	beq.n	8004ecc <HAL_UART_IRQHandler+0x11c>
 8004ea8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00b      	beq.n	8004ecc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2204      	movs	r2, #4
 8004eba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ec2:	f043 0202 	orr.w	r2, r3, #2
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d017      	beq.n	8004f08 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d105      	bne.n	8004ef0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ee4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ee8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00b      	beq.n	8004f08 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2208      	movs	r2, #8
 8004ef6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004efe:	f043 0208 	orr.w	r2, r3, #8
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d012      	beq.n	8004f3a <HAL_UART_IRQHandler+0x18a>
 8004f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00c      	beq.n	8004f3a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f30:	f043 0220 	orr.w	r2, r3, #32
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 8212 	beq.w	800536a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f4a:	f003 0320 	and.w	r3, r3, #32
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00d      	beq.n	8004f6e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f56:	f003 0320 	and.w	r3, r3, #32
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d007      	beq.n	8004f6e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f82:	2b40      	cmp	r3, #64	; 0x40
 8004f84:	d005      	beq.n	8004f92 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d04f      	beq.n	8005032 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fe37 	bl	8005c06 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa2:	2b40      	cmp	r3, #64	; 0x40
 8004fa4:	d141      	bne.n	800502a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3308      	adds	r3, #8
 8004fac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fb4:	e853 3f00 	ldrex	r3, [r3]
 8004fb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3308      	adds	r3, #8
 8004fce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004fd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004fd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004fde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004fe2:	e841 2300 	strex	r3, r2, [r1]
 8004fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004fea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1d9      	bne.n	8004fa6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d013      	beq.n	8005022 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ffe:	4a13      	ldr	r2, [pc, #76]	; (800504c <HAL_UART_IRQHandler+0x29c>)
 8005000:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005006:	4618      	mov	r0, r3
 8005008:	f7fd fbf8 	bl	80027fc <HAL_DMA_Abort_IT>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d017      	beq.n	8005042 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800501c:	4610      	mov	r0, r2
 800501e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005020:	e00f      	b.n	8005042 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f9b6 	bl	8005394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005028:	e00b      	b.n	8005042 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f9b2 	bl	8005394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005030:	e007      	b.n	8005042 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f9ae 	bl	8005394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005040:	e193      	b.n	800536a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005042:	bf00      	nop
    return;
 8005044:	e191      	b.n	800536a <HAL_UART_IRQHandler+0x5ba>
 8005046:	bf00      	nop
 8005048:	04000120 	.word	0x04000120
 800504c:	08005ccf 	.word	0x08005ccf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005054:	2b01      	cmp	r3, #1
 8005056:	f040 814c 	bne.w	80052f2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800505a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800505e:	f003 0310 	and.w	r3, r3, #16
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 8145 	beq.w	80052f2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800506c:	f003 0310 	and.w	r3, r3, #16
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 813e 	beq.w	80052f2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2210      	movs	r2, #16
 800507c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005088:	2b40      	cmp	r3, #64	; 0x40
 800508a:	f040 80b6 	bne.w	80051fa <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800509a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 8165 	beq.w	800536e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80050aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050ae:	429a      	cmp	r2, r3
 80050b0:	f080 815d 	bcs.w	800536e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050c8:	f000 8086 	beq.w	80051d8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80050e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	461a      	mov	r2, r3
 80050f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80050f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80050fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005102:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005106:	e841 2300 	strex	r3, r2, [r1]
 800510a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800510e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1da      	bne.n	80050cc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3308      	adds	r3, #8
 800511c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005120:	e853 3f00 	ldrex	r3, [r3]
 8005124:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005126:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005128:	f023 0301 	bic.w	r3, r3, #1
 800512c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3308      	adds	r3, #8
 8005136:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800513a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800513e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005140:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005142:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005146:	e841 2300 	strex	r3, r2, [r1]
 800514a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800514c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1e1      	bne.n	8005116 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	3308      	adds	r3, #8
 8005158:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800515c:	e853 3f00 	ldrex	r3, [r3]
 8005160:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005168:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3308      	adds	r3, #8
 8005172:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005176:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005178:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800517c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800517e:	e841 2300 	strex	r3, r2, [r1]
 8005182:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005184:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1e3      	bne.n	8005152 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2220      	movs	r2, #32
 800518e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051a0:	e853 3f00 	ldrex	r3, [r3]
 80051a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051a8:	f023 0310 	bic.w	r3, r3, #16
 80051ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	461a      	mov	r2, r3
 80051b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80051bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051c2:	e841 2300 	strex	r3, r2, [r1]
 80051c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1e4      	bne.n	8005198 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fd faa2 	bl	800271c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	4619      	mov	r1, r3
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f8d8 	bl	80053a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051f8:	e0b9      	b.n	800536e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005206:	b29b      	uxth	r3, r3
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005214:	b29b      	uxth	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 80ab 	beq.w	8005372 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 800521c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 80a6 	beq.w	8005372 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522e:	e853 3f00 	ldrex	r3, [r3]
 8005232:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005236:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800523a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005248:	647b      	str	r3, [r7, #68]	; 0x44
 800524a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800524e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005250:	e841 2300 	strex	r3, r2, [r1]
 8005254:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1e4      	bne.n	8005226 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3308      	adds	r3, #8
 8005262:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	e853 3f00 	ldrex	r3, [r3]
 800526a:	623b      	str	r3, [r7, #32]
   return(result);
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	f023 0301 	bic.w	r3, r3, #1
 8005272:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3308      	adds	r3, #8
 800527c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005280:	633a      	str	r2, [r7, #48]	; 0x30
 8005282:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005284:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005288:	e841 2300 	strex	r3, r2, [r1]
 800528c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800528e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e3      	bne.n	800525c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2220      	movs	r2, #32
 8005298:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f023 0310 	bic.w	r3, r3, #16
 80052bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	461a      	mov	r2, r3
 80052c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052ca:	61fb      	str	r3, [r7, #28]
 80052cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ce:	69b9      	ldr	r1, [r7, #24]
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	e841 2300 	strex	r3, r2, [r1]
 80052d6:	617b      	str	r3, [r7, #20]
   return(result);
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1e4      	bne.n	80052a8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2202      	movs	r2, #2
 80052e2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052e8:	4619      	mov	r1, r3
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f85c 	bl	80053a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052f0:	e03f      	b.n	8005372 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80052f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00e      	beq.n	800531c <HAL_UART_IRQHandler+0x56c>
 80052fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d008      	beq.n	800531c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005312:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f853 	bl	80053c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800531a:	e02d      	b.n	8005378 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800531c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00e      	beq.n	8005346 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800532c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005330:	2b00      	cmp	r3, #0
 8005332:	d008      	beq.n	8005346 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01c      	beq.n	8005376 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	4798      	blx	r3
    }
    return;
 8005344:	e017      	b.n	8005376 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800534a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534e:	2b00      	cmp	r3, #0
 8005350:	d012      	beq.n	8005378 <HAL_UART_IRQHandler+0x5c8>
 8005352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00c      	beq.n	8005378 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fccb 	bl	8005cfa <UART_EndTransmit_IT>
    return;
 8005364:	e008      	b.n	8005378 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005366:	bf00      	nop
 8005368:	e006      	b.n	8005378 <HAL_UART_IRQHandler+0x5c8>
    return;
 800536a:	bf00      	nop
 800536c:	e004      	b.n	8005378 <HAL_UART_IRQHandler+0x5c8>
      return;
 800536e:	bf00      	nop
 8005370:	e002      	b.n	8005378 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005372:	bf00      	nop
 8005374:	e000      	b.n	8005378 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005376:	bf00      	nop
  }

}
 8005378:	37e8      	adds	r7, #232	; 0xe8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop

08005380 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	460b      	mov	r3, r1
 80053b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b088      	sub	sp, #32
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	431a      	orrs	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	4ba6      	ldr	r3, [pc, #664]	; (8005698 <UART_SetConfig+0x2c4>)
 8005400:	4013      	ands	r3, r2
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	6979      	ldr	r1, [r7, #20]
 8005408:	430b      	orrs	r3, r1
 800540a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	4313      	orrs	r3, r2
 8005430:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	430a      	orrs	r2, r1
 8005444:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a94      	ldr	r2, [pc, #592]	; (800569c <UART_SetConfig+0x2c8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d120      	bne.n	8005492 <UART_SetConfig+0xbe>
 8005450:	4b93      	ldr	r3, [pc, #588]	; (80056a0 <UART_SetConfig+0x2cc>)
 8005452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	2b03      	cmp	r3, #3
 800545c:	d816      	bhi.n	800548c <UART_SetConfig+0xb8>
 800545e:	a201      	add	r2, pc, #4	; (adr r2, 8005464 <UART_SetConfig+0x90>)
 8005460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005464:	08005475 	.word	0x08005475
 8005468:	08005481 	.word	0x08005481
 800546c:	0800547b 	.word	0x0800547b
 8005470:	08005487 	.word	0x08005487
 8005474:	2301      	movs	r3, #1
 8005476:	77fb      	strb	r3, [r7, #31]
 8005478:	e150      	b.n	800571c <UART_SetConfig+0x348>
 800547a:	2302      	movs	r3, #2
 800547c:	77fb      	strb	r3, [r7, #31]
 800547e:	e14d      	b.n	800571c <UART_SetConfig+0x348>
 8005480:	2304      	movs	r3, #4
 8005482:	77fb      	strb	r3, [r7, #31]
 8005484:	e14a      	b.n	800571c <UART_SetConfig+0x348>
 8005486:	2308      	movs	r3, #8
 8005488:	77fb      	strb	r3, [r7, #31]
 800548a:	e147      	b.n	800571c <UART_SetConfig+0x348>
 800548c:	2310      	movs	r3, #16
 800548e:	77fb      	strb	r3, [r7, #31]
 8005490:	e144      	b.n	800571c <UART_SetConfig+0x348>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a83      	ldr	r2, [pc, #524]	; (80056a4 <UART_SetConfig+0x2d0>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d132      	bne.n	8005502 <UART_SetConfig+0x12e>
 800549c:	4b80      	ldr	r3, [pc, #512]	; (80056a0 <UART_SetConfig+0x2cc>)
 800549e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a2:	f003 030c 	and.w	r3, r3, #12
 80054a6:	2b0c      	cmp	r3, #12
 80054a8:	d828      	bhi.n	80054fc <UART_SetConfig+0x128>
 80054aa:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <UART_SetConfig+0xdc>)
 80054ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b0:	080054e5 	.word	0x080054e5
 80054b4:	080054fd 	.word	0x080054fd
 80054b8:	080054fd 	.word	0x080054fd
 80054bc:	080054fd 	.word	0x080054fd
 80054c0:	080054f1 	.word	0x080054f1
 80054c4:	080054fd 	.word	0x080054fd
 80054c8:	080054fd 	.word	0x080054fd
 80054cc:	080054fd 	.word	0x080054fd
 80054d0:	080054eb 	.word	0x080054eb
 80054d4:	080054fd 	.word	0x080054fd
 80054d8:	080054fd 	.word	0x080054fd
 80054dc:	080054fd 	.word	0x080054fd
 80054e0:	080054f7 	.word	0x080054f7
 80054e4:	2300      	movs	r3, #0
 80054e6:	77fb      	strb	r3, [r7, #31]
 80054e8:	e118      	b.n	800571c <UART_SetConfig+0x348>
 80054ea:	2302      	movs	r3, #2
 80054ec:	77fb      	strb	r3, [r7, #31]
 80054ee:	e115      	b.n	800571c <UART_SetConfig+0x348>
 80054f0:	2304      	movs	r3, #4
 80054f2:	77fb      	strb	r3, [r7, #31]
 80054f4:	e112      	b.n	800571c <UART_SetConfig+0x348>
 80054f6:	2308      	movs	r3, #8
 80054f8:	77fb      	strb	r3, [r7, #31]
 80054fa:	e10f      	b.n	800571c <UART_SetConfig+0x348>
 80054fc:	2310      	movs	r3, #16
 80054fe:	77fb      	strb	r3, [r7, #31]
 8005500:	e10c      	b.n	800571c <UART_SetConfig+0x348>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a68      	ldr	r2, [pc, #416]	; (80056a8 <UART_SetConfig+0x2d4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d120      	bne.n	800554e <UART_SetConfig+0x17a>
 800550c:	4b64      	ldr	r3, [pc, #400]	; (80056a0 <UART_SetConfig+0x2cc>)
 800550e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005512:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005516:	2b30      	cmp	r3, #48	; 0x30
 8005518:	d013      	beq.n	8005542 <UART_SetConfig+0x16e>
 800551a:	2b30      	cmp	r3, #48	; 0x30
 800551c:	d814      	bhi.n	8005548 <UART_SetConfig+0x174>
 800551e:	2b20      	cmp	r3, #32
 8005520:	d009      	beq.n	8005536 <UART_SetConfig+0x162>
 8005522:	2b20      	cmp	r3, #32
 8005524:	d810      	bhi.n	8005548 <UART_SetConfig+0x174>
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <UART_SetConfig+0x15c>
 800552a:	2b10      	cmp	r3, #16
 800552c:	d006      	beq.n	800553c <UART_SetConfig+0x168>
 800552e:	e00b      	b.n	8005548 <UART_SetConfig+0x174>
 8005530:	2300      	movs	r3, #0
 8005532:	77fb      	strb	r3, [r7, #31]
 8005534:	e0f2      	b.n	800571c <UART_SetConfig+0x348>
 8005536:	2302      	movs	r3, #2
 8005538:	77fb      	strb	r3, [r7, #31]
 800553a:	e0ef      	b.n	800571c <UART_SetConfig+0x348>
 800553c:	2304      	movs	r3, #4
 800553e:	77fb      	strb	r3, [r7, #31]
 8005540:	e0ec      	b.n	800571c <UART_SetConfig+0x348>
 8005542:	2308      	movs	r3, #8
 8005544:	77fb      	strb	r3, [r7, #31]
 8005546:	e0e9      	b.n	800571c <UART_SetConfig+0x348>
 8005548:	2310      	movs	r3, #16
 800554a:	77fb      	strb	r3, [r7, #31]
 800554c:	e0e6      	b.n	800571c <UART_SetConfig+0x348>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a56      	ldr	r2, [pc, #344]	; (80056ac <UART_SetConfig+0x2d8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d120      	bne.n	800559a <UART_SetConfig+0x1c6>
 8005558:	4b51      	ldr	r3, [pc, #324]	; (80056a0 <UART_SetConfig+0x2cc>)
 800555a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005562:	2bc0      	cmp	r3, #192	; 0xc0
 8005564:	d013      	beq.n	800558e <UART_SetConfig+0x1ba>
 8005566:	2bc0      	cmp	r3, #192	; 0xc0
 8005568:	d814      	bhi.n	8005594 <UART_SetConfig+0x1c0>
 800556a:	2b80      	cmp	r3, #128	; 0x80
 800556c:	d009      	beq.n	8005582 <UART_SetConfig+0x1ae>
 800556e:	2b80      	cmp	r3, #128	; 0x80
 8005570:	d810      	bhi.n	8005594 <UART_SetConfig+0x1c0>
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <UART_SetConfig+0x1a8>
 8005576:	2b40      	cmp	r3, #64	; 0x40
 8005578:	d006      	beq.n	8005588 <UART_SetConfig+0x1b4>
 800557a:	e00b      	b.n	8005594 <UART_SetConfig+0x1c0>
 800557c:	2300      	movs	r3, #0
 800557e:	77fb      	strb	r3, [r7, #31]
 8005580:	e0cc      	b.n	800571c <UART_SetConfig+0x348>
 8005582:	2302      	movs	r3, #2
 8005584:	77fb      	strb	r3, [r7, #31]
 8005586:	e0c9      	b.n	800571c <UART_SetConfig+0x348>
 8005588:	2304      	movs	r3, #4
 800558a:	77fb      	strb	r3, [r7, #31]
 800558c:	e0c6      	b.n	800571c <UART_SetConfig+0x348>
 800558e:	2308      	movs	r3, #8
 8005590:	77fb      	strb	r3, [r7, #31]
 8005592:	e0c3      	b.n	800571c <UART_SetConfig+0x348>
 8005594:	2310      	movs	r3, #16
 8005596:	77fb      	strb	r3, [r7, #31]
 8005598:	e0c0      	b.n	800571c <UART_SetConfig+0x348>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a44      	ldr	r2, [pc, #272]	; (80056b0 <UART_SetConfig+0x2dc>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d125      	bne.n	80055f0 <UART_SetConfig+0x21c>
 80055a4:	4b3e      	ldr	r3, [pc, #248]	; (80056a0 <UART_SetConfig+0x2cc>)
 80055a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055b2:	d017      	beq.n	80055e4 <UART_SetConfig+0x210>
 80055b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055b8:	d817      	bhi.n	80055ea <UART_SetConfig+0x216>
 80055ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055be:	d00b      	beq.n	80055d8 <UART_SetConfig+0x204>
 80055c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055c4:	d811      	bhi.n	80055ea <UART_SetConfig+0x216>
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <UART_SetConfig+0x1fe>
 80055ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ce:	d006      	beq.n	80055de <UART_SetConfig+0x20a>
 80055d0:	e00b      	b.n	80055ea <UART_SetConfig+0x216>
 80055d2:	2300      	movs	r3, #0
 80055d4:	77fb      	strb	r3, [r7, #31]
 80055d6:	e0a1      	b.n	800571c <UART_SetConfig+0x348>
 80055d8:	2302      	movs	r3, #2
 80055da:	77fb      	strb	r3, [r7, #31]
 80055dc:	e09e      	b.n	800571c <UART_SetConfig+0x348>
 80055de:	2304      	movs	r3, #4
 80055e0:	77fb      	strb	r3, [r7, #31]
 80055e2:	e09b      	b.n	800571c <UART_SetConfig+0x348>
 80055e4:	2308      	movs	r3, #8
 80055e6:	77fb      	strb	r3, [r7, #31]
 80055e8:	e098      	b.n	800571c <UART_SetConfig+0x348>
 80055ea:	2310      	movs	r3, #16
 80055ec:	77fb      	strb	r3, [r7, #31]
 80055ee:	e095      	b.n	800571c <UART_SetConfig+0x348>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a2f      	ldr	r2, [pc, #188]	; (80056b4 <UART_SetConfig+0x2e0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d125      	bne.n	8005646 <UART_SetConfig+0x272>
 80055fa:	4b29      	ldr	r3, [pc, #164]	; (80056a0 <UART_SetConfig+0x2cc>)
 80055fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005600:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005604:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005608:	d017      	beq.n	800563a <UART_SetConfig+0x266>
 800560a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800560e:	d817      	bhi.n	8005640 <UART_SetConfig+0x26c>
 8005610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005614:	d00b      	beq.n	800562e <UART_SetConfig+0x25a>
 8005616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800561a:	d811      	bhi.n	8005640 <UART_SetConfig+0x26c>
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <UART_SetConfig+0x254>
 8005620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005624:	d006      	beq.n	8005634 <UART_SetConfig+0x260>
 8005626:	e00b      	b.n	8005640 <UART_SetConfig+0x26c>
 8005628:	2301      	movs	r3, #1
 800562a:	77fb      	strb	r3, [r7, #31]
 800562c:	e076      	b.n	800571c <UART_SetConfig+0x348>
 800562e:	2302      	movs	r3, #2
 8005630:	77fb      	strb	r3, [r7, #31]
 8005632:	e073      	b.n	800571c <UART_SetConfig+0x348>
 8005634:	2304      	movs	r3, #4
 8005636:	77fb      	strb	r3, [r7, #31]
 8005638:	e070      	b.n	800571c <UART_SetConfig+0x348>
 800563a:	2308      	movs	r3, #8
 800563c:	77fb      	strb	r3, [r7, #31]
 800563e:	e06d      	b.n	800571c <UART_SetConfig+0x348>
 8005640:	2310      	movs	r3, #16
 8005642:	77fb      	strb	r3, [r7, #31]
 8005644:	e06a      	b.n	800571c <UART_SetConfig+0x348>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a1b      	ldr	r2, [pc, #108]	; (80056b8 <UART_SetConfig+0x2e4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d138      	bne.n	80056c2 <UART_SetConfig+0x2ee>
 8005650:	4b13      	ldr	r3, [pc, #76]	; (80056a0 <UART_SetConfig+0x2cc>)
 8005652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005656:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800565a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800565e:	d017      	beq.n	8005690 <UART_SetConfig+0x2bc>
 8005660:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005664:	d82a      	bhi.n	80056bc <UART_SetConfig+0x2e8>
 8005666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800566a:	d00b      	beq.n	8005684 <UART_SetConfig+0x2b0>
 800566c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005670:	d824      	bhi.n	80056bc <UART_SetConfig+0x2e8>
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <UART_SetConfig+0x2aa>
 8005676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800567a:	d006      	beq.n	800568a <UART_SetConfig+0x2b6>
 800567c:	e01e      	b.n	80056bc <UART_SetConfig+0x2e8>
 800567e:	2300      	movs	r3, #0
 8005680:	77fb      	strb	r3, [r7, #31]
 8005682:	e04b      	b.n	800571c <UART_SetConfig+0x348>
 8005684:	2302      	movs	r3, #2
 8005686:	77fb      	strb	r3, [r7, #31]
 8005688:	e048      	b.n	800571c <UART_SetConfig+0x348>
 800568a:	2304      	movs	r3, #4
 800568c:	77fb      	strb	r3, [r7, #31]
 800568e:	e045      	b.n	800571c <UART_SetConfig+0x348>
 8005690:	2308      	movs	r3, #8
 8005692:	77fb      	strb	r3, [r7, #31]
 8005694:	e042      	b.n	800571c <UART_SetConfig+0x348>
 8005696:	bf00      	nop
 8005698:	efff69f3 	.word	0xefff69f3
 800569c:	40011000 	.word	0x40011000
 80056a0:	40023800 	.word	0x40023800
 80056a4:	40004400 	.word	0x40004400
 80056a8:	40004800 	.word	0x40004800
 80056ac:	40004c00 	.word	0x40004c00
 80056b0:	40005000 	.word	0x40005000
 80056b4:	40011400 	.word	0x40011400
 80056b8:	40007800 	.word	0x40007800
 80056bc:	2310      	movs	r3, #16
 80056be:	77fb      	strb	r3, [r7, #31]
 80056c0:	e02c      	b.n	800571c <UART_SetConfig+0x348>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a72      	ldr	r2, [pc, #456]	; (8005890 <UART_SetConfig+0x4bc>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d125      	bne.n	8005718 <UART_SetConfig+0x344>
 80056cc:	4b71      	ldr	r3, [pc, #452]	; (8005894 <UART_SetConfig+0x4c0>)
 80056ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80056d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056da:	d017      	beq.n	800570c <UART_SetConfig+0x338>
 80056dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056e0:	d817      	bhi.n	8005712 <UART_SetConfig+0x33e>
 80056e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056e6:	d00b      	beq.n	8005700 <UART_SetConfig+0x32c>
 80056e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ec:	d811      	bhi.n	8005712 <UART_SetConfig+0x33e>
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <UART_SetConfig+0x326>
 80056f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056f6:	d006      	beq.n	8005706 <UART_SetConfig+0x332>
 80056f8:	e00b      	b.n	8005712 <UART_SetConfig+0x33e>
 80056fa:	2300      	movs	r3, #0
 80056fc:	77fb      	strb	r3, [r7, #31]
 80056fe:	e00d      	b.n	800571c <UART_SetConfig+0x348>
 8005700:	2302      	movs	r3, #2
 8005702:	77fb      	strb	r3, [r7, #31]
 8005704:	e00a      	b.n	800571c <UART_SetConfig+0x348>
 8005706:	2304      	movs	r3, #4
 8005708:	77fb      	strb	r3, [r7, #31]
 800570a:	e007      	b.n	800571c <UART_SetConfig+0x348>
 800570c:	2308      	movs	r3, #8
 800570e:	77fb      	strb	r3, [r7, #31]
 8005710:	e004      	b.n	800571c <UART_SetConfig+0x348>
 8005712:	2310      	movs	r3, #16
 8005714:	77fb      	strb	r3, [r7, #31]
 8005716:	e001      	b.n	800571c <UART_SetConfig+0x348>
 8005718:	2310      	movs	r3, #16
 800571a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005724:	d15b      	bne.n	80057de <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005726:	7ffb      	ldrb	r3, [r7, #31]
 8005728:	2b08      	cmp	r3, #8
 800572a:	d828      	bhi.n	800577e <UART_SetConfig+0x3aa>
 800572c:	a201      	add	r2, pc, #4	; (adr r2, 8005734 <UART_SetConfig+0x360>)
 800572e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005732:	bf00      	nop
 8005734:	08005759 	.word	0x08005759
 8005738:	08005761 	.word	0x08005761
 800573c:	08005769 	.word	0x08005769
 8005740:	0800577f 	.word	0x0800577f
 8005744:	0800576f 	.word	0x0800576f
 8005748:	0800577f 	.word	0x0800577f
 800574c:	0800577f 	.word	0x0800577f
 8005750:	0800577f 	.word	0x0800577f
 8005754:	08005777 	.word	0x08005777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005758:	f7fe fe08 	bl	800436c <HAL_RCC_GetPCLK1Freq>
 800575c:	61b8      	str	r0, [r7, #24]
        break;
 800575e:	e013      	b.n	8005788 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005760:	f7fe fe18 	bl	8004394 <HAL_RCC_GetPCLK2Freq>
 8005764:	61b8      	str	r0, [r7, #24]
        break;
 8005766:	e00f      	b.n	8005788 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005768:	4b4b      	ldr	r3, [pc, #300]	; (8005898 <UART_SetConfig+0x4c4>)
 800576a:	61bb      	str	r3, [r7, #24]
        break;
 800576c:	e00c      	b.n	8005788 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800576e:	f7fe fceb 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8005772:	61b8      	str	r0, [r7, #24]
        break;
 8005774:	e008      	b.n	8005788 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800577a:	61bb      	str	r3, [r7, #24]
        break;
 800577c:	e004      	b.n	8005788 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	77bb      	strb	r3, [r7, #30]
        break;
 8005786:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d074      	beq.n	8005878 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	005a      	lsls	r2, r3, #1
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	085b      	lsrs	r3, r3, #1
 8005798:	441a      	add	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	2b0f      	cmp	r3, #15
 80057a8:	d916      	bls.n	80057d8 <UART_SetConfig+0x404>
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057b0:	d212      	bcs.n	80057d8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	f023 030f 	bic.w	r3, r3, #15
 80057ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	085b      	lsrs	r3, r3, #1
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	89fb      	ldrh	r3, [r7, #14]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	89fa      	ldrh	r2, [r7, #14]
 80057d4:	60da      	str	r2, [r3, #12]
 80057d6:	e04f      	b.n	8005878 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	77bb      	strb	r3, [r7, #30]
 80057dc:	e04c      	b.n	8005878 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057de:	7ffb      	ldrb	r3, [r7, #31]
 80057e0:	2b08      	cmp	r3, #8
 80057e2:	d828      	bhi.n	8005836 <UART_SetConfig+0x462>
 80057e4:	a201      	add	r2, pc, #4	; (adr r2, 80057ec <UART_SetConfig+0x418>)
 80057e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ea:	bf00      	nop
 80057ec:	08005811 	.word	0x08005811
 80057f0:	08005819 	.word	0x08005819
 80057f4:	08005821 	.word	0x08005821
 80057f8:	08005837 	.word	0x08005837
 80057fc:	08005827 	.word	0x08005827
 8005800:	08005837 	.word	0x08005837
 8005804:	08005837 	.word	0x08005837
 8005808:	08005837 	.word	0x08005837
 800580c:	0800582f 	.word	0x0800582f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005810:	f7fe fdac 	bl	800436c <HAL_RCC_GetPCLK1Freq>
 8005814:	61b8      	str	r0, [r7, #24]
        break;
 8005816:	e013      	b.n	8005840 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005818:	f7fe fdbc 	bl	8004394 <HAL_RCC_GetPCLK2Freq>
 800581c:	61b8      	str	r0, [r7, #24]
        break;
 800581e:	e00f      	b.n	8005840 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005820:	4b1d      	ldr	r3, [pc, #116]	; (8005898 <UART_SetConfig+0x4c4>)
 8005822:	61bb      	str	r3, [r7, #24]
        break;
 8005824:	e00c      	b.n	8005840 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005826:	f7fe fc8f 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 800582a:	61b8      	str	r0, [r7, #24]
        break;
 800582c:	e008      	b.n	8005840 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800582e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005832:	61bb      	str	r3, [r7, #24]
        break;
 8005834:	e004      	b.n	8005840 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005836:	2300      	movs	r3, #0
 8005838:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	77bb      	strb	r3, [r7, #30]
        break;
 800583e:	bf00      	nop
    }

    if (pclk != 0U)
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d018      	beq.n	8005878 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	085a      	lsrs	r2, r3, #1
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	441a      	add	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	fbb2 f3f3 	udiv	r3, r2, r3
 8005858:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	2b0f      	cmp	r3, #15
 800585e:	d909      	bls.n	8005874 <UART_SetConfig+0x4a0>
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005866:	d205      	bcs.n	8005874 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	b29a      	uxth	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	60da      	str	r2, [r3, #12]
 8005872:	e001      	b.n	8005878 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005884:	7fbb      	ldrb	r3, [r7, #30]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3720      	adds	r7, #32
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	40007c00 	.word	0x40007c00
 8005894:	40023800 	.word	0x40023800
 8005898:	00f42400 	.word	0x00f42400

0800589c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00a      	beq.n	80058c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	f003 0304 	and.w	r3, r3, #4
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00a      	beq.n	800590a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	f003 0308 	and.w	r3, r3, #8
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	f003 0310 	and.w	r3, r3, #16
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	f003 0320 	and.w	r3, r3, #32
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00a      	beq.n	8005970 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005978:	2b00      	cmp	r3, #0
 800597a:	d01a      	beq.n	80059b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800599a:	d10a      	bne.n	80059b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	605a      	str	r2, [r3, #4]
  }
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af02      	add	r7, sp, #8
 80059e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059f0:	f7fb ff9e 	bl	8001930 <HAL_GetTick>
 80059f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0308 	and.w	r3, r3, #8
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d10e      	bne.n	8005a22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f831 	bl	8005a7a <UART_WaitOnFlagUntilTimeout>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e027      	b.n	8005a72 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d10e      	bne.n	8005a4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f81b 	bl	8005a7a <UART_WaitOnFlagUntilTimeout>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e011      	b.n	8005a72 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2220      	movs	r2, #32
 8005a52:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b09c      	sub	sp, #112	; 0x70
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	60f8      	str	r0, [r7, #12]
 8005a82:	60b9      	str	r1, [r7, #8]
 8005a84:	603b      	str	r3, [r7, #0]
 8005a86:	4613      	mov	r3, r2
 8005a88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a8a:	e0a7      	b.n	8005bdc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a92:	f000 80a3 	beq.w	8005bdc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a96:	f7fb ff4b 	bl	8001930 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d302      	bcc.n	8005aac <UART_WaitOnFlagUntilTimeout+0x32>
 8005aa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d13f      	bne.n	8005b2c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ab4:	e853 3f00 	ldrex	r3, [r3]
 8005ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005abc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ac0:	667b      	str	r3, [r7, #100]	; 0x64
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005aca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005acc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ace:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ad0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1e6      	bne.n	8005aac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3308      	adds	r3, #8
 8005ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af0:	f023 0301 	bic.w	r3, r3, #1
 8005af4:	663b      	str	r3, [r7, #96]	; 0x60
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3308      	adds	r3, #8
 8005afc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005afe:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b06:	e841 2300 	strex	r3, r2, [r1]
 8005b0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1e5      	bne.n	8005ade <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2220      	movs	r2, #32
 8005b16:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e068      	b.n	8005bfe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0304 	and.w	r3, r3, #4
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d050      	beq.n	8005bdc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b48:	d148      	bne.n	8005bdc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b52:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5c:	e853 3f00 	ldrex	r3, [r3]
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b72:	637b      	str	r3, [r7, #52]	; 0x34
 8005b74:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e6      	bne.n	8005b54 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	e853 3f00 	ldrex	r3, [r3]
 8005b94:	613b      	str	r3, [r7, #16]
   return(result);
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f023 0301 	bic.w	r3, r3, #1
 8005b9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	3308      	adds	r3, #8
 8005ba4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ba6:	623a      	str	r2, [r7, #32]
 8005ba8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	69f9      	ldr	r1, [r7, #28]
 8005bac:	6a3a      	ldr	r2, [r7, #32]
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e5      	bne.n	8005b86 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e010      	b.n	8005bfe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	69da      	ldr	r2, [r3, #28]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	4013      	ands	r3, r2
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	bf0c      	ite	eq
 8005bec:	2301      	moveq	r3, #1
 8005bee:	2300      	movne	r3, #0
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	79fb      	ldrb	r3, [r7, #7]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	f43f af48 	beq.w	8005a8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3770      	adds	r7, #112	; 0x70
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b095      	sub	sp, #84	; 0x54
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c16:	e853 3f00 	ldrex	r3, [r3]
 8005c1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c2c:	643b      	str	r3, [r7, #64]	; 0x40
 8005c2e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c34:	e841 2300 	strex	r3, r2, [r1]
 8005c38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e6      	bne.n	8005c0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3308      	adds	r3, #8
 8005c46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	e853 3f00 	ldrex	r3, [r3]
 8005c4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	f023 0301 	bic.w	r3, r3, #1
 8005c56:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3308      	adds	r3, #8
 8005c5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c68:	e841 2300 	strex	r3, r2, [r1]
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1e5      	bne.n	8005c40 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d118      	bne.n	8005cae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	e853 3f00 	ldrex	r3, [r3]
 8005c88:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	f023 0310 	bic.w	r3, r3, #16
 8005c90:	647b      	str	r3, [r7, #68]	; 0x44
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c9a:	61bb      	str	r3, [r7, #24]
 8005c9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9e:	6979      	ldr	r1, [r7, #20]
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	e841 2300 	strex	r3, r2, [r1]
 8005ca6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1e6      	bne.n	8005c7c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005cc2:	bf00      	nop
 8005cc4:	3754      	adds	r7, #84	; 0x54
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b084      	sub	sp, #16
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f7ff fb51 	bl	8005394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cf2:	bf00      	nop
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b088      	sub	sp, #32
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	e853 3f00 	ldrex	r3, [r3]
 8005d0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d16:	61fb      	str	r3, [r7, #28]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	61bb      	str	r3, [r7, #24]
 8005d22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d24:	6979      	ldr	r1, [r7, #20]
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	e841 2300 	strex	r3, r2, [r1]
 8005d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1e6      	bne.n	8005d02 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2220      	movs	r2, #32
 8005d38:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7ff fb1d 	bl	8005380 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d46:	bf00      	nop
 8005d48:	3720      	adds	r7, #32
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d50:	b084      	sub	sp, #16
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b084      	sub	sp, #16
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	f107 001c 	add.w	r0, r7, #28
 8005d5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d120      	bne.n	8005daa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68da      	ldr	r2, [r3, #12]
 8005d78:	4b20      	ldr	r3, [pc, #128]	; (8005dfc <USB_CoreInit+0xac>)
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d105      	bne.n	8005d9e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fa96 	bl	80062d0 <USB_CoreReset>
 8005da4:	4603      	mov	r3, r0
 8005da6:	73fb      	strb	r3, [r7, #15]
 8005da8:	e010      	b.n	8005dcc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fa8a 	bl	80062d0 <USB_CoreReset>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d10b      	bne.n	8005dea <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f043 0206 	orr.w	r2, r3, #6
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f043 0220 	orr.w	r2, r3, #32
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005df6:	b004      	add	sp, #16
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	ffbdffbf 	.word	0xffbdffbf

08005e00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f023 0201 	bic.w	r2, r3, #1
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b084      	sub	sp, #16
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e3e:	78fb      	ldrb	r3, [r7, #3]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d115      	bne.n	8005e70 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e50:	2001      	movs	r0, #1
 8005e52:	f7fb fd79 	bl	8001948 <HAL_Delay>
      ms++;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fa29 	bl	80062b4 <USB_GetMode>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d01e      	beq.n	8005ea6 <USB_SetCurrentMode+0x84>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2b31      	cmp	r3, #49	; 0x31
 8005e6c:	d9f0      	bls.n	8005e50 <USB_SetCurrentMode+0x2e>
 8005e6e:	e01a      	b.n	8005ea6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e70:	78fb      	ldrb	r3, [r7, #3]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d115      	bne.n	8005ea2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e82:	2001      	movs	r0, #1
 8005e84:	f7fb fd60 	bl	8001948 <HAL_Delay>
      ms++;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fa10 	bl	80062b4 <USB_GetMode>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d005      	beq.n	8005ea6 <USB_SetCurrentMode+0x84>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2b31      	cmp	r3, #49	; 0x31
 8005e9e:	d9f0      	bls.n	8005e82 <USB_SetCurrentMode+0x60>
 8005ea0:	e001      	b.n	8005ea6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e005      	b.n	8005eb2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b32      	cmp	r3, #50	; 0x32
 8005eaa:	d101      	bne.n	8005eb0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e000      	b.n	8005eb2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
	...

08005ebc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ebc:	b084      	sub	sp, #16
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b086      	sub	sp, #24
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005eca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	613b      	str	r3, [r7, #16]
 8005eda:	e009      	b.n	8005ef0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	3340      	adds	r3, #64	; 0x40
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	3301      	adds	r3, #1
 8005eee:	613b      	str	r3, [r7, #16]
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	2b0e      	cmp	r3, #14
 8005ef4:	d9f2      	bls.n	8005edc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d11c      	bne.n	8005f36 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f0a:	f043 0302 	orr.w	r3, r3, #2
 8005f0e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f14:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	e005      	b.n	8005f42 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f48:	461a      	mov	r2, r3
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f54:	4619      	mov	r1, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	680b      	ldr	r3, [r1, #0]
 8005f60:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d10c      	bne.n	8005f82 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d104      	bne.n	8005f78 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f6e:	2100      	movs	r1, #0
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f965 	bl	8006240 <USB_SetDevSpeed>
 8005f76:	e008      	b.n	8005f8a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f78:	2101      	movs	r1, #1
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f960 	bl	8006240 <USB_SetDevSpeed>
 8005f80:	e003      	b.n	8005f8a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f82:	2103      	movs	r1, #3
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f95b 	bl	8006240 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f8a:	2110      	movs	r1, #16
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f8f3 	bl	8006178 <USB_FlushTxFifo>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 f91f 	bl	80061e0 <USB_FlushRxFifo>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fca:	461a      	mov	r2, r3
 8005fcc:	2300      	movs	r3, #0
 8005fce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	613b      	str	r3, [r7, #16]
 8005fd4:	e043      	b.n	800605e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fe8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fec:	d118      	bne.n	8006020 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10a      	bne.n	800600a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006000:	461a      	mov	r2, r3
 8006002:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006006:	6013      	str	r3, [r2, #0]
 8006008:	e013      	b.n	8006032 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	4413      	add	r3, r2
 8006012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006016:	461a      	mov	r2, r3
 8006018:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800601c:	6013      	str	r3, [r2, #0]
 800601e:	e008      	b.n	8006032 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602c:	461a      	mov	r2, r3
 800602e:	2300      	movs	r3, #0
 8006030:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603e:	461a      	mov	r2, r3
 8006040:	2300      	movs	r3, #0
 8006042:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4413      	add	r3, r2
 800604c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006050:	461a      	mov	r2, r3
 8006052:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006056:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	3301      	adds	r3, #1
 800605c:	613b      	str	r3, [r7, #16]
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	429a      	cmp	r2, r3
 8006064:	d3b7      	bcc.n	8005fd6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006066:	2300      	movs	r3, #0
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	e043      	b.n	80060f4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800607e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006082:	d118      	bne.n	80060b6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10a      	bne.n	80060a0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	4413      	add	r3, r2
 8006092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006096:	461a      	mov	r2, r3
 8006098:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800609c:	6013      	str	r3, [r2, #0]
 800609e:	e013      	b.n	80060c8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ac:	461a      	mov	r2, r3
 80060ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80060b2:	6013      	str	r3, [r2, #0]
 80060b4:	e008      	b.n	80060c8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c2:	461a      	mov	r2, r3
 80060c4:	2300      	movs	r3, #0
 80060c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d4:	461a      	mov	r2, r3
 80060d6:	2300      	movs	r3, #0
 80060d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e6:	461a      	mov	r2, r3
 80060e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	3301      	adds	r3, #1
 80060f2:	613b      	str	r3, [r7, #16]
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d3b7      	bcc.n	800606c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800610a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800610e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800611c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800611e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006120:	2b00      	cmp	r3, #0
 8006122:	d105      	bne.n	8006130 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	f043 0210 	orr.w	r2, r3, #16
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	699a      	ldr	r2, [r3, #24]
 8006134:	4b0e      	ldr	r3, [pc, #56]	; (8006170 <USB_DevInit+0x2b4>)
 8006136:	4313      	orrs	r3, r2
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800613c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800613e:	2b00      	cmp	r3, #0
 8006140:	d005      	beq.n	800614e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	f043 0208 	orr.w	r2, r3, #8
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800614e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006150:	2b01      	cmp	r3, #1
 8006152:	d105      	bne.n	8006160 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	699a      	ldr	r2, [r3, #24]
 8006158:	4b06      	ldr	r3, [pc, #24]	; (8006174 <USB_DevInit+0x2b8>)
 800615a:	4313      	orrs	r3, r2
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006160:	7dfb      	ldrb	r3, [r7, #23]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3718      	adds	r7, #24
 8006166:	46bd      	mov	sp, r7
 8006168:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800616c:	b004      	add	sp, #16
 800616e:	4770      	bx	lr
 8006170:	803c3800 	.word	0x803c3800
 8006174:	40000004 	.word	0x40000004

08006178 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3301      	adds	r3, #1
 800618a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4a13      	ldr	r2, [pc, #76]	; (80061dc <USB_FlushTxFifo+0x64>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d901      	bls.n	8006198 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e01b      	b.n	80061d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	daf2      	bge.n	8006186 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	019b      	lsls	r3, r3, #6
 80061a8:	f043 0220 	orr.w	r2, r3, #32
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	3301      	adds	r3, #1
 80061b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	4a08      	ldr	r2, [pc, #32]	; (80061dc <USB_FlushTxFifo+0x64>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d901      	bls.n	80061c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e006      	b.n	80061d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	f003 0320 	and.w	r3, r3, #32
 80061ca:	2b20      	cmp	r3, #32
 80061cc:	d0f0      	beq.n	80061b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	00030d40 	.word	0x00030d40

080061e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061e8:	2300      	movs	r3, #0
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	3301      	adds	r3, #1
 80061f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	4a11      	ldr	r2, [pc, #68]	; (800623c <USB_FlushRxFifo+0x5c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d901      	bls.n	80061fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e018      	b.n	8006230 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	daf2      	bge.n	80061ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2210      	movs	r2, #16
 800620e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	3301      	adds	r3, #1
 8006214:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	4a08      	ldr	r2, [pc, #32]	; (800623c <USB_FlushRxFifo+0x5c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d901      	bls.n	8006222 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e006      	b.n	8006230 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f003 0310 	and.w	r3, r3, #16
 800622a:	2b10      	cmp	r3, #16
 800622c:	d0f0      	beq.n	8006210 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	00030d40 	.word	0x00030d40

08006240 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	460b      	mov	r3, r1
 800624a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	78fb      	ldrb	r3, [r7, #3]
 800625a:	68f9      	ldr	r1, [r7, #12]
 800625c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006260:	4313      	orrs	r3, r2
 8006262:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006272:	b480      	push	{r7}
 8006274:	b085      	sub	sp, #20
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800628c:	f023 0303 	bic.w	r3, r3, #3
 8006290:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062a0:	f043 0302 	orr.w	r3, r3, #2
 80062a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	f003 0301 	and.w	r3, r3, #1
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062d8:	2300      	movs	r3, #0
 80062da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	3301      	adds	r3, #1
 80062e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4a13      	ldr	r2, [pc, #76]	; (8006334 <USB_CoreReset+0x64>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d901      	bls.n	80062ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e01b      	b.n	8006326 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	daf2      	bge.n	80062dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	f043 0201 	orr.w	r2, r3, #1
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	3301      	adds	r3, #1
 800630a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4a09      	ldr	r2, [pc, #36]	; (8006334 <USB_CoreReset+0x64>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d901      	bls.n	8006318 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e006      	b.n	8006326 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b01      	cmp	r3, #1
 8006322:	d0f0      	beq.n	8006306 <USB_CoreReset+0x36>

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	00030d40 	.word	0x00030d40

08006338 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	4603      	mov	r3, r0
 8006340:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006342:	2300      	movs	r3, #0
 8006344:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800634a:	2b84      	cmp	r3, #132	; 0x84
 800634c:	d005      	beq.n	800635a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800634e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	4413      	add	r3, r2
 8006356:	3303      	adds	r3, #3
 8006358:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800635a:	68fb      	ldr	r3, [r7, #12]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800636c:	f000 fff0 	bl	8007350 <vTaskStartScheduler>
  
  return osOK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	bd80      	pop	{r7, pc}

08006376 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006376:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006378:	b089      	sub	sp, #36	; 0x24
 800637a:	af04      	add	r7, sp, #16
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d020      	beq.n	80063ca <osThreadCreate+0x54>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d01c      	beq.n	80063ca <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685c      	ldr	r4, [r3, #4]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681d      	ldr	r5, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	691e      	ldr	r6, [r3, #16]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7ff ffc8 	bl	8006338 <makeFreeRtosPriority>
 80063a8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063b2:	9202      	str	r2, [sp, #8]
 80063b4:	9301      	str	r3, [sp, #4]
 80063b6:	9100      	str	r1, [sp, #0]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	4632      	mov	r2, r6
 80063bc:	4629      	mov	r1, r5
 80063be:	4620      	mov	r0, r4
 80063c0:	f000 fdf4 	bl	8006fac <xTaskCreateStatic>
 80063c4:	4603      	mov	r3, r0
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	e01c      	b.n	8006404 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685c      	ldr	r4, [r3, #4]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063d6:	b29e      	uxth	r6, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80063de:	4618      	mov	r0, r3
 80063e0:	f7ff ffaa 	bl	8006338 <makeFreeRtosPriority>
 80063e4:	4602      	mov	r2, r0
 80063e6:	f107 030c 	add.w	r3, r7, #12
 80063ea:	9301      	str	r3, [sp, #4]
 80063ec:	9200      	str	r2, [sp, #0]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	4632      	mov	r2, r6
 80063f2:	4629      	mov	r1, r5
 80063f4:	4620      	mov	r0, r4
 80063f6:	f000 fe3c 	bl	8007072 <xTaskCreate>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d001      	beq.n	8006404 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006400:	2300      	movs	r3, #0
 8006402:	e000      	b.n	8006406 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006404:	68fb      	ldr	r3, [r7, #12]
}
 8006406:	4618      	mov	r0, r3
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800640e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b084      	sub	sp, #16
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <osDelay+0x16>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	e000      	b.n	8006426 <osDelay+0x18>
 8006424:	2301      	movs	r3, #1
 8006426:	4618      	mov	r0, r3
 8006428:	f000 ff5c 	bl	80072e4 <vTaskDelay>
  
  return osOK;
 800642c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f103 0208 	add.w	r2, r3, #8
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f04f 32ff 	mov.w	r2, #4294967295
 800644e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f103 0208 	add.w	r2, r3, #8
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f103 0208 	add.w	r2, r3, #8
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800646a:	bf00      	nop
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006476:	b480      	push	{r7}
 8006478:	b083      	sub	sp, #12
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	689a      	ldr	r2, [r3, #8]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	1c5a      	adds	r2, r3, #1
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	601a      	str	r2, [r3, #0]
}
 80064cc:	bf00      	nop
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ee:	d103      	bne.n	80064f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	e00c      	b.n	8006512 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	3308      	adds	r3, #8
 80064fc:	60fb      	str	r3, [r7, #12]
 80064fe:	e002      	b.n	8006506 <vListInsert+0x2e>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	60fb      	str	r3, [r7, #12]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	429a      	cmp	r2, r3
 8006510:	d2f6      	bcs.n	8006500 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	1c5a      	adds	r2, r3, #1
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	601a      	str	r2, [r3, #0]
}
 800653e:	bf00      	nop
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800654a:	b480      	push	{r7}
 800654c:	b085      	sub	sp, #20
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	6892      	ldr	r2, [r2, #8]
 8006560:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	6852      	ldr	r2, [r2, #4]
 800656a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	429a      	cmp	r2, r3
 8006574:	d103      	bne.n	800657e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689a      	ldr	r2, [r3, #8]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	1e5a      	subs	r2, r3, #1
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
}
 8006592:	4618      	mov	r0, r3
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
	...

080065a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10c      	bne.n	80065ce <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80065b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b8:	b672      	cpsid	i
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	b662      	cpsie	i
 80065c8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80065ca:	bf00      	nop
 80065cc:	e7fe      	b.n	80065cc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80065ce:	f002 f86d 	bl	80086ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065da:	68f9      	ldr	r1, [r7, #12]
 80065dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80065de:	fb01 f303 	mul.w	r3, r1, r3
 80065e2:	441a      	add	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fe:	3b01      	subs	r3, #1
 8006600:	68f9      	ldr	r1, [r7, #12]
 8006602:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006604:	fb01 f303 	mul.w	r3, r1, r3
 8006608:	441a      	add	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	22ff      	movs	r2, #255	; 0xff
 8006612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	22ff      	movs	r2, #255	; 0xff
 800661a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d114      	bne.n	800664e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d01a      	beq.n	8006662 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	3310      	adds	r3, #16
 8006630:	4618      	mov	r0, r3
 8006632:	f001 f91f 	bl	8007874 <xTaskRemoveFromEventList>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d012      	beq.n	8006662 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800663c:	4b0c      	ldr	r3, [pc, #48]	; (8006670 <xQueueGenericReset+0xd0>)
 800663e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	e009      	b.n	8006662 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3310      	adds	r3, #16
 8006652:	4618      	mov	r0, r3
 8006654:	f7ff feef 	bl	8006436 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	3324      	adds	r3, #36	; 0x24
 800665c:	4618      	mov	r0, r3
 800665e:	f7ff feea 	bl	8006436 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006662:	f002 f857 	bl	8008714 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006666:	2301      	movs	r3, #1
}
 8006668:	4618      	mov	r0, r3
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	e000ed04 	.word	0xe000ed04

08006674 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006674:	b580      	push	{r7, lr}
 8006676:	b08e      	sub	sp, #56	; 0x38
 8006678:	af02      	add	r7, sp, #8
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
 8006680:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10c      	bne.n	80066a2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668c:	b672      	cpsid	i
 800668e:	f383 8811 	msr	BASEPRI, r3
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	b662      	cpsie	i
 800669c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800669e:	bf00      	nop
 80066a0:	e7fe      	b.n	80066a0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10c      	bne.n	80066c2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80066a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ac:	b672      	cpsid	i
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	b662      	cpsie	i
 80066bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066be:	bf00      	nop
 80066c0:	e7fe      	b.n	80066c0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d002      	beq.n	80066ce <xQueueGenericCreateStatic+0x5a>
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <xQueueGenericCreateStatic+0x5e>
 80066ce:	2301      	movs	r3, #1
 80066d0:	e000      	b.n	80066d4 <xQueueGenericCreateStatic+0x60>
 80066d2:	2300      	movs	r3, #0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10c      	bne.n	80066f2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80066d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066dc:	b672      	cpsid	i
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	b662      	cpsie	i
 80066ec:	623b      	str	r3, [r7, #32]
}
 80066ee:	bf00      	nop
 80066f0:	e7fe      	b.n	80066f0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d102      	bne.n	80066fe <xQueueGenericCreateStatic+0x8a>
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <xQueueGenericCreateStatic+0x8e>
 80066fe:	2301      	movs	r3, #1
 8006700:	e000      	b.n	8006704 <xQueueGenericCreateStatic+0x90>
 8006702:	2300      	movs	r3, #0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10c      	bne.n	8006722 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670c:	b672      	cpsid	i
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	b662      	cpsie	i
 800671c:	61fb      	str	r3, [r7, #28]
}
 800671e:	bf00      	nop
 8006720:	e7fe      	b.n	8006720 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006722:	2348      	movs	r3, #72	; 0x48
 8006724:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	2b48      	cmp	r3, #72	; 0x48
 800672a:	d00c      	beq.n	8006746 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800672c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006730:	b672      	cpsid	i
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	b662      	cpsie	i
 8006740:	61bb      	str	r3, [r7, #24]
}
 8006742:	bf00      	nop
 8006744:	e7fe      	b.n	8006744 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006746:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800674c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00d      	beq.n	800676e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800675a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	4613      	mov	r3, r2
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	68b9      	ldr	r1, [r7, #8]
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 f805 	bl	8006778 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006770:	4618      	mov	r0, r3
 8006772:	3730      	adds	r7, #48	; 0x30
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
 8006784:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d103      	bne.n	8006794 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	69ba      	ldr	r2, [r7, #24]
 8006790:	601a      	str	r2, [r3, #0]
 8006792:	e002      	b.n	800679a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80067a6:	2101      	movs	r1, #1
 80067a8:	69b8      	ldr	r0, [r7, #24]
 80067aa:	f7ff fef9 	bl	80065a0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80067ae:	bf00      	nop
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
	...

080067b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b08e      	sub	sp, #56	; 0x38
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
 80067c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80067c6:	2300      	movs	r3, #0
 80067c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80067ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10c      	bne.n	80067ee <xQueueGenericSend+0x36>
	__asm volatile
 80067d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d8:	b672      	cpsid	i
 80067da:	f383 8811 	msr	BASEPRI, r3
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	b662      	cpsie	i
 80067e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80067ea:	bf00      	nop
 80067ec:	e7fe      	b.n	80067ec <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d103      	bne.n	80067fc <xQueueGenericSend+0x44>
 80067f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <xQueueGenericSend+0x48>
 80067fc:	2301      	movs	r3, #1
 80067fe:	e000      	b.n	8006802 <xQueueGenericSend+0x4a>
 8006800:	2300      	movs	r3, #0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10c      	bne.n	8006820 <xQueueGenericSend+0x68>
	__asm volatile
 8006806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680a:	b672      	cpsid	i
 800680c:	f383 8811 	msr	BASEPRI, r3
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	b662      	cpsie	i
 800681a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800681c:	bf00      	nop
 800681e:	e7fe      	b.n	800681e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	2b02      	cmp	r3, #2
 8006824:	d103      	bne.n	800682e <xQueueGenericSend+0x76>
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682a:	2b01      	cmp	r3, #1
 800682c:	d101      	bne.n	8006832 <xQueueGenericSend+0x7a>
 800682e:	2301      	movs	r3, #1
 8006830:	e000      	b.n	8006834 <xQueueGenericSend+0x7c>
 8006832:	2300      	movs	r3, #0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10c      	bne.n	8006852 <xQueueGenericSend+0x9a>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683c:	b672      	cpsid	i
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	b662      	cpsie	i
 800684c:	623b      	str	r3, [r7, #32]
}
 800684e:	bf00      	nop
 8006850:	e7fe      	b.n	8006850 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006852:	f001 f9d3 	bl	8007bfc <xTaskGetSchedulerState>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d102      	bne.n	8006862 <xQueueGenericSend+0xaa>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <xQueueGenericSend+0xae>
 8006862:	2301      	movs	r3, #1
 8006864:	e000      	b.n	8006868 <xQueueGenericSend+0xb0>
 8006866:	2300      	movs	r3, #0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10c      	bne.n	8006886 <xQueueGenericSend+0xce>
	__asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006870:	b672      	cpsid	i
 8006872:	f383 8811 	msr	BASEPRI, r3
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	b662      	cpsie	i
 8006880:	61fb      	str	r3, [r7, #28]
}
 8006882:	bf00      	nop
 8006884:	e7fe      	b.n	8006884 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006886:	f001 ff11 	bl	80086ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800688a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006892:	429a      	cmp	r2, r3
 8006894:	d302      	bcc.n	800689c <xQueueGenericSend+0xe4>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b02      	cmp	r3, #2
 800689a:	d129      	bne.n	80068f0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	68b9      	ldr	r1, [r7, #8]
 80068a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068a2:	f000 fa15 	bl	8006cd0 <prvCopyDataToQueue>
 80068a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d010      	beq.n	80068d2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b2:	3324      	adds	r3, #36	; 0x24
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 ffdd 	bl	8007874 <xTaskRemoveFromEventList>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d013      	beq.n	80068e8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80068c0:	4b3f      	ldr	r3, [pc, #252]	; (80069c0 <xQueueGenericSend+0x208>)
 80068c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	e00a      	b.n	80068e8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80068d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d007      	beq.n	80068e8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80068d8:	4b39      	ldr	r3, [pc, #228]	; (80069c0 <xQueueGenericSend+0x208>)
 80068da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068de:	601a      	str	r2, [r3, #0]
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80068e8:	f001 ff14 	bl	8008714 <vPortExitCritical>
				return pdPASS;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e063      	b.n	80069b8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d103      	bne.n	80068fe <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068f6:	f001 ff0d 	bl	8008714 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80068fa:	2300      	movs	r3, #0
 80068fc:	e05c      	b.n	80069b8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006900:	2b00      	cmp	r3, #0
 8006902:	d106      	bne.n	8006912 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006904:	f107 0314 	add.w	r3, r7, #20
 8006908:	4618      	mov	r0, r3
 800690a:	f001 f817 	bl	800793c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800690e:	2301      	movs	r3, #1
 8006910:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006912:	f001 feff 	bl	8008714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006916:	f000 fd85 	bl	8007424 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800691a:	f001 fec7 	bl	80086ac <vPortEnterCritical>
 800691e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006920:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006924:	b25b      	sxtb	r3, r3
 8006926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692a:	d103      	bne.n	8006934 <xQueueGenericSend+0x17c>
 800692c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692e:	2200      	movs	r2, #0
 8006930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006936:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800693a:	b25b      	sxtb	r3, r3
 800693c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006940:	d103      	bne.n	800694a <xQueueGenericSend+0x192>
 8006942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800694a:	f001 fee3 	bl	8008714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800694e:	1d3a      	adds	r2, r7, #4
 8006950:	f107 0314 	add.w	r3, r7, #20
 8006954:	4611      	mov	r1, r2
 8006956:	4618      	mov	r0, r3
 8006958:	f001 f806 	bl	8007968 <xTaskCheckForTimeOut>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d124      	bne.n	80069ac <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006962:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006964:	f000 faac 	bl	8006ec0 <prvIsQueueFull>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d018      	beq.n	80069a0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800696e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006970:	3310      	adds	r3, #16
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	4611      	mov	r1, r2
 8006976:	4618      	mov	r0, r3
 8006978:	f000 ff28 	bl	80077cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800697c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800697e:	f000 fa37 	bl	8006df0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006982:	f000 fd5d 	bl	8007440 <xTaskResumeAll>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	f47f af7c 	bne.w	8006886 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800698e:	4b0c      	ldr	r3, [pc, #48]	; (80069c0 <xQueueGenericSend+0x208>)
 8006990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	e772      	b.n	8006886 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80069a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069a2:	f000 fa25 	bl	8006df0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069a6:	f000 fd4b 	bl	8007440 <xTaskResumeAll>
 80069aa:	e76c      	b.n	8006886 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80069ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069ae:	f000 fa1f 	bl	8006df0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069b2:	f000 fd45 	bl	8007440 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80069b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3738      	adds	r7, #56	; 0x38
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	e000ed04 	.word	0xe000ed04

080069c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b08e      	sub	sp, #56	; 0x38
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
 80069d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80069d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10c      	bne.n	80069f6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80069dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e0:	b672      	cpsid	i
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	b662      	cpsie	i
 80069f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069f2:	bf00      	nop
 80069f4:	e7fe      	b.n	80069f4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d103      	bne.n	8006a04 <xQueueGenericSendFromISR+0x40>
 80069fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <xQueueGenericSendFromISR+0x44>
 8006a04:	2301      	movs	r3, #1
 8006a06:	e000      	b.n	8006a0a <xQueueGenericSendFromISR+0x46>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10c      	bne.n	8006a28 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8006a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a12:	b672      	cpsid	i
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	b662      	cpsie	i
 8006a22:	623b      	str	r3, [r7, #32]
}
 8006a24:	bf00      	nop
 8006a26:	e7fe      	b.n	8006a26 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d103      	bne.n	8006a36 <xQueueGenericSendFromISR+0x72>
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d101      	bne.n	8006a3a <xQueueGenericSendFromISR+0x76>
 8006a36:	2301      	movs	r3, #1
 8006a38:	e000      	b.n	8006a3c <xQueueGenericSendFromISR+0x78>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10c      	bne.n	8006a5a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	b672      	cpsid	i
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	b662      	cpsie	i
 8006a54:	61fb      	str	r3, [r7, #28]
}
 8006a56:	bf00      	nop
 8006a58:	e7fe      	b.n	8006a58 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a5a:	f001 ff0f 	bl	800887c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a5e:	f3ef 8211 	mrs	r2, BASEPRI
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	b672      	cpsid	i
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	b662      	cpsie	i
 8006a76:	61ba      	str	r2, [r7, #24]
 8006a78:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006a7a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d302      	bcc.n	8006a90 <xQueueGenericSendFromISR+0xcc>
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d12c      	bne.n	8006aea <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	68b9      	ldr	r1, [r7, #8]
 8006a9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aa0:	f000 f916 	bl	8006cd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006aa4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aac:	d112      	bne.n	8006ad4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d016      	beq.n	8006ae4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab8:	3324      	adds	r3, #36	; 0x24
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 feda 	bl	8007874 <xTaskRemoveFromEventList>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00e      	beq.n	8006ae4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00b      	beq.n	8006ae4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	e007      	b.n	8006ae4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ad4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ad8:	3301      	adds	r3, #1
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	b25a      	sxtb	r2, r3
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006ae8:	e001      	b.n	8006aee <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006aea:	2300      	movs	r3, #0
 8006aec:	637b      	str	r3, [r7, #52]	; 0x34
 8006aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006af8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3738      	adds	r7, #56	; 0x38
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b08c      	sub	sp, #48	; 0x30
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b10:	2300      	movs	r3, #0
 8006b12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10c      	bne.n	8006b38 <xQueueReceive+0x34>
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	b672      	cpsid	i
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	b662      	cpsie	i
 8006b32:	623b      	str	r3, [r7, #32]
}
 8006b34:	bf00      	nop
 8006b36:	e7fe      	b.n	8006b36 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d103      	bne.n	8006b46 <xQueueReceive+0x42>
 8006b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <xQueueReceive+0x46>
 8006b46:	2301      	movs	r3, #1
 8006b48:	e000      	b.n	8006b4c <xQueueReceive+0x48>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10c      	bne.n	8006b6a <xQueueReceive+0x66>
	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b54:	b672      	cpsid	i
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	b662      	cpsie	i
 8006b64:	61fb      	str	r3, [r7, #28]
}
 8006b66:	bf00      	nop
 8006b68:	e7fe      	b.n	8006b68 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b6a:	f001 f847 	bl	8007bfc <xTaskGetSchedulerState>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d102      	bne.n	8006b7a <xQueueReceive+0x76>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <xQueueReceive+0x7a>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e000      	b.n	8006b80 <xQueueReceive+0x7c>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10c      	bne.n	8006b9e <xQueueReceive+0x9a>
	__asm volatile
 8006b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b88:	b672      	cpsid	i
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	b662      	cpsie	i
 8006b98:	61bb      	str	r3, [r7, #24]
}
 8006b9a:	bf00      	nop
 8006b9c:	e7fe      	b.n	8006b9c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b9e:	f001 fd85 	bl	80086ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d01f      	beq.n	8006bee <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006bae:	68b9      	ldr	r1, [r7, #8]
 8006bb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bb2:	f000 f8f7 	bl	8006da4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	1e5a      	subs	r2, r3, #1
 8006bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00f      	beq.n	8006be6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc8:	3310      	adds	r3, #16
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 fe52 	bl	8007874 <xTaskRemoveFromEventList>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d007      	beq.n	8006be6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006bd6:	4b3d      	ldr	r3, [pc, #244]	; (8006ccc <xQueueReceive+0x1c8>)
 8006bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006be6:	f001 fd95 	bl	8008714 <vPortExitCritical>
				return pdPASS;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e069      	b.n	8006cc2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d103      	bne.n	8006bfc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006bf4:	f001 fd8e 	bl	8008714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	e062      	b.n	8006cc2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d106      	bne.n	8006c10 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c02:	f107 0310 	add.w	r3, r7, #16
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 fe98 	bl	800793c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c10:	f001 fd80 	bl	8008714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c14:	f000 fc06 	bl	8007424 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c18:	f001 fd48 	bl	80086ac <vPortEnterCritical>
 8006c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c22:	b25b      	sxtb	r3, r3
 8006c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c28:	d103      	bne.n	8006c32 <xQueueReceive+0x12e>
 8006c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c38:	b25b      	sxtb	r3, r3
 8006c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3e:	d103      	bne.n	8006c48 <xQueueReceive+0x144>
 8006c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c48:	f001 fd64 	bl	8008714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c4c:	1d3a      	adds	r2, r7, #4
 8006c4e:	f107 0310 	add.w	r3, r7, #16
 8006c52:	4611      	mov	r1, r2
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 fe87 	bl	8007968 <xTaskCheckForTimeOut>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d123      	bne.n	8006ca8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c62:	f000 f917 	bl	8006e94 <prvIsQueueEmpty>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d017      	beq.n	8006c9c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6e:	3324      	adds	r3, #36	; 0x24
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	4611      	mov	r1, r2
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 fda9 	bl	80077cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c7c:	f000 f8b8 	bl	8006df0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c80:	f000 fbde 	bl	8007440 <xTaskResumeAll>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d189      	bne.n	8006b9e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8006c8a:	4b10      	ldr	r3, [pc, #64]	; (8006ccc <xQueueReceive+0x1c8>)
 8006c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	e780      	b.n	8006b9e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c9e:	f000 f8a7 	bl	8006df0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ca2:	f000 fbcd 	bl	8007440 <xTaskResumeAll>
 8006ca6:	e77a      	b.n	8006b9e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006caa:	f000 f8a1 	bl	8006df0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cae:	f000 fbc7 	bl	8007440 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cb4:	f000 f8ee 	bl	8006e94 <prvIsQueueEmpty>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f43f af6f 	beq.w	8006b9e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006cc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3730      	adds	r7, #48	; 0x30
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	e000ed04 	.word	0xe000ed04

08006cd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10d      	bne.n	8006d0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d14d      	bne.n	8006d92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 ff9c 	bl	8007c38 <xTaskPriorityDisinherit>
 8006d00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	609a      	str	r2, [r3, #8]
 8006d08:	e043      	b.n	8006d92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d119      	bne.n	8006d44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6858      	ldr	r0, [r3, #4]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d18:	461a      	mov	r2, r3
 8006d1a:	68b9      	ldr	r1, [r7, #8]
 8006d1c:	f002 f800 	bl	8008d20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d28:	441a      	add	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	685a      	ldr	r2, [r3, #4]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d32b      	bcc.n	8006d92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	605a      	str	r2, [r3, #4]
 8006d42:	e026      	b.n	8006d92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	68d8      	ldr	r0, [r3, #12]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	68b9      	ldr	r1, [r7, #8]
 8006d50:	f001 ffe6 	bl	8008d20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	68da      	ldr	r2, [r3, #12]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5c:	425b      	negs	r3, r3
 8006d5e:	441a      	add	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	68da      	ldr	r2, [r3, #12]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d207      	bcs.n	8006d80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	689a      	ldr	r2, [r3, #8]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d78:	425b      	negs	r3, r3
 8006d7a:	441a      	add	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d105      	bne.n	8006d92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	1c5a      	adds	r2, r3, #1
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006d9a:	697b      	ldr	r3, [r7, #20]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3718      	adds	r7, #24
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d018      	beq.n	8006de8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68da      	ldr	r2, [r3, #12]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	441a      	add	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	68da      	ldr	r2, [r3, #12]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d303      	bcc.n	8006dd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	68d9      	ldr	r1, [r3, #12]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de0:	461a      	mov	r2, r3
 8006de2:	6838      	ldr	r0, [r7, #0]
 8006de4:	f001 ff9c 	bl	8008d20 <memcpy>
	}
}
 8006de8:	bf00      	nop
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006df8:	f001 fc58 	bl	80086ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e04:	e011      	b.n	8006e2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d012      	beq.n	8006e34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	3324      	adds	r3, #36	; 0x24
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 fd2e 	bl	8007874 <xTaskRemoveFromEventList>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d001      	beq.n	8006e22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e1e:	f000 fe09 	bl	8007a34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e22:	7bfb      	ldrb	r3, [r7, #15]
 8006e24:	3b01      	subs	r3, #1
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	dce9      	bgt.n	8006e06 <prvUnlockQueue+0x16>
 8006e32:	e000      	b.n	8006e36 <prvUnlockQueue+0x46>
					break;
 8006e34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	22ff      	movs	r2, #255	; 0xff
 8006e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006e3e:	f001 fc69 	bl	8008714 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e42:	f001 fc33 	bl	80086ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e4e:	e011      	b.n	8006e74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d012      	beq.n	8006e7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	3310      	adds	r3, #16
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f000 fd09 	bl	8007874 <xTaskRemoveFromEventList>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d001      	beq.n	8006e6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e68:	f000 fde4 	bl	8007a34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e6c:	7bbb      	ldrb	r3, [r7, #14]
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	dce9      	bgt.n	8006e50 <prvUnlockQueue+0x60>
 8006e7c:	e000      	b.n	8006e80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	22ff      	movs	r2, #255	; 0xff
 8006e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006e88:	f001 fc44 	bl	8008714 <vPortExitCritical>
}
 8006e8c:	bf00      	nop
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e9c:	f001 fc06 	bl	80086ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d102      	bne.n	8006eae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	60fb      	str	r3, [r7, #12]
 8006eac:	e001      	b.n	8006eb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006eb2:	f001 fc2f 	bl	8008714 <vPortExitCritical>

	return xReturn;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ec8:	f001 fbf0 	bl	80086ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d102      	bne.n	8006ede <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	60fb      	str	r3, [r7, #12]
 8006edc:	e001      	b.n	8006ee2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ee2:	f001 fc17 	bl	8008714 <vPortExitCritical>

	return xReturn;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006efa:	2300      	movs	r3, #0
 8006efc:	60fb      	str	r3, [r7, #12]
 8006efe:	e014      	b.n	8006f2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f00:	4a0f      	ldr	r2, [pc, #60]	; (8006f40 <vQueueAddToRegistry+0x50>)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10b      	bne.n	8006f24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f0c:	490c      	ldr	r1, [pc, #48]	; (8006f40 <vQueueAddToRegistry+0x50>)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	683a      	ldr	r2, [r7, #0]
 8006f12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f16:	4a0a      	ldr	r2, [pc, #40]	; (8006f40 <vQueueAddToRegistry+0x50>)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	00db      	lsls	r3, r3, #3
 8006f1c:	4413      	add	r3, r2
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f22:	e006      	b.n	8006f32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	3301      	adds	r3, #1
 8006f28:	60fb      	str	r3, [r7, #12]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2b07      	cmp	r3, #7
 8006f2e:	d9e7      	bls.n	8006f00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f30:	bf00      	nop
 8006f32:	bf00      	nop
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	20004368 	.word	0x20004368

08006f44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006f54:	f001 fbaa 	bl	80086ac <vPortEnterCritical>
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f5e:	b25b      	sxtb	r3, r3
 8006f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f64:	d103      	bne.n	8006f6e <vQueueWaitForMessageRestricted+0x2a>
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f74:	b25b      	sxtb	r3, r3
 8006f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7a:	d103      	bne.n	8006f84 <vQueueWaitForMessageRestricted+0x40>
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f84:	f001 fbc6 	bl	8008714 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d106      	bne.n	8006f9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	3324      	adds	r3, #36	; 0x24
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	68b9      	ldr	r1, [r7, #8]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 fc3d 	bl	8007818 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006f9e:	6978      	ldr	r0, [r7, #20]
 8006fa0:	f7ff ff26 	bl	8006df0 <prvUnlockQueue>
	}
 8006fa4:	bf00      	nop
 8006fa6:	3718      	adds	r7, #24
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b08e      	sub	sp, #56	; 0x38
 8006fb0:	af04      	add	r7, sp, #16
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
 8006fb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10c      	bne.n	8006fda <xTaskCreateStatic+0x2e>
	__asm volatile
 8006fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc4:	b672      	cpsid	i
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	b662      	cpsie	i
 8006fd4:	623b      	str	r3, [r7, #32]
}
 8006fd6:	bf00      	nop
 8006fd8:	e7fe      	b.n	8006fd8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10c      	bne.n	8006ffa <xTaskCreateStatic+0x4e>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe4:	b672      	cpsid	i
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	b662      	cpsie	i
 8006ff4:	61fb      	str	r3, [r7, #28]
}
 8006ff6:	bf00      	nop
 8006ff8:	e7fe      	b.n	8006ff8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ffa:	2354      	movs	r3, #84	; 0x54
 8006ffc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	2b54      	cmp	r3, #84	; 0x54
 8007002:	d00c      	beq.n	800701e <xTaskCreateStatic+0x72>
	__asm volatile
 8007004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007008:	b672      	cpsid	i
 800700a:	f383 8811 	msr	BASEPRI, r3
 800700e:	f3bf 8f6f 	isb	sy
 8007012:	f3bf 8f4f 	dsb	sy
 8007016:	b662      	cpsie	i
 8007018:	61bb      	str	r3, [r7, #24]
}
 800701a:	bf00      	nop
 800701c:	e7fe      	b.n	800701c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800701e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007022:	2b00      	cmp	r3, #0
 8007024:	d01e      	beq.n	8007064 <xTaskCreateStatic+0xb8>
 8007026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007028:	2b00      	cmp	r3, #0
 800702a:	d01b      	beq.n	8007064 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800702c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007034:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	2202      	movs	r2, #2
 800703a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800703e:	2300      	movs	r3, #0
 8007040:	9303      	str	r3, [sp, #12]
 8007042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007044:	9302      	str	r3, [sp, #8]
 8007046:	f107 0314 	add.w	r3, r7, #20
 800704a:	9301      	str	r3, [sp, #4]
 800704c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	68b9      	ldr	r1, [r7, #8]
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f000 f850 	bl	80070fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800705c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800705e:	f000 f8d7 	bl	8007210 <prvAddNewTaskToReadyList>
 8007062:	e001      	b.n	8007068 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007064:	2300      	movs	r3, #0
 8007066:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007068:	697b      	ldr	r3, [r7, #20]
	}
 800706a:	4618      	mov	r0, r3
 800706c:	3728      	adds	r7, #40	; 0x28
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007072:	b580      	push	{r7, lr}
 8007074:	b08c      	sub	sp, #48	; 0x30
 8007076:	af04      	add	r7, sp, #16
 8007078:	60f8      	str	r0, [r7, #12]
 800707a:	60b9      	str	r1, [r7, #8]
 800707c:	603b      	str	r3, [r7, #0]
 800707e:	4613      	mov	r3, r2
 8007080:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007082:	88fb      	ldrh	r3, [r7, #6]
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4618      	mov	r0, r3
 8007088:	f001 fc3c 	bl	8008904 <pvPortMalloc>
 800708c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00e      	beq.n	80070b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007094:	2054      	movs	r0, #84	; 0x54
 8007096:	f001 fc35 	bl	8008904 <pvPortMalloc>
 800709a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	631a      	str	r2, [r3, #48]	; 0x30
 80070a8:	e005      	b.n	80070b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80070aa:	6978      	ldr	r0, [r7, #20]
 80070ac:	f001 fcf4 	bl	8008a98 <vPortFree>
 80070b0:	e001      	b.n	80070b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80070b2:	2300      	movs	r3, #0
 80070b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d017      	beq.n	80070ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070c4:	88fa      	ldrh	r2, [r7, #6]
 80070c6:	2300      	movs	r3, #0
 80070c8:	9303      	str	r3, [sp, #12]
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	9302      	str	r3, [sp, #8]
 80070ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d0:	9301      	str	r3, [sp, #4]
 80070d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	68b9      	ldr	r1, [r7, #8]
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f000 f80e 	bl	80070fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070e0:	69f8      	ldr	r0, [r7, #28]
 80070e2:	f000 f895 	bl	8007210 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80070e6:	2301      	movs	r3, #1
 80070e8:	61bb      	str	r3, [r7, #24]
 80070ea:	e002      	b.n	80070f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80070ec:	f04f 33ff 	mov.w	r3, #4294967295
 80070f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80070f2:	69bb      	ldr	r3, [r7, #24]
	}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3720      	adds	r7, #32
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b088      	sub	sp, #32
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
 8007108:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800710e:	6879      	ldr	r1, [r7, #4]
 8007110:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007114:	440b      	add	r3, r1
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	f023 0307 	bic.w	r3, r3, #7
 8007122:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	f003 0307 	and.w	r3, r3, #7
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00c      	beq.n	8007148 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007132:	b672      	cpsid	i
 8007134:	f383 8811 	msr	BASEPRI, r3
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	b662      	cpsie	i
 8007142:	617b      	str	r3, [r7, #20]
}
 8007144:	bf00      	nop
 8007146:	e7fe      	b.n	8007146 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d01f      	beq.n	800718e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800714e:	2300      	movs	r3, #0
 8007150:	61fb      	str	r3, [r7, #28]
 8007152:	e012      	b.n	800717a <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	4413      	add	r3, r2
 800715a:	7819      	ldrb	r1, [r3, #0]
 800715c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	4413      	add	r3, r2
 8007162:	3334      	adds	r3, #52	; 0x34
 8007164:	460a      	mov	r2, r1
 8007166:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007168:	68ba      	ldr	r2, [r7, #8]
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	4413      	add	r3, r2
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d006      	beq.n	8007182 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	3301      	adds	r3, #1
 8007178:	61fb      	str	r3, [r7, #28]
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	2b0f      	cmp	r3, #15
 800717e:	d9e9      	bls.n	8007154 <prvInitialiseNewTask+0x58>
 8007180:	e000      	b.n	8007184 <prvInitialiseNewTask+0x88>
			{
				break;
 8007182:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007186:	2200      	movs	r2, #0
 8007188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800718c:	e003      	b.n	8007196 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800718e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007190:	2200      	movs	r2, #0
 8007192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007198:	2b06      	cmp	r3, #6
 800719a:	d901      	bls.n	80071a0 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800719c:	2306      	movs	r3, #6
 800719e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80071a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80071a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071aa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80071ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ae:	2200      	movs	r2, #0
 80071b0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b4:	3304      	adds	r3, #4
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7ff f95d 	bl	8006476 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071be:	3318      	adds	r3, #24
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7ff f958 	bl	8006476 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80071c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ce:	f1c3 0207 	rsb	r2, r3, #7
 80071d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80071d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80071dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071de:	2200      	movs	r2, #0
 80071e0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	68f9      	ldr	r1, [r7, #12]
 80071ee:	69b8      	ldr	r0, [r7, #24]
 80071f0:	f001 f950 	bl	8008494 <pxPortInitialiseStack>
 80071f4:	4602      	mov	r2, r0
 80071f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80071fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d002      	beq.n	8007206 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007204:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007206:	bf00      	nop
 8007208:	3720      	adds	r7, #32
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
	...

08007210 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007218:	f001 fa48 	bl	80086ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800721c:	4b2a      	ldr	r3, [pc, #168]	; (80072c8 <prvAddNewTaskToReadyList+0xb8>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3301      	adds	r3, #1
 8007222:	4a29      	ldr	r2, [pc, #164]	; (80072c8 <prvAddNewTaskToReadyList+0xb8>)
 8007224:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007226:	4b29      	ldr	r3, [pc, #164]	; (80072cc <prvAddNewTaskToReadyList+0xbc>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d109      	bne.n	8007242 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800722e:	4a27      	ldr	r2, [pc, #156]	; (80072cc <prvAddNewTaskToReadyList+0xbc>)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007234:	4b24      	ldr	r3, [pc, #144]	; (80072c8 <prvAddNewTaskToReadyList+0xb8>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d110      	bne.n	800725e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800723c:	f000 fc1e 	bl	8007a7c <prvInitialiseTaskLists>
 8007240:	e00d      	b.n	800725e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007242:	4b23      	ldr	r3, [pc, #140]	; (80072d0 <prvAddNewTaskToReadyList+0xc0>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d109      	bne.n	800725e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800724a:	4b20      	ldr	r3, [pc, #128]	; (80072cc <prvAddNewTaskToReadyList+0xbc>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	429a      	cmp	r2, r3
 8007256:	d802      	bhi.n	800725e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007258:	4a1c      	ldr	r2, [pc, #112]	; (80072cc <prvAddNewTaskToReadyList+0xbc>)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800725e:	4b1d      	ldr	r3, [pc, #116]	; (80072d4 <prvAddNewTaskToReadyList+0xc4>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	3301      	adds	r3, #1
 8007264:	4a1b      	ldr	r2, [pc, #108]	; (80072d4 <prvAddNewTaskToReadyList+0xc4>)
 8007266:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726c:	2201      	movs	r2, #1
 800726e:	409a      	lsls	r2, r3
 8007270:	4b19      	ldr	r3, [pc, #100]	; (80072d8 <prvAddNewTaskToReadyList+0xc8>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4313      	orrs	r3, r2
 8007276:	4a18      	ldr	r2, [pc, #96]	; (80072d8 <prvAddNewTaskToReadyList+0xc8>)
 8007278:	6013      	str	r3, [r2, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800727e:	4613      	mov	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4413      	add	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4a15      	ldr	r2, [pc, #84]	; (80072dc <prvAddNewTaskToReadyList+0xcc>)
 8007288:	441a      	add	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	3304      	adds	r3, #4
 800728e:	4619      	mov	r1, r3
 8007290:	4610      	mov	r0, r2
 8007292:	f7ff f8fd 	bl	8006490 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007296:	f001 fa3d 	bl	8008714 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800729a:	4b0d      	ldr	r3, [pc, #52]	; (80072d0 <prvAddNewTaskToReadyList+0xc0>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00e      	beq.n	80072c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072a2:	4b0a      	ldr	r3, [pc, #40]	; (80072cc <prvAddNewTaskToReadyList+0xbc>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d207      	bcs.n	80072c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80072b0:	4b0b      	ldr	r3, [pc, #44]	; (80072e0 <prvAddNewTaskToReadyList+0xd0>)
 80072b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072b6:	601a      	str	r2, [r3, #0]
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072c0:	bf00      	nop
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	200044a8 	.word	0x200044a8
 80072cc:	200043a8 	.word	0x200043a8
 80072d0:	200044b4 	.word	0x200044b4
 80072d4:	200044c4 	.word	0x200044c4
 80072d8:	200044b0 	.word	0x200044b0
 80072dc:	200043ac 	.word	0x200043ac
 80072e0:	e000ed04 	.word	0xe000ed04

080072e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80072ec:	2300      	movs	r3, #0
 80072ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d019      	beq.n	800732a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80072f6:	4b14      	ldr	r3, [pc, #80]	; (8007348 <vTaskDelay+0x64>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00c      	beq.n	8007318 <vTaskDelay+0x34>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	b672      	cpsid	i
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	b662      	cpsie	i
 8007312:	60bb      	str	r3, [r7, #8]
}
 8007314:	bf00      	nop
 8007316:	e7fe      	b.n	8007316 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007318:	f000 f884 	bl	8007424 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800731c:	2100      	movs	r1, #0
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fd14 	bl	8007d4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007324:	f000 f88c 	bl	8007440 <xTaskResumeAll>
 8007328:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d107      	bne.n	8007340 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007330:	4b06      	ldr	r3, [pc, #24]	; (800734c <vTaskDelay+0x68>)
 8007332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007336:	601a      	str	r2, [r3, #0]
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007340:	bf00      	nop
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	200044d0 	.word	0x200044d0
 800734c:	e000ed04 	.word	0xe000ed04

08007350 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b08a      	sub	sp, #40	; 0x28
 8007354:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007356:	2300      	movs	r3, #0
 8007358:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800735a:	2300      	movs	r3, #0
 800735c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800735e:	463a      	mov	r2, r7
 8007360:	1d39      	adds	r1, r7, #4
 8007362:	f107 0308 	add.w	r3, r7, #8
 8007366:	4618      	mov	r0, r3
 8007368:	f7f9 fbd6 	bl	8000b18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800736c:	6839      	ldr	r1, [r7, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	9202      	str	r2, [sp, #8]
 8007374:	9301      	str	r3, [sp, #4]
 8007376:	2300      	movs	r3, #0
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	2300      	movs	r3, #0
 800737c:	460a      	mov	r2, r1
 800737e:	4923      	ldr	r1, [pc, #140]	; (800740c <vTaskStartScheduler+0xbc>)
 8007380:	4823      	ldr	r0, [pc, #140]	; (8007410 <vTaskStartScheduler+0xc0>)
 8007382:	f7ff fe13 	bl	8006fac <xTaskCreateStatic>
 8007386:	4603      	mov	r3, r0
 8007388:	4a22      	ldr	r2, [pc, #136]	; (8007414 <vTaskStartScheduler+0xc4>)
 800738a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800738c:	4b21      	ldr	r3, [pc, #132]	; (8007414 <vTaskStartScheduler+0xc4>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007394:	2301      	movs	r3, #1
 8007396:	617b      	str	r3, [r7, #20]
 8007398:	e001      	b.n	800739e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800739a:	2300      	movs	r3, #0
 800739c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d102      	bne.n	80073aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80073a4:	f000 fd38 	bl	8007e18 <xTimerCreateTimerTask>
 80073a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d118      	bne.n	80073e2 <vTaskStartScheduler+0x92>
	__asm volatile
 80073b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b4:	b672      	cpsid	i
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	b662      	cpsie	i
 80073c4:	613b      	str	r3, [r7, #16]
}
 80073c6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80073c8:	4b13      	ldr	r3, [pc, #76]	; (8007418 <vTaskStartScheduler+0xc8>)
 80073ca:	f04f 32ff 	mov.w	r2, #4294967295
 80073ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80073d0:	4b12      	ldr	r3, [pc, #72]	; (800741c <vTaskStartScheduler+0xcc>)
 80073d2:	2201      	movs	r2, #1
 80073d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80073d6:	4b12      	ldr	r3, [pc, #72]	; (8007420 <vTaskStartScheduler+0xd0>)
 80073d8:	2200      	movs	r2, #0
 80073da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80073dc:	f001 f8e8 	bl	80085b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80073e0:	e010      	b.n	8007404 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e8:	d10c      	bne.n	8007404 <vTaskStartScheduler+0xb4>
	__asm volatile
 80073ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ee:	b672      	cpsid	i
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	b662      	cpsie	i
 80073fe:	60fb      	str	r3, [r7, #12]
}
 8007400:	bf00      	nop
 8007402:	e7fe      	b.n	8007402 <vTaskStartScheduler+0xb2>
}
 8007404:	bf00      	nop
 8007406:	3718      	adds	r7, #24
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	08009de4 	.word	0x08009de4
 8007410:	08007a4d 	.word	0x08007a4d
 8007414:	200044cc 	.word	0x200044cc
 8007418:	200044c8 	.word	0x200044c8
 800741c:	200044b4 	.word	0x200044b4
 8007420:	200044ac 	.word	0x200044ac

08007424 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007424:	b480      	push	{r7}
 8007426:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007428:	4b04      	ldr	r3, [pc, #16]	; (800743c <vTaskSuspendAll+0x18>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3301      	adds	r3, #1
 800742e:	4a03      	ldr	r2, [pc, #12]	; (800743c <vTaskSuspendAll+0x18>)
 8007430:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007432:	bf00      	nop
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	200044d0 	.word	0x200044d0

08007440 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007446:	2300      	movs	r3, #0
 8007448:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800744a:	2300      	movs	r3, #0
 800744c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800744e:	4b42      	ldr	r3, [pc, #264]	; (8007558 <xTaskResumeAll+0x118>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10c      	bne.n	8007470 <xTaskResumeAll+0x30>
	__asm volatile
 8007456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745a:	b672      	cpsid	i
 800745c:	f383 8811 	msr	BASEPRI, r3
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	b662      	cpsie	i
 800746a:	603b      	str	r3, [r7, #0]
}
 800746c:	bf00      	nop
 800746e:	e7fe      	b.n	800746e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007470:	f001 f91c 	bl	80086ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007474:	4b38      	ldr	r3, [pc, #224]	; (8007558 <xTaskResumeAll+0x118>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	3b01      	subs	r3, #1
 800747a:	4a37      	ldr	r2, [pc, #220]	; (8007558 <xTaskResumeAll+0x118>)
 800747c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800747e:	4b36      	ldr	r3, [pc, #216]	; (8007558 <xTaskResumeAll+0x118>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d161      	bne.n	800754a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007486:	4b35      	ldr	r3, [pc, #212]	; (800755c <xTaskResumeAll+0x11c>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d05d      	beq.n	800754a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800748e:	e02e      	b.n	80074ee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007490:	4b33      	ldr	r3, [pc, #204]	; (8007560 <xTaskResumeAll+0x120>)
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	3318      	adds	r3, #24
 800749c:	4618      	mov	r0, r3
 800749e:	f7ff f854 	bl	800654a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	3304      	adds	r3, #4
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7ff f84f 	bl	800654a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b0:	2201      	movs	r2, #1
 80074b2:	409a      	lsls	r2, r3
 80074b4:	4b2b      	ldr	r3, [pc, #172]	; (8007564 <xTaskResumeAll+0x124>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	4a2a      	ldr	r2, [pc, #168]	; (8007564 <xTaskResumeAll+0x124>)
 80074bc:	6013      	str	r3, [r2, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c2:	4613      	mov	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4413      	add	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4a27      	ldr	r2, [pc, #156]	; (8007568 <xTaskResumeAll+0x128>)
 80074cc:	441a      	add	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	3304      	adds	r3, #4
 80074d2:	4619      	mov	r1, r3
 80074d4:	4610      	mov	r0, r2
 80074d6:	f7fe ffdb 	bl	8006490 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074de:	4b23      	ldr	r3, [pc, #140]	; (800756c <xTaskResumeAll+0x12c>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d302      	bcc.n	80074ee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80074e8:	4b21      	ldr	r3, [pc, #132]	; (8007570 <xTaskResumeAll+0x130>)
 80074ea:	2201      	movs	r2, #1
 80074ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074ee:	4b1c      	ldr	r3, [pc, #112]	; (8007560 <xTaskResumeAll+0x120>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1cc      	bne.n	8007490 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d001      	beq.n	8007500 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80074fc:	f000 fb5e 	bl	8007bbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007500:	4b1c      	ldr	r3, [pc, #112]	; (8007574 <xTaskResumeAll+0x134>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d010      	beq.n	800752e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800750c:	f000 f846 	bl	800759c <xTaskIncrementTick>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d002      	beq.n	800751c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007516:	4b16      	ldr	r3, [pc, #88]	; (8007570 <xTaskResumeAll+0x130>)
 8007518:	2201      	movs	r2, #1
 800751a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	3b01      	subs	r3, #1
 8007520:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1f1      	bne.n	800750c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8007528:	4b12      	ldr	r3, [pc, #72]	; (8007574 <xTaskResumeAll+0x134>)
 800752a:	2200      	movs	r2, #0
 800752c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800752e:	4b10      	ldr	r3, [pc, #64]	; (8007570 <xTaskResumeAll+0x130>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d009      	beq.n	800754a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007536:	2301      	movs	r3, #1
 8007538:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800753a:	4b0f      	ldr	r3, [pc, #60]	; (8007578 <xTaskResumeAll+0x138>)
 800753c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007540:	601a      	str	r2, [r3, #0]
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800754a:	f001 f8e3 	bl	8008714 <vPortExitCritical>

	return xAlreadyYielded;
 800754e:	68bb      	ldr	r3, [r7, #8]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	200044d0 	.word	0x200044d0
 800755c:	200044a8 	.word	0x200044a8
 8007560:	20004468 	.word	0x20004468
 8007564:	200044b0 	.word	0x200044b0
 8007568:	200043ac 	.word	0x200043ac
 800756c:	200043a8 	.word	0x200043a8
 8007570:	200044bc 	.word	0x200044bc
 8007574:	200044b8 	.word	0x200044b8
 8007578:	e000ed04 	.word	0xe000ed04

0800757c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007582:	4b05      	ldr	r3, [pc, #20]	; (8007598 <xTaskGetTickCount+0x1c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007588:	687b      	ldr	r3, [r7, #4]
}
 800758a:	4618      	mov	r0, r3
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	200044ac 	.word	0x200044ac

0800759c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b086      	sub	sp, #24
 80075a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075a2:	2300      	movs	r3, #0
 80075a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075a6:	4b4f      	ldr	r3, [pc, #316]	; (80076e4 <xTaskIncrementTick+0x148>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f040 808a 	bne.w	80076c4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075b0:	4b4d      	ldr	r3, [pc, #308]	; (80076e8 <xTaskIncrementTick+0x14c>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	3301      	adds	r3, #1
 80075b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80075b8:	4a4b      	ldr	r2, [pc, #300]	; (80076e8 <xTaskIncrementTick+0x14c>)
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d122      	bne.n	800760a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80075c4:	4b49      	ldr	r3, [pc, #292]	; (80076ec <xTaskIncrementTick+0x150>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00c      	beq.n	80075e8 <xTaskIncrementTick+0x4c>
	__asm volatile
 80075ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d2:	b672      	cpsid	i
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	b662      	cpsie	i
 80075e2:	603b      	str	r3, [r7, #0]
}
 80075e4:	bf00      	nop
 80075e6:	e7fe      	b.n	80075e6 <xTaskIncrementTick+0x4a>
 80075e8:	4b40      	ldr	r3, [pc, #256]	; (80076ec <xTaskIncrementTick+0x150>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	60fb      	str	r3, [r7, #12]
 80075ee:	4b40      	ldr	r3, [pc, #256]	; (80076f0 <xTaskIncrementTick+0x154>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a3e      	ldr	r2, [pc, #248]	; (80076ec <xTaskIncrementTick+0x150>)
 80075f4:	6013      	str	r3, [r2, #0]
 80075f6:	4a3e      	ldr	r2, [pc, #248]	; (80076f0 <xTaskIncrementTick+0x154>)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6013      	str	r3, [r2, #0]
 80075fc:	4b3d      	ldr	r3, [pc, #244]	; (80076f4 <xTaskIncrementTick+0x158>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3301      	adds	r3, #1
 8007602:	4a3c      	ldr	r2, [pc, #240]	; (80076f4 <xTaskIncrementTick+0x158>)
 8007604:	6013      	str	r3, [r2, #0]
 8007606:	f000 fad9 	bl	8007bbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800760a:	4b3b      	ldr	r3, [pc, #236]	; (80076f8 <xTaskIncrementTick+0x15c>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	693a      	ldr	r2, [r7, #16]
 8007610:	429a      	cmp	r2, r3
 8007612:	d348      	bcc.n	80076a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007614:	4b35      	ldr	r3, [pc, #212]	; (80076ec <xTaskIncrementTick+0x150>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d104      	bne.n	8007628 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800761e:	4b36      	ldr	r3, [pc, #216]	; (80076f8 <xTaskIncrementTick+0x15c>)
 8007620:	f04f 32ff 	mov.w	r2, #4294967295
 8007624:	601a      	str	r2, [r3, #0]
					break;
 8007626:	e03e      	b.n	80076a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007628:	4b30      	ldr	r3, [pc, #192]	; (80076ec <xTaskIncrementTick+0x150>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007638:	693a      	ldr	r2, [r7, #16]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	429a      	cmp	r2, r3
 800763e:	d203      	bcs.n	8007648 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007640:	4a2d      	ldr	r2, [pc, #180]	; (80076f8 <xTaskIncrementTick+0x15c>)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007646:	e02e      	b.n	80076a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	3304      	adds	r3, #4
 800764c:	4618      	mov	r0, r3
 800764e:	f7fe ff7c 	bl	800654a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007656:	2b00      	cmp	r3, #0
 8007658:	d004      	beq.n	8007664 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	3318      	adds	r3, #24
 800765e:	4618      	mov	r0, r3
 8007660:	f7fe ff73 	bl	800654a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007668:	2201      	movs	r2, #1
 800766a:	409a      	lsls	r2, r3
 800766c:	4b23      	ldr	r3, [pc, #140]	; (80076fc <xTaskIncrementTick+0x160>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4313      	orrs	r3, r2
 8007672:	4a22      	ldr	r2, [pc, #136]	; (80076fc <xTaskIncrementTick+0x160>)
 8007674:	6013      	str	r3, [r2, #0]
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800767a:	4613      	mov	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	4413      	add	r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4a1f      	ldr	r2, [pc, #124]	; (8007700 <xTaskIncrementTick+0x164>)
 8007684:	441a      	add	r2, r3
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	3304      	adds	r3, #4
 800768a:	4619      	mov	r1, r3
 800768c:	4610      	mov	r0, r2
 800768e:	f7fe feff 	bl	8006490 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007696:	4b1b      	ldr	r3, [pc, #108]	; (8007704 <xTaskIncrementTick+0x168>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769c:	429a      	cmp	r2, r3
 800769e:	d3b9      	bcc.n	8007614 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80076a0:	2301      	movs	r3, #1
 80076a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076a4:	e7b6      	b.n	8007614 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076a6:	4b17      	ldr	r3, [pc, #92]	; (8007704 <xTaskIncrementTick+0x168>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ac:	4914      	ldr	r1, [pc, #80]	; (8007700 <xTaskIncrementTick+0x164>)
 80076ae:	4613      	mov	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	440b      	add	r3, r1
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d907      	bls.n	80076ce <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80076be:	2301      	movs	r3, #1
 80076c0:	617b      	str	r3, [r7, #20]
 80076c2:	e004      	b.n	80076ce <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80076c4:	4b10      	ldr	r3, [pc, #64]	; (8007708 <xTaskIncrementTick+0x16c>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	3301      	adds	r3, #1
 80076ca:	4a0f      	ldr	r2, [pc, #60]	; (8007708 <xTaskIncrementTick+0x16c>)
 80076cc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80076ce:	4b0f      	ldr	r3, [pc, #60]	; (800770c <xTaskIncrementTick+0x170>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80076d6:	2301      	movs	r3, #1
 80076d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80076da:	697b      	ldr	r3, [r7, #20]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3718      	adds	r7, #24
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	200044d0 	.word	0x200044d0
 80076e8:	200044ac 	.word	0x200044ac
 80076ec:	20004460 	.word	0x20004460
 80076f0:	20004464 	.word	0x20004464
 80076f4:	200044c0 	.word	0x200044c0
 80076f8:	200044c8 	.word	0x200044c8
 80076fc:	200044b0 	.word	0x200044b0
 8007700:	200043ac 	.word	0x200043ac
 8007704:	200043a8 	.word	0x200043a8
 8007708:	200044b8 	.word	0x200044b8
 800770c:	200044bc 	.word	0x200044bc

08007710 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007710:	b480      	push	{r7}
 8007712:	b087      	sub	sp, #28
 8007714:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007716:	4b28      	ldr	r3, [pc, #160]	; (80077b8 <vTaskSwitchContext+0xa8>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800771e:	4b27      	ldr	r3, [pc, #156]	; (80077bc <vTaskSwitchContext+0xac>)
 8007720:	2201      	movs	r2, #1
 8007722:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007724:	e041      	b.n	80077aa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007726:	4b25      	ldr	r3, [pc, #148]	; (80077bc <vTaskSwitchContext+0xac>)
 8007728:	2200      	movs	r2, #0
 800772a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800772c:	4b24      	ldr	r3, [pc, #144]	; (80077c0 <vTaskSwitchContext+0xb0>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	fab3 f383 	clz	r3, r3
 8007738:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800773a:	7afb      	ldrb	r3, [r7, #11]
 800773c:	f1c3 031f 	rsb	r3, r3, #31
 8007740:	617b      	str	r3, [r7, #20]
 8007742:	4920      	ldr	r1, [pc, #128]	; (80077c4 <vTaskSwitchContext+0xb4>)
 8007744:	697a      	ldr	r2, [r7, #20]
 8007746:	4613      	mov	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	4413      	add	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	440b      	add	r3, r1
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10c      	bne.n	8007770 <vTaskSwitchContext+0x60>
	__asm volatile
 8007756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775a:	b672      	cpsid	i
 800775c:	f383 8811 	msr	BASEPRI, r3
 8007760:	f3bf 8f6f 	isb	sy
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	b662      	cpsie	i
 800776a:	607b      	str	r3, [r7, #4]
}
 800776c:	bf00      	nop
 800776e:	e7fe      	b.n	800776e <vTaskSwitchContext+0x5e>
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	4613      	mov	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	4413      	add	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4a12      	ldr	r2, [pc, #72]	; (80077c4 <vTaskSwitchContext+0xb4>)
 800777c:	4413      	add	r3, r2
 800777e:	613b      	str	r3, [r7, #16]
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	605a      	str	r2, [r3, #4]
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	685a      	ldr	r2, [r3, #4]
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	3308      	adds	r3, #8
 8007792:	429a      	cmp	r2, r3
 8007794:	d104      	bne.n	80077a0 <vTaskSwitchContext+0x90>
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	685a      	ldr	r2, [r3, #4]
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	605a      	str	r2, [r3, #4]
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	4a08      	ldr	r2, [pc, #32]	; (80077c8 <vTaskSwitchContext+0xb8>)
 80077a8:	6013      	str	r3, [r2, #0]
}
 80077aa:	bf00      	nop
 80077ac:	371c      	adds	r7, #28
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	200044d0 	.word	0x200044d0
 80077bc:	200044bc 	.word	0x200044bc
 80077c0:	200044b0 	.word	0x200044b0
 80077c4:	200043ac 	.word	0x200043ac
 80077c8:	200043a8 	.word	0x200043a8

080077cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10c      	bne.n	80077f6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80077dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e0:	b672      	cpsid	i
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	b662      	cpsie	i
 80077f0:	60fb      	str	r3, [r7, #12]
}
 80077f2:	bf00      	nop
 80077f4:	e7fe      	b.n	80077f4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077f6:	4b07      	ldr	r3, [pc, #28]	; (8007814 <vTaskPlaceOnEventList+0x48>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3318      	adds	r3, #24
 80077fc:	4619      	mov	r1, r3
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7fe fe6a 	bl	80064d8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007804:	2101      	movs	r1, #1
 8007806:	6838      	ldr	r0, [r7, #0]
 8007808:	f000 faa0 	bl	8007d4c <prvAddCurrentTaskToDelayedList>
}
 800780c:	bf00      	nop
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	200043a8 	.word	0x200043a8

08007818 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10c      	bne.n	8007844 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800782a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782e:	b672      	cpsid	i
 8007830:	f383 8811 	msr	BASEPRI, r3
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	b662      	cpsie	i
 800783e:	617b      	str	r3, [r7, #20]
}
 8007840:	bf00      	nop
 8007842:	e7fe      	b.n	8007842 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007844:	4b0a      	ldr	r3, [pc, #40]	; (8007870 <vTaskPlaceOnEventListRestricted+0x58>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	3318      	adds	r3, #24
 800784a:	4619      	mov	r1, r3
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f7fe fe1f 	bl	8006490 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8007858:	f04f 33ff 	mov.w	r3, #4294967295
 800785c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800785e:	6879      	ldr	r1, [r7, #4]
 8007860:	68b8      	ldr	r0, [r7, #8]
 8007862:	f000 fa73 	bl	8007d4c <prvAddCurrentTaskToDelayedList>
	}
 8007866:	bf00      	nop
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	200043a8 	.word	0x200043a8

08007874 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10c      	bne.n	80078a4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800788a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788e:	b672      	cpsid	i
 8007890:	f383 8811 	msr	BASEPRI, r3
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	b662      	cpsie	i
 800789e:	60fb      	str	r3, [r7, #12]
}
 80078a0:	bf00      	nop
 80078a2:	e7fe      	b.n	80078a2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	3318      	adds	r3, #24
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7fe fe4e 	bl	800654a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078ae:	4b1d      	ldr	r3, [pc, #116]	; (8007924 <xTaskRemoveFromEventList+0xb0>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d11c      	bne.n	80078f0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	3304      	adds	r3, #4
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fe fe45 	bl	800654a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c4:	2201      	movs	r2, #1
 80078c6:	409a      	lsls	r2, r3
 80078c8:	4b17      	ldr	r3, [pc, #92]	; (8007928 <xTaskRemoveFromEventList+0xb4>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	4a16      	ldr	r2, [pc, #88]	; (8007928 <xTaskRemoveFromEventList+0xb4>)
 80078d0:	6013      	str	r3, [r2, #0]
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d6:	4613      	mov	r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4413      	add	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4a13      	ldr	r2, [pc, #76]	; (800792c <xTaskRemoveFromEventList+0xb8>)
 80078e0:	441a      	add	r2, r3
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	3304      	adds	r3, #4
 80078e6:	4619      	mov	r1, r3
 80078e8:	4610      	mov	r0, r2
 80078ea:	f7fe fdd1 	bl	8006490 <vListInsertEnd>
 80078ee:	e005      	b.n	80078fc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	3318      	adds	r3, #24
 80078f4:	4619      	mov	r1, r3
 80078f6:	480e      	ldr	r0, [pc, #56]	; (8007930 <xTaskRemoveFromEventList+0xbc>)
 80078f8:	f7fe fdca 	bl	8006490 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007900:	4b0c      	ldr	r3, [pc, #48]	; (8007934 <xTaskRemoveFromEventList+0xc0>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007906:	429a      	cmp	r2, r3
 8007908:	d905      	bls.n	8007916 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800790a:	2301      	movs	r3, #1
 800790c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800790e:	4b0a      	ldr	r3, [pc, #40]	; (8007938 <xTaskRemoveFromEventList+0xc4>)
 8007910:	2201      	movs	r2, #1
 8007912:	601a      	str	r2, [r3, #0]
 8007914:	e001      	b.n	800791a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007916:	2300      	movs	r3, #0
 8007918:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800791a:	697b      	ldr	r3, [r7, #20]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3718      	adds	r7, #24
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	200044d0 	.word	0x200044d0
 8007928:	200044b0 	.word	0x200044b0
 800792c:	200043ac 	.word	0x200043ac
 8007930:	20004468 	.word	0x20004468
 8007934:	200043a8 	.word	0x200043a8
 8007938:	200044bc 	.word	0x200044bc

0800793c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007944:	4b06      	ldr	r3, [pc, #24]	; (8007960 <vTaskInternalSetTimeOutState+0x24>)
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800794c:	4b05      	ldr	r3, [pc, #20]	; (8007964 <vTaskInternalSetTimeOutState+0x28>)
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	605a      	str	r2, [r3, #4]
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	200044c0 	.word	0x200044c0
 8007964:	200044ac 	.word	0x200044ac

08007968 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b088      	sub	sp, #32
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10c      	bne.n	8007992 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797c:	b672      	cpsid	i
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	b662      	cpsie	i
 800798c:	613b      	str	r3, [r7, #16]
}
 800798e:	bf00      	nop
 8007990:	e7fe      	b.n	8007990 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10c      	bne.n	80079b2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799c:	b672      	cpsid	i
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	b662      	cpsie	i
 80079ac:	60fb      	str	r3, [r7, #12]
}
 80079ae:	bf00      	nop
 80079b0:	e7fe      	b.n	80079b0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80079b2:	f000 fe7b 	bl	80086ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079b6:	4b1d      	ldr	r3, [pc, #116]	; (8007a2c <xTaskCheckForTimeOut+0xc4>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ce:	d102      	bne.n	80079d6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80079d0:	2300      	movs	r3, #0
 80079d2:	61fb      	str	r3, [r7, #28]
 80079d4:	e023      	b.n	8007a1e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	4b15      	ldr	r3, [pc, #84]	; (8007a30 <xTaskCheckForTimeOut+0xc8>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d007      	beq.n	80079f2 <xTaskCheckForTimeOut+0x8a>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	69ba      	ldr	r2, [r7, #24]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d302      	bcc.n	80079f2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079ec:	2301      	movs	r3, #1
 80079ee:	61fb      	str	r3, [r7, #28]
 80079f0:	e015      	b.n	8007a1e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d20b      	bcs.n	8007a14 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	1ad2      	subs	r2, r2, r3
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7ff ff97 	bl	800793c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	61fb      	str	r3, [r7, #28]
 8007a12:	e004      	b.n	8007a1e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	2200      	movs	r2, #0
 8007a18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a1e:	f000 fe79 	bl	8008714 <vPortExitCritical>

	return xReturn;
 8007a22:	69fb      	ldr	r3, [r7, #28]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3720      	adds	r7, #32
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	200044ac 	.word	0x200044ac
 8007a30:	200044c0 	.word	0x200044c0

08007a34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a34:	b480      	push	{r7}
 8007a36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a38:	4b03      	ldr	r3, [pc, #12]	; (8007a48 <vTaskMissedYield+0x14>)
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	601a      	str	r2, [r3, #0]
}
 8007a3e:	bf00      	nop
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	200044bc 	.word	0x200044bc

08007a4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a54:	f000 f852 	bl	8007afc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a58:	4b06      	ldr	r3, [pc, #24]	; (8007a74 <prvIdleTask+0x28>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d9f9      	bls.n	8007a54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a60:	4b05      	ldr	r3, [pc, #20]	; (8007a78 <prvIdleTask+0x2c>)
 8007a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a66:	601a      	str	r2, [r3, #0]
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a70:	e7f0      	b.n	8007a54 <prvIdleTask+0x8>
 8007a72:	bf00      	nop
 8007a74:	200043ac 	.word	0x200043ac
 8007a78:	e000ed04 	.word	0xe000ed04

08007a7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a82:	2300      	movs	r3, #0
 8007a84:	607b      	str	r3, [r7, #4]
 8007a86:	e00c      	b.n	8007aa2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4413      	add	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4a12      	ldr	r2, [pc, #72]	; (8007adc <prvInitialiseTaskLists+0x60>)
 8007a94:	4413      	add	r3, r2
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fe fccd 	bl	8006436 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	607b      	str	r3, [r7, #4]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b06      	cmp	r3, #6
 8007aa6:	d9ef      	bls.n	8007a88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007aa8:	480d      	ldr	r0, [pc, #52]	; (8007ae0 <prvInitialiseTaskLists+0x64>)
 8007aaa:	f7fe fcc4 	bl	8006436 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007aae:	480d      	ldr	r0, [pc, #52]	; (8007ae4 <prvInitialiseTaskLists+0x68>)
 8007ab0:	f7fe fcc1 	bl	8006436 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ab4:	480c      	ldr	r0, [pc, #48]	; (8007ae8 <prvInitialiseTaskLists+0x6c>)
 8007ab6:	f7fe fcbe 	bl	8006436 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007aba:	480c      	ldr	r0, [pc, #48]	; (8007aec <prvInitialiseTaskLists+0x70>)
 8007abc:	f7fe fcbb 	bl	8006436 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ac0:	480b      	ldr	r0, [pc, #44]	; (8007af0 <prvInitialiseTaskLists+0x74>)
 8007ac2:	f7fe fcb8 	bl	8006436 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ac6:	4b0b      	ldr	r3, [pc, #44]	; (8007af4 <prvInitialiseTaskLists+0x78>)
 8007ac8:	4a05      	ldr	r2, [pc, #20]	; (8007ae0 <prvInitialiseTaskLists+0x64>)
 8007aca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007acc:	4b0a      	ldr	r3, [pc, #40]	; (8007af8 <prvInitialiseTaskLists+0x7c>)
 8007ace:	4a05      	ldr	r2, [pc, #20]	; (8007ae4 <prvInitialiseTaskLists+0x68>)
 8007ad0:	601a      	str	r2, [r3, #0]
}
 8007ad2:	bf00      	nop
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	200043ac 	.word	0x200043ac
 8007ae0:	20004438 	.word	0x20004438
 8007ae4:	2000444c 	.word	0x2000444c
 8007ae8:	20004468 	.word	0x20004468
 8007aec:	2000447c 	.word	0x2000447c
 8007af0:	20004494 	.word	0x20004494
 8007af4:	20004460 	.word	0x20004460
 8007af8:	20004464 	.word	0x20004464

08007afc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b02:	e019      	b.n	8007b38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b04:	f000 fdd2 	bl	80086ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b08:	4b10      	ldr	r3, [pc, #64]	; (8007b4c <prvCheckTasksWaitingTermination+0x50>)
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	3304      	adds	r3, #4
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7fe fd18 	bl	800654a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b1a:	4b0d      	ldr	r3, [pc, #52]	; (8007b50 <prvCheckTasksWaitingTermination+0x54>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	4a0b      	ldr	r2, [pc, #44]	; (8007b50 <prvCheckTasksWaitingTermination+0x54>)
 8007b22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b24:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <prvCheckTasksWaitingTermination+0x58>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	4a0a      	ldr	r2, [pc, #40]	; (8007b54 <prvCheckTasksWaitingTermination+0x58>)
 8007b2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b2e:	f000 fdf1 	bl	8008714 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f810 	bl	8007b58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b38:	4b06      	ldr	r3, [pc, #24]	; (8007b54 <prvCheckTasksWaitingTermination+0x58>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1e1      	bne.n	8007b04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b40:	bf00      	nop
 8007b42:	bf00      	nop
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	2000447c 	.word	0x2000447c
 8007b50:	200044a8 	.word	0x200044a8
 8007b54:	20004490 	.word	0x20004490

08007b58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d108      	bne.n	8007b7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 ff92 	bl	8008a98 <vPortFree>
				vPortFree( pxTCB );
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 ff8f 	bl	8008a98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b7a:	e01a      	b.n	8007bb2 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d103      	bne.n	8007b8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 ff86 	bl	8008a98 <vPortFree>
	}
 8007b8c:	e011      	b.n	8007bb2 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	d00c      	beq.n	8007bb2 <prvDeleteTCB+0x5a>
	__asm volatile
 8007b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9c:	b672      	cpsid	i
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	b662      	cpsie	i
 8007bac:	60fb      	str	r3, [r7, #12]
}
 8007bae:	bf00      	nop
 8007bb0:	e7fe      	b.n	8007bb0 <prvDeleteTCB+0x58>
	}
 8007bb2:	bf00      	nop
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
	...

08007bbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bc2:	4b0c      	ldr	r3, [pc, #48]	; (8007bf4 <prvResetNextTaskUnblockTime+0x38>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d104      	bne.n	8007bd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007bcc:	4b0a      	ldr	r3, [pc, #40]	; (8007bf8 <prvResetNextTaskUnblockTime+0x3c>)
 8007bce:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007bd4:	e008      	b.n	8007be8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bd6:	4b07      	ldr	r3, [pc, #28]	; (8007bf4 <prvResetNextTaskUnblockTime+0x38>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	4a04      	ldr	r2, [pc, #16]	; (8007bf8 <prvResetNextTaskUnblockTime+0x3c>)
 8007be6:	6013      	str	r3, [r2, #0]
}
 8007be8:	bf00      	nop
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr
 8007bf4:	20004460 	.word	0x20004460
 8007bf8:	200044c8 	.word	0x200044c8

08007bfc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c02:	4b0b      	ldr	r3, [pc, #44]	; (8007c30 <xTaskGetSchedulerState+0x34>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d102      	bne.n	8007c10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	607b      	str	r3, [r7, #4]
 8007c0e:	e008      	b.n	8007c22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c10:	4b08      	ldr	r3, [pc, #32]	; (8007c34 <xTaskGetSchedulerState+0x38>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d102      	bne.n	8007c1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c18:	2302      	movs	r3, #2
 8007c1a:	607b      	str	r3, [r7, #4]
 8007c1c:	e001      	b.n	8007c22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c22:	687b      	ldr	r3, [r7, #4]
	}
 8007c24:	4618      	mov	r0, r3
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	200044b4 	.word	0x200044b4
 8007c34:	200044d0 	.word	0x200044d0

08007c38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c44:	2300      	movs	r3, #0
 8007c46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d072      	beq.n	8007d34 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c4e:	4b3c      	ldr	r3, [pc, #240]	; (8007d40 <xTaskPriorityDisinherit+0x108>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d00c      	beq.n	8007c72 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5c:	b672      	cpsid	i
 8007c5e:	f383 8811 	msr	BASEPRI, r3
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	b662      	cpsie	i
 8007c6c:	60fb      	str	r3, [r7, #12]
}
 8007c6e:	bf00      	nop
 8007c70:	e7fe      	b.n	8007c70 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d10c      	bne.n	8007c94 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7e:	b672      	cpsid	i
 8007c80:	f383 8811 	msr	BASEPRI, r3
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	b662      	cpsie	i
 8007c8e:	60bb      	str	r3, [r7, #8]
}
 8007c90:	bf00      	nop
 8007c92:	e7fe      	b.n	8007c92 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c98:	1e5a      	subs	r2, r3, #1
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d044      	beq.n	8007d34 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d140      	bne.n	8007d34 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	3304      	adds	r3, #4
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fe fc47 	bl	800654a <uxListRemove>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d115      	bne.n	8007cee <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cc6:	491f      	ldr	r1, [pc, #124]	; (8007d44 <xTaskPriorityDisinherit+0x10c>)
 8007cc8:	4613      	mov	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	440b      	add	r3, r1
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10a      	bne.n	8007cee <xTaskPriorityDisinherit+0xb6>
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cdc:	2201      	movs	r2, #1
 8007cde:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce2:	43da      	mvns	r2, r3
 8007ce4:	4b18      	ldr	r3, [pc, #96]	; (8007d48 <xTaskPriorityDisinherit+0x110>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4013      	ands	r3, r2
 8007cea:	4a17      	ldr	r2, [pc, #92]	; (8007d48 <xTaskPriorityDisinherit+0x110>)
 8007cec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfa:	f1c3 0207 	rsb	r2, r3, #7
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d06:	2201      	movs	r2, #1
 8007d08:	409a      	lsls	r2, r3
 8007d0a:	4b0f      	ldr	r3, [pc, #60]	; (8007d48 <xTaskPriorityDisinherit+0x110>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	4a0d      	ldr	r2, [pc, #52]	; (8007d48 <xTaskPriorityDisinherit+0x110>)
 8007d12:	6013      	str	r3, [r2, #0]
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d18:	4613      	mov	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4413      	add	r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	4a08      	ldr	r2, [pc, #32]	; (8007d44 <xTaskPriorityDisinherit+0x10c>)
 8007d22:	441a      	add	r2, r3
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	3304      	adds	r3, #4
 8007d28:	4619      	mov	r1, r3
 8007d2a:	4610      	mov	r0, r2
 8007d2c:	f7fe fbb0 	bl	8006490 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d30:	2301      	movs	r3, #1
 8007d32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d34:	697b      	ldr	r3, [r7, #20]
	}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3718      	adds	r7, #24
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	200043a8 	.word	0x200043a8
 8007d44:	200043ac 	.word	0x200043ac
 8007d48:	200044b0 	.word	0x200044b0

08007d4c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d56:	4b29      	ldr	r3, [pc, #164]	; (8007dfc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d5c:	4b28      	ldr	r3, [pc, #160]	; (8007e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	3304      	adds	r3, #4
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fe fbf1 	bl	800654a <uxListRemove>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10b      	bne.n	8007d86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007d6e:	4b24      	ldr	r3, [pc, #144]	; (8007e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d74:	2201      	movs	r2, #1
 8007d76:	fa02 f303 	lsl.w	r3, r2, r3
 8007d7a:	43da      	mvns	r2, r3
 8007d7c:	4b21      	ldr	r3, [pc, #132]	; (8007e04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4013      	ands	r3, r2
 8007d82:	4a20      	ldr	r2, [pc, #128]	; (8007e04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8c:	d10a      	bne.n	8007da4 <prvAddCurrentTaskToDelayedList+0x58>
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d007      	beq.n	8007da4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d94:	4b1a      	ldr	r3, [pc, #104]	; (8007e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	3304      	adds	r3, #4
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	481a      	ldr	r0, [pc, #104]	; (8007e08 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007d9e:	f7fe fb77 	bl	8006490 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007da2:	e026      	b.n	8007df2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4413      	add	r3, r2
 8007daa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007dac:	4b14      	ldr	r3, [pc, #80]	; (8007e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d209      	bcs.n	8007dd0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dbc:	4b13      	ldr	r3, [pc, #76]	; (8007e0c <prvAddCurrentTaskToDelayedList+0xc0>)
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	4b0f      	ldr	r3, [pc, #60]	; (8007e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	3304      	adds	r3, #4
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	4610      	mov	r0, r2
 8007dca:	f7fe fb85 	bl	80064d8 <vListInsert>
}
 8007dce:	e010      	b.n	8007df2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dd0:	4b0f      	ldr	r3, [pc, #60]	; (8007e10 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	4b0a      	ldr	r3, [pc, #40]	; (8007e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	3304      	adds	r3, #4
 8007dda:	4619      	mov	r1, r3
 8007ddc:	4610      	mov	r0, r2
 8007dde:	f7fe fb7b 	bl	80064d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007de2:	4b0c      	ldr	r3, [pc, #48]	; (8007e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d202      	bcs.n	8007df2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007dec:	4a09      	ldr	r2, [pc, #36]	; (8007e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	6013      	str	r3, [r2, #0]
}
 8007df2:	bf00      	nop
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	200044ac 	.word	0x200044ac
 8007e00:	200043a8 	.word	0x200043a8
 8007e04:	200044b0 	.word	0x200044b0
 8007e08:	20004494 	.word	0x20004494
 8007e0c:	20004464 	.word	0x20004464
 8007e10:	20004460 	.word	0x20004460
 8007e14:	200044c8 	.word	0x200044c8

08007e18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b08a      	sub	sp, #40	; 0x28
 8007e1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007e22:	f000 faf7 	bl	8008414 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007e26:	4b1d      	ldr	r3, [pc, #116]	; (8007e9c <xTimerCreateTimerTask+0x84>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d021      	beq.n	8007e72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007e32:	2300      	movs	r3, #0
 8007e34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e36:	1d3a      	adds	r2, r7, #4
 8007e38:	f107 0108 	add.w	r1, r7, #8
 8007e3c:	f107 030c 	add.w	r3, r7, #12
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7f8 fe83 	bl	8000b4c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e46:	6879      	ldr	r1, [r7, #4]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	9202      	str	r2, [sp, #8]
 8007e4e:	9301      	str	r3, [sp, #4]
 8007e50:	2302      	movs	r3, #2
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	2300      	movs	r3, #0
 8007e56:	460a      	mov	r2, r1
 8007e58:	4911      	ldr	r1, [pc, #68]	; (8007ea0 <xTimerCreateTimerTask+0x88>)
 8007e5a:	4812      	ldr	r0, [pc, #72]	; (8007ea4 <xTimerCreateTimerTask+0x8c>)
 8007e5c:	f7ff f8a6 	bl	8006fac <xTaskCreateStatic>
 8007e60:	4603      	mov	r3, r0
 8007e62:	4a11      	ldr	r2, [pc, #68]	; (8007ea8 <xTimerCreateTimerTask+0x90>)
 8007e64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e66:	4b10      	ldr	r3, [pc, #64]	; (8007ea8 <xTimerCreateTimerTask+0x90>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d001      	beq.n	8007e72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10c      	bne.n	8007e92 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8007e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7c:	b672      	cpsid	i
 8007e7e:	f383 8811 	msr	BASEPRI, r3
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	f3bf 8f4f 	dsb	sy
 8007e8a:	b662      	cpsie	i
 8007e8c:	613b      	str	r3, [r7, #16]
}
 8007e8e:	bf00      	nop
 8007e90:	e7fe      	b.n	8007e90 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007e92:	697b      	ldr	r3, [r7, #20]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3718      	adds	r7, #24
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	20004504 	.word	0x20004504
 8007ea0:	08009dec 	.word	0x08009dec
 8007ea4:	08007fe9 	.word	0x08007fe9
 8007ea8:	20004508 	.word	0x20004508

08007eac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b08a      	sub	sp, #40	; 0x28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
 8007eb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10c      	bne.n	8007ede <xTimerGenericCommand+0x32>
	__asm volatile
 8007ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec8:	b672      	cpsid	i
 8007eca:	f383 8811 	msr	BASEPRI, r3
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	b662      	cpsie	i
 8007ed8:	623b      	str	r3, [r7, #32]
}
 8007eda:	bf00      	nop
 8007edc:	e7fe      	b.n	8007edc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007ede:	4b1a      	ldr	r3, [pc, #104]	; (8007f48 <xTimerGenericCommand+0x9c>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d02a      	beq.n	8007f3c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	2b05      	cmp	r3, #5
 8007ef6:	dc18      	bgt.n	8007f2a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ef8:	f7ff fe80 	bl	8007bfc <xTaskGetSchedulerState>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d109      	bne.n	8007f16 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f02:	4b11      	ldr	r3, [pc, #68]	; (8007f48 <xTimerGenericCommand+0x9c>)
 8007f04:	6818      	ldr	r0, [r3, #0]
 8007f06:	f107 0114 	add.w	r1, r7, #20
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f0e:	f7fe fc53 	bl	80067b8 <xQueueGenericSend>
 8007f12:	6278      	str	r0, [r7, #36]	; 0x24
 8007f14:	e012      	b.n	8007f3c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f16:	4b0c      	ldr	r3, [pc, #48]	; (8007f48 <xTimerGenericCommand+0x9c>)
 8007f18:	6818      	ldr	r0, [r3, #0]
 8007f1a:	f107 0114 	add.w	r1, r7, #20
 8007f1e:	2300      	movs	r3, #0
 8007f20:	2200      	movs	r2, #0
 8007f22:	f7fe fc49 	bl	80067b8 <xQueueGenericSend>
 8007f26:	6278      	str	r0, [r7, #36]	; 0x24
 8007f28:	e008      	b.n	8007f3c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f2a:	4b07      	ldr	r3, [pc, #28]	; (8007f48 <xTimerGenericCommand+0x9c>)
 8007f2c:	6818      	ldr	r0, [r3, #0]
 8007f2e:	f107 0114 	add.w	r1, r7, #20
 8007f32:	2300      	movs	r3, #0
 8007f34:	683a      	ldr	r2, [r7, #0]
 8007f36:	f7fe fd45 	bl	80069c4 <xQueueGenericSendFromISR>
 8007f3a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3728      	adds	r7, #40	; 0x28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	20004504 	.word	0x20004504

08007f4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b088      	sub	sp, #32
 8007f50:	af02      	add	r7, sp, #8
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f56:	4b23      	ldr	r3, [pc, #140]	; (8007fe4 <prvProcessExpiredTimer+0x98>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	3304      	adds	r3, #4
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7fe faf0 	bl	800654a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f70:	f003 0304 	and.w	r3, r3, #4
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d024      	beq.n	8007fc2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	699a      	ldr	r2, [r3, #24]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	18d1      	adds	r1, r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	6978      	ldr	r0, [r7, #20]
 8007f86:	f000 f8d3 	bl	8008130 <prvInsertTimerInActiveList>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d021      	beq.n	8007fd4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f90:	2300      	movs	r3, #0
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	2300      	movs	r3, #0
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	2100      	movs	r1, #0
 8007f9a:	6978      	ldr	r0, [r7, #20]
 8007f9c:	f7ff ff86 	bl	8007eac <xTimerGenericCommand>
 8007fa0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d115      	bne.n	8007fd4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8007fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fac:	b672      	cpsid	i
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	b662      	cpsie	i
 8007fbc:	60fb      	str	r3, [r7, #12]
}
 8007fbe:	bf00      	nop
 8007fc0:	e7fe      	b.n	8007fc0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007fc8:	f023 0301 	bic.w	r3, r3, #1
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	6a1b      	ldr	r3, [r3, #32]
 8007fd8:	6978      	ldr	r0, [r7, #20]
 8007fda:	4798      	blx	r3
}
 8007fdc:	bf00      	nop
 8007fde:	3718      	adds	r7, #24
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	200044fc 	.word	0x200044fc

08007fe8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ff0:	f107 0308 	add.w	r3, r7, #8
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f000 f857 	bl	80080a8 <prvGetNextExpireTime>
 8007ffa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	4619      	mov	r1, r3
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f000 f803 	bl	800800c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008006:	f000 f8d5 	bl	80081b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800800a:	e7f1      	b.n	8007ff0 <prvTimerTask+0x8>

0800800c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008016:	f7ff fa05 	bl	8007424 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800801a:	f107 0308 	add.w	r3, r7, #8
 800801e:	4618      	mov	r0, r3
 8008020:	f000 f866 	bl	80080f0 <prvSampleTimeNow>
 8008024:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d130      	bne.n	800808e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10a      	bne.n	8008048 <prvProcessTimerOrBlockTask+0x3c>
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	429a      	cmp	r2, r3
 8008038:	d806      	bhi.n	8008048 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800803a:	f7ff fa01 	bl	8007440 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800803e:	68f9      	ldr	r1, [r7, #12]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f7ff ff83 	bl	8007f4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008046:	e024      	b.n	8008092 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d008      	beq.n	8008060 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800804e:	4b13      	ldr	r3, [pc, #76]	; (800809c <prvProcessTimerOrBlockTask+0x90>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d101      	bne.n	800805c <prvProcessTimerOrBlockTask+0x50>
 8008058:	2301      	movs	r3, #1
 800805a:	e000      	b.n	800805e <prvProcessTimerOrBlockTask+0x52>
 800805c:	2300      	movs	r3, #0
 800805e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008060:	4b0f      	ldr	r3, [pc, #60]	; (80080a0 <prvProcessTimerOrBlockTask+0x94>)
 8008062:	6818      	ldr	r0, [r3, #0]
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	4619      	mov	r1, r3
 800806e:	f7fe ff69 	bl	8006f44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008072:	f7ff f9e5 	bl	8007440 <xTaskResumeAll>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10a      	bne.n	8008092 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800807c:	4b09      	ldr	r3, [pc, #36]	; (80080a4 <prvProcessTimerOrBlockTask+0x98>)
 800807e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008082:	601a      	str	r2, [r3, #0]
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	f3bf 8f6f 	isb	sy
}
 800808c:	e001      	b.n	8008092 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800808e:	f7ff f9d7 	bl	8007440 <xTaskResumeAll>
}
 8008092:	bf00      	nop
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	20004500 	.word	0x20004500
 80080a0:	20004504 	.word	0x20004504
 80080a4:	e000ed04 	.word	0xe000ed04

080080a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80080b0:	4b0e      	ldr	r3, [pc, #56]	; (80080ec <prvGetNextExpireTime+0x44>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d101      	bne.n	80080be <prvGetNextExpireTime+0x16>
 80080ba:	2201      	movs	r2, #1
 80080bc:	e000      	b.n	80080c0 <prvGetNextExpireTime+0x18>
 80080be:	2200      	movs	r2, #0
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d105      	bne.n	80080d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080cc:	4b07      	ldr	r3, [pc, #28]	; (80080ec <prvGetNextExpireTime+0x44>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	60fb      	str	r3, [r7, #12]
 80080d6:	e001      	b.n	80080dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80080d8:	2300      	movs	r3, #0
 80080da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80080dc:	68fb      	ldr	r3, [r7, #12]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	200044fc 	.word	0x200044fc

080080f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80080f8:	f7ff fa40 	bl	800757c <xTaskGetTickCount>
 80080fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80080fe:	4b0b      	ldr	r3, [pc, #44]	; (800812c <prvSampleTimeNow+0x3c>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	429a      	cmp	r2, r3
 8008106:	d205      	bcs.n	8008114 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008108:	f000 f91e 	bl	8008348 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	601a      	str	r2, [r3, #0]
 8008112:	e002      	b.n	800811a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800811a:	4a04      	ldr	r2, [pc, #16]	; (800812c <prvSampleTimeNow+0x3c>)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008120:	68fb      	ldr	r3, [r7, #12]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	2000450c 	.word	0x2000450c

08008130 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	607a      	str	r2, [r7, #4]
 800813c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800813e:	2300      	movs	r3, #0
 8008140:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	429a      	cmp	r2, r3
 8008154:	d812      	bhi.n	800817c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	1ad2      	subs	r2, r2, r3
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	429a      	cmp	r2, r3
 8008162:	d302      	bcc.n	800816a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008164:	2301      	movs	r3, #1
 8008166:	617b      	str	r3, [r7, #20]
 8008168:	e01b      	b.n	80081a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800816a:	4b10      	ldr	r3, [pc, #64]	; (80081ac <prvInsertTimerInActiveList+0x7c>)
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	3304      	adds	r3, #4
 8008172:	4619      	mov	r1, r3
 8008174:	4610      	mov	r0, r2
 8008176:	f7fe f9af 	bl	80064d8 <vListInsert>
 800817a:	e012      	b.n	80081a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	429a      	cmp	r2, r3
 8008182:	d206      	bcs.n	8008192 <prvInsertTimerInActiveList+0x62>
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	429a      	cmp	r2, r3
 800818a:	d302      	bcc.n	8008192 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800818c:	2301      	movs	r3, #1
 800818e:	617b      	str	r3, [r7, #20]
 8008190:	e007      	b.n	80081a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008192:	4b07      	ldr	r3, [pc, #28]	; (80081b0 <prvInsertTimerInActiveList+0x80>)
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	3304      	adds	r3, #4
 800819a:	4619      	mov	r1, r3
 800819c:	4610      	mov	r0, r2
 800819e:	f7fe f99b 	bl	80064d8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80081a2:	697b      	ldr	r3, [r7, #20]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3718      	adds	r7, #24
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	20004500 	.word	0x20004500
 80081b0:	200044fc 	.word	0x200044fc

080081b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b08c      	sub	sp, #48	; 0x30
 80081b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081ba:	e0b2      	b.n	8008322 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f2c0 80ae 	blt.w	8008320 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80081c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ca:	695b      	ldr	r3, [r3, #20]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d004      	beq.n	80081da <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d2:	3304      	adds	r3, #4
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7fe f9b8 	bl	800654a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081da:	1d3b      	adds	r3, r7, #4
 80081dc:	4618      	mov	r0, r3
 80081de:	f7ff ff87 	bl	80080f0 <prvSampleTimeNow>
 80081e2:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	2b09      	cmp	r3, #9
 80081e8:	f200 809b 	bhi.w	8008322 <prvProcessReceivedCommands+0x16e>
 80081ec:	a201      	add	r2, pc, #4	; (adr r2, 80081f4 <prvProcessReceivedCommands+0x40>)
 80081ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f2:	bf00      	nop
 80081f4:	0800821d 	.word	0x0800821d
 80081f8:	0800821d 	.word	0x0800821d
 80081fc:	0800821d 	.word	0x0800821d
 8008200:	08008295 	.word	0x08008295
 8008204:	080082a9 	.word	0x080082a9
 8008208:	080082f7 	.word	0x080082f7
 800820c:	0800821d 	.word	0x0800821d
 8008210:	0800821d 	.word	0x0800821d
 8008214:	08008295 	.word	0x08008295
 8008218:	080082a9 	.word	0x080082a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008222:	f043 0301 	orr.w	r3, r3, #1
 8008226:	b2da      	uxtb	r2, r3
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	18d1      	adds	r1, r2, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6a3a      	ldr	r2, [r7, #32]
 800823a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800823c:	f7ff ff78 	bl	8008130 <prvInsertTimerInActiveList>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d06d      	beq.n	8008322 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008248:	6a1b      	ldr	r3, [r3, #32]
 800824a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800824c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800824e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008250:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008254:	f003 0304 	and.w	r3, r3, #4
 8008258:	2b00      	cmp	r3, #0
 800825a:	d062      	beq.n	8008322 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	441a      	add	r2, r3
 8008264:	2300      	movs	r3, #0
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	2300      	movs	r3, #0
 800826a:	2100      	movs	r1, #0
 800826c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800826e:	f7ff fe1d 	bl	8007eac <xTimerGenericCommand>
 8008272:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d153      	bne.n	8008322 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800827a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827e:	b672      	cpsid	i
 8008280:	f383 8811 	msr	BASEPRI, r3
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	b662      	cpsie	i
 800828e:	61bb      	str	r3, [r7, #24]
}
 8008290:	bf00      	nop
 8008292:	e7fe      	b.n	8008292 <prvProcessReceivedCommands+0xde>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008296:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800829a:	f023 0301 	bic.w	r3, r3, #1
 800829e:	b2da      	uxtb	r2, r3
 80082a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80082a6:	e03c      	b.n	8008322 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80082ae:	f043 0301 	orr.w	r3, r3, #1
 80082b2:	b2da      	uxtb	r2, r3
 80082b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80082c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10c      	bne.n	80082e2 <prvProcessReceivedCommands+0x12e>
	__asm volatile
 80082c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082cc:	b672      	cpsid	i
 80082ce:	f383 8811 	msr	BASEPRI, r3
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	b662      	cpsie	i
 80082dc:	617b      	str	r3, [r7, #20]
}
 80082de:	bf00      	nop
 80082e0:	e7fe      	b.n	80082e0 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80082e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e4:	699a      	ldr	r2, [r3, #24]
 80082e6:	6a3b      	ldr	r3, [r7, #32]
 80082e8:	18d1      	adds	r1, r2, r3
 80082ea:	6a3b      	ldr	r3, [r7, #32]
 80082ec:	6a3a      	ldr	r2, [r7, #32]
 80082ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082f0:	f7ff ff1e 	bl	8008130 <prvInsertTimerInActiveList>
					break;
 80082f4:	e015      	b.n	8008322 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80082f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80082fc:	f003 0302 	and.w	r3, r3, #2
 8008300:	2b00      	cmp	r3, #0
 8008302:	d103      	bne.n	800830c <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 8008304:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008306:	f000 fbc7 	bl	8008a98 <vPortFree>
 800830a:	e00a      	b.n	8008322 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008312:	f023 0301 	bic.w	r3, r3, #1
 8008316:	b2da      	uxtb	r2, r3
 8008318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800831e:	e000      	b.n	8008322 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008320:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008322:	4b08      	ldr	r3, [pc, #32]	; (8008344 <prvProcessReceivedCommands+0x190>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f107 0108 	add.w	r1, r7, #8
 800832a:	2200      	movs	r2, #0
 800832c:	4618      	mov	r0, r3
 800832e:	f7fe fbe9 	bl	8006b04 <xQueueReceive>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	f47f af41 	bne.w	80081bc <prvProcessReceivedCommands+0x8>
	}
}
 800833a:	bf00      	nop
 800833c:	bf00      	nop
 800833e:	3728      	adds	r7, #40	; 0x28
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	20004504 	.word	0x20004504

08008348 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b088      	sub	sp, #32
 800834c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800834e:	e04a      	b.n	80083e6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008350:	4b2e      	ldr	r3, [pc, #184]	; (800840c <prvSwitchTimerLists+0xc4>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800835a:	4b2c      	ldr	r3, [pc, #176]	; (800840c <prvSwitchTimerLists+0xc4>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	3304      	adds	r3, #4
 8008368:	4618      	mov	r0, r3
 800836a:	f7fe f8ee 	bl	800654a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800837c:	f003 0304 	and.w	r3, r3, #4
 8008380:	2b00      	cmp	r3, #0
 8008382:	d030      	beq.n	80083e6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	699b      	ldr	r3, [r3, #24]
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	4413      	add	r3, r2
 800838c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	429a      	cmp	r2, r3
 8008394:	d90e      	bls.n	80083b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	68fa      	ldr	r2, [r7, #12]
 80083a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083a2:	4b1a      	ldr	r3, [pc, #104]	; (800840c <prvSwitchTimerLists+0xc4>)
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	3304      	adds	r3, #4
 80083aa:	4619      	mov	r1, r3
 80083ac:	4610      	mov	r0, r2
 80083ae:	f7fe f893 	bl	80064d8 <vListInsert>
 80083b2:	e018      	b.n	80083e6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083b4:	2300      	movs	r3, #0
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	2300      	movs	r3, #0
 80083ba:	693a      	ldr	r2, [r7, #16]
 80083bc:	2100      	movs	r1, #0
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f7ff fd74 	bl	8007eac <xTimerGenericCommand>
 80083c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10c      	bne.n	80083e6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80083cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d0:	b672      	cpsid	i
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	b662      	cpsie	i
 80083e0:	603b      	str	r3, [r7, #0]
}
 80083e2:	bf00      	nop
 80083e4:	e7fe      	b.n	80083e4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083e6:	4b09      	ldr	r3, [pc, #36]	; (800840c <prvSwitchTimerLists+0xc4>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1af      	bne.n	8008350 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80083f0:	4b06      	ldr	r3, [pc, #24]	; (800840c <prvSwitchTimerLists+0xc4>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80083f6:	4b06      	ldr	r3, [pc, #24]	; (8008410 <prvSwitchTimerLists+0xc8>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a04      	ldr	r2, [pc, #16]	; (800840c <prvSwitchTimerLists+0xc4>)
 80083fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80083fe:	4a04      	ldr	r2, [pc, #16]	; (8008410 <prvSwitchTimerLists+0xc8>)
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	6013      	str	r3, [r2, #0]
}
 8008404:	bf00      	nop
 8008406:	3718      	adds	r7, #24
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	200044fc 	.word	0x200044fc
 8008410:	20004500 	.word	0x20004500

08008414 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800841a:	f000 f947 	bl	80086ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800841e:	4b15      	ldr	r3, [pc, #84]	; (8008474 <prvCheckForValidListAndQueue+0x60>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d120      	bne.n	8008468 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008426:	4814      	ldr	r0, [pc, #80]	; (8008478 <prvCheckForValidListAndQueue+0x64>)
 8008428:	f7fe f805 	bl	8006436 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800842c:	4813      	ldr	r0, [pc, #76]	; (800847c <prvCheckForValidListAndQueue+0x68>)
 800842e:	f7fe f802 	bl	8006436 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008432:	4b13      	ldr	r3, [pc, #76]	; (8008480 <prvCheckForValidListAndQueue+0x6c>)
 8008434:	4a10      	ldr	r2, [pc, #64]	; (8008478 <prvCheckForValidListAndQueue+0x64>)
 8008436:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008438:	4b12      	ldr	r3, [pc, #72]	; (8008484 <prvCheckForValidListAndQueue+0x70>)
 800843a:	4a10      	ldr	r2, [pc, #64]	; (800847c <prvCheckForValidListAndQueue+0x68>)
 800843c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800843e:	2300      	movs	r3, #0
 8008440:	9300      	str	r3, [sp, #0]
 8008442:	4b11      	ldr	r3, [pc, #68]	; (8008488 <prvCheckForValidListAndQueue+0x74>)
 8008444:	4a11      	ldr	r2, [pc, #68]	; (800848c <prvCheckForValidListAndQueue+0x78>)
 8008446:	210c      	movs	r1, #12
 8008448:	200a      	movs	r0, #10
 800844a:	f7fe f913 	bl	8006674 <xQueueGenericCreateStatic>
 800844e:	4603      	mov	r3, r0
 8008450:	4a08      	ldr	r2, [pc, #32]	; (8008474 <prvCheckForValidListAndQueue+0x60>)
 8008452:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008454:	4b07      	ldr	r3, [pc, #28]	; (8008474 <prvCheckForValidListAndQueue+0x60>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d005      	beq.n	8008468 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800845c:	4b05      	ldr	r3, [pc, #20]	; (8008474 <prvCheckForValidListAndQueue+0x60>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	490b      	ldr	r1, [pc, #44]	; (8008490 <prvCheckForValidListAndQueue+0x7c>)
 8008462:	4618      	mov	r0, r3
 8008464:	f7fe fd44 	bl	8006ef0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008468:	f000 f954 	bl	8008714 <vPortExitCritical>
}
 800846c:	bf00      	nop
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	20004504 	.word	0x20004504
 8008478:	200044d4 	.word	0x200044d4
 800847c:	200044e8 	.word	0x200044e8
 8008480:	200044fc 	.word	0x200044fc
 8008484:	20004500 	.word	0x20004500
 8008488:	20004588 	.word	0x20004588
 800848c:	20004510 	.word	0x20004510
 8008490:	08009df4 	.word	0x08009df4

08008494 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	3b04      	subs	r3, #4
 80084a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80084ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	3b04      	subs	r3, #4
 80084b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	f023 0201 	bic.w	r2, r3, #1
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	3b04      	subs	r3, #4
 80084c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084c4:	4a0c      	ldr	r2, [pc, #48]	; (80084f8 <pxPortInitialiseStack+0x64>)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	3b14      	subs	r3, #20
 80084ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	3b04      	subs	r3, #4
 80084da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f06f 0202 	mvn.w	r2, #2
 80084e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	3b20      	subs	r3, #32
 80084e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084ea:	68fb      	ldr	r3, [r7, #12]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3714      	adds	r7, #20
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr
 80084f8:	080084fd 	.word	0x080084fd

080084fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008502:	2300      	movs	r3, #0
 8008504:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008506:	4b14      	ldr	r3, [pc, #80]	; (8008558 <prvTaskExitError+0x5c>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850e:	d00c      	beq.n	800852a <prvTaskExitError+0x2e>
	__asm volatile
 8008510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008514:	b672      	cpsid	i
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	b662      	cpsie	i
 8008524:	60fb      	str	r3, [r7, #12]
}
 8008526:	bf00      	nop
 8008528:	e7fe      	b.n	8008528 <prvTaskExitError+0x2c>
	__asm volatile
 800852a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852e:	b672      	cpsid	i
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	b662      	cpsie	i
 800853e:	60bb      	str	r3, [r7, #8]
}
 8008540:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008542:	bf00      	nop
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d0fc      	beq.n	8008544 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800854a:	bf00      	nop
 800854c:	bf00      	nop
 800854e:	3714      	adds	r7, #20
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr
 8008558:	2000000c 	.word	0x2000000c
 800855c:	00000000 	.word	0x00000000

08008560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008560:	4b07      	ldr	r3, [pc, #28]	; (8008580 <pxCurrentTCBConst2>)
 8008562:	6819      	ldr	r1, [r3, #0]
 8008564:	6808      	ldr	r0, [r1, #0]
 8008566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800856a:	f380 8809 	msr	PSP, r0
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f04f 0000 	mov.w	r0, #0
 8008576:	f380 8811 	msr	BASEPRI, r0
 800857a:	4770      	bx	lr
 800857c:	f3af 8000 	nop.w

08008580 <pxCurrentTCBConst2>:
 8008580:	200043a8 	.word	0x200043a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008584:	bf00      	nop
 8008586:	bf00      	nop

08008588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008588:	4808      	ldr	r0, [pc, #32]	; (80085ac <prvPortStartFirstTask+0x24>)
 800858a:	6800      	ldr	r0, [r0, #0]
 800858c:	6800      	ldr	r0, [r0, #0]
 800858e:	f380 8808 	msr	MSP, r0
 8008592:	f04f 0000 	mov.w	r0, #0
 8008596:	f380 8814 	msr	CONTROL, r0
 800859a:	b662      	cpsie	i
 800859c:	b661      	cpsie	f
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	df00      	svc	0
 80085a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80085aa:	bf00      	nop
 80085ac:	e000ed08 	.word	0xe000ed08

080085b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085b6:	4b37      	ldr	r3, [pc, #220]	; (8008694 <xPortStartScheduler+0xe4>)
 80085b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	22ff      	movs	r2, #255	; 0xff
 80085c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085d0:	78fb      	ldrb	r3, [r7, #3]
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80085d8:	b2da      	uxtb	r2, r3
 80085da:	4b2f      	ldr	r3, [pc, #188]	; (8008698 <xPortStartScheduler+0xe8>)
 80085dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085de:	4b2f      	ldr	r3, [pc, #188]	; (800869c <xPortStartScheduler+0xec>)
 80085e0:	2207      	movs	r2, #7
 80085e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085e4:	e009      	b.n	80085fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80085e6:	4b2d      	ldr	r3, [pc, #180]	; (800869c <xPortStartScheduler+0xec>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	4a2b      	ldr	r2, [pc, #172]	; (800869c <xPortStartScheduler+0xec>)
 80085ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085f0:	78fb      	ldrb	r3, [r7, #3]
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	005b      	lsls	r3, r3, #1
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085fa:	78fb      	ldrb	r3, [r7, #3]
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008602:	2b80      	cmp	r3, #128	; 0x80
 8008604:	d0ef      	beq.n	80085e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008606:	4b25      	ldr	r3, [pc, #148]	; (800869c <xPortStartScheduler+0xec>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f1c3 0307 	rsb	r3, r3, #7
 800860e:	2b04      	cmp	r3, #4
 8008610:	d00c      	beq.n	800862c <xPortStartScheduler+0x7c>
	__asm volatile
 8008612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008616:	b672      	cpsid	i
 8008618:	f383 8811 	msr	BASEPRI, r3
 800861c:	f3bf 8f6f 	isb	sy
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	b662      	cpsie	i
 8008626:	60bb      	str	r3, [r7, #8]
}
 8008628:	bf00      	nop
 800862a:	e7fe      	b.n	800862a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800862c:	4b1b      	ldr	r3, [pc, #108]	; (800869c <xPortStartScheduler+0xec>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	021b      	lsls	r3, r3, #8
 8008632:	4a1a      	ldr	r2, [pc, #104]	; (800869c <xPortStartScheduler+0xec>)
 8008634:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008636:	4b19      	ldr	r3, [pc, #100]	; (800869c <xPortStartScheduler+0xec>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800863e:	4a17      	ldr	r2, [pc, #92]	; (800869c <xPortStartScheduler+0xec>)
 8008640:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	b2da      	uxtb	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800864a:	4b15      	ldr	r3, [pc, #84]	; (80086a0 <xPortStartScheduler+0xf0>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a14      	ldr	r2, [pc, #80]	; (80086a0 <xPortStartScheduler+0xf0>)
 8008650:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008654:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008656:	4b12      	ldr	r3, [pc, #72]	; (80086a0 <xPortStartScheduler+0xf0>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a11      	ldr	r2, [pc, #68]	; (80086a0 <xPortStartScheduler+0xf0>)
 800865c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008660:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008662:	f000 f8dd 	bl	8008820 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008666:	4b0f      	ldr	r3, [pc, #60]	; (80086a4 <xPortStartScheduler+0xf4>)
 8008668:	2200      	movs	r2, #0
 800866a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800866c:	f000 f8fc 	bl	8008868 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008670:	4b0d      	ldr	r3, [pc, #52]	; (80086a8 <xPortStartScheduler+0xf8>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a0c      	ldr	r2, [pc, #48]	; (80086a8 <xPortStartScheduler+0xf8>)
 8008676:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800867a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800867c:	f7ff ff84 	bl	8008588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008680:	f7ff f846 	bl	8007710 <vTaskSwitchContext>
	prvTaskExitError();
 8008684:	f7ff ff3a 	bl	80084fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	e000e400 	.word	0xe000e400
 8008698:	200045d0 	.word	0x200045d0
 800869c:	200045d4 	.word	0x200045d4
 80086a0:	e000ed20 	.word	0xe000ed20
 80086a4:	2000000c 	.word	0x2000000c
 80086a8:	e000ef34 	.word	0xe000ef34

080086ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
	__asm volatile
 80086b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b6:	b672      	cpsid	i
 80086b8:	f383 8811 	msr	BASEPRI, r3
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f3bf 8f4f 	dsb	sy
 80086c4:	b662      	cpsie	i
 80086c6:	607b      	str	r3, [r7, #4]
}
 80086c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086ca:	4b10      	ldr	r3, [pc, #64]	; (800870c <vPortEnterCritical+0x60>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	3301      	adds	r3, #1
 80086d0:	4a0e      	ldr	r2, [pc, #56]	; (800870c <vPortEnterCritical+0x60>)
 80086d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086d4:	4b0d      	ldr	r3, [pc, #52]	; (800870c <vPortEnterCritical+0x60>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d111      	bne.n	8008700 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086dc:	4b0c      	ldr	r3, [pc, #48]	; (8008710 <vPortEnterCritical+0x64>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00c      	beq.n	8008700 <vPortEnterCritical+0x54>
	__asm volatile
 80086e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ea:	b672      	cpsid	i
 80086ec:	f383 8811 	msr	BASEPRI, r3
 80086f0:	f3bf 8f6f 	isb	sy
 80086f4:	f3bf 8f4f 	dsb	sy
 80086f8:	b662      	cpsie	i
 80086fa:	603b      	str	r3, [r7, #0]
}
 80086fc:	bf00      	nop
 80086fe:	e7fe      	b.n	80086fe <vPortEnterCritical+0x52>
	}
}
 8008700:	bf00      	nop
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr
 800870c:	2000000c 	.word	0x2000000c
 8008710:	e000ed04 	.word	0xe000ed04

08008714 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800871a:	4b13      	ldr	r3, [pc, #76]	; (8008768 <vPortExitCritical+0x54>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10c      	bne.n	800873c <vPortExitCritical+0x28>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008726:	b672      	cpsid	i
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	b662      	cpsie	i
 8008736:	607b      	str	r3, [r7, #4]
}
 8008738:	bf00      	nop
 800873a:	e7fe      	b.n	800873a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800873c:	4b0a      	ldr	r3, [pc, #40]	; (8008768 <vPortExitCritical+0x54>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3b01      	subs	r3, #1
 8008742:	4a09      	ldr	r2, [pc, #36]	; (8008768 <vPortExitCritical+0x54>)
 8008744:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008746:	4b08      	ldr	r3, [pc, #32]	; (8008768 <vPortExitCritical+0x54>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d105      	bne.n	800875a <vPortExitCritical+0x46>
 800874e:	2300      	movs	r3, #0
 8008750:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	f383 8811 	msr	BASEPRI, r3
}
 8008758:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800875a:	bf00      	nop
 800875c:	370c      	adds	r7, #12
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	2000000c 	.word	0x2000000c
 800876c:	00000000 	.word	0x00000000

08008770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008770:	f3ef 8009 	mrs	r0, PSP
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	4b15      	ldr	r3, [pc, #84]	; (80087d0 <pxCurrentTCBConst>)
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	f01e 0f10 	tst.w	lr, #16
 8008780:	bf08      	it	eq
 8008782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878a:	6010      	str	r0, [r2, #0]
 800878c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008790:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008794:	b672      	cpsid	i
 8008796:	f380 8811 	msr	BASEPRI, r0
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	b662      	cpsie	i
 80087a4:	f7fe ffb4 	bl	8007710 <vTaskSwitchContext>
 80087a8:	f04f 0000 	mov.w	r0, #0
 80087ac:	f380 8811 	msr	BASEPRI, r0
 80087b0:	bc09      	pop	{r0, r3}
 80087b2:	6819      	ldr	r1, [r3, #0]
 80087b4:	6808      	ldr	r0, [r1, #0]
 80087b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ba:	f01e 0f10 	tst.w	lr, #16
 80087be:	bf08      	it	eq
 80087c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087c4:	f380 8809 	msr	PSP, r0
 80087c8:	f3bf 8f6f 	isb	sy
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop

080087d0 <pxCurrentTCBConst>:
 80087d0:	200043a8 	.word	0x200043a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087d4:	bf00      	nop
 80087d6:	bf00      	nop

080087d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
	__asm volatile
 80087de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e2:	b672      	cpsid	i
 80087e4:	f383 8811 	msr	BASEPRI, r3
 80087e8:	f3bf 8f6f 	isb	sy
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	b662      	cpsie	i
 80087f2:	607b      	str	r3, [r7, #4]
}
 80087f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087f6:	f7fe fed1 	bl	800759c <xTaskIncrementTick>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d003      	beq.n	8008808 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008800:	4b06      	ldr	r3, [pc, #24]	; (800881c <xPortSysTickHandler+0x44>)
 8008802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008806:	601a      	str	r2, [r3, #0]
 8008808:	2300      	movs	r3, #0
 800880a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	f383 8811 	msr	BASEPRI, r3
}
 8008812:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008814:	bf00      	nop
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	e000ed04 	.word	0xe000ed04

08008820 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008820:	b480      	push	{r7}
 8008822:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008824:	4b0b      	ldr	r3, [pc, #44]	; (8008854 <vPortSetupTimerInterrupt+0x34>)
 8008826:	2200      	movs	r2, #0
 8008828:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800882a:	4b0b      	ldr	r3, [pc, #44]	; (8008858 <vPortSetupTimerInterrupt+0x38>)
 800882c:	2200      	movs	r2, #0
 800882e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008830:	4b0a      	ldr	r3, [pc, #40]	; (800885c <vPortSetupTimerInterrupt+0x3c>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a0a      	ldr	r2, [pc, #40]	; (8008860 <vPortSetupTimerInterrupt+0x40>)
 8008836:	fba2 2303 	umull	r2, r3, r2, r3
 800883a:	099b      	lsrs	r3, r3, #6
 800883c:	4a09      	ldr	r2, [pc, #36]	; (8008864 <vPortSetupTimerInterrupt+0x44>)
 800883e:	3b01      	subs	r3, #1
 8008840:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008842:	4b04      	ldr	r3, [pc, #16]	; (8008854 <vPortSetupTimerInterrupt+0x34>)
 8008844:	2207      	movs	r2, #7
 8008846:	601a      	str	r2, [r3, #0]
}
 8008848:	bf00      	nop
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	e000e010 	.word	0xe000e010
 8008858:	e000e018 	.word	0xe000e018
 800885c:	20000000 	.word	0x20000000
 8008860:	10624dd3 	.word	0x10624dd3
 8008864:	e000e014 	.word	0xe000e014

08008868 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008868:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008878 <vPortEnableVFP+0x10>
 800886c:	6801      	ldr	r1, [r0, #0]
 800886e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008872:	6001      	str	r1, [r0, #0]
 8008874:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008876:	bf00      	nop
 8008878:	e000ed88 	.word	0xe000ed88

0800887c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008882:	f3ef 8305 	mrs	r3, IPSR
 8008886:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2b0f      	cmp	r3, #15
 800888c:	d916      	bls.n	80088bc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800888e:	4a19      	ldr	r2, [pc, #100]	; (80088f4 <vPortValidateInterruptPriority+0x78>)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4413      	add	r3, r2
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008898:	4b17      	ldr	r3, [pc, #92]	; (80088f8 <vPortValidateInterruptPriority+0x7c>)
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	7afa      	ldrb	r2, [r7, #11]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d20c      	bcs.n	80088bc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80088a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a6:	b672      	cpsid	i
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	b662      	cpsie	i
 80088b6:	607b      	str	r3, [r7, #4]
}
 80088b8:	bf00      	nop
 80088ba:	e7fe      	b.n	80088ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80088bc:	4b0f      	ldr	r3, [pc, #60]	; (80088fc <vPortValidateInterruptPriority+0x80>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80088c4:	4b0e      	ldr	r3, [pc, #56]	; (8008900 <vPortValidateInterruptPriority+0x84>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d90c      	bls.n	80088e6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80088cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d0:	b672      	cpsid	i
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	b662      	cpsie	i
 80088e0:	603b      	str	r3, [r7, #0]
}
 80088e2:	bf00      	nop
 80088e4:	e7fe      	b.n	80088e4 <vPortValidateInterruptPriority+0x68>
	}
 80088e6:	bf00      	nop
 80088e8:	3714      	adds	r7, #20
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	e000e3f0 	.word	0xe000e3f0
 80088f8:	200045d0 	.word	0x200045d0
 80088fc:	e000ed0c 	.word	0xe000ed0c
 8008900:	200045d4 	.word	0x200045d4

08008904 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b08a      	sub	sp, #40	; 0x28
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800890c:	2300      	movs	r3, #0
 800890e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008910:	f7fe fd88 	bl	8007424 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008914:	4b5b      	ldr	r3, [pc, #364]	; (8008a84 <pvPortMalloc+0x180>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d101      	bne.n	8008920 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800891c:	f000 f91a 	bl	8008b54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008920:	4b59      	ldr	r3, [pc, #356]	; (8008a88 <pvPortMalloc+0x184>)
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4013      	ands	r3, r2
 8008928:	2b00      	cmp	r3, #0
 800892a:	f040 8092 	bne.w	8008a52 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d01f      	beq.n	8008974 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008934:	2208      	movs	r2, #8
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4413      	add	r3, r2
 800893a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f003 0307 	and.w	r3, r3, #7
 8008942:	2b00      	cmp	r3, #0
 8008944:	d016      	beq.n	8008974 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f023 0307 	bic.w	r3, r3, #7
 800894c:	3308      	adds	r3, #8
 800894e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f003 0307 	and.w	r3, r3, #7
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00c      	beq.n	8008974 <pvPortMalloc+0x70>
	__asm volatile
 800895a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895e:	b672      	cpsid	i
 8008960:	f383 8811 	msr	BASEPRI, r3
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	b662      	cpsie	i
 800896e:	617b      	str	r3, [r7, #20]
}
 8008970:	bf00      	nop
 8008972:	e7fe      	b.n	8008972 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d06b      	beq.n	8008a52 <pvPortMalloc+0x14e>
 800897a:	4b44      	ldr	r3, [pc, #272]	; (8008a8c <pvPortMalloc+0x188>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	429a      	cmp	r2, r3
 8008982:	d866      	bhi.n	8008a52 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008984:	4b42      	ldr	r3, [pc, #264]	; (8008a90 <pvPortMalloc+0x18c>)
 8008986:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008988:	4b41      	ldr	r3, [pc, #260]	; (8008a90 <pvPortMalloc+0x18c>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800898e:	e004      	b.n	800899a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008992:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d903      	bls.n	80089ac <pvPortMalloc+0xa8>
 80089a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1f1      	bne.n	8008990 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089ac:	4b35      	ldr	r3, [pc, #212]	; (8008a84 <pvPortMalloc+0x180>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d04d      	beq.n	8008a52 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089b6:	6a3b      	ldr	r3, [r7, #32]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2208      	movs	r2, #8
 80089bc:	4413      	add	r3, r2
 80089be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	6a3b      	ldr	r3, [r7, #32]
 80089c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	1ad2      	subs	r2, r2, r3
 80089d0:	2308      	movs	r3, #8
 80089d2:	005b      	lsls	r3, r3, #1
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d921      	bls.n	8008a1c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4413      	add	r3, r2
 80089de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	f003 0307 	and.w	r3, r3, #7
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00c      	beq.n	8008a04 <pvPortMalloc+0x100>
	__asm volatile
 80089ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ee:	b672      	cpsid	i
 80089f0:	f383 8811 	msr	BASEPRI, r3
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	b662      	cpsie	i
 80089fe:	613b      	str	r3, [r7, #16]
}
 8008a00:	bf00      	nop
 8008a02:	e7fe      	b.n	8008a02 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	685a      	ldr	r2, [r3, #4]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	1ad2      	subs	r2, r2, r3
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a16:	69b8      	ldr	r0, [r7, #24]
 8008a18:	f000 f8fe 	bl	8008c18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a1c:	4b1b      	ldr	r3, [pc, #108]	; (8008a8c <pvPortMalloc+0x188>)
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	4a19      	ldr	r2, [pc, #100]	; (8008a8c <pvPortMalloc+0x188>)
 8008a28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a2a:	4b18      	ldr	r3, [pc, #96]	; (8008a8c <pvPortMalloc+0x188>)
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	4b19      	ldr	r3, [pc, #100]	; (8008a94 <pvPortMalloc+0x190>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d203      	bcs.n	8008a3e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a36:	4b15      	ldr	r3, [pc, #84]	; (8008a8c <pvPortMalloc+0x188>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a16      	ldr	r2, [pc, #88]	; (8008a94 <pvPortMalloc+0x190>)
 8008a3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a40:	685a      	ldr	r2, [r3, #4]
 8008a42:	4b11      	ldr	r3, [pc, #68]	; (8008a88 <pvPortMalloc+0x184>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	431a      	orrs	r2, r3
 8008a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	2200      	movs	r2, #0
 8008a50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a52:	f7fe fcf5 	bl	8007440 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	f003 0307 	and.w	r3, r3, #7
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00c      	beq.n	8008a7a <pvPortMalloc+0x176>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a64:	b672      	cpsid	i
 8008a66:	f383 8811 	msr	BASEPRI, r3
 8008a6a:	f3bf 8f6f 	isb	sy
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	b662      	cpsie	i
 8008a74:	60fb      	str	r3, [r7, #12]
}
 8008a76:	bf00      	nop
 8008a78:	e7fe      	b.n	8008a78 <pvPortMalloc+0x174>
	return pvReturn;
 8008a7a:	69fb      	ldr	r3, [r7, #28]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3728      	adds	r7, #40	; 0x28
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	200081e0 	.word	0x200081e0
 8008a88:	200081ec 	.word	0x200081ec
 8008a8c:	200081e4 	.word	0x200081e4
 8008a90:	200081d8 	.word	0x200081d8
 8008a94:	200081e8 	.word	0x200081e8

08008a98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b086      	sub	sp, #24
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d04c      	beq.n	8008b44 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008aaa:	2308      	movs	r3, #8
 8008aac:	425b      	negs	r3, r3
 8008aae:	697a      	ldr	r2, [r7, #20]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	4b23      	ldr	r3, [pc, #140]	; (8008b4c <vPortFree+0xb4>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10c      	bne.n	8008ae0 <vPortFree+0x48>
	__asm volatile
 8008ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aca:	b672      	cpsid	i
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	b662      	cpsie	i
 8008ada:	60fb      	str	r3, [r7, #12]
}
 8008adc:	bf00      	nop
 8008ade:	e7fe      	b.n	8008ade <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00c      	beq.n	8008b02 <vPortFree+0x6a>
	__asm volatile
 8008ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aec:	b672      	cpsid	i
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	b662      	cpsie	i
 8008afc:	60bb      	str	r3, [r7, #8]
}
 8008afe:	bf00      	nop
 8008b00:	e7fe      	b.n	8008b00 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	685a      	ldr	r2, [r3, #4]
 8008b06:	4b11      	ldr	r3, [pc, #68]	; (8008b4c <vPortFree+0xb4>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d019      	beq.n	8008b44 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d115      	bne.n	8008b44 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	685a      	ldr	r2, [r3, #4]
 8008b1c:	4b0b      	ldr	r3, [pc, #44]	; (8008b4c <vPortFree+0xb4>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	43db      	mvns	r3, r3
 8008b22:	401a      	ands	r2, r3
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b28:	f7fe fc7c 	bl	8007424 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	685a      	ldr	r2, [r3, #4]
 8008b30:	4b07      	ldr	r3, [pc, #28]	; (8008b50 <vPortFree+0xb8>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4413      	add	r3, r2
 8008b36:	4a06      	ldr	r2, [pc, #24]	; (8008b50 <vPortFree+0xb8>)
 8008b38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b3a:	6938      	ldr	r0, [r7, #16]
 8008b3c:	f000 f86c 	bl	8008c18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008b40:	f7fe fc7e 	bl	8007440 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b44:	bf00      	nop
 8008b46:	3718      	adds	r7, #24
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	200081ec 	.word	0x200081ec
 8008b50:	200081e4 	.word	0x200081e4

08008b54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b54:	b480      	push	{r7}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008b5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b60:	4b27      	ldr	r3, [pc, #156]	; (8008c00 <prvHeapInit+0xac>)
 8008b62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f003 0307 	and.w	r3, r3, #7
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00c      	beq.n	8008b88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	3307      	adds	r3, #7
 8008b72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f023 0307 	bic.w	r3, r3, #7
 8008b7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	4a1f      	ldr	r2, [pc, #124]	; (8008c00 <prvHeapInit+0xac>)
 8008b84:	4413      	add	r3, r2
 8008b86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b8c:	4a1d      	ldr	r2, [pc, #116]	; (8008c04 <prvHeapInit+0xb0>)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b92:	4b1c      	ldr	r3, [pc, #112]	; (8008c04 <prvHeapInit+0xb0>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ba0:	2208      	movs	r2, #8
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	1a9b      	subs	r3, r3, r2
 8008ba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f023 0307 	bic.w	r3, r3, #7
 8008bae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	4a15      	ldr	r2, [pc, #84]	; (8008c08 <prvHeapInit+0xb4>)
 8008bb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008bb6:	4b14      	ldr	r3, [pc, #80]	; (8008c08 <prvHeapInit+0xb4>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008bbe:	4b12      	ldr	r3, [pc, #72]	; (8008c08 <prvHeapInit+0xb4>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	1ad2      	subs	r2, r2, r3
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008bd4:	4b0c      	ldr	r3, [pc, #48]	; (8008c08 <prvHeapInit+0xb4>)
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	4a0a      	ldr	r2, [pc, #40]	; (8008c0c <prvHeapInit+0xb8>)
 8008be2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	4a09      	ldr	r2, [pc, #36]	; (8008c10 <prvHeapInit+0xbc>)
 8008bea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bec:	4b09      	ldr	r3, [pc, #36]	; (8008c14 <prvHeapInit+0xc0>)
 8008bee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008bf2:	601a      	str	r2, [r3, #0]
}
 8008bf4:	bf00      	nop
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	200045d8 	.word	0x200045d8
 8008c04:	200081d8 	.word	0x200081d8
 8008c08:	200081e0 	.word	0x200081e0
 8008c0c:	200081e8 	.word	0x200081e8
 8008c10:	200081e4 	.word	0x200081e4
 8008c14:	200081ec 	.word	0x200081ec

08008c18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c20:	4b28      	ldr	r3, [pc, #160]	; (8008cc4 <prvInsertBlockIntoFreeList+0xac>)
 8008c22:	60fb      	str	r3, [r7, #12]
 8008c24:	e002      	b.n	8008c2c <prvInsertBlockIntoFreeList+0x14>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	60fb      	str	r3, [r7, #12]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d8f7      	bhi.n	8008c26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	68ba      	ldr	r2, [r7, #8]
 8008c40:	4413      	add	r3, r2
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d108      	bne.n	8008c5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	685a      	ldr	r2, [r3, #4]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	441a      	add	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	441a      	add	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d118      	bne.n	8008ca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	4b15      	ldr	r3, [pc, #84]	; (8008cc8 <prvInsertBlockIntoFreeList+0xb0>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d00d      	beq.n	8008c96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	685a      	ldr	r2, [r3, #4]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	441a      	add	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	601a      	str	r2, [r3, #0]
 8008c94:	e008      	b.n	8008ca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c96:	4b0c      	ldr	r3, [pc, #48]	; (8008cc8 <prvInsertBlockIntoFreeList+0xb0>)
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	601a      	str	r2, [r3, #0]
 8008c9e:	e003      	b.n	8008ca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d002      	beq.n	8008cb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cb6:	bf00      	nop
 8008cb8:	3714      	adds	r7, #20
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	200081d8 	.word	0x200081d8
 8008cc8:	200081e0 	.word	0x200081e0

08008ccc <__errno>:
 8008ccc:	4b01      	ldr	r3, [pc, #4]	; (8008cd4 <__errno+0x8>)
 8008cce:	6818      	ldr	r0, [r3, #0]
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	20000010 	.word	0x20000010

08008cd8 <__libc_init_array>:
 8008cd8:	b570      	push	{r4, r5, r6, lr}
 8008cda:	4d0d      	ldr	r5, [pc, #52]	; (8008d10 <__libc_init_array+0x38>)
 8008cdc:	4c0d      	ldr	r4, [pc, #52]	; (8008d14 <__libc_init_array+0x3c>)
 8008cde:	1b64      	subs	r4, r4, r5
 8008ce0:	10a4      	asrs	r4, r4, #2
 8008ce2:	2600      	movs	r6, #0
 8008ce4:	42a6      	cmp	r6, r4
 8008ce6:	d109      	bne.n	8008cfc <__libc_init_array+0x24>
 8008ce8:	4d0b      	ldr	r5, [pc, #44]	; (8008d18 <__libc_init_array+0x40>)
 8008cea:	4c0c      	ldr	r4, [pc, #48]	; (8008d1c <__libc_init_array+0x44>)
 8008cec:	f000 ffbc 	bl	8009c68 <_init>
 8008cf0:	1b64      	subs	r4, r4, r5
 8008cf2:	10a4      	asrs	r4, r4, #2
 8008cf4:	2600      	movs	r6, #0
 8008cf6:	42a6      	cmp	r6, r4
 8008cf8:	d105      	bne.n	8008d06 <__libc_init_array+0x2e>
 8008cfa:	bd70      	pop	{r4, r5, r6, pc}
 8008cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d00:	4798      	blx	r3
 8008d02:	3601      	adds	r6, #1
 8008d04:	e7ee      	b.n	8008ce4 <__libc_init_array+0xc>
 8008d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d0a:	4798      	blx	r3
 8008d0c:	3601      	adds	r6, #1
 8008d0e:	e7f2      	b.n	8008cf6 <__libc_init_array+0x1e>
 8008d10:	08009ebc 	.word	0x08009ebc
 8008d14:	08009ebc 	.word	0x08009ebc
 8008d18:	08009ebc 	.word	0x08009ebc
 8008d1c:	08009ec0 	.word	0x08009ec0

08008d20 <memcpy>:
 8008d20:	440a      	add	r2, r1
 8008d22:	4291      	cmp	r1, r2
 8008d24:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d28:	d100      	bne.n	8008d2c <memcpy+0xc>
 8008d2a:	4770      	bx	lr
 8008d2c:	b510      	push	{r4, lr}
 8008d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d36:	4291      	cmp	r1, r2
 8008d38:	d1f9      	bne.n	8008d2e <memcpy+0xe>
 8008d3a:	bd10      	pop	{r4, pc}

08008d3c <memset>:
 8008d3c:	4402      	add	r2, r0
 8008d3e:	4603      	mov	r3, r0
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d100      	bne.n	8008d46 <memset+0xa>
 8008d44:	4770      	bx	lr
 8008d46:	f803 1b01 	strb.w	r1, [r3], #1
 8008d4a:	e7f9      	b.n	8008d40 <memset+0x4>

08008d4c <iprintf>:
 8008d4c:	b40f      	push	{r0, r1, r2, r3}
 8008d4e:	4b0a      	ldr	r3, [pc, #40]	; (8008d78 <iprintf+0x2c>)
 8008d50:	b513      	push	{r0, r1, r4, lr}
 8008d52:	681c      	ldr	r4, [r3, #0]
 8008d54:	b124      	cbz	r4, 8008d60 <iprintf+0x14>
 8008d56:	69a3      	ldr	r3, [r4, #24]
 8008d58:	b913      	cbnz	r3, 8008d60 <iprintf+0x14>
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f000 f9e8 	bl	8009130 <__sinit>
 8008d60:	ab05      	add	r3, sp, #20
 8008d62:	9a04      	ldr	r2, [sp, #16]
 8008d64:	68a1      	ldr	r1, [r4, #8]
 8008d66:	9301      	str	r3, [sp, #4]
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f000 fbf1 	bl	8009550 <_vfiprintf_r>
 8008d6e:	b002      	add	sp, #8
 8008d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d74:	b004      	add	sp, #16
 8008d76:	4770      	bx	lr
 8008d78:	20000010 	.word	0x20000010

08008d7c <__swbuf_r>:
 8008d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7e:	460e      	mov	r6, r1
 8008d80:	4614      	mov	r4, r2
 8008d82:	4605      	mov	r5, r0
 8008d84:	b118      	cbz	r0, 8008d8e <__swbuf_r+0x12>
 8008d86:	6983      	ldr	r3, [r0, #24]
 8008d88:	b90b      	cbnz	r3, 8008d8e <__swbuf_r+0x12>
 8008d8a:	f000 f9d1 	bl	8009130 <__sinit>
 8008d8e:	4b21      	ldr	r3, [pc, #132]	; (8008e14 <__swbuf_r+0x98>)
 8008d90:	429c      	cmp	r4, r3
 8008d92:	d12b      	bne.n	8008dec <__swbuf_r+0x70>
 8008d94:	686c      	ldr	r4, [r5, #4]
 8008d96:	69a3      	ldr	r3, [r4, #24]
 8008d98:	60a3      	str	r3, [r4, #8]
 8008d9a:	89a3      	ldrh	r3, [r4, #12]
 8008d9c:	071a      	lsls	r2, r3, #28
 8008d9e:	d52f      	bpl.n	8008e00 <__swbuf_r+0x84>
 8008da0:	6923      	ldr	r3, [r4, #16]
 8008da2:	b36b      	cbz	r3, 8008e00 <__swbuf_r+0x84>
 8008da4:	6923      	ldr	r3, [r4, #16]
 8008da6:	6820      	ldr	r0, [r4, #0]
 8008da8:	1ac0      	subs	r0, r0, r3
 8008daa:	6963      	ldr	r3, [r4, #20]
 8008dac:	b2f6      	uxtb	r6, r6
 8008dae:	4283      	cmp	r3, r0
 8008db0:	4637      	mov	r7, r6
 8008db2:	dc04      	bgt.n	8008dbe <__swbuf_r+0x42>
 8008db4:	4621      	mov	r1, r4
 8008db6:	4628      	mov	r0, r5
 8008db8:	f000 f926 	bl	8009008 <_fflush_r>
 8008dbc:	bb30      	cbnz	r0, 8008e0c <__swbuf_r+0x90>
 8008dbe:	68a3      	ldr	r3, [r4, #8]
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	60a3      	str	r3, [r4, #8]
 8008dc4:	6823      	ldr	r3, [r4, #0]
 8008dc6:	1c5a      	adds	r2, r3, #1
 8008dc8:	6022      	str	r2, [r4, #0]
 8008dca:	701e      	strb	r6, [r3, #0]
 8008dcc:	6963      	ldr	r3, [r4, #20]
 8008dce:	3001      	adds	r0, #1
 8008dd0:	4283      	cmp	r3, r0
 8008dd2:	d004      	beq.n	8008dde <__swbuf_r+0x62>
 8008dd4:	89a3      	ldrh	r3, [r4, #12]
 8008dd6:	07db      	lsls	r3, r3, #31
 8008dd8:	d506      	bpl.n	8008de8 <__swbuf_r+0x6c>
 8008dda:	2e0a      	cmp	r6, #10
 8008ddc:	d104      	bne.n	8008de8 <__swbuf_r+0x6c>
 8008dde:	4621      	mov	r1, r4
 8008de0:	4628      	mov	r0, r5
 8008de2:	f000 f911 	bl	8009008 <_fflush_r>
 8008de6:	b988      	cbnz	r0, 8008e0c <__swbuf_r+0x90>
 8008de8:	4638      	mov	r0, r7
 8008dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dec:	4b0a      	ldr	r3, [pc, #40]	; (8008e18 <__swbuf_r+0x9c>)
 8008dee:	429c      	cmp	r4, r3
 8008df0:	d101      	bne.n	8008df6 <__swbuf_r+0x7a>
 8008df2:	68ac      	ldr	r4, [r5, #8]
 8008df4:	e7cf      	b.n	8008d96 <__swbuf_r+0x1a>
 8008df6:	4b09      	ldr	r3, [pc, #36]	; (8008e1c <__swbuf_r+0xa0>)
 8008df8:	429c      	cmp	r4, r3
 8008dfa:	bf08      	it	eq
 8008dfc:	68ec      	ldreq	r4, [r5, #12]
 8008dfe:	e7ca      	b.n	8008d96 <__swbuf_r+0x1a>
 8008e00:	4621      	mov	r1, r4
 8008e02:	4628      	mov	r0, r5
 8008e04:	f000 f80c 	bl	8008e20 <__swsetup_r>
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	d0cb      	beq.n	8008da4 <__swbuf_r+0x28>
 8008e0c:	f04f 37ff 	mov.w	r7, #4294967295
 8008e10:	e7ea      	b.n	8008de8 <__swbuf_r+0x6c>
 8008e12:	bf00      	nop
 8008e14:	08009e40 	.word	0x08009e40
 8008e18:	08009e60 	.word	0x08009e60
 8008e1c:	08009e20 	.word	0x08009e20

08008e20 <__swsetup_r>:
 8008e20:	4b32      	ldr	r3, [pc, #200]	; (8008eec <__swsetup_r+0xcc>)
 8008e22:	b570      	push	{r4, r5, r6, lr}
 8008e24:	681d      	ldr	r5, [r3, #0]
 8008e26:	4606      	mov	r6, r0
 8008e28:	460c      	mov	r4, r1
 8008e2a:	b125      	cbz	r5, 8008e36 <__swsetup_r+0x16>
 8008e2c:	69ab      	ldr	r3, [r5, #24]
 8008e2e:	b913      	cbnz	r3, 8008e36 <__swsetup_r+0x16>
 8008e30:	4628      	mov	r0, r5
 8008e32:	f000 f97d 	bl	8009130 <__sinit>
 8008e36:	4b2e      	ldr	r3, [pc, #184]	; (8008ef0 <__swsetup_r+0xd0>)
 8008e38:	429c      	cmp	r4, r3
 8008e3a:	d10f      	bne.n	8008e5c <__swsetup_r+0x3c>
 8008e3c:	686c      	ldr	r4, [r5, #4]
 8008e3e:	89a3      	ldrh	r3, [r4, #12]
 8008e40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e44:	0719      	lsls	r1, r3, #28
 8008e46:	d42c      	bmi.n	8008ea2 <__swsetup_r+0x82>
 8008e48:	06dd      	lsls	r5, r3, #27
 8008e4a:	d411      	bmi.n	8008e70 <__swsetup_r+0x50>
 8008e4c:	2309      	movs	r3, #9
 8008e4e:	6033      	str	r3, [r6, #0]
 8008e50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e54:	81a3      	strh	r3, [r4, #12]
 8008e56:	f04f 30ff 	mov.w	r0, #4294967295
 8008e5a:	e03e      	b.n	8008eda <__swsetup_r+0xba>
 8008e5c:	4b25      	ldr	r3, [pc, #148]	; (8008ef4 <__swsetup_r+0xd4>)
 8008e5e:	429c      	cmp	r4, r3
 8008e60:	d101      	bne.n	8008e66 <__swsetup_r+0x46>
 8008e62:	68ac      	ldr	r4, [r5, #8]
 8008e64:	e7eb      	b.n	8008e3e <__swsetup_r+0x1e>
 8008e66:	4b24      	ldr	r3, [pc, #144]	; (8008ef8 <__swsetup_r+0xd8>)
 8008e68:	429c      	cmp	r4, r3
 8008e6a:	bf08      	it	eq
 8008e6c:	68ec      	ldreq	r4, [r5, #12]
 8008e6e:	e7e6      	b.n	8008e3e <__swsetup_r+0x1e>
 8008e70:	0758      	lsls	r0, r3, #29
 8008e72:	d512      	bpl.n	8008e9a <__swsetup_r+0x7a>
 8008e74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e76:	b141      	cbz	r1, 8008e8a <__swsetup_r+0x6a>
 8008e78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e7c:	4299      	cmp	r1, r3
 8008e7e:	d002      	beq.n	8008e86 <__swsetup_r+0x66>
 8008e80:	4630      	mov	r0, r6
 8008e82:	f000 fa5b 	bl	800933c <_free_r>
 8008e86:	2300      	movs	r3, #0
 8008e88:	6363      	str	r3, [r4, #52]	; 0x34
 8008e8a:	89a3      	ldrh	r3, [r4, #12]
 8008e8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e90:	81a3      	strh	r3, [r4, #12]
 8008e92:	2300      	movs	r3, #0
 8008e94:	6063      	str	r3, [r4, #4]
 8008e96:	6923      	ldr	r3, [r4, #16]
 8008e98:	6023      	str	r3, [r4, #0]
 8008e9a:	89a3      	ldrh	r3, [r4, #12]
 8008e9c:	f043 0308 	orr.w	r3, r3, #8
 8008ea0:	81a3      	strh	r3, [r4, #12]
 8008ea2:	6923      	ldr	r3, [r4, #16]
 8008ea4:	b94b      	cbnz	r3, 8008eba <__swsetup_r+0x9a>
 8008ea6:	89a3      	ldrh	r3, [r4, #12]
 8008ea8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008eb0:	d003      	beq.n	8008eba <__swsetup_r+0x9a>
 8008eb2:	4621      	mov	r1, r4
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	f000 fa01 	bl	80092bc <__smakebuf_r>
 8008eba:	89a0      	ldrh	r0, [r4, #12]
 8008ebc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ec0:	f010 0301 	ands.w	r3, r0, #1
 8008ec4:	d00a      	beq.n	8008edc <__swsetup_r+0xbc>
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	60a3      	str	r3, [r4, #8]
 8008eca:	6963      	ldr	r3, [r4, #20]
 8008ecc:	425b      	negs	r3, r3
 8008ece:	61a3      	str	r3, [r4, #24]
 8008ed0:	6923      	ldr	r3, [r4, #16]
 8008ed2:	b943      	cbnz	r3, 8008ee6 <__swsetup_r+0xc6>
 8008ed4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ed8:	d1ba      	bne.n	8008e50 <__swsetup_r+0x30>
 8008eda:	bd70      	pop	{r4, r5, r6, pc}
 8008edc:	0781      	lsls	r1, r0, #30
 8008ede:	bf58      	it	pl
 8008ee0:	6963      	ldrpl	r3, [r4, #20]
 8008ee2:	60a3      	str	r3, [r4, #8]
 8008ee4:	e7f4      	b.n	8008ed0 <__swsetup_r+0xb0>
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	e7f7      	b.n	8008eda <__swsetup_r+0xba>
 8008eea:	bf00      	nop
 8008eec:	20000010 	.word	0x20000010
 8008ef0:	08009e40 	.word	0x08009e40
 8008ef4:	08009e60 	.word	0x08009e60
 8008ef8:	08009e20 	.word	0x08009e20

08008efc <__sflush_r>:
 8008efc:	898a      	ldrh	r2, [r1, #12]
 8008efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f02:	4605      	mov	r5, r0
 8008f04:	0710      	lsls	r0, r2, #28
 8008f06:	460c      	mov	r4, r1
 8008f08:	d458      	bmi.n	8008fbc <__sflush_r+0xc0>
 8008f0a:	684b      	ldr	r3, [r1, #4]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	dc05      	bgt.n	8008f1c <__sflush_r+0x20>
 8008f10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	dc02      	bgt.n	8008f1c <__sflush_r+0x20>
 8008f16:	2000      	movs	r0, #0
 8008f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f1e:	2e00      	cmp	r6, #0
 8008f20:	d0f9      	beq.n	8008f16 <__sflush_r+0x1a>
 8008f22:	2300      	movs	r3, #0
 8008f24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f28:	682f      	ldr	r7, [r5, #0]
 8008f2a:	602b      	str	r3, [r5, #0]
 8008f2c:	d032      	beq.n	8008f94 <__sflush_r+0x98>
 8008f2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f30:	89a3      	ldrh	r3, [r4, #12]
 8008f32:	075a      	lsls	r2, r3, #29
 8008f34:	d505      	bpl.n	8008f42 <__sflush_r+0x46>
 8008f36:	6863      	ldr	r3, [r4, #4]
 8008f38:	1ac0      	subs	r0, r0, r3
 8008f3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f3c:	b10b      	cbz	r3, 8008f42 <__sflush_r+0x46>
 8008f3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f40:	1ac0      	subs	r0, r0, r3
 8008f42:	2300      	movs	r3, #0
 8008f44:	4602      	mov	r2, r0
 8008f46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f48:	6a21      	ldr	r1, [r4, #32]
 8008f4a:	4628      	mov	r0, r5
 8008f4c:	47b0      	blx	r6
 8008f4e:	1c43      	adds	r3, r0, #1
 8008f50:	89a3      	ldrh	r3, [r4, #12]
 8008f52:	d106      	bne.n	8008f62 <__sflush_r+0x66>
 8008f54:	6829      	ldr	r1, [r5, #0]
 8008f56:	291d      	cmp	r1, #29
 8008f58:	d82c      	bhi.n	8008fb4 <__sflush_r+0xb8>
 8008f5a:	4a2a      	ldr	r2, [pc, #168]	; (8009004 <__sflush_r+0x108>)
 8008f5c:	40ca      	lsrs	r2, r1
 8008f5e:	07d6      	lsls	r6, r2, #31
 8008f60:	d528      	bpl.n	8008fb4 <__sflush_r+0xb8>
 8008f62:	2200      	movs	r2, #0
 8008f64:	6062      	str	r2, [r4, #4]
 8008f66:	04d9      	lsls	r1, r3, #19
 8008f68:	6922      	ldr	r2, [r4, #16]
 8008f6a:	6022      	str	r2, [r4, #0]
 8008f6c:	d504      	bpl.n	8008f78 <__sflush_r+0x7c>
 8008f6e:	1c42      	adds	r2, r0, #1
 8008f70:	d101      	bne.n	8008f76 <__sflush_r+0x7a>
 8008f72:	682b      	ldr	r3, [r5, #0]
 8008f74:	b903      	cbnz	r3, 8008f78 <__sflush_r+0x7c>
 8008f76:	6560      	str	r0, [r4, #84]	; 0x54
 8008f78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f7a:	602f      	str	r7, [r5, #0]
 8008f7c:	2900      	cmp	r1, #0
 8008f7e:	d0ca      	beq.n	8008f16 <__sflush_r+0x1a>
 8008f80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f84:	4299      	cmp	r1, r3
 8008f86:	d002      	beq.n	8008f8e <__sflush_r+0x92>
 8008f88:	4628      	mov	r0, r5
 8008f8a:	f000 f9d7 	bl	800933c <_free_r>
 8008f8e:	2000      	movs	r0, #0
 8008f90:	6360      	str	r0, [r4, #52]	; 0x34
 8008f92:	e7c1      	b.n	8008f18 <__sflush_r+0x1c>
 8008f94:	6a21      	ldr	r1, [r4, #32]
 8008f96:	2301      	movs	r3, #1
 8008f98:	4628      	mov	r0, r5
 8008f9a:	47b0      	blx	r6
 8008f9c:	1c41      	adds	r1, r0, #1
 8008f9e:	d1c7      	bne.n	8008f30 <__sflush_r+0x34>
 8008fa0:	682b      	ldr	r3, [r5, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d0c4      	beq.n	8008f30 <__sflush_r+0x34>
 8008fa6:	2b1d      	cmp	r3, #29
 8008fa8:	d001      	beq.n	8008fae <__sflush_r+0xb2>
 8008faa:	2b16      	cmp	r3, #22
 8008fac:	d101      	bne.n	8008fb2 <__sflush_r+0xb6>
 8008fae:	602f      	str	r7, [r5, #0]
 8008fb0:	e7b1      	b.n	8008f16 <__sflush_r+0x1a>
 8008fb2:	89a3      	ldrh	r3, [r4, #12]
 8008fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fb8:	81a3      	strh	r3, [r4, #12]
 8008fba:	e7ad      	b.n	8008f18 <__sflush_r+0x1c>
 8008fbc:	690f      	ldr	r7, [r1, #16]
 8008fbe:	2f00      	cmp	r7, #0
 8008fc0:	d0a9      	beq.n	8008f16 <__sflush_r+0x1a>
 8008fc2:	0793      	lsls	r3, r2, #30
 8008fc4:	680e      	ldr	r6, [r1, #0]
 8008fc6:	bf08      	it	eq
 8008fc8:	694b      	ldreq	r3, [r1, #20]
 8008fca:	600f      	str	r7, [r1, #0]
 8008fcc:	bf18      	it	ne
 8008fce:	2300      	movne	r3, #0
 8008fd0:	eba6 0807 	sub.w	r8, r6, r7
 8008fd4:	608b      	str	r3, [r1, #8]
 8008fd6:	f1b8 0f00 	cmp.w	r8, #0
 8008fda:	dd9c      	ble.n	8008f16 <__sflush_r+0x1a>
 8008fdc:	6a21      	ldr	r1, [r4, #32]
 8008fde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fe0:	4643      	mov	r3, r8
 8008fe2:	463a      	mov	r2, r7
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	47b0      	blx	r6
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	dc06      	bgt.n	8008ffa <__sflush_r+0xfe>
 8008fec:	89a3      	ldrh	r3, [r4, #12]
 8008fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ff2:	81a3      	strh	r3, [r4, #12]
 8008ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff8:	e78e      	b.n	8008f18 <__sflush_r+0x1c>
 8008ffa:	4407      	add	r7, r0
 8008ffc:	eba8 0800 	sub.w	r8, r8, r0
 8009000:	e7e9      	b.n	8008fd6 <__sflush_r+0xda>
 8009002:	bf00      	nop
 8009004:	20400001 	.word	0x20400001

08009008 <_fflush_r>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	690b      	ldr	r3, [r1, #16]
 800900c:	4605      	mov	r5, r0
 800900e:	460c      	mov	r4, r1
 8009010:	b913      	cbnz	r3, 8009018 <_fflush_r+0x10>
 8009012:	2500      	movs	r5, #0
 8009014:	4628      	mov	r0, r5
 8009016:	bd38      	pop	{r3, r4, r5, pc}
 8009018:	b118      	cbz	r0, 8009022 <_fflush_r+0x1a>
 800901a:	6983      	ldr	r3, [r0, #24]
 800901c:	b90b      	cbnz	r3, 8009022 <_fflush_r+0x1a>
 800901e:	f000 f887 	bl	8009130 <__sinit>
 8009022:	4b14      	ldr	r3, [pc, #80]	; (8009074 <_fflush_r+0x6c>)
 8009024:	429c      	cmp	r4, r3
 8009026:	d11b      	bne.n	8009060 <_fflush_r+0x58>
 8009028:	686c      	ldr	r4, [r5, #4]
 800902a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d0ef      	beq.n	8009012 <_fflush_r+0xa>
 8009032:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009034:	07d0      	lsls	r0, r2, #31
 8009036:	d404      	bmi.n	8009042 <_fflush_r+0x3a>
 8009038:	0599      	lsls	r1, r3, #22
 800903a:	d402      	bmi.n	8009042 <_fflush_r+0x3a>
 800903c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800903e:	f000 f915 	bl	800926c <__retarget_lock_acquire_recursive>
 8009042:	4628      	mov	r0, r5
 8009044:	4621      	mov	r1, r4
 8009046:	f7ff ff59 	bl	8008efc <__sflush_r>
 800904a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800904c:	07da      	lsls	r2, r3, #31
 800904e:	4605      	mov	r5, r0
 8009050:	d4e0      	bmi.n	8009014 <_fflush_r+0xc>
 8009052:	89a3      	ldrh	r3, [r4, #12]
 8009054:	059b      	lsls	r3, r3, #22
 8009056:	d4dd      	bmi.n	8009014 <_fflush_r+0xc>
 8009058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800905a:	f000 f908 	bl	800926e <__retarget_lock_release_recursive>
 800905e:	e7d9      	b.n	8009014 <_fflush_r+0xc>
 8009060:	4b05      	ldr	r3, [pc, #20]	; (8009078 <_fflush_r+0x70>)
 8009062:	429c      	cmp	r4, r3
 8009064:	d101      	bne.n	800906a <_fflush_r+0x62>
 8009066:	68ac      	ldr	r4, [r5, #8]
 8009068:	e7df      	b.n	800902a <_fflush_r+0x22>
 800906a:	4b04      	ldr	r3, [pc, #16]	; (800907c <_fflush_r+0x74>)
 800906c:	429c      	cmp	r4, r3
 800906e:	bf08      	it	eq
 8009070:	68ec      	ldreq	r4, [r5, #12]
 8009072:	e7da      	b.n	800902a <_fflush_r+0x22>
 8009074:	08009e40 	.word	0x08009e40
 8009078:	08009e60 	.word	0x08009e60
 800907c:	08009e20 	.word	0x08009e20

08009080 <std>:
 8009080:	2300      	movs	r3, #0
 8009082:	b510      	push	{r4, lr}
 8009084:	4604      	mov	r4, r0
 8009086:	e9c0 3300 	strd	r3, r3, [r0]
 800908a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800908e:	6083      	str	r3, [r0, #8]
 8009090:	8181      	strh	r1, [r0, #12]
 8009092:	6643      	str	r3, [r0, #100]	; 0x64
 8009094:	81c2      	strh	r2, [r0, #14]
 8009096:	6183      	str	r3, [r0, #24]
 8009098:	4619      	mov	r1, r3
 800909a:	2208      	movs	r2, #8
 800909c:	305c      	adds	r0, #92	; 0x5c
 800909e:	f7ff fe4d 	bl	8008d3c <memset>
 80090a2:	4b05      	ldr	r3, [pc, #20]	; (80090b8 <std+0x38>)
 80090a4:	6263      	str	r3, [r4, #36]	; 0x24
 80090a6:	4b05      	ldr	r3, [pc, #20]	; (80090bc <std+0x3c>)
 80090a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80090aa:	4b05      	ldr	r3, [pc, #20]	; (80090c0 <std+0x40>)
 80090ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090ae:	4b05      	ldr	r3, [pc, #20]	; (80090c4 <std+0x44>)
 80090b0:	6224      	str	r4, [r4, #32]
 80090b2:	6323      	str	r3, [r4, #48]	; 0x30
 80090b4:	bd10      	pop	{r4, pc}
 80090b6:	bf00      	nop
 80090b8:	08009af9 	.word	0x08009af9
 80090bc:	08009b1b 	.word	0x08009b1b
 80090c0:	08009b53 	.word	0x08009b53
 80090c4:	08009b77 	.word	0x08009b77

080090c8 <_cleanup_r>:
 80090c8:	4901      	ldr	r1, [pc, #4]	; (80090d0 <_cleanup_r+0x8>)
 80090ca:	f000 b8af 	b.w	800922c <_fwalk_reent>
 80090ce:	bf00      	nop
 80090d0:	08009009 	.word	0x08009009

080090d4 <__sfmoreglue>:
 80090d4:	b570      	push	{r4, r5, r6, lr}
 80090d6:	2268      	movs	r2, #104	; 0x68
 80090d8:	1e4d      	subs	r5, r1, #1
 80090da:	4355      	muls	r5, r2
 80090dc:	460e      	mov	r6, r1
 80090de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80090e2:	f000 f997 	bl	8009414 <_malloc_r>
 80090e6:	4604      	mov	r4, r0
 80090e8:	b140      	cbz	r0, 80090fc <__sfmoreglue+0x28>
 80090ea:	2100      	movs	r1, #0
 80090ec:	e9c0 1600 	strd	r1, r6, [r0]
 80090f0:	300c      	adds	r0, #12
 80090f2:	60a0      	str	r0, [r4, #8]
 80090f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80090f8:	f7ff fe20 	bl	8008d3c <memset>
 80090fc:	4620      	mov	r0, r4
 80090fe:	bd70      	pop	{r4, r5, r6, pc}

08009100 <__sfp_lock_acquire>:
 8009100:	4801      	ldr	r0, [pc, #4]	; (8009108 <__sfp_lock_acquire+0x8>)
 8009102:	f000 b8b3 	b.w	800926c <__retarget_lock_acquire_recursive>
 8009106:	bf00      	nop
 8009108:	200081f1 	.word	0x200081f1

0800910c <__sfp_lock_release>:
 800910c:	4801      	ldr	r0, [pc, #4]	; (8009114 <__sfp_lock_release+0x8>)
 800910e:	f000 b8ae 	b.w	800926e <__retarget_lock_release_recursive>
 8009112:	bf00      	nop
 8009114:	200081f1 	.word	0x200081f1

08009118 <__sinit_lock_acquire>:
 8009118:	4801      	ldr	r0, [pc, #4]	; (8009120 <__sinit_lock_acquire+0x8>)
 800911a:	f000 b8a7 	b.w	800926c <__retarget_lock_acquire_recursive>
 800911e:	bf00      	nop
 8009120:	200081f2 	.word	0x200081f2

08009124 <__sinit_lock_release>:
 8009124:	4801      	ldr	r0, [pc, #4]	; (800912c <__sinit_lock_release+0x8>)
 8009126:	f000 b8a2 	b.w	800926e <__retarget_lock_release_recursive>
 800912a:	bf00      	nop
 800912c:	200081f2 	.word	0x200081f2

08009130 <__sinit>:
 8009130:	b510      	push	{r4, lr}
 8009132:	4604      	mov	r4, r0
 8009134:	f7ff fff0 	bl	8009118 <__sinit_lock_acquire>
 8009138:	69a3      	ldr	r3, [r4, #24]
 800913a:	b11b      	cbz	r3, 8009144 <__sinit+0x14>
 800913c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009140:	f7ff bff0 	b.w	8009124 <__sinit_lock_release>
 8009144:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009148:	6523      	str	r3, [r4, #80]	; 0x50
 800914a:	4b13      	ldr	r3, [pc, #76]	; (8009198 <__sinit+0x68>)
 800914c:	4a13      	ldr	r2, [pc, #76]	; (800919c <__sinit+0x6c>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	62a2      	str	r2, [r4, #40]	; 0x28
 8009152:	42a3      	cmp	r3, r4
 8009154:	bf04      	itt	eq
 8009156:	2301      	moveq	r3, #1
 8009158:	61a3      	streq	r3, [r4, #24]
 800915a:	4620      	mov	r0, r4
 800915c:	f000 f820 	bl	80091a0 <__sfp>
 8009160:	6060      	str	r0, [r4, #4]
 8009162:	4620      	mov	r0, r4
 8009164:	f000 f81c 	bl	80091a0 <__sfp>
 8009168:	60a0      	str	r0, [r4, #8]
 800916a:	4620      	mov	r0, r4
 800916c:	f000 f818 	bl	80091a0 <__sfp>
 8009170:	2200      	movs	r2, #0
 8009172:	60e0      	str	r0, [r4, #12]
 8009174:	2104      	movs	r1, #4
 8009176:	6860      	ldr	r0, [r4, #4]
 8009178:	f7ff ff82 	bl	8009080 <std>
 800917c:	68a0      	ldr	r0, [r4, #8]
 800917e:	2201      	movs	r2, #1
 8009180:	2109      	movs	r1, #9
 8009182:	f7ff ff7d 	bl	8009080 <std>
 8009186:	68e0      	ldr	r0, [r4, #12]
 8009188:	2202      	movs	r2, #2
 800918a:	2112      	movs	r1, #18
 800918c:	f7ff ff78 	bl	8009080 <std>
 8009190:	2301      	movs	r3, #1
 8009192:	61a3      	str	r3, [r4, #24]
 8009194:	e7d2      	b.n	800913c <__sinit+0xc>
 8009196:	bf00      	nop
 8009198:	08009e1c 	.word	0x08009e1c
 800919c:	080090c9 	.word	0x080090c9

080091a0 <__sfp>:
 80091a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a2:	4607      	mov	r7, r0
 80091a4:	f7ff ffac 	bl	8009100 <__sfp_lock_acquire>
 80091a8:	4b1e      	ldr	r3, [pc, #120]	; (8009224 <__sfp+0x84>)
 80091aa:	681e      	ldr	r6, [r3, #0]
 80091ac:	69b3      	ldr	r3, [r6, #24]
 80091ae:	b913      	cbnz	r3, 80091b6 <__sfp+0x16>
 80091b0:	4630      	mov	r0, r6
 80091b2:	f7ff ffbd 	bl	8009130 <__sinit>
 80091b6:	3648      	adds	r6, #72	; 0x48
 80091b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091bc:	3b01      	subs	r3, #1
 80091be:	d503      	bpl.n	80091c8 <__sfp+0x28>
 80091c0:	6833      	ldr	r3, [r6, #0]
 80091c2:	b30b      	cbz	r3, 8009208 <__sfp+0x68>
 80091c4:	6836      	ldr	r6, [r6, #0]
 80091c6:	e7f7      	b.n	80091b8 <__sfp+0x18>
 80091c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091cc:	b9d5      	cbnz	r5, 8009204 <__sfp+0x64>
 80091ce:	4b16      	ldr	r3, [pc, #88]	; (8009228 <__sfp+0x88>)
 80091d0:	60e3      	str	r3, [r4, #12]
 80091d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091d6:	6665      	str	r5, [r4, #100]	; 0x64
 80091d8:	f000 f847 	bl	800926a <__retarget_lock_init_recursive>
 80091dc:	f7ff ff96 	bl	800910c <__sfp_lock_release>
 80091e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80091e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80091e8:	6025      	str	r5, [r4, #0]
 80091ea:	61a5      	str	r5, [r4, #24]
 80091ec:	2208      	movs	r2, #8
 80091ee:	4629      	mov	r1, r5
 80091f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80091f4:	f7ff fda2 	bl	8008d3c <memset>
 80091f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80091fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009200:	4620      	mov	r0, r4
 8009202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009204:	3468      	adds	r4, #104	; 0x68
 8009206:	e7d9      	b.n	80091bc <__sfp+0x1c>
 8009208:	2104      	movs	r1, #4
 800920a:	4638      	mov	r0, r7
 800920c:	f7ff ff62 	bl	80090d4 <__sfmoreglue>
 8009210:	4604      	mov	r4, r0
 8009212:	6030      	str	r0, [r6, #0]
 8009214:	2800      	cmp	r0, #0
 8009216:	d1d5      	bne.n	80091c4 <__sfp+0x24>
 8009218:	f7ff ff78 	bl	800910c <__sfp_lock_release>
 800921c:	230c      	movs	r3, #12
 800921e:	603b      	str	r3, [r7, #0]
 8009220:	e7ee      	b.n	8009200 <__sfp+0x60>
 8009222:	bf00      	nop
 8009224:	08009e1c 	.word	0x08009e1c
 8009228:	ffff0001 	.word	0xffff0001

0800922c <_fwalk_reent>:
 800922c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009230:	4606      	mov	r6, r0
 8009232:	4688      	mov	r8, r1
 8009234:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009238:	2700      	movs	r7, #0
 800923a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800923e:	f1b9 0901 	subs.w	r9, r9, #1
 8009242:	d505      	bpl.n	8009250 <_fwalk_reent+0x24>
 8009244:	6824      	ldr	r4, [r4, #0]
 8009246:	2c00      	cmp	r4, #0
 8009248:	d1f7      	bne.n	800923a <_fwalk_reent+0xe>
 800924a:	4638      	mov	r0, r7
 800924c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009250:	89ab      	ldrh	r3, [r5, #12]
 8009252:	2b01      	cmp	r3, #1
 8009254:	d907      	bls.n	8009266 <_fwalk_reent+0x3a>
 8009256:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800925a:	3301      	adds	r3, #1
 800925c:	d003      	beq.n	8009266 <_fwalk_reent+0x3a>
 800925e:	4629      	mov	r1, r5
 8009260:	4630      	mov	r0, r6
 8009262:	47c0      	blx	r8
 8009264:	4307      	orrs	r7, r0
 8009266:	3568      	adds	r5, #104	; 0x68
 8009268:	e7e9      	b.n	800923e <_fwalk_reent+0x12>

0800926a <__retarget_lock_init_recursive>:
 800926a:	4770      	bx	lr

0800926c <__retarget_lock_acquire_recursive>:
 800926c:	4770      	bx	lr

0800926e <__retarget_lock_release_recursive>:
 800926e:	4770      	bx	lr

08009270 <__swhatbuf_r>:
 8009270:	b570      	push	{r4, r5, r6, lr}
 8009272:	460e      	mov	r6, r1
 8009274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009278:	2900      	cmp	r1, #0
 800927a:	b096      	sub	sp, #88	; 0x58
 800927c:	4614      	mov	r4, r2
 800927e:	461d      	mov	r5, r3
 8009280:	da08      	bge.n	8009294 <__swhatbuf_r+0x24>
 8009282:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009286:	2200      	movs	r2, #0
 8009288:	602a      	str	r2, [r5, #0]
 800928a:	061a      	lsls	r2, r3, #24
 800928c:	d410      	bmi.n	80092b0 <__swhatbuf_r+0x40>
 800928e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009292:	e00e      	b.n	80092b2 <__swhatbuf_r+0x42>
 8009294:	466a      	mov	r2, sp
 8009296:	f000 fc95 	bl	8009bc4 <_fstat_r>
 800929a:	2800      	cmp	r0, #0
 800929c:	dbf1      	blt.n	8009282 <__swhatbuf_r+0x12>
 800929e:	9a01      	ldr	r2, [sp, #4]
 80092a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092a8:	425a      	negs	r2, r3
 80092aa:	415a      	adcs	r2, r3
 80092ac:	602a      	str	r2, [r5, #0]
 80092ae:	e7ee      	b.n	800928e <__swhatbuf_r+0x1e>
 80092b0:	2340      	movs	r3, #64	; 0x40
 80092b2:	2000      	movs	r0, #0
 80092b4:	6023      	str	r3, [r4, #0]
 80092b6:	b016      	add	sp, #88	; 0x58
 80092b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080092bc <__smakebuf_r>:
 80092bc:	898b      	ldrh	r3, [r1, #12]
 80092be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092c0:	079d      	lsls	r5, r3, #30
 80092c2:	4606      	mov	r6, r0
 80092c4:	460c      	mov	r4, r1
 80092c6:	d507      	bpl.n	80092d8 <__smakebuf_r+0x1c>
 80092c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	6123      	str	r3, [r4, #16]
 80092d0:	2301      	movs	r3, #1
 80092d2:	6163      	str	r3, [r4, #20]
 80092d4:	b002      	add	sp, #8
 80092d6:	bd70      	pop	{r4, r5, r6, pc}
 80092d8:	ab01      	add	r3, sp, #4
 80092da:	466a      	mov	r2, sp
 80092dc:	f7ff ffc8 	bl	8009270 <__swhatbuf_r>
 80092e0:	9900      	ldr	r1, [sp, #0]
 80092e2:	4605      	mov	r5, r0
 80092e4:	4630      	mov	r0, r6
 80092e6:	f000 f895 	bl	8009414 <_malloc_r>
 80092ea:	b948      	cbnz	r0, 8009300 <__smakebuf_r+0x44>
 80092ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092f0:	059a      	lsls	r2, r3, #22
 80092f2:	d4ef      	bmi.n	80092d4 <__smakebuf_r+0x18>
 80092f4:	f023 0303 	bic.w	r3, r3, #3
 80092f8:	f043 0302 	orr.w	r3, r3, #2
 80092fc:	81a3      	strh	r3, [r4, #12]
 80092fe:	e7e3      	b.n	80092c8 <__smakebuf_r+0xc>
 8009300:	4b0d      	ldr	r3, [pc, #52]	; (8009338 <__smakebuf_r+0x7c>)
 8009302:	62b3      	str	r3, [r6, #40]	; 0x28
 8009304:	89a3      	ldrh	r3, [r4, #12]
 8009306:	6020      	str	r0, [r4, #0]
 8009308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800930c:	81a3      	strh	r3, [r4, #12]
 800930e:	9b00      	ldr	r3, [sp, #0]
 8009310:	6163      	str	r3, [r4, #20]
 8009312:	9b01      	ldr	r3, [sp, #4]
 8009314:	6120      	str	r0, [r4, #16]
 8009316:	b15b      	cbz	r3, 8009330 <__smakebuf_r+0x74>
 8009318:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800931c:	4630      	mov	r0, r6
 800931e:	f000 fc63 	bl	8009be8 <_isatty_r>
 8009322:	b128      	cbz	r0, 8009330 <__smakebuf_r+0x74>
 8009324:	89a3      	ldrh	r3, [r4, #12]
 8009326:	f023 0303 	bic.w	r3, r3, #3
 800932a:	f043 0301 	orr.w	r3, r3, #1
 800932e:	81a3      	strh	r3, [r4, #12]
 8009330:	89a0      	ldrh	r0, [r4, #12]
 8009332:	4305      	orrs	r5, r0
 8009334:	81a5      	strh	r5, [r4, #12]
 8009336:	e7cd      	b.n	80092d4 <__smakebuf_r+0x18>
 8009338:	080090c9 	.word	0x080090c9

0800933c <_free_r>:
 800933c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800933e:	2900      	cmp	r1, #0
 8009340:	d044      	beq.n	80093cc <_free_r+0x90>
 8009342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009346:	9001      	str	r0, [sp, #4]
 8009348:	2b00      	cmp	r3, #0
 800934a:	f1a1 0404 	sub.w	r4, r1, #4
 800934e:	bfb8      	it	lt
 8009350:	18e4      	addlt	r4, r4, r3
 8009352:	f000 fc6b 	bl	8009c2c <__malloc_lock>
 8009356:	4a1e      	ldr	r2, [pc, #120]	; (80093d0 <_free_r+0x94>)
 8009358:	9801      	ldr	r0, [sp, #4]
 800935a:	6813      	ldr	r3, [r2, #0]
 800935c:	b933      	cbnz	r3, 800936c <_free_r+0x30>
 800935e:	6063      	str	r3, [r4, #4]
 8009360:	6014      	str	r4, [r2, #0]
 8009362:	b003      	add	sp, #12
 8009364:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009368:	f000 bc66 	b.w	8009c38 <__malloc_unlock>
 800936c:	42a3      	cmp	r3, r4
 800936e:	d908      	bls.n	8009382 <_free_r+0x46>
 8009370:	6825      	ldr	r5, [r4, #0]
 8009372:	1961      	adds	r1, r4, r5
 8009374:	428b      	cmp	r3, r1
 8009376:	bf01      	itttt	eq
 8009378:	6819      	ldreq	r1, [r3, #0]
 800937a:	685b      	ldreq	r3, [r3, #4]
 800937c:	1949      	addeq	r1, r1, r5
 800937e:	6021      	streq	r1, [r4, #0]
 8009380:	e7ed      	b.n	800935e <_free_r+0x22>
 8009382:	461a      	mov	r2, r3
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	b10b      	cbz	r3, 800938c <_free_r+0x50>
 8009388:	42a3      	cmp	r3, r4
 800938a:	d9fa      	bls.n	8009382 <_free_r+0x46>
 800938c:	6811      	ldr	r1, [r2, #0]
 800938e:	1855      	adds	r5, r2, r1
 8009390:	42a5      	cmp	r5, r4
 8009392:	d10b      	bne.n	80093ac <_free_r+0x70>
 8009394:	6824      	ldr	r4, [r4, #0]
 8009396:	4421      	add	r1, r4
 8009398:	1854      	adds	r4, r2, r1
 800939a:	42a3      	cmp	r3, r4
 800939c:	6011      	str	r1, [r2, #0]
 800939e:	d1e0      	bne.n	8009362 <_free_r+0x26>
 80093a0:	681c      	ldr	r4, [r3, #0]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	6053      	str	r3, [r2, #4]
 80093a6:	4421      	add	r1, r4
 80093a8:	6011      	str	r1, [r2, #0]
 80093aa:	e7da      	b.n	8009362 <_free_r+0x26>
 80093ac:	d902      	bls.n	80093b4 <_free_r+0x78>
 80093ae:	230c      	movs	r3, #12
 80093b0:	6003      	str	r3, [r0, #0]
 80093b2:	e7d6      	b.n	8009362 <_free_r+0x26>
 80093b4:	6825      	ldr	r5, [r4, #0]
 80093b6:	1961      	adds	r1, r4, r5
 80093b8:	428b      	cmp	r3, r1
 80093ba:	bf04      	itt	eq
 80093bc:	6819      	ldreq	r1, [r3, #0]
 80093be:	685b      	ldreq	r3, [r3, #4]
 80093c0:	6063      	str	r3, [r4, #4]
 80093c2:	bf04      	itt	eq
 80093c4:	1949      	addeq	r1, r1, r5
 80093c6:	6021      	streq	r1, [r4, #0]
 80093c8:	6054      	str	r4, [r2, #4]
 80093ca:	e7ca      	b.n	8009362 <_free_r+0x26>
 80093cc:	b003      	add	sp, #12
 80093ce:	bd30      	pop	{r4, r5, pc}
 80093d0:	200081f4 	.word	0x200081f4

080093d4 <sbrk_aligned>:
 80093d4:	b570      	push	{r4, r5, r6, lr}
 80093d6:	4e0e      	ldr	r6, [pc, #56]	; (8009410 <sbrk_aligned+0x3c>)
 80093d8:	460c      	mov	r4, r1
 80093da:	6831      	ldr	r1, [r6, #0]
 80093dc:	4605      	mov	r5, r0
 80093de:	b911      	cbnz	r1, 80093e6 <sbrk_aligned+0x12>
 80093e0:	f000 fb7a 	bl	8009ad8 <_sbrk_r>
 80093e4:	6030      	str	r0, [r6, #0]
 80093e6:	4621      	mov	r1, r4
 80093e8:	4628      	mov	r0, r5
 80093ea:	f000 fb75 	bl	8009ad8 <_sbrk_r>
 80093ee:	1c43      	adds	r3, r0, #1
 80093f0:	d00a      	beq.n	8009408 <sbrk_aligned+0x34>
 80093f2:	1cc4      	adds	r4, r0, #3
 80093f4:	f024 0403 	bic.w	r4, r4, #3
 80093f8:	42a0      	cmp	r0, r4
 80093fa:	d007      	beq.n	800940c <sbrk_aligned+0x38>
 80093fc:	1a21      	subs	r1, r4, r0
 80093fe:	4628      	mov	r0, r5
 8009400:	f000 fb6a 	bl	8009ad8 <_sbrk_r>
 8009404:	3001      	adds	r0, #1
 8009406:	d101      	bne.n	800940c <sbrk_aligned+0x38>
 8009408:	f04f 34ff 	mov.w	r4, #4294967295
 800940c:	4620      	mov	r0, r4
 800940e:	bd70      	pop	{r4, r5, r6, pc}
 8009410:	200081f8 	.word	0x200081f8

08009414 <_malloc_r>:
 8009414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009418:	1ccd      	adds	r5, r1, #3
 800941a:	f025 0503 	bic.w	r5, r5, #3
 800941e:	3508      	adds	r5, #8
 8009420:	2d0c      	cmp	r5, #12
 8009422:	bf38      	it	cc
 8009424:	250c      	movcc	r5, #12
 8009426:	2d00      	cmp	r5, #0
 8009428:	4607      	mov	r7, r0
 800942a:	db01      	blt.n	8009430 <_malloc_r+0x1c>
 800942c:	42a9      	cmp	r1, r5
 800942e:	d905      	bls.n	800943c <_malloc_r+0x28>
 8009430:	230c      	movs	r3, #12
 8009432:	603b      	str	r3, [r7, #0]
 8009434:	2600      	movs	r6, #0
 8009436:	4630      	mov	r0, r6
 8009438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800943c:	4e2e      	ldr	r6, [pc, #184]	; (80094f8 <_malloc_r+0xe4>)
 800943e:	f000 fbf5 	bl	8009c2c <__malloc_lock>
 8009442:	6833      	ldr	r3, [r6, #0]
 8009444:	461c      	mov	r4, r3
 8009446:	bb34      	cbnz	r4, 8009496 <_malloc_r+0x82>
 8009448:	4629      	mov	r1, r5
 800944a:	4638      	mov	r0, r7
 800944c:	f7ff ffc2 	bl	80093d4 <sbrk_aligned>
 8009450:	1c43      	adds	r3, r0, #1
 8009452:	4604      	mov	r4, r0
 8009454:	d14d      	bne.n	80094f2 <_malloc_r+0xde>
 8009456:	6834      	ldr	r4, [r6, #0]
 8009458:	4626      	mov	r6, r4
 800945a:	2e00      	cmp	r6, #0
 800945c:	d140      	bne.n	80094e0 <_malloc_r+0xcc>
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	4631      	mov	r1, r6
 8009462:	4638      	mov	r0, r7
 8009464:	eb04 0803 	add.w	r8, r4, r3
 8009468:	f000 fb36 	bl	8009ad8 <_sbrk_r>
 800946c:	4580      	cmp	r8, r0
 800946e:	d13a      	bne.n	80094e6 <_malloc_r+0xd2>
 8009470:	6821      	ldr	r1, [r4, #0]
 8009472:	3503      	adds	r5, #3
 8009474:	1a6d      	subs	r5, r5, r1
 8009476:	f025 0503 	bic.w	r5, r5, #3
 800947a:	3508      	adds	r5, #8
 800947c:	2d0c      	cmp	r5, #12
 800947e:	bf38      	it	cc
 8009480:	250c      	movcc	r5, #12
 8009482:	4629      	mov	r1, r5
 8009484:	4638      	mov	r0, r7
 8009486:	f7ff ffa5 	bl	80093d4 <sbrk_aligned>
 800948a:	3001      	adds	r0, #1
 800948c:	d02b      	beq.n	80094e6 <_malloc_r+0xd2>
 800948e:	6823      	ldr	r3, [r4, #0]
 8009490:	442b      	add	r3, r5
 8009492:	6023      	str	r3, [r4, #0]
 8009494:	e00e      	b.n	80094b4 <_malloc_r+0xa0>
 8009496:	6822      	ldr	r2, [r4, #0]
 8009498:	1b52      	subs	r2, r2, r5
 800949a:	d41e      	bmi.n	80094da <_malloc_r+0xc6>
 800949c:	2a0b      	cmp	r2, #11
 800949e:	d916      	bls.n	80094ce <_malloc_r+0xba>
 80094a0:	1961      	adds	r1, r4, r5
 80094a2:	42a3      	cmp	r3, r4
 80094a4:	6025      	str	r5, [r4, #0]
 80094a6:	bf18      	it	ne
 80094a8:	6059      	strne	r1, [r3, #4]
 80094aa:	6863      	ldr	r3, [r4, #4]
 80094ac:	bf08      	it	eq
 80094ae:	6031      	streq	r1, [r6, #0]
 80094b0:	5162      	str	r2, [r4, r5]
 80094b2:	604b      	str	r3, [r1, #4]
 80094b4:	4638      	mov	r0, r7
 80094b6:	f104 060b 	add.w	r6, r4, #11
 80094ba:	f000 fbbd 	bl	8009c38 <__malloc_unlock>
 80094be:	f026 0607 	bic.w	r6, r6, #7
 80094c2:	1d23      	adds	r3, r4, #4
 80094c4:	1af2      	subs	r2, r6, r3
 80094c6:	d0b6      	beq.n	8009436 <_malloc_r+0x22>
 80094c8:	1b9b      	subs	r3, r3, r6
 80094ca:	50a3      	str	r3, [r4, r2]
 80094cc:	e7b3      	b.n	8009436 <_malloc_r+0x22>
 80094ce:	6862      	ldr	r2, [r4, #4]
 80094d0:	42a3      	cmp	r3, r4
 80094d2:	bf0c      	ite	eq
 80094d4:	6032      	streq	r2, [r6, #0]
 80094d6:	605a      	strne	r2, [r3, #4]
 80094d8:	e7ec      	b.n	80094b4 <_malloc_r+0xa0>
 80094da:	4623      	mov	r3, r4
 80094dc:	6864      	ldr	r4, [r4, #4]
 80094de:	e7b2      	b.n	8009446 <_malloc_r+0x32>
 80094e0:	4634      	mov	r4, r6
 80094e2:	6876      	ldr	r6, [r6, #4]
 80094e4:	e7b9      	b.n	800945a <_malloc_r+0x46>
 80094e6:	230c      	movs	r3, #12
 80094e8:	603b      	str	r3, [r7, #0]
 80094ea:	4638      	mov	r0, r7
 80094ec:	f000 fba4 	bl	8009c38 <__malloc_unlock>
 80094f0:	e7a1      	b.n	8009436 <_malloc_r+0x22>
 80094f2:	6025      	str	r5, [r4, #0]
 80094f4:	e7de      	b.n	80094b4 <_malloc_r+0xa0>
 80094f6:	bf00      	nop
 80094f8:	200081f4 	.word	0x200081f4

080094fc <__sfputc_r>:
 80094fc:	6893      	ldr	r3, [r2, #8]
 80094fe:	3b01      	subs	r3, #1
 8009500:	2b00      	cmp	r3, #0
 8009502:	b410      	push	{r4}
 8009504:	6093      	str	r3, [r2, #8]
 8009506:	da08      	bge.n	800951a <__sfputc_r+0x1e>
 8009508:	6994      	ldr	r4, [r2, #24]
 800950a:	42a3      	cmp	r3, r4
 800950c:	db01      	blt.n	8009512 <__sfputc_r+0x16>
 800950e:	290a      	cmp	r1, #10
 8009510:	d103      	bne.n	800951a <__sfputc_r+0x1e>
 8009512:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009516:	f7ff bc31 	b.w	8008d7c <__swbuf_r>
 800951a:	6813      	ldr	r3, [r2, #0]
 800951c:	1c58      	adds	r0, r3, #1
 800951e:	6010      	str	r0, [r2, #0]
 8009520:	7019      	strb	r1, [r3, #0]
 8009522:	4608      	mov	r0, r1
 8009524:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009528:	4770      	bx	lr

0800952a <__sfputs_r>:
 800952a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800952c:	4606      	mov	r6, r0
 800952e:	460f      	mov	r7, r1
 8009530:	4614      	mov	r4, r2
 8009532:	18d5      	adds	r5, r2, r3
 8009534:	42ac      	cmp	r4, r5
 8009536:	d101      	bne.n	800953c <__sfputs_r+0x12>
 8009538:	2000      	movs	r0, #0
 800953a:	e007      	b.n	800954c <__sfputs_r+0x22>
 800953c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009540:	463a      	mov	r2, r7
 8009542:	4630      	mov	r0, r6
 8009544:	f7ff ffda 	bl	80094fc <__sfputc_r>
 8009548:	1c43      	adds	r3, r0, #1
 800954a:	d1f3      	bne.n	8009534 <__sfputs_r+0xa>
 800954c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009550 <_vfiprintf_r>:
 8009550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009554:	460d      	mov	r5, r1
 8009556:	b09d      	sub	sp, #116	; 0x74
 8009558:	4614      	mov	r4, r2
 800955a:	4698      	mov	r8, r3
 800955c:	4606      	mov	r6, r0
 800955e:	b118      	cbz	r0, 8009568 <_vfiprintf_r+0x18>
 8009560:	6983      	ldr	r3, [r0, #24]
 8009562:	b90b      	cbnz	r3, 8009568 <_vfiprintf_r+0x18>
 8009564:	f7ff fde4 	bl	8009130 <__sinit>
 8009568:	4b89      	ldr	r3, [pc, #548]	; (8009790 <_vfiprintf_r+0x240>)
 800956a:	429d      	cmp	r5, r3
 800956c:	d11b      	bne.n	80095a6 <_vfiprintf_r+0x56>
 800956e:	6875      	ldr	r5, [r6, #4]
 8009570:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009572:	07d9      	lsls	r1, r3, #31
 8009574:	d405      	bmi.n	8009582 <_vfiprintf_r+0x32>
 8009576:	89ab      	ldrh	r3, [r5, #12]
 8009578:	059a      	lsls	r2, r3, #22
 800957a:	d402      	bmi.n	8009582 <_vfiprintf_r+0x32>
 800957c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800957e:	f7ff fe75 	bl	800926c <__retarget_lock_acquire_recursive>
 8009582:	89ab      	ldrh	r3, [r5, #12]
 8009584:	071b      	lsls	r3, r3, #28
 8009586:	d501      	bpl.n	800958c <_vfiprintf_r+0x3c>
 8009588:	692b      	ldr	r3, [r5, #16]
 800958a:	b9eb      	cbnz	r3, 80095c8 <_vfiprintf_r+0x78>
 800958c:	4629      	mov	r1, r5
 800958e:	4630      	mov	r0, r6
 8009590:	f7ff fc46 	bl	8008e20 <__swsetup_r>
 8009594:	b1c0      	cbz	r0, 80095c8 <_vfiprintf_r+0x78>
 8009596:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009598:	07dc      	lsls	r4, r3, #31
 800959a:	d50e      	bpl.n	80095ba <_vfiprintf_r+0x6a>
 800959c:	f04f 30ff 	mov.w	r0, #4294967295
 80095a0:	b01d      	add	sp, #116	; 0x74
 80095a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a6:	4b7b      	ldr	r3, [pc, #492]	; (8009794 <_vfiprintf_r+0x244>)
 80095a8:	429d      	cmp	r5, r3
 80095aa:	d101      	bne.n	80095b0 <_vfiprintf_r+0x60>
 80095ac:	68b5      	ldr	r5, [r6, #8]
 80095ae:	e7df      	b.n	8009570 <_vfiprintf_r+0x20>
 80095b0:	4b79      	ldr	r3, [pc, #484]	; (8009798 <_vfiprintf_r+0x248>)
 80095b2:	429d      	cmp	r5, r3
 80095b4:	bf08      	it	eq
 80095b6:	68f5      	ldreq	r5, [r6, #12]
 80095b8:	e7da      	b.n	8009570 <_vfiprintf_r+0x20>
 80095ba:	89ab      	ldrh	r3, [r5, #12]
 80095bc:	0598      	lsls	r0, r3, #22
 80095be:	d4ed      	bmi.n	800959c <_vfiprintf_r+0x4c>
 80095c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095c2:	f7ff fe54 	bl	800926e <__retarget_lock_release_recursive>
 80095c6:	e7e9      	b.n	800959c <_vfiprintf_r+0x4c>
 80095c8:	2300      	movs	r3, #0
 80095ca:	9309      	str	r3, [sp, #36]	; 0x24
 80095cc:	2320      	movs	r3, #32
 80095ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80095d6:	2330      	movs	r3, #48	; 0x30
 80095d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800979c <_vfiprintf_r+0x24c>
 80095dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095e0:	f04f 0901 	mov.w	r9, #1
 80095e4:	4623      	mov	r3, r4
 80095e6:	469a      	mov	sl, r3
 80095e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095ec:	b10a      	cbz	r2, 80095f2 <_vfiprintf_r+0xa2>
 80095ee:	2a25      	cmp	r2, #37	; 0x25
 80095f0:	d1f9      	bne.n	80095e6 <_vfiprintf_r+0x96>
 80095f2:	ebba 0b04 	subs.w	fp, sl, r4
 80095f6:	d00b      	beq.n	8009610 <_vfiprintf_r+0xc0>
 80095f8:	465b      	mov	r3, fp
 80095fa:	4622      	mov	r2, r4
 80095fc:	4629      	mov	r1, r5
 80095fe:	4630      	mov	r0, r6
 8009600:	f7ff ff93 	bl	800952a <__sfputs_r>
 8009604:	3001      	adds	r0, #1
 8009606:	f000 80aa 	beq.w	800975e <_vfiprintf_r+0x20e>
 800960a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800960c:	445a      	add	r2, fp
 800960e:	9209      	str	r2, [sp, #36]	; 0x24
 8009610:	f89a 3000 	ldrb.w	r3, [sl]
 8009614:	2b00      	cmp	r3, #0
 8009616:	f000 80a2 	beq.w	800975e <_vfiprintf_r+0x20e>
 800961a:	2300      	movs	r3, #0
 800961c:	f04f 32ff 	mov.w	r2, #4294967295
 8009620:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009624:	f10a 0a01 	add.w	sl, sl, #1
 8009628:	9304      	str	r3, [sp, #16]
 800962a:	9307      	str	r3, [sp, #28]
 800962c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009630:	931a      	str	r3, [sp, #104]	; 0x68
 8009632:	4654      	mov	r4, sl
 8009634:	2205      	movs	r2, #5
 8009636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800963a:	4858      	ldr	r0, [pc, #352]	; (800979c <_vfiprintf_r+0x24c>)
 800963c:	f7f6 fe00 	bl	8000240 <memchr>
 8009640:	9a04      	ldr	r2, [sp, #16]
 8009642:	b9d8      	cbnz	r0, 800967c <_vfiprintf_r+0x12c>
 8009644:	06d1      	lsls	r1, r2, #27
 8009646:	bf44      	itt	mi
 8009648:	2320      	movmi	r3, #32
 800964a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800964e:	0713      	lsls	r3, r2, #28
 8009650:	bf44      	itt	mi
 8009652:	232b      	movmi	r3, #43	; 0x2b
 8009654:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009658:	f89a 3000 	ldrb.w	r3, [sl]
 800965c:	2b2a      	cmp	r3, #42	; 0x2a
 800965e:	d015      	beq.n	800968c <_vfiprintf_r+0x13c>
 8009660:	9a07      	ldr	r2, [sp, #28]
 8009662:	4654      	mov	r4, sl
 8009664:	2000      	movs	r0, #0
 8009666:	f04f 0c0a 	mov.w	ip, #10
 800966a:	4621      	mov	r1, r4
 800966c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009670:	3b30      	subs	r3, #48	; 0x30
 8009672:	2b09      	cmp	r3, #9
 8009674:	d94e      	bls.n	8009714 <_vfiprintf_r+0x1c4>
 8009676:	b1b0      	cbz	r0, 80096a6 <_vfiprintf_r+0x156>
 8009678:	9207      	str	r2, [sp, #28]
 800967a:	e014      	b.n	80096a6 <_vfiprintf_r+0x156>
 800967c:	eba0 0308 	sub.w	r3, r0, r8
 8009680:	fa09 f303 	lsl.w	r3, r9, r3
 8009684:	4313      	orrs	r3, r2
 8009686:	9304      	str	r3, [sp, #16]
 8009688:	46a2      	mov	sl, r4
 800968a:	e7d2      	b.n	8009632 <_vfiprintf_r+0xe2>
 800968c:	9b03      	ldr	r3, [sp, #12]
 800968e:	1d19      	adds	r1, r3, #4
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	9103      	str	r1, [sp, #12]
 8009694:	2b00      	cmp	r3, #0
 8009696:	bfbb      	ittet	lt
 8009698:	425b      	neglt	r3, r3
 800969a:	f042 0202 	orrlt.w	r2, r2, #2
 800969e:	9307      	strge	r3, [sp, #28]
 80096a0:	9307      	strlt	r3, [sp, #28]
 80096a2:	bfb8      	it	lt
 80096a4:	9204      	strlt	r2, [sp, #16]
 80096a6:	7823      	ldrb	r3, [r4, #0]
 80096a8:	2b2e      	cmp	r3, #46	; 0x2e
 80096aa:	d10c      	bne.n	80096c6 <_vfiprintf_r+0x176>
 80096ac:	7863      	ldrb	r3, [r4, #1]
 80096ae:	2b2a      	cmp	r3, #42	; 0x2a
 80096b0:	d135      	bne.n	800971e <_vfiprintf_r+0x1ce>
 80096b2:	9b03      	ldr	r3, [sp, #12]
 80096b4:	1d1a      	adds	r2, r3, #4
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	9203      	str	r2, [sp, #12]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	bfb8      	it	lt
 80096be:	f04f 33ff 	movlt.w	r3, #4294967295
 80096c2:	3402      	adds	r4, #2
 80096c4:	9305      	str	r3, [sp, #20]
 80096c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80097ac <_vfiprintf_r+0x25c>
 80096ca:	7821      	ldrb	r1, [r4, #0]
 80096cc:	2203      	movs	r2, #3
 80096ce:	4650      	mov	r0, sl
 80096d0:	f7f6 fdb6 	bl	8000240 <memchr>
 80096d4:	b140      	cbz	r0, 80096e8 <_vfiprintf_r+0x198>
 80096d6:	2340      	movs	r3, #64	; 0x40
 80096d8:	eba0 000a 	sub.w	r0, r0, sl
 80096dc:	fa03 f000 	lsl.w	r0, r3, r0
 80096e0:	9b04      	ldr	r3, [sp, #16]
 80096e2:	4303      	orrs	r3, r0
 80096e4:	3401      	adds	r4, #1
 80096e6:	9304      	str	r3, [sp, #16]
 80096e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ec:	482c      	ldr	r0, [pc, #176]	; (80097a0 <_vfiprintf_r+0x250>)
 80096ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096f2:	2206      	movs	r2, #6
 80096f4:	f7f6 fda4 	bl	8000240 <memchr>
 80096f8:	2800      	cmp	r0, #0
 80096fa:	d03f      	beq.n	800977c <_vfiprintf_r+0x22c>
 80096fc:	4b29      	ldr	r3, [pc, #164]	; (80097a4 <_vfiprintf_r+0x254>)
 80096fe:	bb1b      	cbnz	r3, 8009748 <_vfiprintf_r+0x1f8>
 8009700:	9b03      	ldr	r3, [sp, #12]
 8009702:	3307      	adds	r3, #7
 8009704:	f023 0307 	bic.w	r3, r3, #7
 8009708:	3308      	adds	r3, #8
 800970a:	9303      	str	r3, [sp, #12]
 800970c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800970e:	443b      	add	r3, r7
 8009710:	9309      	str	r3, [sp, #36]	; 0x24
 8009712:	e767      	b.n	80095e4 <_vfiprintf_r+0x94>
 8009714:	fb0c 3202 	mla	r2, ip, r2, r3
 8009718:	460c      	mov	r4, r1
 800971a:	2001      	movs	r0, #1
 800971c:	e7a5      	b.n	800966a <_vfiprintf_r+0x11a>
 800971e:	2300      	movs	r3, #0
 8009720:	3401      	adds	r4, #1
 8009722:	9305      	str	r3, [sp, #20]
 8009724:	4619      	mov	r1, r3
 8009726:	f04f 0c0a 	mov.w	ip, #10
 800972a:	4620      	mov	r0, r4
 800972c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009730:	3a30      	subs	r2, #48	; 0x30
 8009732:	2a09      	cmp	r2, #9
 8009734:	d903      	bls.n	800973e <_vfiprintf_r+0x1ee>
 8009736:	2b00      	cmp	r3, #0
 8009738:	d0c5      	beq.n	80096c6 <_vfiprintf_r+0x176>
 800973a:	9105      	str	r1, [sp, #20]
 800973c:	e7c3      	b.n	80096c6 <_vfiprintf_r+0x176>
 800973e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009742:	4604      	mov	r4, r0
 8009744:	2301      	movs	r3, #1
 8009746:	e7f0      	b.n	800972a <_vfiprintf_r+0x1da>
 8009748:	ab03      	add	r3, sp, #12
 800974a:	9300      	str	r3, [sp, #0]
 800974c:	462a      	mov	r2, r5
 800974e:	4b16      	ldr	r3, [pc, #88]	; (80097a8 <_vfiprintf_r+0x258>)
 8009750:	a904      	add	r1, sp, #16
 8009752:	4630      	mov	r0, r6
 8009754:	f3af 8000 	nop.w
 8009758:	4607      	mov	r7, r0
 800975a:	1c78      	adds	r0, r7, #1
 800975c:	d1d6      	bne.n	800970c <_vfiprintf_r+0x1bc>
 800975e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009760:	07d9      	lsls	r1, r3, #31
 8009762:	d405      	bmi.n	8009770 <_vfiprintf_r+0x220>
 8009764:	89ab      	ldrh	r3, [r5, #12]
 8009766:	059a      	lsls	r2, r3, #22
 8009768:	d402      	bmi.n	8009770 <_vfiprintf_r+0x220>
 800976a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800976c:	f7ff fd7f 	bl	800926e <__retarget_lock_release_recursive>
 8009770:	89ab      	ldrh	r3, [r5, #12]
 8009772:	065b      	lsls	r3, r3, #25
 8009774:	f53f af12 	bmi.w	800959c <_vfiprintf_r+0x4c>
 8009778:	9809      	ldr	r0, [sp, #36]	; 0x24
 800977a:	e711      	b.n	80095a0 <_vfiprintf_r+0x50>
 800977c:	ab03      	add	r3, sp, #12
 800977e:	9300      	str	r3, [sp, #0]
 8009780:	462a      	mov	r2, r5
 8009782:	4b09      	ldr	r3, [pc, #36]	; (80097a8 <_vfiprintf_r+0x258>)
 8009784:	a904      	add	r1, sp, #16
 8009786:	4630      	mov	r0, r6
 8009788:	f000 f880 	bl	800988c <_printf_i>
 800978c:	e7e4      	b.n	8009758 <_vfiprintf_r+0x208>
 800978e:	bf00      	nop
 8009790:	08009e40 	.word	0x08009e40
 8009794:	08009e60 	.word	0x08009e60
 8009798:	08009e20 	.word	0x08009e20
 800979c:	08009e80 	.word	0x08009e80
 80097a0:	08009e8a 	.word	0x08009e8a
 80097a4:	00000000 	.word	0x00000000
 80097a8:	0800952b 	.word	0x0800952b
 80097ac:	08009e86 	.word	0x08009e86

080097b0 <_printf_common>:
 80097b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097b4:	4616      	mov	r6, r2
 80097b6:	4699      	mov	r9, r3
 80097b8:	688a      	ldr	r2, [r1, #8]
 80097ba:	690b      	ldr	r3, [r1, #16]
 80097bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097c0:	4293      	cmp	r3, r2
 80097c2:	bfb8      	it	lt
 80097c4:	4613      	movlt	r3, r2
 80097c6:	6033      	str	r3, [r6, #0]
 80097c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097cc:	4607      	mov	r7, r0
 80097ce:	460c      	mov	r4, r1
 80097d0:	b10a      	cbz	r2, 80097d6 <_printf_common+0x26>
 80097d2:	3301      	adds	r3, #1
 80097d4:	6033      	str	r3, [r6, #0]
 80097d6:	6823      	ldr	r3, [r4, #0]
 80097d8:	0699      	lsls	r1, r3, #26
 80097da:	bf42      	ittt	mi
 80097dc:	6833      	ldrmi	r3, [r6, #0]
 80097de:	3302      	addmi	r3, #2
 80097e0:	6033      	strmi	r3, [r6, #0]
 80097e2:	6825      	ldr	r5, [r4, #0]
 80097e4:	f015 0506 	ands.w	r5, r5, #6
 80097e8:	d106      	bne.n	80097f8 <_printf_common+0x48>
 80097ea:	f104 0a19 	add.w	sl, r4, #25
 80097ee:	68e3      	ldr	r3, [r4, #12]
 80097f0:	6832      	ldr	r2, [r6, #0]
 80097f2:	1a9b      	subs	r3, r3, r2
 80097f4:	42ab      	cmp	r3, r5
 80097f6:	dc26      	bgt.n	8009846 <_printf_common+0x96>
 80097f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80097fc:	1e13      	subs	r3, r2, #0
 80097fe:	6822      	ldr	r2, [r4, #0]
 8009800:	bf18      	it	ne
 8009802:	2301      	movne	r3, #1
 8009804:	0692      	lsls	r2, r2, #26
 8009806:	d42b      	bmi.n	8009860 <_printf_common+0xb0>
 8009808:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800980c:	4649      	mov	r1, r9
 800980e:	4638      	mov	r0, r7
 8009810:	47c0      	blx	r8
 8009812:	3001      	adds	r0, #1
 8009814:	d01e      	beq.n	8009854 <_printf_common+0xa4>
 8009816:	6823      	ldr	r3, [r4, #0]
 8009818:	68e5      	ldr	r5, [r4, #12]
 800981a:	6832      	ldr	r2, [r6, #0]
 800981c:	f003 0306 	and.w	r3, r3, #6
 8009820:	2b04      	cmp	r3, #4
 8009822:	bf08      	it	eq
 8009824:	1aad      	subeq	r5, r5, r2
 8009826:	68a3      	ldr	r3, [r4, #8]
 8009828:	6922      	ldr	r2, [r4, #16]
 800982a:	bf0c      	ite	eq
 800982c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009830:	2500      	movne	r5, #0
 8009832:	4293      	cmp	r3, r2
 8009834:	bfc4      	itt	gt
 8009836:	1a9b      	subgt	r3, r3, r2
 8009838:	18ed      	addgt	r5, r5, r3
 800983a:	2600      	movs	r6, #0
 800983c:	341a      	adds	r4, #26
 800983e:	42b5      	cmp	r5, r6
 8009840:	d11a      	bne.n	8009878 <_printf_common+0xc8>
 8009842:	2000      	movs	r0, #0
 8009844:	e008      	b.n	8009858 <_printf_common+0xa8>
 8009846:	2301      	movs	r3, #1
 8009848:	4652      	mov	r2, sl
 800984a:	4649      	mov	r1, r9
 800984c:	4638      	mov	r0, r7
 800984e:	47c0      	blx	r8
 8009850:	3001      	adds	r0, #1
 8009852:	d103      	bne.n	800985c <_printf_common+0xac>
 8009854:	f04f 30ff 	mov.w	r0, #4294967295
 8009858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800985c:	3501      	adds	r5, #1
 800985e:	e7c6      	b.n	80097ee <_printf_common+0x3e>
 8009860:	18e1      	adds	r1, r4, r3
 8009862:	1c5a      	adds	r2, r3, #1
 8009864:	2030      	movs	r0, #48	; 0x30
 8009866:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800986a:	4422      	add	r2, r4
 800986c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009870:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009874:	3302      	adds	r3, #2
 8009876:	e7c7      	b.n	8009808 <_printf_common+0x58>
 8009878:	2301      	movs	r3, #1
 800987a:	4622      	mov	r2, r4
 800987c:	4649      	mov	r1, r9
 800987e:	4638      	mov	r0, r7
 8009880:	47c0      	blx	r8
 8009882:	3001      	adds	r0, #1
 8009884:	d0e6      	beq.n	8009854 <_printf_common+0xa4>
 8009886:	3601      	adds	r6, #1
 8009888:	e7d9      	b.n	800983e <_printf_common+0x8e>
	...

0800988c <_printf_i>:
 800988c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009890:	7e0f      	ldrb	r7, [r1, #24]
 8009892:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009894:	2f78      	cmp	r7, #120	; 0x78
 8009896:	4691      	mov	r9, r2
 8009898:	4680      	mov	r8, r0
 800989a:	460c      	mov	r4, r1
 800989c:	469a      	mov	sl, r3
 800989e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80098a2:	d807      	bhi.n	80098b4 <_printf_i+0x28>
 80098a4:	2f62      	cmp	r7, #98	; 0x62
 80098a6:	d80a      	bhi.n	80098be <_printf_i+0x32>
 80098a8:	2f00      	cmp	r7, #0
 80098aa:	f000 80d8 	beq.w	8009a5e <_printf_i+0x1d2>
 80098ae:	2f58      	cmp	r7, #88	; 0x58
 80098b0:	f000 80a3 	beq.w	80099fa <_printf_i+0x16e>
 80098b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098bc:	e03a      	b.n	8009934 <_printf_i+0xa8>
 80098be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098c2:	2b15      	cmp	r3, #21
 80098c4:	d8f6      	bhi.n	80098b4 <_printf_i+0x28>
 80098c6:	a101      	add	r1, pc, #4	; (adr r1, 80098cc <_printf_i+0x40>)
 80098c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098cc:	08009925 	.word	0x08009925
 80098d0:	08009939 	.word	0x08009939
 80098d4:	080098b5 	.word	0x080098b5
 80098d8:	080098b5 	.word	0x080098b5
 80098dc:	080098b5 	.word	0x080098b5
 80098e0:	080098b5 	.word	0x080098b5
 80098e4:	08009939 	.word	0x08009939
 80098e8:	080098b5 	.word	0x080098b5
 80098ec:	080098b5 	.word	0x080098b5
 80098f0:	080098b5 	.word	0x080098b5
 80098f4:	080098b5 	.word	0x080098b5
 80098f8:	08009a45 	.word	0x08009a45
 80098fc:	08009969 	.word	0x08009969
 8009900:	08009a27 	.word	0x08009a27
 8009904:	080098b5 	.word	0x080098b5
 8009908:	080098b5 	.word	0x080098b5
 800990c:	08009a67 	.word	0x08009a67
 8009910:	080098b5 	.word	0x080098b5
 8009914:	08009969 	.word	0x08009969
 8009918:	080098b5 	.word	0x080098b5
 800991c:	080098b5 	.word	0x080098b5
 8009920:	08009a2f 	.word	0x08009a2f
 8009924:	682b      	ldr	r3, [r5, #0]
 8009926:	1d1a      	adds	r2, r3, #4
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	602a      	str	r2, [r5, #0]
 800992c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009930:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009934:	2301      	movs	r3, #1
 8009936:	e0a3      	b.n	8009a80 <_printf_i+0x1f4>
 8009938:	6820      	ldr	r0, [r4, #0]
 800993a:	6829      	ldr	r1, [r5, #0]
 800993c:	0606      	lsls	r6, r0, #24
 800993e:	f101 0304 	add.w	r3, r1, #4
 8009942:	d50a      	bpl.n	800995a <_printf_i+0xce>
 8009944:	680e      	ldr	r6, [r1, #0]
 8009946:	602b      	str	r3, [r5, #0]
 8009948:	2e00      	cmp	r6, #0
 800994a:	da03      	bge.n	8009954 <_printf_i+0xc8>
 800994c:	232d      	movs	r3, #45	; 0x2d
 800994e:	4276      	negs	r6, r6
 8009950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009954:	485e      	ldr	r0, [pc, #376]	; (8009ad0 <_printf_i+0x244>)
 8009956:	230a      	movs	r3, #10
 8009958:	e019      	b.n	800998e <_printf_i+0x102>
 800995a:	680e      	ldr	r6, [r1, #0]
 800995c:	602b      	str	r3, [r5, #0]
 800995e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009962:	bf18      	it	ne
 8009964:	b236      	sxthne	r6, r6
 8009966:	e7ef      	b.n	8009948 <_printf_i+0xbc>
 8009968:	682b      	ldr	r3, [r5, #0]
 800996a:	6820      	ldr	r0, [r4, #0]
 800996c:	1d19      	adds	r1, r3, #4
 800996e:	6029      	str	r1, [r5, #0]
 8009970:	0601      	lsls	r1, r0, #24
 8009972:	d501      	bpl.n	8009978 <_printf_i+0xec>
 8009974:	681e      	ldr	r6, [r3, #0]
 8009976:	e002      	b.n	800997e <_printf_i+0xf2>
 8009978:	0646      	lsls	r6, r0, #25
 800997a:	d5fb      	bpl.n	8009974 <_printf_i+0xe8>
 800997c:	881e      	ldrh	r6, [r3, #0]
 800997e:	4854      	ldr	r0, [pc, #336]	; (8009ad0 <_printf_i+0x244>)
 8009980:	2f6f      	cmp	r7, #111	; 0x6f
 8009982:	bf0c      	ite	eq
 8009984:	2308      	moveq	r3, #8
 8009986:	230a      	movne	r3, #10
 8009988:	2100      	movs	r1, #0
 800998a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800998e:	6865      	ldr	r5, [r4, #4]
 8009990:	60a5      	str	r5, [r4, #8]
 8009992:	2d00      	cmp	r5, #0
 8009994:	bfa2      	ittt	ge
 8009996:	6821      	ldrge	r1, [r4, #0]
 8009998:	f021 0104 	bicge.w	r1, r1, #4
 800999c:	6021      	strge	r1, [r4, #0]
 800999e:	b90e      	cbnz	r6, 80099a4 <_printf_i+0x118>
 80099a0:	2d00      	cmp	r5, #0
 80099a2:	d04d      	beq.n	8009a40 <_printf_i+0x1b4>
 80099a4:	4615      	mov	r5, r2
 80099a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80099aa:	fb03 6711 	mls	r7, r3, r1, r6
 80099ae:	5dc7      	ldrb	r7, [r0, r7]
 80099b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80099b4:	4637      	mov	r7, r6
 80099b6:	42bb      	cmp	r3, r7
 80099b8:	460e      	mov	r6, r1
 80099ba:	d9f4      	bls.n	80099a6 <_printf_i+0x11a>
 80099bc:	2b08      	cmp	r3, #8
 80099be:	d10b      	bne.n	80099d8 <_printf_i+0x14c>
 80099c0:	6823      	ldr	r3, [r4, #0]
 80099c2:	07de      	lsls	r6, r3, #31
 80099c4:	d508      	bpl.n	80099d8 <_printf_i+0x14c>
 80099c6:	6923      	ldr	r3, [r4, #16]
 80099c8:	6861      	ldr	r1, [r4, #4]
 80099ca:	4299      	cmp	r1, r3
 80099cc:	bfde      	ittt	le
 80099ce:	2330      	movle	r3, #48	; 0x30
 80099d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80099d8:	1b52      	subs	r2, r2, r5
 80099da:	6122      	str	r2, [r4, #16]
 80099dc:	f8cd a000 	str.w	sl, [sp]
 80099e0:	464b      	mov	r3, r9
 80099e2:	aa03      	add	r2, sp, #12
 80099e4:	4621      	mov	r1, r4
 80099e6:	4640      	mov	r0, r8
 80099e8:	f7ff fee2 	bl	80097b0 <_printf_common>
 80099ec:	3001      	adds	r0, #1
 80099ee:	d14c      	bne.n	8009a8a <_printf_i+0x1fe>
 80099f0:	f04f 30ff 	mov.w	r0, #4294967295
 80099f4:	b004      	add	sp, #16
 80099f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099fa:	4835      	ldr	r0, [pc, #212]	; (8009ad0 <_printf_i+0x244>)
 80099fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009a00:	6829      	ldr	r1, [r5, #0]
 8009a02:	6823      	ldr	r3, [r4, #0]
 8009a04:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a08:	6029      	str	r1, [r5, #0]
 8009a0a:	061d      	lsls	r5, r3, #24
 8009a0c:	d514      	bpl.n	8009a38 <_printf_i+0x1ac>
 8009a0e:	07df      	lsls	r7, r3, #31
 8009a10:	bf44      	itt	mi
 8009a12:	f043 0320 	orrmi.w	r3, r3, #32
 8009a16:	6023      	strmi	r3, [r4, #0]
 8009a18:	b91e      	cbnz	r6, 8009a22 <_printf_i+0x196>
 8009a1a:	6823      	ldr	r3, [r4, #0]
 8009a1c:	f023 0320 	bic.w	r3, r3, #32
 8009a20:	6023      	str	r3, [r4, #0]
 8009a22:	2310      	movs	r3, #16
 8009a24:	e7b0      	b.n	8009988 <_printf_i+0xfc>
 8009a26:	6823      	ldr	r3, [r4, #0]
 8009a28:	f043 0320 	orr.w	r3, r3, #32
 8009a2c:	6023      	str	r3, [r4, #0]
 8009a2e:	2378      	movs	r3, #120	; 0x78
 8009a30:	4828      	ldr	r0, [pc, #160]	; (8009ad4 <_printf_i+0x248>)
 8009a32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a36:	e7e3      	b.n	8009a00 <_printf_i+0x174>
 8009a38:	0659      	lsls	r1, r3, #25
 8009a3a:	bf48      	it	mi
 8009a3c:	b2b6      	uxthmi	r6, r6
 8009a3e:	e7e6      	b.n	8009a0e <_printf_i+0x182>
 8009a40:	4615      	mov	r5, r2
 8009a42:	e7bb      	b.n	80099bc <_printf_i+0x130>
 8009a44:	682b      	ldr	r3, [r5, #0]
 8009a46:	6826      	ldr	r6, [r4, #0]
 8009a48:	6961      	ldr	r1, [r4, #20]
 8009a4a:	1d18      	adds	r0, r3, #4
 8009a4c:	6028      	str	r0, [r5, #0]
 8009a4e:	0635      	lsls	r5, r6, #24
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	d501      	bpl.n	8009a58 <_printf_i+0x1cc>
 8009a54:	6019      	str	r1, [r3, #0]
 8009a56:	e002      	b.n	8009a5e <_printf_i+0x1d2>
 8009a58:	0670      	lsls	r0, r6, #25
 8009a5a:	d5fb      	bpl.n	8009a54 <_printf_i+0x1c8>
 8009a5c:	8019      	strh	r1, [r3, #0]
 8009a5e:	2300      	movs	r3, #0
 8009a60:	6123      	str	r3, [r4, #16]
 8009a62:	4615      	mov	r5, r2
 8009a64:	e7ba      	b.n	80099dc <_printf_i+0x150>
 8009a66:	682b      	ldr	r3, [r5, #0]
 8009a68:	1d1a      	adds	r2, r3, #4
 8009a6a:	602a      	str	r2, [r5, #0]
 8009a6c:	681d      	ldr	r5, [r3, #0]
 8009a6e:	6862      	ldr	r2, [r4, #4]
 8009a70:	2100      	movs	r1, #0
 8009a72:	4628      	mov	r0, r5
 8009a74:	f7f6 fbe4 	bl	8000240 <memchr>
 8009a78:	b108      	cbz	r0, 8009a7e <_printf_i+0x1f2>
 8009a7a:	1b40      	subs	r0, r0, r5
 8009a7c:	6060      	str	r0, [r4, #4]
 8009a7e:	6863      	ldr	r3, [r4, #4]
 8009a80:	6123      	str	r3, [r4, #16]
 8009a82:	2300      	movs	r3, #0
 8009a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a88:	e7a8      	b.n	80099dc <_printf_i+0x150>
 8009a8a:	6923      	ldr	r3, [r4, #16]
 8009a8c:	462a      	mov	r2, r5
 8009a8e:	4649      	mov	r1, r9
 8009a90:	4640      	mov	r0, r8
 8009a92:	47d0      	blx	sl
 8009a94:	3001      	adds	r0, #1
 8009a96:	d0ab      	beq.n	80099f0 <_printf_i+0x164>
 8009a98:	6823      	ldr	r3, [r4, #0]
 8009a9a:	079b      	lsls	r3, r3, #30
 8009a9c:	d413      	bmi.n	8009ac6 <_printf_i+0x23a>
 8009a9e:	68e0      	ldr	r0, [r4, #12]
 8009aa0:	9b03      	ldr	r3, [sp, #12]
 8009aa2:	4298      	cmp	r0, r3
 8009aa4:	bfb8      	it	lt
 8009aa6:	4618      	movlt	r0, r3
 8009aa8:	e7a4      	b.n	80099f4 <_printf_i+0x168>
 8009aaa:	2301      	movs	r3, #1
 8009aac:	4632      	mov	r2, r6
 8009aae:	4649      	mov	r1, r9
 8009ab0:	4640      	mov	r0, r8
 8009ab2:	47d0      	blx	sl
 8009ab4:	3001      	adds	r0, #1
 8009ab6:	d09b      	beq.n	80099f0 <_printf_i+0x164>
 8009ab8:	3501      	adds	r5, #1
 8009aba:	68e3      	ldr	r3, [r4, #12]
 8009abc:	9903      	ldr	r1, [sp, #12]
 8009abe:	1a5b      	subs	r3, r3, r1
 8009ac0:	42ab      	cmp	r3, r5
 8009ac2:	dcf2      	bgt.n	8009aaa <_printf_i+0x21e>
 8009ac4:	e7eb      	b.n	8009a9e <_printf_i+0x212>
 8009ac6:	2500      	movs	r5, #0
 8009ac8:	f104 0619 	add.w	r6, r4, #25
 8009acc:	e7f5      	b.n	8009aba <_printf_i+0x22e>
 8009ace:	bf00      	nop
 8009ad0:	08009e91 	.word	0x08009e91
 8009ad4:	08009ea2 	.word	0x08009ea2

08009ad8 <_sbrk_r>:
 8009ad8:	b538      	push	{r3, r4, r5, lr}
 8009ada:	4d06      	ldr	r5, [pc, #24]	; (8009af4 <_sbrk_r+0x1c>)
 8009adc:	2300      	movs	r3, #0
 8009ade:	4604      	mov	r4, r0
 8009ae0:	4608      	mov	r0, r1
 8009ae2:	602b      	str	r3, [r5, #0]
 8009ae4:	f7f7 fe62 	bl	80017ac <_sbrk>
 8009ae8:	1c43      	adds	r3, r0, #1
 8009aea:	d102      	bne.n	8009af2 <_sbrk_r+0x1a>
 8009aec:	682b      	ldr	r3, [r5, #0]
 8009aee:	b103      	cbz	r3, 8009af2 <_sbrk_r+0x1a>
 8009af0:	6023      	str	r3, [r4, #0]
 8009af2:	bd38      	pop	{r3, r4, r5, pc}
 8009af4:	200081fc 	.word	0x200081fc

08009af8 <__sread>:
 8009af8:	b510      	push	{r4, lr}
 8009afa:	460c      	mov	r4, r1
 8009afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b00:	f000 f8a0 	bl	8009c44 <_read_r>
 8009b04:	2800      	cmp	r0, #0
 8009b06:	bfab      	itete	ge
 8009b08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b0a:	89a3      	ldrhlt	r3, [r4, #12]
 8009b0c:	181b      	addge	r3, r3, r0
 8009b0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b12:	bfac      	ite	ge
 8009b14:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b16:	81a3      	strhlt	r3, [r4, #12]
 8009b18:	bd10      	pop	{r4, pc}

08009b1a <__swrite>:
 8009b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1e:	461f      	mov	r7, r3
 8009b20:	898b      	ldrh	r3, [r1, #12]
 8009b22:	05db      	lsls	r3, r3, #23
 8009b24:	4605      	mov	r5, r0
 8009b26:	460c      	mov	r4, r1
 8009b28:	4616      	mov	r6, r2
 8009b2a:	d505      	bpl.n	8009b38 <__swrite+0x1e>
 8009b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b30:	2302      	movs	r3, #2
 8009b32:	2200      	movs	r2, #0
 8009b34:	f000 f868 	bl	8009c08 <_lseek_r>
 8009b38:	89a3      	ldrh	r3, [r4, #12]
 8009b3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b42:	81a3      	strh	r3, [r4, #12]
 8009b44:	4632      	mov	r2, r6
 8009b46:	463b      	mov	r3, r7
 8009b48:	4628      	mov	r0, r5
 8009b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b4e:	f000 b817 	b.w	8009b80 <_write_r>

08009b52 <__sseek>:
 8009b52:	b510      	push	{r4, lr}
 8009b54:	460c      	mov	r4, r1
 8009b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b5a:	f000 f855 	bl	8009c08 <_lseek_r>
 8009b5e:	1c43      	adds	r3, r0, #1
 8009b60:	89a3      	ldrh	r3, [r4, #12]
 8009b62:	bf15      	itete	ne
 8009b64:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b6e:	81a3      	strheq	r3, [r4, #12]
 8009b70:	bf18      	it	ne
 8009b72:	81a3      	strhne	r3, [r4, #12]
 8009b74:	bd10      	pop	{r4, pc}

08009b76 <__sclose>:
 8009b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b7a:	f000 b813 	b.w	8009ba4 <_close_r>
	...

08009b80 <_write_r>:
 8009b80:	b538      	push	{r3, r4, r5, lr}
 8009b82:	4d07      	ldr	r5, [pc, #28]	; (8009ba0 <_write_r+0x20>)
 8009b84:	4604      	mov	r4, r0
 8009b86:	4608      	mov	r0, r1
 8009b88:	4611      	mov	r1, r2
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	602a      	str	r2, [r5, #0]
 8009b8e:	461a      	mov	r2, r3
 8009b90:	f7f7 fdbb 	bl	800170a <_write>
 8009b94:	1c43      	adds	r3, r0, #1
 8009b96:	d102      	bne.n	8009b9e <_write_r+0x1e>
 8009b98:	682b      	ldr	r3, [r5, #0]
 8009b9a:	b103      	cbz	r3, 8009b9e <_write_r+0x1e>
 8009b9c:	6023      	str	r3, [r4, #0]
 8009b9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ba0:	200081fc 	.word	0x200081fc

08009ba4 <_close_r>:
 8009ba4:	b538      	push	{r3, r4, r5, lr}
 8009ba6:	4d06      	ldr	r5, [pc, #24]	; (8009bc0 <_close_r+0x1c>)
 8009ba8:	2300      	movs	r3, #0
 8009baa:	4604      	mov	r4, r0
 8009bac:	4608      	mov	r0, r1
 8009bae:	602b      	str	r3, [r5, #0]
 8009bb0:	f7f7 fdc7 	bl	8001742 <_close>
 8009bb4:	1c43      	adds	r3, r0, #1
 8009bb6:	d102      	bne.n	8009bbe <_close_r+0x1a>
 8009bb8:	682b      	ldr	r3, [r5, #0]
 8009bba:	b103      	cbz	r3, 8009bbe <_close_r+0x1a>
 8009bbc:	6023      	str	r3, [r4, #0]
 8009bbe:	bd38      	pop	{r3, r4, r5, pc}
 8009bc0:	200081fc 	.word	0x200081fc

08009bc4 <_fstat_r>:
 8009bc4:	b538      	push	{r3, r4, r5, lr}
 8009bc6:	4d07      	ldr	r5, [pc, #28]	; (8009be4 <_fstat_r+0x20>)
 8009bc8:	2300      	movs	r3, #0
 8009bca:	4604      	mov	r4, r0
 8009bcc:	4608      	mov	r0, r1
 8009bce:	4611      	mov	r1, r2
 8009bd0:	602b      	str	r3, [r5, #0]
 8009bd2:	f7f7 fdc2 	bl	800175a <_fstat>
 8009bd6:	1c43      	adds	r3, r0, #1
 8009bd8:	d102      	bne.n	8009be0 <_fstat_r+0x1c>
 8009bda:	682b      	ldr	r3, [r5, #0]
 8009bdc:	b103      	cbz	r3, 8009be0 <_fstat_r+0x1c>
 8009bde:	6023      	str	r3, [r4, #0]
 8009be0:	bd38      	pop	{r3, r4, r5, pc}
 8009be2:	bf00      	nop
 8009be4:	200081fc 	.word	0x200081fc

08009be8 <_isatty_r>:
 8009be8:	b538      	push	{r3, r4, r5, lr}
 8009bea:	4d06      	ldr	r5, [pc, #24]	; (8009c04 <_isatty_r+0x1c>)
 8009bec:	2300      	movs	r3, #0
 8009bee:	4604      	mov	r4, r0
 8009bf0:	4608      	mov	r0, r1
 8009bf2:	602b      	str	r3, [r5, #0]
 8009bf4:	f7f7 fdc1 	bl	800177a <_isatty>
 8009bf8:	1c43      	adds	r3, r0, #1
 8009bfa:	d102      	bne.n	8009c02 <_isatty_r+0x1a>
 8009bfc:	682b      	ldr	r3, [r5, #0]
 8009bfe:	b103      	cbz	r3, 8009c02 <_isatty_r+0x1a>
 8009c00:	6023      	str	r3, [r4, #0]
 8009c02:	bd38      	pop	{r3, r4, r5, pc}
 8009c04:	200081fc 	.word	0x200081fc

08009c08 <_lseek_r>:
 8009c08:	b538      	push	{r3, r4, r5, lr}
 8009c0a:	4d07      	ldr	r5, [pc, #28]	; (8009c28 <_lseek_r+0x20>)
 8009c0c:	4604      	mov	r4, r0
 8009c0e:	4608      	mov	r0, r1
 8009c10:	4611      	mov	r1, r2
 8009c12:	2200      	movs	r2, #0
 8009c14:	602a      	str	r2, [r5, #0]
 8009c16:	461a      	mov	r2, r3
 8009c18:	f7f7 fdba 	bl	8001790 <_lseek>
 8009c1c:	1c43      	adds	r3, r0, #1
 8009c1e:	d102      	bne.n	8009c26 <_lseek_r+0x1e>
 8009c20:	682b      	ldr	r3, [r5, #0]
 8009c22:	b103      	cbz	r3, 8009c26 <_lseek_r+0x1e>
 8009c24:	6023      	str	r3, [r4, #0]
 8009c26:	bd38      	pop	{r3, r4, r5, pc}
 8009c28:	200081fc 	.word	0x200081fc

08009c2c <__malloc_lock>:
 8009c2c:	4801      	ldr	r0, [pc, #4]	; (8009c34 <__malloc_lock+0x8>)
 8009c2e:	f7ff bb1d 	b.w	800926c <__retarget_lock_acquire_recursive>
 8009c32:	bf00      	nop
 8009c34:	200081f0 	.word	0x200081f0

08009c38 <__malloc_unlock>:
 8009c38:	4801      	ldr	r0, [pc, #4]	; (8009c40 <__malloc_unlock+0x8>)
 8009c3a:	f7ff bb18 	b.w	800926e <__retarget_lock_release_recursive>
 8009c3e:	bf00      	nop
 8009c40:	200081f0 	.word	0x200081f0

08009c44 <_read_r>:
 8009c44:	b538      	push	{r3, r4, r5, lr}
 8009c46:	4d07      	ldr	r5, [pc, #28]	; (8009c64 <_read_r+0x20>)
 8009c48:	4604      	mov	r4, r0
 8009c4a:	4608      	mov	r0, r1
 8009c4c:	4611      	mov	r1, r2
 8009c4e:	2200      	movs	r2, #0
 8009c50:	602a      	str	r2, [r5, #0]
 8009c52:	461a      	mov	r2, r3
 8009c54:	f7f7 fd3c 	bl	80016d0 <_read>
 8009c58:	1c43      	adds	r3, r0, #1
 8009c5a:	d102      	bne.n	8009c62 <_read_r+0x1e>
 8009c5c:	682b      	ldr	r3, [r5, #0]
 8009c5e:	b103      	cbz	r3, 8009c62 <_read_r+0x1e>
 8009c60:	6023      	str	r3, [r4, #0]
 8009c62:	bd38      	pop	{r3, r4, r5, pc}
 8009c64:	200081fc 	.word	0x200081fc

08009c68 <_init>:
 8009c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c6a:	bf00      	nop
 8009c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c6e:	bc08      	pop	{r3}
 8009c70:	469e      	mov	lr, r3
 8009c72:	4770      	bx	lr

08009c74 <_fini>:
 8009c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c76:	bf00      	nop
 8009c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c7a:	bc08      	pop	{r3}
 8009c7c:	469e      	mov	lr, r3
 8009c7e:	4770      	bx	lr
