
Catch-Robo2023BYn622.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009840  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08009a40  08009a40  00019a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c30  08009c30  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  08009c30  08009c30  00019c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c38  08009c38  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c38  08009c38  00019c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c3c  08009c3c  00019c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000074  08009cb4  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000114  08009d54  00020114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000077ac  200001b4  08009df4  000201b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20007960  08009df4  00027960  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f491  00000000  00000000  000201e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004425  00000000  00000000  0003f673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017a0  00000000  00000000  00043a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001600  00000000  00000000  00045238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002c787  00000000  00000000  00046838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ccae  00000000  00000000  00072fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00108477  00000000  00000000  0008fc6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001980e4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000069c8  00000000  00000000  00198134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b4 	.word	0x200001b4
 800021c:	00000000 	.word	0x00000000
 8000220:	08009a28 	.word	0x08009a28

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b8 	.word	0x200001b8
 800023c:	08009a28 	.word	0x08009a28

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <PopSendTx8Bytes>:
	}

	return HAL_OK;
}

HAL_StatusTypeDef PopSendTx8Bytes(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;

	txHeader.RTR = CAN_RTR_DATA; // Data frame
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]
	txHeader.IDE = CAN_ID_EXT;	 // CAN Extend ID
 80005ee:	2304      	movs	r3, #4
 80005f0:	60fb      	str	r3, [r7, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	763b      	strb	r3, [r7, #24]

	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 80005f6:	e035      	b.n	8000664 <PopSendTx8Bytes+0x80>
		if (isfull == 0 && readpoint == writepoint)break;
 80005f8:	4b22      	ldr	r3, [pc, #136]	; (8000684 <PopSendTx8Bytes+0xa0>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d105      	bne.n	800060c <PopSendTx8Bytes+0x28>
 8000600:	4b21      	ldr	r3, [pc, #132]	; (8000688 <PopSendTx8Bytes+0xa4>)
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	4b21      	ldr	r3, [pc, #132]	; (800068c <PopSendTx8Bytes+0xa8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	429a      	cmp	r2, r3
 800060a:	d034      	beq.n	8000676 <PopSendTx8Bytes+0x92>

		txHeader.DLC = buffer[readpoint].DLC;
 800060c:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <PopSendTx8Bytes+0xa4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a1f      	ldr	r2, [pc, #124]	; (8000690 <PopSendTx8Bytes+0xac>)
 8000612:	011b      	lsls	r3, r3, #4
 8000614:	4413      	add	r3, r2
 8000616:	3304      	adds	r3, #4
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	617b      	str	r3, [r7, #20]
		txHeader.ExtId = buffer[readpoint].ExtId;
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <PopSendTx8Bytes+0xa4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a1b      	ldr	r2, [pc, #108]	; (8000690 <PopSendTx8Bytes+0xac>)
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	4413      	add	r3, r2
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	60bb      	str	r3, [r7, #8]

		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, buffer[readpoint].bytes, &txMailbox);
 800062a:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <PopSendTx8Bytes+0xb0>)
 800062c:	6818      	ldr	r0, [r3, #0]
 800062e:	4b16      	ldr	r3, [pc, #88]	; (8000688 <PopSendTx8Bytes+0xa4>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	011b      	lsls	r3, r3, #4
 8000634:	3308      	adds	r3, #8
 8000636:	4a16      	ldr	r2, [pc, #88]	; (8000690 <PopSendTx8Bytes+0xac>)
 8000638:	441a      	add	r2, r3
 800063a:	463b      	mov	r3, r7
 800063c:	1d39      	adds	r1, r7, #4
 800063e:	f001 f97e 	bl	800193e <HAL_CAN_AddTxMessage>
 8000642:	4603      	mov	r3, r0
 8000644:	77fb      	strb	r3, [r7, #31]
		if (ret != HAL_OK)return ret;
 8000646:	7ffb      	ldrb	r3, [r7, #31]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <PopSendTx8Bytes+0x6c>
 800064c:	7ffb      	ldrb	r3, [r7, #31]
 800064e:	e014      	b.n	800067a <PopSendTx8Bytes+0x96>

		readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000650:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <PopSendTx8Bytes+0xa4>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	3301      	adds	r3, #1
 8000656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800065a:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <PopSendTx8Bytes+0xa4>)
 800065c:	6013      	str	r3, [r2, #0]
		isfull = 0;
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <PopSendTx8Bytes+0xa0>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000664:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <PopSendTx8Bytes+0xb0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f001 fa38 	bl	8001ade <HAL_CAN_GetTxMailboxesFreeLevel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1c1      	bne.n	80005f8 <PopSendTx8Bytes+0x14>
 8000674:	e000      	b.n	8000678 <PopSendTx8Bytes+0x94>
		if (isfull == 0 && readpoint == writepoint)break;
 8000676:	bf00      	nop
	}

	return HAL_OK;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	3720      	adds	r7, #32
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200024ac 	.word	0x200024ac
 8000688:	200024a4 	.word	0x200024a4
 800068c:	200024a8 	.word	0x200024a8
 8000690:	200004a4 	.word	0x200004a4
 8000694:	200001d0 	.word	0x200001d0

08000698 <WhenTxMailbox0_1_2CompleteCallbackCalled>:

void WhenTxMailbox0_1_2CompleteCallbackCalled(){
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 800069c:	f7ff ffa2 	bl	80005e4 <PopSendTx8Bytes>
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <WhenTxMailbox0_1_2AbortCallbackCalled>:

void WhenTxMailbox0_1_2AbortCallbackCalled(){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 80006a8:	f7ff ff9c 	bl	80005e4 <PopSendTx8Bytes>
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <WhenCANRxFifo0MsgPending>:

void WhenCANRxFifo0MsgPending(CAN_HandleTypeDef *phcan, NUM_OF_DEVICES *num_of){ // Fifo0MsgPendingで呼び出すこと. CAN受信時に呼び出される関数
 80006b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80006b4:	b08e      	sub	sp, #56	; 0x38
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
 80006ba:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_CAN_GetRxMessage(phcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK){
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	f107 0218 	add.w	r2, r7, #24
 80006c4:	2100      	movs	r1, #0
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f001 fa3e 	bl	8001b48 <HAL_CAN_GetRxMessage>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d004      	beq.n	80006dc <WhenCANRxFifo0MsgPending+0x2c>
		// Reception Error
		printf("GetRxMessage error\n\r");
 80006d2:	486e      	ldr	r0, [pc, #440]	; (800088c <WhenCANRxFifo0MsgPending+0x1dc>)
 80006d4:	f008 fa1a 	bl	8008b0c <iprintf>
		Error_Handler();
 80006d8:	f000 fc2a 	bl	8000f30 <Error_Handler>
	}
	// awakeコマンドを受信した場合
	CAN_Device can_device = Extract_CAN_Device(rxHeader.ExtId);
 80006dc:	69fb      	ldr	r3, [r7, #28]
 80006de:	2200      	movs	r2, #0
 80006e0:	4698      	mov	r8, r3
 80006e2:	4691      	mov	r9, r2
 80006e4:	4640      	mov	r0, r8
 80006e6:	4649      	mov	r1, r9
 80006e8:	f000 f8e2 	bl	80008b0 <Extract_CAN_Device>
 80006ec:	4603      	mov	r3, r0
 80006ee:	461a      	mov	r2, r3
 80006f0:	733a      	strb	r2, [r7, #12]
 80006f2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80006f6:	737a      	strb	r2, [r7, #13]
 80006f8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80006fc:	73bb      	strb	r3, [r7, #14]
	uint8_t extracted_cmd = Extract_CAN_CMD(rxHeader.ExtId);
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	2200      	movs	r2, #0
 8000702:	461c      	mov	r4, r3
 8000704:	4615      	mov	r5, r2
 8000706:	4620      	mov	r0, r4
 8000708:	4629      	mov	r1, r5
 800070a:	f000 f91d 	bl	8000948 <Extract_CAN_CMD>
 800070e:	4603      	mov	r3, r0
 8000710:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(extracted_cmd == AWAKE_CMD){
 8000714:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000718:	2b00      	cmp	r3, #0
 800071a:	d139      	bne.n	8000790 <WhenCANRxFifo0MsgPending+0xe0>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 800071c:	2300      	movs	r3, #0
 800071e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000722:	e013      	b.n	800074c <WhenCANRxFifo0MsgPending+0x9c>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000724:	7b3b      	ldrb	r3, [r7, #12]
 8000726:	4618      	mov	r0, r3
 8000728:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800072c:	4958      	ldr	r1, [pc, #352]	; (8000890 <WhenCANRxFifo0MsgPending+0x1e0>)
 800072e:	4603      	mov	r3, r0
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	1a1b      	subs	r3, r3, r0
 8000734:	440b      	add	r3, r1
 8000736:	4413      	add	r3, r2
 8000738:	781a      	ldrb	r2, [r3, #0]
 800073a:	7c3b      	ldrb	r3, [r7, #16]
 800073c:	429a      	cmp	r2, r3
 800073e:	f000 80a0 	beq.w	8000882 <WhenCANRxFifo0MsgPending+0x1d2>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000742:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000746:	3301      	adds	r3, #1
 8000748:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800074c:	7b3b      	ldrb	r3, [r7, #12]
 800074e:	461a      	mov	r2, r3
 8000750:	4b50      	ldr	r3, [pc, #320]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000752:	5c9b      	ldrb	r3, [r3, r2]
 8000754:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000758:	429a      	cmp	r2, r3
 800075a:	d3e3      	bcc.n	8000724 <WhenCANRxFifo0MsgPending+0x74>
		}
		node_id_list[can_device.node_type][num_detected[can_device.node_type]] = rxData[0];
 800075c:	7b3b      	ldrb	r3, [r7, #12]
 800075e:	4619      	mov	r1, r3
 8000760:	7b3b      	ldrb	r3, [r7, #12]
 8000762:	461a      	mov	r2, r3
 8000764:	4b4b      	ldr	r3, [pc, #300]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000766:	5c9b      	ldrb	r3, [r3, r2]
 8000768:	461c      	mov	r4, r3
 800076a:	7c38      	ldrb	r0, [r7, #16]
 800076c:	4a48      	ldr	r2, [pc, #288]	; (8000890 <WhenCANRxFifo0MsgPending+0x1e0>)
 800076e:	460b      	mov	r3, r1
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	1a5b      	subs	r3, r3, r1
 8000774:	4413      	add	r3, r2
 8000776:	4423      	add	r3, r4
 8000778:	4602      	mov	r2, r0
 800077a:	701a      	strb	r2, [r3, #0]
		num_detected[can_device.node_type] += 1;
 800077c:	7b3b      	ldrb	r3, [r7, #12]
 800077e:	461a      	mov	r2, r3
 8000780:	4b44      	ldr	r3, [pc, #272]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000782:	5c9b      	ldrb	r3, [r3, r2]
 8000784:	7b3a      	ldrb	r2, [r7, #12]
 8000786:	3301      	adds	r3, #1
 8000788:	b2d9      	uxtb	r1, r3
 800078a:	4b42      	ldr	r3, [pc, #264]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 800078c:	5499      	strb	r1, [r3, r2]
 800078e:	e04a      	b.n	8000826 <WhenCANRxFifo0MsgPending+0x176>
	}else if(extracted_cmd == FB_CMD){
 8000790:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000794:	2b01      	cmp	r3, #1
 8000796:	d146      	bne.n	8000826 <WhenCANRxFifo0MsgPending+0x176>
		if (can_device.node_type == NODE_MCMD1){
 8000798:	7b3b      	ldrb	r3, [r7, #12]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d10d      	bne.n	80007ba <WhenCANRxFifo0MsgPending+0x10a>
			memcpy(&(_feedback_table_mcmd1[can_device.node_id].feedback_motor[can_device.device_num]),
 800079e:	7b7b      	ldrb	r3, [r7, #13]
 80007a0:	7bba      	ldrb	r2, [r7, #14]
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	4413      	add	r3, r2
 80007a6:	00db      	lsls	r3, r3, #3
 80007a8:	4a3b      	ldr	r2, [pc, #236]	; (8000898 <WhenCANRxFifo0MsgPending+0x1e8>)
 80007aa:	4413      	add	r3, r2
 80007ac:	461a      	mov	r2, r3
 80007ae:	f107 0310 	add.w	r3, r7, #16
 80007b2:	cb03      	ldmia	r3!, {r0, r1}
 80007b4:	6010      	str	r0, [r2, #0]
 80007b6:	6051      	str	r1, [r2, #4]
 80007b8:	e035      	b.n	8000826 <WhenCANRxFifo0MsgPending+0x176>
                   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD2){
 80007ba:	7b3b      	ldrb	r3, [r7, #12]
 80007bc:	2b02      	cmp	r3, #2
 80007be:	d10d      	bne.n	80007dc <WhenCANRxFifo0MsgPending+0x12c>
			memcpy(&(_feedback_table_mcmd2[can_device.node_id].feedback_motor[can_device.device_num]),
 80007c0:	7b7b      	ldrb	r3, [r7, #13]
 80007c2:	7bba      	ldrb	r2, [r7, #14]
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	4413      	add	r3, r2
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	4a34      	ldr	r2, [pc, #208]	; (800089c <WhenCANRxFifo0MsgPending+0x1ec>)
 80007cc:	4413      	add	r3, r2
 80007ce:	461a      	mov	r2, r3
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	cb03      	ldmia	r3!, {r0, r1}
 80007d6:	6010      	str	r0, [r2, #0]
 80007d8:	6051      	str	r1, [r2, #4]
 80007da:	e024      	b.n	8000826 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD3){
 80007dc:	7b3b      	ldrb	r3, [r7, #12]
 80007de:	2b03      	cmp	r3, #3
 80007e0:	d10d      	bne.n	80007fe <WhenCANRxFifo0MsgPending+0x14e>
			memcpy(&(_feedback_table_mcmd3[can_device.node_id].feedback_motor[can_device.device_num]),
 80007e2:	7b7b      	ldrb	r3, [r7, #13]
 80007e4:	7bba      	ldrb	r2, [r7, #14]
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	4413      	add	r3, r2
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	4a2c      	ldr	r2, [pc, #176]	; (80008a0 <WhenCANRxFifo0MsgPending+0x1f0>)
 80007ee:	4413      	add	r3, r2
 80007f0:	461a      	mov	r2, r3
 80007f2:	f107 0310 	add.w	r3, r7, #16
 80007f6:	cb03      	ldmia	r3!, {r0, r1}
 80007f8:	6010      	str	r0, [r2, #0]
 80007fa:	6051      	str	r1, [r2, #4]
 80007fc:	e013      	b.n	8000826 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD4){
 80007fe:	7b3b      	ldrb	r3, [r7, #12]
 8000800:	2b06      	cmp	r3, #6
 8000802:	d10d      	bne.n	8000820 <WhenCANRxFifo0MsgPending+0x170>
			memcpy(&(_feedback_table_mcmd4[can_device.node_id].feedback_motor[can_device.device_num]),
 8000804:	7b7b      	ldrb	r3, [r7, #13]
 8000806:	7bba      	ldrb	r2, [r7, #14]
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	4413      	add	r3, r2
 800080c:	00db      	lsls	r3, r3, #3
 800080e:	4a25      	ldr	r2, [pc, #148]	; (80008a4 <WhenCANRxFifo0MsgPending+0x1f4>)
 8000810:	4413      	add	r3, r2
 8000812:	461a      	mov	r2, r3
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	cb03      	ldmia	r3!, {r0, r1}
 800081a:	6010      	str	r0, [r2, #0]
 800081c:	6051      	str	r1, [r2, #4]
 800081e:	e002      	b.n	8000826 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else{
			printf("Error\n\r");
 8000820:	4821      	ldr	r0, [pc, #132]	; (80008a8 <WhenCANRxFifo0MsgPending+0x1f8>)
 8000822:	f008 f973 	bl	8008b0c <iprintf>
		}
	}else{

    }
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000826:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000828:	785a      	ldrb	r2, [r3, #1]
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	429a      	cmp	r2, r3
 8000830:	d128      	bne.n	8000884 <WhenCANRxFifo0MsgPending+0x1d4>
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000834:	789a      	ldrb	r2, [r3, #2]
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	785b      	ldrb	r3, [r3, #1]
 800083a:	429a      	cmp	r2, r3
 800083c:	d122      	bne.n	8000884 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000840:	78da      	ldrb	r2, [r3, #3]
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	789b      	ldrb	r3, [r3, #2]
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000846:	429a      	cmp	r2, r3
 8000848:	d11c      	bne.n	8000884 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 800084c:	791a      	ldrb	r2, [r3, #4]
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	78db      	ldrb	r3, [r3, #3]
 8000852:	429a      	cmp	r2, r3
 8000854:	d116      	bne.n	8000884 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000858:	795a      	ldrb	r2, [r3, #5]
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	791b      	ldrb	r3, [r3, #4]
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 800085e:	429a      	cmp	r2, r3
 8000860:	d110      	bne.n	8000884 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000864:	799a      	ldrb	r2, [r3, #6]
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	795b      	ldrb	r3, [r3, #5]
 800086a:	429a      	cmp	r2, r3
 800086c:	d10a      	bne.n	8000884 <WhenCANRxFifo0MsgPending+0x1d4>
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000870:	7a1a      	ldrb	r2, [r3, #8]
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	799b      	ldrb	r3, [r3, #6]
 8000876:	429a      	cmp	r2, r3
 8000878:	d104      	bne.n	8000884 <WhenCANRxFifo0MsgPending+0x1d4>
		all_node_detected = 1;
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <WhenCANRxFifo0MsgPending+0x1fc>)
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
 8000880:	e000      	b.n	8000884 <WhenCANRxFifo0MsgPending+0x1d4>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000882:	bf00      	nop
	}
}
 8000884:	3738      	adds	r7, #56	; 0x38
 8000886:	46bd      	mov	sp, r7
 8000888:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800088c:	08009a40 	.word	0x08009a40
 8000890:	200001e4 	.word	0x200001e4
 8000894:	200001d8 	.word	0x200001d8
 8000898:	20000224 	.word	0x20000224
 800089c:	200002c4 	.word	0x200002c4
 80008a0:	20000364 	.word	0x20000364
 80008a4:	20000404 	.word	0x20000404
 80008a8:	08009a58 	.word	0x08009a58
 80008ac:	200001d4 	.word	0x200001d4

080008b0 <Extract_CAN_Device>:
uint64_t Make_CAN_ID(Node_Type node_type, uint8_t node_id, uint8_t device_num, uint8_t cmd){
    return ( (((uint8_t)node_type & 0b111) << 11) | (((node_id)&0b111) << 8) | ((device_num&0b111) << 5)
             | (cmd&0b11111) );
}

CAN_Device Extract_CAN_Device(uint64_t can_id) {  // CAN_IDからCAN_Deviceを抽出する
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	e9c7 0100 	strd	r0, r1, [r7]
    CAN_Device ans;
    ans.device_num = ((can_id>>5) & 0b111);
 80008ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80008be:	f04f 0200 	mov.w	r2, #0
 80008c2:	f04f 0300 	mov.w	r3, #0
 80008c6:	0942      	lsrs	r2, r0, #5
 80008c8:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 80008cc:	094b      	lsrs	r3, r1, #5
 80008ce:	b2d3      	uxtb	r3, r2
 80008d0:	f003 0307 	and.w	r3, r3, #7
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	72bb      	strb	r3, [r7, #10]
    ans.node_id = ((can_id>>8) & 0b111);
 80008d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80008dc:	f04f 0200 	mov.w	r2, #0
 80008e0:	f04f 0300 	mov.w	r3, #0
 80008e4:	0a02      	lsrs	r2, r0, #8
 80008e6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80008ea:	0a0b      	lsrs	r3, r1, #8
 80008ec:	b2d3      	uxtb	r3, r2
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	727b      	strb	r3, [r7, #9]
    ans.node_type = (Node_Type)( (can_id>>11) & 0b111);
 80008f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80008fa:	f04f 0200 	mov.w	r2, #0
 80008fe:	f04f 0300 	mov.w	r3, #0
 8000902:	0ac2      	lsrs	r2, r0, #11
 8000904:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8000908:	0acb      	lsrs	r3, r1, #11
 800090a:	b2d3      	uxtb	r3, r2
 800090c:	f003 0307 	and.w	r3, r3, #7
 8000910:	b2db      	uxtb	r3, r3
 8000912:	723b      	strb	r3, [r7, #8]
    return ans;
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	f107 0208 	add.w	r2, r7, #8
 800091c:	6812      	ldr	r2, [r2, #0]
 800091e:	4611      	mov	r1, r2
 8000920:	8019      	strh	r1, [r3, #0]
 8000922:	3302      	adds	r3, #2
 8000924:	0c12      	lsrs	r2, r2, #16
 8000926:	701a      	strb	r2, [r3, #0]
 8000928:	2300      	movs	r3, #0
 800092a:	7b3a      	ldrb	r2, [r7, #12]
 800092c:	f362 0307 	bfi	r3, r2, #0, #8
 8000930:	7b7a      	ldrb	r2, [r7, #13]
 8000932:	f362 230f 	bfi	r3, r2, #8, #8
 8000936:	7bba      	ldrb	r2, [r7, #14]
 8000938:	f362 4317 	bfi	r3, r2, #16, #8
}
 800093c:	4618      	mov	r0, r3
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <Extract_CAN_CMD>:

uint8_t Extract_CAN_CMD(uint64_t can_id){ return ( can_id & 0b11111); }  // cmdを抽出
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	e9c7 0100 	strd	r0, r1, [r7]
 8000952:	783b      	ldrb	r3, [r7, #0]
 8000954:	f003 031f 	and.w	r3, r3, #31
 8000958:	b2db      	uxtb	r3, r3
 800095a:	4618      	mov	r0, r3
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
	...

08000968 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	4a07      	ldr	r2, [pc, #28]	; (8000994 <vApplicationGetIdleTaskMemory+0x2c>)
 8000978:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	4a06      	ldr	r2, [pc, #24]	; (8000998 <vApplicationGetIdleTaskMemory+0x30>)
 800097e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2280      	movs	r2, #128	; 0x80
 8000984:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	200024b0 	.word	0x200024b0
 8000998:	20002504 	.word	0x20002504

0800099c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80009ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	4a06      	ldr	r2, [pc, #24]	; (80009cc <vApplicationGetTimerTaskMemory+0x30>)
 80009b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009ba:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80009bc:	bf00      	nop
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	20002704 	.word	0x20002704
 80009cc:	20002758 	.word	0x20002758

080009d0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(uint8_t ch)
#else
#define PUTCHAR_PROTYPE int fputc(int ch,FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, &ch, 1, 500);
 80009da:	1df9      	adds	r1, r7, #7
 80009dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009e0:	2201      	movs	r2, #1
 80009e2:	4804      	ldr	r0, [pc, #16]	; (80009f4 <__io_putchar+0x24>)
 80009e4:	f004 f83c 	bl	8004a60 <HAL_UART_Transmit>
    return ch;
 80009e8:	79fb      	ldrb	r3, [r7, #7]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20002c68 	.word	0x20002c68

080009f8 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8000a00:	f7ff fe4a 	bl	8000698 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8000a14:	f7ff fe46 	bl	80006a4 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8000a28:	f7ff fe36 	bl	8000698 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8000a3c:	f7ff fe32 	bl	80006a4 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8000a50:	f7ff fe22 	bl	8000698 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8000a64:	f7ff fe1e 	bl	80006a4 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
    WhenCANRxFifo0MsgPending(hcan, &num_of_devices);
 8000a78:	4903      	ldr	r1, [pc, #12]	; (8000a88 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff fe18 	bl	80006b0 <WhenCANRxFifo0MsgPending>
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20003ab0 	.word	0x20003ab0

08000a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a8c:	b5b0      	push	{r4, r5, r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0
int main(void)
 8000a92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a96:	61fb      	str	r3, [r7, #28]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a98:	f000 fdd5 	bl	8001646 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a9c:	f000 f824 	bl	8000ae8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa0:	f000 f994 	bl	8000dcc <MX_GPIO_Init>
  MX_DMA_Init();
 8000aa4:	f000 f974 	bl	8000d90 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000aa8:	f000 f914 	bl	8000cd4 <MX_USART3_UART_Init>
  MX_ETH_Init();
 8000aac:	f000 f8c4 	bl	8000c38 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ab0:	f000 f940 	bl	8000d34 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 8000ab4:	f000 f88a 	bl	8000bcc <MX_CAN1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512, defaultTaskBuffer, &defaultTaskControlBlock);
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <main+0x54>)
 8000aba:	463c      	mov	r4, r7
 8000abc:	461d      	mov	r5, r3
 8000abe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ac0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ac2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ac6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000aca:	463b      	mov	r3, r7
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f005 fb2d 	bl	800612e <osThreadCreate>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	4a03      	ldr	r2, [pc, #12]	; (8000ae4 <main+0x58>)
 8000ad8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ada:	f005 fb21 	bl	8006120 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <main+0x52>
 8000ae0:	08009b44 	.word	0x08009b44
 8000ae4:	20003258 	.word	0x20003258

08000ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b094      	sub	sp, #80	; 0x50
 8000aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	2234      	movs	r2, #52	; 0x34
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f008 f800 	bl	8008afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000afc:	f107 0308 	add.w	r3, r7, #8
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b0c:	f002 fdfe 	bl	800370c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b10:	4b2c      	ldr	r3, [pc, #176]	; (8000bc4 <SystemClock_Config+0xdc>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	4a2b      	ldr	r2, [pc, #172]	; (8000bc4 <SystemClock_Config+0xdc>)
 8000b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1c:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <SystemClock_Config+0xdc>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b28:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <SystemClock_Config+0xe0>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b30:	4a25      	ldr	r2, [pc, #148]	; (8000bc8 <SystemClock_Config+0xe0>)
 8000b32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b36:	6013      	str	r3, [r2, #0]
 8000b38:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <SystemClock_Config+0xe0>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b44:	2301      	movs	r3, #1
 8000b46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b48:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b4c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b58:	2304      	movs	r3, #4
 8000b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b5c:	2360      	movs	r3, #96	; 0x60
 8000b5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b60:	2302      	movs	r3, #2
 8000b62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b64:	2304      	movs	r3, #4
 8000b66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	4618      	mov	r0, r3
 8000b72:	f002 fe2b 	bl	80037cc <HAL_RCC_OscConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b7c:	f000 f9d8 	bl	8000f30 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b80:	f002 fdd4 	bl	800372c <HAL_PWREx_EnableOverDrive>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b8a:	f000 f9d1 	bl	8000f30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8e:	230f      	movs	r3, #15
 8000b90:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b92:	2302      	movs	r3, #2
 8000b94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ba4:	f107 0308 	add.w	r3, r7, #8
 8000ba8:	2103      	movs	r1, #3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f003 f8bc 	bl	8003d28 <HAL_RCC_ClockConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000bb6:	f000 f9bb 	bl	8000f30 <Error_Handler>
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3750      	adds	r7, #80	; 0x50
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40007000 	.word	0x40007000

08000bcc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <MX_CAN1_Init+0x64>)
 8000bd2:	4a18      	ldr	r2, [pc, #96]	; (8000c34 <MX_CAN1_Init+0x68>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <MX_CAN1_Init+0x64>)
 8000bd8:	2206      	movs	r2, #6
 8000bda:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <MX_CAN1_Init+0x64>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000be2:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <MX_CAN1_Init+0x64>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <MX_CAN1_Init+0x64>)
 8000bea:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000bee:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <MX_CAN1_Init+0x64>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <MX_CAN1_Init+0x64>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <MX_CAN1_Init+0x64>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <MX_CAN1_Init+0x64>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c08:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <MX_CAN1_Init+0x64>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <MX_CAN1_Init+0x64>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <MX_CAN1_Init+0x64>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_CAN1_Init+0x64>)
 8000c1c:	f000 fd94 	bl	8001748 <HAL_CAN_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000c26:	f000 f983 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20002b90 	.word	0x20002b90
 8000c34:	40006400 	.word	0x40006400

08000c38 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <MX_ETH_Init+0x84>)
 8000c3e:	4a20      	ldr	r2, [pc, #128]	; (8000cc0 <MX_ETH_Init+0x88>)
 8000c40:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c42:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <MX_ETH_Init+0x8c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c48:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <MX_ETH_Init+0x8c>)
 8000c4a:	2280      	movs	r2, #128	; 0x80
 8000c4c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <MX_ETH_Init+0x8c>)
 8000c50:	22e1      	movs	r2, #225	; 0xe1
 8000c52:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000c54:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <MX_ETH_Init+0x8c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <MX_ETH_Init+0x8c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000c60:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <MX_ETH_Init+0x8c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <MX_ETH_Init+0x84>)
 8000c68:	4a16      	ldr	r2, [pc, #88]	; (8000cc4 <MX_ETH_Init+0x8c>)
 8000c6a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <MX_ETH_Init+0x84>)
 8000c6e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c72:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_ETH_Init+0x84>)
 8000c76:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <MX_ETH_Init+0x90>)
 8000c78:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <MX_ETH_Init+0x84>)
 8000c7c:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <MX_ETH_Init+0x94>)
 8000c7e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_ETH_Init+0x84>)
 8000c82:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c86:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c88:	480c      	ldr	r0, [pc, #48]	; (8000cbc <MX_ETH_Init+0x84>)
 8000c8a:	f001 fef1 	bl	8002a70 <HAL_ETH_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000c94:	f000 f94c 	bl	8000f30 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c98:	2238      	movs	r2, #56	; 0x38
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <MX_ETH_Init+0x98>)
 8000c9e:	f007 ff2d 	bl	8008afc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <MX_ETH_Init+0x98>)
 8000ca4:	2221      	movs	r2, #33	; 0x21
 8000ca6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MX_ETH_Init+0x98>)
 8000caa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000cae:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <MX_ETH_Init+0x98>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20002bb8 	.word	0x20002bb8
 8000cc0:	40028000 	.word	0x40028000
 8000cc4:	20003ab8 	.word	0x20003ab8
 8000cc8:	20000114 	.word	0x20000114
 8000ccc:	20000074 	.word	0x20000074
 8000cd0:	20002b58 	.word	0x20002b58

08000cd4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000cda:	4a15      	ldr	r2, [pc, #84]	; (8000d30 <MX_USART3_UART_Init+0x5c>)
 8000cdc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000ce0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ce4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000d18:	f003 fe54 	bl	80049c4 <HAL_UART_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d22:	f000 f905 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20002c68 	.word	0x20002c68
 8000d30:	40004800 	.word	0x40004800

08000d34 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d38:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d3e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d42:	2206      	movs	r2, #6
 8000d44:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d48:	2202      	movs	r2, #2
 8000d4a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d54:	2202      	movs	r2, #2
 8000d56:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d78:	f002 fb7f 	bl	800347a <HAL_PCD_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d82:	f000 f8d5 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20002d50 	.word	0x20002d50

08000d90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_DMA_Init+0x38>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <MX_DMA_Init+0x38>)
 8000d9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_DMA_Init+0x38>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2105      	movs	r1, #5
 8000db2:	200e      	movs	r0, #14
 8000db4:	f001 faa9 	bl	800230a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000db8:	200e      	movs	r0, #14
 8000dba:	f001 fac2 	bl	8002342 <HAL_NVIC_EnableIRQ>

}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800

08000dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08c      	sub	sp, #48	; 0x30
 8000dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de2:	4b47      	ldr	r3, [pc, #284]	; (8000f00 <MX_GPIO_Init+0x134>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a46      	ldr	r2, [pc, #280]	; (8000f00 <MX_GPIO_Init+0x134>)
 8000de8:	f043 0304 	orr.w	r3, r3, #4
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b44      	ldr	r3, [pc, #272]	; (8000f00 <MX_GPIO_Init+0x134>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0304 	and.w	r3, r3, #4
 8000df6:	61bb      	str	r3, [r7, #24]
 8000df8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dfa:	4b41      	ldr	r3, [pc, #260]	; (8000f00 <MX_GPIO_Init+0x134>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a40      	ldr	r2, [pc, #256]	; (8000f00 <MX_GPIO_Init+0x134>)
 8000e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b3e      	ldr	r3, [pc, #248]	; (8000f00 <MX_GPIO_Init+0x134>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	4b3b      	ldr	r3, [pc, #236]	; (8000f00 <MX_GPIO_Init+0x134>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a3a      	ldr	r2, [pc, #232]	; (8000f00 <MX_GPIO_Init+0x134>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b38      	ldr	r3, [pc, #224]	; (8000f00 <MX_GPIO_Init+0x134>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	4b35      	ldr	r3, [pc, #212]	; (8000f00 <MX_GPIO_Init+0x134>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a34      	ldr	r2, [pc, #208]	; (8000f00 <MX_GPIO_Init+0x134>)
 8000e30:	f043 0302 	orr.w	r3, r3, #2
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b32      	ldr	r3, [pc, #200]	; (8000f00 <MX_GPIO_Init+0x134>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e42:	4b2f      	ldr	r3, [pc, #188]	; (8000f00 <MX_GPIO_Init+0x134>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a2e      	ldr	r2, [pc, #184]	; (8000f00 <MX_GPIO_Init+0x134>)
 8000e48:	f043 0308 	orr.w	r3, r3, #8
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b2c      	ldr	r3, [pc, #176]	; (8000f00 <MX_GPIO_Init+0x134>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0308 	and.w	r3, r3, #8
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e5a:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <MX_GPIO_Init+0x134>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a28      	ldr	r2, [pc, #160]	; (8000f00 <MX_GPIO_Init+0x134>)
 8000e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <MX_GPIO_Init+0x134>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f244 0181 	movw	r1, #16513	; 0x4081
 8000e78:	4822      	ldr	r0, [pc, #136]	; (8000f04 <MX_GPIO_Init+0x138>)
 8000e7a:	f002 facb 	bl	8003414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2140      	movs	r1, #64	; 0x40
 8000e82:	4821      	ldr	r0, [pc, #132]	; (8000f08 <MX_GPIO_Init+0x13c>)
 8000e84:	f002 fac6 	bl	8003414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	481b      	ldr	r0, [pc, #108]	; (8000f0c <MX_GPIO_Init+0x140>)
 8000ea0:	f002 f90c 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ea4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4811      	ldr	r0, [pc, #68]	; (8000f04 <MX_GPIO_Init+0x138>)
 8000ebe:	f002 f8fd 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ec2:	2340      	movs	r3, #64	; 0x40
 8000ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	480b      	ldr	r0, [pc, #44]	; (8000f08 <MX_GPIO_Init+0x13c>)
 8000eda:	f002 f8ef 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ede:	2380      	movs	r3, #128	; 0x80
 8000ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4805      	ldr	r0, [pc, #20]	; (8000f08 <MX_GPIO_Init+0x13c>)
 8000ef2:	f002 f8e3 	bl	80030bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ef6:	bf00      	nop
 8000ef8:	3730      	adds	r7, #48	; 0x30
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020400 	.word	0x40020400
 8000f08:	40021800 	.word	0x40021800
 8000f0c:	40020800 	.word	0x40020800

08000f10 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);  // PINのPin stateを反転
 8000f18:	2180      	movs	r1, #128	; 0x80
 8000f1a:	4804      	ldr	r0, [pc, #16]	; (8000f2c <StartDefaultTask+0x1c>)
 8000f1c:	f002 fa93 	bl	8003446 <HAL_GPIO_TogglePin>
	  osDelay(500);  // 500ms停止 (この間に他のタスクが実行されるイメージ)
 8000f20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f24:	f005 f94f 	bl	80061c6 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);  // PINのPin stateを反転
 8000f28:	e7f6      	b.n	8000f18 <StartDefaultTask+0x8>
 8000f2a:	bf00      	nop
 8000f2c:	40020400 	.word	0x40020400

08000f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f34:	b672      	cpsid	i
}
 8000f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <Error_Handler+0x8>
	...

08000f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_MspInit+0x4c>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	4a10      	ldr	r2, [pc, #64]	; (8000f88 <HAL_MspInit+0x4c>)
 8000f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_MspInit+0x4c>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <HAL_MspInit+0x4c>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <HAL_MspInit+0x4c>)
 8000f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f64:	6453      	str	r3, [r2, #68]	; 0x44
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_MspInit+0x4c>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	210f      	movs	r1, #15
 8000f76:	f06f 0001 	mvn.w	r0, #1
 8000f7a:	f001 f9c6 	bl	800230a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40023800 	.word	0x40023800

08000f8c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a23      	ldr	r2, [pc, #140]	; (8001038 <HAL_CAN_MspInit+0xac>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d13f      	bne.n	800102e <HAL_CAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fae:	4b23      	ldr	r3, [pc, #140]	; (800103c <HAL_CAN_MspInit+0xb0>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	4a22      	ldr	r2, [pc, #136]	; (800103c <HAL_CAN_MspInit+0xb0>)
 8000fb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fba:	4b20      	ldr	r3, [pc, #128]	; (800103c <HAL_CAN_MspInit+0xb0>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	; (800103c <HAL_CAN_MspInit+0xb0>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a1c      	ldr	r2, [pc, #112]	; (800103c <HAL_CAN_MspInit+0xb0>)
 8000fcc:	f043 0308 	orr.w	r3, r3, #8
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	; (800103c <HAL_CAN_MspInit+0xb0>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fea:	2303      	movs	r3, #3
 8000fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000fee:	2309      	movs	r3, #9
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4811      	ldr	r0, [pc, #68]	; (8001040 <HAL_CAN_MspInit+0xb4>)
 8000ffa:	f002 f85f 	bl	80030bc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2105      	movs	r1, #5
 8001002:	2013      	movs	r0, #19
 8001004:	f001 f981 	bl	800230a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001008:	2013      	movs	r0, #19
 800100a:	f001 f99a 	bl	8002342 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2105      	movs	r1, #5
 8001012:	2014      	movs	r0, #20
 8001014:	f001 f979 	bl	800230a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001018:	2014      	movs	r0, #20
 800101a:	f001 f992 	bl	8002342 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2105      	movs	r1, #5
 8001022:	2015      	movs	r0, #21
 8001024:	f001 f971 	bl	800230a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001028:	2015      	movs	r0, #21
 800102a:	f001 f98a 	bl	8002342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	; 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40006400 	.word	0x40006400
 800103c:	40023800 	.word	0x40023800
 8001040:	40020c00 	.word	0x40020c00

08001044 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08e      	sub	sp, #56	; 0x38
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a4e      	ldr	r2, [pc, #312]	; (800119c <HAL_ETH_MspInit+0x158>)
 8001062:	4293      	cmp	r3, r2
 8001064:	f040 8096 	bne.w	8001194 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001068:	4b4d      	ldr	r3, [pc, #308]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106c:	4a4c      	ldr	r2, [pc, #304]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 800106e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001072:	6313      	str	r3, [r2, #48]	; 0x30
 8001074:	4b4a      	ldr	r3, [pc, #296]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800107c:	623b      	str	r3, [r7, #32]
 800107e:	6a3b      	ldr	r3, [r7, #32]
 8001080:	4b47      	ldr	r3, [pc, #284]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	4a46      	ldr	r2, [pc, #280]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 8001086:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800108a:	6313      	str	r3, [r2, #48]	; 0x30
 800108c:	4b44      	ldr	r3, [pc, #272]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001090:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001094:	61fb      	str	r3, [r7, #28]
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	4b41      	ldr	r3, [pc, #260]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	4a40      	ldr	r2, [pc, #256]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 800109e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80010a2:	6313      	str	r3, [r2, #48]	; 0x30
 80010a4:	4b3e      	ldr	r3, [pc, #248]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80010ac:	61bb      	str	r3, [r7, #24]
 80010ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b0:	4b3b      	ldr	r3, [pc, #236]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	4a3a      	ldr	r2, [pc, #232]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 80010b6:	f043 0304 	orr.w	r3, r3, #4
 80010ba:	6313      	str	r3, [r2, #48]	; 0x30
 80010bc:	4b38      	ldr	r3, [pc, #224]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 80010be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	4b35      	ldr	r3, [pc, #212]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 80010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010cc:	4a34      	ldr	r2, [pc, #208]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6313      	str	r3, [r2, #48]	; 0x30
 80010d4:	4b32      	ldr	r3, [pc, #200]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e0:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 80010e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e4:	4a2e      	ldr	r2, [pc, #184]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 80010e6:	f043 0302 	orr.w	r3, r3, #2
 80010ea:	6313      	str	r3, [r2, #48]	; 0x30
 80010ec:	4b2c      	ldr	r3, [pc, #176]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010f8:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fc:	4a28      	ldr	r2, [pc, #160]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 80010fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001102:	6313      	str	r3, [r2, #48]	; 0x30
 8001104:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <HAL_ETH_MspInit+0x15c>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001110:	2332      	movs	r3, #50	; 0x32
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111c:	2303      	movs	r3, #3
 800111e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001120:	230b      	movs	r3, #11
 8001122:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001128:	4619      	mov	r1, r3
 800112a:	481e      	ldr	r0, [pc, #120]	; (80011a4 <HAL_ETH_MspInit+0x160>)
 800112c:	f001 ffc6 	bl	80030bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001130:	2386      	movs	r3, #134	; 0x86
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001140:	230b      	movs	r3, #11
 8001142:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001148:	4619      	mov	r1, r3
 800114a:	4817      	ldr	r0, [pc, #92]	; (80011a8 <HAL_ETH_MspInit+0x164>)
 800114c:	f001 ffb6 	bl	80030bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001150:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001162:	230b      	movs	r3, #11
 8001164:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116a:	4619      	mov	r1, r3
 800116c:	480f      	ldr	r0, [pc, #60]	; (80011ac <HAL_ETH_MspInit+0x168>)
 800116e:	f001 ffa5 	bl	80030bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001172:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001180:	2303      	movs	r3, #3
 8001182:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001184:	230b      	movs	r3, #11
 8001186:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118c:	4619      	mov	r1, r3
 800118e:	4808      	ldr	r0, [pc, #32]	; (80011b0 <HAL_ETH_MspInit+0x16c>)
 8001190:	f001 ff94 	bl	80030bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001194:	bf00      	nop
 8001196:	3738      	adds	r7, #56	; 0x38
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40028000 	.word	0x40028000
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020800 	.word	0x40020800
 80011a8:	40020000 	.word	0x40020000
 80011ac:	40020400 	.word	0x40020400
 80011b0:	40021800 	.word	0x40021800

080011b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b0ae      	sub	sp, #184	; 0xb8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2290      	movs	r2, #144	; 0x90
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f007 fc91 	bl	8008afc <memset>
  if(huart->Instance==USART3)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a3d      	ldr	r2, [pc, #244]	; (80012d4 <HAL_UART_MspInit+0x120>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d172      	bne.n	80012ca <HAL_UART_MspInit+0x116>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4618      	mov	r0, r3
 80011f4:	f002 ffbe 	bl	8004174 <HAL_RCCEx_PeriphCLKConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011fe:	f7ff fe97 	bl	8000f30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001202:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <HAL_UART_MspInit+0x124>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a34      	ldr	r2, [pc, #208]	; (80012d8 <HAL_UART_MspInit+0x124>)
 8001208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <HAL_UART_MspInit+0x124>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800121a:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <HAL_UART_MspInit+0x124>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a2e      	ldr	r2, [pc, #184]	; (80012d8 <HAL_UART_MspInit+0x124>)
 8001220:	f043 0308 	orr.w	r3, r3, #8
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b2c      	ldr	r3, [pc, #176]	; (80012d8 <HAL_UART_MspInit+0x124>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0308 	and.w	r3, r3, #8
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001232:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001236:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800124c:	2307      	movs	r3, #7
 800124e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001252:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001256:	4619      	mov	r1, r3
 8001258:	4820      	ldr	r0, [pc, #128]	; (80012dc <HAL_UART_MspInit+0x128>)
 800125a:	f001 ff2f 	bl	80030bc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800125e:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <HAL_UART_MspInit+0x12c>)
 8001260:	4a20      	ldr	r2, [pc, #128]	; (80012e4 <HAL_UART_MspInit+0x130>)
 8001262:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001264:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <HAL_UART_MspInit+0x12c>)
 8001266:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800126a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800126c:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <HAL_UART_MspInit+0x12c>)
 800126e:	2240      	movs	r2, #64	; 0x40
 8001270:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001272:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <HAL_UART_MspInit+0x12c>)
 8001274:	2200      	movs	r2, #0
 8001276:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001278:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <HAL_UART_MspInit+0x12c>)
 800127a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800127e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <HAL_UART_MspInit+0x12c>)
 8001282:	2200      	movs	r2, #0
 8001284:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <HAL_UART_MspInit+0x12c>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_UART_MspInit+0x12c>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <HAL_UART_MspInit+0x12c>)
 8001294:	2200      	movs	r2, #0
 8001296:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <HAL_UART_MspInit+0x12c>)
 800129a:	2200      	movs	r2, #0
 800129c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800129e:	4810      	ldr	r0, [pc, #64]	; (80012e0 <HAL_UART_MspInit+0x12c>)
 80012a0:	f001 f86a 	bl	8002378 <HAL_DMA_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 80012aa:	f7ff fe41 	bl	8000f30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a0b      	ldr	r2, [pc, #44]	; (80012e0 <HAL_UART_MspInit+0x12c>)
 80012b2:	671a      	str	r2, [r3, #112]	; 0x70
 80012b4:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <HAL_UART_MspInit+0x12c>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2105      	movs	r1, #5
 80012be:	2027      	movs	r0, #39	; 0x27
 80012c0:	f001 f823 	bl	800230a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80012c4:	2027      	movs	r0, #39	; 0x27
 80012c6:	f001 f83c 	bl	8002342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012ca:	bf00      	nop
 80012cc:	37b8      	adds	r7, #184	; 0xb8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40004800 	.word	0x40004800
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020c00 	.word	0x40020c00
 80012e0:	20002cf0 	.word	0x20002cf0
 80012e4:	40026058 	.word	0x40026058

080012e8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b0ae      	sub	sp, #184	; 0xb8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2290      	movs	r2, #144	; 0x90
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f007 fbf7 	bl	8008afc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001316:	d159      	bne.n	80013cc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001318:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800131c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800131e:	2300      	movs	r3, #0
 8001320:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4618      	mov	r0, r3
 800132a:	f002 ff23 	bl	8004174 <HAL_RCCEx_PeriphCLKConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001334:	f7ff fdfc 	bl	8000f30 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001338:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <HAL_PCD_MspInit+0xec>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	4a25      	ldr	r2, [pc, #148]	; (80013d4 <HAL_PCD_MspInit+0xec>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6313      	str	r3, [r2, #48]	; 0x30
 8001344:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <HAL_PCD_MspInit+0xec>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001350:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001354:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001364:	2303      	movs	r3, #3
 8001366:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800136a:	230a      	movs	r3, #10
 800136c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001374:	4619      	mov	r1, r3
 8001376:	4818      	ldr	r0, [pc, #96]	; (80013d8 <HAL_PCD_MspInit+0xf0>)
 8001378:	f001 fea0 	bl	80030bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800137c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001380:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001384:	2300      	movs	r3, #0
 8001386:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001390:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001394:	4619      	mov	r1, r3
 8001396:	4810      	ldr	r0, [pc, #64]	; (80013d8 <HAL_PCD_MspInit+0xf0>)
 8001398:	f001 fe90 	bl	80030bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800139c:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <HAL_PCD_MspInit+0xec>)
 800139e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a0:	4a0c      	ldr	r2, [pc, #48]	; (80013d4 <HAL_PCD_MspInit+0xec>)
 80013a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a6:	6353      	str	r3, [r2, #52]	; 0x34
 80013a8:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_PCD_MspInit+0xec>)
 80013aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <HAL_PCD_MspInit+0xec>)
 80013b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b8:	4a06      	ldr	r2, [pc, #24]	; (80013d4 <HAL_PCD_MspInit+0xec>)
 80013ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013be:	6453      	str	r3, [r2, #68]	; 0x44
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <HAL_PCD_MspInit+0xec>)
 80013c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013cc:	bf00      	nop
 80013ce:	37b8      	adds	r7, #184	; 0xb8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020000 	.word	0x40020000

080013dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <NMI_Handler+0x4>

080013e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <HardFault_Handler+0x4>

080013e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <MemManage_Handler+0x4>

080013ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <BusFault_Handler+0x4>

080013f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <UsageFault_Handler+0x4>

080013fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800140c:	f000 f958 	bl	80016c0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001410:	f006 fad0 	bl	80079b4 <xTaskGetSchedulerState>
 8001414:	4603      	mov	r3, r0
 8001416:	2b01      	cmp	r3, #1
 8001418:	d001      	beq.n	800141e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800141a:	f007 f8bd 	bl	8008598 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <DMA1_Stream3_IRQHandler+0x10>)
 800142a:	f001 f8e5 	bl	80025f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20002cf0 	.word	0x20002cf0

08001438 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <CAN1_TX_IRQHandler+0x10>)
 800143e:	f000 fc95 	bl	8001d6c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20002b90 	.word	0x20002b90

0800144c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <CAN1_RX0_IRQHandler+0x10>)
 8001452:	f000 fc8b 	bl	8001d6c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20002b90 	.word	0x20002b90

08001460 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <CAN1_RX1_IRQHandler+0x10>)
 8001466:	f000 fc81 	bl	8001d6c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20002b90 	.word	0x20002b90

08001474 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <USART3_IRQHandler+0x10>)
 800147a:	f003 fb75 	bl	8004b68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20002c68 	.word	0x20002c68

08001488 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	e00a      	b.n	80014b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800149a:	f3af 8000 	nop.w
 800149e:	4601      	mov	r1, r0
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	1c5a      	adds	r2, r3, #1
 80014a4:	60ba      	str	r2, [r7, #8]
 80014a6:	b2ca      	uxtb	r2, r1
 80014a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	3301      	adds	r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	dbf0      	blt.n	800149a <_read+0x12>
  }

  return len;
 80014b8:	687b      	ldr	r3, [r7, #4]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	60f8      	str	r0, [r7, #12]
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	e009      	b.n	80014e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	60ba      	str	r2, [r7, #8]
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fa77 	bl	80009d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	3301      	adds	r3, #1
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	dbf1      	blt.n	80014d4 <_write+0x12>
  }
  return len;
 80014f0:	687b      	ldr	r3, [r7, #4]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <_close>:

int _close(int file)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001522:	605a      	str	r2, [r3, #4]
  return 0;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <_isatty>:

int _isatty(int file)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800153a:	2301      	movs	r3, #1
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800156c:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <_sbrk+0x5c>)
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <_sbrk+0x60>)
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001578:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <_sbrk+0x64>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <_sbrk+0x64>)
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <_sbrk+0x68>)
 8001584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <_sbrk+0x64>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	429a      	cmp	r2, r3
 8001592:	d207      	bcs.n	80015a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001594:	f007 fa7a 	bl	8008a8c <__errno>
 8001598:	4603      	mov	r3, r0
 800159a:	220c      	movs	r2, #12
 800159c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	e009      	b.n	80015b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015aa:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <_sbrk+0x64>)
 80015b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015b6:	68fb      	ldr	r3, [r7, #12]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20080000 	.word	0x20080000
 80015c4:	00000400 	.word	0x00000400
 80015c8:	20003ac0 	.word	0x20003ac0
 80015cc:	20007960 	.word	0x20007960

080015d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <SystemInit+0x20>)
 80015d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <SystemInit+0x20>)
 80015dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800162c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015f8:	480d      	ldr	r0, [pc, #52]	; (8001630 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015fa:	490e      	ldr	r1, [pc, #56]	; (8001634 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015fc:	4a0e      	ldr	r2, [pc, #56]	; (8001638 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001600:	e002      	b.n	8001608 <LoopCopyDataInit>

08001602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001606:	3304      	adds	r3, #4

08001608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800160c:	d3f9      	bcc.n	8001602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160e:	4a0b      	ldr	r2, [pc, #44]	; (800163c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001610:	4c0b      	ldr	r4, [pc, #44]	; (8001640 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001614:	e001      	b.n	800161a <LoopFillZerobss>

08001616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001618:	3204      	adds	r2, #4

0800161a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800161c:	d3fb      	bcc.n	8001616 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800161e:	f7ff ffd7 	bl	80015d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001622:	f007 fa39 	bl	8008a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001626:	f7ff fa31 	bl	8000a8c <main>
  bx  lr    
 800162a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800162c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001634:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001638:	08009c40 	.word	0x08009c40
  ldr r2, =_sbss
 800163c:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8001640:	20007960 	.word	0x20007960

08001644 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001644:	e7fe      	b.n	8001644 <ADC_IRQHandler>

08001646 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164a:	2003      	movs	r0, #3
 800164c:	f000 fe52 	bl	80022f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001650:	200f      	movs	r0, #15
 8001652:	f000 f805 	bl	8001660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001656:	f7ff fc71 	bl	8000f3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_InitTick+0x54>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_InitTick+0x58>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001676:	fbb3 f3f1 	udiv	r3, r3, r1
 800167a:	fbb2 f3f3 	udiv	r3, r2, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f000 fe6d 	bl	800235e <HAL_SYSTICK_Config>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e00e      	b.n	80016ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b0f      	cmp	r3, #15
 8001692:	d80a      	bhi.n	80016aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001694:	2200      	movs	r2, #0
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f000 fe35 	bl	800230a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a0:	4a06      	ldr	r2, [pc, #24]	; (80016bc <HAL_InitTick+0x5c>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e000      	b.n	80016ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000000 	.word	0x20000000
 80016b8:	20000008 	.word	0x20000008
 80016bc:	20000004 	.word	0x20000004

080016c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_IncTick+0x20>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_IncTick+0x24>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <HAL_IncTick+0x24>)
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	20000008 	.word	0x20000008
 80016e4:	20003ac4 	.word	0x20003ac4

080016e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return uwTick;
 80016ec:	4b03      	ldr	r3, [pc, #12]	; (80016fc <HAL_GetTick+0x14>)
 80016ee:	681b      	ldr	r3, [r3, #0]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20003ac4 	.word	0x20003ac4

08001700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001708:	f7ff ffee 	bl	80016e8 <HAL_GetTick>
 800170c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001718:	d005      	beq.n	8001726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_Delay+0x44>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4413      	add	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001726:	bf00      	nop
 8001728:	f7ff ffde 	bl	80016e8 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	429a      	cmp	r2, r3
 8001736:	d8f7      	bhi.n	8001728 <HAL_Delay+0x28>
  {
  }
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000008 	.word	0x20000008

08001748 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e0ed      	b.n	8001936 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d102      	bne.n	800176c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff fc10 	bl	8000f8c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0201 	orr.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800177c:	f7ff ffb4 	bl	80016e8 <HAL_GetTick>
 8001780:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001782:	e012      	b.n	80017aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001784:	f7ff ffb0 	bl	80016e8 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b0a      	cmp	r3, #10
 8001790:	d90b      	bls.n	80017aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2205      	movs	r2, #5
 80017a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e0c5      	b.n	8001936 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0e5      	beq.n	8001784 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0202 	bic.w	r2, r2, #2
 80017c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017c8:	f7ff ff8e 	bl	80016e8 <HAL_GetTick>
 80017cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017ce:	e012      	b.n	80017f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017d0:	f7ff ff8a 	bl	80016e8 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b0a      	cmp	r3, #10
 80017dc:	d90b      	bls.n	80017f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2205      	movs	r2, #5
 80017ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e09f      	b.n	8001936 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1e5      	bne.n	80017d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	7e1b      	ldrb	r3, [r3, #24]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d108      	bne.n	800181e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	e007      	b.n	800182e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800182c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	7e5b      	ldrb	r3, [r3, #25]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d108      	bne.n	8001848 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	e007      	b.n	8001858 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001856:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7e9b      	ldrb	r3, [r3, #26]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d108      	bne.n	8001872 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f042 0220 	orr.w	r2, r2, #32
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	e007      	b.n	8001882 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0220 	bic.w	r2, r2, #32
 8001880:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	7edb      	ldrb	r3, [r3, #27]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d108      	bne.n	800189c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0210 	bic.w	r2, r2, #16
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	e007      	b.n	80018ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0210 	orr.w	r2, r2, #16
 80018aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	7f1b      	ldrb	r3, [r3, #28]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d108      	bne.n	80018c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 0208 	orr.w	r2, r2, #8
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	e007      	b.n	80018d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0208 	bic.w	r2, r2, #8
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	7f5b      	ldrb	r3, [r3, #29]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d108      	bne.n	80018f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 0204 	orr.w	r2, r2, #4
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	e007      	b.n	8001900 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0204 	bic.w	r2, r2, #4
 80018fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	ea42 0103 	orr.w	r1, r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	1e5a      	subs	r2, r3, #1
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	430a      	orrs	r2, r1
 8001924:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800193e:	b480      	push	{r7}
 8001940:	b089      	sub	sp, #36	; 0x24
 8001942:	af00      	add	r7, sp, #0
 8001944:	60f8      	str	r0, [r7, #12]
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001952:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800195c:	7ffb      	ldrb	r3, [r7, #31]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d003      	beq.n	800196a <HAL_CAN_AddTxMessage+0x2c>
 8001962:	7ffb      	ldrb	r3, [r7, #31]
 8001964:	2b02      	cmp	r3, #2
 8001966:	f040 80ad 	bne.w	8001ac4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d10a      	bne.n	800198a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800197a:	2b00      	cmp	r3, #0
 800197c:	d105      	bne.n	800198a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 8095 	beq.w	8001ab4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	0e1b      	lsrs	r3, r3, #24
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001994:	2201      	movs	r2, #1
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	409a      	lsls	r2, r3
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10d      	bne.n	80019c2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019b0:	68f9      	ldr	r1, [r7, #12]
 80019b2:	6809      	ldr	r1, [r1, #0]
 80019b4:	431a      	orrs	r2, r3
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	3318      	adds	r3, #24
 80019ba:	011b      	lsls	r3, r3, #4
 80019bc:	440b      	add	r3, r1
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	e00f      	b.n	80019e2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019cc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019d2:	68f9      	ldr	r1, [r7, #12]
 80019d4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80019d6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	3318      	adds	r3, #24
 80019dc:	011b      	lsls	r3, r3, #4
 80019de:	440b      	add	r3, r1
 80019e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6819      	ldr	r1, [r3, #0]
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	691a      	ldr	r2, [r3, #16]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	3318      	adds	r3, #24
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	440b      	add	r3, r1
 80019f2:	3304      	adds	r3, #4
 80019f4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	7d1b      	ldrb	r3, [r3, #20]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d111      	bne.n	8001a22 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	3318      	adds	r3, #24
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	4413      	add	r3, r2
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	6811      	ldr	r1, [r2, #0]
 8001a12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3318      	adds	r3, #24
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	440b      	add	r3, r1
 8001a1e:	3304      	adds	r3, #4
 8001a20:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3307      	adds	r3, #7
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	061a      	lsls	r2, r3, #24
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3306      	adds	r3, #6
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	041b      	lsls	r3, r3, #16
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3305      	adds	r3, #5
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	021b      	lsls	r3, r3, #8
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	3204      	adds	r2, #4
 8001a42:	7812      	ldrb	r2, [r2, #0]
 8001a44:	4610      	mov	r0, r2
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	6811      	ldr	r1, [r2, #0]
 8001a4a:	ea43 0200 	orr.w	r2, r3, r0
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	440b      	add	r3, r1
 8001a54:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001a58:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3303      	adds	r3, #3
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	061a      	lsls	r2, r3, #24
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3302      	adds	r3, #2
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	041b      	lsls	r3, r3, #16
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	4313      	orrs	r3, r2
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	7812      	ldrb	r2, [r2, #0]
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	6811      	ldr	r1, [r2, #0]
 8001a80:	ea43 0200 	orr.w	r2, r3, r0
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	440b      	add	r3, r1
 8001a8a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001a8e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	3318      	adds	r3, #24
 8001a98:	011b      	lsls	r3, r3, #4
 8001a9a:	4413      	add	r3, r2
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	6811      	ldr	r1, [r2, #0]
 8001aa2:	f043 0201 	orr.w	r2, r3, #1
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3318      	adds	r3, #24
 8001aaa:	011b      	lsls	r3, r3, #4
 8001aac:	440b      	add	r3, r1
 8001aae:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	e00e      	b.n	8001ad2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e006      	b.n	8001ad2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
  }
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3724      	adds	r7, #36	; 0x24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b085      	sub	sp, #20
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001af0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001af2:	7afb      	ldrb	r3, [r7, #11]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d002      	beq.n	8001afe <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001af8:	7afb      	ldrb	r3, [r7, #11]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d11d      	bne.n	8001b3a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d002      	beq.n	8001b26 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	3301      	adds	r3, #1
 8001b24:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	3301      	adds	r3, #1
 8001b38:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
 8001b54:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b5c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d003      	beq.n	8001b6c <HAL_CAN_GetRxMessage+0x24>
 8001b64:	7dfb      	ldrb	r3, [r7, #23]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	f040 80f3 	bne.w	8001d52 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10e      	bne.n	8001b90 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d116      	bne.n	8001bae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0e7      	b.n	8001d60 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d107      	bne.n	8001bae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e0d8      	b.n	8001d60 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	331b      	adds	r3, #27
 8001bb6:	011b      	lsls	r3, r3, #4
 8001bb8:	4413      	add	r3, r2
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0204 	and.w	r2, r3, #4
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10c      	bne.n	8001be6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	331b      	adds	r3, #27
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	4413      	add	r3, r2
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	0d5b      	lsrs	r3, r3, #21
 8001bdc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	e00b      	b.n	8001bfe <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	331b      	adds	r3, #27
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	4413      	add	r3, r2
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	08db      	lsrs	r3, r3, #3
 8001bf6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	331b      	adds	r3, #27
 8001c06:	011b      	lsls	r3, r3, #4
 8001c08:	4413      	add	r3, r2
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0202 	and.w	r2, r3, #2
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	331b      	adds	r3, #27
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	4413      	add	r3, r2
 8001c20:	3304      	adds	r3, #4
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 020f 	and.w	r2, r3, #15
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	331b      	adds	r3, #27
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	4413      	add	r3, r2
 8001c38:	3304      	adds	r3, #4
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	331b      	adds	r3, #27
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	4413      	add	r3, r2
 8001c50:	3304      	adds	r3, #4
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	0c1b      	lsrs	r3, r3, #16
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	011b      	lsls	r3, r3, #4
 8001c64:	4413      	add	r3, r2
 8001c66:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	0a1a      	lsrs	r2, r3, #8
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	3301      	adds	r3, #1
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	4413      	add	r3, r2
 8001c96:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	0c1a      	lsrs	r2, r3, #16
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	4413      	add	r3, r2
 8001cb0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	0e1a      	lsrs	r2, r3, #24
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	3303      	adds	r3, #3
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	4413      	add	r3, r2
 8001cca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	0a1a      	lsrs	r2, r3, #8
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	3305      	adds	r3, #5
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	0c1a      	lsrs	r2, r3, #16
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	3306      	adds	r3, #6
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	4413      	add	r3, r2
 8001d16:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	0e1a      	lsrs	r2, r3, #24
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	3307      	adds	r3, #7
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d108      	bne.n	8001d3e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0220 	orr.w	r2, r2, #32
 8001d3a:	60da      	str	r2, [r3, #12]
 8001d3c:	e007      	b.n	8001d4e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f042 0220 	orr.w	r2, r2, #32
 8001d4c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e006      	b.n	8001d60 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
  }
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	371c      	adds	r7, #28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d07c      	beq.n	8001eac <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d023      	beq.n	8001e04 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7fe fe12 	bl	80009f8 <HAL_CAN_TxMailbox0CompleteCallback>
 8001dd4:	e016      	b.n	8001e04 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d004      	beq.n	8001dea <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
 8001de8:	e00c      	b.n	8001e04 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d004      	beq.n	8001dfe <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8001dfc:	e002      	b.n	8001e04 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7fe fe04 	bl	8000a0c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d024      	beq.n	8001e58 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e16:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7fe fdfc 	bl	8000a20 <HAL_CAN_TxMailbox1CompleteCallback>
 8001e28:	e016      	b.n	8001e58 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d004      	beq.n	8001e3e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e3c:	e00c      	b.n	8001e58 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d004      	beq.n	8001e52 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e50:	e002      	b.n	8001e58 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7fe fdee 	bl	8000a34 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d024      	beq.n	8001eac <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e6a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7fe fde6 	bl	8000a48 <HAL_CAN_TxMailbox2CompleteCallback>
 8001e7c:	e016      	b.n	8001eac <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d004      	beq.n	8001e92 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e90:	e00c      	b.n	8001eac <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d004      	beq.n	8001ea6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea4:	e002      	b.n	8001eac <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7fe fdd8 	bl	8000a5c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00c      	beq.n	8001ed0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f003 0310 	and.w	r3, r3, #16
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d007      	beq.n	8001ed0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2210      	movs	r2, #16
 8001ece:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00b      	beq.n	8001ef2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d006      	beq.n	8001ef2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2208      	movs	r2, #8
 8001eea:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f8f4 	bl	80020da <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ef2:	6a3b      	ldr	r3, [r7, #32]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d009      	beq.n	8001f10 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d002      	beq.n	8001f10 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7fe fdb0 	bl	8000a70 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00c      	beq.n	8001f34 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	f003 0310 	and.w	r3, r3, #16
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d007      	beq.n	8001f34 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2210      	movs	r2, #16
 8001f32:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	f003 0320 	and.w	r3, r3, #32
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00b      	beq.n	8001f56 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d006      	beq.n	8001f56 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2208      	movs	r2, #8
 8001f4e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f8d6 	bl	8002102 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d009      	beq.n	8001f74 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d002      	beq.n	8001f74 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f8bd 	bl	80020ee <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001f74:	6a3b      	ldr	r3, [r7, #32]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00b      	beq.n	8001f96 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	f003 0310 	and.w	r3, r3, #16
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d006      	beq.n	8001f96 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2210      	movs	r2, #16
 8001f8e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f8c0 	bl	8002116 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00b      	beq.n	8001fb8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d006      	beq.n	8001fb8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2208      	movs	r2, #8
 8001fb0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f8b9 	bl	800212a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d07b      	beq.n	80020ba <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d072      	beq.n	80020b2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d008      	beq.n	8001fe8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d008      	beq.n	8002004 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	f043 0302 	orr.w	r3, r3, #2
 8002002:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200a:	2b00      	cmp	r3, #0
 800200c:	d008      	beq.n	8002020 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	f043 0304 	orr.w	r3, r3, #4
 800201e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002026:	2b00      	cmp	r3, #0
 8002028:	d043      	beq.n	80020b2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002030:	2b00      	cmp	r3, #0
 8002032:	d03e      	beq.n	80020b2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800203a:	2b60      	cmp	r3, #96	; 0x60
 800203c:	d02b      	beq.n	8002096 <HAL_CAN_IRQHandler+0x32a>
 800203e:	2b60      	cmp	r3, #96	; 0x60
 8002040:	d82e      	bhi.n	80020a0 <HAL_CAN_IRQHandler+0x334>
 8002042:	2b50      	cmp	r3, #80	; 0x50
 8002044:	d022      	beq.n	800208c <HAL_CAN_IRQHandler+0x320>
 8002046:	2b50      	cmp	r3, #80	; 0x50
 8002048:	d82a      	bhi.n	80020a0 <HAL_CAN_IRQHandler+0x334>
 800204a:	2b40      	cmp	r3, #64	; 0x40
 800204c:	d019      	beq.n	8002082 <HAL_CAN_IRQHandler+0x316>
 800204e:	2b40      	cmp	r3, #64	; 0x40
 8002050:	d826      	bhi.n	80020a0 <HAL_CAN_IRQHandler+0x334>
 8002052:	2b30      	cmp	r3, #48	; 0x30
 8002054:	d010      	beq.n	8002078 <HAL_CAN_IRQHandler+0x30c>
 8002056:	2b30      	cmp	r3, #48	; 0x30
 8002058:	d822      	bhi.n	80020a0 <HAL_CAN_IRQHandler+0x334>
 800205a:	2b10      	cmp	r3, #16
 800205c:	d002      	beq.n	8002064 <HAL_CAN_IRQHandler+0x2f8>
 800205e:	2b20      	cmp	r3, #32
 8002060:	d005      	beq.n	800206e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002062:	e01d      	b.n	80020a0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	f043 0308 	orr.w	r3, r3, #8
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800206c:	e019      	b.n	80020a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	f043 0310 	orr.w	r3, r3, #16
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002076:	e014      	b.n	80020a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	f043 0320 	orr.w	r3, r3, #32
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002080:	e00f      	b.n	80020a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800208a:	e00a      	b.n	80020a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002094:	e005      	b.n	80020a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800209e:	e000      	b.n	80020a2 <HAL_CAN_IRQHandler+0x336>
            break;
 80020a0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	699a      	ldr	r2, [r3, #24]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80020b0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2204      	movs	r2, #4
 80020b8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f836 	bl	800213e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80020d2:	bf00      	nop
 80020d4:	3728      	adds	r7, #40	; 0x28
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <__NVIC_SetPriorityGrouping+0x40>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002170:	4013      	ands	r3, r2
 8002172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <__NVIC_SetPriorityGrouping+0x44>)
 800217e:	4313      	orrs	r3, r2
 8002180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002182:	4a04      	ldr	r2, [pc, #16]	; (8002194 <__NVIC_SetPriorityGrouping+0x40>)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	60d3      	str	r3, [r2, #12]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00
 8002198:	05fa0000 	.word	0x05fa0000

0800219c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a0:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <__NVIC_GetPriorityGrouping+0x18>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	f003 0307 	and.w	r3, r3, #7
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	db0b      	blt.n	80021e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	f003 021f 	and.w	r2, r3, #31
 80021d0:	4907      	ldr	r1, [pc, #28]	; (80021f0 <__NVIC_EnableIRQ+0x38>)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	2001      	movs	r0, #1
 80021da:	fa00 f202 	lsl.w	r2, r0, r2
 80021de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	e000e100 	.word	0xe000e100

080021f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	6039      	str	r1, [r7, #0]
 80021fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	2b00      	cmp	r3, #0
 8002206:	db0a      	blt.n	800221e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	b2da      	uxtb	r2, r3
 800220c:	490c      	ldr	r1, [pc, #48]	; (8002240 <__NVIC_SetPriority+0x4c>)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	0112      	lsls	r2, r2, #4
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	440b      	add	r3, r1
 8002218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800221c:	e00a      	b.n	8002234 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	b2da      	uxtb	r2, r3
 8002222:	4908      	ldr	r1, [pc, #32]	; (8002244 <__NVIC_SetPriority+0x50>)
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	3b04      	subs	r3, #4
 800222c:	0112      	lsls	r2, r2, #4
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	440b      	add	r3, r1
 8002232:	761a      	strb	r2, [r3, #24]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000e100 	.word	0xe000e100
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002248:	b480      	push	{r7}
 800224a:	b089      	sub	sp, #36	; 0x24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f1c3 0307 	rsb	r3, r3, #7
 8002262:	2b04      	cmp	r3, #4
 8002264:	bf28      	it	cs
 8002266:	2304      	movcs	r3, #4
 8002268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3304      	adds	r3, #4
 800226e:	2b06      	cmp	r3, #6
 8002270:	d902      	bls.n	8002278 <NVIC_EncodePriority+0x30>
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3b03      	subs	r3, #3
 8002276:	e000      	b.n	800227a <NVIC_EncodePriority+0x32>
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800227c:	f04f 32ff 	mov.w	r2, #4294967295
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43da      	mvns	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	401a      	ands	r2, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002290:	f04f 31ff 	mov.w	r1, #4294967295
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	fa01 f303 	lsl.w	r3, r1, r3
 800229a:	43d9      	mvns	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a0:	4313      	orrs	r3, r2
         );
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3724      	adds	r7, #36	; 0x24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
	...

080022b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c0:	d301      	bcc.n	80022c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022c2:	2301      	movs	r3, #1
 80022c4:	e00f      	b.n	80022e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022c6:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <SysTick_Config+0x40>)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ce:	210f      	movs	r1, #15
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295
 80022d4:	f7ff ff8e 	bl	80021f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <SysTick_Config+0x40>)
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022de:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <SysTick_Config+0x40>)
 80022e0:	2207      	movs	r2, #7
 80022e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	e000e010 	.word	0xe000e010

080022f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff ff29 	bl	8002154 <__NVIC_SetPriorityGrouping>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800230a:	b580      	push	{r7, lr}
 800230c:	b086      	sub	sp, #24
 800230e:	af00      	add	r7, sp, #0
 8002310:	4603      	mov	r3, r0
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800231c:	f7ff ff3e 	bl	800219c <__NVIC_GetPriorityGrouping>
 8002320:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	6978      	ldr	r0, [r7, #20]
 8002328:	f7ff ff8e 	bl	8002248 <NVIC_EncodePriority>
 800232c:	4602      	mov	r2, r0
 800232e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002332:	4611      	mov	r1, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff5d 	bl	80021f4 <__NVIC_SetPriority>
}
 800233a:	bf00      	nop
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	4603      	mov	r3, r0
 800234a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800234c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff31 	bl	80021b8 <__NVIC_EnableIRQ>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff ffa2 	bl	80022b0 <SysTick_Config>
 800236c:	4603      	mov	r3, r0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002384:	f7ff f9b0 	bl	80016e8 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e099      	b.n	80024c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0201 	bic.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023b4:	e00f      	b.n	80023d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023b6:	f7ff f997 	bl	80016e8 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b05      	cmp	r3, #5
 80023c2:	d908      	bls.n	80023d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2220      	movs	r2, #32
 80023c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2203      	movs	r2, #3
 80023ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e078      	b.n	80024c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1e8      	bne.n	80023b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	4b38      	ldr	r3, [pc, #224]	; (80024d0 <HAL_DMA_Init+0x158>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002402:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800240e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800241a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	4313      	orrs	r3, r2
 8002426:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	2b04      	cmp	r3, #4
 800242e:	d107      	bne.n	8002440 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	4313      	orrs	r3, r2
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4313      	orrs	r3, r2
 800243e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f023 0307 	bic.w	r3, r3, #7
 8002456:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	4313      	orrs	r3, r2
 8002460:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	2b04      	cmp	r3, #4
 8002468:	d117      	bne.n	800249a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4313      	orrs	r3, r2
 8002472:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00e      	beq.n	800249a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 fa7b 	bl	8002978 <DMA_CheckFifoParam>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2240      	movs	r2, #64	; 0x40
 800248c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002496:	2301      	movs	r3, #1
 8002498:	e016      	b.n	80024c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 fa32 	bl	800290c <DMA_CalcBaseAndBitshift>
 80024a8:	4603      	mov	r3, r0
 80024aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b0:	223f      	movs	r2, #63	; 0x3f
 80024b2:	409a      	lsls	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	e010803f 	.word	0xe010803f

080024d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024e2:	f7ff f901 	bl	80016e8 <HAL_GetTick>
 80024e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d008      	beq.n	8002506 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2280      	movs	r2, #128	; 0x80
 80024f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e052      	b.n	80025ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0216 	bic.w	r2, r2, #22
 8002514:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695a      	ldr	r2, [r3, #20]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002524:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d103      	bne.n	8002536 <HAL_DMA_Abort+0x62>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002532:	2b00      	cmp	r3, #0
 8002534:	d007      	beq.n	8002546 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0208 	bic.w	r2, r2, #8
 8002544:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0201 	bic.w	r2, r2, #1
 8002554:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002556:	e013      	b.n	8002580 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002558:	f7ff f8c6 	bl	80016e8 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b05      	cmp	r3, #5
 8002564:	d90c      	bls.n	8002580 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2220      	movs	r2, #32
 800256a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2203      	movs	r2, #3
 8002570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e015      	b.n	80025ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1e4      	bne.n	8002558 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002592:	223f      	movs	r2, #63	; 0x3f
 8002594:	409a      	lsls	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d004      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2280      	movs	r2, #128	; 0x80
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e00c      	b.n	80025ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2205      	movs	r2, #5
 80025d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0201 	bic.w	r2, r2, #1
 80025e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002604:	4b8e      	ldr	r3, [pc, #568]	; (8002840 <HAL_DMA_IRQHandler+0x248>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a8e      	ldr	r2, [pc, #568]	; (8002844 <HAL_DMA_IRQHandler+0x24c>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	0a9b      	lsrs	r3, r3, #10
 8002610:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002616:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002622:	2208      	movs	r2, #8
 8002624:	409a      	lsls	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4013      	ands	r3, r2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d01a      	beq.n	8002664 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d013      	beq.n	8002664 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0204 	bic.w	r2, r2, #4
 800264a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	2208      	movs	r2, #8
 8002652:	409a      	lsls	r2, r3
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265c:	f043 0201 	orr.w	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002668:	2201      	movs	r2, #1
 800266a:	409a      	lsls	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4013      	ands	r3, r2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d012      	beq.n	800269a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00b      	beq.n	800269a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002686:	2201      	movs	r2, #1
 8002688:	409a      	lsls	r2, r3
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002692:	f043 0202 	orr.w	r2, r3, #2
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269e:	2204      	movs	r2, #4
 80026a0:	409a      	lsls	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d012      	beq.n	80026d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00b      	beq.n	80026d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026bc:	2204      	movs	r2, #4
 80026be:	409a      	lsls	r2, r3
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c8:	f043 0204 	orr.w	r2, r3, #4
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d4:	2210      	movs	r2, #16
 80026d6:	409a      	lsls	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4013      	ands	r3, r2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d043      	beq.n	8002768 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d03c      	beq.n	8002768 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f2:	2210      	movs	r2, #16
 80026f4:	409a      	lsls	r2, r3
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d018      	beq.n	800273a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d108      	bne.n	8002728 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	2b00      	cmp	r3, #0
 800271c:	d024      	beq.n	8002768 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	4798      	blx	r3
 8002726:	e01f      	b.n	8002768 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800272c:	2b00      	cmp	r3, #0
 800272e:	d01b      	beq.n	8002768 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	4798      	blx	r3
 8002738:	e016      	b.n	8002768 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002744:	2b00      	cmp	r3, #0
 8002746:	d107      	bne.n	8002758 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0208 	bic.w	r2, r2, #8
 8002756:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276c:	2220      	movs	r2, #32
 800276e:	409a      	lsls	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4013      	ands	r3, r2
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 808f 	beq.w	8002898 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 8087 	beq.w	8002898 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278e:	2220      	movs	r2, #32
 8002790:	409a      	lsls	r2, r3
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b05      	cmp	r3, #5
 80027a0:	d136      	bne.n	8002810 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0216 	bic.w	r2, r2, #22
 80027b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695a      	ldr	r2, [r3, #20]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d103      	bne.n	80027d2 <HAL_DMA_IRQHandler+0x1da>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d007      	beq.n	80027e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0208 	bic.w	r2, r2, #8
 80027e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e6:	223f      	movs	r2, #63	; 0x3f
 80027e8:	409a      	lsls	r2, r3
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002802:	2b00      	cmp	r3, #0
 8002804:	d07e      	beq.n	8002904 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	4798      	blx	r3
        }
        return;
 800280e:	e079      	b.n	8002904 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d01d      	beq.n	800285a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10d      	bne.n	8002848 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002830:	2b00      	cmp	r3, #0
 8002832:	d031      	beq.n	8002898 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	4798      	blx	r3
 800283c:	e02c      	b.n	8002898 <HAL_DMA_IRQHandler+0x2a0>
 800283e:	bf00      	nop
 8002840:	20000000 	.word	0x20000000
 8002844:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284c:	2b00      	cmp	r3, #0
 800284e:	d023      	beq.n	8002898 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	4798      	blx	r3
 8002858:	e01e      	b.n	8002898 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10f      	bne.n	8002888 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0210 	bic.w	r2, r2, #16
 8002876:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289c:	2b00      	cmp	r3, #0
 800289e:	d032      	beq.n	8002906 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d022      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2205      	movs	r2, #5
 80028b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0201 	bic.w	r2, r2, #1
 80028c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	3301      	adds	r3, #1
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d307      	bcc.n	80028e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f2      	bne.n	80028c4 <HAL_DMA_IRQHandler+0x2cc>
 80028de:	e000      	b.n	80028e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d005      	beq.n	8002906 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	4798      	blx	r3
 8002902:	e000      	b.n	8002906 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002904:	bf00      	nop
    }
  }
}
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	3b10      	subs	r3, #16
 800291c:	4a13      	ldr	r2, [pc, #76]	; (800296c <DMA_CalcBaseAndBitshift+0x60>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	091b      	lsrs	r3, r3, #4
 8002924:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002926:	4a12      	ldr	r2, [pc, #72]	; (8002970 <DMA_CalcBaseAndBitshift+0x64>)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2b03      	cmp	r3, #3
 8002938:	d908      	bls.n	800294c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <DMA_CalcBaseAndBitshift+0x68>)
 8002942:	4013      	ands	r3, r2
 8002944:	1d1a      	adds	r2, r3, #4
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	659a      	str	r2, [r3, #88]	; 0x58
 800294a:	e006      	b.n	800295a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	4b08      	ldr	r3, [pc, #32]	; (8002974 <DMA_CalcBaseAndBitshift+0x68>)
 8002954:	4013      	ands	r3, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	aaaaaaab 	.word	0xaaaaaaab
 8002970:	08009b90 	.word	0x08009b90
 8002974:	fffffc00 	.word	0xfffffc00

08002978 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002988:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d11f      	bne.n	80029d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2b03      	cmp	r3, #3
 8002996:	d856      	bhi.n	8002a46 <DMA_CheckFifoParam+0xce>
 8002998:	a201      	add	r2, pc, #4	; (adr r2, 80029a0 <DMA_CheckFifoParam+0x28>)
 800299a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299e:	bf00      	nop
 80029a0:	080029b1 	.word	0x080029b1
 80029a4:	080029c3 	.word	0x080029c3
 80029a8:	080029b1 	.word	0x080029b1
 80029ac:	08002a47 	.word	0x08002a47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d046      	beq.n	8002a4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c0:	e043      	b.n	8002a4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029ca:	d140      	bne.n	8002a4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d0:	e03d      	b.n	8002a4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029da:	d121      	bne.n	8002a20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d837      	bhi.n	8002a52 <DMA_CheckFifoParam+0xda>
 80029e2:	a201      	add	r2, pc, #4	; (adr r2, 80029e8 <DMA_CheckFifoParam+0x70>)
 80029e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e8:	080029f9 	.word	0x080029f9
 80029ec:	080029ff 	.word	0x080029ff
 80029f0:	080029f9 	.word	0x080029f9
 80029f4:	08002a11 	.word	0x08002a11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
      break;
 80029fc:	e030      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d025      	beq.n	8002a56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a0e:	e022      	b.n	8002a56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a18:	d11f      	bne.n	8002a5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a1e:	e01c      	b.n	8002a5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d903      	bls.n	8002a2e <DMA_CheckFifoParam+0xb6>
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d003      	beq.n	8002a34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a2c:	e018      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	73fb      	strb	r3, [r7, #15]
      break;
 8002a32:	e015      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00e      	beq.n	8002a5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
      break;
 8002a44:	e00b      	b.n	8002a5e <DMA_CheckFifoParam+0xe6>
      break;
 8002a46:	bf00      	nop
 8002a48:	e00a      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;
 8002a4a:	bf00      	nop
 8002a4c:	e008      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;
 8002a4e:	bf00      	nop
 8002a50:	e006      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;
 8002a52:	bf00      	nop
 8002a54:	e004      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;
 8002a56:	bf00      	nop
 8002a58:	e002      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a5a:	bf00      	nop
 8002a5c:	e000      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;
 8002a5e:	bf00      	nop
    }
  } 
  
  return status; 
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop

08002a70 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e06a      	b.n	8002b58 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d106      	bne.n	8002a9a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2223      	movs	r2, #35	; 0x23
 8002a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7fe fad5 	bl	8001044 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a9a:	4b31      	ldr	r3, [pc, #196]	; (8002b60 <HAL_ETH_Init+0xf0>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	4a30      	ldr	r2, [pc, #192]	; (8002b60 <HAL_ETH_Init+0xf0>)
 8002aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa6:	4b2e      	ldr	r3, [pc, #184]	; (8002b60 <HAL_ETH_Init+0xf0>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aae:	60bb      	str	r3, [r7, #8]
 8002ab0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002ab2:	4b2c      	ldr	r3, [pc, #176]	; (8002b64 <HAL_ETH_Init+0xf4>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	4a2b      	ldr	r2, [pc, #172]	; (8002b64 <HAL_ETH_Init+0xf4>)
 8002ab8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002abc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002abe:	4b29      	ldr	r3, [pc, #164]	; (8002b64 <HAL_ETH_Init+0xf4>)
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	4927      	ldr	r1, [pc, #156]	; (8002b64 <HAL_ETH_Init+0xf4>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002acc:	4b25      	ldr	r3, [pc, #148]	; (8002b64 <HAL_ETH_Init+0xf4>)
 8002ace:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6812      	ldr	r2, [r2, #0]
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ae6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ae8:	f7fe fdfe 	bl	80016e8 <HAL_GetTick>
 8002aec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002aee:	e011      	b.n	8002b14 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002af0:	f7fe fdfa 	bl	80016e8 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002afe:	d909      	bls.n	8002b14 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2204      	movs	r2, #4
 8002b04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	22e0      	movs	r2, #224	; 0xe0
 8002b0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e021      	b.n	8002b58 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1e4      	bne.n	8002af0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f958 	bl	8002ddc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f9ff 	bl	8002f30 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fa55 	bl	8002fe2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	2100      	movs	r1, #0
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f9bd 	bl	8002ec0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2210      	movs	r2, #16
 8002b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40023800 	.word	0x40023800
 8002b64:	40013800 	.word	0x40013800

08002b68 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4b51      	ldr	r3, [pc, #324]	; (8002cc4 <ETH_SetMACConfig+0x15c>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	7c1b      	ldrb	r3, [r3, #16]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d102      	bne.n	8002b90 <ETH_SetMACConfig+0x28>
 8002b8a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002b8e:	e000      	b.n	8002b92 <ETH_SetMACConfig+0x2a>
 8002b90:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	7c5b      	ldrb	r3, [r3, #17]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d102      	bne.n	8002ba0 <ETH_SetMACConfig+0x38>
 8002b9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b9e:	e000      	b.n	8002ba2 <ETH_SetMACConfig+0x3a>
 8002ba0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ba2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ba8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	7fdb      	ldrb	r3, [r3, #31]
 8002bae:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002bb0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002bb6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	7f92      	ldrb	r2, [r2, #30]
 8002bbc:	2a00      	cmp	r2, #0
 8002bbe:	d102      	bne.n	8002bc6 <ETH_SetMACConfig+0x5e>
 8002bc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bc4:	e000      	b.n	8002bc8 <ETH_SetMACConfig+0x60>
 8002bc6:	2200      	movs	r2, #0
                        macconf->Speed |
 8002bc8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	7f1b      	ldrb	r3, [r3, #28]
 8002bce:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002bd0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002bd6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	791b      	ldrb	r3, [r3, #4]
 8002bdc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002bde:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002be6:	2a00      	cmp	r2, #0
 8002be8:	d102      	bne.n	8002bf0 <ETH_SetMACConfig+0x88>
 8002bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bee:	e000      	b.n	8002bf2 <ETH_SetMACConfig+0x8a>
 8002bf0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002bf2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	7bdb      	ldrb	r3, [r3, #15]
 8002bf8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002bfa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002c00:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c08:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c22:	2001      	movs	r0, #1
 8002c24:	f7fe fd6c 	bl	8001700 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002c3e:	4013      	ands	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c46:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002c4e:	2a00      	cmp	r2, #0
 8002c50:	d101      	bne.n	8002c56 <ETH_SetMACConfig+0xee>
 8002c52:	2280      	movs	r2, #128	; 0x80
 8002c54:	e000      	b.n	8002c58 <ETH_SetMACConfig+0xf0>
 8002c56:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002c58:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002c5e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002c66:	2a01      	cmp	r2, #1
 8002c68:	d101      	bne.n	8002c6e <ETH_SetMACConfig+0x106>
 8002c6a:	2208      	movs	r2, #8
 8002c6c:	e000      	b.n	8002c70 <ETH_SetMACConfig+0x108>
 8002c6e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002c70:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002c78:	2a01      	cmp	r2, #1
 8002c7a:	d101      	bne.n	8002c80 <ETH_SetMACConfig+0x118>
 8002c7c:	2204      	movs	r2, #4
 8002c7e:	e000      	b.n	8002c82 <ETH_SetMACConfig+0x11a>
 8002c80:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002c82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002c8a:	2a01      	cmp	r2, #1
 8002c8c:	d101      	bne.n	8002c92 <ETH_SetMACConfig+0x12a>
 8002c8e:	2202      	movs	r2, #2
 8002c90:	e000      	b.n	8002c94 <ETH_SetMACConfig+0x12c>
 8002c92:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002c94:	4313      	orrs	r3, r2
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cac:	2001      	movs	r0, #1
 8002cae:	f7fe fd27 	bl	8001700 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	619a      	str	r2, [r3, #24]
}
 8002cba:	bf00      	nop
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	ff20810f 	.word	0xff20810f

08002cc8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4b3d      	ldr	r3, [pc, #244]	; (8002dd8 <ETH_SetDMAConfig+0x110>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	7b1b      	ldrb	r3, [r3, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d102      	bne.n	8002cf4 <ETH_SetDMAConfig+0x2c>
 8002cee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002cf2:	e000      	b.n	8002cf6 <ETH_SetDMAConfig+0x2e>
 8002cf4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	7b5b      	ldrb	r3, [r3, #13]
 8002cfa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002cfc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	7f52      	ldrb	r2, [r2, #29]
 8002d02:	2a00      	cmp	r2, #0
 8002d04:	d102      	bne.n	8002d0c <ETH_SetDMAConfig+0x44>
 8002d06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d0a:	e000      	b.n	8002d0e <ETH_SetDMAConfig+0x46>
 8002d0c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002d0e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	7b9b      	ldrb	r3, [r3, #14]
 8002d14:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002d16:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002d1c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	7f1b      	ldrb	r3, [r3, #28]
 8002d22:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002d24:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	7f9b      	ldrb	r3, [r3, #30]
 8002d2a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002d2c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002d32:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d3a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d5e:	2001      	movs	r0, #1
 8002d60:	f7fe fcce 	bl	8001700 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	791b      	ldrb	r3, [r3, #4]
 8002d76:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002d7c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002d82:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002d88:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d90:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002d92:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d98:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002d9a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002da0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002daa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002dae:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	f7fe fc9f 	bl	8001700 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6013      	str	r3, [r2, #0]
}
 8002dd0:	bf00      	nop
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	f8de3f23 	.word	0xf8de3f23

08002ddc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b0a6      	sub	sp, #152	; 0x98
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002de4:	2301      	movs	r3, #1
 8002de6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002dea:	2301      	movs	r3, #1
 8002dec:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002df0:	2300      	movs	r3, #0
 8002df2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002df4:	2300      	movs	r3, #0
 8002df6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002e00:	2300      	movs	r3, #0
 8002e02:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002e06:	2301      	movs	r3, #1
 8002e08:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002e12:	2300      	movs	r3, #0
 8002e14:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002e32:	2300      	movs	r3, #0
 8002e34:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002e3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e42:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002e44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e48:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002e50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e54:	4619      	mov	r1, r3
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7ff fe86 	bl	8002b68 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002e60:	2301      	movs	r3, #1
 8002e62:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002e64:	2301      	movs	r3, #1
 8002e66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002e72:	2300      	movs	r3, #0
 8002e74:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002e82:	2301      	movs	r3, #1
 8002e84:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002e8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e90:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002e92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e96:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002e98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e9c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002eac:	f107 0308 	add.w	r3, r7, #8
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7ff ff08 	bl	8002cc8 <ETH_SetDMAConfig>
}
 8002eb8:	bf00      	nop
 8002eba:	3798      	adds	r7, #152	; 0x98
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3305      	adds	r3, #5
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	021b      	lsls	r3, r3, #8
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	3204      	adds	r2, #4
 8002ed8:	7812      	ldrb	r2, [r2, #0]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <ETH_MACAddressConfig+0x68>)
 8002ee2:	4413      	add	r3, r2
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3303      	adds	r3, #3
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	061a      	lsls	r2, r3, #24
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3302      	adds	r3, #2
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	041b      	lsls	r3, r3, #16
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3301      	adds	r3, #1
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	4313      	orrs	r3, r2
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	7812      	ldrb	r2, [r2, #0]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <ETH_MACAddressConfig+0x6c>)
 8002f12:	4413      	add	r3, r2
 8002f14:	461a      	mov	r2, r3
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	6013      	str	r3, [r2, #0]
}
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40028040 	.word	0x40028040
 8002f2c:	40028044 	.word	0x40028044

08002f30 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	e03e      	b.n	8002fbc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68d9      	ldr	r1, [r3, #12]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	440b      	add	r3, r1
 8002f4e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2200      	movs	r2, #0
 8002f66:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002f68:	68b9      	ldr	r1, [r7, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	3206      	adds	r2, #6
 8002f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d80c      	bhi.n	8002fa0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68d9      	ldr	r1, [r3, #12]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	4613      	mov	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	440b      	add	r3, r1
 8002f98:	461a      	mov	r2, r3
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	e004      	b.n	8002faa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b03      	cmp	r3, #3
 8002fc0:	d9bd      	bls.n	8002f3e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fd4:	611a      	str	r2, [r3, #16]
}
 8002fd6:	bf00      	nop
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b085      	sub	sp, #20
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	e046      	b.n	800307e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6919      	ldr	r1, [r3, #16]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	440b      	add	r3, r1
 8003000:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2200      	movs	r2, #0
 800300c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2200      	movs	r2, #0
 8003012:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2200      	movs	r2, #0
 8003018:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2200      	movs	r2, #0
 800301e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2200      	movs	r2, #0
 8003024:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800302c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003034:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003042:	68b9      	ldr	r1, [r7, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	3212      	adds	r2, #18
 800304a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2b02      	cmp	r3, #2
 8003052:	d80c      	bhi.n	800306e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6919      	ldr	r1, [r3, #16]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	4613      	mov	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	440b      	add	r3, r1
 8003066:	461a      	mov	r2, r3
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	60da      	str	r2, [r3, #12]
 800306c:	e004      	b.n	8003078 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	461a      	mov	r2, r3
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3301      	adds	r3, #1
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b03      	cmp	r3, #3
 8003082:	d9b5      	bls.n	8002ff0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691a      	ldr	r2, [r3, #16]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030ae:	60da      	str	r2, [r3, #12]
}
 80030b0:	bf00      	nop
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030bc:	b480      	push	{r7}
 80030be:	b089      	sub	sp, #36	; 0x24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80030ca:	2300      	movs	r3, #0
 80030cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80030ce:	2300      	movs	r3, #0
 80030d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
 80030da:	e175      	b.n	80033c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80030dc:	2201      	movs	r2, #1
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4013      	ands	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	f040 8164 	bne.w	80033c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	2b01      	cmp	r3, #1
 8003104:	d005      	beq.n	8003112 <HAL_GPIO_Init+0x56>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d130      	bne.n	8003174 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	2203      	movs	r2, #3
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43db      	mvns	r3, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4013      	ands	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4313      	orrs	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003148:	2201      	movs	r2, #1
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	f003 0201 	and.w	r2, r3, #1
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4313      	orrs	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	2b03      	cmp	r3, #3
 800317e:	d017      	beq.n	80031b0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	2203      	movs	r2, #3
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 0303 	and.w	r3, r3, #3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d123      	bne.n	8003204 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	08da      	lsrs	r2, r3, #3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3208      	adds	r2, #8
 80031c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	220f      	movs	r2, #15
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4013      	ands	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	08da      	lsrs	r2, r3, #3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3208      	adds	r2, #8
 80031fe:	69b9      	ldr	r1, [r7, #24]
 8003200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	2203      	movs	r2, #3
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	43db      	mvns	r3, r3
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4013      	ands	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 0203 	and.w	r2, r3, #3
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4313      	orrs	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 80be 	beq.w	80033c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003246:	4b66      	ldr	r3, [pc, #408]	; (80033e0 <HAL_GPIO_Init+0x324>)
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	4a65      	ldr	r2, [pc, #404]	; (80033e0 <HAL_GPIO_Init+0x324>)
 800324c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003250:	6453      	str	r3, [r2, #68]	; 0x44
 8003252:	4b63      	ldr	r3, [pc, #396]	; (80033e0 <HAL_GPIO_Init+0x324>)
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800325e:	4a61      	ldr	r2, [pc, #388]	; (80033e4 <HAL_GPIO_Init+0x328>)
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	089b      	lsrs	r3, r3, #2
 8003264:	3302      	adds	r3, #2
 8003266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800326a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	220f      	movs	r2, #15
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43db      	mvns	r3, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4013      	ands	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a58      	ldr	r2, [pc, #352]	; (80033e8 <HAL_GPIO_Init+0x32c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d037      	beq.n	80032fa <HAL_GPIO_Init+0x23e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a57      	ldr	r2, [pc, #348]	; (80033ec <HAL_GPIO_Init+0x330>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d031      	beq.n	80032f6 <HAL_GPIO_Init+0x23a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a56      	ldr	r2, [pc, #344]	; (80033f0 <HAL_GPIO_Init+0x334>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d02b      	beq.n	80032f2 <HAL_GPIO_Init+0x236>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a55      	ldr	r2, [pc, #340]	; (80033f4 <HAL_GPIO_Init+0x338>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d025      	beq.n	80032ee <HAL_GPIO_Init+0x232>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a54      	ldr	r2, [pc, #336]	; (80033f8 <HAL_GPIO_Init+0x33c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d01f      	beq.n	80032ea <HAL_GPIO_Init+0x22e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a53      	ldr	r2, [pc, #332]	; (80033fc <HAL_GPIO_Init+0x340>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d019      	beq.n	80032e6 <HAL_GPIO_Init+0x22a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a52      	ldr	r2, [pc, #328]	; (8003400 <HAL_GPIO_Init+0x344>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d013      	beq.n	80032e2 <HAL_GPIO_Init+0x226>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a51      	ldr	r2, [pc, #324]	; (8003404 <HAL_GPIO_Init+0x348>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00d      	beq.n	80032de <HAL_GPIO_Init+0x222>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a50      	ldr	r2, [pc, #320]	; (8003408 <HAL_GPIO_Init+0x34c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d007      	beq.n	80032da <HAL_GPIO_Init+0x21e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a4f      	ldr	r2, [pc, #316]	; (800340c <HAL_GPIO_Init+0x350>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d101      	bne.n	80032d6 <HAL_GPIO_Init+0x21a>
 80032d2:	2309      	movs	r3, #9
 80032d4:	e012      	b.n	80032fc <HAL_GPIO_Init+0x240>
 80032d6:	230a      	movs	r3, #10
 80032d8:	e010      	b.n	80032fc <HAL_GPIO_Init+0x240>
 80032da:	2308      	movs	r3, #8
 80032dc:	e00e      	b.n	80032fc <HAL_GPIO_Init+0x240>
 80032de:	2307      	movs	r3, #7
 80032e0:	e00c      	b.n	80032fc <HAL_GPIO_Init+0x240>
 80032e2:	2306      	movs	r3, #6
 80032e4:	e00a      	b.n	80032fc <HAL_GPIO_Init+0x240>
 80032e6:	2305      	movs	r3, #5
 80032e8:	e008      	b.n	80032fc <HAL_GPIO_Init+0x240>
 80032ea:	2304      	movs	r3, #4
 80032ec:	e006      	b.n	80032fc <HAL_GPIO_Init+0x240>
 80032ee:	2303      	movs	r3, #3
 80032f0:	e004      	b.n	80032fc <HAL_GPIO_Init+0x240>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e002      	b.n	80032fc <HAL_GPIO_Init+0x240>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <HAL_GPIO_Init+0x240>
 80032fa:	2300      	movs	r3, #0
 80032fc:	69fa      	ldr	r2, [r7, #28]
 80032fe:	f002 0203 	and.w	r2, r2, #3
 8003302:	0092      	lsls	r2, r2, #2
 8003304:	4093      	lsls	r3, r2
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4313      	orrs	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800330c:	4935      	ldr	r1, [pc, #212]	; (80033e4 <HAL_GPIO_Init+0x328>)
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	089b      	lsrs	r3, r3, #2
 8003312:	3302      	adds	r3, #2
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800331a:	4b3d      	ldr	r3, [pc, #244]	; (8003410 <HAL_GPIO_Init+0x354>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	43db      	mvns	r3, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4013      	ands	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800333e:	4a34      	ldr	r2, [pc, #208]	; (8003410 <HAL_GPIO_Init+0x354>)
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003344:	4b32      	ldr	r3, [pc, #200]	; (8003410 <HAL_GPIO_Init+0x354>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	43db      	mvns	r3, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003368:	4a29      	ldr	r2, [pc, #164]	; (8003410 <HAL_GPIO_Init+0x354>)
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800336e:	4b28      	ldr	r3, [pc, #160]	; (8003410 <HAL_GPIO_Init+0x354>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	43db      	mvns	r3, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4013      	ands	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4313      	orrs	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003392:	4a1f      	ldr	r2, [pc, #124]	; (8003410 <HAL_GPIO_Init+0x354>)
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003398:	4b1d      	ldr	r3, [pc, #116]	; (8003410 <HAL_GPIO_Init+0x354>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	43db      	mvns	r3, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033bc:	4a14      	ldr	r2, [pc, #80]	; (8003410 <HAL_GPIO_Init+0x354>)
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	3301      	adds	r3, #1
 80033c6:	61fb      	str	r3, [r7, #28]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	2b0f      	cmp	r3, #15
 80033cc:	f67f ae86 	bls.w	80030dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80033d0:	bf00      	nop
 80033d2:	bf00      	nop
 80033d4:	3724      	adds	r7, #36	; 0x24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40023800 	.word	0x40023800
 80033e4:	40013800 	.word	0x40013800
 80033e8:	40020000 	.word	0x40020000
 80033ec:	40020400 	.word	0x40020400
 80033f0:	40020800 	.word	0x40020800
 80033f4:	40020c00 	.word	0x40020c00
 80033f8:	40021000 	.word	0x40021000
 80033fc:	40021400 	.word	0x40021400
 8003400:	40021800 	.word	0x40021800
 8003404:	40021c00 	.word	0x40021c00
 8003408:	40022000 	.word	0x40022000
 800340c:	40022400 	.word	0x40022400
 8003410:	40013c00 	.word	0x40013c00

08003414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	807b      	strh	r3, [r7, #2]
 8003420:	4613      	mov	r3, r2
 8003422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003424:	787b      	ldrb	r3, [r7, #1]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800342a:	887a      	ldrh	r2, [r7, #2]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003430:	e003      	b.n	800343a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003432:	887b      	ldrh	r3, [r7, #2]
 8003434:	041a      	lsls	r2, r3, #16
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	619a      	str	r2, [r3, #24]
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003446:	b480      	push	{r7}
 8003448:	b085      	sub	sp, #20
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	460b      	mov	r3, r1
 8003450:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003458:	887a      	ldrh	r2, [r7, #2]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4013      	ands	r3, r2
 800345e:	041a      	lsls	r2, r3, #16
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	43d9      	mvns	r1, r3
 8003464:	887b      	ldrh	r3, [r7, #2]
 8003466:	400b      	ands	r3, r1
 8003468:	431a      	orrs	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	619a      	str	r2, [r3, #24]
}
 800346e:	bf00      	nop
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800347a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800347c:	b08f      	sub	sp, #60	; 0x3c
 800347e:	af0a      	add	r7, sp, #40	; 0x28
 8003480:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e116      	b.n	80036ba <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d106      	bne.n	80034ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7fd ff1e 	bl	80012e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2203      	movs	r2, #3
 80034b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d102      	bne.n	80034c6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f002 fb74 	bl	8005bb8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	603b      	str	r3, [r7, #0]
 80034d6:	687e      	ldr	r6, [r7, #4]
 80034d8:	466d      	mov	r5, sp
 80034da:	f106 0410 	add.w	r4, r6, #16
 80034de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80034ee:	1d33      	adds	r3, r6, #4
 80034f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034f2:	6838      	ldr	r0, [r7, #0]
 80034f4:	f002 fb08 	bl	8005b08 <USB_CoreInit>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d005      	beq.n	800350a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2202      	movs	r2, #2
 8003502:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e0d7      	b.n	80036ba <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2100      	movs	r1, #0
 8003510:	4618      	mov	r0, r3
 8003512:	f002 fb62 	bl	8005bda <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003516:	2300      	movs	r3, #0
 8003518:	73fb      	strb	r3, [r7, #15]
 800351a:	e04a      	b.n	80035b2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800351c:	7bfa      	ldrb	r2, [r7, #15]
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4413      	add	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	333d      	adds	r3, #61	; 0x3d
 800352c:	2201      	movs	r2, #1
 800352e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003530:	7bfa      	ldrb	r2, [r7, #15]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	333c      	adds	r3, #60	; 0x3c
 8003540:	7bfa      	ldrb	r2, [r7, #15]
 8003542:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003544:	7bfa      	ldrb	r2, [r7, #15]
 8003546:	7bfb      	ldrb	r3, [r7, #15]
 8003548:	b298      	uxth	r0, r3
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	4413      	add	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	3344      	adds	r3, #68	; 0x44
 8003558:	4602      	mov	r2, r0
 800355a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800355c:	7bfa      	ldrb	r2, [r7, #15]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	3340      	adds	r3, #64	; 0x40
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003570:	7bfa      	ldrb	r2, [r7, #15]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	3348      	adds	r3, #72	; 0x48
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003584:	7bfa      	ldrb	r2, [r7, #15]
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	4613      	mov	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	334c      	adds	r3, #76	; 0x4c
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003598:	7bfa      	ldrb	r2, [r7, #15]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	4413      	add	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	3354      	adds	r3, #84	; 0x54
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	3301      	adds	r3, #1
 80035b0:	73fb      	strb	r3, [r7, #15]
 80035b2:	7bfa      	ldrb	r2, [r7, #15]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d3af      	bcc.n	800351c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035bc:	2300      	movs	r3, #0
 80035be:	73fb      	strb	r3, [r7, #15]
 80035c0:	e044      	b.n	800364c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035c2:	7bfa      	ldrb	r2, [r7, #15]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80035d4:	2200      	movs	r2, #0
 80035d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80035ea:	7bfa      	ldrb	r2, [r7, #15]
 80035ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035ee:	7bfa      	ldrb	r2, [r7, #15]
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003604:	7bfa      	ldrb	r2, [r7, #15]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800361a:	7bfa      	ldrb	r2, [r7, #15]
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003630:	7bfa      	ldrb	r2, [r7, #15]
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003646:	7bfb      	ldrb	r3, [r7, #15]
 8003648:	3301      	adds	r3, #1
 800364a:	73fb      	strb	r3, [r7, #15]
 800364c:	7bfa      	ldrb	r2, [r7, #15]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	429a      	cmp	r2, r3
 8003654:	d3b5      	bcc.n	80035c2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	687e      	ldr	r6, [r7, #4]
 800365e:	466d      	mov	r5, sp
 8003660:	f106 0410 	add.w	r4, r6, #16
 8003664:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003666:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800366a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800366c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003670:	e885 0003 	stmia.w	r5, {r0, r1}
 8003674:	1d33      	adds	r3, r6, #4
 8003676:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003678:	6838      	ldr	r0, [r7, #0]
 800367a:	f002 fafb 	bl	8005c74 <USB_DevInit>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e014      	b.n	80036ba <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d102      	bne.n	80036ae <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f80b 	bl	80036c4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f002 fcb9 	bl	800602a <USB_DevDisconnect>

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080036c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036f2:	4b05      	ldr	r3, [pc, #20]	; (8003708 <HAL_PCDEx_ActivateLPM+0x44>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	10000003 	.word	0x10000003

0800370c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003710:	4b05      	ldr	r3, [pc, #20]	; (8003728 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a04      	ldr	r2, [pc, #16]	; (8003728 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800371a:	6013      	str	r3, [r2, #0]
}
 800371c:	bf00      	nop
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40007000 	.word	0x40007000

0800372c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003732:	2300      	movs	r3, #0
 8003734:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003736:	4b23      	ldr	r3, [pc, #140]	; (80037c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	4a22      	ldr	r2, [pc, #136]	; (80037c4 <HAL_PWREx_EnableOverDrive+0x98>)
 800373c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003740:	6413      	str	r3, [r2, #64]	; 0x40
 8003742:	4b20      	ldr	r3, [pc, #128]	; (80037c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800374e:	4b1e      	ldr	r3, [pc, #120]	; (80037c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a1d      	ldr	r2, [pc, #116]	; (80037c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003758:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800375a:	f7fd ffc5 	bl	80016e8 <HAL_GetTick>
 800375e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003760:	e009      	b.n	8003776 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003762:	f7fd ffc1 	bl	80016e8 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003770:	d901      	bls.n	8003776 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e022      	b.n	80037bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003776:	4b14      	ldr	r3, [pc, #80]	; (80037c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800377e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003782:	d1ee      	bne.n	8003762 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003784:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a0f      	ldr	r2, [pc, #60]	; (80037c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800378a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800378e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003790:	f7fd ffaa 	bl	80016e8 <HAL_GetTick>
 8003794:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003796:	e009      	b.n	80037ac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003798:	f7fd ffa6 	bl	80016e8 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037a6:	d901      	bls.n	80037ac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e007      	b.n	80037bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037ac:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037b8:	d1ee      	bne.n	8003798 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40023800 	.word	0x40023800
 80037c8:	40007000 	.word	0x40007000

080037cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80037d4:	2300      	movs	r3, #0
 80037d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e29b      	b.n	8003d1a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 8087 	beq.w	80038fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037f0:	4b96      	ldr	r3, [pc, #600]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 030c 	and.w	r3, r3, #12
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d00c      	beq.n	8003816 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037fc:	4b93      	ldr	r3, [pc, #588]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 030c 	and.w	r3, r3, #12
 8003804:	2b08      	cmp	r3, #8
 8003806:	d112      	bne.n	800382e <HAL_RCC_OscConfig+0x62>
 8003808:	4b90      	ldr	r3, [pc, #576]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003810:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003814:	d10b      	bne.n	800382e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003816:	4b8d      	ldr	r3, [pc, #564]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d06c      	beq.n	80038fc <HAL_RCC_OscConfig+0x130>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d168      	bne.n	80038fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e275      	b.n	8003d1a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003836:	d106      	bne.n	8003846 <HAL_RCC_OscConfig+0x7a>
 8003838:	4b84      	ldr	r3, [pc, #528]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a83      	ldr	r2, [pc, #524]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 800383e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	e02e      	b.n	80038a4 <HAL_RCC_OscConfig+0xd8>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10c      	bne.n	8003868 <HAL_RCC_OscConfig+0x9c>
 800384e:	4b7f      	ldr	r3, [pc, #508]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a7e      	ldr	r2, [pc, #504]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	4b7c      	ldr	r3, [pc, #496]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a7b      	ldr	r2, [pc, #492]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003860:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	e01d      	b.n	80038a4 <HAL_RCC_OscConfig+0xd8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003870:	d10c      	bne.n	800388c <HAL_RCC_OscConfig+0xc0>
 8003872:	4b76      	ldr	r3, [pc, #472]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a75      	ldr	r2, [pc, #468]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	4b73      	ldr	r3, [pc, #460]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a72      	ldr	r2, [pc, #456]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	e00b      	b.n	80038a4 <HAL_RCC_OscConfig+0xd8>
 800388c:	4b6f      	ldr	r3, [pc, #444]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a6e      	ldr	r2, [pc, #440]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	4b6c      	ldr	r3, [pc, #432]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a6b      	ldr	r2, [pc, #428]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 800389e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d013      	beq.n	80038d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ac:	f7fd ff1c 	bl	80016e8 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b4:	f7fd ff18 	bl	80016e8 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b64      	cmp	r3, #100	; 0x64
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e229      	b.n	8003d1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c6:	4b61      	ldr	r3, [pc, #388]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0f0      	beq.n	80038b4 <HAL_RCC_OscConfig+0xe8>
 80038d2:	e014      	b.n	80038fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fd ff08 	bl	80016e8 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038dc:	f7fd ff04 	bl	80016e8 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b64      	cmp	r3, #100	; 0x64
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e215      	b.n	8003d1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ee:	4b57      	ldr	r3, [pc, #348]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x110>
 80038fa:	e000      	b.n	80038fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d069      	beq.n	80039de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800390a:	4b50      	ldr	r3, [pc, #320]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 030c 	and.w	r3, r3, #12
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00b      	beq.n	800392e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003916:	4b4d      	ldr	r3, [pc, #308]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
 800391e:	2b08      	cmp	r3, #8
 8003920:	d11c      	bne.n	800395c <HAL_RCC_OscConfig+0x190>
 8003922:	4b4a      	ldr	r3, [pc, #296]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d116      	bne.n	800395c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800392e:	4b47      	ldr	r3, [pc, #284]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d005      	beq.n	8003946 <HAL_RCC_OscConfig+0x17a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d001      	beq.n	8003946 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e1e9      	b.n	8003d1a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003946:	4b41      	ldr	r3, [pc, #260]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	493d      	ldr	r1, [pc, #244]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003956:	4313      	orrs	r3, r2
 8003958:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800395a:	e040      	b.n	80039de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d023      	beq.n	80039ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003964:	4b39      	ldr	r3, [pc, #228]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a38      	ldr	r2, [pc, #224]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 800396a:	f043 0301 	orr.w	r3, r3, #1
 800396e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7fd feba 	bl	80016e8 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003978:	f7fd feb6 	bl	80016e8 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e1c7      	b.n	8003d1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398a:	4b30      	ldr	r3, [pc, #192]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f0      	beq.n	8003978 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003996:	4b2d      	ldr	r3, [pc, #180]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	4929      	ldr	r1, [pc, #164]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]
 80039aa:	e018      	b.n	80039de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ac:	4b27      	ldr	r3, [pc, #156]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a26      	ldr	r2, [pc, #152]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 80039b2:	f023 0301 	bic.w	r3, r3, #1
 80039b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b8:	f7fd fe96 	bl	80016e8 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039c0:	f7fd fe92 	bl	80016e8 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e1a3      	b.n	8003d1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d2:	4b1e      	ldr	r3, [pc, #120]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f0      	bne.n	80039c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d038      	beq.n	8003a5c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d019      	beq.n	8003a26 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039f2:	4b16      	ldr	r3, [pc, #88]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 80039f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039f6:	4a15      	ldr	r2, [pc, #84]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fe:	f7fd fe73 	bl	80016e8 <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a06:	f7fd fe6f 	bl	80016e8 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e180      	b.n	8003d1a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a18:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0f0      	beq.n	8003a06 <HAL_RCC_OscConfig+0x23a>
 8003a24:	e01a      	b.n	8003a5c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a26:	4b09      	ldr	r3, [pc, #36]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a2a:	4a08      	ldr	r2, [pc, #32]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003a2c:	f023 0301 	bic.w	r3, r3, #1
 8003a30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a32:	f7fd fe59 	bl	80016e8 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a38:	e00a      	b.n	8003a50 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a3a:	f7fd fe55 	bl	80016e8 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d903      	bls.n	8003a50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e166      	b.n	8003d1a <HAL_RCC_OscConfig+0x54e>
 8003a4c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a50:	4b92      	ldr	r3, [pc, #584]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1ee      	bne.n	8003a3a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80a4 	beq.w	8003bb2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a6a:	4b8c      	ldr	r3, [pc, #560]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10d      	bne.n	8003a92 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a76:	4b89      	ldr	r3, [pc, #548]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	4a88      	ldr	r2, [pc, #544]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a80:	6413      	str	r3, [r2, #64]	; 0x40
 8003a82:	4b86      	ldr	r3, [pc, #536]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	60bb      	str	r3, [r7, #8]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a92:	4b83      	ldr	r3, [pc, #524]	; (8003ca0 <HAL_RCC_OscConfig+0x4d4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d118      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003a9e:	4b80      	ldr	r3, [pc, #512]	; (8003ca0 <HAL_RCC_OscConfig+0x4d4>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a7f      	ldr	r2, [pc, #508]	; (8003ca0 <HAL_RCC_OscConfig+0x4d4>)
 8003aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aaa:	f7fd fe1d 	bl	80016e8 <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab2:	f7fd fe19 	bl	80016e8 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b64      	cmp	r3, #100	; 0x64
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e12a      	b.n	8003d1a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ac4:	4b76      	ldr	r3, [pc, #472]	; (8003ca0 <HAL_RCC_OscConfig+0x4d4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0f0      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d106      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x31a>
 8003ad8:	4b70      	ldr	r3, [pc, #448]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003adc:	4a6f      	ldr	r2, [pc, #444]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003ade:	f043 0301 	orr.w	r3, r3, #1
 8003ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae4:	e02d      	b.n	8003b42 <HAL_RCC_OscConfig+0x376>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10c      	bne.n	8003b08 <HAL_RCC_OscConfig+0x33c>
 8003aee:	4b6b      	ldr	r3, [pc, #428]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af2:	4a6a      	ldr	r2, [pc, #424]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003af4:	f023 0301 	bic.w	r3, r3, #1
 8003af8:	6713      	str	r3, [r2, #112]	; 0x70
 8003afa:	4b68      	ldr	r3, [pc, #416]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afe:	4a67      	ldr	r2, [pc, #412]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003b00:	f023 0304 	bic.w	r3, r3, #4
 8003b04:	6713      	str	r3, [r2, #112]	; 0x70
 8003b06:	e01c      	b.n	8003b42 <HAL_RCC_OscConfig+0x376>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b05      	cmp	r3, #5
 8003b0e:	d10c      	bne.n	8003b2a <HAL_RCC_OscConfig+0x35e>
 8003b10:	4b62      	ldr	r3, [pc, #392]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b14:	4a61      	ldr	r2, [pc, #388]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003b16:	f043 0304 	orr.w	r3, r3, #4
 8003b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1c:	4b5f      	ldr	r3, [pc, #380]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b20:	4a5e      	ldr	r2, [pc, #376]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	6713      	str	r3, [r2, #112]	; 0x70
 8003b28:	e00b      	b.n	8003b42 <HAL_RCC_OscConfig+0x376>
 8003b2a:	4b5c      	ldr	r3, [pc, #368]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2e:	4a5b      	ldr	r2, [pc, #364]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003b30:	f023 0301 	bic.w	r3, r3, #1
 8003b34:	6713      	str	r3, [r2, #112]	; 0x70
 8003b36:	4b59      	ldr	r3, [pc, #356]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	4a58      	ldr	r2, [pc, #352]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003b3c:	f023 0304 	bic.w	r3, r3, #4
 8003b40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d015      	beq.n	8003b76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4a:	f7fd fdcd 	bl	80016e8 <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b50:	e00a      	b.n	8003b68 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b52:	f7fd fdc9 	bl	80016e8 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e0d8      	b.n	8003d1a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b68:	4b4c      	ldr	r3, [pc, #304]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0ee      	beq.n	8003b52 <HAL_RCC_OscConfig+0x386>
 8003b74:	e014      	b.n	8003ba0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b76:	f7fd fdb7 	bl	80016e8 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b7c:	e00a      	b.n	8003b94 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7e:	f7fd fdb3 	bl	80016e8 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e0c2      	b.n	8003d1a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b94:	4b41      	ldr	r3, [pc, #260]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1ee      	bne.n	8003b7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ba0:	7dfb      	ldrb	r3, [r7, #23]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d105      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba6:	4b3d      	ldr	r3, [pc, #244]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	4a3c      	ldr	r2, [pc, #240]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 80ae 	beq.w	8003d18 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bbc:	4b37      	ldr	r3, [pc, #220]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 030c 	and.w	r3, r3, #12
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d06d      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d14b      	bne.n	8003c68 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd0:	4b32      	ldr	r3, [pc, #200]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a31      	ldr	r2, [pc, #196]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003bd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bdc:	f7fd fd84 	bl	80016e8 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be4:	f7fd fd80 	bl	80016e8 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e091      	b.n	8003d1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf6:	4b29      	ldr	r3, [pc, #164]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1f0      	bne.n	8003be4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69da      	ldr	r2, [r3, #28]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	019b      	lsls	r3, r3, #6
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c18:	085b      	lsrs	r3, r3, #1
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	041b      	lsls	r3, r3, #16
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	061b      	lsls	r3, r3, #24
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2c:	071b      	lsls	r3, r3, #28
 8003c2e:	491b      	ldr	r1, [pc, #108]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c34:	4b19      	ldr	r3, [pc, #100]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a18      	ldr	r2, [pc, #96]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fd fd52 	bl	80016e8 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c48:	f7fd fd4e 	bl	80016e8 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e05f      	b.n	8003d1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c5a:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0f0      	beq.n	8003c48 <HAL_RCC_OscConfig+0x47c>
 8003c66:	e057      	b.n	8003d18 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c68:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a0b      	ldr	r2, [pc, #44]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003c6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fd fd38 	bl	80016e8 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7c:	f7fd fd34 	bl	80016e8 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e045      	b.n	8003d1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8e:	4b03      	ldr	r3, [pc, #12]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x4b0>
 8003c9a:	e03d      	b.n	8003d18 <HAL_RCC_OscConfig+0x54c>
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ca4:	4b1f      	ldr	r3, [pc, #124]	; (8003d24 <HAL_RCC_OscConfig+0x558>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d030      	beq.n	8003d14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d129      	bne.n	8003d14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d122      	bne.n	8003d14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cda:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d119      	bne.n	8003d14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	085b      	lsrs	r3, r3, #1
 8003cec:	3b01      	subs	r3, #1
 8003cee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d10f      	bne.n	8003d14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d107      	bne.n	8003d14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d001      	beq.n	8003d18 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e000      	b.n	8003d1a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40023800 	.word	0x40023800

08003d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e0d0      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d40:	4b6a      	ldr	r3, [pc, #424]	; (8003eec <HAL_RCC_ClockConfig+0x1c4>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 030f 	and.w	r3, r3, #15
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d910      	bls.n	8003d70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4e:	4b67      	ldr	r3, [pc, #412]	; (8003eec <HAL_RCC_ClockConfig+0x1c4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f023 020f 	bic.w	r2, r3, #15
 8003d56:	4965      	ldr	r1, [pc, #404]	; (8003eec <HAL_RCC_ClockConfig+0x1c4>)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5e:	4b63      	ldr	r3, [pc, #396]	; (8003eec <HAL_RCC_ClockConfig+0x1c4>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d001      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e0b8      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d020      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d88:	4b59      	ldr	r3, [pc, #356]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	4a58      	ldr	r2, [pc, #352]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003da0:	4b53      	ldr	r3, [pc, #332]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	4a52      	ldr	r2, [pc, #328]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8003da6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003daa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dac:	4b50      	ldr	r3, [pc, #320]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	494d      	ldr	r1, [pc, #308]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d040      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d107      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd2:	4b47      	ldr	r3, [pc, #284]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d115      	bne.n	8003e0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e07f      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d107      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dea:	4b41      	ldr	r3, [pc, #260]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d109      	bne.n	8003e0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e073      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dfa:	4b3d      	ldr	r3, [pc, #244]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e06b      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e0a:	4b39      	ldr	r3, [pc, #228]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f023 0203 	bic.w	r2, r3, #3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	4936      	ldr	r1, [pc, #216]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e1c:	f7fd fc64 	bl	80016e8 <HAL_GetTick>
 8003e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e22:	e00a      	b.n	8003e3a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e24:	f7fd fc60 	bl	80016e8 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e053      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3a:	4b2d      	ldr	r3, [pc, #180]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 020c 	and.w	r2, r3, #12
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d1eb      	bne.n	8003e24 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e4c:	4b27      	ldr	r3, [pc, #156]	; (8003eec <HAL_RCC_ClockConfig+0x1c4>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 030f 	and.w	r3, r3, #15
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d210      	bcs.n	8003e7c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5a:	4b24      	ldr	r3, [pc, #144]	; (8003eec <HAL_RCC_ClockConfig+0x1c4>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f023 020f 	bic.w	r2, r3, #15
 8003e62:	4922      	ldr	r1, [pc, #136]	; (8003eec <HAL_RCC_ClockConfig+0x1c4>)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6a:	4b20      	ldr	r3, [pc, #128]	; (8003eec <HAL_RCC_ClockConfig+0x1c4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d001      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e032      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d008      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e88:	4b19      	ldr	r3, [pc, #100]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	4916      	ldr	r1, [pc, #88]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ea6:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	490e      	ldr	r1, [pc, #56]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eba:	f000 f821 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	091b      	lsrs	r3, r3, #4
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	490a      	ldr	r1, [pc, #40]	; (8003ef4 <HAL_RCC_ClockConfig+0x1cc>)
 8003ecc:	5ccb      	ldrb	r3, [r1, r3]
 8003ece:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed2:	4a09      	ldr	r2, [pc, #36]	; (8003ef8 <HAL_RCC_ClockConfig+0x1d0>)
 8003ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ed6:	4b09      	ldr	r3, [pc, #36]	; (8003efc <HAL_RCC_ClockConfig+0x1d4>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fd fbc0 	bl	8001660 <HAL_InitTick>

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40023c00 	.word	0x40023c00
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	08009b78 	.word	0x08009b78
 8003ef8:	20000000 	.word	0x20000000
 8003efc:	20000004 	.word	0x20000004

08003f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f04:	b094      	sub	sp, #80	; 0x50
 8003f06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f10:	2300      	movs	r3, #0
 8003f12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003f14:	2300      	movs	r3, #0
 8003f16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f18:	4b79      	ldr	r3, [pc, #484]	; (8004100 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 030c 	and.w	r3, r3, #12
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d00d      	beq.n	8003f40 <HAL_RCC_GetSysClockFreq+0x40>
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	f200 80e1 	bhi.w	80040ec <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <HAL_RCC_GetSysClockFreq+0x34>
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d003      	beq.n	8003f3a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f32:	e0db      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f34:	4b73      	ldr	r3, [pc, #460]	; (8004104 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f38:	e0db      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f3a:	4b73      	ldr	r3, [pc, #460]	; (8004108 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f3e:	e0d8      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f40:	4b6f      	ldr	r3, [pc, #444]	; (8004100 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f48:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f4a:	4b6d      	ldr	r3, [pc, #436]	; (8004100 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d063      	beq.n	800401e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f56:	4b6a      	ldr	r3, [pc, #424]	; (8004100 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	099b      	lsrs	r3, r3, #6
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f68:	633b      	str	r3, [r7, #48]	; 0x30
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f72:	4622      	mov	r2, r4
 8003f74:	462b      	mov	r3, r5
 8003f76:	f04f 0000 	mov.w	r0, #0
 8003f7a:	f04f 0100 	mov.w	r1, #0
 8003f7e:	0159      	lsls	r1, r3, #5
 8003f80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f84:	0150      	lsls	r0, r2, #5
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	1a51      	subs	r1, r2, r1
 8003f8e:	6139      	str	r1, [r7, #16]
 8003f90:	4629      	mov	r1, r5
 8003f92:	eb63 0301 	sbc.w	r3, r3, r1
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fa4:	4659      	mov	r1, fp
 8003fa6:	018b      	lsls	r3, r1, #6
 8003fa8:	4651      	mov	r1, sl
 8003faa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fae:	4651      	mov	r1, sl
 8003fb0:	018a      	lsls	r2, r1, #6
 8003fb2:	4651      	mov	r1, sl
 8003fb4:	ebb2 0801 	subs.w	r8, r2, r1
 8003fb8:	4659      	mov	r1, fp
 8003fba:	eb63 0901 	sbc.w	r9, r3, r1
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	f04f 0300 	mov.w	r3, #0
 8003fc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fd2:	4690      	mov	r8, r2
 8003fd4:	4699      	mov	r9, r3
 8003fd6:	4623      	mov	r3, r4
 8003fd8:	eb18 0303 	adds.w	r3, r8, r3
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	462b      	mov	r3, r5
 8003fe0:	eb49 0303 	adc.w	r3, r9, r3
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ff2:	4629      	mov	r1, r5
 8003ff4:	024b      	lsls	r3, r1, #9
 8003ff6:	4621      	mov	r1, r4
 8003ff8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	024a      	lsls	r2, r1, #9
 8004000:	4610      	mov	r0, r2
 8004002:	4619      	mov	r1, r3
 8004004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004006:	2200      	movs	r2, #0
 8004008:	62bb      	str	r3, [r7, #40]	; 0x28
 800400a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800400c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004010:	f7fc f966 	bl	80002e0 <__aeabi_uldivmod>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	4613      	mov	r3, r2
 800401a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800401c:	e058      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800401e:	4b38      	ldr	r3, [pc, #224]	; (8004100 <HAL_RCC_GetSysClockFreq+0x200>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	099b      	lsrs	r3, r3, #6
 8004024:	2200      	movs	r2, #0
 8004026:	4618      	mov	r0, r3
 8004028:	4611      	mov	r1, r2
 800402a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800402e:	623b      	str	r3, [r7, #32]
 8004030:	2300      	movs	r3, #0
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
 8004034:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004038:	4642      	mov	r2, r8
 800403a:	464b      	mov	r3, r9
 800403c:	f04f 0000 	mov.w	r0, #0
 8004040:	f04f 0100 	mov.w	r1, #0
 8004044:	0159      	lsls	r1, r3, #5
 8004046:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800404a:	0150      	lsls	r0, r2, #5
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	4641      	mov	r1, r8
 8004052:	ebb2 0a01 	subs.w	sl, r2, r1
 8004056:	4649      	mov	r1, r9
 8004058:	eb63 0b01 	sbc.w	fp, r3, r1
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004068:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800406c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004070:	ebb2 040a 	subs.w	r4, r2, sl
 8004074:	eb63 050b 	sbc.w	r5, r3, fp
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	00eb      	lsls	r3, r5, #3
 8004082:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004086:	00e2      	lsls	r2, r4, #3
 8004088:	4614      	mov	r4, r2
 800408a:	461d      	mov	r5, r3
 800408c:	4643      	mov	r3, r8
 800408e:	18e3      	adds	r3, r4, r3
 8004090:	603b      	str	r3, [r7, #0]
 8004092:	464b      	mov	r3, r9
 8004094:	eb45 0303 	adc.w	r3, r5, r3
 8004098:	607b      	str	r3, [r7, #4]
 800409a:	f04f 0200 	mov.w	r2, #0
 800409e:	f04f 0300 	mov.w	r3, #0
 80040a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040a6:	4629      	mov	r1, r5
 80040a8:	028b      	lsls	r3, r1, #10
 80040aa:	4621      	mov	r1, r4
 80040ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040b0:	4621      	mov	r1, r4
 80040b2:	028a      	lsls	r2, r1, #10
 80040b4:	4610      	mov	r0, r2
 80040b6:	4619      	mov	r1, r3
 80040b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ba:	2200      	movs	r2, #0
 80040bc:	61bb      	str	r3, [r7, #24]
 80040be:	61fa      	str	r2, [r7, #28]
 80040c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040c4:	f7fc f90c 	bl	80002e0 <__aeabi_uldivmod>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4613      	mov	r3, r2
 80040ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80040d0:	4b0b      	ldr	r3, [pc, #44]	; (8004100 <HAL_RCC_GetSysClockFreq+0x200>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	0c1b      	lsrs	r3, r3, #16
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	3301      	adds	r3, #1
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80040e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040ea:	e002      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <HAL_RCC_GetSysClockFreq+0x204>)
 80040ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3750      	adds	r7, #80	; 0x50
 80040f8:	46bd      	mov	sp, r7
 80040fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040fe:	bf00      	nop
 8004100:	40023800 	.word	0x40023800
 8004104:	00f42400 	.word	0x00f42400
 8004108:	007a1200 	.word	0x007a1200

0800410c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004110:	4b03      	ldr	r3, [pc, #12]	; (8004120 <HAL_RCC_GetHCLKFreq+0x14>)
 8004112:	681b      	ldr	r3, [r3, #0]
}
 8004114:	4618      	mov	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	20000000 	.word	0x20000000

08004124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004128:	f7ff fff0 	bl	800410c <HAL_RCC_GetHCLKFreq>
 800412c:	4602      	mov	r2, r0
 800412e:	4b05      	ldr	r3, [pc, #20]	; (8004144 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	0a9b      	lsrs	r3, r3, #10
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	4903      	ldr	r1, [pc, #12]	; (8004148 <HAL_RCC_GetPCLK1Freq+0x24>)
 800413a:	5ccb      	ldrb	r3, [r1, r3]
 800413c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004140:	4618      	mov	r0, r3
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40023800 	.word	0x40023800
 8004148:	08009b88 	.word	0x08009b88

0800414c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004150:	f7ff ffdc 	bl	800410c <HAL_RCC_GetHCLKFreq>
 8004154:	4602      	mov	r2, r0
 8004156:	4b05      	ldr	r3, [pc, #20]	; (800416c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	0b5b      	lsrs	r3, r3, #13
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	4903      	ldr	r1, [pc, #12]	; (8004170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004162:	5ccb      	ldrb	r3, [r1, r3]
 8004164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004168:	4618      	mov	r0, r3
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40023800 	.word	0x40023800
 8004170:	08009b88 	.word	0x08009b88

08004174 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b088      	sub	sp, #32
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800417c:	2300      	movs	r3, #0
 800417e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004180:	2300      	movs	r3, #0
 8004182:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004184:	2300      	movs	r3, #0
 8004186:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004188:	2300      	movs	r3, #0
 800418a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800418c:	2300      	movs	r3, #0
 800418e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b00      	cmp	r3, #0
 800419a:	d012      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800419c:	4b69      	ldr	r3, [pc, #420]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	4a68      	ldr	r2, [pc, #416]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80041a6:	6093      	str	r3, [r2, #8]
 80041a8:	4b66      	ldr	r3, [pc, #408]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b0:	4964      	ldr	r1, [pc, #400]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80041be:	2301      	movs	r3, #1
 80041c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d017      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041ce:	4b5d      	ldr	r3, [pc, #372]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041dc:	4959      	ldr	r1, [pc, #356]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ec:	d101      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80041ee:	2301      	movs	r3, #1
 80041f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80041fa:	2301      	movs	r3, #1
 80041fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d017      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800420a:	4b4e      	ldr	r3, [pc, #312]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800420c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004210:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	494a      	ldr	r1, [pc, #296]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004228:	d101      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800422a:	2301      	movs	r3, #1
 800422c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004236:	2301      	movs	r3, #1
 8004238:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004246:	2301      	movs	r3, #1
 8004248:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0320 	and.w	r3, r3, #32
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 808b 	beq.w	800436e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004258:	4b3a      	ldr	r3, [pc, #232]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	4a39      	ldr	r2, [pc, #228]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004262:	6413      	str	r3, [r2, #64]	; 0x40
 8004264:	4b37      	ldr	r3, [pc, #220]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426c:	60bb      	str	r3, [r7, #8]
 800426e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004270:	4b35      	ldr	r3, [pc, #212]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a34      	ldr	r2, [pc, #208]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800427a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800427c:	f7fd fa34 	bl	80016e8 <HAL_GetTick>
 8004280:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004284:	f7fd fa30 	bl	80016e8 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b64      	cmp	r3, #100	; 0x64
 8004290:	d901      	bls.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e38f      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004296:	4b2c      	ldr	r3, [pc, #176]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0f0      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042a2:	4b28      	ldr	r3, [pc, #160]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042aa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d035      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d02e      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042c0:	4b20      	ldr	r3, [pc, #128]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042ca:	4b1e      	ldr	r3, [pc, #120]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ce:	4a1d      	ldr	r2, [pc, #116]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042d6:	4b1b      	ldr	r3, [pc, #108]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042da:	4a1a      	ldr	r2, [pc, #104]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80042e2:	4a18      	ldr	r2, [pc, #96]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042e8:	4b16      	ldr	r3, [pc, #88]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d114      	bne.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f4:	f7fd f9f8 	bl	80016e8 <HAL_GetTick>
 80042f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042fa:	e00a      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042fc:	f7fd f9f4 	bl	80016e8 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	f241 3288 	movw	r2, #5000	; 0x1388
 800430a:	4293      	cmp	r3, r2
 800430c:	d901      	bls.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e351      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004312:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0ee      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004326:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800432a:	d111      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800432c:	4b05      	ldr	r3, [pc, #20]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004338:	4b04      	ldr	r3, [pc, #16]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800433a:	400b      	ands	r3, r1
 800433c:	4901      	ldr	r1, [pc, #4]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800433e:	4313      	orrs	r3, r2
 8004340:	608b      	str	r3, [r1, #8]
 8004342:	e00b      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004344:	40023800 	.word	0x40023800
 8004348:	40007000 	.word	0x40007000
 800434c:	0ffffcff 	.word	0x0ffffcff
 8004350:	4bac      	ldr	r3, [pc, #688]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	4aab      	ldr	r2, [pc, #684]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004356:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800435a:	6093      	str	r3, [r2, #8]
 800435c:	4ba9      	ldr	r3, [pc, #676]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800435e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004368:	49a6      	ldr	r1, [pc, #664]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800436a:	4313      	orrs	r3, r2
 800436c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0310 	and.w	r3, r3, #16
 8004376:	2b00      	cmp	r3, #0
 8004378:	d010      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800437a:	4ba2      	ldr	r3, [pc, #648]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800437c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004380:	4aa0      	ldr	r2, [pc, #640]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004382:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004386:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800438a:	4b9e      	ldr	r3, [pc, #632]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800438c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004394:	499b      	ldr	r1, [pc, #620]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004396:	4313      	orrs	r3, r2
 8004398:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00a      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043a8:	4b96      	ldr	r3, [pc, #600]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043b6:	4993      	ldr	r1, [pc, #588]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043ca:	4b8e      	ldr	r3, [pc, #568]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043d8:	498a      	ldr	r1, [pc, #552]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00a      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043ec:	4b85      	ldr	r3, [pc, #532]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043fa:	4982      	ldr	r1, [pc, #520]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800440e:	4b7d      	ldr	r3, [pc, #500]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004414:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441c:	4979      	ldr	r1, [pc, #484]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800441e:	4313      	orrs	r3, r2
 8004420:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00a      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004430:	4b74      	ldr	r3, [pc, #464]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004436:	f023 0203 	bic.w	r2, r3, #3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443e:	4971      	ldr	r1, [pc, #452]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004440:	4313      	orrs	r3, r2
 8004442:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004452:	4b6c      	ldr	r3, [pc, #432]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004458:	f023 020c 	bic.w	r2, r3, #12
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004460:	4968      	ldr	r1, [pc, #416]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00a      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004474:	4b63      	ldr	r3, [pc, #396]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004482:	4960      	ldr	r1, [pc, #384]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004484:	4313      	orrs	r3, r2
 8004486:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004496:	4b5b      	ldr	r3, [pc, #364]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a4:	4957      	ldr	r1, [pc, #348]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00a      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044b8:	4b52      	ldr	r3, [pc, #328]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c6:	494f      	ldr	r1, [pc, #316]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80044da:	4b4a      	ldr	r3, [pc, #296]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e8:	4946      	ldr	r1, [pc, #280]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80044fc:	4b41      	ldr	r3, [pc, #260]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004502:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800450a:	493e      	ldr	r1, [pc, #248]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800450c:	4313      	orrs	r3, r2
 800450e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800451e:	4b39      	ldr	r3, [pc, #228]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004524:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800452c:	4935      	ldr	r1, [pc, #212]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800452e:	4313      	orrs	r3, r2
 8004530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00a      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004540:	4b30      	ldr	r3, [pc, #192]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004546:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800454e:	492d      	ldr	r1, [pc, #180]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d011      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004562:	4b28      	ldr	r3, [pc, #160]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004568:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004570:	4924      	ldr	r1, [pc, #144]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800457c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004580:	d101      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004582:	2301      	movs	r3, #1
 8004584:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004592:	2301      	movs	r3, #1
 8004594:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00a      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045a2:	4b18      	ldr	r3, [pc, #96]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b0:	4914      	ldr	r1, [pc, #80]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00b      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045c4:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045d4:	490b      	ldr	r1, [pc, #44]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00f      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80045e8:	4b06      	ldr	r3, [pc, #24]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045f8:	4902      	ldr	r1, [pc, #8]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004600:	e002      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004602:	bf00      	nop
 8004604:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00b      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004614:	4b8a      	ldr	r3, [pc, #552]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004616:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800461a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004624:	4986      	ldr	r1, [pc, #536]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004626:	4313      	orrs	r3, r2
 8004628:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00b      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004638:	4b81      	ldr	r3, [pc, #516]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800463a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800463e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004648:	497d      	ldr	r1, [pc, #500]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d006      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 80d6 	beq.w	8004810 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004664:	4b76      	ldr	r3, [pc, #472]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a75      	ldr	r2, [pc, #468]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800466a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800466e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004670:	f7fd f83a 	bl	80016e8 <HAL_GetTick>
 8004674:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004676:	e008      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004678:	f7fd f836 	bl	80016e8 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b64      	cmp	r3, #100	; 0x64
 8004684:	d901      	bls.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e195      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800468a:	4b6d      	ldr	r3, [pc, #436]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f0      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d021      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d11d      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046aa:	4b65      	ldr	r3, [pc, #404]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b0:	0c1b      	lsrs	r3, r3, #16
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046b8:	4b61      	ldr	r3, [pc, #388]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046be:	0e1b      	lsrs	r3, r3, #24
 80046c0:	f003 030f 	and.w	r3, r3, #15
 80046c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	019a      	lsls	r2, r3, #6
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	041b      	lsls	r3, r3, #16
 80046d0:	431a      	orrs	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	061b      	lsls	r3, r3, #24
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	071b      	lsls	r3, r3, #28
 80046de:	4958      	ldr	r1, [pc, #352]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d004      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046fa:	d00a      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004704:	2b00      	cmp	r3, #0
 8004706:	d02e      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004710:	d129      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004712:	4b4b      	ldr	r3, [pc, #300]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004718:	0c1b      	lsrs	r3, r3, #16
 800471a:	f003 0303 	and.w	r3, r3, #3
 800471e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004720:	4b47      	ldr	r3, [pc, #284]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004726:	0f1b      	lsrs	r3, r3, #28
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	019a      	lsls	r2, r3, #6
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	041b      	lsls	r3, r3, #16
 8004738:	431a      	orrs	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	061b      	lsls	r3, r3, #24
 8004740:	431a      	orrs	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	071b      	lsls	r3, r3, #28
 8004746:	493e      	ldr	r1, [pc, #248]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004748:	4313      	orrs	r3, r2
 800474a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800474e:	4b3c      	ldr	r3, [pc, #240]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004754:	f023 021f 	bic.w	r2, r3, #31
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	3b01      	subs	r3, #1
 800475e:	4938      	ldr	r1, [pc, #224]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d01d      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004772:	4b33      	ldr	r3, [pc, #204]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004778:	0e1b      	lsrs	r3, r3, #24
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004780:	4b2f      	ldr	r3, [pc, #188]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004786:	0f1b      	lsrs	r3, r3, #28
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	019a      	lsls	r2, r3, #6
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	041b      	lsls	r3, r3, #16
 800479a:	431a      	orrs	r2, r3
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	061b      	lsls	r3, r3, #24
 80047a0:	431a      	orrs	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	071b      	lsls	r3, r3, #28
 80047a6:	4926      	ldr	r1, [pc, #152]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d011      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	019a      	lsls	r2, r3, #6
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	041b      	lsls	r3, r3, #16
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	061b      	lsls	r3, r3, #24
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	071b      	lsls	r3, r3, #28
 80047d6:	491a      	ldr	r1, [pc, #104]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047de:	4b18      	ldr	r3, [pc, #96]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a17      	ldr	r2, [pc, #92]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ea:	f7fc ff7d 	bl	80016e8 <HAL_GetTick>
 80047ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047f0:	e008      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047f2:	f7fc ff79 	bl	80016e8 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b64      	cmp	r3, #100	; 0x64
 80047fe:	d901      	bls.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e0d8      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004804:	4b0e      	ldr	r3, [pc, #56]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0f0      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	2b01      	cmp	r3, #1
 8004814:	f040 80ce 	bne.w	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004818:	4b09      	ldr	r3, [pc, #36]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a08      	ldr	r2, [pc, #32]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800481e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004822:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004824:	f7fc ff60 	bl	80016e8 <HAL_GetTick>
 8004828:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800482a:	e00b      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800482c:	f7fc ff5c 	bl	80016e8 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b64      	cmp	r3, #100	; 0x64
 8004838:	d904      	bls.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e0bb      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800483e:	bf00      	nop
 8004840:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004844:	4b5e      	ldr	r3, [pc, #376]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800484c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004850:	d0ec      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004862:	2b00      	cmp	r3, #0
 8004864:	d009      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800486e:	2b00      	cmp	r3, #0
 8004870:	d02e      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	2b00      	cmp	r3, #0
 8004878:	d12a      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800487a:	4b51      	ldr	r3, [pc, #324]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800487c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004880:	0c1b      	lsrs	r3, r3, #16
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004888:	4b4d      	ldr	r3, [pc, #308]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800488a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488e:	0f1b      	lsrs	r3, r3, #28
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	019a      	lsls	r2, r3, #6
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	041b      	lsls	r3, r3, #16
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	061b      	lsls	r3, r3, #24
 80048a8:	431a      	orrs	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	071b      	lsls	r3, r3, #28
 80048ae:	4944      	ldr	r1, [pc, #272]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80048b6:	4b42      	ldr	r3, [pc, #264]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c4:	3b01      	subs	r3, #1
 80048c6:	021b      	lsls	r3, r3, #8
 80048c8:	493d      	ldr	r1, [pc, #244]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d022      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048e4:	d11d      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048e6:	4b36      	ldr	r3, [pc, #216]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ec:	0e1b      	lsrs	r3, r3, #24
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048f4:	4b32      	ldr	r3, [pc, #200]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fa:	0f1b      	lsrs	r3, r3, #28
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	019a      	lsls	r2, r3, #6
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	041b      	lsls	r3, r3, #16
 800490e:	431a      	orrs	r2, r3
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	061b      	lsls	r3, r3, #24
 8004914:	431a      	orrs	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	071b      	lsls	r3, r3, #28
 800491a:	4929      	ldr	r1, [pc, #164]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b00      	cmp	r3, #0
 800492c:	d028      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800492e:	4b24      	ldr	r3, [pc, #144]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004934:	0e1b      	lsrs	r3, r3, #24
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800493c:	4b20      	ldr	r3, [pc, #128]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800493e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004942:	0c1b      	lsrs	r3, r3, #16
 8004944:	f003 0303 	and.w	r3, r3, #3
 8004948:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	019a      	lsls	r2, r3, #6
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	041b      	lsls	r3, r3, #16
 8004954:	431a      	orrs	r2, r3
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	061b      	lsls	r3, r3, #24
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	071b      	lsls	r3, r3, #28
 8004962:	4917      	ldr	r1, [pc, #92]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800496a:	4b15      	ldr	r3, [pc, #84]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800496c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004970:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	4911      	ldr	r1, [pc, #68]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004980:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a0e      	ldr	r2, [pc, #56]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800498a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800498c:	f7fc feac 	bl	80016e8 <HAL_GetTick>
 8004990:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004992:	e008      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004994:	f7fc fea8 	bl	80016e8 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b64      	cmp	r3, #100	; 0x64
 80049a0:	d901      	bls.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e007      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049a6:	4b06      	ldr	r3, [pc, #24]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049b2:	d1ef      	bne.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3720      	adds	r7, #32
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	40023800 	.word	0x40023800

080049c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e040      	b.n	8004a58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d106      	bne.n	80049ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7fc fbe4 	bl	80011b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2224      	movs	r2, #36	; 0x24
 80049f0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0201 	bic.w	r2, r2, #1
 8004a00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fbc2 	bl	800518c <UART_SetConfig>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d101      	bne.n	8004a12 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e022      	b.n	8004a58 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fe1a 	bl	8005654 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0201 	orr.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 fea1 	bl	8005798 <UART_CheckIdleState>
 8004a56:	4603      	mov	r3, r0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08a      	sub	sp, #40	; 0x28
 8004a64:	af02      	add	r7, sp, #8
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	603b      	str	r3, [r7, #0]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	d171      	bne.n	8004b5c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <HAL_UART_Transmit+0x24>
 8004a7e:	88fb      	ldrh	r3, [r7, #6]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e06a      	b.n	8004b5e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2221      	movs	r2, #33	; 0x21
 8004a94:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a96:	f7fc fe27 	bl	80016e8 <HAL_GetTick>
 8004a9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	88fa      	ldrh	r2, [r7, #6]
 8004aa0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	88fa      	ldrh	r2, [r7, #6]
 8004aa8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab4:	d108      	bne.n	8004ac8 <HAL_UART_Transmit+0x68>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d104      	bne.n	8004ac8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	61bb      	str	r3, [r7, #24]
 8004ac6:	e003      	b.n	8004ad0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004acc:	2300      	movs	r3, #0
 8004ace:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ad0:	e02c      	b.n	8004b2c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	2180      	movs	r1, #128	; 0x80
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 fea8 	bl	8005832 <UART_WaitOnFlagUntilTimeout>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e038      	b.n	8004b5e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10b      	bne.n	8004b0a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	3302      	adds	r3, #2
 8004b06:	61bb      	str	r3, [r7, #24]
 8004b08:	e007      	b.n	8004b1a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	781a      	ldrb	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	3301      	adds	r3, #1
 8004b18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1cc      	bne.n	8004ad2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	2140      	movs	r1, #64	; 0x40
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 fe75 	bl	8005832 <UART_WaitOnFlagUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e005      	b.n	8004b5e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2220      	movs	r2, #32
 8004b56:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	e000      	b.n	8004b5e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004b5c:	2302      	movs	r3, #2
  }
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3720      	adds	r7, #32
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
	...

08004b68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b0ba      	sub	sp, #232	; 0xe8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004b92:	f640 030f 	movw	r3, #2063	; 0x80f
 8004b96:	4013      	ands	r3, r2
 8004b98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004b9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d115      	bne.n	8004bd0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ba8:	f003 0320 	and.w	r3, r3, #32
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00f      	beq.n	8004bd0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bb4:	f003 0320 	and.w	r3, r3, #32
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d009      	beq.n	8004bd0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 82ac 	beq.w	800511e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	4798      	blx	r3
      }
      return;
 8004bce:	e2a6      	b.n	800511e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004bd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 8117 	beq.w	8004e08 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004bda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004be6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004bea:	4b85      	ldr	r3, [pc, #532]	; (8004e00 <HAL_UART_IRQHandler+0x298>)
 8004bec:	4013      	ands	r3, r2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 810a 	beq.w	8004e08 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d011      	beq.n	8004c24 <HAL_UART_IRQHandler+0xbc>
 8004c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00b      	beq.n	8004c24 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2201      	movs	r2, #1
 8004c12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c1a:	f043 0201 	orr.w	r2, r3, #1
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d011      	beq.n	8004c54 <HAL_UART_IRQHandler+0xec>
 8004c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00b      	beq.n	8004c54 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2202      	movs	r2, #2
 8004c42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c4a:	f043 0204 	orr.w	r2, r3, #4
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d011      	beq.n	8004c84 <HAL_UART_IRQHandler+0x11c>
 8004c60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00b      	beq.n	8004c84 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2204      	movs	r2, #4
 8004c72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c7a:	f043 0202 	orr.w	r2, r3, #2
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d017      	beq.n	8004cc0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c94:	f003 0320 	and.w	r3, r3, #32
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d105      	bne.n	8004ca8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ca0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00b      	beq.n	8004cc0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2208      	movs	r2, #8
 8004cae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cb6:	f043 0208 	orr.w	r2, r3, #8
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d012      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x18a>
 8004ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00c      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ce0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ce8:	f043 0220 	orr.w	r2, r3, #32
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 8212 	beq.w	8005122 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00d      	beq.n	8004d26 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d007      	beq.n	8004d26 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3a:	2b40      	cmp	r3, #64	; 0x40
 8004d3c:	d005      	beq.n	8004d4a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d42:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d04f      	beq.n	8004dea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 fe37 	bl	80059be <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5a:	2b40      	cmp	r3, #64	; 0x40
 8004d5c:	d141      	bne.n	8004de2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	3308      	adds	r3, #8
 8004d64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d6c:	e853 3f00 	ldrex	r3, [r3]
 8004d70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3308      	adds	r3, #8
 8004d86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d9a:	e841 2300 	strex	r3, r2, [r1]
 8004d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004da2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1d9      	bne.n	8004d5e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d013      	beq.n	8004dda <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db6:	4a13      	ldr	r2, [pc, #76]	; (8004e04 <HAL_UART_IRQHandler+0x29c>)
 8004db8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fd fbf8 	bl	80025b4 <HAL_DMA_Abort_IT>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d017      	beq.n	8004dfa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd8:	e00f      	b.n	8004dfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f9b6 	bl	800514c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de0:	e00b      	b.n	8004dfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f9b2 	bl	800514c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de8:	e007      	b.n	8004dfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f9ae 	bl	800514c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004df8:	e193      	b.n	8005122 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dfa:	bf00      	nop
    return;
 8004dfc:	e191      	b.n	8005122 <HAL_UART_IRQHandler+0x5ba>
 8004dfe:	bf00      	nop
 8004e00:	04000120 	.word	0x04000120
 8004e04:	08005a87 	.word	0x08005a87

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	f040 814c 	bne.w	80050aa <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e16:	f003 0310 	and.w	r3, r3, #16
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 8145 	beq.w	80050aa <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e24:	f003 0310 	and.w	r3, r3, #16
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 813e 	beq.w	80050aa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2210      	movs	r2, #16
 8004e34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e40:	2b40      	cmp	r3, #64	; 0x40
 8004e42:	f040 80b6 	bne.w	8004fb2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e52:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 8165 	beq.w	8005126 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e66:	429a      	cmp	r2, r3
 8004e68:	f080 815d 	bcs.w	8005126 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e80:	f000 8086 	beq.w	8004f90 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004eae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004eb2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004eba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ebe:	e841 2300 	strex	r3, r2, [r1]
 8004ec2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1da      	bne.n	8004e84 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3308      	adds	r3, #8
 8004ed4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ed8:	e853 3f00 	ldrex	r3, [r3]
 8004edc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ede:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ee0:	f023 0301 	bic.w	r3, r3, #1
 8004ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3308      	adds	r3, #8
 8004eee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ef2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ef6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004efa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e1      	bne.n	8004ece <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3308      	adds	r3, #8
 8004f10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f14:	e853 3f00 	ldrex	r3, [r3]
 8004f18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3308      	adds	r3, #8
 8004f2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f36:	e841 2300 	strex	r3, r2, [r1]
 8004f3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1e3      	bne.n	8004f0a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f58:	e853 3f00 	ldrex	r3, [r3]
 8004f5c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f60:	f023 0310 	bic.w	r3, r3, #16
 8004f64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f72:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f74:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f7a:	e841 2300 	strex	r3, r2, [r1]
 8004f7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1e4      	bne.n	8004f50 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fd faa2 	bl	80024d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	4619      	mov	r1, r3
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f8d8 	bl	8005160 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004fb0:	e0b9      	b.n	8005126 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 80ab 	beq.w	800512a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004fd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 80a6 	beq.w	800512a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe6:	e853 3f00 	ldrex	r3, [r3]
 8004fea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ff2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005000:	647b      	str	r3, [r7, #68]	; 0x44
 8005002:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005004:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005006:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005008:	e841 2300 	strex	r3, r2, [r1]
 800500c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800500e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1e4      	bne.n	8004fde <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3308      	adds	r3, #8
 800501a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	e853 3f00 	ldrex	r3, [r3]
 8005022:	623b      	str	r3, [r7, #32]
   return(result);
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	f023 0301 	bic.w	r3, r3, #1
 800502a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	3308      	adds	r3, #8
 8005034:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005038:	633a      	str	r2, [r7, #48]	; 0x30
 800503a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800503e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005040:	e841 2300 	strex	r3, r2, [r1]
 8005044:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1e3      	bne.n	8005014 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2220      	movs	r2, #32
 8005050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	e853 3f00 	ldrex	r3, [r3]
 800506c:	60fb      	str	r3, [r7, #12]
   return(result);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f023 0310 	bic.w	r3, r3, #16
 8005074:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	461a      	mov	r2, r3
 800507e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005082:	61fb      	str	r3, [r7, #28]
 8005084:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005086:	69b9      	ldr	r1, [r7, #24]
 8005088:	69fa      	ldr	r2, [r7, #28]
 800508a:	e841 2300 	strex	r3, r2, [r1]
 800508e:	617b      	str	r3, [r7, #20]
   return(result);
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1e4      	bne.n	8005060 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2202      	movs	r2, #2
 800509a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800509c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050a0:	4619      	mov	r1, r3
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f85c 	bl	8005160 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80050a8:	e03f      	b.n	800512a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80050aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00e      	beq.n	80050d4 <HAL_UART_IRQHandler+0x56c>
 80050b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d008      	beq.n	80050d4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80050ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f853 	bl	8005178 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050d2:	e02d      	b.n	8005130 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80050d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00e      	beq.n	80050fe <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80050e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d008      	beq.n	80050fe <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d01c      	beq.n	800512e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	4798      	blx	r3
    }
    return;
 80050fc:	e017      	b.n	800512e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80050fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005106:	2b00      	cmp	r3, #0
 8005108:	d012      	beq.n	8005130 <HAL_UART_IRQHandler+0x5c8>
 800510a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800510e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00c      	beq.n	8005130 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 fccb 	bl	8005ab2 <UART_EndTransmit_IT>
    return;
 800511c:	e008      	b.n	8005130 <HAL_UART_IRQHandler+0x5c8>
      return;
 800511e:	bf00      	nop
 8005120:	e006      	b.n	8005130 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005122:	bf00      	nop
 8005124:	e004      	b.n	8005130 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005126:	bf00      	nop
 8005128:	e002      	b.n	8005130 <HAL_UART_IRQHandler+0x5c8>
      return;
 800512a:	bf00      	nop
 800512c:	e000      	b.n	8005130 <HAL_UART_IRQHandler+0x5c8>
    return;
 800512e:	bf00      	nop
  }

}
 8005130:	37e8      	adds	r7, #232	; 0xe8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop

08005138 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b088      	sub	sp, #32
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005194:	2300      	movs	r3, #0
 8005196:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	431a      	orrs	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	431a      	orrs	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	4ba6      	ldr	r3, [pc, #664]	; (8005450 <UART_SetConfig+0x2c4>)
 80051b8:	4013      	ands	r3, r2
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	6812      	ldr	r2, [r2, #0]
 80051be:	6979      	ldr	r1, [r7, #20]
 80051c0:	430b      	orrs	r3, r1
 80051c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a94      	ldr	r2, [pc, #592]	; (8005454 <UART_SetConfig+0x2c8>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d120      	bne.n	800524a <UART_SetConfig+0xbe>
 8005208:	4b93      	ldr	r3, [pc, #588]	; (8005458 <UART_SetConfig+0x2cc>)
 800520a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	2b03      	cmp	r3, #3
 8005214:	d816      	bhi.n	8005244 <UART_SetConfig+0xb8>
 8005216:	a201      	add	r2, pc, #4	; (adr r2, 800521c <UART_SetConfig+0x90>)
 8005218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521c:	0800522d 	.word	0x0800522d
 8005220:	08005239 	.word	0x08005239
 8005224:	08005233 	.word	0x08005233
 8005228:	0800523f 	.word	0x0800523f
 800522c:	2301      	movs	r3, #1
 800522e:	77fb      	strb	r3, [r7, #31]
 8005230:	e150      	b.n	80054d4 <UART_SetConfig+0x348>
 8005232:	2302      	movs	r3, #2
 8005234:	77fb      	strb	r3, [r7, #31]
 8005236:	e14d      	b.n	80054d4 <UART_SetConfig+0x348>
 8005238:	2304      	movs	r3, #4
 800523a:	77fb      	strb	r3, [r7, #31]
 800523c:	e14a      	b.n	80054d4 <UART_SetConfig+0x348>
 800523e:	2308      	movs	r3, #8
 8005240:	77fb      	strb	r3, [r7, #31]
 8005242:	e147      	b.n	80054d4 <UART_SetConfig+0x348>
 8005244:	2310      	movs	r3, #16
 8005246:	77fb      	strb	r3, [r7, #31]
 8005248:	e144      	b.n	80054d4 <UART_SetConfig+0x348>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a83      	ldr	r2, [pc, #524]	; (800545c <UART_SetConfig+0x2d0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d132      	bne.n	80052ba <UART_SetConfig+0x12e>
 8005254:	4b80      	ldr	r3, [pc, #512]	; (8005458 <UART_SetConfig+0x2cc>)
 8005256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525a:	f003 030c 	and.w	r3, r3, #12
 800525e:	2b0c      	cmp	r3, #12
 8005260:	d828      	bhi.n	80052b4 <UART_SetConfig+0x128>
 8005262:	a201      	add	r2, pc, #4	; (adr r2, 8005268 <UART_SetConfig+0xdc>)
 8005264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005268:	0800529d 	.word	0x0800529d
 800526c:	080052b5 	.word	0x080052b5
 8005270:	080052b5 	.word	0x080052b5
 8005274:	080052b5 	.word	0x080052b5
 8005278:	080052a9 	.word	0x080052a9
 800527c:	080052b5 	.word	0x080052b5
 8005280:	080052b5 	.word	0x080052b5
 8005284:	080052b5 	.word	0x080052b5
 8005288:	080052a3 	.word	0x080052a3
 800528c:	080052b5 	.word	0x080052b5
 8005290:	080052b5 	.word	0x080052b5
 8005294:	080052b5 	.word	0x080052b5
 8005298:	080052af 	.word	0x080052af
 800529c:	2300      	movs	r3, #0
 800529e:	77fb      	strb	r3, [r7, #31]
 80052a0:	e118      	b.n	80054d4 <UART_SetConfig+0x348>
 80052a2:	2302      	movs	r3, #2
 80052a4:	77fb      	strb	r3, [r7, #31]
 80052a6:	e115      	b.n	80054d4 <UART_SetConfig+0x348>
 80052a8:	2304      	movs	r3, #4
 80052aa:	77fb      	strb	r3, [r7, #31]
 80052ac:	e112      	b.n	80054d4 <UART_SetConfig+0x348>
 80052ae:	2308      	movs	r3, #8
 80052b0:	77fb      	strb	r3, [r7, #31]
 80052b2:	e10f      	b.n	80054d4 <UART_SetConfig+0x348>
 80052b4:	2310      	movs	r3, #16
 80052b6:	77fb      	strb	r3, [r7, #31]
 80052b8:	e10c      	b.n	80054d4 <UART_SetConfig+0x348>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a68      	ldr	r2, [pc, #416]	; (8005460 <UART_SetConfig+0x2d4>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d120      	bne.n	8005306 <UART_SetConfig+0x17a>
 80052c4:	4b64      	ldr	r3, [pc, #400]	; (8005458 <UART_SetConfig+0x2cc>)
 80052c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052ce:	2b30      	cmp	r3, #48	; 0x30
 80052d0:	d013      	beq.n	80052fa <UART_SetConfig+0x16e>
 80052d2:	2b30      	cmp	r3, #48	; 0x30
 80052d4:	d814      	bhi.n	8005300 <UART_SetConfig+0x174>
 80052d6:	2b20      	cmp	r3, #32
 80052d8:	d009      	beq.n	80052ee <UART_SetConfig+0x162>
 80052da:	2b20      	cmp	r3, #32
 80052dc:	d810      	bhi.n	8005300 <UART_SetConfig+0x174>
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <UART_SetConfig+0x15c>
 80052e2:	2b10      	cmp	r3, #16
 80052e4:	d006      	beq.n	80052f4 <UART_SetConfig+0x168>
 80052e6:	e00b      	b.n	8005300 <UART_SetConfig+0x174>
 80052e8:	2300      	movs	r3, #0
 80052ea:	77fb      	strb	r3, [r7, #31]
 80052ec:	e0f2      	b.n	80054d4 <UART_SetConfig+0x348>
 80052ee:	2302      	movs	r3, #2
 80052f0:	77fb      	strb	r3, [r7, #31]
 80052f2:	e0ef      	b.n	80054d4 <UART_SetConfig+0x348>
 80052f4:	2304      	movs	r3, #4
 80052f6:	77fb      	strb	r3, [r7, #31]
 80052f8:	e0ec      	b.n	80054d4 <UART_SetConfig+0x348>
 80052fa:	2308      	movs	r3, #8
 80052fc:	77fb      	strb	r3, [r7, #31]
 80052fe:	e0e9      	b.n	80054d4 <UART_SetConfig+0x348>
 8005300:	2310      	movs	r3, #16
 8005302:	77fb      	strb	r3, [r7, #31]
 8005304:	e0e6      	b.n	80054d4 <UART_SetConfig+0x348>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a56      	ldr	r2, [pc, #344]	; (8005464 <UART_SetConfig+0x2d8>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d120      	bne.n	8005352 <UART_SetConfig+0x1c6>
 8005310:	4b51      	ldr	r3, [pc, #324]	; (8005458 <UART_SetConfig+0x2cc>)
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005316:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800531a:	2bc0      	cmp	r3, #192	; 0xc0
 800531c:	d013      	beq.n	8005346 <UART_SetConfig+0x1ba>
 800531e:	2bc0      	cmp	r3, #192	; 0xc0
 8005320:	d814      	bhi.n	800534c <UART_SetConfig+0x1c0>
 8005322:	2b80      	cmp	r3, #128	; 0x80
 8005324:	d009      	beq.n	800533a <UART_SetConfig+0x1ae>
 8005326:	2b80      	cmp	r3, #128	; 0x80
 8005328:	d810      	bhi.n	800534c <UART_SetConfig+0x1c0>
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <UART_SetConfig+0x1a8>
 800532e:	2b40      	cmp	r3, #64	; 0x40
 8005330:	d006      	beq.n	8005340 <UART_SetConfig+0x1b4>
 8005332:	e00b      	b.n	800534c <UART_SetConfig+0x1c0>
 8005334:	2300      	movs	r3, #0
 8005336:	77fb      	strb	r3, [r7, #31]
 8005338:	e0cc      	b.n	80054d4 <UART_SetConfig+0x348>
 800533a:	2302      	movs	r3, #2
 800533c:	77fb      	strb	r3, [r7, #31]
 800533e:	e0c9      	b.n	80054d4 <UART_SetConfig+0x348>
 8005340:	2304      	movs	r3, #4
 8005342:	77fb      	strb	r3, [r7, #31]
 8005344:	e0c6      	b.n	80054d4 <UART_SetConfig+0x348>
 8005346:	2308      	movs	r3, #8
 8005348:	77fb      	strb	r3, [r7, #31]
 800534a:	e0c3      	b.n	80054d4 <UART_SetConfig+0x348>
 800534c:	2310      	movs	r3, #16
 800534e:	77fb      	strb	r3, [r7, #31]
 8005350:	e0c0      	b.n	80054d4 <UART_SetConfig+0x348>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a44      	ldr	r2, [pc, #272]	; (8005468 <UART_SetConfig+0x2dc>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d125      	bne.n	80053a8 <UART_SetConfig+0x21c>
 800535c:	4b3e      	ldr	r3, [pc, #248]	; (8005458 <UART_SetConfig+0x2cc>)
 800535e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005366:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800536a:	d017      	beq.n	800539c <UART_SetConfig+0x210>
 800536c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005370:	d817      	bhi.n	80053a2 <UART_SetConfig+0x216>
 8005372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005376:	d00b      	beq.n	8005390 <UART_SetConfig+0x204>
 8005378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800537c:	d811      	bhi.n	80053a2 <UART_SetConfig+0x216>
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <UART_SetConfig+0x1fe>
 8005382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005386:	d006      	beq.n	8005396 <UART_SetConfig+0x20a>
 8005388:	e00b      	b.n	80053a2 <UART_SetConfig+0x216>
 800538a:	2300      	movs	r3, #0
 800538c:	77fb      	strb	r3, [r7, #31]
 800538e:	e0a1      	b.n	80054d4 <UART_SetConfig+0x348>
 8005390:	2302      	movs	r3, #2
 8005392:	77fb      	strb	r3, [r7, #31]
 8005394:	e09e      	b.n	80054d4 <UART_SetConfig+0x348>
 8005396:	2304      	movs	r3, #4
 8005398:	77fb      	strb	r3, [r7, #31]
 800539a:	e09b      	b.n	80054d4 <UART_SetConfig+0x348>
 800539c:	2308      	movs	r3, #8
 800539e:	77fb      	strb	r3, [r7, #31]
 80053a0:	e098      	b.n	80054d4 <UART_SetConfig+0x348>
 80053a2:	2310      	movs	r3, #16
 80053a4:	77fb      	strb	r3, [r7, #31]
 80053a6:	e095      	b.n	80054d4 <UART_SetConfig+0x348>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a2f      	ldr	r2, [pc, #188]	; (800546c <UART_SetConfig+0x2e0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d125      	bne.n	80053fe <UART_SetConfig+0x272>
 80053b2:	4b29      	ldr	r3, [pc, #164]	; (8005458 <UART_SetConfig+0x2cc>)
 80053b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053c0:	d017      	beq.n	80053f2 <UART_SetConfig+0x266>
 80053c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053c6:	d817      	bhi.n	80053f8 <UART_SetConfig+0x26c>
 80053c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053cc:	d00b      	beq.n	80053e6 <UART_SetConfig+0x25a>
 80053ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053d2:	d811      	bhi.n	80053f8 <UART_SetConfig+0x26c>
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <UART_SetConfig+0x254>
 80053d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053dc:	d006      	beq.n	80053ec <UART_SetConfig+0x260>
 80053de:	e00b      	b.n	80053f8 <UART_SetConfig+0x26c>
 80053e0:	2301      	movs	r3, #1
 80053e2:	77fb      	strb	r3, [r7, #31]
 80053e4:	e076      	b.n	80054d4 <UART_SetConfig+0x348>
 80053e6:	2302      	movs	r3, #2
 80053e8:	77fb      	strb	r3, [r7, #31]
 80053ea:	e073      	b.n	80054d4 <UART_SetConfig+0x348>
 80053ec:	2304      	movs	r3, #4
 80053ee:	77fb      	strb	r3, [r7, #31]
 80053f0:	e070      	b.n	80054d4 <UART_SetConfig+0x348>
 80053f2:	2308      	movs	r3, #8
 80053f4:	77fb      	strb	r3, [r7, #31]
 80053f6:	e06d      	b.n	80054d4 <UART_SetConfig+0x348>
 80053f8:	2310      	movs	r3, #16
 80053fa:	77fb      	strb	r3, [r7, #31]
 80053fc:	e06a      	b.n	80054d4 <UART_SetConfig+0x348>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a1b      	ldr	r2, [pc, #108]	; (8005470 <UART_SetConfig+0x2e4>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d138      	bne.n	800547a <UART_SetConfig+0x2ee>
 8005408:	4b13      	ldr	r3, [pc, #76]	; (8005458 <UART_SetConfig+0x2cc>)
 800540a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005412:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005416:	d017      	beq.n	8005448 <UART_SetConfig+0x2bc>
 8005418:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800541c:	d82a      	bhi.n	8005474 <UART_SetConfig+0x2e8>
 800541e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005422:	d00b      	beq.n	800543c <UART_SetConfig+0x2b0>
 8005424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005428:	d824      	bhi.n	8005474 <UART_SetConfig+0x2e8>
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <UART_SetConfig+0x2aa>
 800542e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005432:	d006      	beq.n	8005442 <UART_SetConfig+0x2b6>
 8005434:	e01e      	b.n	8005474 <UART_SetConfig+0x2e8>
 8005436:	2300      	movs	r3, #0
 8005438:	77fb      	strb	r3, [r7, #31]
 800543a:	e04b      	b.n	80054d4 <UART_SetConfig+0x348>
 800543c:	2302      	movs	r3, #2
 800543e:	77fb      	strb	r3, [r7, #31]
 8005440:	e048      	b.n	80054d4 <UART_SetConfig+0x348>
 8005442:	2304      	movs	r3, #4
 8005444:	77fb      	strb	r3, [r7, #31]
 8005446:	e045      	b.n	80054d4 <UART_SetConfig+0x348>
 8005448:	2308      	movs	r3, #8
 800544a:	77fb      	strb	r3, [r7, #31]
 800544c:	e042      	b.n	80054d4 <UART_SetConfig+0x348>
 800544e:	bf00      	nop
 8005450:	efff69f3 	.word	0xefff69f3
 8005454:	40011000 	.word	0x40011000
 8005458:	40023800 	.word	0x40023800
 800545c:	40004400 	.word	0x40004400
 8005460:	40004800 	.word	0x40004800
 8005464:	40004c00 	.word	0x40004c00
 8005468:	40005000 	.word	0x40005000
 800546c:	40011400 	.word	0x40011400
 8005470:	40007800 	.word	0x40007800
 8005474:	2310      	movs	r3, #16
 8005476:	77fb      	strb	r3, [r7, #31]
 8005478:	e02c      	b.n	80054d4 <UART_SetConfig+0x348>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a72      	ldr	r2, [pc, #456]	; (8005648 <UART_SetConfig+0x4bc>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d125      	bne.n	80054d0 <UART_SetConfig+0x344>
 8005484:	4b71      	ldr	r3, [pc, #452]	; (800564c <UART_SetConfig+0x4c0>)
 8005486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800548a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800548e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005492:	d017      	beq.n	80054c4 <UART_SetConfig+0x338>
 8005494:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005498:	d817      	bhi.n	80054ca <UART_SetConfig+0x33e>
 800549a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800549e:	d00b      	beq.n	80054b8 <UART_SetConfig+0x32c>
 80054a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a4:	d811      	bhi.n	80054ca <UART_SetConfig+0x33e>
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <UART_SetConfig+0x326>
 80054aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054ae:	d006      	beq.n	80054be <UART_SetConfig+0x332>
 80054b0:	e00b      	b.n	80054ca <UART_SetConfig+0x33e>
 80054b2:	2300      	movs	r3, #0
 80054b4:	77fb      	strb	r3, [r7, #31]
 80054b6:	e00d      	b.n	80054d4 <UART_SetConfig+0x348>
 80054b8:	2302      	movs	r3, #2
 80054ba:	77fb      	strb	r3, [r7, #31]
 80054bc:	e00a      	b.n	80054d4 <UART_SetConfig+0x348>
 80054be:	2304      	movs	r3, #4
 80054c0:	77fb      	strb	r3, [r7, #31]
 80054c2:	e007      	b.n	80054d4 <UART_SetConfig+0x348>
 80054c4:	2308      	movs	r3, #8
 80054c6:	77fb      	strb	r3, [r7, #31]
 80054c8:	e004      	b.n	80054d4 <UART_SetConfig+0x348>
 80054ca:	2310      	movs	r3, #16
 80054cc:	77fb      	strb	r3, [r7, #31]
 80054ce:	e001      	b.n	80054d4 <UART_SetConfig+0x348>
 80054d0:	2310      	movs	r3, #16
 80054d2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	69db      	ldr	r3, [r3, #28]
 80054d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054dc:	d15b      	bne.n	8005596 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80054de:	7ffb      	ldrb	r3, [r7, #31]
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d828      	bhi.n	8005536 <UART_SetConfig+0x3aa>
 80054e4:	a201      	add	r2, pc, #4	; (adr r2, 80054ec <UART_SetConfig+0x360>)
 80054e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ea:	bf00      	nop
 80054ec:	08005511 	.word	0x08005511
 80054f0:	08005519 	.word	0x08005519
 80054f4:	08005521 	.word	0x08005521
 80054f8:	08005537 	.word	0x08005537
 80054fc:	08005527 	.word	0x08005527
 8005500:	08005537 	.word	0x08005537
 8005504:	08005537 	.word	0x08005537
 8005508:	08005537 	.word	0x08005537
 800550c:	0800552f 	.word	0x0800552f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005510:	f7fe fe08 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 8005514:	61b8      	str	r0, [r7, #24]
        break;
 8005516:	e013      	b.n	8005540 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005518:	f7fe fe18 	bl	800414c <HAL_RCC_GetPCLK2Freq>
 800551c:	61b8      	str	r0, [r7, #24]
        break;
 800551e:	e00f      	b.n	8005540 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005520:	4b4b      	ldr	r3, [pc, #300]	; (8005650 <UART_SetConfig+0x4c4>)
 8005522:	61bb      	str	r3, [r7, #24]
        break;
 8005524:	e00c      	b.n	8005540 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005526:	f7fe fceb 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 800552a:	61b8      	str	r0, [r7, #24]
        break;
 800552c:	e008      	b.n	8005540 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800552e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005532:	61bb      	str	r3, [r7, #24]
        break;
 8005534:	e004      	b.n	8005540 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005536:	2300      	movs	r3, #0
 8005538:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	77bb      	strb	r3, [r7, #30]
        break;
 800553e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d074      	beq.n	8005630 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	005a      	lsls	r2, r3, #1
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	085b      	lsrs	r3, r3, #1
 8005550:	441a      	add	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	fbb2 f3f3 	udiv	r3, r2, r3
 800555a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	2b0f      	cmp	r3, #15
 8005560:	d916      	bls.n	8005590 <UART_SetConfig+0x404>
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005568:	d212      	bcs.n	8005590 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	b29b      	uxth	r3, r3
 800556e:	f023 030f 	bic.w	r3, r3, #15
 8005572:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	085b      	lsrs	r3, r3, #1
 8005578:	b29b      	uxth	r3, r3
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	b29a      	uxth	r2, r3
 8005580:	89fb      	ldrh	r3, [r7, #14]
 8005582:	4313      	orrs	r3, r2
 8005584:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	89fa      	ldrh	r2, [r7, #14]
 800558c:	60da      	str	r2, [r3, #12]
 800558e:	e04f      	b.n	8005630 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	77bb      	strb	r3, [r7, #30]
 8005594:	e04c      	b.n	8005630 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005596:	7ffb      	ldrb	r3, [r7, #31]
 8005598:	2b08      	cmp	r3, #8
 800559a:	d828      	bhi.n	80055ee <UART_SetConfig+0x462>
 800559c:	a201      	add	r2, pc, #4	; (adr r2, 80055a4 <UART_SetConfig+0x418>)
 800559e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a2:	bf00      	nop
 80055a4:	080055c9 	.word	0x080055c9
 80055a8:	080055d1 	.word	0x080055d1
 80055ac:	080055d9 	.word	0x080055d9
 80055b0:	080055ef 	.word	0x080055ef
 80055b4:	080055df 	.word	0x080055df
 80055b8:	080055ef 	.word	0x080055ef
 80055bc:	080055ef 	.word	0x080055ef
 80055c0:	080055ef 	.word	0x080055ef
 80055c4:	080055e7 	.word	0x080055e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055c8:	f7fe fdac 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 80055cc:	61b8      	str	r0, [r7, #24]
        break;
 80055ce:	e013      	b.n	80055f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055d0:	f7fe fdbc 	bl	800414c <HAL_RCC_GetPCLK2Freq>
 80055d4:	61b8      	str	r0, [r7, #24]
        break;
 80055d6:	e00f      	b.n	80055f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055d8:	4b1d      	ldr	r3, [pc, #116]	; (8005650 <UART_SetConfig+0x4c4>)
 80055da:	61bb      	str	r3, [r7, #24]
        break;
 80055dc:	e00c      	b.n	80055f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055de:	f7fe fc8f 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 80055e2:	61b8      	str	r0, [r7, #24]
        break;
 80055e4:	e008      	b.n	80055f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ea:	61bb      	str	r3, [r7, #24]
        break;
 80055ec:	e004      	b.n	80055f8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	77bb      	strb	r3, [r7, #30]
        break;
 80055f6:	bf00      	nop
    }

    if (pclk != 0U)
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d018      	beq.n	8005630 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	085a      	lsrs	r2, r3, #1
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	441a      	add	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005610:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	2b0f      	cmp	r3, #15
 8005616:	d909      	bls.n	800562c <UART_SetConfig+0x4a0>
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800561e:	d205      	bcs.n	800562c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	b29a      	uxth	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	60da      	str	r2, [r3, #12]
 800562a:	e001      	b.n	8005630 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800563c:	7fbb      	ldrb	r3, [r7, #30]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3720      	adds	r7, #32
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	40007c00 	.word	0x40007c00
 800564c:	40023800 	.word	0x40023800
 8005650:	00f42400 	.word	0x00f42400

08005654 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00a      	beq.n	800567e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00a      	beq.n	80056a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00a      	beq.n	80056c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	f003 0308 	and.w	r3, r3, #8
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	f003 0310 	and.w	r3, r3, #16
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00a      	beq.n	8005706 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	430a      	orrs	r2, r1
 8005704:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	f003 0320 	and.w	r3, r3, #32
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00a      	beq.n	8005728 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	430a      	orrs	r2, r1
 8005726:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005730:	2b00      	cmp	r3, #0
 8005732:	d01a      	beq.n	800576a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005752:	d10a      	bne.n	800576a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00a      	beq.n	800578c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	605a      	str	r2, [r3, #4]
  }
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af02      	add	r7, sp, #8
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057a8:	f7fb ff9e 	bl	80016e8 <HAL_GetTick>
 80057ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0308 	and.w	r3, r3, #8
 80057b8:	2b08      	cmp	r3, #8
 80057ba:	d10e      	bne.n	80057da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f831 	bl	8005832 <UART_WaitOnFlagUntilTimeout>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d001      	beq.n	80057da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e027      	b.n	800582a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	d10e      	bne.n	8005806 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f81b 	bl	8005832 <UART_WaitOnFlagUntilTimeout>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e011      	b.n	800582a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2220      	movs	r2, #32
 800580a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2220      	movs	r2, #32
 8005810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b09c      	sub	sp, #112	; 0x70
 8005836:	af00      	add	r7, sp, #0
 8005838:	60f8      	str	r0, [r7, #12]
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	603b      	str	r3, [r7, #0]
 800583e:	4613      	mov	r3, r2
 8005840:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005842:	e0a7      	b.n	8005994 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584a:	f000 80a3 	beq.w	8005994 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800584e:	f7fb ff4b 	bl	80016e8 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800585a:	429a      	cmp	r2, r3
 800585c:	d302      	bcc.n	8005864 <UART_WaitOnFlagUntilTimeout+0x32>
 800585e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005860:	2b00      	cmp	r3, #0
 8005862:	d13f      	bne.n	80058e4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005874:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005878:	667b      	str	r3, [r7, #100]	; 0x64
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	461a      	mov	r2, r3
 8005880:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005882:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005884:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005886:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005888:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800588a:	e841 2300 	strex	r3, r2, [r1]
 800588e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1e6      	bne.n	8005864 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3308      	adds	r3, #8
 800589c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058a0:	e853 3f00 	ldrex	r3, [r3]
 80058a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a8:	f023 0301 	bic.w	r3, r3, #1
 80058ac:	663b      	str	r3, [r7, #96]	; 0x60
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	3308      	adds	r3, #8
 80058b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80058b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80058b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058be:	e841 2300 	strex	r3, r2, [r1]
 80058c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80058c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1e5      	bne.n	8005896 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2220      	movs	r2, #32
 80058ce:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e068      	b.n	80059b6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0304 	and.w	r3, r3, #4
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d050      	beq.n	8005994 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	69db      	ldr	r3, [r3, #28]
 80058f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005900:	d148      	bne.n	8005994 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800590a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005914:	e853 3f00 	ldrex	r3, [r3]
 8005918:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005920:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	461a      	mov	r2, r3
 8005928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800592a:	637b      	str	r3, [r7, #52]	; 0x34
 800592c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005930:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005932:	e841 2300 	strex	r3, r2, [r1]
 8005936:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1e6      	bne.n	800590c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3308      	adds	r3, #8
 8005944:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	e853 3f00 	ldrex	r3, [r3]
 800594c:	613b      	str	r3, [r7, #16]
   return(result);
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f023 0301 	bic.w	r3, r3, #1
 8005954:	66bb      	str	r3, [r7, #104]	; 0x68
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3308      	adds	r3, #8
 800595c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800595e:	623a      	str	r2, [r7, #32]
 8005960:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005962:	69f9      	ldr	r1, [r7, #28]
 8005964:	6a3a      	ldr	r2, [r7, #32]
 8005966:	e841 2300 	strex	r3, r2, [r1]
 800596a:	61bb      	str	r3, [r7, #24]
   return(result);
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1e5      	bne.n	800593e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2220      	movs	r2, #32
 8005976:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2220      	movs	r2, #32
 800597c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2220      	movs	r2, #32
 8005984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e010      	b.n	80059b6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	69da      	ldr	r2, [r3, #28]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	4013      	ands	r3, r2
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	bf0c      	ite	eq
 80059a4:	2301      	moveq	r3, #1
 80059a6:	2300      	movne	r3, #0
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	461a      	mov	r2, r3
 80059ac:	79fb      	ldrb	r3, [r7, #7]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	f43f af48 	beq.w	8005844 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3770      	adds	r7, #112	; 0x70
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059be:	b480      	push	{r7}
 80059c0:	b095      	sub	sp, #84	; 0x54
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ce:	e853 3f00 	ldrex	r3, [r3]
 80059d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	461a      	mov	r2, r3
 80059e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e4:	643b      	str	r3, [r7, #64]	; 0x40
 80059e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059ec:	e841 2300 	strex	r3, r2, [r1]
 80059f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1e6      	bne.n	80059c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3308      	adds	r3, #8
 80059fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	e853 3f00 	ldrex	r3, [r3]
 8005a06:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	f023 0301 	bic.w	r3, r3, #1
 8005a0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3308      	adds	r3, #8
 8005a16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a20:	e841 2300 	strex	r3, r2, [r1]
 8005a24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1e5      	bne.n	80059f8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d118      	bne.n	8005a66 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	e853 3f00 	ldrex	r3, [r3]
 8005a40:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f023 0310 	bic.w	r3, r3, #16
 8005a48:	647b      	str	r3, [r7, #68]	; 0x44
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a52:	61bb      	str	r3, [r7, #24]
 8005a54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a56:	6979      	ldr	r1, [r7, #20]
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	e841 2300 	strex	r3, r2, [r1]
 8005a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1e6      	bne.n	8005a34 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2220      	movs	r2, #32
 8005a6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005a7a:	bf00      	nop
 8005a7c:	3754      	adds	r7, #84	; 0x54
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b084      	sub	sp, #16
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f7ff fb51 	bl	800514c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aaa:	bf00      	nop
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b088      	sub	sp, #32
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	e853 3f00 	ldrex	r3, [r3]
 8005ac6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ace:	61fb      	str	r3, [r7, #28]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	61bb      	str	r3, [r7, #24]
 8005ada:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005adc:	6979      	ldr	r1, [r7, #20]
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	e841 2300 	strex	r3, r2, [r1]
 8005ae4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1e6      	bne.n	8005aba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2220      	movs	r2, #32
 8005af0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f7ff fb1d 	bl	8005138 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005afe:	bf00      	nop
 8005b00:	3720      	adds	r7, #32
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
	...

08005b08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b08:	b084      	sub	sp, #16
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	f107 001c 	add.w	r0, r7, #28
 8005b16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d120      	bne.n	8005b62 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68da      	ldr	r2, [r3, #12]
 8005b30:	4b20      	ldr	r3, [pc, #128]	; (8005bb4 <USB_CoreInit+0xac>)
 8005b32:	4013      	ands	r3, r2
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d105      	bne.n	8005b56 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fa96 	bl	8006088 <USB_CoreReset>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	73fb      	strb	r3, [r7, #15]
 8005b60:	e010      	b.n	8005b84 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fa8a 	bl	8006088 <USB_CoreReset>
 8005b74:	4603      	mov	r3, r0
 8005b76:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d10b      	bne.n	8005ba2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f043 0206 	orr.w	r2, r3, #6
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f043 0220 	orr.w	r2, r3, #32
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bae:	b004      	add	sp, #16
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	ffbdffbf 	.word	0xffbdffbf

08005bb8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f023 0201 	bic.w	r2, r3, #1
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	460b      	mov	r3, r1
 8005be4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005be6:	2300      	movs	r3, #0
 8005be8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005bf6:	78fb      	ldrb	r3, [r7, #3]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d115      	bne.n	8005c28 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c08:	2001      	movs	r0, #1
 8005c0a:	f7fb fd79 	bl	8001700 <HAL_Delay>
      ms++;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3301      	adds	r3, #1
 8005c12:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fa29 	bl	800606c <USB_GetMode>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d01e      	beq.n	8005c5e <USB_SetCurrentMode+0x84>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2b31      	cmp	r3, #49	; 0x31
 8005c24:	d9f0      	bls.n	8005c08 <USB_SetCurrentMode+0x2e>
 8005c26:	e01a      	b.n	8005c5e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c28:	78fb      	ldrb	r3, [r7, #3]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d115      	bne.n	8005c5a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c3a:	2001      	movs	r0, #1
 8005c3c:	f7fb fd60 	bl	8001700 <HAL_Delay>
      ms++;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	3301      	adds	r3, #1
 8005c44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fa10 	bl	800606c <USB_GetMode>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d005      	beq.n	8005c5e <USB_SetCurrentMode+0x84>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b31      	cmp	r3, #49	; 0x31
 8005c56:	d9f0      	bls.n	8005c3a <USB_SetCurrentMode+0x60>
 8005c58:	e001      	b.n	8005c5e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e005      	b.n	8005c6a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2b32      	cmp	r3, #50	; 0x32
 8005c62:	d101      	bne.n	8005c68 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e000      	b.n	8005c6a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
	...

08005c74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c74:	b084      	sub	sp, #16
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b086      	sub	sp, #24
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c8e:	2300      	movs	r3, #0
 8005c90:	613b      	str	r3, [r7, #16]
 8005c92:	e009      	b.n	8005ca8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	3340      	adds	r3, #64	; 0x40
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	613b      	str	r3, [r7, #16]
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	2b0e      	cmp	r3, #14
 8005cac:	d9f2      	bls.n	8005c94 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d11c      	bne.n	8005cee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cc2:	f043 0302 	orr.w	r3, r3, #2
 8005cc6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ccc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	e005      	b.n	8005cfa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d00:	461a      	mov	r2, r3
 8005d02:	2300      	movs	r3, #0
 8005d04:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d14:	461a      	mov	r2, r3
 8005d16:	680b      	ldr	r3, [r1, #0]
 8005d18:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d10c      	bne.n	8005d3a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d104      	bne.n	8005d30 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d26:	2100      	movs	r1, #0
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 f965 	bl	8005ff8 <USB_SetDevSpeed>
 8005d2e:	e008      	b.n	8005d42 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d30:	2101      	movs	r1, #1
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f960 	bl	8005ff8 <USB_SetDevSpeed>
 8005d38:	e003      	b.n	8005d42 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d3a:	2103      	movs	r1, #3
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 f95b 	bl	8005ff8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d42:	2110      	movs	r1, #16
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f8f3 	bl	8005f30 <USB_FlushTxFifo>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f91f 	bl	8005f98 <USB_FlushRxFifo>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d76:	461a      	mov	r2, r3
 8005d78:	2300      	movs	r3, #0
 8005d7a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d82:	461a      	mov	r2, r3
 8005d84:	2300      	movs	r3, #0
 8005d86:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d88:	2300      	movs	r3, #0
 8005d8a:	613b      	str	r3, [r7, #16]
 8005d8c:	e043      	b.n	8005e16 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005da0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005da4:	d118      	bne.n	8005dd8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db8:	461a      	mov	r2, r3
 8005dba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005dbe:	6013      	str	r3, [r2, #0]
 8005dc0:	e013      	b.n	8005dea <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dce:	461a      	mov	r2, r3
 8005dd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005dd4:	6013      	str	r3, [r2, #0]
 8005dd6:	e008      	b.n	8005dea <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de4:	461a      	mov	r2, r3
 8005de6:	2300      	movs	r3, #0
 8005de8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df6:	461a      	mov	r2, r3
 8005df8:	2300      	movs	r3, #0
 8005dfa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e08:	461a      	mov	r2, r3
 8005e0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	3301      	adds	r3, #1
 8005e14:	613b      	str	r3, [r7, #16]
 8005e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d3b7      	bcc.n	8005d8e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e1e:	2300      	movs	r3, #0
 8005e20:	613b      	str	r3, [r7, #16]
 8005e22:	e043      	b.n	8005eac <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e3a:	d118      	bne.n	8005e6e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10a      	bne.n	8005e58 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4e:	461a      	mov	r2, r3
 8005e50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	e013      	b.n	8005e80 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e64:	461a      	mov	r2, r3
 8005e66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e6a:	6013      	str	r3, [r2, #0]
 8005e6c:	e008      	b.n	8005e80 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	2300      	movs	r3, #0
 8005e90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ea4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	613b      	str	r3, [r7, #16]
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d3b7      	bcc.n	8005e24 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ec2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ec6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ed4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d105      	bne.n	8005ee8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	f043 0210 	orr.w	r2, r3, #16
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	699a      	ldr	r2, [r3, #24]
 8005eec:	4b0e      	ldr	r3, [pc, #56]	; (8005f28 <USB_DevInit+0x2b4>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d005      	beq.n	8005f06 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	f043 0208 	orr.w	r2, r3, #8
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d105      	bne.n	8005f18 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	699a      	ldr	r2, [r3, #24]
 8005f10:	4b06      	ldr	r3, [pc, #24]	; (8005f2c <USB_DevInit+0x2b8>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3718      	adds	r7, #24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f24:	b004      	add	sp, #16
 8005f26:	4770      	bx	lr
 8005f28:	803c3800 	.word	0x803c3800
 8005f2c:	40000004 	.word	0x40000004

08005f30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	3301      	adds	r3, #1
 8005f42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4a13      	ldr	r2, [pc, #76]	; (8005f94 <USB_FlushTxFifo+0x64>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d901      	bls.n	8005f50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e01b      	b.n	8005f88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	daf2      	bge.n	8005f3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	019b      	lsls	r3, r3, #6
 8005f60:	f043 0220 	orr.w	r2, r3, #32
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4a08      	ldr	r2, [pc, #32]	; (8005f94 <USB_FlushTxFifo+0x64>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d901      	bls.n	8005f7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e006      	b.n	8005f88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	f003 0320 	and.w	r3, r3, #32
 8005f82:	2b20      	cmp	r3, #32
 8005f84:	d0f0      	beq.n	8005f68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr
 8005f94:	00030d40 	.word	0x00030d40

08005f98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	4a11      	ldr	r2, [pc, #68]	; (8005ff4 <USB_FlushRxFifo+0x5c>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d901      	bls.n	8005fb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e018      	b.n	8005fe8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	daf2      	bge.n	8005fa4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2210      	movs	r2, #16
 8005fc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	4a08      	ldr	r2, [pc, #32]	; (8005ff4 <USB_FlushRxFifo+0x5c>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d901      	bls.n	8005fda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e006      	b.n	8005fe8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	f003 0310 	and.w	r3, r3, #16
 8005fe2:	2b10      	cmp	r3, #16
 8005fe4:	d0f0      	beq.n	8005fc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	00030d40 	.word	0x00030d40

08005ff8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	460b      	mov	r3, r1
 8006002:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	68f9      	ldr	r1, [r7, #12]
 8006014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006018:	4313      	orrs	r3, r2
 800601a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800602a:	b480      	push	{r7}
 800602c:	b085      	sub	sp, #20
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006044:	f023 0303 	bic.w	r3, r3, #3
 8006048:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006058:	f043 0302 	orr.w	r3, r3, #2
 800605c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	f003 0301 	and.w	r3, r3, #1
}
 800607c:	4618      	mov	r0, r3
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	3301      	adds	r3, #1
 8006098:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4a13      	ldr	r2, [pc, #76]	; (80060ec <USB_CoreReset+0x64>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d901      	bls.n	80060a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e01b      	b.n	80060de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	daf2      	bge.n	8006094 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	f043 0201 	orr.w	r2, r3, #1
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	3301      	adds	r3, #1
 80060c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4a09      	ldr	r2, [pc, #36]	; (80060ec <USB_CoreReset+0x64>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d901      	bls.n	80060d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e006      	b.n	80060de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d0f0      	beq.n	80060be <USB_CoreReset+0x36>

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	00030d40 	.word	0x00030d40

080060f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	4603      	mov	r3, r0
 80060f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80060fa:	2300      	movs	r3, #0
 80060fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80060fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006102:	2b84      	cmp	r3, #132	; 0x84
 8006104:	d005      	beq.n	8006112 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006106:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	4413      	add	r3, r2
 800610e:	3303      	adds	r3, #3
 8006110:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006112:	68fb      	ldr	r3, [r7, #12]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006124:	f000 fff0 	bl	8007108 <vTaskStartScheduler>
  
  return osOK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	bd80      	pop	{r7, pc}

0800612e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800612e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006130:	b089      	sub	sp, #36	; 0x24
 8006132:	af04      	add	r7, sp, #16
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d020      	beq.n	8006182 <osThreadCreate+0x54>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d01c      	beq.n	8006182 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685c      	ldr	r4, [r3, #4]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681d      	ldr	r5, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	691e      	ldr	r6, [r3, #16]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800615a:	4618      	mov	r0, r3
 800615c:	f7ff ffc8 	bl	80060f0 <makeFreeRtosPriority>
 8006160:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800616a:	9202      	str	r2, [sp, #8]
 800616c:	9301      	str	r3, [sp, #4]
 800616e:	9100      	str	r1, [sp, #0]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	4632      	mov	r2, r6
 8006174:	4629      	mov	r1, r5
 8006176:	4620      	mov	r0, r4
 8006178:	f000 fdf4 	bl	8006d64 <xTaskCreateStatic>
 800617c:	4603      	mov	r3, r0
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	e01c      	b.n	80061bc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685c      	ldr	r4, [r3, #4]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800618e:	b29e      	uxth	r6, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006196:	4618      	mov	r0, r3
 8006198:	f7ff ffaa 	bl	80060f0 <makeFreeRtosPriority>
 800619c:	4602      	mov	r2, r0
 800619e:	f107 030c 	add.w	r3, r7, #12
 80061a2:	9301      	str	r3, [sp, #4]
 80061a4:	9200      	str	r2, [sp, #0]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	4632      	mov	r2, r6
 80061aa:	4629      	mov	r1, r5
 80061ac:	4620      	mov	r0, r4
 80061ae:	f000 fe3c 	bl	8006e2a <xTaskCreate>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d001      	beq.n	80061bc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80061b8:	2300      	movs	r3, #0
 80061ba:	e000      	b.n	80061be <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80061bc:	68fb      	ldr	r3, [r7, #12]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061c6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b084      	sub	sp, #16
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d001      	beq.n	80061dc <osDelay+0x16>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	e000      	b.n	80061de <osDelay+0x18>
 80061dc:	2301      	movs	r3, #1
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 ff5c 	bl	800709c <vTaskDelay>
  
  return osOK;
 80061e4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f103 0208 	add.w	r2, r3, #8
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f04f 32ff 	mov.w	r2, #4294967295
 8006206:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f103 0208 	add.w	r2, r3, #8
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f103 0208 	add.w	r2, r3, #8
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006222:	bf00      	nop
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	689a      	ldr	r2, [r3, #8]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	1c5a      	adds	r2, r3, #1
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	601a      	str	r2, [r3, #0]
}
 8006284:	bf00      	nop
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a6:	d103      	bne.n	80062b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	e00c      	b.n	80062ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	3308      	adds	r3, #8
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	e002      	b.n	80062be <vListInsert+0x2e>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d2f6      	bcs.n	80062b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	1c5a      	adds	r2, r3, #1
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	601a      	str	r2, [r3, #0]
}
 80062f6:	bf00      	nop
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006302:	b480      	push	{r7}
 8006304:	b085      	sub	sp, #20
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	6892      	ldr	r2, [r2, #8]
 8006318:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	6852      	ldr	r2, [r2, #4]
 8006322:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	429a      	cmp	r2, r3
 800632c:	d103      	bne.n	8006336 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	689a      	ldr	r2, [r3, #8]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	1e5a      	subs	r2, r3, #1
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
	...

08006358 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10c      	bne.n	8006386 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800636c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006370:	b672      	cpsid	i
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	b662      	cpsie	i
 8006380:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006382:	bf00      	nop
 8006384:	e7fe      	b.n	8006384 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006386:	f002 f871 	bl	800846c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006392:	68f9      	ldr	r1, [r7, #12]
 8006394:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006396:	fb01 f303 	mul.w	r3, r1, r3
 800639a:	441a      	add	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b6:	3b01      	subs	r3, #1
 80063b8:	68f9      	ldr	r1, [r7, #12]
 80063ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063bc:	fb01 f303 	mul.w	r3, r1, r3
 80063c0:	441a      	add	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	22ff      	movs	r2, #255	; 0xff
 80063ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	22ff      	movs	r2, #255	; 0xff
 80063d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d114      	bne.n	8006406 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d01a      	beq.n	800641a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	3310      	adds	r3, #16
 80063e8:	4618      	mov	r0, r3
 80063ea:	f001 f91f 	bl	800762c <xTaskRemoveFromEventList>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d012      	beq.n	800641a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80063f4:	4b0c      	ldr	r3, [pc, #48]	; (8006428 <xQueueGenericReset+0xd0>)
 80063f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	e009      	b.n	800641a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	3310      	adds	r3, #16
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff feef 	bl	80061ee <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	3324      	adds	r3, #36	; 0x24
 8006414:	4618      	mov	r0, r3
 8006416:	f7ff feea 	bl	80061ee <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800641a:	f002 f85b 	bl	80084d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800641e:	2301      	movs	r3, #1
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	e000ed04 	.word	0xe000ed04

0800642c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800642c:	b580      	push	{r7, lr}
 800642e:	b08e      	sub	sp, #56	; 0x38
 8006430:	af02      	add	r7, sp, #8
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
 8006438:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10c      	bne.n	800645a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006444:	b672      	cpsid	i
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	b662      	cpsie	i
 8006454:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006456:	bf00      	nop
 8006458:	e7fe      	b.n	8006458 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10c      	bne.n	800647a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006464:	b672      	cpsid	i
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	b662      	cpsie	i
 8006474:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006476:	bf00      	nop
 8006478:	e7fe      	b.n	8006478 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <xQueueGenericCreateStatic+0x5a>
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <xQueueGenericCreateStatic+0x5e>
 8006486:	2301      	movs	r3, #1
 8006488:	e000      	b.n	800648c <xQueueGenericCreateStatic+0x60>
 800648a:	2300      	movs	r3, #0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10c      	bne.n	80064aa <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006494:	b672      	cpsid	i
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	b662      	cpsie	i
 80064a4:	623b      	str	r3, [r7, #32]
}
 80064a6:	bf00      	nop
 80064a8:	e7fe      	b.n	80064a8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d102      	bne.n	80064b6 <xQueueGenericCreateStatic+0x8a>
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <xQueueGenericCreateStatic+0x8e>
 80064b6:	2301      	movs	r3, #1
 80064b8:	e000      	b.n	80064bc <xQueueGenericCreateStatic+0x90>
 80064ba:	2300      	movs	r3, #0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10c      	bne.n	80064da <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	b672      	cpsid	i
 80064c6:	f383 8811 	msr	BASEPRI, r3
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	b662      	cpsie	i
 80064d4:	61fb      	str	r3, [r7, #28]
}
 80064d6:	bf00      	nop
 80064d8:	e7fe      	b.n	80064d8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80064da:	2348      	movs	r3, #72	; 0x48
 80064dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2b48      	cmp	r3, #72	; 0x48
 80064e2:	d00c      	beq.n	80064fe <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80064e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e8:	b672      	cpsid	i
 80064ea:	f383 8811 	msr	BASEPRI, r3
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	b662      	cpsie	i
 80064f8:	61bb      	str	r3, [r7, #24]
}
 80064fa:	bf00      	nop
 80064fc:	e7fe      	b.n	80064fc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80064fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00d      	beq.n	8006526 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800650a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650c:	2201      	movs	r2, #1
 800650e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006512:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	4613      	mov	r3, r2
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	68b9      	ldr	r1, [r7, #8]
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 f805 	bl	8006530 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006528:	4618      	mov	r0, r3
 800652a:	3730      	adds	r7, #48	; 0x30
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
 800653c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d103      	bne.n	800654c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	e002      	b.n	8006552 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800655e:	2101      	movs	r1, #1
 8006560:	69b8      	ldr	r0, [r7, #24]
 8006562:	f7ff fef9 	bl	8006358 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006566:	bf00      	nop
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
	...

08006570 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b08e      	sub	sp, #56	; 0x38
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
 800657c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800657e:	2300      	movs	r3, #0
 8006580:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10c      	bne.n	80065a6 <xQueueGenericSend+0x36>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006590:	b672      	cpsid	i
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	b662      	cpsie	i
 80065a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80065a2:	bf00      	nop
 80065a4:	e7fe      	b.n	80065a4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d103      	bne.n	80065b4 <xQueueGenericSend+0x44>
 80065ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <xQueueGenericSend+0x48>
 80065b4:	2301      	movs	r3, #1
 80065b6:	e000      	b.n	80065ba <xQueueGenericSend+0x4a>
 80065b8:	2300      	movs	r3, #0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10c      	bne.n	80065d8 <xQueueGenericSend+0x68>
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	b672      	cpsid	i
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	b662      	cpsie	i
 80065d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80065d4:	bf00      	nop
 80065d6:	e7fe      	b.n	80065d6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d103      	bne.n	80065e6 <xQueueGenericSend+0x76>
 80065de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d101      	bne.n	80065ea <xQueueGenericSend+0x7a>
 80065e6:	2301      	movs	r3, #1
 80065e8:	e000      	b.n	80065ec <xQueueGenericSend+0x7c>
 80065ea:	2300      	movs	r3, #0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10c      	bne.n	800660a <xQueueGenericSend+0x9a>
	__asm volatile
 80065f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f4:	b672      	cpsid	i
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	b662      	cpsie	i
 8006604:	623b      	str	r3, [r7, #32]
}
 8006606:	bf00      	nop
 8006608:	e7fe      	b.n	8006608 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800660a:	f001 f9d3 	bl	80079b4 <xTaskGetSchedulerState>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d102      	bne.n	800661a <xQueueGenericSend+0xaa>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <xQueueGenericSend+0xae>
 800661a:	2301      	movs	r3, #1
 800661c:	e000      	b.n	8006620 <xQueueGenericSend+0xb0>
 800661e:	2300      	movs	r3, #0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10c      	bne.n	800663e <xQueueGenericSend+0xce>
	__asm volatile
 8006624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006628:	b672      	cpsid	i
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	b662      	cpsie	i
 8006638:	61fb      	str	r3, [r7, #28]
}
 800663a:	bf00      	nop
 800663c:	e7fe      	b.n	800663c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800663e:	f001 ff15 	bl	800846c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664a:	429a      	cmp	r2, r3
 800664c:	d302      	bcc.n	8006654 <xQueueGenericSend+0xe4>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b02      	cmp	r3, #2
 8006652:	d129      	bne.n	80066a8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	68b9      	ldr	r1, [r7, #8]
 8006658:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800665a:	f000 fa15 	bl	8006a88 <prvCopyDataToQueue>
 800665e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006664:	2b00      	cmp	r3, #0
 8006666:	d010      	beq.n	800668a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666a:	3324      	adds	r3, #36	; 0x24
 800666c:	4618      	mov	r0, r3
 800666e:	f000 ffdd 	bl	800762c <xTaskRemoveFromEventList>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d013      	beq.n	80066a0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006678:	4b3f      	ldr	r3, [pc, #252]	; (8006778 <xQueueGenericSend+0x208>)
 800667a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800667e:	601a      	str	r2, [r3, #0]
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	e00a      	b.n	80066a0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800668a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668c:	2b00      	cmp	r3, #0
 800668e:	d007      	beq.n	80066a0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006690:	4b39      	ldr	r3, [pc, #228]	; (8006778 <xQueueGenericSend+0x208>)
 8006692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80066a0:	f001 ff18 	bl	80084d4 <vPortExitCritical>
				return pdPASS;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e063      	b.n	8006770 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d103      	bne.n	80066b6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80066ae:	f001 ff11 	bl	80084d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80066b2:	2300      	movs	r3, #0
 80066b4:	e05c      	b.n	8006770 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d106      	bne.n	80066ca <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80066bc:	f107 0314 	add.w	r3, r7, #20
 80066c0:	4618      	mov	r0, r3
 80066c2:	f001 f817 	bl	80076f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066c6:	2301      	movs	r3, #1
 80066c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066ca:	f001 ff03 	bl	80084d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066ce:	f000 fd85 	bl	80071dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066d2:	f001 fecb 	bl	800846c <vPortEnterCritical>
 80066d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066dc:	b25b      	sxtb	r3, r3
 80066de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e2:	d103      	bne.n	80066ec <xQueueGenericSend+0x17c>
 80066e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066f2:	b25b      	sxtb	r3, r3
 80066f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f8:	d103      	bne.n	8006702 <xQueueGenericSend+0x192>
 80066fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006702:	f001 fee7 	bl	80084d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006706:	1d3a      	adds	r2, r7, #4
 8006708:	f107 0314 	add.w	r3, r7, #20
 800670c:	4611      	mov	r1, r2
 800670e:	4618      	mov	r0, r3
 8006710:	f001 f806 	bl	8007720 <xTaskCheckForTimeOut>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d124      	bne.n	8006764 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800671a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800671c:	f000 faac 	bl	8006c78 <prvIsQueueFull>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d018      	beq.n	8006758 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006728:	3310      	adds	r3, #16
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	4611      	mov	r1, r2
 800672e:	4618      	mov	r0, r3
 8006730:	f000 ff28 	bl	8007584 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006734:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006736:	f000 fa37 	bl	8006ba8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800673a:	f000 fd5d 	bl	80071f8 <xTaskResumeAll>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	f47f af7c 	bne.w	800663e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006746:	4b0c      	ldr	r3, [pc, #48]	; (8006778 <xQueueGenericSend+0x208>)
 8006748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	e772      	b.n	800663e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800675a:	f000 fa25 	bl	8006ba8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800675e:	f000 fd4b 	bl	80071f8 <xTaskResumeAll>
 8006762:	e76c      	b.n	800663e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006766:	f000 fa1f 	bl	8006ba8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800676a:	f000 fd45 	bl	80071f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800676e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006770:	4618      	mov	r0, r3
 8006772:	3738      	adds	r7, #56	; 0x38
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	e000ed04 	.word	0xe000ed04

0800677c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b08e      	sub	sp, #56	; 0x38
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
 8006788:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10c      	bne.n	80067ae <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006798:	b672      	cpsid	i
 800679a:	f383 8811 	msr	BASEPRI, r3
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f3bf 8f4f 	dsb	sy
 80067a6:	b662      	cpsie	i
 80067a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067aa:	bf00      	nop
 80067ac:	e7fe      	b.n	80067ac <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d103      	bne.n	80067bc <xQueueGenericSendFromISR+0x40>
 80067b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d101      	bne.n	80067c0 <xQueueGenericSendFromISR+0x44>
 80067bc:	2301      	movs	r3, #1
 80067be:	e000      	b.n	80067c2 <xQueueGenericSendFromISR+0x46>
 80067c0:	2300      	movs	r3, #0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10c      	bne.n	80067e0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80067c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ca:	b672      	cpsid	i
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	b662      	cpsie	i
 80067da:	623b      	str	r3, [r7, #32]
}
 80067dc:	bf00      	nop
 80067de:	e7fe      	b.n	80067de <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d103      	bne.n	80067ee <xQueueGenericSendFromISR+0x72>
 80067e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d101      	bne.n	80067f2 <xQueueGenericSendFromISR+0x76>
 80067ee:	2301      	movs	r3, #1
 80067f0:	e000      	b.n	80067f4 <xQueueGenericSendFromISR+0x78>
 80067f2:	2300      	movs	r3, #0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10c      	bne.n	8006812 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80067f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fc:	b672      	cpsid	i
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	b662      	cpsie	i
 800680c:	61fb      	str	r3, [r7, #28]
}
 800680e:	bf00      	nop
 8006810:	e7fe      	b.n	8006810 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006812:	f001 ff13 	bl	800863c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006816:	f3ef 8211 	mrs	r2, BASEPRI
 800681a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681e:	b672      	cpsid	i
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	b662      	cpsie	i
 800682e:	61ba      	str	r2, [r7, #24]
 8006830:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006832:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006834:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800683a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683e:	429a      	cmp	r2, r3
 8006840:	d302      	bcc.n	8006848 <xQueueGenericSendFromISR+0xcc>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2b02      	cmp	r3, #2
 8006846:	d12c      	bne.n	80068a2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800684e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	68b9      	ldr	r1, [r7, #8]
 8006856:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006858:	f000 f916 	bl	8006a88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800685c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006864:	d112      	bne.n	800688c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686a:	2b00      	cmp	r3, #0
 800686c:	d016      	beq.n	800689c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800686e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006870:	3324      	adds	r3, #36	; 0x24
 8006872:	4618      	mov	r0, r3
 8006874:	f000 feda 	bl	800762c <xTaskRemoveFromEventList>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00e      	beq.n	800689c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00b      	beq.n	800689c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	601a      	str	r2, [r3, #0]
 800688a:	e007      	b.n	800689c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800688c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006890:	3301      	adds	r3, #1
 8006892:	b2db      	uxtb	r3, r3
 8006894:	b25a      	sxtb	r2, r3
 8006896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800689c:	2301      	movs	r3, #1
 800689e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80068a0:	e001      	b.n	80068a6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80068a2:	2300      	movs	r3, #0
 80068a4:	637b      	str	r3, [r7, #52]	; 0x34
 80068a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80068b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80068b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3738      	adds	r7, #56	; 0x38
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b08c      	sub	sp, #48	; 0x30
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80068c8:	2300      	movs	r3, #0
 80068ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80068d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10c      	bne.n	80068f0 <xQueueReceive+0x34>
	__asm volatile
 80068d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068da:	b672      	cpsid	i
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	b662      	cpsie	i
 80068ea:	623b      	str	r3, [r7, #32]
}
 80068ec:	bf00      	nop
 80068ee:	e7fe      	b.n	80068ee <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d103      	bne.n	80068fe <xQueueReceive+0x42>
 80068f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d101      	bne.n	8006902 <xQueueReceive+0x46>
 80068fe:	2301      	movs	r3, #1
 8006900:	e000      	b.n	8006904 <xQueueReceive+0x48>
 8006902:	2300      	movs	r3, #0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10c      	bne.n	8006922 <xQueueReceive+0x66>
	__asm volatile
 8006908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690c:	b672      	cpsid	i
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	b662      	cpsie	i
 800691c:	61fb      	str	r3, [r7, #28]
}
 800691e:	bf00      	nop
 8006920:	e7fe      	b.n	8006920 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006922:	f001 f847 	bl	80079b4 <xTaskGetSchedulerState>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d102      	bne.n	8006932 <xQueueReceive+0x76>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <xQueueReceive+0x7a>
 8006932:	2301      	movs	r3, #1
 8006934:	e000      	b.n	8006938 <xQueueReceive+0x7c>
 8006936:	2300      	movs	r3, #0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10c      	bne.n	8006956 <xQueueReceive+0x9a>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006940:	b672      	cpsid	i
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	b662      	cpsie	i
 8006950:	61bb      	str	r3, [r7, #24]
}
 8006952:	bf00      	nop
 8006954:	e7fe      	b.n	8006954 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006956:	f001 fd89 	bl	800846c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800695a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	2b00      	cmp	r3, #0
 8006964:	d01f      	beq.n	80069a6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006966:	68b9      	ldr	r1, [r7, #8]
 8006968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800696a:	f000 f8f7 	bl	8006b5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	1e5a      	subs	r2, r3, #1
 8006972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006974:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00f      	beq.n	800699e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800697e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006980:	3310      	adds	r3, #16
 8006982:	4618      	mov	r0, r3
 8006984:	f000 fe52 	bl	800762c <xTaskRemoveFromEventList>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d007      	beq.n	800699e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800698e:	4b3d      	ldr	r3, [pc, #244]	; (8006a84 <xQueueReceive+0x1c8>)
 8006990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800699e:	f001 fd99 	bl	80084d4 <vPortExitCritical>
				return pdPASS;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e069      	b.n	8006a7a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d103      	bne.n	80069b4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069ac:	f001 fd92 	bl	80084d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80069b0:	2300      	movs	r3, #0
 80069b2:	e062      	b.n	8006a7a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d106      	bne.n	80069c8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069ba:	f107 0310 	add.w	r3, r7, #16
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 fe98 	bl	80076f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069c4:	2301      	movs	r3, #1
 80069c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069c8:	f001 fd84 	bl	80084d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069cc:	f000 fc06 	bl	80071dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069d0:	f001 fd4c 	bl	800846c <vPortEnterCritical>
 80069d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069da:	b25b      	sxtb	r3, r3
 80069dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e0:	d103      	bne.n	80069ea <xQueueReceive+0x12e>
 80069e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069f0:	b25b      	sxtb	r3, r3
 80069f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f6:	d103      	bne.n	8006a00 <xQueueReceive+0x144>
 80069f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a00:	f001 fd68 	bl	80084d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a04:	1d3a      	adds	r2, r7, #4
 8006a06:	f107 0310 	add.w	r3, r7, #16
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f000 fe87 	bl	8007720 <xTaskCheckForTimeOut>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d123      	bne.n	8006a60 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a1a:	f000 f917 	bl	8006c4c <prvIsQueueEmpty>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d017      	beq.n	8006a54 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a26:	3324      	adds	r3, #36	; 0x24
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	4611      	mov	r1, r2
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f000 fda9 	bl	8007584 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a34:	f000 f8b8 	bl	8006ba8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a38:	f000 fbde 	bl	80071f8 <xTaskResumeAll>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d189      	bne.n	8006956 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8006a42:	4b10      	ldr	r3, [pc, #64]	; (8006a84 <xQueueReceive+0x1c8>)
 8006a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	e780      	b.n	8006956 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006a54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a56:	f000 f8a7 	bl	8006ba8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a5a:	f000 fbcd 	bl	80071f8 <xTaskResumeAll>
 8006a5e:	e77a      	b.n	8006956 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006a60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a62:	f000 f8a1 	bl	8006ba8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a66:	f000 fbc7 	bl	80071f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a6c:	f000 f8ee 	bl	8006c4c <prvIsQueueEmpty>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f43f af6f 	beq.w	8006956 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3730      	adds	r7, #48	; 0x30
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	e000ed04 	.word	0xe000ed04

08006a88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006a94:	2300      	movs	r3, #0
 8006a96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10d      	bne.n	8006ac2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d14d      	bne.n	8006b4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 ff9c 	bl	80079f0 <xTaskPriorityDisinherit>
 8006ab8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	609a      	str	r2, [r3, #8]
 8006ac0:	e043      	b.n	8006b4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d119      	bne.n	8006afc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6858      	ldr	r0, [r3, #4]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	68b9      	ldr	r1, [r7, #8]
 8006ad4:	f002 f804 	bl	8008ae0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae0:	441a      	add	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d32b      	bcc.n	8006b4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	605a      	str	r2, [r3, #4]
 8006afa:	e026      	b.n	8006b4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	68d8      	ldr	r0, [r3, #12]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b04:	461a      	mov	r2, r3
 8006b06:	68b9      	ldr	r1, [r7, #8]
 8006b08:	f001 ffea 	bl	8008ae0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	68da      	ldr	r2, [r3, #12]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b14:	425b      	negs	r3, r3
 8006b16:	441a      	add	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	68da      	ldr	r2, [r3, #12]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d207      	bcs.n	8006b38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	689a      	ldr	r2, [r3, #8]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b30:	425b      	negs	r3, r3
 8006b32:	441a      	add	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d105      	bne.n	8006b4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d002      	beq.n	8006b4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	3b01      	subs	r3, #1
 8006b48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	1c5a      	adds	r2, r3, #1
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006b52:	697b      	ldr	r3, [r7, #20]
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3718      	adds	r7, #24
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d018      	beq.n	8006ba0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	68da      	ldr	r2, [r3, #12]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b76:	441a      	add	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	68da      	ldr	r2, [r3, #12]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d303      	bcc.n	8006b90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68d9      	ldr	r1, [r3, #12]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b98:	461a      	mov	r2, r3
 8006b9a:	6838      	ldr	r0, [r7, #0]
 8006b9c:	f001 ffa0 	bl	8008ae0 <memcpy>
	}
}
 8006ba0:	bf00      	nop
 8006ba2:	3708      	adds	r7, #8
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006bb0:	f001 fc5c 	bl	800846c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006bbc:	e011      	b.n	8006be2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d012      	beq.n	8006bec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	3324      	adds	r3, #36	; 0x24
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 fd2e 	bl	800762c <xTaskRemoveFromEventList>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006bd6:	f000 fe09 	bl	80077ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006bda:	7bfb      	ldrb	r3, [r7, #15]
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	dce9      	bgt.n	8006bbe <prvUnlockQueue+0x16>
 8006bea:	e000      	b.n	8006bee <prvUnlockQueue+0x46>
					break;
 8006bec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	22ff      	movs	r2, #255	; 0xff
 8006bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006bf6:	f001 fc6d 	bl	80084d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006bfa:	f001 fc37 	bl	800846c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c06:	e011      	b.n	8006c2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d012      	beq.n	8006c36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	3310      	adds	r3, #16
 8006c14:	4618      	mov	r0, r3
 8006c16:	f000 fd09 	bl	800762c <xTaskRemoveFromEventList>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006c20:	f000 fde4 	bl	80077ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006c24:	7bbb      	ldrb	r3, [r7, #14]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	dce9      	bgt.n	8006c08 <prvUnlockQueue+0x60>
 8006c34:	e000      	b.n	8006c38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006c36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	22ff      	movs	r2, #255	; 0xff
 8006c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006c40:	f001 fc48 	bl	80084d4 <vPortExitCritical>
}
 8006c44:	bf00      	nop
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c54:	f001 fc0a 	bl	800846c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d102      	bne.n	8006c66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006c60:	2301      	movs	r3, #1
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	e001      	b.n	8006c6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006c66:	2300      	movs	r3, #0
 8006c68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c6a:	f001 fc33 	bl	80084d4 <vPortExitCritical>

	return xReturn;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c80:	f001 fbf4 	bl	800846c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d102      	bne.n	8006c96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006c90:	2301      	movs	r3, #1
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	e001      	b.n	8006c9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006c96:	2300      	movs	r3, #0
 8006c98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c9a:	f001 fc1b 	bl	80084d4 <vPortExitCritical>

	return xReturn;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60fb      	str	r3, [r7, #12]
 8006cb6:	e014      	b.n	8006ce2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006cb8:	4a0f      	ldr	r2, [pc, #60]	; (8006cf8 <vQueueAddToRegistry+0x50>)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10b      	bne.n	8006cdc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006cc4:	490c      	ldr	r1, [pc, #48]	; (8006cf8 <vQueueAddToRegistry+0x50>)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006cce:	4a0a      	ldr	r2, [pc, #40]	; (8006cf8 <vQueueAddToRegistry+0x50>)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	4413      	add	r3, r2
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006cda:	e006      	b.n	8006cea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	60fb      	str	r3, [r7, #12]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b07      	cmp	r3, #7
 8006ce6:	d9e7      	bls.n	8006cb8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ce8:	bf00      	nop
 8006cea:	bf00      	nop
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	20003ac8 	.word	0x20003ac8

08006cfc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006d0c:	f001 fbae 	bl	800846c <vPortEnterCritical>
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d16:	b25b      	sxtb	r3, r3
 8006d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d1c:	d103      	bne.n	8006d26 <vQueueWaitForMessageRestricted+0x2a>
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d2c:	b25b      	sxtb	r3, r3
 8006d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d32:	d103      	bne.n	8006d3c <vQueueWaitForMessageRestricted+0x40>
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d3c:	f001 fbca 	bl	80084d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d106      	bne.n	8006d56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	3324      	adds	r3, #36	; 0x24
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	68b9      	ldr	r1, [r7, #8]
 8006d50:	4618      	mov	r0, r3
 8006d52:	f000 fc3d 	bl	80075d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006d56:	6978      	ldr	r0, [r7, #20]
 8006d58:	f7ff ff26 	bl	8006ba8 <prvUnlockQueue>
	}
 8006d5c:	bf00      	nop
 8006d5e:	3718      	adds	r7, #24
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b08e      	sub	sp, #56	; 0x38
 8006d68:	af04      	add	r7, sp, #16
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
 8006d70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10c      	bne.n	8006d92 <xTaskCreateStatic+0x2e>
	__asm volatile
 8006d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7c:	b672      	cpsid	i
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	b662      	cpsie	i
 8006d8c:	623b      	str	r3, [r7, #32]
}
 8006d8e:	bf00      	nop
 8006d90:	e7fe      	b.n	8006d90 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10c      	bne.n	8006db2 <xTaskCreateStatic+0x4e>
	__asm volatile
 8006d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9c:	b672      	cpsid	i
 8006d9e:	f383 8811 	msr	BASEPRI, r3
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	b662      	cpsie	i
 8006dac:	61fb      	str	r3, [r7, #28]
}
 8006dae:	bf00      	nop
 8006db0:	e7fe      	b.n	8006db0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006db2:	2354      	movs	r3, #84	; 0x54
 8006db4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	2b54      	cmp	r3, #84	; 0x54
 8006dba:	d00c      	beq.n	8006dd6 <xTaskCreateStatic+0x72>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	b672      	cpsid	i
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	b662      	cpsie	i
 8006dd0:	61bb      	str	r3, [r7, #24]
}
 8006dd2:	bf00      	nop
 8006dd4:	e7fe      	b.n	8006dd4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006dd6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d01e      	beq.n	8006e1c <xTaskCreateStatic+0xb8>
 8006dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d01b      	beq.n	8006e1c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df0:	2202      	movs	r2, #2
 8006df2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006df6:	2300      	movs	r3, #0
 8006df8:	9303      	str	r3, [sp, #12]
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfc:	9302      	str	r3, [sp, #8]
 8006dfe:	f107 0314 	add.w	r3, r7, #20
 8006e02:	9301      	str	r3, [sp, #4]
 8006e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	68b9      	ldr	r1, [r7, #8]
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f000 f850 	bl	8006eb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e16:	f000 f8d7 	bl	8006fc8 <prvAddNewTaskToReadyList>
 8006e1a:	e001      	b.n	8006e20 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006e20:	697b      	ldr	r3, [r7, #20]
	}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3728      	adds	r7, #40	; 0x28
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b08c      	sub	sp, #48	; 0x30
 8006e2e:	af04      	add	r7, sp, #16
 8006e30:	60f8      	str	r0, [r7, #12]
 8006e32:	60b9      	str	r1, [r7, #8]
 8006e34:	603b      	str	r3, [r7, #0]
 8006e36:	4613      	mov	r3, r2
 8006e38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006e3a:	88fb      	ldrh	r3, [r7, #6]
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f001 fc40 	bl	80086c4 <pvPortMalloc>
 8006e44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00e      	beq.n	8006e6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006e4c:	2054      	movs	r0, #84	; 0x54
 8006e4e:	f001 fc39 	bl	80086c4 <pvPortMalloc>
 8006e52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	631a      	str	r2, [r3, #48]	; 0x30
 8006e60:	e005      	b.n	8006e6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006e62:	6978      	ldr	r0, [r7, #20]
 8006e64:	f001 fcf8 	bl	8008858 <vPortFree>
 8006e68:	e001      	b.n	8006e6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d017      	beq.n	8006ea4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006e7c:	88fa      	ldrh	r2, [r7, #6]
 8006e7e:	2300      	movs	r3, #0
 8006e80:	9303      	str	r3, [sp, #12]
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	9302      	str	r3, [sp, #8]
 8006e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e88:	9301      	str	r3, [sp, #4]
 8006e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	68b9      	ldr	r1, [r7, #8]
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f000 f80e 	bl	8006eb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e98:	69f8      	ldr	r0, [r7, #28]
 8006e9a:	f000 f895 	bl	8006fc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	61bb      	str	r3, [r7, #24]
 8006ea2:	e002      	b.n	8006eaa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006eaa:	69bb      	ldr	r3, [r7, #24]
	}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3720      	adds	r7, #32
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b088      	sub	sp, #32
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
 8006ec0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ec6:	6879      	ldr	r1, [r7, #4]
 8006ec8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006ecc:	440b      	add	r3, r1
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4413      	add	r3, r2
 8006ed2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	f023 0307 	bic.w	r3, r3, #7
 8006eda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	f003 0307 	and.w	r3, r3, #7
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00c      	beq.n	8006f00 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8006ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eea:	b672      	cpsid	i
 8006eec:	f383 8811 	msr	BASEPRI, r3
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	b662      	cpsie	i
 8006efa:	617b      	str	r3, [r7, #20]
}
 8006efc:	bf00      	nop
 8006efe:	e7fe      	b.n	8006efe <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d01f      	beq.n	8006f46 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f06:	2300      	movs	r3, #0
 8006f08:	61fb      	str	r3, [r7, #28]
 8006f0a:	e012      	b.n	8006f32 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	4413      	add	r3, r2
 8006f12:	7819      	ldrb	r1, [r3, #0]
 8006f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	4413      	add	r3, r2
 8006f1a:	3334      	adds	r3, #52	; 0x34
 8006f1c:	460a      	mov	r2, r1
 8006f1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	4413      	add	r3, r2
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d006      	beq.n	8006f3a <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	61fb      	str	r3, [r7, #28]
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	2b0f      	cmp	r3, #15
 8006f36:	d9e9      	bls.n	8006f0c <prvInitialiseNewTask+0x58>
 8006f38:	e000      	b.n	8006f3c <prvInitialiseNewTask+0x88>
			{
				break;
 8006f3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f44:	e003      	b.n	8006f4e <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f50:	2b06      	cmp	r3, #6
 8006f52:	d901      	bls.n	8006f58 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006f54:	2306      	movs	r3, #6
 8006f56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f62:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f66:	2200      	movs	r2, #0
 8006f68:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6c:	3304      	adds	r3, #4
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7ff f95d 	bl	800622e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f76:	3318      	adds	r3, #24
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7ff f958 	bl	800622e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f86:	f1c3 0207 	rsb	r2, r3, #7
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f96:	2200      	movs	r2, #0
 8006f98:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006fa2:	683a      	ldr	r2, [r7, #0]
 8006fa4:	68f9      	ldr	r1, [r7, #12]
 8006fa6:	69b8      	ldr	r0, [r7, #24]
 8006fa8:	f001 f950 	bl	800824c <pxPortInitialiseStack>
 8006fac:	4602      	mov	r2, r0
 8006fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d002      	beq.n	8006fbe <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fbe:	bf00      	nop
 8006fc0:	3720      	adds	r7, #32
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
	...

08006fc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006fd0:	f001 fa4c 	bl	800846c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006fd4:	4b2a      	ldr	r3, [pc, #168]	; (8007080 <prvAddNewTaskToReadyList+0xb8>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	4a29      	ldr	r2, [pc, #164]	; (8007080 <prvAddNewTaskToReadyList+0xb8>)
 8006fdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006fde:	4b29      	ldr	r3, [pc, #164]	; (8007084 <prvAddNewTaskToReadyList+0xbc>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d109      	bne.n	8006ffa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006fe6:	4a27      	ldr	r2, [pc, #156]	; (8007084 <prvAddNewTaskToReadyList+0xbc>)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006fec:	4b24      	ldr	r3, [pc, #144]	; (8007080 <prvAddNewTaskToReadyList+0xb8>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d110      	bne.n	8007016 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ff4:	f000 fc1e 	bl	8007834 <prvInitialiseTaskLists>
 8006ff8:	e00d      	b.n	8007016 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ffa:	4b23      	ldr	r3, [pc, #140]	; (8007088 <prvAddNewTaskToReadyList+0xc0>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d109      	bne.n	8007016 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007002:	4b20      	ldr	r3, [pc, #128]	; (8007084 <prvAddNewTaskToReadyList+0xbc>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700c:	429a      	cmp	r2, r3
 800700e:	d802      	bhi.n	8007016 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007010:	4a1c      	ldr	r2, [pc, #112]	; (8007084 <prvAddNewTaskToReadyList+0xbc>)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007016:	4b1d      	ldr	r3, [pc, #116]	; (800708c <prvAddNewTaskToReadyList+0xc4>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3301      	adds	r3, #1
 800701c:	4a1b      	ldr	r2, [pc, #108]	; (800708c <prvAddNewTaskToReadyList+0xc4>)
 800701e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007024:	2201      	movs	r2, #1
 8007026:	409a      	lsls	r2, r3
 8007028:	4b19      	ldr	r3, [pc, #100]	; (8007090 <prvAddNewTaskToReadyList+0xc8>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4313      	orrs	r3, r2
 800702e:	4a18      	ldr	r2, [pc, #96]	; (8007090 <prvAddNewTaskToReadyList+0xc8>)
 8007030:	6013      	str	r3, [r2, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007036:	4613      	mov	r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4a15      	ldr	r2, [pc, #84]	; (8007094 <prvAddNewTaskToReadyList+0xcc>)
 8007040:	441a      	add	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	3304      	adds	r3, #4
 8007046:	4619      	mov	r1, r3
 8007048:	4610      	mov	r0, r2
 800704a:	f7ff f8fd 	bl	8006248 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800704e:	f001 fa41 	bl	80084d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007052:	4b0d      	ldr	r3, [pc, #52]	; (8007088 <prvAddNewTaskToReadyList+0xc0>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00e      	beq.n	8007078 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800705a:	4b0a      	ldr	r3, [pc, #40]	; (8007084 <prvAddNewTaskToReadyList+0xbc>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007064:	429a      	cmp	r2, r3
 8007066:	d207      	bcs.n	8007078 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007068:	4b0b      	ldr	r3, [pc, #44]	; (8007098 <prvAddNewTaskToReadyList+0xd0>)
 800706a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007078:	bf00      	nop
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	20003c08 	.word	0x20003c08
 8007084:	20003b08 	.word	0x20003b08
 8007088:	20003c14 	.word	0x20003c14
 800708c:	20003c24 	.word	0x20003c24
 8007090:	20003c10 	.word	0x20003c10
 8007094:	20003b0c 	.word	0x20003b0c
 8007098:	e000ed04 	.word	0xe000ed04

0800709c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80070a4:	2300      	movs	r3, #0
 80070a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d019      	beq.n	80070e2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80070ae:	4b14      	ldr	r3, [pc, #80]	; (8007100 <vTaskDelay+0x64>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00c      	beq.n	80070d0 <vTaskDelay+0x34>
	__asm volatile
 80070b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ba:	b672      	cpsid	i
 80070bc:	f383 8811 	msr	BASEPRI, r3
 80070c0:	f3bf 8f6f 	isb	sy
 80070c4:	f3bf 8f4f 	dsb	sy
 80070c8:	b662      	cpsie	i
 80070ca:	60bb      	str	r3, [r7, #8]
}
 80070cc:	bf00      	nop
 80070ce:	e7fe      	b.n	80070ce <vTaskDelay+0x32>
			vTaskSuspendAll();
 80070d0:	f000 f884 	bl	80071dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80070d4:	2100      	movs	r1, #0
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fd14 	bl	8007b04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80070dc:	f000 f88c 	bl	80071f8 <xTaskResumeAll>
 80070e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d107      	bne.n	80070f8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80070e8:	4b06      	ldr	r3, [pc, #24]	; (8007104 <vTaskDelay+0x68>)
 80070ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ee:	601a      	str	r2, [r3, #0]
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80070f8:	bf00      	nop
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	20003c30 	.word	0x20003c30
 8007104:	e000ed04 	.word	0xe000ed04

08007108 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b08a      	sub	sp, #40	; 0x28
 800710c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800710e:	2300      	movs	r3, #0
 8007110:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007112:	2300      	movs	r3, #0
 8007114:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007116:	463a      	mov	r2, r7
 8007118:	1d39      	adds	r1, r7, #4
 800711a:	f107 0308 	add.w	r3, r7, #8
 800711e:	4618      	mov	r0, r3
 8007120:	f7f9 fc22 	bl	8000968 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007124:	6839      	ldr	r1, [r7, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	9202      	str	r2, [sp, #8]
 800712c:	9301      	str	r3, [sp, #4]
 800712e:	2300      	movs	r3, #0
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	2300      	movs	r3, #0
 8007134:	460a      	mov	r2, r1
 8007136:	4923      	ldr	r1, [pc, #140]	; (80071c4 <vTaskStartScheduler+0xbc>)
 8007138:	4823      	ldr	r0, [pc, #140]	; (80071c8 <vTaskStartScheduler+0xc0>)
 800713a:	f7ff fe13 	bl	8006d64 <xTaskCreateStatic>
 800713e:	4603      	mov	r3, r0
 8007140:	4a22      	ldr	r2, [pc, #136]	; (80071cc <vTaskStartScheduler+0xc4>)
 8007142:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007144:	4b21      	ldr	r3, [pc, #132]	; (80071cc <vTaskStartScheduler+0xc4>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d002      	beq.n	8007152 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800714c:	2301      	movs	r3, #1
 800714e:	617b      	str	r3, [r7, #20]
 8007150:	e001      	b.n	8007156 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007152:	2300      	movs	r3, #0
 8007154:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d102      	bne.n	8007162 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800715c:	f000 fd38 	bl	8007bd0 <xTimerCreateTimerTask>
 8007160:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d118      	bne.n	800719a <vTaskStartScheduler+0x92>
	__asm volatile
 8007168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716c:	b672      	cpsid	i
 800716e:	f383 8811 	msr	BASEPRI, r3
 8007172:	f3bf 8f6f 	isb	sy
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	b662      	cpsie	i
 800717c:	613b      	str	r3, [r7, #16]
}
 800717e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007180:	4b13      	ldr	r3, [pc, #76]	; (80071d0 <vTaskStartScheduler+0xc8>)
 8007182:	f04f 32ff 	mov.w	r2, #4294967295
 8007186:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007188:	4b12      	ldr	r3, [pc, #72]	; (80071d4 <vTaskStartScheduler+0xcc>)
 800718a:	2201      	movs	r2, #1
 800718c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800718e:	4b12      	ldr	r3, [pc, #72]	; (80071d8 <vTaskStartScheduler+0xd0>)
 8007190:	2200      	movs	r2, #0
 8007192:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007194:	f001 f8ec 	bl	8008370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007198:	e010      	b.n	80071bc <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a0:	d10c      	bne.n	80071bc <vTaskStartScheduler+0xb4>
	__asm volatile
 80071a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a6:	b672      	cpsid	i
 80071a8:	f383 8811 	msr	BASEPRI, r3
 80071ac:	f3bf 8f6f 	isb	sy
 80071b0:	f3bf 8f4f 	dsb	sy
 80071b4:	b662      	cpsie	i
 80071b6:	60fb      	str	r3, [r7, #12]
}
 80071b8:	bf00      	nop
 80071ba:	e7fe      	b.n	80071ba <vTaskStartScheduler+0xb2>
}
 80071bc:	bf00      	nop
 80071be:	3718      	adds	r7, #24
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	08009b60 	.word	0x08009b60
 80071c8:	08007805 	.word	0x08007805
 80071cc:	20003c2c 	.word	0x20003c2c
 80071d0:	20003c28 	.word	0x20003c28
 80071d4:	20003c14 	.word	0x20003c14
 80071d8:	20003c0c 	.word	0x20003c0c

080071dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80071dc:	b480      	push	{r7}
 80071de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80071e0:	4b04      	ldr	r3, [pc, #16]	; (80071f4 <vTaskSuspendAll+0x18>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	3301      	adds	r3, #1
 80071e6:	4a03      	ldr	r2, [pc, #12]	; (80071f4 <vTaskSuspendAll+0x18>)
 80071e8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80071ea:	bf00      	nop
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr
 80071f4:	20003c30 	.word	0x20003c30

080071f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80071fe:	2300      	movs	r3, #0
 8007200:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007202:	2300      	movs	r3, #0
 8007204:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007206:	4b42      	ldr	r3, [pc, #264]	; (8007310 <xTaskResumeAll+0x118>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10c      	bne.n	8007228 <xTaskResumeAll+0x30>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007212:	b672      	cpsid	i
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	b662      	cpsie	i
 8007222:	603b      	str	r3, [r7, #0]
}
 8007224:	bf00      	nop
 8007226:	e7fe      	b.n	8007226 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007228:	f001 f920 	bl	800846c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800722c:	4b38      	ldr	r3, [pc, #224]	; (8007310 <xTaskResumeAll+0x118>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3b01      	subs	r3, #1
 8007232:	4a37      	ldr	r2, [pc, #220]	; (8007310 <xTaskResumeAll+0x118>)
 8007234:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007236:	4b36      	ldr	r3, [pc, #216]	; (8007310 <xTaskResumeAll+0x118>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d161      	bne.n	8007302 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800723e:	4b35      	ldr	r3, [pc, #212]	; (8007314 <xTaskResumeAll+0x11c>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d05d      	beq.n	8007302 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007246:	e02e      	b.n	80072a6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007248:	4b33      	ldr	r3, [pc, #204]	; (8007318 <xTaskResumeAll+0x120>)
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	3318      	adds	r3, #24
 8007254:	4618      	mov	r0, r3
 8007256:	f7ff f854 	bl	8006302 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	3304      	adds	r3, #4
 800725e:	4618      	mov	r0, r3
 8007260:	f7ff f84f 	bl	8006302 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007268:	2201      	movs	r2, #1
 800726a:	409a      	lsls	r2, r3
 800726c:	4b2b      	ldr	r3, [pc, #172]	; (800731c <xTaskResumeAll+0x124>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4313      	orrs	r3, r2
 8007272:	4a2a      	ldr	r2, [pc, #168]	; (800731c <xTaskResumeAll+0x124>)
 8007274:	6013      	str	r3, [r2, #0]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800727a:	4613      	mov	r3, r2
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	4413      	add	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4a27      	ldr	r2, [pc, #156]	; (8007320 <xTaskResumeAll+0x128>)
 8007284:	441a      	add	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	3304      	adds	r3, #4
 800728a:	4619      	mov	r1, r3
 800728c:	4610      	mov	r0, r2
 800728e:	f7fe ffdb 	bl	8006248 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007296:	4b23      	ldr	r3, [pc, #140]	; (8007324 <xTaskResumeAll+0x12c>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729c:	429a      	cmp	r2, r3
 800729e:	d302      	bcc.n	80072a6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80072a0:	4b21      	ldr	r3, [pc, #132]	; (8007328 <xTaskResumeAll+0x130>)
 80072a2:	2201      	movs	r2, #1
 80072a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072a6:	4b1c      	ldr	r3, [pc, #112]	; (8007318 <xTaskResumeAll+0x120>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1cc      	bne.n	8007248 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d001      	beq.n	80072b8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80072b4:	f000 fb5e 	bl	8007974 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80072b8:	4b1c      	ldr	r3, [pc, #112]	; (800732c <xTaskResumeAll+0x134>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d010      	beq.n	80072e6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80072c4:	f000 f846 	bl	8007354 <xTaskIncrementTick>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d002      	beq.n	80072d4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80072ce:	4b16      	ldr	r3, [pc, #88]	; (8007328 <xTaskResumeAll+0x130>)
 80072d0:	2201      	movs	r2, #1
 80072d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	3b01      	subs	r3, #1
 80072d8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1f1      	bne.n	80072c4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80072e0:	4b12      	ldr	r3, [pc, #72]	; (800732c <xTaskResumeAll+0x134>)
 80072e2:	2200      	movs	r2, #0
 80072e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80072e6:	4b10      	ldr	r3, [pc, #64]	; (8007328 <xTaskResumeAll+0x130>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d009      	beq.n	8007302 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80072ee:	2301      	movs	r3, #1
 80072f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80072f2:	4b0f      	ldr	r3, [pc, #60]	; (8007330 <xTaskResumeAll+0x138>)
 80072f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072f8:	601a      	str	r2, [r3, #0]
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007302:	f001 f8e7 	bl	80084d4 <vPortExitCritical>

	return xAlreadyYielded;
 8007306:	68bb      	ldr	r3, [r7, #8]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	20003c30 	.word	0x20003c30
 8007314:	20003c08 	.word	0x20003c08
 8007318:	20003bc8 	.word	0x20003bc8
 800731c:	20003c10 	.word	0x20003c10
 8007320:	20003b0c 	.word	0x20003b0c
 8007324:	20003b08 	.word	0x20003b08
 8007328:	20003c1c 	.word	0x20003c1c
 800732c:	20003c18 	.word	0x20003c18
 8007330:	e000ed04 	.word	0xe000ed04

08007334 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800733a:	4b05      	ldr	r3, [pc, #20]	; (8007350 <xTaskGetTickCount+0x1c>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007340:	687b      	ldr	r3, [r7, #4]
}
 8007342:	4618      	mov	r0, r3
 8007344:	370c      	adds	r7, #12
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	20003c0c 	.word	0x20003c0c

08007354 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800735a:	2300      	movs	r3, #0
 800735c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800735e:	4b4f      	ldr	r3, [pc, #316]	; (800749c <xTaskIncrementTick+0x148>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	f040 808a 	bne.w	800747c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007368:	4b4d      	ldr	r3, [pc, #308]	; (80074a0 <xTaskIncrementTick+0x14c>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3301      	adds	r3, #1
 800736e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007370:	4a4b      	ldr	r2, [pc, #300]	; (80074a0 <xTaskIncrementTick+0x14c>)
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d122      	bne.n	80073c2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800737c:	4b49      	ldr	r3, [pc, #292]	; (80074a4 <xTaskIncrementTick+0x150>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00c      	beq.n	80073a0 <xTaskIncrementTick+0x4c>
	__asm volatile
 8007386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738a:	b672      	cpsid	i
 800738c:	f383 8811 	msr	BASEPRI, r3
 8007390:	f3bf 8f6f 	isb	sy
 8007394:	f3bf 8f4f 	dsb	sy
 8007398:	b662      	cpsie	i
 800739a:	603b      	str	r3, [r7, #0]
}
 800739c:	bf00      	nop
 800739e:	e7fe      	b.n	800739e <xTaskIncrementTick+0x4a>
 80073a0:	4b40      	ldr	r3, [pc, #256]	; (80074a4 <xTaskIncrementTick+0x150>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	60fb      	str	r3, [r7, #12]
 80073a6:	4b40      	ldr	r3, [pc, #256]	; (80074a8 <xTaskIncrementTick+0x154>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a3e      	ldr	r2, [pc, #248]	; (80074a4 <xTaskIncrementTick+0x150>)
 80073ac:	6013      	str	r3, [r2, #0]
 80073ae:	4a3e      	ldr	r2, [pc, #248]	; (80074a8 <xTaskIncrementTick+0x154>)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6013      	str	r3, [r2, #0]
 80073b4:	4b3d      	ldr	r3, [pc, #244]	; (80074ac <xTaskIncrementTick+0x158>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	3301      	adds	r3, #1
 80073ba:	4a3c      	ldr	r2, [pc, #240]	; (80074ac <xTaskIncrementTick+0x158>)
 80073bc:	6013      	str	r3, [r2, #0]
 80073be:	f000 fad9 	bl	8007974 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80073c2:	4b3b      	ldr	r3, [pc, #236]	; (80074b0 <xTaskIncrementTick+0x15c>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	693a      	ldr	r2, [r7, #16]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d348      	bcc.n	800745e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073cc:	4b35      	ldr	r3, [pc, #212]	; (80074a4 <xTaskIncrementTick+0x150>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d104      	bne.n	80073e0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073d6:	4b36      	ldr	r3, [pc, #216]	; (80074b0 <xTaskIncrementTick+0x15c>)
 80073d8:	f04f 32ff 	mov.w	r2, #4294967295
 80073dc:	601a      	str	r2, [r3, #0]
					break;
 80073de:	e03e      	b.n	800745e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e0:	4b30      	ldr	r3, [pc, #192]	; (80074a4 <xTaskIncrementTick+0x150>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d203      	bcs.n	8007400 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80073f8:	4a2d      	ldr	r2, [pc, #180]	; (80074b0 <xTaskIncrementTick+0x15c>)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80073fe:	e02e      	b.n	800745e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	3304      	adds	r3, #4
 8007404:	4618      	mov	r0, r3
 8007406:	f7fe ff7c 	bl	8006302 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740e:	2b00      	cmp	r3, #0
 8007410:	d004      	beq.n	800741c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	3318      	adds	r3, #24
 8007416:	4618      	mov	r0, r3
 8007418:	f7fe ff73 	bl	8006302 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007420:	2201      	movs	r2, #1
 8007422:	409a      	lsls	r2, r3
 8007424:	4b23      	ldr	r3, [pc, #140]	; (80074b4 <xTaskIncrementTick+0x160>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4313      	orrs	r3, r2
 800742a:	4a22      	ldr	r2, [pc, #136]	; (80074b4 <xTaskIncrementTick+0x160>)
 800742c:	6013      	str	r3, [r2, #0]
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007432:	4613      	mov	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4413      	add	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4a1f      	ldr	r2, [pc, #124]	; (80074b8 <xTaskIncrementTick+0x164>)
 800743c:	441a      	add	r2, r3
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	3304      	adds	r3, #4
 8007442:	4619      	mov	r1, r3
 8007444:	4610      	mov	r0, r2
 8007446:	f7fe feff 	bl	8006248 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800744e:	4b1b      	ldr	r3, [pc, #108]	; (80074bc <xTaskIncrementTick+0x168>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007454:	429a      	cmp	r2, r3
 8007456:	d3b9      	bcc.n	80073cc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007458:	2301      	movs	r3, #1
 800745a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800745c:	e7b6      	b.n	80073cc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800745e:	4b17      	ldr	r3, [pc, #92]	; (80074bc <xTaskIncrementTick+0x168>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007464:	4914      	ldr	r1, [pc, #80]	; (80074b8 <xTaskIncrementTick+0x164>)
 8007466:	4613      	mov	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4413      	add	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	440b      	add	r3, r1
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d907      	bls.n	8007486 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8007476:	2301      	movs	r3, #1
 8007478:	617b      	str	r3, [r7, #20]
 800747a:	e004      	b.n	8007486 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800747c:	4b10      	ldr	r3, [pc, #64]	; (80074c0 <xTaskIncrementTick+0x16c>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3301      	adds	r3, #1
 8007482:	4a0f      	ldr	r2, [pc, #60]	; (80074c0 <xTaskIncrementTick+0x16c>)
 8007484:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007486:	4b0f      	ldr	r3, [pc, #60]	; (80074c4 <xTaskIncrementTick+0x170>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d001      	beq.n	8007492 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800748e:	2301      	movs	r3, #1
 8007490:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007492:	697b      	ldr	r3, [r7, #20]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3718      	adds	r7, #24
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	20003c30 	.word	0x20003c30
 80074a0:	20003c0c 	.word	0x20003c0c
 80074a4:	20003bc0 	.word	0x20003bc0
 80074a8:	20003bc4 	.word	0x20003bc4
 80074ac:	20003c20 	.word	0x20003c20
 80074b0:	20003c28 	.word	0x20003c28
 80074b4:	20003c10 	.word	0x20003c10
 80074b8:	20003b0c 	.word	0x20003b0c
 80074bc:	20003b08 	.word	0x20003b08
 80074c0:	20003c18 	.word	0x20003c18
 80074c4:	20003c1c 	.word	0x20003c1c

080074c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80074c8:	b480      	push	{r7}
 80074ca:	b087      	sub	sp, #28
 80074cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80074ce:	4b28      	ldr	r3, [pc, #160]	; (8007570 <vTaskSwitchContext+0xa8>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d003      	beq.n	80074de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80074d6:	4b27      	ldr	r3, [pc, #156]	; (8007574 <vTaskSwitchContext+0xac>)
 80074d8:	2201      	movs	r2, #1
 80074da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80074dc:	e041      	b.n	8007562 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80074de:	4b25      	ldr	r3, [pc, #148]	; (8007574 <vTaskSwitchContext+0xac>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074e4:	4b24      	ldr	r3, [pc, #144]	; (8007578 <vTaskSwitchContext+0xb0>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	fab3 f383 	clz	r3, r3
 80074f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80074f2:	7afb      	ldrb	r3, [r7, #11]
 80074f4:	f1c3 031f 	rsb	r3, r3, #31
 80074f8:	617b      	str	r3, [r7, #20]
 80074fa:	4920      	ldr	r1, [pc, #128]	; (800757c <vTaskSwitchContext+0xb4>)
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	4613      	mov	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4413      	add	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	440b      	add	r3, r1
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10c      	bne.n	8007528 <vTaskSwitchContext+0x60>
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	b672      	cpsid	i
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	b662      	cpsie	i
 8007522:	607b      	str	r3, [r7, #4]
}
 8007524:	bf00      	nop
 8007526:	e7fe      	b.n	8007526 <vTaskSwitchContext+0x5e>
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	4613      	mov	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4413      	add	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4a12      	ldr	r2, [pc, #72]	; (800757c <vTaskSwitchContext+0xb4>)
 8007534:	4413      	add	r3, r2
 8007536:	613b      	str	r3, [r7, #16]
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	685a      	ldr	r2, [r3, #4]
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	605a      	str	r2, [r3, #4]
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	3308      	adds	r3, #8
 800754a:	429a      	cmp	r2, r3
 800754c:	d104      	bne.n	8007558 <vTaskSwitchContext+0x90>
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	605a      	str	r2, [r3, #4]
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	4a08      	ldr	r2, [pc, #32]	; (8007580 <vTaskSwitchContext+0xb8>)
 8007560:	6013      	str	r3, [r2, #0]
}
 8007562:	bf00      	nop
 8007564:	371c      	adds	r7, #28
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	20003c30 	.word	0x20003c30
 8007574:	20003c1c 	.word	0x20003c1c
 8007578:	20003c10 	.word	0x20003c10
 800757c:	20003b0c 	.word	0x20003b0c
 8007580:	20003b08 	.word	0x20003b08

08007584 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10c      	bne.n	80075ae <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007598:	b672      	cpsid	i
 800759a:	f383 8811 	msr	BASEPRI, r3
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	f3bf 8f4f 	dsb	sy
 80075a6:	b662      	cpsie	i
 80075a8:	60fb      	str	r3, [r7, #12]
}
 80075aa:	bf00      	nop
 80075ac:	e7fe      	b.n	80075ac <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075ae:	4b07      	ldr	r3, [pc, #28]	; (80075cc <vTaskPlaceOnEventList+0x48>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3318      	adds	r3, #24
 80075b4:	4619      	mov	r1, r3
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f7fe fe6a 	bl	8006290 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80075bc:	2101      	movs	r1, #1
 80075be:	6838      	ldr	r0, [r7, #0]
 80075c0:	f000 faa0 	bl	8007b04 <prvAddCurrentTaskToDelayedList>
}
 80075c4:	bf00      	nop
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	20003b08 	.word	0x20003b08

080075d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10c      	bne.n	80075fc <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80075e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e6:	b672      	cpsid	i
 80075e8:	f383 8811 	msr	BASEPRI, r3
 80075ec:	f3bf 8f6f 	isb	sy
 80075f0:	f3bf 8f4f 	dsb	sy
 80075f4:	b662      	cpsie	i
 80075f6:	617b      	str	r3, [r7, #20]
}
 80075f8:	bf00      	nop
 80075fa:	e7fe      	b.n	80075fa <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075fc:	4b0a      	ldr	r3, [pc, #40]	; (8007628 <vTaskPlaceOnEventListRestricted+0x58>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3318      	adds	r3, #24
 8007602:	4619      	mov	r1, r3
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f7fe fe1f 	bl	8006248 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d002      	beq.n	8007616 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8007610:	f04f 33ff 	mov.w	r3, #4294967295
 8007614:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007616:	6879      	ldr	r1, [r7, #4]
 8007618:	68b8      	ldr	r0, [r7, #8]
 800761a:	f000 fa73 	bl	8007b04 <prvAddCurrentTaskToDelayedList>
	}
 800761e:	bf00      	nop
 8007620:	3718      	adds	r7, #24
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	20003b08 	.word	0x20003b08

0800762c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10c      	bne.n	800765c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8007642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007646:	b672      	cpsid	i
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	b662      	cpsie	i
 8007656:	60fb      	str	r3, [r7, #12]
}
 8007658:	bf00      	nop
 800765a:	e7fe      	b.n	800765a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	3318      	adds	r3, #24
 8007660:	4618      	mov	r0, r3
 8007662:	f7fe fe4e 	bl	8006302 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007666:	4b1d      	ldr	r3, [pc, #116]	; (80076dc <xTaskRemoveFromEventList+0xb0>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d11c      	bne.n	80076a8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	3304      	adds	r3, #4
 8007672:	4618      	mov	r0, r3
 8007674:	f7fe fe45 	bl	8006302 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767c:	2201      	movs	r2, #1
 800767e:	409a      	lsls	r2, r3
 8007680:	4b17      	ldr	r3, [pc, #92]	; (80076e0 <xTaskRemoveFromEventList+0xb4>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4313      	orrs	r3, r2
 8007686:	4a16      	ldr	r2, [pc, #88]	; (80076e0 <xTaskRemoveFromEventList+0xb4>)
 8007688:	6013      	str	r3, [r2, #0]
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800768e:	4613      	mov	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4413      	add	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4a13      	ldr	r2, [pc, #76]	; (80076e4 <xTaskRemoveFromEventList+0xb8>)
 8007698:	441a      	add	r2, r3
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	3304      	adds	r3, #4
 800769e:	4619      	mov	r1, r3
 80076a0:	4610      	mov	r0, r2
 80076a2:	f7fe fdd1 	bl	8006248 <vListInsertEnd>
 80076a6:	e005      	b.n	80076b4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	3318      	adds	r3, #24
 80076ac:	4619      	mov	r1, r3
 80076ae:	480e      	ldr	r0, [pc, #56]	; (80076e8 <xTaskRemoveFromEventList+0xbc>)
 80076b0:	f7fe fdca 	bl	8006248 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b8:	4b0c      	ldr	r3, [pc, #48]	; (80076ec <xTaskRemoveFromEventList+0xc0>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076be:	429a      	cmp	r2, r3
 80076c0:	d905      	bls.n	80076ce <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80076c2:	2301      	movs	r3, #1
 80076c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80076c6:	4b0a      	ldr	r3, [pc, #40]	; (80076f0 <xTaskRemoveFromEventList+0xc4>)
 80076c8:	2201      	movs	r2, #1
 80076ca:	601a      	str	r2, [r3, #0]
 80076cc:	e001      	b.n	80076d2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80076ce:	2300      	movs	r3, #0
 80076d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80076d2:	697b      	ldr	r3, [r7, #20]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3718      	adds	r7, #24
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	20003c30 	.word	0x20003c30
 80076e0:	20003c10 	.word	0x20003c10
 80076e4:	20003b0c 	.word	0x20003b0c
 80076e8:	20003bc8 	.word	0x20003bc8
 80076ec:	20003b08 	.word	0x20003b08
 80076f0:	20003c1c 	.word	0x20003c1c

080076f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80076fc:	4b06      	ldr	r3, [pc, #24]	; (8007718 <vTaskInternalSetTimeOutState+0x24>)
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007704:	4b05      	ldr	r3, [pc, #20]	; (800771c <vTaskInternalSetTimeOutState+0x28>)
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	605a      	str	r2, [r3, #4]
}
 800770c:	bf00      	nop
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr
 8007718:	20003c20 	.word	0x20003c20
 800771c:	20003c0c 	.word	0x20003c0c

08007720 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b088      	sub	sp, #32
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10c      	bne.n	800774a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007734:	b672      	cpsid	i
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	b662      	cpsie	i
 8007744:	613b      	str	r3, [r7, #16]
}
 8007746:	bf00      	nop
 8007748:	e7fe      	b.n	8007748 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10c      	bne.n	800776a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007754:	b672      	cpsid	i
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	b662      	cpsie	i
 8007764:	60fb      	str	r3, [r7, #12]
}
 8007766:	bf00      	nop
 8007768:	e7fe      	b.n	8007768 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800776a:	f000 fe7f 	bl	800846c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800776e:	4b1d      	ldr	r3, [pc, #116]	; (80077e4 <xTaskCheckForTimeOut+0xc4>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	69ba      	ldr	r2, [r7, #24]
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007786:	d102      	bne.n	800778e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007788:	2300      	movs	r3, #0
 800778a:	61fb      	str	r3, [r7, #28]
 800778c:	e023      	b.n	80077d6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	4b15      	ldr	r3, [pc, #84]	; (80077e8 <xTaskCheckForTimeOut+0xc8>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	429a      	cmp	r2, r3
 8007798:	d007      	beq.n	80077aa <xTaskCheckForTimeOut+0x8a>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	69ba      	ldr	r2, [r7, #24]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d302      	bcc.n	80077aa <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80077a4:	2301      	movs	r3, #1
 80077a6:	61fb      	str	r3, [r7, #28]
 80077a8:	e015      	b.n	80077d6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d20b      	bcs.n	80077cc <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	1ad2      	subs	r2, r2, r3
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7ff ff97 	bl	80076f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80077c6:	2300      	movs	r3, #0
 80077c8:	61fb      	str	r3, [r7, #28]
 80077ca:	e004      	b.n	80077d6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	2200      	movs	r2, #0
 80077d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80077d2:	2301      	movs	r3, #1
 80077d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80077d6:	f000 fe7d 	bl	80084d4 <vPortExitCritical>

	return xReturn;
 80077da:	69fb      	ldr	r3, [r7, #28]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3720      	adds	r7, #32
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	20003c0c 	.word	0x20003c0c
 80077e8:	20003c20 	.word	0x20003c20

080077ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80077ec:	b480      	push	{r7}
 80077ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80077f0:	4b03      	ldr	r3, [pc, #12]	; (8007800 <vTaskMissedYield+0x14>)
 80077f2:	2201      	movs	r2, #1
 80077f4:	601a      	str	r2, [r3, #0]
}
 80077f6:	bf00      	nop
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr
 8007800:	20003c1c 	.word	0x20003c1c

08007804 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800780c:	f000 f852 	bl	80078b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007810:	4b06      	ldr	r3, [pc, #24]	; (800782c <prvIdleTask+0x28>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d9f9      	bls.n	800780c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007818:	4b05      	ldr	r3, [pc, #20]	; (8007830 <prvIdleTask+0x2c>)
 800781a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800781e:	601a      	str	r2, [r3, #0]
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007828:	e7f0      	b.n	800780c <prvIdleTask+0x8>
 800782a:	bf00      	nop
 800782c:	20003b0c 	.word	0x20003b0c
 8007830:	e000ed04 	.word	0xe000ed04

08007834 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800783a:	2300      	movs	r3, #0
 800783c:	607b      	str	r3, [r7, #4]
 800783e:	e00c      	b.n	800785a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	4613      	mov	r3, r2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	4413      	add	r3, r2
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	4a12      	ldr	r2, [pc, #72]	; (8007894 <prvInitialiseTaskLists+0x60>)
 800784c:	4413      	add	r3, r2
 800784e:	4618      	mov	r0, r3
 8007850:	f7fe fccd 	bl	80061ee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	3301      	adds	r3, #1
 8007858:	607b      	str	r3, [r7, #4]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b06      	cmp	r3, #6
 800785e:	d9ef      	bls.n	8007840 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007860:	480d      	ldr	r0, [pc, #52]	; (8007898 <prvInitialiseTaskLists+0x64>)
 8007862:	f7fe fcc4 	bl	80061ee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007866:	480d      	ldr	r0, [pc, #52]	; (800789c <prvInitialiseTaskLists+0x68>)
 8007868:	f7fe fcc1 	bl	80061ee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800786c:	480c      	ldr	r0, [pc, #48]	; (80078a0 <prvInitialiseTaskLists+0x6c>)
 800786e:	f7fe fcbe 	bl	80061ee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007872:	480c      	ldr	r0, [pc, #48]	; (80078a4 <prvInitialiseTaskLists+0x70>)
 8007874:	f7fe fcbb 	bl	80061ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007878:	480b      	ldr	r0, [pc, #44]	; (80078a8 <prvInitialiseTaskLists+0x74>)
 800787a:	f7fe fcb8 	bl	80061ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800787e:	4b0b      	ldr	r3, [pc, #44]	; (80078ac <prvInitialiseTaskLists+0x78>)
 8007880:	4a05      	ldr	r2, [pc, #20]	; (8007898 <prvInitialiseTaskLists+0x64>)
 8007882:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007884:	4b0a      	ldr	r3, [pc, #40]	; (80078b0 <prvInitialiseTaskLists+0x7c>)
 8007886:	4a05      	ldr	r2, [pc, #20]	; (800789c <prvInitialiseTaskLists+0x68>)
 8007888:	601a      	str	r2, [r3, #0]
}
 800788a:	bf00      	nop
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	20003b0c 	.word	0x20003b0c
 8007898:	20003b98 	.word	0x20003b98
 800789c:	20003bac 	.word	0x20003bac
 80078a0:	20003bc8 	.word	0x20003bc8
 80078a4:	20003bdc 	.word	0x20003bdc
 80078a8:	20003bf4 	.word	0x20003bf4
 80078ac:	20003bc0 	.word	0x20003bc0
 80078b0:	20003bc4 	.word	0x20003bc4

080078b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078ba:	e019      	b.n	80078f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80078bc:	f000 fdd6 	bl	800846c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078c0:	4b10      	ldr	r3, [pc, #64]	; (8007904 <prvCheckTasksWaitingTermination+0x50>)
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	3304      	adds	r3, #4
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7fe fd18 	bl	8006302 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80078d2:	4b0d      	ldr	r3, [pc, #52]	; (8007908 <prvCheckTasksWaitingTermination+0x54>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	3b01      	subs	r3, #1
 80078d8:	4a0b      	ldr	r2, [pc, #44]	; (8007908 <prvCheckTasksWaitingTermination+0x54>)
 80078da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80078dc:	4b0b      	ldr	r3, [pc, #44]	; (800790c <prvCheckTasksWaitingTermination+0x58>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	3b01      	subs	r3, #1
 80078e2:	4a0a      	ldr	r2, [pc, #40]	; (800790c <prvCheckTasksWaitingTermination+0x58>)
 80078e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80078e6:	f000 fdf5 	bl	80084d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f810 	bl	8007910 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078f0:	4b06      	ldr	r3, [pc, #24]	; (800790c <prvCheckTasksWaitingTermination+0x58>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1e1      	bne.n	80078bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80078f8:	bf00      	nop
 80078fa:	bf00      	nop
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	20003bdc 	.word	0x20003bdc
 8007908:	20003c08 	.word	0x20003c08
 800790c:	20003bf0 	.word	0x20003bf0

08007910 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800791e:	2b00      	cmp	r3, #0
 8007920:	d108      	bne.n	8007934 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007926:	4618      	mov	r0, r3
 8007928:	f000 ff96 	bl	8008858 <vPortFree>
				vPortFree( pxTCB );
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 ff93 	bl	8008858 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007932:	e01a      	b.n	800796a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800793a:	2b01      	cmp	r3, #1
 800793c:	d103      	bne.n	8007946 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 ff8a 	bl	8008858 <vPortFree>
	}
 8007944:	e011      	b.n	800796a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800794c:	2b02      	cmp	r3, #2
 800794e:	d00c      	beq.n	800796a <prvDeleteTCB+0x5a>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	b672      	cpsid	i
 8007956:	f383 8811 	msr	BASEPRI, r3
 800795a:	f3bf 8f6f 	isb	sy
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	b662      	cpsie	i
 8007964:	60fb      	str	r3, [r7, #12]
}
 8007966:	bf00      	nop
 8007968:	e7fe      	b.n	8007968 <prvDeleteTCB+0x58>
	}
 800796a:	bf00      	nop
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
	...

08007974 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800797a:	4b0c      	ldr	r3, [pc, #48]	; (80079ac <prvResetNextTaskUnblockTime+0x38>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d104      	bne.n	800798e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007984:	4b0a      	ldr	r3, [pc, #40]	; (80079b0 <prvResetNextTaskUnblockTime+0x3c>)
 8007986:	f04f 32ff 	mov.w	r2, #4294967295
 800798a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800798c:	e008      	b.n	80079a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800798e:	4b07      	ldr	r3, [pc, #28]	; (80079ac <prvResetNextTaskUnblockTime+0x38>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	4a04      	ldr	r2, [pc, #16]	; (80079b0 <prvResetNextTaskUnblockTime+0x3c>)
 800799e:	6013      	str	r3, [r2, #0]
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr
 80079ac:	20003bc0 	.word	0x20003bc0
 80079b0:	20003c28 	.word	0x20003c28

080079b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80079ba:	4b0b      	ldr	r3, [pc, #44]	; (80079e8 <xTaskGetSchedulerState+0x34>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d102      	bne.n	80079c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80079c2:	2301      	movs	r3, #1
 80079c4:	607b      	str	r3, [r7, #4]
 80079c6:	e008      	b.n	80079da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079c8:	4b08      	ldr	r3, [pc, #32]	; (80079ec <xTaskGetSchedulerState+0x38>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d102      	bne.n	80079d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80079d0:	2302      	movs	r3, #2
 80079d2:	607b      	str	r3, [r7, #4]
 80079d4:	e001      	b.n	80079da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80079d6:	2300      	movs	r3, #0
 80079d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80079da:	687b      	ldr	r3, [r7, #4]
	}
 80079dc:	4618      	mov	r0, r3
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr
 80079e8:	20003c14 	.word	0x20003c14
 80079ec:	20003c30 	.word	0x20003c30

080079f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80079fc:	2300      	movs	r3, #0
 80079fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d072      	beq.n	8007aec <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007a06:	4b3c      	ldr	r3, [pc, #240]	; (8007af8 <xTaskPriorityDisinherit+0x108>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	693a      	ldr	r2, [r7, #16]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d00c      	beq.n	8007a2a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a14:	b672      	cpsid	i
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	b662      	cpsie	i
 8007a24:	60fb      	str	r3, [r7, #12]
}
 8007a26:	bf00      	nop
 8007a28:	e7fe      	b.n	8007a28 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10c      	bne.n	8007a4c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a36:	b672      	cpsid	i
 8007a38:	f383 8811 	msr	BASEPRI, r3
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	b662      	cpsie	i
 8007a46:	60bb      	str	r3, [r7, #8]
}
 8007a48:	bf00      	nop
 8007a4a:	e7fe      	b.n	8007a4a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a50:	1e5a      	subs	r2, r3, #1
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d044      	beq.n	8007aec <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d140      	bne.n	8007aec <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fe fc47 	bl	8006302 <uxListRemove>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d115      	bne.n	8007aa6 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a7e:	491f      	ldr	r1, [pc, #124]	; (8007afc <xTaskPriorityDisinherit+0x10c>)
 8007a80:	4613      	mov	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	440b      	add	r3, r1
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10a      	bne.n	8007aa6 <xTaskPriorityDisinherit+0xb6>
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a94:	2201      	movs	r2, #1
 8007a96:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9a:	43da      	mvns	r2, r3
 8007a9c:	4b18      	ldr	r3, [pc, #96]	; (8007b00 <xTaskPriorityDisinherit+0x110>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	4a17      	ldr	r2, [pc, #92]	; (8007b00 <xTaskPriorityDisinherit+0x110>)
 8007aa4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab2:	f1c3 0207 	rsb	r2, r3, #7
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007abe:	2201      	movs	r2, #1
 8007ac0:	409a      	lsls	r2, r3
 8007ac2:	4b0f      	ldr	r3, [pc, #60]	; (8007b00 <xTaskPriorityDisinherit+0x110>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	4a0d      	ldr	r2, [pc, #52]	; (8007b00 <xTaskPriorityDisinherit+0x110>)
 8007aca:	6013      	str	r3, [r2, #0]
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4413      	add	r3, r2
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4a08      	ldr	r2, [pc, #32]	; (8007afc <xTaskPriorityDisinherit+0x10c>)
 8007ada:	441a      	add	r2, r3
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	3304      	adds	r3, #4
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	4610      	mov	r0, r2
 8007ae4:	f7fe fbb0 	bl	8006248 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007aec:	697b      	ldr	r3, [r7, #20]
	}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3718      	adds	r7, #24
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	20003b08 	.word	0x20003b08
 8007afc:	20003b0c 	.word	0x20003b0c
 8007b00:	20003c10 	.word	0x20003c10

08007b04 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b0e:	4b29      	ldr	r3, [pc, #164]	; (8007bb4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b14:	4b28      	ldr	r3, [pc, #160]	; (8007bb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	3304      	adds	r3, #4
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fe fbf1 	bl	8006302 <uxListRemove>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10b      	bne.n	8007b3e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007b26:	4b24      	ldr	r3, [pc, #144]	; (8007bb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b32:	43da      	mvns	r2, r3
 8007b34:	4b21      	ldr	r3, [pc, #132]	; (8007bbc <prvAddCurrentTaskToDelayedList+0xb8>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4013      	ands	r3, r2
 8007b3a:	4a20      	ldr	r2, [pc, #128]	; (8007bbc <prvAddCurrentTaskToDelayedList+0xb8>)
 8007b3c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b44:	d10a      	bne.n	8007b5c <prvAddCurrentTaskToDelayedList+0x58>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d007      	beq.n	8007b5c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b4c:	4b1a      	ldr	r3, [pc, #104]	; (8007bb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	3304      	adds	r3, #4
 8007b52:	4619      	mov	r1, r3
 8007b54:	481a      	ldr	r0, [pc, #104]	; (8007bc0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007b56:	f7fe fb77 	bl	8006248 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b5a:	e026      	b.n	8007baa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4413      	add	r3, r2
 8007b62:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b64:	4b14      	ldr	r3, [pc, #80]	; (8007bb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d209      	bcs.n	8007b88 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b74:	4b13      	ldr	r3, [pc, #76]	; (8007bc4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	4b0f      	ldr	r3, [pc, #60]	; (8007bb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	3304      	adds	r3, #4
 8007b7e:	4619      	mov	r1, r3
 8007b80:	4610      	mov	r0, r2
 8007b82:	f7fe fb85 	bl	8006290 <vListInsert>
}
 8007b86:	e010      	b.n	8007baa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b88:	4b0f      	ldr	r3, [pc, #60]	; (8007bc8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	4b0a      	ldr	r3, [pc, #40]	; (8007bb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3304      	adds	r3, #4
 8007b92:	4619      	mov	r1, r3
 8007b94:	4610      	mov	r0, r2
 8007b96:	f7fe fb7b 	bl	8006290 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b9a:	4b0c      	ldr	r3, [pc, #48]	; (8007bcc <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d202      	bcs.n	8007baa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007ba4:	4a09      	ldr	r2, [pc, #36]	; (8007bcc <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	6013      	str	r3, [r2, #0]
}
 8007baa:	bf00      	nop
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	20003c0c 	.word	0x20003c0c
 8007bb8:	20003b08 	.word	0x20003b08
 8007bbc:	20003c10 	.word	0x20003c10
 8007bc0:	20003bf4 	.word	0x20003bf4
 8007bc4:	20003bc4 	.word	0x20003bc4
 8007bc8:	20003bc0 	.word	0x20003bc0
 8007bcc:	20003c28 	.word	0x20003c28

08007bd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b08a      	sub	sp, #40	; 0x28
 8007bd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007bda:	f000 faf7 	bl	80081cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007bde:	4b1d      	ldr	r3, [pc, #116]	; (8007c54 <xTimerCreateTimerTask+0x84>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d021      	beq.n	8007c2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007be6:	2300      	movs	r3, #0
 8007be8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007bea:	2300      	movs	r3, #0
 8007bec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007bee:	1d3a      	adds	r2, r7, #4
 8007bf0:	f107 0108 	add.w	r1, r7, #8
 8007bf4:	f107 030c 	add.w	r3, r7, #12
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7f8 fecf 	bl	800099c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007bfe:	6879      	ldr	r1, [r7, #4]
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	9202      	str	r2, [sp, #8]
 8007c06:	9301      	str	r3, [sp, #4]
 8007c08:	2302      	movs	r3, #2
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	460a      	mov	r2, r1
 8007c10:	4911      	ldr	r1, [pc, #68]	; (8007c58 <xTimerCreateTimerTask+0x88>)
 8007c12:	4812      	ldr	r0, [pc, #72]	; (8007c5c <xTimerCreateTimerTask+0x8c>)
 8007c14:	f7ff f8a6 	bl	8006d64 <xTaskCreateStatic>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	4a11      	ldr	r2, [pc, #68]	; (8007c60 <xTimerCreateTimerTask+0x90>)
 8007c1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007c1e:	4b10      	ldr	r3, [pc, #64]	; (8007c60 <xTimerCreateTimerTask+0x90>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d001      	beq.n	8007c2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007c26:	2301      	movs	r3, #1
 8007c28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10c      	bne.n	8007c4a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8007c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c34:	b672      	cpsid	i
 8007c36:	f383 8811 	msr	BASEPRI, r3
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	b662      	cpsie	i
 8007c44:	613b      	str	r3, [r7, #16]
}
 8007c46:	bf00      	nop
 8007c48:	e7fe      	b.n	8007c48 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007c4a:	697b      	ldr	r3, [r7, #20]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3718      	adds	r7, #24
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	20003c64 	.word	0x20003c64
 8007c58:	08009b68 	.word	0x08009b68
 8007c5c:	08007da1 	.word	0x08007da1
 8007c60:	20003c68 	.word	0x20003c68

08007c64 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b08a      	sub	sp, #40	; 0x28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
 8007c70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007c72:	2300      	movs	r3, #0
 8007c74:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10c      	bne.n	8007c96 <xTimerGenericCommand+0x32>
	__asm volatile
 8007c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c80:	b672      	cpsid	i
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	b662      	cpsie	i
 8007c90:	623b      	str	r3, [r7, #32]
}
 8007c92:	bf00      	nop
 8007c94:	e7fe      	b.n	8007c94 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007c96:	4b1a      	ldr	r3, [pc, #104]	; (8007d00 <xTimerGenericCommand+0x9c>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d02a      	beq.n	8007cf4 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	2b05      	cmp	r3, #5
 8007cae:	dc18      	bgt.n	8007ce2 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007cb0:	f7ff fe80 	bl	80079b4 <xTaskGetSchedulerState>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d109      	bne.n	8007cce <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007cba:	4b11      	ldr	r3, [pc, #68]	; (8007d00 <xTimerGenericCommand+0x9c>)
 8007cbc:	6818      	ldr	r0, [r3, #0]
 8007cbe:	f107 0114 	add.w	r1, r7, #20
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cc6:	f7fe fc53 	bl	8006570 <xQueueGenericSend>
 8007cca:	6278      	str	r0, [r7, #36]	; 0x24
 8007ccc:	e012      	b.n	8007cf4 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007cce:	4b0c      	ldr	r3, [pc, #48]	; (8007d00 <xTimerGenericCommand+0x9c>)
 8007cd0:	6818      	ldr	r0, [r3, #0]
 8007cd2:	f107 0114 	add.w	r1, r7, #20
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f7fe fc49 	bl	8006570 <xQueueGenericSend>
 8007cde:	6278      	str	r0, [r7, #36]	; 0x24
 8007ce0:	e008      	b.n	8007cf4 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ce2:	4b07      	ldr	r3, [pc, #28]	; (8007d00 <xTimerGenericCommand+0x9c>)
 8007ce4:	6818      	ldr	r0, [r3, #0]
 8007ce6:	f107 0114 	add.w	r1, r7, #20
 8007cea:	2300      	movs	r3, #0
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	f7fe fd45 	bl	800677c <xQueueGenericSendFromISR>
 8007cf2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3728      	adds	r7, #40	; 0x28
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	20003c64 	.word	0x20003c64

08007d04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b088      	sub	sp, #32
 8007d08:	af02      	add	r7, sp, #8
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d0e:	4b23      	ldr	r3, [pc, #140]	; (8007d9c <prvProcessExpiredTimer+0x98>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	3304      	adds	r3, #4
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7fe faf0 	bl	8006302 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d28:	f003 0304 	and.w	r3, r3, #4
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d024      	beq.n	8007d7a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	699a      	ldr	r2, [r3, #24]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	18d1      	adds	r1, r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	683a      	ldr	r2, [r7, #0]
 8007d3c:	6978      	ldr	r0, [r7, #20]
 8007d3e:	f000 f8d3 	bl	8007ee8 <prvInsertTimerInActiveList>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d021      	beq.n	8007d8c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d48:	2300      	movs	r3, #0
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	2100      	movs	r1, #0
 8007d52:	6978      	ldr	r0, [r7, #20]
 8007d54:	f7ff ff86 	bl	8007c64 <xTimerGenericCommand>
 8007d58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d115      	bne.n	8007d8c <prvProcessExpiredTimer+0x88>
	__asm volatile
 8007d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d64:	b672      	cpsid	i
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	b662      	cpsie	i
 8007d74:	60fb      	str	r3, [r7, #12]
}
 8007d76:	bf00      	nop
 8007d78:	e7fe      	b.n	8007d78 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d80:	f023 0301 	bic.w	r3, r3, #1
 8007d84:	b2da      	uxtb	r2, r3
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	6a1b      	ldr	r3, [r3, #32]
 8007d90:	6978      	ldr	r0, [r7, #20]
 8007d92:	4798      	blx	r3
}
 8007d94:	bf00      	nop
 8007d96:	3718      	adds	r7, #24
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	20003c5c 	.word	0x20003c5c

08007da0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007da8:	f107 0308 	add.w	r3, r7, #8
 8007dac:	4618      	mov	r0, r3
 8007dae:	f000 f857 	bl	8007e60 <prvGetNextExpireTime>
 8007db2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	4619      	mov	r1, r3
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f000 f803 	bl	8007dc4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007dbe:	f000 f8d5 	bl	8007f6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007dc2:	e7f1      	b.n	8007da8 <prvTimerTask+0x8>

08007dc4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007dce:	f7ff fa05 	bl	80071dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007dd2:	f107 0308 	add.w	r3, r7, #8
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f000 f866 	bl	8007ea8 <prvSampleTimeNow>
 8007ddc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d130      	bne.n	8007e46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10a      	bne.n	8007e00 <prvProcessTimerOrBlockTask+0x3c>
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d806      	bhi.n	8007e00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007df2:	f7ff fa01 	bl	80071f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007df6:	68f9      	ldr	r1, [r7, #12]
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f7ff ff83 	bl	8007d04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007dfe:	e024      	b.n	8007e4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d008      	beq.n	8007e18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007e06:	4b13      	ldr	r3, [pc, #76]	; (8007e54 <prvProcessTimerOrBlockTask+0x90>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <prvProcessTimerOrBlockTask+0x50>
 8007e10:	2301      	movs	r3, #1
 8007e12:	e000      	b.n	8007e16 <prvProcessTimerOrBlockTask+0x52>
 8007e14:	2300      	movs	r3, #0
 8007e16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007e18:	4b0f      	ldr	r3, [pc, #60]	; (8007e58 <prvProcessTimerOrBlockTask+0x94>)
 8007e1a:	6818      	ldr	r0, [r3, #0]
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	4619      	mov	r1, r3
 8007e26:	f7fe ff69 	bl	8006cfc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007e2a:	f7ff f9e5 	bl	80071f8 <xTaskResumeAll>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10a      	bne.n	8007e4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007e34:	4b09      	ldr	r3, [pc, #36]	; (8007e5c <prvProcessTimerOrBlockTask+0x98>)
 8007e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e3a:	601a      	str	r2, [r3, #0]
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	f3bf 8f6f 	isb	sy
}
 8007e44:	e001      	b.n	8007e4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007e46:	f7ff f9d7 	bl	80071f8 <xTaskResumeAll>
}
 8007e4a:	bf00      	nop
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20003c60 	.word	0x20003c60
 8007e58:	20003c64 	.word	0x20003c64
 8007e5c:	e000ed04 	.word	0xe000ed04

08007e60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e68:	4b0e      	ldr	r3, [pc, #56]	; (8007ea4 <prvGetNextExpireTime+0x44>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d101      	bne.n	8007e76 <prvGetNextExpireTime+0x16>
 8007e72:	2201      	movs	r2, #1
 8007e74:	e000      	b.n	8007e78 <prvGetNextExpireTime+0x18>
 8007e76:	2200      	movs	r2, #0
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d105      	bne.n	8007e90 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e84:	4b07      	ldr	r3, [pc, #28]	; (8007ea4 <prvGetNextExpireTime+0x44>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	60fb      	str	r3, [r7, #12]
 8007e8e:	e001      	b.n	8007e94 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007e90:	2300      	movs	r3, #0
 8007e92:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007e94:	68fb      	ldr	r3, [r7, #12]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3714      	adds	r7, #20
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	20003c5c 	.word	0x20003c5c

08007ea8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007eb0:	f7ff fa40 	bl	8007334 <xTaskGetTickCount>
 8007eb4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007eb6:	4b0b      	ldr	r3, [pc, #44]	; (8007ee4 <prvSampleTimeNow+0x3c>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d205      	bcs.n	8007ecc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ec0:	f000 f91e 	bl	8008100 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	601a      	str	r2, [r3, #0]
 8007eca:	e002      	b.n	8007ed2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007ed2:	4a04      	ldr	r2, [pc, #16]	; (8007ee4 <prvSampleTimeNow+0x3c>)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	20003c6c 	.word	0x20003c6c

08007ee8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	607a      	str	r2, [r7, #4]
 8007ef4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d812      	bhi.n	8007f34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	1ad2      	subs	r2, r2, r3
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	699b      	ldr	r3, [r3, #24]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d302      	bcc.n	8007f22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	617b      	str	r3, [r7, #20]
 8007f20:	e01b      	b.n	8007f5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007f22:	4b10      	ldr	r3, [pc, #64]	; (8007f64 <prvInsertTimerInActiveList+0x7c>)
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	3304      	adds	r3, #4
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	f7fe f9af 	bl	8006290 <vListInsert>
 8007f32:	e012      	b.n	8007f5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d206      	bcs.n	8007f4a <prvInsertTimerInActiveList+0x62>
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d302      	bcc.n	8007f4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007f44:	2301      	movs	r3, #1
 8007f46:	617b      	str	r3, [r7, #20]
 8007f48:	e007      	b.n	8007f5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f4a:	4b07      	ldr	r3, [pc, #28]	; (8007f68 <prvInsertTimerInActiveList+0x80>)
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	3304      	adds	r3, #4
 8007f52:	4619      	mov	r1, r3
 8007f54:	4610      	mov	r0, r2
 8007f56:	f7fe f99b 	bl	8006290 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007f5a:	697b      	ldr	r3, [r7, #20]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3718      	adds	r7, #24
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	20003c60 	.word	0x20003c60
 8007f68:	20003c5c 	.word	0x20003c5c

08007f6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b08c      	sub	sp, #48	; 0x30
 8007f70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f72:	e0b2      	b.n	80080da <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f2c0 80ae 	blt.w	80080d8 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f82:	695b      	ldr	r3, [r3, #20]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d004      	beq.n	8007f92 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	3304      	adds	r3, #4
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7fe f9b8 	bl	8006302 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f92:	1d3b      	adds	r3, r7, #4
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7ff ff87 	bl	8007ea8 <prvSampleTimeNow>
 8007f9a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	2b09      	cmp	r3, #9
 8007fa0:	f200 809b 	bhi.w	80080da <prvProcessReceivedCommands+0x16e>
 8007fa4:	a201      	add	r2, pc, #4	; (adr r2, 8007fac <prvProcessReceivedCommands+0x40>)
 8007fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007faa:	bf00      	nop
 8007fac:	08007fd5 	.word	0x08007fd5
 8007fb0:	08007fd5 	.word	0x08007fd5
 8007fb4:	08007fd5 	.word	0x08007fd5
 8007fb8:	0800804d 	.word	0x0800804d
 8007fbc:	08008061 	.word	0x08008061
 8007fc0:	080080af 	.word	0x080080af
 8007fc4:	08007fd5 	.word	0x08007fd5
 8007fc8:	08007fd5 	.word	0x08007fd5
 8007fcc:	0800804d 	.word	0x0800804d
 8007fd0:	08008061 	.word	0x08008061
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007fda:	f043 0301 	orr.w	r3, r3, #1
 8007fde:	b2da      	uxtb	r2, r3
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	18d1      	adds	r1, r2, r3
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6a3a      	ldr	r2, [r7, #32]
 8007ff2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ff4:	f7ff ff78 	bl	8007ee8 <prvInsertTimerInActiveList>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d06d      	beq.n	80080da <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008004:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008008:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800800c:	f003 0304 	and.w	r3, r3, #4
 8008010:	2b00      	cmp	r3, #0
 8008012:	d062      	beq.n	80080da <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	699b      	ldr	r3, [r3, #24]
 800801a:	441a      	add	r2, r3
 800801c:	2300      	movs	r3, #0
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	2300      	movs	r3, #0
 8008022:	2100      	movs	r1, #0
 8008024:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008026:	f7ff fe1d 	bl	8007c64 <xTimerGenericCommand>
 800802a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d153      	bne.n	80080da <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8008032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008036:	b672      	cpsid	i
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	b662      	cpsie	i
 8008046:	61bb      	str	r3, [r7, #24]
}
 8008048:	bf00      	nop
 800804a:	e7fe      	b.n	800804a <prvProcessReceivedCommands+0xde>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800804c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008052:	f023 0301 	bic.w	r3, r3, #1
 8008056:	b2da      	uxtb	r2, r3
 8008058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800805e:	e03c      	b.n	80080da <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008062:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008066:	f043 0301 	orr.w	r3, r3, #1
 800806a:	b2da      	uxtb	r2, r3
 800806c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10c      	bne.n	800809a <prvProcessReceivedCommands+0x12e>
	__asm volatile
 8008080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008084:	b672      	cpsid	i
 8008086:	f383 8811 	msr	BASEPRI, r3
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	b662      	cpsie	i
 8008094:	617b      	str	r3, [r7, #20]
}
 8008096:	bf00      	nop
 8008098:	e7fe      	b.n	8008098 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800809a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809c:	699a      	ldr	r2, [r3, #24]
 800809e:	6a3b      	ldr	r3, [r7, #32]
 80080a0:	18d1      	adds	r1, r2, r3
 80080a2:	6a3b      	ldr	r3, [r7, #32]
 80080a4:	6a3a      	ldr	r2, [r7, #32]
 80080a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080a8:	f7ff ff1e 	bl	8007ee8 <prvInsertTimerInActiveList>
					break;
 80080ac:	e015      	b.n	80080da <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80080ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80080b4:	f003 0302 	and.w	r3, r3, #2
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d103      	bne.n	80080c4 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 80080bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080be:	f000 fbcb 	bl	8008858 <vPortFree>
 80080c2:	e00a      	b.n	80080da <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80080c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80080ca:	f023 0301 	bic.w	r3, r3, #1
 80080ce:	b2da      	uxtb	r2, r3
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80080d6:	e000      	b.n	80080da <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80080d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080da:	4b08      	ldr	r3, [pc, #32]	; (80080fc <prvProcessReceivedCommands+0x190>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f107 0108 	add.w	r1, r7, #8
 80080e2:	2200      	movs	r2, #0
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7fe fbe9 	bl	80068bc <xQueueReceive>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f47f af41 	bne.w	8007f74 <prvProcessReceivedCommands+0x8>
	}
}
 80080f2:	bf00      	nop
 80080f4:	bf00      	nop
 80080f6:	3728      	adds	r7, #40	; 0x28
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	20003c64 	.word	0x20003c64

08008100 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b088      	sub	sp, #32
 8008104:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008106:	e04a      	b.n	800819e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008108:	4b2e      	ldr	r3, [pc, #184]	; (80081c4 <prvSwitchTimerLists+0xc4>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008112:	4b2c      	ldr	r3, [pc, #176]	; (80081c4 <prvSwitchTimerLists+0xc4>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	3304      	adds	r3, #4
 8008120:	4618      	mov	r0, r3
 8008122:	f7fe f8ee 	bl	8006302 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008134:	f003 0304 	and.w	r3, r3, #4
 8008138:	2b00      	cmp	r3, #0
 800813a:	d030      	beq.n	800819e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	699b      	ldr	r3, [r3, #24]
 8008140:	693a      	ldr	r2, [r7, #16]
 8008142:	4413      	add	r3, r2
 8008144:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	429a      	cmp	r2, r3
 800814c:	d90e      	bls.n	800816c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	68ba      	ldr	r2, [r7, #8]
 8008152:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800815a:	4b1a      	ldr	r3, [pc, #104]	; (80081c4 <prvSwitchTimerLists+0xc4>)
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	3304      	adds	r3, #4
 8008162:	4619      	mov	r1, r3
 8008164:	4610      	mov	r0, r2
 8008166:	f7fe f893 	bl	8006290 <vListInsert>
 800816a:	e018      	b.n	800819e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800816c:	2300      	movs	r3, #0
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	2300      	movs	r3, #0
 8008172:	693a      	ldr	r2, [r7, #16]
 8008174:	2100      	movs	r1, #0
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	f7ff fd74 	bl	8007c64 <xTimerGenericCommand>
 800817c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10c      	bne.n	800819e <prvSwitchTimerLists+0x9e>
	__asm volatile
 8008184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008188:	b672      	cpsid	i
 800818a:	f383 8811 	msr	BASEPRI, r3
 800818e:	f3bf 8f6f 	isb	sy
 8008192:	f3bf 8f4f 	dsb	sy
 8008196:	b662      	cpsie	i
 8008198:	603b      	str	r3, [r7, #0]
}
 800819a:	bf00      	nop
 800819c:	e7fe      	b.n	800819c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800819e:	4b09      	ldr	r3, [pc, #36]	; (80081c4 <prvSwitchTimerLists+0xc4>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1af      	bne.n	8008108 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80081a8:	4b06      	ldr	r3, [pc, #24]	; (80081c4 <prvSwitchTimerLists+0xc4>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80081ae:	4b06      	ldr	r3, [pc, #24]	; (80081c8 <prvSwitchTimerLists+0xc8>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a04      	ldr	r2, [pc, #16]	; (80081c4 <prvSwitchTimerLists+0xc4>)
 80081b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80081b6:	4a04      	ldr	r2, [pc, #16]	; (80081c8 <prvSwitchTimerLists+0xc8>)
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	6013      	str	r3, [r2, #0]
}
 80081bc:	bf00      	nop
 80081be:	3718      	adds	r7, #24
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	20003c5c 	.word	0x20003c5c
 80081c8:	20003c60 	.word	0x20003c60

080081cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80081d2:	f000 f94b 	bl	800846c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80081d6:	4b15      	ldr	r3, [pc, #84]	; (800822c <prvCheckForValidListAndQueue+0x60>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d120      	bne.n	8008220 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80081de:	4814      	ldr	r0, [pc, #80]	; (8008230 <prvCheckForValidListAndQueue+0x64>)
 80081e0:	f7fe f805 	bl	80061ee <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80081e4:	4813      	ldr	r0, [pc, #76]	; (8008234 <prvCheckForValidListAndQueue+0x68>)
 80081e6:	f7fe f802 	bl	80061ee <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80081ea:	4b13      	ldr	r3, [pc, #76]	; (8008238 <prvCheckForValidListAndQueue+0x6c>)
 80081ec:	4a10      	ldr	r2, [pc, #64]	; (8008230 <prvCheckForValidListAndQueue+0x64>)
 80081ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80081f0:	4b12      	ldr	r3, [pc, #72]	; (800823c <prvCheckForValidListAndQueue+0x70>)
 80081f2:	4a10      	ldr	r2, [pc, #64]	; (8008234 <prvCheckForValidListAndQueue+0x68>)
 80081f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80081f6:	2300      	movs	r3, #0
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	4b11      	ldr	r3, [pc, #68]	; (8008240 <prvCheckForValidListAndQueue+0x74>)
 80081fc:	4a11      	ldr	r2, [pc, #68]	; (8008244 <prvCheckForValidListAndQueue+0x78>)
 80081fe:	210c      	movs	r1, #12
 8008200:	200a      	movs	r0, #10
 8008202:	f7fe f913 	bl	800642c <xQueueGenericCreateStatic>
 8008206:	4603      	mov	r3, r0
 8008208:	4a08      	ldr	r2, [pc, #32]	; (800822c <prvCheckForValidListAndQueue+0x60>)
 800820a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800820c:	4b07      	ldr	r3, [pc, #28]	; (800822c <prvCheckForValidListAndQueue+0x60>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d005      	beq.n	8008220 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008214:	4b05      	ldr	r3, [pc, #20]	; (800822c <prvCheckForValidListAndQueue+0x60>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	490b      	ldr	r1, [pc, #44]	; (8008248 <prvCheckForValidListAndQueue+0x7c>)
 800821a:	4618      	mov	r0, r3
 800821c:	f7fe fd44 	bl	8006ca8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008220:	f000 f958 	bl	80084d4 <vPortExitCritical>
}
 8008224:	bf00      	nop
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	20003c64 	.word	0x20003c64
 8008230:	20003c34 	.word	0x20003c34
 8008234:	20003c48 	.word	0x20003c48
 8008238:	20003c5c 	.word	0x20003c5c
 800823c:	20003c60 	.word	0x20003c60
 8008240:	20003ce8 	.word	0x20003ce8
 8008244:	20003c70 	.word	0x20003c70
 8008248:	08009b70 	.word	0x08009b70

0800824c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	3b04      	subs	r3, #4
 800825c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008264:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	3b04      	subs	r3, #4
 800826a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	f023 0201 	bic.w	r2, r3, #1
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	3b04      	subs	r3, #4
 800827a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800827c:	4a0c      	ldr	r2, [pc, #48]	; (80082b0 <pxPortInitialiseStack+0x64>)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	3b14      	subs	r3, #20
 8008286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3b04      	subs	r3, #4
 8008292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f06f 0202 	mvn.w	r2, #2
 800829a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	3b20      	subs	r3, #32
 80082a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80082a2:	68fb      	ldr	r3, [r7, #12]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr
 80082b0:	080082b5 	.word	0x080082b5

080082b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80082ba:	2300      	movs	r3, #0
 80082bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80082be:	4b14      	ldr	r3, [pc, #80]	; (8008310 <prvTaskExitError+0x5c>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c6:	d00c      	beq.n	80082e2 <prvTaskExitError+0x2e>
	__asm volatile
 80082c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082cc:	b672      	cpsid	i
 80082ce:	f383 8811 	msr	BASEPRI, r3
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	b662      	cpsie	i
 80082dc:	60fb      	str	r3, [r7, #12]
}
 80082de:	bf00      	nop
 80082e0:	e7fe      	b.n	80082e0 <prvTaskExitError+0x2c>
	__asm volatile
 80082e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e6:	b672      	cpsid	i
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	b662      	cpsie	i
 80082f6:	60bb      	str	r3, [r7, #8]
}
 80082f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80082fa:	bf00      	nop
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d0fc      	beq.n	80082fc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008302:	bf00      	nop
 8008304:	bf00      	nop
 8008306:	3714      	adds	r7, #20
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	2000000c 	.word	0x2000000c
	...

08008320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008320:	4b07      	ldr	r3, [pc, #28]	; (8008340 <pxCurrentTCBConst2>)
 8008322:	6819      	ldr	r1, [r3, #0]
 8008324:	6808      	ldr	r0, [r1, #0]
 8008326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800832a:	f380 8809 	msr	PSP, r0
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f04f 0000 	mov.w	r0, #0
 8008336:	f380 8811 	msr	BASEPRI, r0
 800833a:	4770      	bx	lr
 800833c:	f3af 8000 	nop.w

08008340 <pxCurrentTCBConst2>:
 8008340:	20003b08 	.word	0x20003b08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008344:	bf00      	nop
 8008346:	bf00      	nop

08008348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008348:	4808      	ldr	r0, [pc, #32]	; (800836c <prvPortStartFirstTask+0x24>)
 800834a:	6800      	ldr	r0, [r0, #0]
 800834c:	6800      	ldr	r0, [r0, #0]
 800834e:	f380 8808 	msr	MSP, r0
 8008352:	f04f 0000 	mov.w	r0, #0
 8008356:	f380 8814 	msr	CONTROL, r0
 800835a:	b662      	cpsie	i
 800835c:	b661      	cpsie	f
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	df00      	svc	0
 8008368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800836a:	bf00      	nop
 800836c:	e000ed08 	.word	0xe000ed08

08008370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008376:	4b37      	ldr	r3, [pc, #220]	; (8008454 <xPortStartScheduler+0xe4>)
 8008378:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	b2db      	uxtb	r3, r3
 8008380:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	22ff      	movs	r2, #255	; 0xff
 8008386:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	b2db      	uxtb	r3, r3
 800838e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008390:	78fb      	ldrb	r3, [r7, #3]
 8008392:	b2db      	uxtb	r3, r3
 8008394:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008398:	b2da      	uxtb	r2, r3
 800839a:	4b2f      	ldr	r3, [pc, #188]	; (8008458 <xPortStartScheduler+0xe8>)
 800839c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800839e:	4b2f      	ldr	r3, [pc, #188]	; (800845c <xPortStartScheduler+0xec>)
 80083a0:	2207      	movs	r2, #7
 80083a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083a4:	e009      	b.n	80083ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80083a6:	4b2d      	ldr	r3, [pc, #180]	; (800845c <xPortStartScheduler+0xec>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	3b01      	subs	r3, #1
 80083ac:	4a2b      	ldr	r2, [pc, #172]	; (800845c <xPortStartScheduler+0xec>)
 80083ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80083b0:	78fb      	ldrb	r3, [r7, #3]
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	005b      	lsls	r3, r3, #1
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083ba:	78fb      	ldrb	r3, [r7, #3]
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c2:	2b80      	cmp	r3, #128	; 0x80
 80083c4:	d0ef      	beq.n	80083a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80083c6:	4b25      	ldr	r3, [pc, #148]	; (800845c <xPortStartScheduler+0xec>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f1c3 0307 	rsb	r3, r3, #7
 80083ce:	2b04      	cmp	r3, #4
 80083d0:	d00c      	beq.n	80083ec <xPortStartScheduler+0x7c>
	__asm volatile
 80083d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d6:	b672      	cpsid	i
 80083d8:	f383 8811 	msr	BASEPRI, r3
 80083dc:	f3bf 8f6f 	isb	sy
 80083e0:	f3bf 8f4f 	dsb	sy
 80083e4:	b662      	cpsie	i
 80083e6:	60bb      	str	r3, [r7, #8]
}
 80083e8:	bf00      	nop
 80083ea:	e7fe      	b.n	80083ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80083ec:	4b1b      	ldr	r3, [pc, #108]	; (800845c <xPortStartScheduler+0xec>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	021b      	lsls	r3, r3, #8
 80083f2:	4a1a      	ldr	r2, [pc, #104]	; (800845c <xPortStartScheduler+0xec>)
 80083f4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80083f6:	4b19      	ldr	r3, [pc, #100]	; (800845c <xPortStartScheduler+0xec>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80083fe:	4a17      	ldr	r2, [pc, #92]	; (800845c <xPortStartScheduler+0xec>)
 8008400:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	b2da      	uxtb	r2, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800840a:	4b15      	ldr	r3, [pc, #84]	; (8008460 <xPortStartScheduler+0xf0>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a14      	ldr	r2, [pc, #80]	; (8008460 <xPortStartScheduler+0xf0>)
 8008410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008414:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008416:	4b12      	ldr	r3, [pc, #72]	; (8008460 <xPortStartScheduler+0xf0>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a11      	ldr	r2, [pc, #68]	; (8008460 <xPortStartScheduler+0xf0>)
 800841c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008420:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008422:	f000 f8dd 	bl	80085e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008426:	4b0f      	ldr	r3, [pc, #60]	; (8008464 <xPortStartScheduler+0xf4>)
 8008428:	2200      	movs	r2, #0
 800842a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800842c:	f000 f8fc 	bl	8008628 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008430:	4b0d      	ldr	r3, [pc, #52]	; (8008468 <xPortStartScheduler+0xf8>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a0c      	ldr	r2, [pc, #48]	; (8008468 <xPortStartScheduler+0xf8>)
 8008436:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800843a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800843c:	f7ff ff84 	bl	8008348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008440:	f7ff f842 	bl	80074c8 <vTaskSwitchContext>
	prvTaskExitError();
 8008444:	f7ff ff36 	bl	80082b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	e000e400 	.word	0xe000e400
 8008458:	20003d30 	.word	0x20003d30
 800845c:	20003d34 	.word	0x20003d34
 8008460:	e000ed20 	.word	0xe000ed20
 8008464:	2000000c 	.word	0x2000000c
 8008468:	e000ef34 	.word	0xe000ef34

0800846c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
	__asm volatile
 8008472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008476:	b672      	cpsid	i
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	b662      	cpsie	i
 8008486:	607b      	str	r3, [r7, #4]
}
 8008488:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800848a:	4b10      	ldr	r3, [pc, #64]	; (80084cc <vPortEnterCritical+0x60>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	3301      	adds	r3, #1
 8008490:	4a0e      	ldr	r2, [pc, #56]	; (80084cc <vPortEnterCritical+0x60>)
 8008492:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008494:	4b0d      	ldr	r3, [pc, #52]	; (80084cc <vPortEnterCritical+0x60>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2b01      	cmp	r3, #1
 800849a:	d111      	bne.n	80084c0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800849c:	4b0c      	ldr	r3, [pc, #48]	; (80084d0 <vPortEnterCritical+0x64>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00c      	beq.n	80084c0 <vPortEnterCritical+0x54>
	__asm volatile
 80084a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084aa:	b672      	cpsid	i
 80084ac:	f383 8811 	msr	BASEPRI, r3
 80084b0:	f3bf 8f6f 	isb	sy
 80084b4:	f3bf 8f4f 	dsb	sy
 80084b8:	b662      	cpsie	i
 80084ba:	603b      	str	r3, [r7, #0]
}
 80084bc:	bf00      	nop
 80084be:	e7fe      	b.n	80084be <vPortEnterCritical+0x52>
	}
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	2000000c 	.word	0x2000000c
 80084d0:	e000ed04 	.word	0xe000ed04

080084d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80084da:	4b13      	ldr	r3, [pc, #76]	; (8008528 <vPortExitCritical+0x54>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10c      	bne.n	80084fc <vPortExitCritical+0x28>
	__asm volatile
 80084e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e6:	b672      	cpsid	i
 80084e8:	f383 8811 	msr	BASEPRI, r3
 80084ec:	f3bf 8f6f 	isb	sy
 80084f0:	f3bf 8f4f 	dsb	sy
 80084f4:	b662      	cpsie	i
 80084f6:	607b      	str	r3, [r7, #4]
}
 80084f8:	bf00      	nop
 80084fa:	e7fe      	b.n	80084fa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80084fc:	4b0a      	ldr	r3, [pc, #40]	; (8008528 <vPortExitCritical+0x54>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	3b01      	subs	r3, #1
 8008502:	4a09      	ldr	r2, [pc, #36]	; (8008528 <vPortExitCritical+0x54>)
 8008504:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008506:	4b08      	ldr	r3, [pc, #32]	; (8008528 <vPortExitCritical+0x54>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d105      	bne.n	800851a <vPortExitCritical+0x46>
 800850e:	2300      	movs	r3, #0
 8008510:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	f383 8811 	msr	BASEPRI, r3
}
 8008518:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800851a:	bf00      	nop
 800851c:	370c      	adds	r7, #12
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	2000000c 	.word	0x2000000c
 800852c:	00000000 	.word	0x00000000

08008530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008530:	f3ef 8009 	mrs	r0, PSP
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	4b15      	ldr	r3, [pc, #84]	; (8008590 <pxCurrentTCBConst>)
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	f01e 0f10 	tst.w	lr, #16
 8008540:	bf08      	it	eq
 8008542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854a:	6010      	str	r0, [r2, #0]
 800854c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008550:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008554:	b672      	cpsid	i
 8008556:	f380 8811 	msr	BASEPRI, r0
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	b662      	cpsie	i
 8008564:	f7fe ffb0 	bl	80074c8 <vTaskSwitchContext>
 8008568:	f04f 0000 	mov.w	r0, #0
 800856c:	f380 8811 	msr	BASEPRI, r0
 8008570:	bc09      	pop	{r0, r3}
 8008572:	6819      	ldr	r1, [r3, #0]
 8008574:	6808      	ldr	r0, [r1, #0]
 8008576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857a:	f01e 0f10 	tst.w	lr, #16
 800857e:	bf08      	it	eq
 8008580:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008584:	f380 8809 	msr	PSP, r0
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop

08008590 <pxCurrentTCBConst>:
 8008590:	20003b08 	.word	0x20003b08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008594:	bf00      	nop
 8008596:	bf00      	nop

08008598 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
	__asm volatile
 800859e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a2:	b672      	cpsid	i
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	b662      	cpsie	i
 80085b2:	607b      	str	r3, [r7, #4]
}
 80085b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80085b6:	f7fe fecd 	bl	8007354 <xTaskIncrementTick>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d003      	beq.n	80085c8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80085c0:	4b06      	ldr	r3, [pc, #24]	; (80085dc <xPortSysTickHandler+0x44>)
 80085c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085c6:	601a      	str	r2, [r3, #0]
 80085c8:	2300      	movs	r3, #0
 80085ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	f383 8811 	msr	BASEPRI, r3
}
 80085d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80085d4:	bf00      	nop
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	e000ed04 	.word	0xe000ed04

080085e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80085e0:	b480      	push	{r7}
 80085e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80085e4:	4b0b      	ldr	r3, [pc, #44]	; (8008614 <vPortSetupTimerInterrupt+0x34>)
 80085e6:	2200      	movs	r2, #0
 80085e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80085ea:	4b0b      	ldr	r3, [pc, #44]	; (8008618 <vPortSetupTimerInterrupt+0x38>)
 80085ec:	2200      	movs	r2, #0
 80085ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80085f0:	4b0a      	ldr	r3, [pc, #40]	; (800861c <vPortSetupTimerInterrupt+0x3c>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a0a      	ldr	r2, [pc, #40]	; (8008620 <vPortSetupTimerInterrupt+0x40>)
 80085f6:	fba2 2303 	umull	r2, r3, r2, r3
 80085fa:	099b      	lsrs	r3, r3, #6
 80085fc:	4a09      	ldr	r2, [pc, #36]	; (8008624 <vPortSetupTimerInterrupt+0x44>)
 80085fe:	3b01      	subs	r3, #1
 8008600:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008602:	4b04      	ldr	r3, [pc, #16]	; (8008614 <vPortSetupTimerInterrupt+0x34>)
 8008604:	2207      	movs	r2, #7
 8008606:	601a      	str	r2, [r3, #0]
}
 8008608:	bf00      	nop
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	e000e010 	.word	0xe000e010
 8008618:	e000e018 	.word	0xe000e018
 800861c:	20000000 	.word	0x20000000
 8008620:	10624dd3 	.word	0x10624dd3
 8008624:	e000e014 	.word	0xe000e014

08008628 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008628:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008638 <vPortEnableVFP+0x10>
 800862c:	6801      	ldr	r1, [r0, #0]
 800862e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008632:	6001      	str	r1, [r0, #0]
 8008634:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008636:	bf00      	nop
 8008638:	e000ed88 	.word	0xe000ed88

0800863c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800863c:	b480      	push	{r7}
 800863e:	b085      	sub	sp, #20
 8008640:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008642:	f3ef 8305 	mrs	r3, IPSR
 8008646:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2b0f      	cmp	r3, #15
 800864c:	d916      	bls.n	800867c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800864e:	4a19      	ldr	r2, [pc, #100]	; (80086b4 <vPortValidateInterruptPriority+0x78>)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	4413      	add	r3, r2
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008658:	4b17      	ldr	r3, [pc, #92]	; (80086b8 <vPortValidateInterruptPriority+0x7c>)
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	7afa      	ldrb	r2, [r7, #11]
 800865e:	429a      	cmp	r2, r3
 8008660:	d20c      	bcs.n	800867c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008666:	b672      	cpsid	i
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	b662      	cpsie	i
 8008676:	607b      	str	r3, [r7, #4]
}
 8008678:	bf00      	nop
 800867a:	e7fe      	b.n	800867a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800867c:	4b0f      	ldr	r3, [pc, #60]	; (80086bc <vPortValidateInterruptPriority+0x80>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008684:	4b0e      	ldr	r3, [pc, #56]	; (80086c0 <vPortValidateInterruptPriority+0x84>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	429a      	cmp	r2, r3
 800868a:	d90c      	bls.n	80086a6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800868c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008690:	b672      	cpsid	i
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	b662      	cpsie	i
 80086a0:	603b      	str	r3, [r7, #0]
}
 80086a2:	bf00      	nop
 80086a4:	e7fe      	b.n	80086a4 <vPortValidateInterruptPriority+0x68>
	}
 80086a6:	bf00      	nop
 80086a8:	3714      	adds	r7, #20
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	e000e3f0 	.word	0xe000e3f0
 80086b8:	20003d30 	.word	0x20003d30
 80086bc:	e000ed0c 	.word	0xe000ed0c
 80086c0:	20003d34 	.word	0x20003d34

080086c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b08a      	sub	sp, #40	; 0x28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80086cc:	2300      	movs	r3, #0
 80086ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80086d0:	f7fe fd84 	bl	80071dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80086d4:	4b5b      	ldr	r3, [pc, #364]	; (8008844 <pvPortMalloc+0x180>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d101      	bne.n	80086e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80086dc:	f000 f91a 	bl	8008914 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80086e0:	4b59      	ldr	r3, [pc, #356]	; (8008848 <pvPortMalloc+0x184>)
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4013      	ands	r3, r2
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f040 8092 	bne.w	8008812 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d01f      	beq.n	8008734 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80086f4:	2208      	movs	r2, #8
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4413      	add	r3, r2
 80086fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f003 0307 	and.w	r3, r3, #7
 8008702:	2b00      	cmp	r3, #0
 8008704:	d016      	beq.n	8008734 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f023 0307 	bic.w	r3, r3, #7
 800870c:	3308      	adds	r3, #8
 800870e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f003 0307 	and.w	r3, r3, #7
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00c      	beq.n	8008734 <pvPortMalloc+0x70>
	__asm volatile
 800871a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871e:	b672      	cpsid	i
 8008720:	f383 8811 	msr	BASEPRI, r3
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	b662      	cpsie	i
 800872e:	617b      	str	r3, [r7, #20]
}
 8008730:	bf00      	nop
 8008732:	e7fe      	b.n	8008732 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d06b      	beq.n	8008812 <pvPortMalloc+0x14e>
 800873a:	4b44      	ldr	r3, [pc, #272]	; (800884c <pvPortMalloc+0x188>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	429a      	cmp	r2, r3
 8008742:	d866      	bhi.n	8008812 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008744:	4b42      	ldr	r3, [pc, #264]	; (8008850 <pvPortMalloc+0x18c>)
 8008746:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008748:	4b41      	ldr	r3, [pc, #260]	; (8008850 <pvPortMalloc+0x18c>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800874e:	e004      	b.n	800875a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008752:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800875a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	429a      	cmp	r2, r3
 8008762:	d903      	bls.n	800876c <pvPortMalloc+0xa8>
 8008764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1f1      	bne.n	8008750 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800876c:	4b35      	ldr	r3, [pc, #212]	; (8008844 <pvPortMalloc+0x180>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008772:	429a      	cmp	r2, r3
 8008774:	d04d      	beq.n	8008812 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008776:	6a3b      	ldr	r3, [r7, #32]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2208      	movs	r2, #8
 800877c:	4413      	add	r3, r2
 800877e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	6a3b      	ldr	r3, [r7, #32]
 8008786:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878a:	685a      	ldr	r2, [r3, #4]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	1ad2      	subs	r2, r2, r3
 8008790:	2308      	movs	r3, #8
 8008792:	005b      	lsls	r3, r3, #1
 8008794:	429a      	cmp	r2, r3
 8008796:	d921      	bls.n	80087dc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4413      	add	r3, r2
 800879e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	f003 0307 	and.w	r3, r3, #7
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00c      	beq.n	80087c4 <pvPortMalloc+0x100>
	__asm volatile
 80087aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ae:	b672      	cpsid	i
 80087b0:	f383 8811 	msr	BASEPRI, r3
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	b662      	cpsie	i
 80087be:	613b      	str	r3, [r7, #16]
}
 80087c0:	bf00      	nop
 80087c2:	e7fe      	b.n	80087c2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80087c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	1ad2      	subs	r2, r2, r3
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80087d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80087d6:	69b8      	ldr	r0, [r7, #24]
 80087d8:	f000 f8fe 	bl	80089d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80087dc:	4b1b      	ldr	r3, [pc, #108]	; (800884c <pvPortMalloc+0x188>)
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	4a19      	ldr	r2, [pc, #100]	; (800884c <pvPortMalloc+0x188>)
 80087e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80087ea:	4b18      	ldr	r3, [pc, #96]	; (800884c <pvPortMalloc+0x188>)
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	4b19      	ldr	r3, [pc, #100]	; (8008854 <pvPortMalloc+0x190>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d203      	bcs.n	80087fe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80087f6:	4b15      	ldr	r3, [pc, #84]	; (800884c <pvPortMalloc+0x188>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a16      	ldr	r2, [pc, #88]	; (8008854 <pvPortMalloc+0x190>)
 80087fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008800:	685a      	ldr	r2, [r3, #4]
 8008802:	4b11      	ldr	r3, [pc, #68]	; (8008848 <pvPortMalloc+0x184>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	431a      	orrs	r2, r3
 8008808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800880c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880e:	2200      	movs	r2, #0
 8008810:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008812:	f7fe fcf1 	bl	80071f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	f003 0307 	and.w	r3, r3, #7
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00c      	beq.n	800883a <pvPortMalloc+0x176>
	__asm volatile
 8008820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008824:	b672      	cpsid	i
 8008826:	f383 8811 	msr	BASEPRI, r3
 800882a:	f3bf 8f6f 	isb	sy
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	b662      	cpsie	i
 8008834:	60fb      	str	r3, [r7, #12]
}
 8008836:	bf00      	nop
 8008838:	e7fe      	b.n	8008838 <pvPortMalloc+0x174>
	return pvReturn;
 800883a:	69fb      	ldr	r3, [r7, #28]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3728      	adds	r7, #40	; 0x28
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	20007940 	.word	0x20007940
 8008848:	2000794c 	.word	0x2000794c
 800884c:	20007944 	.word	0x20007944
 8008850:	20007938 	.word	0x20007938
 8008854:	20007948 	.word	0x20007948

08008858 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d04c      	beq.n	8008904 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800886a:	2308      	movs	r3, #8
 800886c:	425b      	negs	r3, r3
 800886e:	697a      	ldr	r2, [r7, #20]
 8008870:	4413      	add	r3, r2
 8008872:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	685a      	ldr	r2, [r3, #4]
 800887c:	4b23      	ldr	r3, [pc, #140]	; (800890c <vPortFree+0xb4>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4013      	ands	r3, r2
 8008882:	2b00      	cmp	r3, #0
 8008884:	d10c      	bne.n	80088a0 <vPortFree+0x48>
	__asm volatile
 8008886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888a:	b672      	cpsid	i
 800888c:	f383 8811 	msr	BASEPRI, r3
 8008890:	f3bf 8f6f 	isb	sy
 8008894:	f3bf 8f4f 	dsb	sy
 8008898:	b662      	cpsie	i
 800889a:	60fb      	str	r3, [r7, #12]
}
 800889c:	bf00      	nop
 800889e:	e7fe      	b.n	800889e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00c      	beq.n	80088c2 <vPortFree+0x6a>
	__asm volatile
 80088a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ac:	b672      	cpsid	i
 80088ae:	f383 8811 	msr	BASEPRI, r3
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	f3bf 8f4f 	dsb	sy
 80088ba:	b662      	cpsie	i
 80088bc:	60bb      	str	r3, [r7, #8]
}
 80088be:	bf00      	nop
 80088c0:	e7fe      	b.n	80088c0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	685a      	ldr	r2, [r3, #4]
 80088c6:	4b11      	ldr	r3, [pc, #68]	; (800890c <vPortFree+0xb4>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4013      	ands	r3, r2
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d019      	beq.n	8008904 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d115      	bne.n	8008904 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	685a      	ldr	r2, [r3, #4]
 80088dc:	4b0b      	ldr	r3, [pc, #44]	; (800890c <vPortFree+0xb4>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	43db      	mvns	r3, r3
 80088e2:	401a      	ands	r2, r3
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80088e8:	f7fe fc78 	bl	80071dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	685a      	ldr	r2, [r3, #4]
 80088f0:	4b07      	ldr	r3, [pc, #28]	; (8008910 <vPortFree+0xb8>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4413      	add	r3, r2
 80088f6:	4a06      	ldr	r2, [pc, #24]	; (8008910 <vPortFree+0xb8>)
 80088f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80088fa:	6938      	ldr	r0, [r7, #16]
 80088fc:	f000 f86c 	bl	80089d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008900:	f7fe fc7a 	bl	80071f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008904:	bf00      	nop
 8008906:	3718      	adds	r7, #24
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	2000794c 	.word	0x2000794c
 8008910:	20007944 	.word	0x20007944

08008914 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800891a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800891e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008920:	4b27      	ldr	r3, [pc, #156]	; (80089c0 <prvHeapInit+0xac>)
 8008922:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f003 0307 	and.w	r3, r3, #7
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00c      	beq.n	8008948 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	3307      	adds	r3, #7
 8008932:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f023 0307 	bic.w	r3, r3, #7
 800893a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	4a1f      	ldr	r2, [pc, #124]	; (80089c0 <prvHeapInit+0xac>)
 8008944:	4413      	add	r3, r2
 8008946:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800894c:	4a1d      	ldr	r2, [pc, #116]	; (80089c4 <prvHeapInit+0xb0>)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008952:	4b1c      	ldr	r3, [pc, #112]	; (80089c4 <prvHeapInit+0xb0>)
 8008954:	2200      	movs	r2, #0
 8008956:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	68ba      	ldr	r2, [r7, #8]
 800895c:	4413      	add	r3, r2
 800895e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008960:	2208      	movs	r2, #8
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	1a9b      	subs	r3, r3, r2
 8008966:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f023 0307 	bic.w	r3, r3, #7
 800896e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	4a15      	ldr	r2, [pc, #84]	; (80089c8 <prvHeapInit+0xb4>)
 8008974:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008976:	4b14      	ldr	r3, [pc, #80]	; (80089c8 <prvHeapInit+0xb4>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2200      	movs	r2, #0
 800897c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800897e:	4b12      	ldr	r3, [pc, #72]	; (80089c8 <prvHeapInit+0xb4>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2200      	movs	r2, #0
 8008984:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	1ad2      	subs	r2, r2, r3
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008994:	4b0c      	ldr	r3, [pc, #48]	; (80089c8 <prvHeapInit+0xb4>)
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	4a0a      	ldr	r2, [pc, #40]	; (80089cc <prvHeapInit+0xb8>)
 80089a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	4a09      	ldr	r2, [pc, #36]	; (80089d0 <prvHeapInit+0xbc>)
 80089aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80089ac:	4b09      	ldr	r3, [pc, #36]	; (80089d4 <prvHeapInit+0xc0>)
 80089ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80089b2:	601a      	str	r2, [r3, #0]
}
 80089b4:	bf00      	nop
 80089b6:	3714      	adds	r7, #20
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr
 80089c0:	20003d38 	.word	0x20003d38
 80089c4:	20007938 	.word	0x20007938
 80089c8:	20007940 	.word	0x20007940
 80089cc:	20007948 	.word	0x20007948
 80089d0:	20007944 	.word	0x20007944
 80089d4:	2000794c 	.word	0x2000794c

080089d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80089e0:	4b28      	ldr	r3, [pc, #160]	; (8008a84 <prvInsertBlockIntoFreeList+0xac>)
 80089e2:	60fb      	str	r3, [r7, #12]
 80089e4:	e002      	b.n	80089ec <prvInsertBlockIntoFreeList+0x14>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	60fb      	str	r3, [r7, #12]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d8f7      	bhi.n	80089e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	4413      	add	r3, r2
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d108      	bne.n	8008a1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	685a      	ldr	r2, [r3, #4]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	441a      	add	r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	68ba      	ldr	r2, [r7, #8]
 8008a24:	441a      	add	r2, r3
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d118      	bne.n	8008a60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	4b15      	ldr	r3, [pc, #84]	; (8008a88 <prvInsertBlockIntoFreeList+0xb0>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d00d      	beq.n	8008a56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	685a      	ldr	r2, [r3, #4]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	441a      	add	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	601a      	str	r2, [r3, #0]
 8008a54:	e008      	b.n	8008a68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a56:	4b0c      	ldr	r3, [pc, #48]	; (8008a88 <prvInsertBlockIntoFreeList+0xb0>)
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	601a      	str	r2, [r3, #0]
 8008a5e:	e003      	b.n	8008a68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d002      	beq.n	8008a76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a76:	bf00      	nop
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	20007938 	.word	0x20007938
 8008a88:	20007940 	.word	0x20007940

08008a8c <__errno>:
 8008a8c:	4b01      	ldr	r3, [pc, #4]	; (8008a94 <__errno+0x8>)
 8008a8e:	6818      	ldr	r0, [r3, #0]
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	20000010 	.word	0x20000010

08008a98 <__libc_init_array>:
 8008a98:	b570      	push	{r4, r5, r6, lr}
 8008a9a:	4d0d      	ldr	r5, [pc, #52]	; (8008ad0 <__libc_init_array+0x38>)
 8008a9c:	4c0d      	ldr	r4, [pc, #52]	; (8008ad4 <__libc_init_array+0x3c>)
 8008a9e:	1b64      	subs	r4, r4, r5
 8008aa0:	10a4      	asrs	r4, r4, #2
 8008aa2:	2600      	movs	r6, #0
 8008aa4:	42a6      	cmp	r6, r4
 8008aa6:	d109      	bne.n	8008abc <__libc_init_array+0x24>
 8008aa8:	4d0b      	ldr	r5, [pc, #44]	; (8008ad8 <__libc_init_array+0x40>)
 8008aaa:	4c0c      	ldr	r4, [pc, #48]	; (8008adc <__libc_init_array+0x44>)
 8008aac:	f000 ffbc 	bl	8009a28 <_init>
 8008ab0:	1b64      	subs	r4, r4, r5
 8008ab2:	10a4      	asrs	r4, r4, #2
 8008ab4:	2600      	movs	r6, #0
 8008ab6:	42a6      	cmp	r6, r4
 8008ab8:	d105      	bne.n	8008ac6 <__libc_init_array+0x2e>
 8008aba:	bd70      	pop	{r4, r5, r6, pc}
 8008abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ac0:	4798      	blx	r3
 8008ac2:	3601      	adds	r6, #1
 8008ac4:	e7ee      	b.n	8008aa4 <__libc_init_array+0xc>
 8008ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aca:	4798      	blx	r3
 8008acc:	3601      	adds	r6, #1
 8008ace:	e7f2      	b.n	8008ab6 <__libc_init_array+0x1e>
 8008ad0:	08009c38 	.word	0x08009c38
 8008ad4:	08009c38 	.word	0x08009c38
 8008ad8:	08009c38 	.word	0x08009c38
 8008adc:	08009c3c 	.word	0x08009c3c

08008ae0 <memcpy>:
 8008ae0:	440a      	add	r2, r1
 8008ae2:	4291      	cmp	r1, r2
 8008ae4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ae8:	d100      	bne.n	8008aec <memcpy+0xc>
 8008aea:	4770      	bx	lr
 8008aec:	b510      	push	{r4, lr}
 8008aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008af2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008af6:	4291      	cmp	r1, r2
 8008af8:	d1f9      	bne.n	8008aee <memcpy+0xe>
 8008afa:	bd10      	pop	{r4, pc}

08008afc <memset>:
 8008afc:	4402      	add	r2, r0
 8008afe:	4603      	mov	r3, r0
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d100      	bne.n	8008b06 <memset+0xa>
 8008b04:	4770      	bx	lr
 8008b06:	f803 1b01 	strb.w	r1, [r3], #1
 8008b0a:	e7f9      	b.n	8008b00 <memset+0x4>

08008b0c <iprintf>:
 8008b0c:	b40f      	push	{r0, r1, r2, r3}
 8008b0e:	4b0a      	ldr	r3, [pc, #40]	; (8008b38 <iprintf+0x2c>)
 8008b10:	b513      	push	{r0, r1, r4, lr}
 8008b12:	681c      	ldr	r4, [r3, #0]
 8008b14:	b124      	cbz	r4, 8008b20 <iprintf+0x14>
 8008b16:	69a3      	ldr	r3, [r4, #24]
 8008b18:	b913      	cbnz	r3, 8008b20 <iprintf+0x14>
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f000 f9e8 	bl	8008ef0 <__sinit>
 8008b20:	ab05      	add	r3, sp, #20
 8008b22:	9a04      	ldr	r2, [sp, #16]
 8008b24:	68a1      	ldr	r1, [r4, #8]
 8008b26:	9301      	str	r3, [sp, #4]
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f000 fbf1 	bl	8009310 <_vfiprintf_r>
 8008b2e:	b002      	add	sp, #8
 8008b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b34:	b004      	add	sp, #16
 8008b36:	4770      	bx	lr
 8008b38:	20000010 	.word	0x20000010

08008b3c <__swbuf_r>:
 8008b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3e:	460e      	mov	r6, r1
 8008b40:	4614      	mov	r4, r2
 8008b42:	4605      	mov	r5, r0
 8008b44:	b118      	cbz	r0, 8008b4e <__swbuf_r+0x12>
 8008b46:	6983      	ldr	r3, [r0, #24]
 8008b48:	b90b      	cbnz	r3, 8008b4e <__swbuf_r+0x12>
 8008b4a:	f000 f9d1 	bl	8008ef0 <__sinit>
 8008b4e:	4b21      	ldr	r3, [pc, #132]	; (8008bd4 <__swbuf_r+0x98>)
 8008b50:	429c      	cmp	r4, r3
 8008b52:	d12b      	bne.n	8008bac <__swbuf_r+0x70>
 8008b54:	686c      	ldr	r4, [r5, #4]
 8008b56:	69a3      	ldr	r3, [r4, #24]
 8008b58:	60a3      	str	r3, [r4, #8]
 8008b5a:	89a3      	ldrh	r3, [r4, #12]
 8008b5c:	071a      	lsls	r2, r3, #28
 8008b5e:	d52f      	bpl.n	8008bc0 <__swbuf_r+0x84>
 8008b60:	6923      	ldr	r3, [r4, #16]
 8008b62:	b36b      	cbz	r3, 8008bc0 <__swbuf_r+0x84>
 8008b64:	6923      	ldr	r3, [r4, #16]
 8008b66:	6820      	ldr	r0, [r4, #0]
 8008b68:	1ac0      	subs	r0, r0, r3
 8008b6a:	6963      	ldr	r3, [r4, #20]
 8008b6c:	b2f6      	uxtb	r6, r6
 8008b6e:	4283      	cmp	r3, r0
 8008b70:	4637      	mov	r7, r6
 8008b72:	dc04      	bgt.n	8008b7e <__swbuf_r+0x42>
 8008b74:	4621      	mov	r1, r4
 8008b76:	4628      	mov	r0, r5
 8008b78:	f000 f926 	bl	8008dc8 <_fflush_r>
 8008b7c:	bb30      	cbnz	r0, 8008bcc <__swbuf_r+0x90>
 8008b7e:	68a3      	ldr	r3, [r4, #8]
 8008b80:	3b01      	subs	r3, #1
 8008b82:	60a3      	str	r3, [r4, #8]
 8008b84:	6823      	ldr	r3, [r4, #0]
 8008b86:	1c5a      	adds	r2, r3, #1
 8008b88:	6022      	str	r2, [r4, #0]
 8008b8a:	701e      	strb	r6, [r3, #0]
 8008b8c:	6963      	ldr	r3, [r4, #20]
 8008b8e:	3001      	adds	r0, #1
 8008b90:	4283      	cmp	r3, r0
 8008b92:	d004      	beq.n	8008b9e <__swbuf_r+0x62>
 8008b94:	89a3      	ldrh	r3, [r4, #12]
 8008b96:	07db      	lsls	r3, r3, #31
 8008b98:	d506      	bpl.n	8008ba8 <__swbuf_r+0x6c>
 8008b9a:	2e0a      	cmp	r6, #10
 8008b9c:	d104      	bne.n	8008ba8 <__swbuf_r+0x6c>
 8008b9e:	4621      	mov	r1, r4
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	f000 f911 	bl	8008dc8 <_fflush_r>
 8008ba6:	b988      	cbnz	r0, 8008bcc <__swbuf_r+0x90>
 8008ba8:	4638      	mov	r0, r7
 8008baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bac:	4b0a      	ldr	r3, [pc, #40]	; (8008bd8 <__swbuf_r+0x9c>)
 8008bae:	429c      	cmp	r4, r3
 8008bb0:	d101      	bne.n	8008bb6 <__swbuf_r+0x7a>
 8008bb2:	68ac      	ldr	r4, [r5, #8]
 8008bb4:	e7cf      	b.n	8008b56 <__swbuf_r+0x1a>
 8008bb6:	4b09      	ldr	r3, [pc, #36]	; (8008bdc <__swbuf_r+0xa0>)
 8008bb8:	429c      	cmp	r4, r3
 8008bba:	bf08      	it	eq
 8008bbc:	68ec      	ldreq	r4, [r5, #12]
 8008bbe:	e7ca      	b.n	8008b56 <__swbuf_r+0x1a>
 8008bc0:	4621      	mov	r1, r4
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	f000 f80c 	bl	8008be0 <__swsetup_r>
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	d0cb      	beq.n	8008b64 <__swbuf_r+0x28>
 8008bcc:	f04f 37ff 	mov.w	r7, #4294967295
 8008bd0:	e7ea      	b.n	8008ba8 <__swbuf_r+0x6c>
 8008bd2:	bf00      	nop
 8008bd4:	08009bbc 	.word	0x08009bbc
 8008bd8:	08009bdc 	.word	0x08009bdc
 8008bdc:	08009b9c 	.word	0x08009b9c

08008be0 <__swsetup_r>:
 8008be0:	4b32      	ldr	r3, [pc, #200]	; (8008cac <__swsetup_r+0xcc>)
 8008be2:	b570      	push	{r4, r5, r6, lr}
 8008be4:	681d      	ldr	r5, [r3, #0]
 8008be6:	4606      	mov	r6, r0
 8008be8:	460c      	mov	r4, r1
 8008bea:	b125      	cbz	r5, 8008bf6 <__swsetup_r+0x16>
 8008bec:	69ab      	ldr	r3, [r5, #24]
 8008bee:	b913      	cbnz	r3, 8008bf6 <__swsetup_r+0x16>
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	f000 f97d 	bl	8008ef0 <__sinit>
 8008bf6:	4b2e      	ldr	r3, [pc, #184]	; (8008cb0 <__swsetup_r+0xd0>)
 8008bf8:	429c      	cmp	r4, r3
 8008bfa:	d10f      	bne.n	8008c1c <__swsetup_r+0x3c>
 8008bfc:	686c      	ldr	r4, [r5, #4]
 8008bfe:	89a3      	ldrh	r3, [r4, #12]
 8008c00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c04:	0719      	lsls	r1, r3, #28
 8008c06:	d42c      	bmi.n	8008c62 <__swsetup_r+0x82>
 8008c08:	06dd      	lsls	r5, r3, #27
 8008c0a:	d411      	bmi.n	8008c30 <__swsetup_r+0x50>
 8008c0c:	2309      	movs	r3, #9
 8008c0e:	6033      	str	r3, [r6, #0]
 8008c10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c14:	81a3      	strh	r3, [r4, #12]
 8008c16:	f04f 30ff 	mov.w	r0, #4294967295
 8008c1a:	e03e      	b.n	8008c9a <__swsetup_r+0xba>
 8008c1c:	4b25      	ldr	r3, [pc, #148]	; (8008cb4 <__swsetup_r+0xd4>)
 8008c1e:	429c      	cmp	r4, r3
 8008c20:	d101      	bne.n	8008c26 <__swsetup_r+0x46>
 8008c22:	68ac      	ldr	r4, [r5, #8]
 8008c24:	e7eb      	b.n	8008bfe <__swsetup_r+0x1e>
 8008c26:	4b24      	ldr	r3, [pc, #144]	; (8008cb8 <__swsetup_r+0xd8>)
 8008c28:	429c      	cmp	r4, r3
 8008c2a:	bf08      	it	eq
 8008c2c:	68ec      	ldreq	r4, [r5, #12]
 8008c2e:	e7e6      	b.n	8008bfe <__swsetup_r+0x1e>
 8008c30:	0758      	lsls	r0, r3, #29
 8008c32:	d512      	bpl.n	8008c5a <__swsetup_r+0x7a>
 8008c34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c36:	b141      	cbz	r1, 8008c4a <__swsetup_r+0x6a>
 8008c38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c3c:	4299      	cmp	r1, r3
 8008c3e:	d002      	beq.n	8008c46 <__swsetup_r+0x66>
 8008c40:	4630      	mov	r0, r6
 8008c42:	f000 fa5b 	bl	80090fc <_free_r>
 8008c46:	2300      	movs	r3, #0
 8008c48:	6363      	str	r3, [r4, #52]	; 0x34
 8008c4a:	89a3      	ldrh	r3, [r4, #12]
 8008c4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c50:	81a3      	strh	r3, [r4, #12]
 8008c52:	2300      	movs	r3, #0
 8008c54:	6063      	str	r3, [r4, #4]
 8008c56:	6923      	ldr	r3, [r4, #16]
 8008c58:	6023      	str	r3, [r4, #0]
 8008c5a:	89a3      	ldrh	r3, [r4, #12]
 8008c5c:	f043 0308 	orr.w	r3, r3, #8
 8008c60:	81a3      	strh	r3, [r4, #12]
 8008c62:	6923      	ldr	r3, [r4, #16]
 8008c64:	b94b      	cbnz	r3, 8008c7a <__swsetup_r+0x9a>
 8008c66:	89a3      	ldrh	r3, [r4, #12]
 8008c68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c70:	d003      	beq.n	8008c7a <__swsetup_r+0x9a>
 8008c72:	4621      	mov	r1, r4
 8008c74:	4630      	mov	r0, r6
 8008c76:	f000 fa01 	bl	800907c <__smakebuf_r>
 8008c7a:	89a0      	ldrh	r0, [r4, #12]
 8008c7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c80:	f010 0301 	ands.w	r3, r0, #1
 8008c84:	d00a      	beq.n	8008c9c <__swsetup_r+0xbc>
 8008c86:	2300      	movs	r3, #0
 8008c88:	60a3      	str	r3, [r4, #8]
 8008c8a:	6963      	ldr	r3, [r4, #20]
 8008c8c:	425b      	negs	r3, r3
 8008c8e:	61a3      	str	r3, [r4, #24]
 8008c90:	6923      	ldr	r3, [r4, #16]
 8008c92:	b943      	cbnz	r3, 8008ca6 <__swsetup_r+0xc6>
 8008c94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c98:	d1ba      	bne.n	8008c10 <__swsetup_r+0x30>
 8008c9a:	bd70      	pop	{r4, r5, r6, pc}
 8008c9c:	0781      	lsls	r1, r0, #30
 8008c9e:	bf58      	it	pl
 8008ca0:	6963      	ldrpl	r3, [r4, #20]
 8008ca2:	60a3      	str	r3, [r4, #8]
 8008ca4:	e7f4      	b.n	8008c90 <__swsetup_r+0xb0>
 8008ca6:	2000      	movs	r0, #0
 8008ca8:	e7f7      	b.n	8008c9a <__swsetup_r+0xba>
 8008caa:	bf00      	nop
 8008cac:	20000010 	.word	0x20000010
 8008cb0:	08009bbc 	.word	0x08009bbc
 8008cb4:	08009bdc 	.word	0x08009bdc
 8008cb8:	08009b9c 	.word	0x08009b9c

08008cbc <__sflush_r>:
 8008cbc:	898a      	ldrh	r2, [r1, #12]
 8008cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc2:	4605      	mov	r5, r0
 8008cc4:	0710      	lsls	r0, r2, #28
 8008cc6:	460c      	mov	r4, r1
 8008cc8:	d458      	bmi.n	8008d7c <__sflush_r+0xc0>
 8008cca:	684b      	ldr	r3, [r1, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	dc05      	bgt.n	8008cdc <__sflush_r+0x20>
 8008cd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	dc02      	bgt.n	8008cdc <__sflush_r+0x20>
 8008cd6:	2000      	movs	r0, #0
 8008cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cde:	2e00      	cmp	r6, #0
 8008ce0:	d0f9      	beq.n	8008cd6 <__sflush_r+0x1a>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ce8:	682f      	ldr	r7, [r5, #0]
 8008cea:	602b      	str	r3, [r5, #0]
 8008cec:	d032      	beq.n	8008d54 <__sflush_r+0x98>
 8008cee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008cf0:	89a3      	ldrh	r3, [r4, #12]
 8008cf2:	075a      	lsls	r2, r3, #29
 8008cf4:	d505      	bpl.n	8008d02 <__sflush_r+0x46>
 8008cf6:	6863      	ldr	r3, [r4, #4]
 8008cf8:	1ac0      	subs	r0, r0, r3
 8008cfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cfc:	b10b      	cbz	r3, 8008d02 <__sflush_r+0x46>
 8008cfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d00:	1ac0      	subs	r0, r0, r3
 8008d02:	2300      	movs	r3, #0
 8008d04:	4602      	mov	r2, r0
 8008d06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d08:	6a21      	ldr	r1, [r4, #32]
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	47b0      	blx	r6
 8008d0e:	1c43      	adds	r3, r0, #1
 8008d10:	89a3      	ldrh	r3, [r4, #12]
 8008d12:	d106      	bne.n	8008d22 <__sflush_r+0x66>
 8008d14:	6829      	ldr	r1, [r5, #0]
 8008d16:	291d      	cmp	r1, #29
 8008d18:	d82c      	bhi.n	8008d74 <__sflush_r+0xb8>
 8008d1a:	4a2a      	ldr	r2, [pc, #168]	; (8008dc4 <__sflush_r+0x108>)
 8008d1c:	40ca      	lsrs	r2, r1
 8008d1e:	07d6      	lsls	r6, r2, #31
 8008d20:	d528      	bpl.n	8008d74 <__sflush_r+0xb8>
 8008d22:	2200      	movs	r2, #0
 8008d24:	6062      	str	r2, [r4, #4]
 8008d26:	04d9      	lsls	r1, r3, #19
 8008d28:	6922      	ldr	r2, [r4, #16]
 8008d2a:	6022      	str	r2, [r4, #0]
 8008d2c:	d504      	bpl.n	8008d38 <__sflush_r+0x7c>
 8008d2e:	1c42      	adds	r2, r0, #1
 8008d30:	d101      	bne.n	8008d36 <__sflush_r+0x7a>
 8008d32:	682b      	ldr	r3, [r5, #0]
 8008d34:	b903      	cbnz	r3, 8008d38 <__sflush_r+0x7c>
 8008d36:	6560      	str	r0, [r4, #84]	; 0x54
 8008d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d3a:	602f      	str	r7, [r5, #0]
 8008d3c:	2900      	cmp	r1, #0
 8008d3e:	d0ca      	beq.n	8008cd6 <__sflush_r+0x1a>
 8008d40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d44:	4299      	cmp	r1, r3
 8008d46:	d002      	beq.n	8008d4e <__sflush_r+0x92>
 8008d48:	4628      	mov	r0, r5
 8008d4a:	f000 f9d7 	bl	80090fc <_free_r>
 8008d4e:	2000      	movs	r0, #0
 8008d50:	6360      	str	r0, [r4, #52]	; 0x34
 8008d52:	e7c1      	b.n	8008cd8 <__sflush_r+0x1c>
 8008d54:	6a21      	ldr	r1, [r4, #32]
 8008d56:	2301      	movs	r3, #1
 8008d58:	4628      	mov	r0, r5
 8008d5a:	47b0      	blx	r6
 8008d5c:	1c41      	adds	r1, r0, #1
 8008d5e:	d1c7      	bne.n	8008cf0 <__sflush_r+0x34>
 8008d60:	682b      	ldr	r3, [r5, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d0c4      	beq.n	8008cf0 <__sflush_r+0x34>
 8008d66:	2b1d      	cmp	r3, #29
 8008d68:	d001      	beq.n	8008d6e <__sflush_r+0xb2>
 8008d6a:	2b16      	cmp	r3, #22
 8008d6c:	d101      	bne.n	8008d72 <__sflush_r+0xb6>
 8008d6e:	602f      	str	r7, [r5, #0]
 8008d70:	e7b1      	b.n	8008cd6 <__sflush_r+0x1a>
 8008d72:	89a3      	ldrh	r3, [r4, #12]
 8008d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d78:	81a3      	strh	r3, [r4, #12]
 8008d7a:	e7ad      	b.n	8008cd8 <__sflush_r+0x1c>
 8008d7c:	690f      	ldr	r7, [r1, #16]
 8008d7e:	2f00      	cmp	r7, #0
 8008d80:	d0a9      	beq.n	8008cd6 <__sflush_r+0x1a>
 8008d82:	0793      	lsls	r3, r2, #30
 8008d84:	680e      	ldr	r6, [r1, #0]
 8008d86:	bf08      	it	eq
 8008d88:	694b      	ldreq	r3, [r1, #20]
 8008d8a:	600f      	str	r7, [r1, #0]
 8008d8c:	bf18      	it	ne
 8008d8e:	2300      	movne	r3, #0
 8008d90:	eba6 0807 	sub.w	r8, r6, r7
 8008d94:	608b      	str	r3, [r1, #8]
 8008d96:	f1b8 0f00 	cmp.w	r8, #0
 8008d9a:	dd9c      	ble.n	8008cd6 <__sflush_r+0x1a>
 8008d9c:	6a21      	ldr	r1, [r4, #32]
 8008d9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008da0:	4643      	mov	r3, r8
 8008da2:	463a      	mov	r2, r7
 8008da4:	4628      	mov	r0, r5
 8008da6:	47b0      	blx	r6
 8008da8:	2800      	cmp	r0, #0
 8008daa:	dc06      	bgt.n	8008dba <__sflush_r+0xfe>
 8008dac:	89a3      	ldrh	r3, [r4, #12]
 8008dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008db2:	81a3      	strh	r3, [r4, #12]
 8008db4:	f04f 30ff 	mov.w	r0, #4294967295
 8008db8:	e78e      	b.n	8008cd8 <__sflush_r+0x1c>
 8008dba:	4407      	add	r7, r0
 8008dbc:	eba8 0800 	sub.w	r8, r8, r0
 8008dc0:	e7e9      	b.n	8008d96 <__sflush_r+0xda>
 8008dc2:	bf00      	nop
 8008dc4:	20400001 	.word	0x20400001

08008dc8 <_fflush_r>:
 8008dc8:	b538      	push	{r3, r4, r5, lr}
 8008dca:	690b      	ldr	r3, [r1, #16]
 8008dcc:	4605      	mov	r5, r0
 8008dce:	460c      	mov	r4, r1
 8008dd0:	b913      	cbnz	r3, 8008dd8 <_fflush_r+0x10>
 8008dd2:	2500      	movs	r5, #0
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	bd38      	pop	{r3, r4, r5, pc}
 8008dd8:	b118      	cbz	r0, 8008de2 <_fflush_r+0x1a>
 8008dda:	6983      	ldr	r3, [r0, #24]
 8008ddc:	b90b      	cbnz	r3, 8008de2 <_fflush_r+0x1a>
 8008dde:	f000 f887 	bl	8008ef0 <__sinit>
 8008de2:	4b14      	ldr	r3, [pc, #80]	; (8008e34 <_fflush_r+0x6c>)
 8008de4:	429c      	cmp	r4, r3
 8008de6:	d11b      	bne.n	8008e20 <_fflush_r+0x58>
 8008de8:	686c      	ldr	r4, [r5, #4]
 8008dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d0ef      	beq.n	8008dd2 <_fflush_r+0xa>
 8008df2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008df4:	07d0      	lsls	r0, r2, #31
 8008df6:	d404      	bmi.n	8008e02 <_fflush_r+0x3a>
 8008df8:	0599      	lsls	r1, r3, #22
 8008dfa:	d402      	bmi.n	8008e02 <_fflush_r+0x3a>
 8008dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dfe:	f000 f915 	bl	800902c <__retarget_lock_acquire_recursive>
 8008e02:	4628      	mov	r0, r5
 8008e04:	4621      	mov	r1, r4
 8008e06:	f7ff ff59 	bl	8008cbc <__sflush_r>
 8008e0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e0c:	07da      	lsls	r2, r3, #31
 8008e0e:	4605      	mov	r5, r0
 8008e10:	d4e0      	bmi.n	8008dd4 <_fflush_r+0xc>
 8008e12:	89a3      	ldrh	r3, [r4, #12]
 8008e14:	059b      	lsls	r3, r3, #22
 8008e16:	d4dd      	bmi.n	8008dd4 <_fflush_r+0xc>
 8008e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e1a:	f000 f908 	bl	800902e <__retarget_lock_release_recursive>
 8008e1e:	e7d9      	b.n	8008dd4 <_fflush_r+0xc>
 8008e20:	4b05      	ldr	r3, [pc, #20]	; (8008e38 <_fflush_r+0x70>)
 8008e22:	429c      	cmp	r4, r3
 8008e24:	d101      	bne.n	8008e2a <_fflush_r+0x62>
 8008e26:	68ac      	ldr	r4, [r5, #8]
 8008e28:	e7df      	b.n	8008dea <_fflush_r+0x22>
 8008e2a:	4b04      	ldr	r3, [pc, #16]	; (8008e3c <_fflush_r+0x74>)
 8008e2c:	429c      	cmp	r4, r3
 8008e2e:	bf08      	it	eq
 8008e30:	68ec      	ldreq	r4, [r5, #12]
 8008e32:	e7da      	b.n	8008dea <_fflush_r+0x22>
 8008e34:	08009bbc 	.word	0x08009bbc
 8008e38:	08009bdc 	.word	0x08009bdc
 8008e3c:	08009b9c 	.word	0x08009b9c

08008e40 <std>:
 8008e40:	2300      	movs	r3, #0
 8008e42:	b510      	push	{r4, lr}
 8008e44:	4604      	mov	r4, r0
 8008e46:	e9c0 3300 	strd	r3, r3, [r0]
 8008e4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e4e:	6083      	str	r3, [r0, #8]
 8008e50:	8181      	strh	r1, [r0, #12]
 8008e52:	6643      	str	r3, [r0, #100]	; 0x64
 8008e54:	81c2      	strh	r2, [r0, #14]
 8008e56:	6183      	str	r3, [r0, #24]
 8008e58:	4619      	mov	r1, r3
 8008e5a:	2208      	movs	r2, #8
 8008e5c:	305c      	adds	r0, #92	; 0x5c
 8008e5e:	f7ff fe4d 	bl	8008afc <memset>
 8008e62:	4b05      	ldr	r3, [pc, #20]	; (8008e78 <std+0x38>)
 8008e64:	6263      	str	r3, [r4, #36]	; 0x24
 8008e66:	4b05      	ldr	r3, [pc, #20]	; (8008e7c <std+0x3c>)
 8008e68:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e6a:	4b05      	ldr	r3, [pc, #20]	; (8008e80 <std+0x40>)
 8008e6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e6e:	4b05      	ldr	r3, [pc, #20]	; (8008e84 <std+0x44>)
 8008e70:	6224      	str	r4, [r4, #32]
 8008e72:	6323      	str	r3, [r4, #48]	; 0x30
 8008e74:	bd10      	pop	{r4, pc}
 8008e76:	bf00      	nop
 8008e78:	080098b9 	.word	0x080098b9
 8008e7c:	080098db 	.word	0x080098db
 8008e80:	08009913 	.word	0x08009913
 8008e84:	08009937 	.word	0x08009937

08008e88 <_cleanup_r>:
 8008e88:	4901      	ldr	r1, [pc, #4]	; (8008e90 <_cleanup_r+0x8>)
 8008e8a:	f000 b8af 	b.w	8008fec <_fwalk_reent>
 8008e8e:	bf00      	nop
 8008e90:	08008dc9 	.word	0x08008dc9

08008e94 <__sfmoreglue>:
 8008e94:	b570      	push	{r4, r5, r6, lr}
 8008e96:	2268      	movs	r2, #104	; 0x68
 8008e98:	1e4d      	subs	r5, r1, #1
 8008e9a:	4355      	muls	r5, r2
 8008e9c:	460e      	mov	r6, r1
 8008e9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ea2:	f000 f997 	bl	80091d4 <_malloc_r>
 8008ea6:	4604      	mov	r4, r0
 8008ea8:	b140      	cbz	r0, 8008ebc <__sfmoreglue+0x28>
 8008eaa:	2100      	movs	r1, #0
 8008eac:	e9c0 1600 	strd	r1, r6, [r0]
 8008eb0:	300c      	adds	r0, #12
 8008eb2:	60a0      	str	r0, [r4, #8]
 8008eb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008eb8:	f7ff fe20 	bl	8008afc <memset>
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	bd70      	pop	{r4, r5, r6, pc}

08008ec0 <__sfp_lock_acquire>:
 8008ec0:	4801      	ldr	r0, [pc, #4]	; (8008ec8 <__sfp_lock_acquire+0x8>)
 8008ec2:	f000 b8b3 	b.w	800902c <__retarget_lock_acquire_recursive>
 8008ec6:	bf00      	nop
 8008ec8:	20007951 	.word	0x20007951

08008ecc <__sfp_lock_release>:
 8008ecc:	4801      	ldr	r0, [pc, #4]	; (8008ed4 <__sfp_lock_release+0x8>)
 8008ece:	f000 b8ae 	b.w	800902e <__retarget_lock_release_recursive>
 8008ed2:	bf00      	nop
 8008ed4:	20007951 	.word	0x20007951

08008ed8 <__sinit_lock_acquire>:
 8008ed8:	4801      	ldr	r0, [pc, #4]	; (8008ee0 <__sinit_lock_acquire+0x8>)
 8008eda:	f000 b8a7 	b.w	800902c <__retarget_lock_acquire_recursive>
 8008ede:	bf00      	nop
 8008ee0:	20007952 	.word	0x20007952

08008ee4 <__sinit_lock_release>:
 8008ee4:	4801      	ldr	r0, [pc, #4]	; (8008eec <__sinit_lock_release+0x8>)
 8008ee6:	f000 b8a2 	b.w	800902e <__retarget_lock_release_recursive>
 8008eea:	bf00      	nop
 8008eec:	20007952 	.word	0x20007952

08008ef0 <__sinit>:
 8008ef0:	b510      	push	{r4, lr}
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	f7ff fff0 	bl	8008ed8 <__sinit_lock_acquire>
 8008ef8:	69a3      	ldr	r3, [r4, #24]
 8008efa:	b11b      	cbz	r3, 8008f04 <__sinit+0x14>
 8008efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f00:	f7ff bff0 	b.w	8008ee4 <__sinit_lock_release>
 8008f04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f08:	6523      	str	r3, [r4, #80]	; 0x50
 8008f0a:	4b13      	ldr	r3, [pc, #76]	; (8008f58 <__sinit+0x68>)
 8008f0c:	4a13      	ldr	r2, [pc, #76]	; (8008f5c <__sinit+0x6c>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f12:	42a3      	cmp	r3, r4
 8008f14:	bf04      	itt	eq
 8008f16:	2301      	moveq	r3, #1
 8008f18:	61a3      	streq	r3, [r4, #24]
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f000 f820 	bl	8008f60 <__sfp>
 8008f20:	6060      	str	r0, [r4, #4]
 8008f22:	4620      	mov	r0, r4
 8008f24:	f000 f81c 	bl	8008f60 <__sfp>
 8008f28:	60a0      	str	r0, [r4, #8]
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f000 f818 	bl	8008f60 <__sfp>
 8008f30:	2200      	movs	r2, #0
 8008f32:	60e0      	str	r0, [r4, #12]
 8008f34:	2104      	movs	r1, #4
 8008f36:	6860      	ldr	r0, [r4, #4]
 8008f38:	f7ff ff82 	bl	8008e40 <std>
 8008f3c:	68a0      	ldr	r0, [r4, #8]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	2109      	movs	r1, #9
 8008f42:	f7ff ff7d 	bl	8008e40 <std>
 8008f46:	68e0      	ldr	r0, [r4, #12]
 8008f48:	2202      	movs	r2, #2
 8008f4a:	2112      	movs	r1, #18
 8008f4c:	f7ff ff78 	bl	8008e40 <std>
 8008f50:	2301      	movs	r3, #1
 8008f52:	61a3      	str	r3, [r4, #24]
 8008f54:	e7d2      	b.n	8008efc <__sinit+0xc>
 8008f56:	bf00      	nop
 8008f58:	08009b98 	.word	0x08009b98
 8008f5c:	08008e89 	.word	0x08008e89

08008f60 <__sfp>:
 8008f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f62:	4607      	mov	r7, r0
 8008f64:	f7ff ffac 	bl	8008ec0 <__sfp_lock_acquire>
 8008f68:	4b1e      	ldr	r3, [pc, #120]	; (8008fe4 <__sfp+0x84>)
 8008f6a:	681e      	ldr	r6, [r3, #0]
 8008f6c:	69b3      	ldr	r3, [r6, #24]
 8008f6e:	b913      	cbnz	r3, 8008f76 <__sfp+0x16>
 8008f70:	4630      	mov	r0, r6
 8008f72:	f7ff ffbd 	bl	8008ef0 <__sinit>
 8008f76:	3648      	adds	r6, #72	; 0x48
 8008f78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	d503      	bpl.n	8008f88 <__sfp+0x28>
 8008f80:	6833      	ldr	r3, [r6, #0]
 8008f82:	b30b      	cbz	r3, 8008fc8 <__sfp+0x68>
 8008f84:	6836      	ldr	r6, [r6, #0]
 8008f86:	e7f7      	b.n	8008f78 <__sfp+0x18>
 8008f88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f8c:	b9d5      	cbnz	r5, 8008fc4 <__sfp+0x64>
 8008f8e:	4b16      	ldr	r3, [pc, #88]	; (8008fe8 <__sfp+0x88>)
 8008f90:	60e3      	str	r3, [r4, #12]
 8008f92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f96:	6665      	str	r5, [r4, #100]	; 0x64
 8008f98:	f000 f847 	bl	800902a <__retarget_lock_init_recursive>
 8008f9c:	f7ff ff96 	bl	8008ecc <__sfp_lock_release>
 8008fa0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008fa4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008fa8:	6025      	str	r5, [r4, #0]
 8008faa:	61a5      	str	r5, [r4, #24]
 8008fac:	2208      	movs	r2, #8
 8008fae:	4629      	mov	r1, r5
 8008fb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008fb4:	f7ff fda2 	bl	8008afc <memset>
 8008fb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008fbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fc4:	3468      	adds	r4, #104	; 0x68
 8008fc6:	e7d9      	b.n	8008f7c <__sfp+0x1c>
 8008fc8:	2104      	movs	r1, #4
 8008fca:	4638      	mov	r0, r7
 8008fcc:	f7ff ff62 	bl	8008e94 <__sfmoreglue>
 8008fd0:	4604      	mov	r4, r0
 8008fd2:	6030      	str	r0, [r6, #0]
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	d1d5      	bne.n	8008f84 <__sfp+0x24>
 8008fd8:	f7ff ff78 	bl	8008ecc <__sfp_lock_release>
 8008fdc:	230c      	movs	r3, #12
 8008fde:	603b      	str	r3, [r7, #0]
 8008fe0:	e7ee      	b.n	8008fc0 <__sfp+0x60>
 8008fe2:	bf00      	nop
 8008fe4:	08009b98 	.word	0x08009b98
 8008fe8:	ffff0001 	.word	0xffff0001

08008fec <_fwalk_reent>:
 8008fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ff0:	4606      	mov	r6, r0
 8008ff2:	4688      	mov	r8, r1
 8008ff4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ff8:	2700      	movs	r7, #0
 8008ffa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ffe:	f1b9 0901 	subs.w	r9, r9, #1
 8009002:	d505      	bpl.n	8009010 <_fwalk_reent+0x24>
 8009004:	6824      	ldr	r4, [r4, #0]
 8009006:	2c00      	cmp	r4, #0
 8009008:	d1f7      	bne.n	8008ffa <_fwalk_reent+0xe>
 800900a:	4638      	mov	r0, r7
 800900c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009010:	89ab      	ldrh	r3, [r5, #12]
 8009012:	2b01      	cmp	r3, #1
 8009014:	d907      	bls.n	8009026 <_fwalk_reent+0x3a>
 8009016:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800901a:	3301      	adds	r3, #1
 800901c:	d003      	beq.n	8009026 <_fwalk_reent+0x3a>
 800901e:	4629      	mov	r1, r5
 8009020:	4630      	mov	r0, r6
 8009022:	47c0      	blx	r8
 8009024:	4307      	orrs	r7, r0
 8009026:	3568      	adds	r5, #104	; 0x68
 8009028:	e7e9      	b.n	8008ffe <_fwalk_reent+0x12>

0800902a <__retarget_lock_init_recursive>:
 800902a:	4770      	bx	lr

0800902c <__retarget_lock_acquire_recursive>:
 800902c:	4770      	bx	lr

0800902e <__retarget_lock_release_recursive>:
 800902e:	4770      	bx	lr

08009030 <__swhatbuf_r>:
 8009030:	b570      	push	{r4, r5, r6, lr}
 8009032:	460e      	mov	r6, r1
 8009034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009038:	2900      	cmp	r1, #0
 800903a:	b096      	sub	sp, #88	; 0x58
 800903c:	4614      	mov	r4, r2
 800903e:	461d      	mov	r5, r3
 8009040:	da08      	bge.n	8009054 <__swhatbuf_r+0x24>
 8009042:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009046:	2200      	movs	r2, #0
 8009048:	602a      	str	r2, [r5, #0]
 800904a:	061a      	lsls	r2, r3, #24
 800904c:	d410      	bmi.n	8009070 <__swhatbuf_r+0x40>
 800904e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009052:	e00e      	b.n	8009072 <__swhatbuf_r+0x42>
 8009054:	466a      	mov	r2, sp
 8009056:	f000 fc95 	bl	8009984 <_fstat_r>
 800905a:	2800      	cmp	r0, #0
 800905c:	dbf1      	blt.n	8009042 <__swhatbuf_r+0x12>
 800905e:	9a01      	ldr	r2, [sp, #4]
 8009060:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009064:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009068:	425a      	negs	r2, r3
 800906a:	415a      	adcs	r2, r3
 800906c:	602a      	str	r2, [r5, #0]
 800906e:	e7ee      	b.n	800904e <__swhatbuf_r+0x1e>
 8009070:	2340      	movs	r3, #64	; 0x40
 8009072:	2000      	movs	r0, #0
 8009074:	6023      	str	r3, [r4, #0]
 8009076:	b016      	add	sp, #88	; 0x58
 8009078:	bd70      	pop	{r4, r5, r6, pc}
	...

0800907c <__smakebuf_r>:
 800907c:	898b      	ldrh	r3, [r1, #12]
 800907e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009080:	079d      	lsls	r5, r3, #30
 8009082:	4606      	mov	r6, r0
 8009084:	460c      	mov	r4, r1
 8009086:	d507      	bpl.n	8009098 <__smakebuf_r+0x1c>
 8009088:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800908c:	6023      	str	r3, [r4, #0]
 800908e:	6123      	str	r3, [r4, #16]
 8009090:	2301      	movs	r3, #1
 8009092:	6163      	str	r3, [r4, #20]
 8009094:	b002      	add	sp, #8
 8009096:	bd70      	pop	{r4, r5, r6, pc}
 8009098:	ab01      	add	r3, sp, #4
 800909a:	466a      	mov	r2, sp
 800909c:	f7ff ffc8 	bl	8009030 <__swhatbuf_r>
 80090a0:	9900      	ldr	r1, [sp, #0]
 80090a2:	4605      	mov	r5, r0
 80090a4:	4630      	mov	r0, r6
 80090a6:	f000 f895 	bl	80091d4 <_malloc_r>
 80090aa:	b948      	cbnz	r0, 80090c0 <__smakebuf_r+0x44>
 80090ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090b0:	059a      	lsls	r2, r3, #22
 80090b2:	d4ef      	bmi.n	8009094 <__smakebuf_r+0x18>
 80090b4:	f023 0303 	bic.w	r3, r3, #3
 80090b8:	f043 0302 	orr.w	r3, r3, #2
 80090bc:	81a3      	strh	r3, [r4, #12]
 80090be:	e7e3      	b.n	8009088 <__smakebuf_r+0xc>
 80090c0:	4b0d      	ldr	r3, [pc, #52]	; (80090f8 <__smakebuf_r+0x7c>)
 80090c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80090c4:	89a3      	ldrh	r3, [r4, #12]
 80090c6:	6020      	str	r0, [r4, #0]
 80090c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090cc:	81a3      	strh	r3, [r4, #12]
 80090ce:	9b00      	ldr	r3, [sp, #0]
 80090d0:	6163      	str	r3, [r4, #20]
 80090d2:	9b01      	ldr	r3, [sp, #4]
 80090d4:	6120      	str	r0, [r4, #16]
 80090d6:	b15b      	cbz	r3, 80090f0 <__smakebuf_r+0x74>
 80090d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090dc:	4630      	mov	r0, r6
 80090de:	f000 fc63 	bl	80099a8 <_isatty_r>
 80090e2:	b128      	cbz	r0, 80090f0 <__smakebuf_r+0x74>
 80090e4:	89a3      	ldrh	r3, [r4, #12]
 80090e6:	f023 0303 	bic.w	r3, r3, #3
 80090ea:	f043 0301 	orr.w	r3, r3, #1
 80090ee:	81a3      	strh	r3, [r4, #12]
 80090f0:	89a0      	ldrh	r0, [r4, #12]
 80090f2:	4305      	orrs	r5, r0
 80090f4:	81a5      	strh	r5, [r4, #12]
 80090f6:	e7cd      	b.n	8009094 <__smakebuf_r+0x18>
 80090f8:	08008e89 	.word	0x08008e89

080090fc <_free_r>:
 80090fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090fe:	2900      	cmp	r1, #0
 8009100:	d044      	beq.n	800918c <_free_r+0x90>
 8009102:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009106:	9001      	str	r0, [sp, #4]
 8009108:	2b00      	cmp	r3, #0
 800910a:	f1a1 0404 	sub.w	r4, r1, #4
 800910e:	bfb8      	it	lt
 8009110:	18e4      	addlt	r4, r4, r3
 8009112:	f000 fc6b 	bl	80099ec <__malloc_lock>
 8009116:	4a1e      	ldr	r2, [pc, #120]	; (8009190 <_free_r+0x94>)
 8009118:	9801      	ldr	r0, [sp, #4]
 800911a:	6813      	ldr	r3, [r2, #0]
 800911c:	b933      	cbnz	r3, 800912c <_free_r+0x30>
 800911e:	6063      	str	r3, [r4, #4]
 8009120:	6014      	str	r4, [r2, #0]
 8009122:	b003      	add	sp, #12
 8009124:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009128:	f000 bc66 	b.w	80099f8 <__malloc_unlock>
 800912c:	42a3      	cmp	r3, r4
 800912e:	d908      	bls.n	8009142 <_free_r+0x46>
 8009130:	6825      	ldr	r5, [r4, #0]
 8009132:	1961      	adds	r1, r4, r5
 8009134:	428b      	cmp	r3, r1
 8009136:	bf01      	itttt	eq
 8009138:	6819      	ldreq	r1, [r3, #0]
 800913a:	685b      	ldreq	r3, [r3, #4]
 800913c:	1949      	addeq	r1, r1, r5
 800913e:	6021      	streq	r1, [r4, #0]
 8009140:	e7ed      	b.n	800911e <_free_r+0x22>
 8009142:	461a      	mov	r2, r3
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	b10b      	cbz	r3, 800914c <_free_r+0x50>
 8009148:	42a3      	cmp	r3, r4
 800914a:	d9fa      	bls.n	8009142 <_free_r+0x46>
 800914c:	6811      	ldr	r1, [r2, #0]
 800914e:	1855      	adds	r5, r2, r1
 8009150:	42a5      	cmp	r5, r4
 8009152:	d10b      	bne.n	800916c <_free_r+0x70>
 8009154:	6824      	ldr	r4, [r4, #0]
 8009156:	4421      	add	r1, r4
 8009158:	1854      	adds	r4, r2, r1
 800915a:	42a3      	cmp	r3, r4
 800915c:	6011      	str	r1, [r2, #0]
 800915e:	d1e0      	bne.n	8009122 <_free_r+0x26>
 8009160:	681c      	ldr	r4, [r3, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	6053      	str	r3, [r2, #4]
 8009166:	4421      	add	r1, r4
 8009168:	6011      	str	r1, [r2, #0]
 800916a:	e7da      	b.n	8009122 <_free_r+0x26>
 800916c:	d902      	bls.n	8009174 <_free_r+0x78>
 800916e:	230c      	movs	r3, #12
 8009170:	6003      	str	r3, [r0, #0]
 8009172:	e7d6      	b.n	8009122 <_free_r+0x26>
 8009174:	6825      	ldr	r5, [r4, #0]
 8009176:	1961      	adds	r1, r4, r5
 8009178:	428b      	cmp	r3, r1
 800917a:	bf04      	itt	eq
 800917c:	6819      	ldreq	r1, [r3, #0]
 800917e:	685b      	ldreq	r3, [r3, #4]
 8009180:	6063      	str	r3, [r4, #4]
 8009182:	bf04      	itt	eq
 8009184:	1949      	addeq	r1, r1, r5
 8009186:	6021      	streq	r1, [r4, #0]
 8009188:	6054      	str	r4, [r2, #4]
 800918a:	e7ca      	b.n	8009122 <_free_r+0x26>
 800918c:	b003      	add	sp, #12
 800918e:	bd30      	pop	{r4, r5, pc}
 8009190:	20007954 	.word	0x20007954

08009194 <sbrk_aligned>:
 8009194:	b570      	push	{r4, r5, r6, lr}
 8009196:	4e0e      	ldr	r6, [pc, #56]	; (80091d0 <sbrk_aligned+0x3c>)
 8009198:	460c      	mov	r4, r1
 800919a:	6831      	ldr	r1, [r6, #0]
 800919c:	4605      	mov	r5, r0
 800919e:	b911      	cbnz	r1, 80091a6 <sbrk_aligned+0x12>
 80091a0:	f000 fb7a 	bl	8009898 <_sbrk_r>
 80091a4:	6030      	str	r0, [r6, #0]
 80091a6:	4621      	mov	r1, r4
 80091a8:	4628      	mov	r0, r5
 80091aa:	f000 fb75 	bl	8009898 <_sbrk_r>
 80091ae:	1c43      	adds	r3, r0, #1
 80091b0:	d00a      	beq.n	80091c8 <sbrk_aligned+0x34>
 80091b2:	1cc4      	adds	r4, r0, #3
 80091b4:	f024 0403 	bic.w	r4, r4, #3
 80091b8:	42a0      	cmp	r0, r4
 80091ba:	d007      	beq.n	80091cc <sbrk_aligned+0x38>
 80091bc:	1a21      	subs	r1, r4, r0
 80091be:	4628      	mov	r0, r5
 80091c0:	f000 fb6a 	bl	8009898 <_sbrk_r>
 80091c4:	3001      	adds	r0, #1
 80091c6:	d101      	bne.n	80091cc <sbrk_aligned+0x38>
 80091c8:	f04f 34ff 	mov.w	r4, #4294967295
 80091cc:	4620      	mov	r0, r4
 80091ce:	bd70      	pop	{r4, r5, r6, pc}
 80091d0:	20007958 	.word	0x20007958

080091d4 <_malloc_r>:
 80091d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091d8:	1ccd      	adds	r5, r1, #3
 80091da:	f025 0503 	bic.w	r5, r5, #3
 80091de:	3508      	adds	r5, #8
 80091e0:	2d0c      	cmp	r5, #12
 80091e2:	bf38      	it	cc
 80091e4:	250c      	movcc	r5, #12
 80091e6:	2d00      	cmp	r5, #0
 80091e8:	4607      	mov	r7, r0
 80091ea:	db01      	blt.n	80091f0 <_malloc_r+0x1c>
 80091ec:	42a9      	cmp	r1, r5
 80091ee:	d905      	bls.n	80091fc <_malloc_r+0x28>
 80091f0:	230c      	movs	r3, #12
 80091f2:	603b      	str	r3, [r7, #0]
 80091f4:	2600      	movs	r6, #0
 80091f6:	4630      	mov	r0, r6
 80091f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091fc:	4e2e      	ldr	r6, [pc, #184]	; (80092b8 <_malloc_r+0xe4>)
 80091fe:	f000 fbf5 	bl	80099ec <__malloc_lock>
 8009202:	6833      	ldr	r3, [r6, #0]
 8009204:	461c      	mov	r4, r3
 8009206:	bb34      	cbnz	r4, 8009256 <_malloc_r+0x82>
 8009208:	4629      	mov	r1, r5
 800920a:	4638      	mov	r0, r7
 800920c:	f7ff ffc2 	bl	8009194 <sbrk_aligned>
 8009210:	1c43      	adds	r3, r0, #1
 8009212:	4604      	mov	r4, r0
 8009214:	d14d      	bne.n	80092b2 <_malloc_r+0xde>
 8009216:	6834      	ldr	r4, [r6, #0]
 8009218:	4626      	mov	r6, r4
 800921a:	2e00      	cmp	r6, #0
 800921c:	d140      	bne.n	80092a0 <_malloc_r+0xcc>
 800921e:	6823      	ldr	r3, [r4, #0]
 8009220:	4631      	mov	r1, r6
 8009222:	4638      	mov	r0, r7
 8009224:	eb04 0803 	add.w	r8, r4, r3
 8009228:	f000 fb36 	bl	8009898 <_sbrk_r>
 800922c:	4580      	cmp	r8, r0
 800922e:	d13a      	bne.n	80092a6 <_malloc_r+0xd2>
 8009230:	6821      	ldr	r1, [r4, #0]
 8009232:	3503      	adds	r5, #3
 8009234:	1a6d      	subs	r5, r5, r1
 8009236:	f025 0503 	bic.w	r5, r5, #3
 800923a:	3508      	adds	r5, #8
 800923c:	2d0c      	cmp	r5, #12
 800923e:	bf38      	it	cc
 8009240:	250c      	movcc	r5, #12
 8009242:	4629      	mov	r1, r5
 8009244:	4638      	mov	r0, r7
 8009246:	f7ff ffa5 	bl	8009194 <sbrk_aligned>
 800924a:	3001      	adds	r0, #1
 800924c:	d02b      	beq.n	80092a6 <_malloc_r+0xd2>
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	442b      	add	r3, r5
 8009252:	6023      	str	r3, [r4, #0]
 8009254:	e00e      	b.n	8009274 <_malloc_r+0xa0>
 8009256:	6822      	ldr	r2, [r4, #0]
 8009258:	1b52      	subs	r2, r2, r5
 800925a:	d41e      	bmi.n	800929a <_malloc_r+0xc6>
 800925c:	2a0b      	cmp	r2, #11
 800925e:	d916      	bls.n	800928e <_malloc_r+0xba>
 8009260:	1961      	adds	r1, r4, r5
 8009262:	42a3      	cmp	r3, r4
 8009264:	6025      	str	r5, [r4, #0]
 8009266:	bf18      	it	ne
 8009268:	6059      	strne	r1, [r3, #4]
 800926a:	6863      	ldr	r3, [r4, #4]
 800926c:	bf08      	it	eq
 800926e:	6031      	streq	r1, [r6, #0]
 8009270:	5162      	str	r2, [r4, r5]
 8009272:	604b      	str	r3, [r1, #4]
 8009274:	4638      	mov	r0, r7
 8009276:	f104 060b 	add.w	r6, r4, #11
 800927a:	f000 fbbd 	bl	80099f8 <__malloc_unlock>
 800927e:	f026 0607 	bic.w	r6, r6, #7
 8009282:	1d23      	adds	r3, r4, #4
 8009284:	1af2      	subs	r2, r6, r3
 8009286:	d0b6      	beq.n	80091f6 <_malloc_r+0x22>
 8009288:	1b9b      	subs	r3, r3, r6
 800928a:	50a3      	str	r3, [r4, r2]
 800928c:	e7b3      	b.n	80091f6 <_malloc_r+0x22>
 800928e:	6862      	ldr	r2, [r4, #4]
 8009290:	42a3      	cmp	r3, r4
 8009292:	bf0c      	ite	eq
 8009294:	6032      	streq	r2, [r6, #0]
 8009296:	605a      	strne	r2, [r3, #4]
 8009298:	e7ec      	b.n	8009274 <_malloc_r+0xa0>
 800929a:	4623      	mov	r3, r4
 800929c:	6864      	ldr	r4, [r4, #4]
 800929e:	e7b2      	b.n	8009206 <_malloc_r+0x32>
 80092a0:	4634      	mov	r4, r6
 80092a2:	6876      	ldr	r6, [r6, #4]
 80092a4:	e7b9      	b.n	800921a <_malloc_r+0x46>
 80092a6:	230c      	movs	r3, #12
 80092a8:	603b      	str	r3, [r7, #0]
 80092aa:	4638      	mov	r0, r7
 80092ac:	f000 fba4 	bl	80099f8 <__malloc_unlock>
 80092b0:	e7a1      	b.n	80091f6 <_malloc_r+0x22>
 80092b2:	6025      	str	r5, [r4, #0]
 80092b4:	e7de      	b.n	8009274 <_malloc_r+0xa0>
 80092b6:	bf00      	nop
 80092b8:	20007954 	.word	0x20007954

080092bc <__sfputc_r>:
 80092bc:	6893      	ldr	r3, [r2, #8]
 80092be:	3b01      	subs	r3, #1
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	b410      	push	{r4}
 80092c4:	6093      	str	r3, [r2, #8]
 80092c6:	da08      	bge.n	80092da <__sfputc_r+0x1e>
 80092c8:	6994      	ldr	r4, [r2, #24]
 80092ca:	42a3      	cmp	r3, r4
 80092cc:	db01      	blt.n	80092d2 <__sfputc_r+0x16>
 80092ce:	290a      	cmp	r1, #10
 80092d0:	d103      	bne.n	80092da <__sfputc_r+0x1e>
 80092d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092d6:	f7ff bc31 	b.w	8008b3c <__swbuf_r>
 80092da:	6813      	ldr	r3, [r2, #0]
 80092dc:	1c58      	adds	r0, r3, #1
 80092de:	6010      	str	r0, [r2, #0]
 80092e0:	7019      	strb	r1, [r3, #0]
 80092e2:	4608      	mov	r0, r1
 80092e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092e8:	4770      	bx	lr

080092ea <__sfputs_r>:
 80092ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ec:	4606      	mov	r6, r0
 80092ee:	460f      	mov	r7, r1
 80092f0:	4614      	mov	r4, r2
 80092f2:	18d5      	adds	r5, r2, r3
 80092f4:	42ac      	cmp	r4, r5
 80092f6:	d101      	bne.n	80092fc <__sfputs_r+0x12>
 80092f8:	2000      	movs	r0, #0
 80092fa:	e007      	b.n	800930c <__sfputs_r+0x22>
 80092fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009300:	463a      	mov	r2, r7
 8009302:	4630      	mov	r0, r6
 8009304:	f7ff ffda 	bl	80092bc <__sfputc_r>
 8009308:	1c43      	adds	r3, r0, #1
 800930a:	d1f3      	bne.n	80092f4 <__sfputs_r+0xa>
 800930c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009310 <_vfiprintf_r>:
 8009310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009314:	460d      	mov	r5, r1
 8009316:	b09d      	sub	sp, #116	; 0x74
 8009318:	4614      	mov	r4, r2
 800931a:	4698      	mov	r8, r3
 800931c:	4606      	mov	r6, r0
 800931e:	b118      	cbz	r0, 8009328 <_vfiprintf_r+0x18>
 8009320:	6983      	ldr	r3, [r0, #24]
 8009322:	b90b      	cbnz	r3, 8009328 <_vfiprintf_r+0x18>
 8009324:	f7ff fde4 	bl	8008ef0 <__sinit>
 8009328:	4b89      	ldr	r3, [pc, #548]	; (8009550 <_vfiprintf_r+0x240>)
 800932a:	429d      	cmp	r5, r3
 800932c:	d11b      	bne.n	8009366 <_vfiprintf_r+0x56>
 800932e:	6875      	ldr	r5, [r6, #4]
 8009330:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009332:	07d9      	lsls	r1, r3, #31
 8009334:	d405      	bmi.n	8009342 <_vfiprintf_r+0x32>
 8009336:	89ab      	ldrh	r3, [r5, #12]
 8009338:	059a      	lsls	r2, r3, #22
 800933a:	d402      	bmi.n	8009342 <_vfiprintf_r+0x32>
 800933c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800933e:	f7ff fe75 	bl	800902c <__retarget_lock_acquire_recursive>
 8009342:	89ab      	ldrh	r3, [r5, #12]
 8009344:	071b      	lsls	r3, r3, #28
 8009346:	d501      	bpl.n	800934c <_vfiprintf_r+0x3c>
 8009348:	692b      	ldr	r3, [r5, #16]
 800934a:	b9eb      	cbnz	r3, 8009388 <_vfiprintf_r+0x78>
 800934c:	4629      	mov	r1, r5
 800934e:	4630      	mov	r0, r6
 8009350:	f7ff fc46 	bl	8008be0 <__swsetup_r>
 8009354:	b1c0      	cbz	r0, 8009388 <_vfiprintf_r+0x78>
 8009356:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009358:	07dc      	lsls	r4, r3, #31
 800935a:	d50e      	bpl.n	800937a <_vfiprintf_r+0x6a>
 800935c:	f04f 30ff 	mov.w	r0, #4294967295
 8009360:	b01d      	add	sp, #116	; 0x74
 8009362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009366:	4b7b      	ldr	r3, [pc, #492]	; (8009554 <_vfiprintf_r+0x244>)
 8009368:	429d      	cmp	r5, r3
 800936a:	d101      	bne.n	8009370 <_vfiprintf_r+0x60>
 800936c:	68b5      	ldr	r5, [r6, #8]
 800936e:	e7df      	b.n	8009330 <_vfiprintf_r+0x20>
 8009370:	4b79      	ldr	r3, [pc, #484]	; (8009558 <_vfiprintf_r+0x248>)
 8009372:	429d      	cmp	r5, r3
 8009374:	bf08      	it	eq
 8009376:	68f5      	ldreq	r5, [r6, #12]
 8009378:	e7da      	b.n	8009330 <_vfiprintf_r+0x20>
 800937a:	89ab      	ldrh	r3, [r5, #12]
 800937c:	0598      	lsls	r0, r3, #22
 800937e:	d4ed      	bmi.n	800935c <_vfiprintf_r+0x4c>
 8009380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009382:	f7ff fe54 	bl	800902e <__retarget_lock_release_recursive>
 8009386:	e7e9      	b.n	800935c <_vfiprintf_r+0x4c>
 8009388:	2300      	movs	r3, #0
 800938a:	9309      	str	r3, [sp, #36]	; 0x24
 800938c:	2320      	movs	r3, #32
 800938e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009392:	f8cd 800c 	str.w	r8, [sp, #12]
 8009396:	2330      	movs	r3, #48	; 0x30
 8009398:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800955c <_vfiprintf_r+0x24c>
 800939c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093a0:	f04f 0901 	mov.w	r9, #1
 80093a4:	4623      	mov	r3, r4
 80093a6:	469a      	mov	sl, r3
 80093a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093ac:	b10a      	cbz	r2, 80093b2 <_vfiprintf_r+0xa2>
 80093ae:	2a25      	cmp	r2, #37	; 0x25
 80093b0:	d1f9      	bne.n	80093a6 <_vfiprintf_r+0x96>
 80093b2:	ebba 0b04 	subs.w	fp, sl, r4
 80093b6:	d00b      	beq.n	80093d0 <_vfiprintf_r+0xc0>
 80093b8:	465b      	mov	r3, fp
 80093ba:	4622      	mov	r2, r4
 80093bc:	4629      	mov	r1, r5
 80093be:	4630      	mov	r0, r6
 80093c0:	f7ff ff93 	bl	80092ea <__sfputs_r>
 80093c4:	3001      	adds	r0, #1
 80093c6:	f000 80aa 	beq.w	800951e <_vfiprintf_r+0x20e>
 80093ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093cc:	445a      	add	r2, fp
 80093ce:	9209      	str	r2, [sp, #36]	; 0x24
 80093d0:	f89a 3000 	ldrb.w	r3, [sl]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f000 80a2 	beq.w	800951e <_vfiprintf_r+0x20e>
 80093da:	2300      	movs	r3, #0
 80093dc:	f04f 32ff 	mov.w	r2, #4294967295
 80093e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093e4:	f10a 0a01 	add.w	sl, sl, #1
 80093e8:	9304      	str	r3, [sp, #16]
 80093ea:	9307      	str	r3, [sp, #28]
 80093ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093f0:	931a      	str	r3, [sp, #104]	; 0x68
 80093f2:	4654      	mov	r4, sl
 80093f4:	2205      	movs	r2, #5
 80093f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093fa:	4858      	ldr	r0, [pc, #352]	; (800955c <_vfiprintf_r+0x24c>)
 80093fc:	f7f6 ff20 	bl	8000240 <memchr>
 8009400:	9a04      	ldr	r2, [sp, #16]
 8009402:	b9d8      	cbnz	r0, 800943c <_vfiprintf_r+0x12c>
 8009404:	06d1      	lsls	r1, r2, #27
 8009406:	bf44      	itt	mi
 8009408:	2320      	movmi	r3, #32
 800940a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800940e:	0713      	lsls	r3, r2, #28
 8009410:	bf44      	itt	mi
 8009412:	232b      	movmi	r3, #43	; 0x2b
 8009414:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009418:	f89a 3000 	ldrb.w	r3, [sl]
 800941c:	2b2a      	cmp	r3, #42	; 0x2a
 800941e:	d015      	beq.n	800944c <_vfiprintf_r+0x13c>
 8009420:	9a07      	ldr	r2, [sp, #28]
 8009422:	4654      	mov	r4, sl
 8009424:	2000      	movs	r0, #0
 8009426:	f04f 0c0a 	mov.w	ip, #10
 800942a:	4621      	mov	r1, r4
 800942c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009430:	3b30      	subs	r3, #48	; 0x30
 8009432:	2b09      	cmp	r3, #9
 8009434:	d94e      	bls.n	80094d4 <_vfiprintf_r+0x1c4>
 8009436:	b1b0      	cbz	r0, 8009466 <_vfiprintf_r+0x156>
 8009438:	9207      	str	r2, [sp, #28]
 800943a:	e014      	b.n	8009466 <_vfiprintf_r+0x156>
 800943c:	eba0 0308 	sub.w	r3, r0, r8
 8009440:	fa09 f303 	lsl.w	r3, r9, r3
 8009444:	4313      	orrs	r3, r2
 8009446:	9304      	str	r3, [sp, #16]
 8009448:	46a2      	mov	sl, r4
 800944a:	e7d2      	b.n	80093f2 <_vfiprintf_r+0xe2>
 800944c:	9b03      	ldr	r3, [sp, #12]
 800944e:	1d19      	adds	r1, r3, #4
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	9103      	str	r1, [sp, #12]
 8009454:	2b00      	cmp	r3, #0
 8009456:	bfbb      	ittet	lt
 8009458:	425b      	neglt	r3, r3
 800945a:	f042 0202 	orrlt.w	r2, r2, #2
 800945e:	9307      	strge	r3, [sp, #28]
 8009460:	9307      	strlt	r3, [sp, #28]
 8009462:	bfb8      	it	lt
 8009464:	9204      	strlt	r2, [sp, #16]
 8009466:	7823      	ldrb	r3, [r4, #0]
 8009468:	2b2e      	cmp	r3, #46	; 0x2e
 800946a:	d10c      	bne.n	8009486 <_vfiprintf_r+0x176>
 800946c:	7863      	ldrb	r3, [r4, #1]
 800946e:	2b2a      	cmp	r3, #42	; 0x2a
 8009470:	d135      	bne.n	80094de <_vfiprintf_r+0x1ce>
 8009472:	9b03      	ldr	r3, [sp, #12]
 8009474:	1d1a      	adds	r2, r3, #4
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	9203      	str	r2, [sp, #12]
 800947a:	2b00      	cmp	r3, #0
 800947c:	bfb8      	it	lt
 800947e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009482:	3402      	adds	r4, #2
 8009484:	9305      	str	r3, [sp, #20]
 8009486:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800956c <_vfiprintf_r+0x25c>
 800948a:	7821      	ldrb	r1, [r4, #0]
 800948c:	2203      	movs	r2, #3
 800948e:	4650      	mov	r0, sl
 8009490:	f7f6 fed6 	bl	8000240 <memchr>
 8009494:	b140      	cbz	r0, 80094a8 <_vfiprintf_r+0x198>
 8009496:	2340      	movs	r3, #64	; 0x40
 8009498:	eba0 000a 	sub.w	r0, r0, sl
 800949c:	fa03 f000 	lsl.w	r0, r3, r0
 80094a0:	9b04      	ldr	r3, [sp, #16]
 80094a2:	4303      	orrs	r3, r0
 80094a4:	3401      	adds	r4, #1
 80094a6:	9304      	str	r3, [sp, #16]
 80094a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094ac:	482c      	ldr	r0, [pc, #176]	; (8009560 <_vfiprintf_r+0x250>)
 80094ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094b2:	2206      	movs	r2, #6
 80094b4:	f7f6 fec4 	bl	8000240 <memchr>
 80094b8:	2800      	cmp	r0, #0
 80094ba:	d03f      	beq.n	800953c <_vfiprintf_r+0x22c>
 80094bc:	4b29      	ldr	r3, [pc, #164]	; (8009564 <_vfiprintf_r+0x254>)
 80094be:	bb1b      	cbnz	r3, 8009508 <_vfiprintf_r+0x1f8>
 80094c0:	9b03      	ldr	r3, [sp, #12]
 80094c2:	3307      	adds	r3, #7
 80094c4:	f023 0307 	bic.w	r3, r3, #7
 80094c8:	3308      	adds	r3, #8
 80094ca:	9303      	str	r3, [sp, #12]
 80094cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ce:	443b      	add	r3, r7
 80094d0:	9309      	str	r3, [sp, #36]	; 0x24
 80094d2:	e767      	b.n	80093a4 <_vfiprintf_r+0x94>
 80094d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80094d8:	460c      	mov	r4, r1
 80094da:	2001      	movs	r0, #1
 80094dc:	e7a5      	b.n	800942a <_vfiprintf_r+0x11a>
 80094de:	2300      	movs	r3, #0
 80094e0:	3401      	adds	r4, #1
 80094e2:	9305      	str	r3, [sp, #20]
 80094e4:	4619      	mov	r1, r3
 80094e6:	f04f 0c0a 	mov.w	ip, #10
 80094ea:	4620      	mov	r0, r4
 80094ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094f0:	3a30      	subs	r2, #48	; 0x30
 80094f2:	2a09      	cmp	r2, #9
 80094f4:	d903      	bls.n	80094fe <_vfiprintf_r+0x1ee>
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d0c5      	beq.n	8009486 <_vfiprintf_r+0x176>
 80094fa:	9105      	str	r1, [sp, #20]
 80094fc:	e7c3      	b.n	8009486 <_vfiprintf_r+0x176>
 80094fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009502:	4604      	mov	r4, r0
 8009504:	2301      	movs	r3, #1
 8009506:	e7f0      	b.n	80094ea <_vfiprintf_r+0x1da>
 8009508:	ab03      	add	r3, sp, #12
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	462a      	mov	r2, r5
 800950e:	4b16      	ldr	r3, [pc, #88]	; (8009568 <_vfiprintf_r+0x258>)
 8009510:	a904      	add	r1, sp, #16
 8009512:	4630      	mov	r0, r6
 8009514:	f3af 8000 	nop.w
 8009518:	4607      	mov	r7, r0
 800951a:	1c78      	adds	r0, r7, #1
 800951c:	d1d6      	bne.n	80094cc <_vfiprintf_r+0x1bc>
 800951e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009520:	07d9      	lsls	r1, r3, #31
 8009522:	d405      	bmi.n	8009530 <_vfiprintf_r+0x220>
 8009524:	89ab      	ldrh	r3, [r5, #12]
 8009526:	059a      	lsls	r2, r3, #22
 8009528:	d402      	bmi.n	8009530 <_vfiprintf_r+0x220>
 800952a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800952c:	f7ff fd7f 	bl	800902e <__retarget_lock_release_recursive>
 8009530:	89ab      	ldrh	r3, [r5, #12]
 8009532:	065b      	lsls	r3, r3, #25
 8009534:	f53f af12 	bmi.w	800935c <_vfiprintf_r+0x4c>
 8009538:	9809      	ldr	r0, [sp, #36]	; 0x24
 800953a:	e711      	b.n	8009360 <_vfiprintf_r+0x50>
 800953c:	ab03      	add	r3, sp, #12
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	462a      	mov	r2, r5
 8009542:	4b09      	ldr	r3, [pc, #36]	; (8009568 <_vfiprintf_r+0x258>)
 8009544:	a904      	add	r1, sp, #16
 8009546:	4630      	mov	r0, r6
 8009548:	f000 f880 	bl	800964c <_printf_i>
 800954c:	e7e4      	b.n	8009518 <_vfiprintf_r+0x208>
 800954e:	bf00      	nop
 8009550:	08009bbc 	.word	0x08009bbc
 8009554:	08009bdc 	.word	0x08009bdc
 8009558:	08009b9c 	.word	0x08009b9c
 800955c:	08009bfc 	.word	0x08009bfc
 8009560:	08009c06 	.word	0x08009c06
 8009564:	00000000 	.word	0x00000000
 8009568:	080092eb 	.word	0x080092eb
 800956c:	08009c02 	.word	0x08009c02

08009570 <_printf_common>:
 8009570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009574:	4616      	mov	r6, r2
 8009576:	4699      	mov	r9, r3
 8009578:	688a      	ldr	r2, [r1, #8]
 800957a:	690b      	ldr	r3, [r1, #16]
 800957c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009580:	4293      	cmp	r3, r2
 8009582:	bfb8      	it	lt
 8009584:	4613      	movlt	r3, r2
 8009586:	6033      	str	r3, [r6, #0]
 8009588:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800958c:	4607      	mov	r7, r0
 800958e:	460c      	mov	r4, r1
 8009590:	b10a      	cbz	r2, 8009596 <_printf_common+0x26>
 8009592:	3301      	adds	r3, #1
 8009594:	6033      	str	r3, [r6, #0]
 8009596:	6823      	ldr	r3, [r4, #0]
 8009598:	0699      	lsls	r1, r3, #26
 800959a:	bf42      	ittt	mi
 800959c:	6833      	ldrmi	r3, [r6, #0]
 800959e:	3302      	addmi	r3, #2
 80095a0:	6033      	strmi	r3, [r6, #0]
 80095a2:	6825      	ldr	r5, [r4, #0]
 80095a4:	f015 0506 	ands.w	r5, r5, #6
 80095a8:	d106      	bne.n	80095b8 <_printf_common+0x48>
 80095aa:	f104 0a19 	add.w	sl, r4, #25
 80095ae:	68e3      	ldr	r3, [r4, #12]
 80095b0:	6832      	ldr	r2, [r6, #0]
 80095b2:	1a9b      	subs	r3, r3, r2
 80095b4:	42ab      	cmp	r3, r5
 80095b6:	dc26      	bgt.n	8009606 <_printf_common+0x96>
 80095b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095bc:	1e13      	subs	r3, r2, #0
 80095be:	6822      	ldr	r2, [r4, #0]
 80095c0:	bf18      	it	ne
 80095c2:	2301      	movne	r3, #1
 80095c4:	0692      	lsls	r2, r2, #26
 80095c6:	d42b      	bmi.n	8009620 <_printf_common+0xb0>
 80095c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095cc:	4649      	mov	r1, r9
 80095ce:	4638      	mov	r0, r7
 80095d0:	47c0      	blx	r8
 80095d2:	3001      	adds	r0, #1
 80095d4:	d01e      	beq.n	8009614 <_printf_common+0xa4>
 80095d6:	6823      	ldr	r3, [r4, #0]
 80095d8:	68e5      	ldr	r5, [r4, #12]
 80095da:	6832      	ldr	r2, [r6, #0]
 80095dc:	f003 0306 	and.w	r3, r3, #6
 80095e0:	2b04      	cmp	r3, #4
 80095e2:	bf08      	it	eq
 80095e4:	1aad      	subeq	r5, r5, r2
 80095e6:	68a3      	ldr	r3, [r4, #8]
 80095e8:	6922      	ldr	r2, [r4, #16]
 80095ea:	bf0c      	ite	eq
 80095ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095f0:	2500      	movne	r5, #0
 80095f2:	4293      	cmp	r3, r2
 80095f4:	bfc4      	itt	gt
 80095f6:	1a9b      	subgt	r3, r3, r2
 80095f8:	18ed      	addgt	r5, r5, r3
 80095fa:	2600      	movs	r6, #0
 80095fc:	341a      	adds	r4, #26
 80095fe:	42b5      	cmp	r5, r6
 8009600:	d11a      	bne.n	8009638 <_printf_common+0xc8>
 8009602:	2000      	movs	r0, #0
 8009604:	e008      	b.n	8009618 <_printf_common+0xa8>
 8009606:	2301      	movs	r3, #1
 8009608:	4652      	mov	r2, sl
 800960a:	4649      	mov	r1, r9
 800960c:	4638      	mov	r0, r7
 800960e:	47c0      	blx	r8
 8009610:	3001      	adds	r0, #1
 8009612:	d103      	bne.n	800961c <_printf_common+0xac>
 8009614:	f04f 30ff 	mov.w	r0, #4294967295
 8009618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800961c:	3501      	adds	r5, #1
 800961e:	e7c6      	b.n	80095ae <_printf_common+0x3e>
 8009620:	18e1      	adds	r1, r4, r3
 8009622:	1c5a      	adds	r2, r3, #1
 8009624:	2030      	movs	r0, #48	; 0x30
 8009626:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800962a:	4422      	add	r2, r4
 800962c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009630:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009634:	3302      	adds	r3, #2
 8009636:	e7c7      	b.n	80095c8 <_printf_common+0x58>
 8009638:	2301      	movs	r3, #1
 800963a:	4622      	mov	r2, r4
 800963c:	4649      	mov	r1, r9
 800963e:	4638      	mov	r0, r7
 8009640:	47c0      	blx	r8
 8009642:	3001      	adds	r0, #1
 8009644:	d0e6      	beq.n	8009614 <_printf_common+0xa4>
 8009646:	3601      	adds	r6, #1
 8009648:	e7d9      	b.n	80095fe <_printf_common+0x8e>
	...

0800964c <_printf_i>:
 800964c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009650:	7e0f      	ldrb	r7, [r1, #24]
 8009652:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009654:	2f78      	cmp	r7, #120	; 0x78
 8009656:	4691      	mov	r9, r2
 8009658:	4680      	mov	r8, r0
 800965a:	460c      	mov	r4, r1
 800965c:	469a      	mov	sl, r3
 800965e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009662:	d807      	bhi.n	8009674 <_printf_i+0x28>
 8009664:	2f62      	cmp	r7, #98	; 0x62
 8009666:	d80a      	bhi.n	800967e <_printf_i+0x32>
 8009668:	2f00      	cmp	r7, #0
 800966a:	f000 80d8 	beq.w	800981e <_printf_i+0x1d2>
 800966e:	2f58      	cmp	r7, #88	; 0x58
 8009670:	f000 80a3 	beq.w	80097ba <_printf_i+0x16e>
 8009674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009678:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800967c:	e03a      	b.n	80096f4 <_printf_i+0xa8>
 800967e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009682:	2b15      	cmp	r3, #21
 8009684:	d8f6      	bhi.n	8009674 <_printf_i+0x28>
 8009686:	a101      	add	r1, pc, #4	; (adr r1, 800968c <_printf_i+0x40>)
 8009688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800968c:	080096e5 	.word	0x080096e5
 8009690:	080096f9 	.word	0x080096f9
 8009694:	08009675 	.word	0x08009675
 8009698:	08009675 	.word	0x08009675
 800969c:	08009675 	.word	0x08009675
 80096a0:	08009675 	.word	0x08009675
 80096a4:	080096f9 	.word	0x080096f9
 80096a8:	08009675 	.word	0x08009675
 80096ac:	08009675 	.word	0x08009675
 80096b0:	08009675 	.word	0x08009675
 80096b4:	08009675 	.word	0x08009675
 80096b8:	08009805 	.word	0x08009805
 80096bc:	08009729 	.word	0x08009729
 80096c0:	080097e7 	.word	0x080097e7
 80096c4:	08009675 	.word	0x08009675
 80096c8:	08009675 	.word	0x08009675
 80096cc:	08009827 	.word	0x08009827
 80096d0:	08009675 	.word	0x08009675
 80096d4:	08009729 	.word	0x08009729
 80096d8:	08009675 	.word	0x08009675
 80096dc:	08009675 	.word	0x08009675
 80096e0:	080097ef 	.word	0x080097ef
 80096e4:	682b      	ldr	r3, [r5, #0]
 80096e6:	1d1a      	adds	r2, r3, #4
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	602a      	str	r2, [r5, #0]
 80096ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096f4:	2301      	movs	r3, #1
 80096f6:	e0a3      	b.n	8009840 <_printf_i+0x1f4>
 80096f8:	6820      	ldr	r0, [r4, #0]
 80096fa:	6829      	ldr	r1, [r5, #0]
 80096fc:	0606      	lsls	r6, r0, #24
 80096fe:	f101 0304 	add.w	r3, r1, #4
 8009702:	d50a      	bpl.n	800971a <_printf_i+0xce>
 8009704:	680e      	ldr	r6, [r1, #0]
 8009706:	602b      	str	r3, [r5, #0]
 8009708:	2e00      	cmp	r6, #0
 800970a:	da03      	bge.n	8009714 <_printf_i+0xc8>
 800970c:	232d      	movs	r3, #45	; 0x2d
 800970e:	4276      	negs	r6, r6
 8009710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009714:	485e      	ldr	r0, [pc, #376]	; (8009890 <_printf_i+0x244>)
 8009716:	230a      	movs	r3, #10
 8009718:	e019      	b.n	800974e <_printf_i+0x102>
 800971a:	680e      	ldr	r6, [r1, #0]
 800971c:	602b      	str	r3, [r5, #0]
 800971e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009722:	bf18      	it	ne
 8009724:	b236      	sxthne	r6, r6
 8009726:	e7ef      	b.n	8009708 <_printf_i+0xbc>
 8009728:	682b      	ldr	r3, [r5, #0]
 800972a:	6820      	ldr	r0, [r4, #0]
 800972c:	1d19      	adds	r1, r3, #4
 800972e:	6029      	str	r1, [r5, #0]
 8009730:	0601      	lsls	r1, r0, #24
 8009732:	d501      	bpl.n	8009738 <_printf_i+0xec>
 8009734:	681e      	ldr	r6, [r3, #0]
 8009736:	e002      	b.n	800973e <_printf_i+0xf2>
 8009738:	0646      	lsls	r6, r0, #25
 800973a:	d5fb      	bpl.n	8009734 <_printf_i+0xe8>
 800973c:	881e      	ldrh	r6, [r3, #0]
 800973e:	4854      	ldr	r0, [pc, #336]	; (8009890 <_printf_i+0x244>)
 8009740:	2f6f      	cmp	r7, #111	; 0x6f
 8009742:	bf0c      	ite	eq
 8009744:	2308      	moveq	r3, #8
 8009746:	230a      	movne	r3, #10
 8009748:	2100      	movs	r1, #0
 800974a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800974e:	6865      	ldr	r5, [r4, #4]
 8009750:	60a5      	str	r5, [r4, #8]
 8009752:	2d00      	cmp	r5, #0
 8009754:	bfa2      	ittt	ge
 8009756:	6821      	ldrge	r1, [r4, #0]
 8009758:	f021 0104 	bicge.w	r1, r1, #4
 800975c:	6021      	strge	r1, [r4, #0]
 800975e:	b90e      	cbnz	r6, 8009764 <_printf_i+0x118>
 8009760:	2d00      	cmp	r5, #0
 8009762:	d04d      	beq.n	8009800 <_printf_i+0x1b4>
 8009764:	4615      	mov	r5, r2
 8009766:	fbb6 f1f3 	udiv	r1, r6, r3
 800976a:	fb03 6711 	mls	r7, r3, r1, r6
 800976e:	5dc7      	ldrb	r7, [r0, r7]
 8009770:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009774:	4637      	mov	r7, r6
 8009776:	42bb      	cmp	r3, r7
 8009778:	460e      	mov	r6, r1
 800977a:	d9f4      	bls.n	8009766 <_printf_i+0x11a>
 800977c:	2b08      	cmp	r3, #8
 800977e:	d10b      	bne.n	8009798 <_printf_i+0x14c>
 8009780:	6823      	ldr	r3, [r4, #0]
 8009782:	07de      	lsls	r6, r3, #31
 8009784:	d508      	bpl.n	8009798 <_printf_i+0x14c>
 8009786:	6923      	ldr	r3, [r4, #16]
 8009788:	6861      	ldr	r1, [r4, #4]
 800978a:	4299      	cmp	r1, r3
 800978c:	bfde      	ittt	le
 800978e:	2330      	movle	r3, #48	; 0x30
 8009790:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009794:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009798:	1b52      	subs	r2, r2, r5
 800979a:	6122      	str	r2, [r4, #16]
 800979c:	f8cd a000 	str.w	sl, [sp]
 80097a0:	464b      	mov	r3, r9
 80097a2:	aa03      	add	r2, sp, #12
 80097a4:	4621      	mov	r1, r4
 80097a6:	4640      	mov	r0, r8
 80097a8:	f7ff fee2 	bl	8009570 <_printf_common>
 80097ac:	3001      	adds	r0, #1
 80097ae:	d14c      	bne.n	800984a <_printf_i+0x1fe>
 80097b0:	f04f 30ff 	mov.w	r0, #4294967295
 80097b4:	b004      	add	sp, #16
 80097b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ba:	4835      	ldr	r0, [pc, #212]	; (8009890 <_printf_i+0x244>)
 80097bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80097c0:	6829      	ldr	r1, [r5, #0]
 80097c2:	6823      	ldr	r3, [r4, #0]
 80097c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80097c8:	6029      	str	r1, [r5, #0]
 80097ca:	061d      	lsls	r5, r3, #24
 80097cc:	d514      	bpl.n	80097f8 <_printf_i+0x1ac>
 80097ce:	07df      	lsls	r7, r3, #31
 80097d0:	bf44      	itt	mi
 80097d2:	f043 0320 	orrmi.w	r3, r3, #32
 80097d6:	6023      	strmi	r3, [r4, #0]
 80097d8:	b91e      	cbnz	r6, 80097e2 <_printf_i+0x196>
 80097da:	6823      	ldr	r3, [r4, #0]
 80097dc:	f023 0320 	bic.w	r3, r3, #32
 80097e0:	6023      	str	r3, [r4, #0]
 80097e2:	2310      	movs	r3, #16
 80097e4:	e7b0      	b.n	8009748 <_printf_i+0xfc>
 80097e6:	6823      	ldr	r3, [r4, #0]
 80097e8:	f043 0320 	orr.w	r3, r3, #32
 80097ec:	6023      	str	r3, [r4, #0]
 80097ee:	2378      	movs	r3, #120	; 0x78
 80097f0:	4828      	ldr	r0, [pc, #160]	; (8009894 <_printf_i+0x248>)
 80097f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80097f6:	e7e3      	b.n	80097c0 <_printf_i+0x174>
 80097f8:	0659      	lsls	r1, r3, #25
 80097fa:	bf48      	it	mi
 80097fc:	b2b6      	uxthmi	r6, r6
 80097fe:	e7e6      	b.n	80097ce <_printf_i+0x182>
 8009800:	4615      	mov	r5, r2
 8009802:	e7bb      	b.n	800977c <_printf_i+0x130>
 8009804:	682b      	ldr	r3, [r5, #0]
 8009806:	6826      	ldr	r6, [r4, #0]
 8009808:	6961      	ldr	r1, [r4, #20]
 800980a:	1d18      	adds	r0, r3, #4
 800980c:	6028      	str	r0, [r5, #0]
 800980e:	0635      	lsls	r5, r6, #24
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	d501      	bpl.n	8009818 <_printf_i+0x1cc>
 8009814:	6019      	str	r1, [r3, #0]
 8009816:	e002      	b.n	800981e <_printf_i+0x1d2>
 8009818:	0670      	lsls	r0, r6, #25
 800981a:	d5fb      	bpl.n	8009814 <_printf_i+0x1c8>
 800981c:	8019      	strh	r1, [r3, #0]
 800981e:	2300      	movs	r3, #0
 8009820:	6123      	str	r3, [r4, #16]
 8009822:	4615      	mov	r5, r2
 8009824:	e7ba      	b.n	800979c <_printf_i+0x150>
 8009826:	682b      	ldr	r3, [r5, #0]
 8009828:	1d1a      	adds	r2, r3, #4
 800982a:	602a      	str	r2, [r5, #0]
 800982c:	681d      	ldr	r5, [r3, #0]
 800982e:	6862      	ldr	r2, [r4, #4]
 8009830:	2100      	movs	r1, #0
 8009832:	4628      	mov	r0, r5
 8009834:	f7f6 fd04 	bl	8000240 <memchr>
 8009838:	b108      	cbz	r0, 800983e <_printf_i+0x1f2>
 800983a:	1b40      	subs	r0, r0, r5
 800983c:	6060      	str	r0, [r4, #4]
 800983e:	6863      	ldr	r3, [r4, #4]
 8009840:	6123      	str	r3, [r4, #16]
 8009842:	2300      	movs	r3, #0
 8009844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009848:	e7a8      	b.n	800979c <_printf_i+0x150>
 800984a:	6923      	ldr	r3, [r4, #16]
 800984c:	462a      	mov	r2, r5
 800984e:	4649      	mov	r1, r9
 8009850:	4640      	mov	r0, r8
 8009852:	47d0      	blx	sl
 8009854:	3001      	adds	r0, #1
 8009856:	d0ab      	beq.n	80097b0 <_printf_i+0x164>
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	079b      	lsls	r3, r3, #30
 800985c:	d413      	bmi.n	8009886 <_printf_i+0x23a>
 800985e:	68e0      	ldr	r0, [r4, #12]
 8009860:	9b03      	ldr	r3, [sp, #12]
 8009862:	4298      	cmp	r0, r3
 8009864:	bfb8      	it	lt
 8009866:	4618      	movlt	r0, r3
 8009868:	e7a4      	b.n	80097b4 <_printf_i+0x168>
 800986a:	2301      	movs	r3, #1
 800986c:	4632      	mov	r2, r6
 800986e:	4649      	mov	r1, r9
 8009870:	4640      	mov	r0, r8
 8009872:	47d0      	blx	sl
 8009874:	3001      	adds	r0, #1
 8009876:	d09b      	beq.n	80097b0 <_printf_i+0x164>
 8009878:	3501      	adds	r5, #1
 800987a:	68e3      	ldr	r3, [r4, #12]
 800987c:	9903      	ldr	r1, [sp, #12]
 800987e:	1a5b      	subs	r3, r3, r1
 8009880:	42ab      	cmp	r3, r5
 8009882:	dcf2      	bgt.n	800986a <_printf_i+0x21e>
 8009884:	e7eb      	b.n	800985e <_printf_i+0x212>
 8009886:	2500      	movs	r5, #0
 8009888:	f104 0619 	add.w	r6, r4, #25
 800988c:	e7f5      	b.n	800987a <_printf_i+0x22e>
 800988e:	bf00      	nop
 8009890:	08009c0d 	.word	0x08009c0d
 8009894:	08009c1e 	.word	0x08009c1e

08009898 <_sbrk_r>:
 8009898:	b538      	push	{r3, r4, r5, lr}
 800989a:	4d06      	ldr	r5, [pc, #24]	; (80098b4 <_sbrk_r+0x1c>)
 800989c:	2300      	movs	r3, #0
 800989e:	4604      	mov	r4, r0
 80098a0:	4608      	mov	r0, r1
 80098a2:	602b      	str	r3, [r5, #0]
 80098a4:	f7f7 fe5e 	bl	8001564 <_sbrk>
 80098a8:	1c43      	adds	r3, r0, #1
 80098aa:	d102      	bne.n	80098b2 <_sbrk_r+0x1a>
 80098ac:	682b      	ldr	r3, [r5, #0]
 80098ae:	b103      	cbz	r3, 80098b2 <_sbrk_r+0x1a>
 80098b0:	6023      	str	r3, [r4, #0]
 80098b2:	bd38      	pop	{r3, r4, r5, pc}
 80098b4:	2000795c 	.word	0x2000795c

080098b8 <__sread>:
 80098b8:	b510      	push	{r4, lr}
 80098ba:	460c      	mov	r4, r1
 80098bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098c0:	f000 f8a0 	bl	8009a04 <_read_r>
 80098c4:	2800      	cmp	r0, #0
 80098c6:	bfab      	itete	ge
 80098c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098ca:	89a3      	ldrhlt	r3, [r4, #12]
 80098cc:	181b      	addge	r3, r3, r0
 80098ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098d2:	bfac      	ite	ge
 80098d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80098d6:	81a3      	strhlt	r3, [r4, #12]
 80098d8:	bd10      	pop	{r4, pc}

080098da <__swrite>:
 80098da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098de:	461f      	mov	r7, r3
 80098e0:	898b      	ldrh	r3, [r1, #12]
 80098e2:	05db      	lsls	r3, r3, #23
 80098e4:	4605      	mov	r5, r0
 80098e6:	460c      	mov	r4, r1
 80098e8:	4616      	mov	r6, r2
 80098ea:	d505      	bpl.n	80098f8 <__swrite+0x1e>
 80098ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098f0:	2302      	movs	r3, #2
 80098f2:	2200      	movs	r2, #0
 80098f4:	f000 f868 	bl	80099c8 <_lseek_r>
 80098f8:	89a3      	ldrh	r3, [r4, #12]
 80098fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009902:	81a3      	strh	r3, [r4, #12]
 8009904:	4632      	mov	r2, r6
 8009906:	463b      	mov	r3, r7
 8009908:	4628      	mov	r0, r5
 800990a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800990e:	f000 b817 	b.w	8009940 <_write_r>

08009912 <__sseek>:
 8009912:	b510      	push	{r4, lr}
 8009914:	460c      	mov	r4, r1
 8009916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800991a:	f000 f855 	bl	80099c8 <_lseek_r>
 800991e:	1c43      	adds	r3, r0, #1
 8009920:	89a3      	ldrh	r3, [r4, #12]
 8009922:	bf15      	itete	ne
 8009924:	6560      	strne	r0, [r4, #84]	; 0x54
 8009926:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800992a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800992e:	81a3      	strheq	r3, [r4, #12]
 8009930:	bf18      	it	ne
 8009932:	81a3      	strhne	r3, [r4, #12]
 8009934:	bd10      	pop	{r4, pc}

08009936 <__sclose>:
 8009936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800993a:	f000 b813 	b.w	8009964 <_close_r>
	...

08009940 <_write_r>:
 8009940:	b538      	push	{r3, r4, r5, lr}
 8009942:	4d07      	ldr	r5, [pc, #28]	; (8009960 <_write_r+0x20>)
 8009944:	4604      	mov	r4, r0
 8009946:	4608      	mov	r0, r1
 8009948:	4611      	mov	r1, r2
 800994a:	2200      	movs	r2, #0
 800994c:	602a      	str	r2, [r5, #0]
 800994e:	461a      	mov	r2, r3
 8009950:	f7f7 fdb7 	bl	80014c2 <_write>
 8009954:	1c43      	adds	r3, r0, #1
 8009956:	d102      	bne.n	800995e <_write_r+0x1e>
 8009958:	682b      	ldr	r3, [r5, #0]
 800995a:	b103      	cbz	r3, 800995e <_write_r+0x1e>
 800995c:	6023      	str	r3, [r4, #0]
 800995e:	bd38      	pop	{r3, r4, r5, pc}
 8009960:	2000795c 	.word	0x2000795c

08009964 <_close_r>:
 8009964:	b538      	push	{r3, r4, r5, lr}
 8009966:	4d06      	ldr	r5, [pc, #24]	; (8009980 <_close_r+0x1c>)
 8009968:	2300      	movs	r3, #0
 800996a:	4604      	mov	r4, r0
 800996c:	4608      	mov	r0, r1
 800996e:	602b      	str	r3, [r5, #0]
 8009970:	f7f7 fdc3 	bl	80014fa <_close>
 8009974:	1c43      	adds	r3, r0, #1
 8009976:	d102      	bne.n	800997e <_close_r+0x1a>
 8009978:	682b      	ldr	r3, [r5, #0]
 800997a:	b103      	cbz	r3, 800997e <_close_r+0x1a>
 800997c:	6023      	str	r3, [r4, #0]
 800997e:	bd38      	pop	{r3, r4, r5, pc}
 8009980:	2000795c 	.word	0x2000795c

08009984 <_fstat_r>:
 8009984:	b538      	push	{r3, r4, r5, lr}
 8009986:	4d07      	ldr	r5, [pc, #28]	; (80099a4 <_fstat_r+0x20>)
 8009988:	2300      	movs	r3, #0
 800998a:	4604      	mov	r4, r0
 800998c:	4608      	mov	r0, r1
 800998e:	4611      	mov	r1, r2
 8009990:	602b      	str	r3, [r5, #0]
 8009992:	f7f7 fdbe 	bl	8001512 <_fstat>
 8009996:	1c43      	adds	r3, r0, #1
 8009998:	d102      	bne.n	80099a0 <_fstat_r+0x1c>
 800999a:	682b      	ldr	r3, [r5, #0]
 800999c:	b103      	cbz	r3, 80099a0 <_fstat_r+0x1c>
 800999e:	6023      	str	r3, [r4, #0]
 80099a0:	bd38      	pop	{r3, r4, r5, pc}
 80099a2:	bf00      	nop
 80099a4:	2000795c 	.word	0x2000795c

080099a8 <_isatty_r>:
 80099a8:	b538      	push	{r3, r4, r5, lr}
 80099aa:	4d06      	ldr	r5, [pc, #24]	; (80099c4 <_isatty_r+0x1c>)
 80099ac:	2300      	movs	r3, #0
 80099ae:	4604      	mov	r4, r0
 80099b0:	4608      	mov	r0, r1
 80099b2:	602b      	str	r3, [r5, #0]
 80099b4:	f7f7 fdbd 	bl	8001532 <_isatty>
 80099b8:	1c43      	adds	r3, r0, #1
 80099ba:	d102      	bne.n	80099c2 <_isatty_r+0x1a>
 80099bc:	682b      	ldr	r3, [r5, #0]
 80099be:	b103      	cbz	r3, 80099c2 <_isatty_r+0x1a>
 80099c0:	6023      	str	r3, [r4, #0]
 80099c2:	bd38      	pop	{r3, r4, r5, pc}
 80099c4:	2000795c 	.word	0x2000795c

080099c8 <_lseek_r>:
 80099c8:	b538      	push	{r3, r4, r5, lr}
 80099ca:	4d07      	ldr	r5, [pc, #28]	; (80099e8 <_lseek_r+0x20>)
 80099cc:	4604      	mov	r4, r0
 80099ce:	4608      	mov	r0, r1
 80099d0:	4611      	mov	r1, r2
 80099d2:	2200      	movs	r2, #0
 80099d4:	602a      	str	r2, [r5, #0]
 80099d6:	461a      	mov	r2, r3
 80099d8:	f7f7 fdb6 	bl	8001548 <_lseek>
 80099dc:	1c43      	adds	r3, r0, #1
 80099de:	d102      	bne.n	80099e6 <_lseek_r+0x1e>
 80099e0:	682b      	ldr	r3, [r5, #0]
 80099e2:	b103      	cbz	r3, 80099e6 <_lseek_r+0x1e>
 80099e4:	6023      	str	r3, [r4, #0]
 80099e6:	bd38      	pop	{r3, r4, r5, pc}
 80099e8:	2000795c 	.word	0x2000795c

080099ec <__malloc_lock>:
 80099ec:	4801      	ldr	r0, [pc, #4]	; (80099f4 <__malloc_lock+0x8>)
 80099ee:	f7ff bb1d 	b.w	800902c <__retarget_lock_acquire_recursive>
 80099f2:	bf00      	nop
 80099f4:	20007950 	.word	0x20007950

080099f8 <__malloc_unlock>:
 80099f8:	4801      	ldr	r0, [pc, #4]	; (8009a00 <__malloc_unlock+0x8>)
 80099fa:	f7ff bb18 	b.w	800902e <__retarget_lock_release_recursive>
 80099fe:	bf00      	nop
 8009a00:	20007950 	.word	0x20007950

08009a04 <_read_r>:
 8009a04:	b538      	push	{r3, r4, r5, lr}
 8009a06:	4d07      	ldr	r5, [pc, #28]	; (8009a24 <_read_r+0x20>)
 8009a08:	4604      	mov	r4, r0
 8009a0a:	4608      	mov	r0, r1
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	2200      	movs	r2, #0
 8009a10:	602a      	str	r2, [r5, #0]
 8009a12:	461a      	mov	r2, r3
 8009a14:	f7f7 fd38 	bl	8001488 <_read>
 8009a18:	1c43      	adds	r3, r0, #1
 8009a1a:	d102      	bne.n	8009a22 <_read_r+0x1e>
 8009a1c:	682b      	ldr	r3, [r5, #0]
 8009a1e:	b103      	cbz	r3, 8009a22 <_read_r+0x1e>
 8009a20:	6023      	str	r3, [r4, #0]
 8009a22:	bd38      	pop	{r3, r4, r5, pc}
 8009a24:	2000795c 	.word	0x2000795c

08009a28 <_init>:
 8009a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2a:	bf00      	nop
 8009a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a2e:	bc08      	pop	{r3}
 8009a30:	469e      	mov	lr, r3
 8009a32:	4770      	bx	lr

08009a34 <_fini>:
 8009a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a36:	bf00      	nop
 8009a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a3a:	bc08      	pop	{r3}
 8009a3c:	469e      	mov	lr, r3
 8009a3e:	4770      	bx	lr
