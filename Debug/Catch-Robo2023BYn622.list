
Catch-Robo2023BYn622.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c9f4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d1c  0801cbf4  0801cbf4  0002cbf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020910  08020910  000401d4  2**0
                  CONTENTS
  4 .ARM          00000008  08020910  08020910  00030910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020918  08020918  000401d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020918  08020918  00030918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802091c  0802091c  0003091c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08020920  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000094  080209b4  00040094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000134  08020a54  00040134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00011024  200001d8  08020af4  000401d8  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  200111fc  08020af4  000411fc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000401d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   000430af  00000000  00000000  00040202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000092b2  00000000  00000000  000832b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002f08  00000000  00000000  0008c568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002d70  00000000  00000000  0008f470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003d6ae  00000000  00000000  000921e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004b2e4  00000000  00000000  000cf88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012a3ea  00000000  00000000  0011ab72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00244f5c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000cd54  00000000  00000000  00244fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d8 	.word	0x200001d8
 800021c:	00000000 	.word	0x00000000
 8000220:	0801cbdc 	.word	0x0801cbdc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001dc 	.word	0x200001dc
 800023c:	0801cbdc 	.word	0x0801cbdc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <PushTx8Bytes>:
CANTxBuf buffer[CAN_TXBUFFER_SIZE];
uint32_t readpoint = 0;
uint32_t writepoint = 0;
uint8_t isfull = 0;

HAL_StatusTypeDef PushTx8Bytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){
 80005e4:	b480      	push	{r7}
 80005e6:	b087      	sub	sp, #28
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
	buffer[writepoint].DLC = size;
 80005f0:	4b24      	ldr	r3, [pc, #144]	; (8000684 <PushTx8Bytes+0xa0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a24      	ldr	r2, [pc, #144]	; (8000688 <PushTx8Bytes+0xa4>)
 80005f6:	011b      	lsls	r3, r3, #4
 80005f8:	4413      	add	r3, r2
 80005fa:	3304      	adds	r3, #4
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	601a      	str	r2, [r3, #0]
	buffer[writepoint].ExtId = ExtId;
 8000600:	4b20      	ldr	r3, [pc, #128]	; (8000684 <PushTx8Bytes+0xa0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a20      	ldr	r2, [pc, #128]	; (8000688 <PushTx8Bytes+0xa4>)
 8000606:	011b      	lsls	r3, r3, #4
 8000608:	4413      	add	r3, r2
 800060a:	68fa      	ldr	r2, [r7, #12]
 800060c:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++)buffer[writepoint].bytes[i] = bytes[i];
 800060e:	2300      	movs	r3, #0
 8000610:	75fb      	strb	r3, [r7, #23]
 8000612:	e010      	b.n	8000636 <PushTx8Bytes+0x52>
 8000614:	7dfb      	ldrb	r3, [r7, #23]
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	18d1      	adds	r1, r2, r3
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <PushTx8Bytes+0xa0>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	7dfb      	ldrb	r3, [r7, #23]
 8000620:	7808      	ldrb	r0, [r1, #0]
 8000622:	4919      	ldr	r1, [pc, #100]	; (8000688 <PushTx8Bytes+0xa4>)
 8000624:	0112      	lsls	r2, r2, #4
 8000626:	440a      	add	r2, r1
 8000628:	4413      	add	r3, r2
 800062a:	3308      	adds	r3, #8
 800062c:	4602      	mov	r2, r0
 800062e:	701a      	strb	r2, [r3, #0]
 8000630:	7dfb      	ldrb	r3, [r7, #23]
 8000632:	3301      	adds	r3, #1
 8000634:	75fb      	strb	r3, [r7, #23]
 8000636:	7dfb      	ldrb	r3, [r7, #23]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	429a      	cmp	r2, r3
 800063c:	d8ea      	bhi.n	8000614 <PushTx8Bytes+0x30>

	if (isfull == 1)readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <PushTx8Bytes+0xa8>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d106      	bne.n	8000654 <PushTx8Bytes+0x70>
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <PushTx8Bytes+0xac>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	3301      	adds	r3, #1
 800064c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000650:	4a0f      	ldr	r2, [pc, #60]	; (8000690 <PushTx8Bytes+0xac>)
 8000652:	6013      	str	r3, [r2, #0]
	writepoint = (writepoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000654:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <PushTx8Bytes+0xa0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3301      	adds	r3, #1
 800065a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800065e:	4a09      	ldr	r2, [pc, #36]	; (8000684 <PushTx8Bytes+0xa0>)
 8000660:	6013      	str	r3, [r2, #0]

	if (writepoint == readpoint){
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <PushTx8Bytes+0xa0>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <PushTx8Bytes+0xac>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	429a      	cmp	r2, r3
 800066c:	d102      	bne.n	8000674 <PushTx8Bytes+0x90>
		isfull = 1;
 800066e:	4b07      	ldr	r3, [pc, #28]	; (800068c <PushTx8Bytes+0xa8>)
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
	}

	return HAL_OK;
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	371c      	adds	r7, #28
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	200024cc 	.word	0x200024cc
 8000688:	200004c8 	.word	0x200004c8
 800068c:	200024d0 	.word	0x200024d0
 8000690:	200024c8 	.word	0x200024c8

08000694 <PopSendTx8Bytes>:

HAL_StatusTypeDef PopSendTx8Bytes(){
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;

	txHeader.RTR = CAN_RTR_DATA; // Data frame
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
	txHeader.IDE = CAN_ID_EXT;	 // CAN Extend ID
 800069e:	2304      	movs	r3, #4
 80006a0:	60fb      	str	r3, [r7, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	763b      	strb	r3, [r7, #24]

	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 80006a6:	e035      	b.n	8000714 <PopSendTx8Bytes+0x80>
		if (isfull == 0 && readpoint == writepoint)break;
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <PopSendTx8Bytes+0xa0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d105      	bne.n	80006bc <PopSendTx8Bytes+0x28>
 80006b0:	4b21      	ldr	r3, [pc, #132]	; (8000738 <PopSendTx8Bytes+0xa4>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b21      	ldr	r3, [pc, #132]	; (800073c <PopSendTx8Bytes+0xa8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d034      	beq.n	8000726 <PopSendTx8Bytes+0x92>

		txHeader.DLC = buffer[readpoint].DLC;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <PopSendTx8Bytes+0xa4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a1f      	ldr	r2, [pc, #124]	; (8000740 <PopSendTx8Bytes+0xac>)
 80006c2:	011b      	lsls	r3, r3, #4
 80006c4:	4413      	add	r3, r2
 80006c6:	3304      	adds	r3, #4
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	617b      	str	r3, [r7, #20]
		txHeader.ExtId = buffer[readpoint].ExtId;
 80006cc:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <PopSendTx8Bytes+0xa4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a1b      	ldr	r2, [pc, #108]	; (8000740 <PopSendTx8Bytes+0xac>)
 80006d2:	011b      	lsls	r3, r3, #4
 80006d4:	4413      	add	r3, r2
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	60bb      	str	r3, [r7, #8]

		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, buffer[readpoint].bytes, &txMailbox);
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <PopSendTx8Bytes+0xb0>)
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <PopSendTx8Bytes+0xa4>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	011b      	lsls	r3, r3, #4
 80006e4:	3308      	adds	r3, #8
 80006e6:	4a16      	ldr	r2, [pc, #88]	; (8000740 <PopSendTx8Bytes+0xac>)
 80006e8:	441a      	add	r2, r3
 80006ea:	463b      	mov	r3, r7
 80006ec:	1d39      	adds	r1, r7, #4
 80006ee:	f002 fa13 	bl	8002b18 <HAL_CAN_AddTxMessage>
 80006f2:	4603      	mov	r3, r0
 80006f4:	77fb      	strb	r3, [r7, #31]
		if (ret != HAL_OK)return ret;
 80006f6:	7ffb      	ldrb	r3, [r7, #31]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <PopSendTx8Bytes+0x6c>
 80006fc:	7ffb      	ldrb	r3, [r7, #31]
 80006fe:	e014      	b.n	800072a <PopSendTx8Bytes+0x96>

		readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000700:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <PopSendTx8Bytes+0xa4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	3301      	adds	r3, #1
 8000706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800070a:	4a0b      	ldr	r2, [pc, #44]	; (8000738 <PopSendTx8Bytes+0xa4>)
 800070c:	6013      	str	r3, [r2, #0]
		isfull = 0;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <PopSendTx8Bytes+0xa0>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <PopSendTx8Bytes+0xb0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f002 facd 	bl	8002cb8 <HAL_CAN_GetTxMailboxesFreeLevel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d1c1      	bne.n	80006a8 <PopSendTx8Bytes+0x14>
 8000724:	e000      	b.n	8000728 <PopSendTx8Bytes+0x94>
		if (isfull == 0 && readpoint == writepoint)break;
 8000726:	bf00      	nop
	}

	return HAL_OK;
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	3720      	adds	r7, #32
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200024d0 	.word	0x200024d0
 8000738:	200024c8 	.word	0x200024c8
 800073c:	200024cc 	.word	0x200024cc
 8000740:	200004c8 	.word	0x200004c8
 8000744:	200001f4 	.word	0x200001f4

08000748 <WhenTxMailbox0_1_2CompleteCallbackCalled>:

void WhenTxMailbox0_1_2CompleteCallbackCalled(){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 800074c:	f7ff ffa2 	bl	8000694 <PopSendTx8Bytes>
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}

08000754 <WhenTxMailbox0_1_2AbortCallbackCalled>:

void WhenTxMailbox0_1_2AbortCallbackCalled(){
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 8000758:	f7ff ff9c 	bl	8000694 <PopSendTx8Bytes>
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <WhenCANRxFifo0MsgPending>:

void WhenCANRxFifo0MsgPending(CAN_HandleTypeDef *phcan, NUM_OF_DEVICES *num_of){ // Fifo0MsgPendingで呼び出すこと. CAN受信時に呼び出される関数
 8000760:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000764:	b08e      	sub	sp, #56	; 0x38
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
 800076a:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_CAN_GetRxMessage(phcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK){
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	f107 0218 	add.w	r2, r7, #24
 8000774:	2100      	movs	r1, #0
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f002 fad3 	bl	8002d22 <HAL_CAN_GetRxMessage>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d004      	beq.n	800078c <WhenCANRxFifo0MsgPending+0x2c>
		// Reception Error
		printf("GetRxMessage error\n\r");
 8000782:	486e      	ldr	r0, [pc, #440]	; (800093c <WhenCANRxFifo0MsgPending+0x1dc>)
 8000784:	f01b f906 	bl	801b994 <iprintf>
		Error_Handler();
 8000788:	f001 fa60 	bl	8001c4c <Error_Handler>
	}
	// awakeコマンドを受信した場合
	CAN_Device can_device = Extract_CAN_Device(rxHeader.ExtId);
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	2200      	movs	r2, #0
 8000790:	4698      	mov	r8, r3
 8000792:	4691      	mov	r9, r2
 8000794:	4640      	mov	r0, r8
 8000796:	4649      	mov	r1, r9
 8000798:	f000 fd18 	bl	80011cc <Extract_CAN_Device>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	733a      	strb	r2, [r7, #12]
 80007a2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80007a6:	737a      	strb	r2, [r7, #13]
 80007a8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80007ac:	73bb      	strb	r3, [r7, #14]
	uint8_t extracted_cmd = Extract_CAN_CMD(rxHeader.ExtId);
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	2200      	movs	r2, #0
 80007b2:	461c      	mov	r4, r3
 80007b4:	4615      	mov	r5, r2
 80007b6:	4620      	mov	r0, r4
 80007b8:	4629      	mov	r1, r5
 80007ba:	f000 fd53 	bl	8001264 <Extract_CAN_CMD>
 80007be:	4603      	mov	r3, r0
 80007c0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(extracted_cmd == AWAKE_CMD){
 80007c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d139      	bne.n	8000840 <WhenCANRxFifo0MsgPending+0xe0>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 80007cc:	2300      	movs	r3, #0
 80007ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80007d2:	e013      	b.n	80007fc <WhenCANRxFifo0MsgPending+0x9c>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 80007d4:	7b3b      	ldrb	r3, [r7, #12]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80007dc:	4958      	ldr	r1, [pc, #352]	; (8000940 <WhenCANRxFifo0MsgPending+0x1e0>)
 80007de:	4603      	mov	r3, r0
 80007e0:	00db      	lsls	r3, r3, #3
 80007e2:	1a1b      	subs	r3, r3, r0
 80007e4:	440b      	add	r3, r1
 80007e6:	4413      	add	r3, r2
 80007e8:	781a      	ldrb	r2, [r3, #0]
 80007ea:	7c3b      	ldrb	r3, [r7, #16]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	f000 80a0 	beq.w	8000932 <WhenCANRxFifo0MsgPending+0x1d2>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 80007f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007f6:	3301      	adds	r3, #1
 80007f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80007fc:	7b3b      	ldrb	r3, [r7, #12]
 80007fe:	461a      	mov	r2, r3
 8000800:	4b50      	ldr	r3, [pc, #320]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000802:	5c9b      	ldrb	r3, [r3, r2]
 8000804:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000808:	429a      	cmp	r2, r3
 800080a:	d3e3      	bcc.n	80007d4 <WhenCANRxFifo0MsgPending+0x74>
		}
		node_id_list[can_device.node_type][num_detected[can_device.node_type]] = rxData[0];
 800080c:	7b3b      	ldrb	r3, [r7, #12]
 800080e:	4619      	mov	r1, r3
 8000810:	7b3b      	ldrb	r3, [r7, #12]
 8000812:	461a      	mov	r2, r3
 8000814:	4b4b      	ldr	r3, [pc, #300]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000816:	5c9b      	ldrb	r3, [r3, r2]
 8000818:	461c      	mov	r4, r3
 800081a:	7c38      	ldrb	r0, [r7, #16]
 800081c:	4a48      	ldr	r2, [pc, #288]	; (8000940 <WhenCANRxFifo0MsgPending+0x1e0>)
 800081e:	460b      	mov	r3, r1
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	1a5b      	subs	r3, r3, r1
 8000824:	4413      	add	r3, r2
 8000826:	4423      	add	r3, r4
 8000828:	4602      	mov	r2, r0
 800082a:	701a      	strb	r2, [r3, #0]
		num_detected[can_device.node_type] += 1;
 800082c:	7b3b      	ldrb	r3, [r7, #12]
 800082e:	461a      	mov	r2, r3
 8000830:	4b44      	ldr	r3, [pc, #272]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000832:	5c9b      	ldrb	r3, [r3, r2]
 8000834:	7b3a      	ldrb	r2, [r7, #12]
 8000836:	3301      	adds	r3, #1
 8000838:	b2d9      	uxtb	r1, r3
 800083a:	4b42      	ldr	r3, [pc, #264]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 800083c:	5499      	strb	r1, [r3, r2]
 800083e:	e04a      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
	}else if(extracted_cmd == FB_CMD){
 8000840:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000844:	2b01      	cmp	r3, #1
 8000846:	d146      	bne.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
		if (can_device.node_type == NODE_MCMD1){
 8000848:	7b3b      	ldrb	r3, [r7, #12]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d10d      	bne.n	800086a <WhenCANRxFifo0MsgPending+0x10a>
			memcpy(&(_feedback_table_mcmd1[can_device.node_id].feedback_motor[can_device.device_num]),
 800084e:	7b7b      	ldrb	r3, [r7, #13]
 8000850:	7bba      	ldrb	r2, [r7, #14]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	4413      	add	r3, r2
 8000856:	00db      	lsls	r3, r3, #3
 8000858:	4a3b      	ldr	r2, [pc, #236]	; (8000948 <WhenCANRxFifo0MsgPending+0x1e8>)
 800085a:	4413      	add	r3, r2
 800085c:	461a      	mov	r2, r3
 800085e:	f107 0310 	add.w	r3, r7, #16
 8000862:	cb03      	ldmia	r3!, {r0, r1}
 8000864:	6010      	str	r0, [r2, #0]
 8000866:	6051      	str	r1, [r2, #4]
 8000868:	e035      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
                   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD2){
 800086a:	7b3b      	ldrb	r3, [r7, #12]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d10d      	bne.n	800088c <WhenCANRxFifo0MsgPending+0x12c>
			memcpy(&(_feedback_table_mcmd2[can_device.node_id].feedback_motor[can_device.device_num]),
 8000870:	7b7b      	ldrb	r3, [r7, #13]
 8000872:	7bba      	ldrb	r2, [r7, #14]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	4413      	add	r3, r2
 8000878:	00db      	lsls	r3, r3, #3
 800087a:	4a34      	ldr	r2, [pc, #208]	; (800094c <WhenCANRxFifo0MsgPending+0x1ec>)
 800087c:	4413      	add	r3, r2
 800087e:	461a      	mov	r2, r3
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	cb03      	ldmia	r3!, {r0, r1}
 8000886:	6010      	str	r0, [r2, #0]
 8000888:	6051      	str	r1, [r2, #4]
 800088a:	e024      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD3){
 800088c:	7b3b      	ldrb	r3, [r7, #12]
 800088e:	2b03      	cmp	r3, #3
 8000890:	d10d      	bne.n	80008ae <WhenCANRxFifo0MsgPending+0x14e>
			memcpy(&(_feedback_table_mcmd3[can_device.node_id].feedback_motor[can_device.device_num]),
 8000892:	7b7b      	ldrb	r3, [r7, #13]
 8000894:	7bba      	ldrb	r2, [r7, #14]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	4413      	add	r3, r2
 800089a:	00db      	lsls	r3, r3, #3
 800089c:	4a2c      	ldr	r2, [pc, #176]	; (8000950 <WhenCANRxFifo0MsgPending+0x1f0>)
 800089e:	4413      	add	r3, r2
 80008a0:	461a      	mov	r2, r3
 80008a2:	f107 0310 	add.w	r3, r7, #16
 80008a6:	cb03      	ldmia	r3!, {r0, r1}
 80008a8:	6010      	str	r0, [r2, #0]
 80008aa:	6051      	str	r1, [r2, #4]
 80008ac:	e013      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD4){
 80008ae:	7b3b      	ldrb	r3, [r7, #12]
 80008b0:	2b06      	cmp	r3, #6
 80008b2:	d10d      	bne.n	80008d0 <WhenCANRxFifo0MsgPending+0x170>
			memcpy(&(_feedback_table_mcmd4[can_device.node_id].feedback_motor[can_device.device_num]),
 80008b4:	7b7b      	ldrb	r3, [r7, #13]
 80008b6:	7bba      	ldrb	r2, [r7, #14]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	4413      	add	r3, r2
 80008bc:	00db      	lsls	r3, r3, #3
 80008be:	4a25      	ldr	r2, [pc, #148]	; (8000954 <WhenCANRxFifo0MsgPending+0x1f4>)
 80008c0:	4413      	add	r3, r2
 80008c2:	461a      	mov	r2, r3
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	cb03      	ldmia	r3!, {r0, r1}
 80008ca:	6010      	str	r0, [r2, #0]
 80008cc:	6051      	str	r1, [r2, #4]
 80008ce:	e002      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else{
			printf("Error\n\r");
 80008d0:	4821      	ldr	r0, [pc, #132]	; (8000958 <WhenCANRxFifo0MsgPending+0x1f8>)
 80008d2:	f01b f85f 	bl	801b994 <iprintf>
		}
	}else{

    }
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 80008d6:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008d8:	785a      	ldrb	r2, [r3, #1]
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	429a      	cmp	r2, r3
 80008e0:	d128      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008e4:	789a      	ldrb	r2, [r3, #2]
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	785b      	ldrb	r3, [r3, #1]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d122      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008f0:	78da      	ldrb	r2, [r3, #3]
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	789b      	ldrb	r3, [r3, #2]
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d11c      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008fc:	791a      	ldrb	r2, [r3, #4]
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	78db      	ldrb	r3, [r3, #3]
 8000902:	429a      	cmp	r2, r3
 8000904:	d116      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000908:	795a      	ldrb	r2, [r3, #5]
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	791b      	ldrb	r3, [r3, #4]
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 800090e:	429a      	cmp	r2, r3
 8000910:	d110      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000914:	799a      	ldrb	r2, [r3, #6]
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	795b      	ldrb	r3, [r3, #5]
 800091a:	429a      	cmp	r2, r3
 800091c:	d10a      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000920:	7a1a      	ldrb	r2, [r3, #8]
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	799b      	ldrb	r3, [r3, #6]
 8000926:	429a      	cmp	r2, r3
 8000928:	d104      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		all_node_detected = 1;
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <WhenCANRxFifo0MsgPending+0x1fc>)
 800092c:	2201      	movs	r2, #1
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	e000      	b.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000932:	bf00      	nop
	}
}
 8000934:	3738      	adds	r7, #56	; 0x38
 8000936:	46bd      	mov	sp, r7
 8000938:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800093c:	0801cbf4 	.word	0x0801cbf4
 8000940:	20000208 	.word	0x20000208
 8000944:	200001fc 	.word	0x200001fc
 8000948:	20000248 	.word	0x20000248
 800094c:	200002e8 	.word	0x200002e8
 8000950:	20000388 	.word	0x20000388
 8000954:	20000428 	.word	0x20000428
 8000958:	0801cc0c 	.word	0x0801cc0c
 800095c:	200001f8 	.word	0x200001f8

08000960 <SendBytes>:

HAL_StatusTypeDef SendBytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){ // 命令を送信する関数
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
	uint32_t quotient = size / 8;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	08db      	lsrs	r3, r3, #3
 8000970:	61bb      	str	r3, [r7, #24]
	uint32_t remainder = size - (8 * quotient);
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef ret;

	for (uint8_t i = 0; i < quotient; i++){
 800097c:	2300      	movs	r3, #0
 800097e:	77fb      	strb	r3, [r7, #31]
 8000980:	e015      	b.n	80009ae <SendBytes+0x4e>
		ret = PushTx8Bytes(ExtId, bytes + i * 8, 8);
 8000982:	7ffb      	ldrb	r3, [r7, #31]
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	461a      	mov	r2, r3
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	4413      	add	r3, r2
 800098c:	2208      	movs	r2, #8
 800098e:	4619      	mov	r1, r3
 8000990:	68f8      	ldr	r0, [r7, #12]
 8000992:	f7ff fe27 	bl	80005e4 <PushTx8Bytes>
 8000996:	4603      	mov	r3, r0
 8000998:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 800099a:	7cfb      	ldrb	r3, [r7, #19]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d003      	beq.n	80009a8 <SendBytes+0x48>
			Error_Handler();
 80009a0:	f001 f954 	bl	8001c4c <Error_Handler>
			return ret;
 80009a4:	7cfb      	ldrb	r3, [r7, #19]
 80009a6:	e027      	b.n	80009f8 <SendBytes+0x98>
	for (uint8_t i = 0; i < quotient; i++){
 80009a8:	7ffb      	ldrb	r3, [r7, #31]
 80009aa:	3301      	adds	r3, #1
 80009ac:	77fb      	strb	r3, [r7, #31]
 80009ae:	7ffb      	ldrb	r3, [r7, #31]
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d8e5      	bhi.n	8000982 <SendBytes+0x22>
		}
	}

	if(remainder != 0){
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d011      	beq.n	80009e0 <SendBytes+0x80>
		ret = PushTx8Bytes(ExtId, bytes + quotient * 8, remainder);
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	00db      	lsls	r3, r3, #3
 80009c0:	68ba      	ldr	r2, [r7, #8]
 80009c2:	4413      	add	r3, r2
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	4619      	mov	r1, r3
 80009c8:	68f8      	ldr	r0, [r7, #12]
 80009ca:	f7ff fe0b 	bl	80005e4 <PushTx8Bytes>
 80009ce:	4603      	mov	r3, r0
 80009d0:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 80009d2:	7cfb      	ldrb	r3, [r7, #19]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d003      	beq.n	80009e0 <SendBytes+0x80>
			Error_Handler();
 80009d8:	f001 f938 	bl	8001c4c <Error_Handler>
			return ret;
 80009dc:	7cfb      	ldrb	r3, [r7, #19]
 80009de:	e00b      	b.n	80009f8 <SendBytes+0x98>
		}
	}

	ret = PopSendTx8Bytes();
 80009e0:	f7ff fe58 	bl	8000694 <PopSendTx8Bytes>
 80009e4:	4603      	mov	r3, r0
 80009e6:	74fb      	strb	r3, [r7, #19]
	if (ret != HAL_OK){
 80009e8:	7cfb      	ldrb	r3, [r7, #19]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d003      	beq.n	80009f6 <SendBytes+0x96>
		Error_Handler();
 80009ee:	f001 f92d 	bl	8001c4c <Error_Handler>
		return ret;
 80009f2:	7cfb      	ldrb	r3, [r7, #19]
 80009f4:	e000      	b.n	80009f8 <SendBytes+0x98>
	}

	return HAL_OK;
 80009f6:	2300      	movs	r3, #0
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3720      	adds	r7, #32
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <CAN_SystemInit>:
 * @brief CANのシステムをアクティベートする. 具体的にはメッセージフィルターの設定とhal_can_start.
 *
 * @param _hcan
 * @param can_param
 */
void CAN_SystemInit(CAN_HandleTypeDef *_hcan){ // CANの初期化
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08e      	sub	sp, #56	; 0x38
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	phcan = _hcan;
 8000a08:	4a09      	ldr	r2, [pc, #36]	; (8000a30 <CAN_SystemInit+0x30>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6013      	str	r3, [r2, #0]

	all_node_detected = 0;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <CAN_SystemInit+0x34>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000a14:	2300      	movs	r3, #0
 8000a16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000a1a:	e029      	b.n	8000a70 <CAN_SystemInit+0x70>
		num_detected[type] = 0;
 8000a1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a20:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <CAN_SystemInit+0x38>)
 8000a22:	2100      	movs	r1, #0
 8000a24:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 0b111; i++){
 8000a26:	2300      	movs	r3, #0
 8000a28:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000a2c:	e017      	b.n	8000a5e <CAN_SystemInit+0x5e>
 8000a2e:	bf00      	nop
 8000a30:	200001f4 	.word	0x200001f4
 8000a34:	200001f8 	.word	0x200001f8
 8000a38:	200001fc 	.word	0x200001fc
			node_id_list[type][i] = 0xff;
 8000a3c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000a40:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8000a44:	48d7      	ldr	r0, [pc, #860]	; (8000da4 <CAN_SystemInit+0x3a4>)
 8000a46:	4613      	mov	r3, r2
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	1a9b      	subs	r3, r3, r2
 8000a4c:	4403      	add	r3, r0
 8000a4e:	440b      	add	r3, r1
 8000a50:	22ff      	movs	r2, #255	; 0xff
 8000a52:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 0b111; i++){
 8000a54:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000a58:	3301      	adds	r3, #1
 8000a5a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000a5e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d9ea      	bls.n	8000a3c <CAN_SystemInit+0x3c>
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000a66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000a70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a74:	2b08      	cmp	r3, #8
 8000a76:	d9d1      	bls.n	8000a1c <CAN_SystemInit+0x1c>
		}
	}

	//フィルタバンク設定
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000a84:	2301      	movs	r3, #1
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.SlaveStartFilterBank = 14;
 8000a88:	230e      	movs	r3, #14
 8000a8a:	633b      	str	r3, [r7, #48]	; 0x30

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000a90:	2300      	movs	r3, #0
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	2001      	movs	r0, #1
 8000a98:	f000 fb6b 	bl	8001172 <Make_CAN_ID>
 8000a9c:	f04f 0200 	mov.w	r2, #0
 8000aa0:	f04f 0300 	mov.w	r3, #0
 8000aa4:	0b42      	lsrs	r2, r0, #13
 8000aa6:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000aaa:	0b4b      	lsrs	r3, r1, #13
 8000aac:	4613      	mov	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) >> 13;
 8000ab0:	231f      	movs	r3, #31
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f000 fb5b 	bl	8001172 <Make_CAN_ID>
 8000abc:	f04f 0200 	mov.w	r2, #0
 8000ac0:	f04f 0300 	mov.w	r3, #0
 8000ac4:	0b42      	lsrs	r2, r0, #13
 8000ac6:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000aca:	0b4b      	lsrs	r3, r1, #13
 8000acc:	4613      	mov	r3, r2
 8000ace:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f000 fb4b 	bl	8001172 <Make_CAN_ID>
 8000adc:	4602      	mov	r2, r0
 8000ade:	460b      	mov	r3, r1
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	00da      	lsls	r2, r3, #3
 8000ae4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ae8:	4013      	ands	r3, r2
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000af0:	231f      	movs	r3, #31
 8000af2:	2200      	movs	r2, #0
 8000af4:	2100      	movs	r1, #0
 8000af6:	2001      	movs	r0, #1
 8000af8:	f000 fb3b 	bl	8001172 <Make_CAN_ID>
 8000afc:	4602      	mov	r2, r0
 8000afe:	460b      	mov	r3, r1
 8000b00:	4613      	mov	r3, r2
 8000b02:	00da      	lsls	r2, r3, #3
 8000b04:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000b08:	4013      	ands	r3, r2
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000b10:	4ba5      	ldr	r3, [pc, #660]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f107 020c 	add.w	r2, r7, #12
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 fecc 	bl	80028b8 <HAL_CAN_ConfigFilter>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <CAN_SystemInit+0x12a>
		/* Filter configuration Error */
		Error_Handler();
 8000b26:	f001 f891 	bl	8001c4c <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 1;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000b2e:	2300      	movs	r3, #0
 8000b30:	2200      	movs	r2, #0
 8000b32:	2100      	movs	r1, #0
 8000b34:	2002      	movs	r0, #2
 8000b36:	f000 fb1c 	bl	8001172 <Make_CAN_ID>
 8000b3a:	f04f 0200 	mov.w	r2, #0
 8000b3e:	f04f 0300 	mov.w	r3, #0
 8000b42:	0b42      	lsrs	r2, r0, #13
 8000b44:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000b48:	0b4b      	lsrs	r3, r1, #13
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) >> 13;
 8000b4e:	231f      	movs	r3, #31
 8000b50:	2200      	movs	r2, #0
 8000b52:	2100      	movs	r1, #0
 8000b54:	2002      	movs	r0, #2
 8000b56:	f000 fb0c 	bl	8001172 <Make_CAN_ID>
 8000b5a:	f04f 0200 	mov.w	r2, #0
 8000b5e:	f04f 0300 	mov.w	r3, #0
 8000b62:	0b42      	lsrs	r2, r0, #13
 8000b64:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000b68:	0b4b      	lsrs	r3, r1, #13
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000b6e:	2300      	movs	r3, #0
 8000b70:	2200      	movs	r2, #0
 8000b72:	2100      	movs	r1, #0
 8000b74:	2002      	movs	r0, #2
 8000b76:	f000 fafc 	bl	8001172 <Make_CAN_ID>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	4613      	mov	r3, r2
 8000b80:	00da      	lsls	r2, r3, #3
 8000b82:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000b86:	4013      	ands	r3, r2
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000b8e:	231f      	movs	r3, #31
 8000b90:	2200      	movs	r2, #0
 8000b92:	2100      	movs	r1, #0
 8000b94:	2002      	movs	r0, #2
 8000b96:	f000 faec 	bl	8001172 <Make_CAN_ID>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	00da      	lsls	r2, r3, #3
 8000ba2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	f043 0304 	orr.w	r3, r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000bae:	4b7e      	ldr	r3, [pc, #504]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f107 020c 	add.w	r2, r7, #12
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 fe7d 	bl	80028b8 <HAL_CAN_ConfigFilter>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <CAN_SystemInit+0x1c8>
		/* Filter configuration Error */
		Error_Handler();
 8000bc4:	f001 f842 	bl	8001c4c <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 2;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) >> 13;				   // 上16bit
 8000bcc:	2300      	movs	r3, #0
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2003      	movs	r0, #3
 8000bd4:	f000 facd 	bl	8001172 <Make_CAN_ID>
 8000bd8:	f04f 0200 	mov.w	r2, #0
 8000bdc:	f04f 0300 	mov.w	r3, #0
 8000be0:	0b42      	lsrs	r2, r0, #13
 8000be2:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000be6:	0b4b      	lsrs	r3, r1, #13
 8000be8:	4613      	mov	r3, r2
 8000bea:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) >> 13;					   // TODO : 治す
 8000bec:	231f      	movs	r3, #31
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2003      	movs	r0, #3
 8000bf4:	f000 fabd 	bl	8001172 <Make_CAN_ID>
 8000bf8:	f04f 0200 	mov.w	r2, #0
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	0b42      	lsrs	r2, r0, #13
 8000c02:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000c06:	0b4b      	lsrs	r3, r1, #13
 8000c08:	4613      	mov	r3, r2
 8000c0a:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2003      	movs	r0, #3
 8000c14:	f000 faad 	bl	8001172 <Make_CAN_ID>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	00da      	lsls	r2, r3, #3
 8000c20:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000c24:	4013      	ands	r3, r2
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000c2c:	231f      	movs	r3, #31
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2003      	movs	r0, #3
 8000c34:	f000 fa9d 	bl	8001172 <Make_CAN_ID>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	00da      	lsls	r2, r3, #3
 8000c40:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000c44:	4013      	ands	r3, r2
 8000c46:	f043 0304 	orr.w	r3, r3, #4
 8000c4a:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000c4c:	4b56      	ldr	r3, [pc, #344]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f107 020c 	add.w	r2, r7, #12
 8000c54:	4611      	mov	r1, r2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 fe2e 	bl	80028b8 <HAL_CAN_ConfigFilter>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <CAN_SystemInit+0x266>
		/* Filter configuration Error */
		Error_Handler();
 8000c62:	f000 fff3 	bl	8001c4c <Error_Handler>
	}

	// FIFO0にfeedback用のフィルタを設定
	sFilterConfig.FilterBank = 3;
 8000c66:	2303      	movs	r3, #3
 8000c68:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) >> 13; // 上16bit
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2000      	movs	r0, #0
 8000c72:	f000 fa7e 	bl	8001172 <Make_CAN_ID>
 8000c76:	f04f 0200 	mov.w	r2, #0
 8000c7a:	f04f 0300 	mov.w	r3, #0
 8000c7e:	0b42      	lsrs	r2, r0, #13
 8000c80:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000c84:	0b4b      	lsrs	r3, r1, #13
 8000c86:	4613      	mov	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(0, 0, 0, 0b11111) >> 13;
 8000c8a:	231f      	movs	r3, #31
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2000      	movs	r0, #0
 8000c92:	f000 fa6e 	bl	8001172 <Make_CAN_ID>
 8000c96:	f04f 0200 	mov.w	r2, #0
 8000c9a:	f04f 0300 	mov.w	r3, #0
 8000c9e:	0b42      	lsrs	r2, r0, #13
 8000ca0:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000ca4:	0b4b      	lsrs	r3, r1, #13
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000caa:	2301      	movs	r3, #1
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f000 fa5e 	bl	8001172 <Make_CAN_ID>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	460b      	mov	r3, r1
 8000cba:	4613      	mov	r3, r2
 8000cbc:	00da      	lsls	r2, r3, #3
 8000cbe:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(0, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000cca:	231f      	movs	r3, #31
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f000 fa4e 	bl	8001172 <Make_CAN_ID>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	460b      	mov	r3, r1
 8000cda:	4613      	mov	r3, r2
 8000cdc:	00da      	lsls	r2, r3, #3
 8000cde:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000cea:	4b2f      	ldr	r3, [pc, #188]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f107 020c 	add.w	r2, r7, #12
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f001 fddf 	bl	80028b8 <HAL_CAN_ConfigFilter>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <CAN_SystemInit+0x304>
		/* Filter configuration Error */
		Error_Handler();
 8000d00:	f000 ffa4 	bl	8001c4c <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 4;
 8000d04:	2304      	movs	r3, #4
 8000d06:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) >> 13; // 上16bit
 8000d08:	2300      	movs	r3, #0
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2004      	movs	r0, #4
 8000d10:	f000 fa2f 	bl	8001172 <Make_CAN_ID>
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	0b42      	lsrs	r2, r0, #13
 8000d1e:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000d22:	0b4b      	lsrs	r3, r1, #13
 8000d24:	4613      	mov	r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) >> 13;
 8000d28:	231f      	movs	r3, #31
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2004      	movs	r0, #4
 8000d30:	f000 fa1f 	bl	8001172 <Make_CAN_ID>
 8000d34:	f04f 0200 	mov.w	r2, #0
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	0b42      	lsrs	r2, r0, #13
 8000d3e:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000d42:	0b4b      	lsrs	r3, r1, #13
 8000d44:	4613      	mov	r3, r2
 8000d46:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000d48:	2300      	movs	r3, #0
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2004      	movs	r0, #4
 8000d50:	f000 fa0f 	bl	8001172 <Make_CAN_ID>
 8000d54:	4602      	mov	r2, r0
 8000d56:	460b      	mov	r3, r1
 8000d58:	4613      	mov	r3, r2
 8000d5a:	00da      	lsls	r2, r3, #3
 8000d5c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000d60:	4013      	ands	r3, r2
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000d68:	231f      	movs	r3, #31
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2004      	movs	r0, #4
 8000d70:	f000 f9ff 	bl	8001172 <Make_CAN_ID>
 8000d74:	4602      	mov	r2, r0
 8000d76:	460b      	mov	r3, r1
 8000d78:	4613      	mov	r3, r2
 8000d7a:	00da      	lsls	r2, r3, #3
 8000d7c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000d80:	4013      	ands	r3, r2
 8000d82:	f043 0304 	orr.w	r3, r3, #4
 8000d86:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f107 020c 	add.w	r2, r7, #12
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 fd90 	bl	80028b8 <HAL_CAN_ConfigFilter>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d006      	beq.n	8000dac <CAN_SystemInit+0x3ac>
		/* Filter configuration Error */
		Error_Handler();
 8000d9e:	f000 ff55 	bl	8001c4c <Error_Handler>
 8000da2:	e003      	b.n	8000dac <CAN_SystemInit+0x3ac>
 8000da4:	20000208 	.word	0x20000208
 8000da8:	200001f4 	.word	0x200001f4
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 5;
 8000dac:	2305      	movs	r3, #5
 8000dae:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 8000db0:	2300      	movs	r3, #0
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	2005      	movs	r0, #5
 8000db8:	f000 f9db 	bl	8001172 <Make_CAN_ID>
 8000dbc:	f04f 0200 	mov.w	r2, #0
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	0b42      	lsrs	r2, r0, #13
 8000dc6:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000dca:	0b4b      	lsrs	r3, r1, #13
 8000dcc:	4613      	mov	r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) >> 13;
 8000dd0:	231f      	movs	r3, #31
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2005      	movs	r0, #5
 8000dd8:	f000 f9cb 	bl	8001172 <Make_CAN_ID>
 8000ddc:	f04f 0200 	mov.w	r2, #0
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	0b42      	lsrs	r2, r0, #13
 8000de6:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000dea:	0b4b      	lsrs	r3, r1, #13
 8000dec:	4613      	mov	r3, r2
 8000dee:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000df0:	2300      	movs	r3, #0
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	2005      	movs	r0, #5
 8000df8:	f000 f9bb 	bl	8001172 <Make_CAN_ID>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	4613      	mov	r3, r2
 8000e02:	00da      	lsls	r2, r3, #3
 8000e04:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000e08:	4013      	ands	r3, r2
 8000e0a:	f043 0304 	orr.w	r3, r3, #4
 8000e0e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000e10:	231f      	movs	r3, #31
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	2005      	movs	r0, #5
 8000e18:	f000 f9ab 	bl	8001172 <Make_CAN_ID>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	4613      	mov	r3, r2
 8000e22:	00da      	lsls	r2, r3, #3
 8000e24:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000e28:	4013      	ands	r3, r2
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000e30:	4b44      	ldr	r3, [pc, #272]	; (8000f44 <CAN_SystemInit+0x544>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f107 020c 	add.w	r2, r7, #12
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 fd3c 	bl	80028b8 <HAL_CAN_ConfigFilter>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <CAN_SystemInit+0x44a>
		/* Filter configuration Error */
		Error_Handler();
 8000e46:	f000 ff01 	bl	8001c4c <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 6;
 8000e4a:	2306      	movs	r3, #6
 8000e4c:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 8000e4e:	2300      	movs	r3, #0
 8000e50:	2200      	movs	r2, #0
 8000e52:	2100      	movs	r1, #0
 8000e54:	2006      	movs	r0, #6
 8000e56:	f000 f98c 	bl	8001172 <Make_CAN_ID>
 8000e5a:	f04f 0200 	mov.w	r2, #0
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	0b42      	lsrs	r2, r0, #13
 8000e64:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000e68:	0b4b      	lsrs	r3, r1, #13
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) >> 13;
 8000e6e:	231f      	movs	r3, #31
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	2006      	movs	r0, #6
 8000e76:	f000 f97c 	bl	8001172 <Make_CAN_ID>
 8000e7a:	f04f 0200 	mov.w	r2, #0
 8000e7e:	f04f 0300 	mov.w	r3, #0
 8000e82:	0b42      	lsrs	r2, r0, #13
 8000e84:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000e88:	0b4b      	lsrs	r3, r1, #13
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000e8e:	2300      	movs	r3, #0
 8000e90:	2200      	movs	r2, #0
 8000e92:	2100      	movs	r1, #0
 8000e94:	2006      	movs	r0, #6
 8000e96:	f000 f96c 	bl	8001172 <Make_CAN_ID>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	00da      	lsls	r2, r3, #3
 8000ea2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000eae:	231f      	movs	r3, #31
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2006      	movs	r0, #6
 8000eb6:	f000 f95c 	bl	8001172 <Make_CAN_ID>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	00da      	lsls	r2, r3, #3
 8000ec2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000ece:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <CAN_SystemInit+0x544>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f107 020c 	add.w	r2, r7, #12
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f001 fced 	bl	80028b8 <HAL_CAN_ConfigFilter>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <CAN_SystemInit+0x4e8>
		/* Filter configuration Error */
		Error_Handler();
 8000ee4:	f000 feb2 	bl	8001c4c <Error_Handler>
	}

	if (HAL_CAN_Start(phcan) != HAL_OK){
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <CAN_SystemInit+0x544>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 fdcf 	bl	8002a90 <HAL_CAN_Start>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d004      	beq.n	8000f02 <CAN_SystemInit+0x502>
		printf(" -> Start Error\n");
 8000ef8:	4813      	ldr	r0, [pc, #76]	; (8000f48 <CAN_SystemInit+0x548>)
 8000efa:	f01a fde7 	bl	801bacc <puts>
		Error_Handler();
 8000efe:	f000 fea5 	bl	8001c4c <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <CAN_SystemInit+0x544>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2102      	movs	r1, #2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f002 f81c 	bl	8002f46 <HAL_CAN_ActivateNotification>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d004      	beq.n	8000f1e <CAN_SystemInit+0x51e>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 8000f14:	480d      	ldr	r0, [pc, #52]	; (8000f4c <CAN_SystemInit+0x54c>)
 8000f16:	f01a fd3d 	bl	801b994 <iprintf>
		Error_Handler();
 8000f1a:	f000 fe97 	bl	8001c4c <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK){
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <CAN_SystemInit+0x544>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2101      	movs	r1, #1
 8000f24:	4618      	mov	r0, r3
 8000f26:	f002 f80e 	bl	8002f46 <HAL_CAN_ActivateNotification>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d004      	beq.n	8000f3a <CAN_SystemInit+0x53a>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 8000f30:	4806      	ldr	r0, [pc, #24]	; (8000f4c <CAN_SystemInit+0x54c>)
 8000f32:	f01a fd2f 	bl	801b994 <iprintf>
		Error_Handler();
 8000f36:	f000 fe89 	bl	8001c4c <Error_Handler>
	}
}
 8000f3a:	bf00      	nop
 8000f3c:	3738      	adds	r7, #56	; 0x38
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200001f4 	.word	0x200001f4
 8000f48:	0801cc14 	.word	0x0801cc14
 8000f4c:	0801cc24 	.word	0x0801cc24

08000f50 <CAN_WaitConnect>:

/**
 * @brief CANの全デバイスの接続が確認されるまで待つ.
 *
 */
void CAN_WaitConnect(NUM_OF_DEVICES *num_of){ // 他のデバイスが接続されるのを待つ
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	while (all_node_detected == 0){
 8000f58:	e006      	b.n	8000f68 <CAN_WaitConnect+0x18>
		printf("Waiting CAN_NODES Wake Up...\n\r");
 8000f5a:	484c      	ldr	r0, [pc, #304]	; (800108c <CAN_WaitConnect+0x13c>)
 8000f5c:	f01a fd1a 	bl	801b994 <iprintf>
		HAL_Delay(500);
 8000f60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f64:	f001 fb88 	bl	8002678 <HAL_Delay>
	while (all_node_detected == 0){
 8000f68:	4b49      	ldr	r3, [pc, #292]	; (8001090 <CAN_WaitConnect+0x140>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0f3      	beq.n	8000f5a <CAN_WaitConnect+0xa>
	}
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	e00a      	b.n	8000f8e <CAN_WaitConnect+0x3e>
		printf("MCMD1 No.%d\n\r", node_id_list[NODE_MCMD1][i]);
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	4a46      	ldr	r2, [pc, #280]	; (8001094 <CAN_WaitConnect+0x144>)
 8000f7c:	4413      	add	r3, r2
 8000f7e:	79db      	ldrb	r3, [r3, #7]
 8000f80:	4619      	mov	r1, r3
 8000f82:	4845      	ldr	r0, [pc, #276]	; (8001098 <CAN_WaitConnect+0x148>)
 8000f84:	f01a fd06 	bl	801b994 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	73fb      	strb	r3, [r7, #15]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	7bfa      	ldrb	r2, [r7, #15]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d3ef      	bcc.n	8000f78 <CAN_WaitConnect+0x28>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	73bb      	strb	r3, [r7, #14]
 8000f9c:	e00a      	b.n	8000fb4 <CAN_WaitConnect+0x64>
		printf("MCMD2 No.%d\n\r", node_id_list[NODE_MCMD2][i]);
 8000f9e:	7bbb      	ldrb	r3, [r7, #14]
 8000fa0:	4a3c      	ldr	r2, [pc, #240]	; (8001094 <CAN_WaitConnect+0x144>)
 8000fa2:	4413      	add	r3, r2
 8000fa4:	7b9b      	ldrb	r3, [r3, #14]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	483c      	ldr	r0, [pc, #240]	; (800109c <CAN_WaitConnect+0x14c>)
 8000faa:	f01a fcf3 	bl	801b994 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	73bb      	strb	r3, [r7, #14]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	785b      	ldrb	r3, [r3, #1]
 8000fb8:	7bba      	ldrb	r2, [r7, #14]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d3ef      	bcc.n	8000f9e <CAN_WaitConnect+0x4e>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	737b      	strb	r3, [r7, #13]
 8000fc2:	e00a      	b.n	8000fda <CAN_WaitConnect+0x8a>
		printf("MCMD3 No.%d\n\r", node_id_list[NODE_MCMD3][i]);
 8000fc4:	7b7b      	ldrb	r3, [r7, #13]
 8000fc6:	4a33      	ldr	r2, [pc, #204]	; (8001094 <CAN_WaitConnect+0x144>)
 8000fc8:	4413      	add	r3, r2
 8000fca:	7d5b      	ldrb	r3, [r3, #21]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4834      	ldr	r0, [pc, #208]	; (80010a0 <CAN_WaitConnect+0x150>)
 8000fd0:	f01a fce0 	bl	801b994 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 8000fd4:	7b7b      	ldrb	r3, [r7, #13]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	737b      	strb	r3, [r7, #13]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	789b      	ldrb	r3, [r3, #2]
 8000fde:	7b7a      	ldrb	r2, [r7, #13]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d3ef      	bcc.n	8000fc4 <CAN_WaitConnect+0x74>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	733b      	strb	r3, [r7, #12]
 8000fe8:	e00b      	b.n	8001002 <CAN_WaitConnect+0xb2>
		printf("MCMD4 No.%d\n\r", node_id_list[NODE_MCMD4][i]);
 8000fea:	7b3b      	ldrb	r3, [r7, #12]
 8000fec:	4a29      	ldr	r2, [pc, #164]	; (8001094 <CAN_WaitConnect+0x144>)
 8000fee:	4413      	add	r3, r2
 8000ff0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	482b      	ldr	r0, [pc, #172]	; (80010a4 <CAN_WaitConnect+0x154>)
 8000ff8:	f01a fccc 	bl	801b994 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 8000ffc:	7b3b      	ldrb	r3, [r7, #12]
 8000ffe:	3301      	adds	r3, #1
 8001000:	733b      	strb	r3, [r7, #12]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	795b      	ldrb	r3, [r3, #5]
 8001006:	7b3a      	ldrb	r2, [r7, #12]
 8001008:	429a      	cmp	r2, r3
 800100a:	d3ee      	bcc.n	8000fea <CAN_WaitConnect+0x9a>
	for (uint8_t i = 0; i < num_of->servo; i++)
 800100c:	2300      	movs	r3, #0
 800100e:	72fb      	strb	r3, [r7, #11]
 8001010:	e00a      	b.n	8001028 <CAN_WaitConnect+0xd8>
		printf("Servo No.%d\n\r", node_id_list[NODE_SERVO][i]);
 8001012:	7afb      	ldrb	r3, [r7, #11]
 8001014:	4a1f      	ldr	r2, [pc, #124]	; (8001094 <CAN_WaitConnect+0x144>)
 8001016:	4413      	add	r3, r2
 8001018:	7f1b      	ldrb	r3, [r3, #28]
 800101a:	4619      	mov	r1, r3
 800101c:	4822      	ldr	r0, [pc, #136]	; (80010a8 <CAN_WaitConnect+0x158>)
 800101e:	f01a fcb9 	bl	801b994 <iprintf>
	for (uint8_t i = 0; i < num_of->servo; i++)
 8001022:	7afb      	ldrb	r3, [r7, #11]
 8001024:	3301      	adds	r3, #1
 8001026:	72fb      	strb	r3, [r7, #11]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	78db      	ldrb	r3, [r3, #3]
 800102c:	7afa      	ldrb	r2, [r7, #11]
 800102e:	429a      	cmp	r2, r3
 8001030:	d3ef      	bcc.n	8001012 <CAN_WaitConnect+0xc2>
	for (uint8_t i = 0; i < num_of->air; i++)
 8001032:	2300      	movs	r3, #0
 8001034:	72bb      	strb	r3, [r7, #10]
 8001036:	e00b      	b.n	8001050 <CAN_WaitConnect+0x100>
		printf("Air No.%d\n\r", node_id_list[NODE_AIR][i]);
 8001038:	7abb      	ldrb	r3, [r7, #10]
 800103a:	4a16      	ldr	r2, [pc, #88]	; (8001094 <CAN_WaitConnect+0x144>)
 800103c:	4413      	add	r3, r2
 800103e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001042:	4619      	mov	r1, r3
 8001044:	4819      	ldr	r0, [pc, #100]	; (80010ac <CAN_WaitConnect+0x15c>)
 8001046:	f01a fca5 	bl	801b994 <iprintf>
	for (uint8_t i = 0; i < num_of->air; i++)
 800104a:	7abb      	ldrb	r3, [r7, #10]
 800104c:	3301      	adds	r3, #1
 800104e:	72bb      	strb	r3, [r7, #10]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	791b      	ldrb	r3, [r3, #4]
 8001054:	7aba      	ldrb	r2, [r7, #10]
 8001056:	429a      	cmp	r2, r3
 8001058:	d3ee      	bcc.n	8001038 <CAN_WaitConnect+0xe8>
	for (uint8_t i = 0; i < num_of->other; i++)
 800105a:	2300      	movs	r3, #0
 800105c:	727b      	strb	r3, [r7, #9]
 800105e:	e00b      	b.n	8001078 <CAN_WaitConnect+0x128>
		printf("Others No.%d\n\r", node_id_list[NODE_OTHER][i]);
 8001060:	7a7b      	ldrb	r3, [r7, #9]
 8001062:	4a0c      	ldr	r2, [pc, #48]	; (8001094 <CAN_WaitConnect+0x144>)
 8001064:	4413      	add	r3, r2
 8001066:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800106a:	4619      	mov	r1, r3
 800106c:	4810      	ldr	r0, [pc, #64]	; (80010b0 <CAN_WaitConnect+0x160>)
 800106e:	f01a fc91 	bl	801b994 <iprintf>
	for (uint8_t i = 0; i < num_of->other; i++)
 8001072:	7a7b      	ldrb	r3, [r7, #9]
 8001074:	3301      	adds	r3, #1
 8001076:	727b      	strb	r3, [r7, #9]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	799b      	ldrb	r3, [r3, #6]
 800107c:	7a7a      	ldrb	r2, [r7, #9]
 800107e:	429a      	cmp	r2, r3
 8001080:	d3ee      	bcc.n	8001060 <CAN_WaitConnect+0x110>
}
 8001082:	bf00      	nop
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	0801cc48 	.word	0x0801cc48
 8001090:	200001f8 	.word	0x200001f8
 8001094:	20000208 	.word	0x20000208
 8001098:	0801cc68 	.word	0x0801cc68
 800109c:	0801cc78 	.word	0x0801cc78
 80010a0:	0801cc88 	.word	0x0801cc88
 80010a4:	0801cc98 	.word	0x0801cc98
 80010a8:	0801cca8 	.word	0x0801cca8
 80010ac:	0801ccb8 	.word	0x0801ccb8
 80010b0:	0801ccc4 	.word	0x0801ccc4

080010b4 <AirCylinder_Init>:
 * 異なる関数名を用いて明示的にしてある.
 * また, AirCylinderの基板の方にも, 最初は必ず初期化処理(AIR_CMD_INIT)が来るものとして定義してある.
 */

////AirCylinder
void AirCylinder_Init(CAN_Device *can_device, Air_PortStatus_Typedef param){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	70fb      	strb	r3, [r7, #3]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_INIT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
 80010c0:	2101      	movs	r1, #1
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 f82c 	bl	8001120 <Make_CAN_ID_from_CAN_Device>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4610      	mov	r0, r2
 80010ce:	1cfb      	adds	r3, r7, #3
 80010d0:	2201      	movs	r2, #1
 80010d2:	4619      	mov	r1, r3
 80010d4:	f7ff fc44 	bl	8000960 <SendBytes>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <AirCylinder_Init+0x2e>
		Error_Handler();
 80010de:	f000 fdb5 	bl	8001c4c <Error_Handler>
	}
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <AirCylinder_SendOutput>:

void AirCylinder_SendOutput(CAN_Device *can_device, Air_PortStatus_Typedef param){
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	460b      	mov	r3, r1
 80010f4:	70fb      	strb	r3, [r7, #3]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_OUTPUT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
 80010f6:	2102      	movs	r1, #2
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f000 f811 	bl	8001120 <Make_CAN_ID_from_CAN_Device>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4610      	mov	r0, r2
 8001104:	1cfb      	adds	r3, r7, #3
 8001106:	2201      	movs	r2, #1
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fc29 	bl	8000960 <SendBytes>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <AirCylinder_SendOutput+0x2e>
		Error_Handler();
 8001114:	f000 fd9a 	bl	8001c4c <Error_Handler>
	}
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <Make_CAN_ID_from_CAN_Device>:
/**
 * @brief CANのIDを設定する. 上16bitのみを使用
 * @param CAN_Device*
 * @param cmd
 */
uint64_t Make_CAN_ID_from_CAN_Device(CAN_Device* _can_device, uint8_t cmd){  // mainからmcmdなどへの送信
 8001120:	b4b0      	push	{r4, r5, r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	70fb      	strb	r3, [r7, #3]
    uint8_t node_type = (uint8_t)(_can_device->node_type) & (0b111);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	f003 0307 	and.w	r3, r3, #7
 8001134:	73fb      	strb	r3, [r7, #15]
    return (((node_type&0b111)<<11) | (((_can_device->node_id)&0b111)<<8) | (((_can_device->device_num)&0b111)<<5)
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	02db      	lsls	r3, r3, #11
 800113a:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	785b      	ldrb	r3, [r3, #1]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001148:	431a      	orrs	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	789b      	ldrb	r3, [r3, #2]
 800114e:	015b      	lsls	r3, r3, #5
 8001150:	b2db      	uxtb	r3, r3
 8001152:	431a      	orrs	r2, r3
            | (cmd&0b11111) );
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	f003 031f 	and.w	r3, r3, #31
 800115a:	4313      	orrs	r3, r2
 800115c:	17da      	asrs	r2, r3, #31
 800115e:	461c      	mov	r4, r3
 8001160:	4615      	mov	r5, r2
 8001162:	4622      	mov	r2, r4
 8001164:	462b      	mov	r3, r5
}
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	bcb0      	pop	{r4, r5, r7}
 8001170:	4770      	bx	lr

08001172 <Make_CAN_ID>:
 * @param node_type
 * @param node_id
 * @param device_num
 * @param cmd
 */
uint64_t Make_CAN_ID(Node_Type node_type, uint8_t node_id, uint8_t device_num, uint8_t cmd){
 8001172:	e92d 0390 	stmdb	sp!, {r4, r7, r8, r9}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4604      	mov	r4, r0
 800117c:	4608      	mov	r0, r1
 800117e:	4611      	mov	r1, r2
 8001180:	461a      	mov	r2, r3
 8001182:	4623      	mov	r3, r4
 8001184:	71fb      	strb	r3, [r7, #7]
 8001186:	4603      	mov	r3, r0
 8001188:	71bb      	strb	r3, [r7, #6]
 800118a:	460b      	mov	r3, r1
 800118c:	717b      	strb	r3, [r7, #5]
 800118e:	4613      	mov	r3, r2
 8001190:	713b      	strb	r3, [r7, #4]
    return ( (((uint8_t)node_type & 0b111) << 11) | (((node_id)&0b111) << 8) | ((device_num&0b111) << 5)
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	02db      	lsls	r3, r3, #11
 8001196:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800119a:	79bb      	ldrb	r3, [r7, #6]
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80011a2:	431a      	orrs	r2, r3
 80011a4:	797b      	ldrb	r3, [r7, #5]
 80011a6:	015b      	lsls	r3, r3, #5
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	431a      	orrs	r2, r3
             | (cmd&0b11111) );
 80011ac:	793b      	ldrb	r3, [r7, #4]
 80011ae:	f003 031f 	and.w	r3, r3, #31
 80011b2:	4313      	orrs	r3, r2
 80011b4:	17da      	asrs	r2, r3, #31
 80011b6:	4698      	mov	r8, r3
 80011b8:	4691      	mov	r9, r2
 80011ba:	4642      	mov	r2, r8
 80011bc:	464b      	mov	r3, r9
}
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	e8bd 0390 	ldmia.w	sp!, {r4, r7, r8, r9}
 80011ca:	4770      	bx	lr

080011cc <Extract_CAN_Device>:

CAN_Device Extract_CAN_Device(uint64_t can_id) {  // CAN_IDからCAN_Deviceを抽出する
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	e9c7 0100 	strd	r0, r1, [r7]
    CAN_Device ans;
    ans.device_num = ((can_id>>5) & 0b111);
 80011d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	0942      	lsrs	r2, r0, #5
 80011e4:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 80011e8:	094b      	lsrs	r3, r1, #5
 80011ea:	b2d3      	uxtb	r3, r2
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	72bb      	strb	r3, [r7, #10]
    ans.node_id = ((can_id>>8) & 0b111);
 80011f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	f04f 0300 	mov.w	r3, #0
 8001200:	0a02      	lsrs	r2, r0, #8
 8001202:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001206:	0a0b      	lsrs	r3, r1, #8
 8001208:	b2d3      	uxtb	r3, r2
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	b2db      	uxtb	r3, r3
 8001210:	727b      	strb	r3, [r7, #9]
    ans.node_type = (Node_Type)( (can_id>>11) & 0b111);
 8001212:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	f04f 0300 	mov.w	r3, #0
 800121e:	0ac2      	lsrs	r2, r0, #11
 8001220:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8001224:	0acb      	lsrs	r3, r1, #11
 8001226:	b2d3      	uxtb	r3, r2
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	b2db      	uxtb	r3, r3
 800122e:	723b      	strb	r3, [r7, #8]
    return ans;
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	f107 0208 	add.w	r2, r7, #8
 8001238:	6812      	ldr	r2, [r2, #0]
 800123a:	4611      	mov	r1, r2
 800123c:	8019      	strh	r1, [r3, #0]
 800123e:	3302      	adds	r3, #2
 8001240:	0c12      	lsrs	r2, r2, #16
 8001242:	701a      	strb	r2, [r3, #0]
 8001244:	2300      	movs	r3, #0
 8001246:	7b3a      	ldrb	r2, [r7, #12]
 8001248:	f362 0307 	bfi	r3, r2, #0, #8
 800124c:	7b7a      	ldrb	r2, [r7, #13]
 800124e:	f362 230f 	bfi	r3, r2, #8, #8
 8001252:	7bba      	ldrb	r2, [r7, #14]
 8001254:	f362 4317 	bfi	r3, r2, #16, #8
}
 8001258:	4618      	mov	r0, r3
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <Extract_CAN_CMD>:

uint8_t Extract_CAN_CMD(uint64_t can_id){ return ( can_id & 0b11111); }  // cmdを抽出
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	e9c7 0100 	strd	r0, r1, [r7]
 800126e:	783b      	ldrb	r3, [r7, #0]
 8001270:	f003 031f 	and.w	r3, r3, #31
 8001274:	b2db      	uxtb	r3, r3
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <printControllerValue>:
//refer this global variable to obtain controller data
//do NOT overwrite this variable
static struct controller_data controller_raw = { };
struct timeval tv;

void printControllerValue(struct controller_data *d){
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af02      	add	r7, sp, #8
 800128a:	6078      	str	r0, [r7, #4]
    printf("(lx, ly, rx, ry) : (%d, %d, %d, %d)\r\n", (int)(d->l_x * 256), (int)(d->l_y * 256), (int)(d->r_x * 256), (int)(d->r_y * 256));
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001292:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001334 <printControllerValue+0xb0>
 8001296:	ee67 7a87 	vmul.f32	s15, s15, s14
 800129a:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012a4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001334 <printControllerValue+0xb0>
 80012a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ac:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80012b6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001334 <printControllerValue+0xb0>
 80012ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012be:	eefd 5ae7 	vcvt.s32.f32	s11, s15
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80012c8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001334 <printControllerValue+0xb0>
 80012cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d4:	ee17 3a90 	vmov	r3, s15
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	ee15 3a90 	vmov	r3, s11
 80012de:	ee16 2a10 	vmov	r2, s12
 80012e2:	ee16 1a90 	vmov	r1, s13
 80012e6:	4814      	ldr	r0, [pc, #80]	; (8001338 <printControllerValue+0xb4>)
 80012e8:	f01a fb54 	bl	801b994 <iprintf>
    printf("button: ");
 80012ec:	4813      	ldr	r0, [pc, #76]	; (800133c <printControllerValue+0xb8>)
 80012ee:	f01a fb51 	bl	801b994 <iprintf>
    for(int i=0; i<16; i++){
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	e013      	b.n	8001320 <printControllerValue+0x9c>
        if((d->button >> i) & 1) printf("1");
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	fa42 f303 	asr.w	r3, r2, r3
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <printControllerValue+0x90>
 800130c:	2031      	movs	r0, #49	; 0x31
 800130e:	f01a fb59 	bl	801b9c4 <putchar>
 8001312:	e002      	b.n	800131a <printControllerValue+0x96>
        else printf("0");
 8001314:	2030      	movs	r0, #48	; 0x30
 8001316:	f01a fb55 	bl	801b9c4 <putchar>
    for(int i=0; i<16; i++){
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	3301      	adds	r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2b0f      	cmp	r3, #15
 8001324:	dde8      	ble.n	80012f8 <printControllerValue+0x74>
    }
    printf("\n\r");
 8001326:	4806      	ldr	r0, [pc, #24]	; (8001340 <printControllerValue+0xbc>)
 8001328:	f01a fb34 	bl	801b994 <iprintf>

}
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	43800000 	.word	0x43800000
 8001338:	0801ccec 	.word	0x0801ccec
 800133c:	0801cd14 	.word	0x0801cd14
 8001340:	0801cd20 	.word	0x0801cd20

08001344 <UDPControllerReceive>:

void UDPControllerReceive(void const *argument) {
 8001344:	b5b0      	push	{r4, r5, r7, lr}
 8001346:	b0dc      	sub	sp, #368	; 0x170
 8001348:	af02      	add	r7, sp, #8
 800134a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800134e:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001352:	6018      	str	r0, [r3, #0]

    printf("This is UdpControllerReceive\r\n"); //これがないとなぜか動かない
 8001354:	4898      	ldr	r0, [pc, #608]	; (80015b8 <UDPControllerReceive+0x274>)
 8001356:	f01a fbb9 	bl	801bacc <puts>

    int sock;
    char buffer[256];
    struct sockaddr_in server_addr, client_addr;

    sock = lwip_socket(AF_INET, SOCK_DGRAM, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2102      	movs	r1, #2
 800135e:	2002      	movs	r0, #2
 8001360:	f00e fae8 	bl	800f934 <lwip_socket>
 8001364:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
    memset((char*) &server_addr, 0, sizeof(server_addr));
 8001368:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800136c:	2210      	movs	r2, #16
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f01a fb07 	bl	801b984 <memset>

    server_addr.sin_family = AF_INET;
 8001376:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800137a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800137e:	2202      	movs	r2, #2
 8001380:	705a      	strb	r2, [r3, #1]
    server_addr.sin_len = sizeof(server_addr);
 8001382:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001386:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800138a:	2210      	movs	r2, #16
 800138c:	701a      	strb	r2, [r3, #0]
    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
 800138e:	2000      	movs	r0, #0
 8001390:	f00f fb5b 	bl	8010a4a <lwip_htonl>
 8001394:	4602      	mov	r2, r0
 8001396:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800139a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800139e:	605a      	str	r2, [r3, #4]
//	server_addr.sin_addr.s_addr = inet_addr(CLIENT_IP);
    server_addr.sin_port = htons(CLIENT_PORT);
 80013a0:	f641 6061 	movw	r0, #7777	; 0x1e61
 80013a4:	f00f fb3c 	bl	8010a20 <lwip_htons>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80013b0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80013b4:	805a      	strh	r2, [r3, #2]

    if (fcntl(sock, F_SETFL, fcntl(sock, F_GETFL,0) | O_NONBLOCK) < 0) {
 80013b6:	2200      	movs	r2, #0
 80013b8:	2103      	movs	r1, #3
 80013ba:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 80013be:	f00f f8cd 	bl	801055c <lwip_fcntl>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	461a      	mov	r2, r3
 80013ca:	2104      	movs	r1, #4
 80013cc:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 80013d0:	f00f f8c4 	bl	801055c <lwip_fcntl>
        // handle error
    }

    FD_ZERO(&rset);
 80013d4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80013d8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80013dc:	2302      	movs	r3, #2
 80013de:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80013e2:	e00b      	b.n	80013fc <UDPControllerReceive+0xb8>
 80013e4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80013e8:	3b01      	subs	r3, #1
 80013ea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80013ee:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80013f2:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80013f6:	2100      	movs	r1, #0
 80013f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80013fc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1ef      	bne.n	80013e4 <UDPControllerReceive+0xa0>

    int err = lwip_bind(sock, (struct sockaddr*) &server_addr, sizeof(server_addr));
 8001404:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001408:	2210      	movs	r2, #16
 800140a:	4619      	mov	r1, r3
 800140c:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 8001410:	f00d ff0c 	bl	800f22c <lwip_bind>
 8001414:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
    if (err != 0) {
 8001418:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <UDPControllerReceive+0xe4>
        printf("UDPController:ERROR \r\n");
 8001420:	4866      	ldr	r0, [pc, #408]	; (80015bc <UDPControllerReceive+0x278>)
 8001422:	f01a fb53 	bl	801bacc <puts>
 8001426:	e002      	b.n	800142e <UDPControllerReceive+0xea>
    } else {
        printf("UDPController:Socket Opened!\r\n");
 8001428:	4865      	ldr	r0, [pc, #404]	; (80015c0 <UDPControllerReceive+0x27c>)
 800142a:	f01a fb4f 	bl	801bacc <puts>
    }
    int timeout = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    struct controller_data controller_null;
    bzero(&controller_null, sizeof(struct controller_data));
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	461a      	mov	r2, r3
 800143a:	2300      	movs	r3, #0
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	6053      	str	r3, [r2, #4]
 8001440:	6093      	str	r3, [r2, #8]
 8001442:	60d3      	str	r3, [r2, #12]
 8001444:	6113      	str	r3, [r2, #16]
    controller_null.l_x = 0.0f;
 8001446:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800144a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	605a      	str	r2, [r3, #4]
    controller_null.l_y = 0.0f;
 8001454:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001458:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
    controller_null.r_x = 0.0f;
 8001462:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001466:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	60da      	str	r2, [r3, #12]
    controller_null.r_y = 0.0f;
 8001470:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001474:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
    //FD_SET(sock, &rset);

    int maxfdp1 = sock + 1;
 800147e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001482:	3301      	adds	r3, #1
 8001484:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

    while (1) {
        FD_SET(sock, &rset);
 8001488:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800148c:	2b00      	cmp	r3, #0
 800148e:	da00      	bge.n	8001492 <UDPControllerReceive+0x14e>
 8001490:	331f      	adds	r3, #31
 8001492:	115b      	asrs	r3, r3, #5
 8001494:	461a      	mov	r2, r3
 8001496:	0093      	lsls	r3, r2, #2
 8001498:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800149c:	443b      	add	r3, r7
 800149e:	f853 1c28 	ldr.w	r1, [r3, #-40]
 80014a2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80014a6:	4258      	negs	r0, r3
 80014a8:	f003 031f 	and.w	r3, r3, #31
 80014ac:	f000 001f 	and.w	r0, r0, #31
 80014b0:	bf58      	it	pl
 80014b2:	4243      	negpl	r3, r0
 80014b4:	2001      	movs	r0, #1
 80014b6:	fa00 f303 	lsl.w	r3, r0, r3
 80014ba:	4319      	orrs	r1, r3
 80014bc:	0093      	lsls	r3, r2, #2
 80014be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014c2:	443b      	add	r3, r7
 80014c4:	f843 1c28 	str.w	r1, [r3, #-40]
        tv.tv_usec = 1000;
 80014c8:	4b3e      	ldr	r3, [pc, #248]	; (80015c4 <UDPControllerReceive+0x280>)
 80014ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014ce:	609a      	str	r2, [r3, #8]
        select(maxfdp1, &rset, NULL, NULL, &tv);
 80014d0:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80014d4:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <UDPControllerReceive+0x280>)
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2300      	movs	r3, #0
 80014da:	2200      	movs	r2, #0
 80014dc:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80014e0:	f00e fc8e 	bl	800fe00 <lwip_select>
        if (timeout < 100) {
 80014e4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80014e8:	2b63      	cmp	r3, #99	; 0x63
 80014ea:	dc05      	bgt.n	80014f8 <UDPControllerReceive+0x1b4>
            timeout++;
 80014ec:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80014f0:	3301      	adds	r3, #1
 80014f2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80014f6:	e00a      	b.n	800150e <UDPControllerReceive+0x1ca>
        } else {
            memcpy(&controller_raw, &controller_null,
 80014f8:	4a33      	ldr	r2, [pc, #204]	; (80015c8 <UDPControllerReceive+0x284>)
 80014fa:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80014fe:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001502:	4614      	mov	r4, r2
 8001504:	461d      	mov	r5, r3
 8001506:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001508:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800150a:	682b      	ldr	r3, [r5, #0]
 800150c:	6023      	str	r3, [r4, #0]
                   sizeof(struct controller_data));
        }

        if (FD_ISSET(sock, &rset)) {
 800150e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001512:	2b00      	cmp	r3, #0
 8001514:	da00      	bge.n	8001518 <UDPControllerReceive+0x1d4>
 8001516:	331f      	adds	r3, #31
 8001518:	115b      	asrs	r3, r3, #5
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001520:	443b      	add	r3, r7
 8001522:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8001526:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800152a:	4259      	negs	r1, r3
 800152c:	f003 031f 	and.w	r3, r3, #31
 8001530:	f001 011f 	and.w	r1, r1, #31
 8001534:	bf58      	it	pl
 8001536:	424b      	negpl	r3, r1
 8001538:	fa22 f303 	lsr.w	r3, r2, r3
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b00      	cmp	r3, #0
 8001542:	d034      	beq.n	80015ae <UDPControllerReceive+0x26a>
            socklen_t n;
            socklen_t len = sizeof(client_addr);
 8001544:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001548:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800154c:	2210      	movs	r2, #16
 800154e:	601a      	str	r2, [r3, #0]
            n = lwip_recvfrom(sock, (char*) buffer, 256, (int) NULL,
 8001550:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001554:	f107 0308 	add.w	r3, r7, #8
 8001558:	9301      	str	r3, [sp, #4]
 800155a:	f107 0320 	add.w	r3, r7, #32
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	2300      	movs	r3, #0
 8001562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001566:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 800156a:	f00e f951 	bl	800f810 <lwip_recvfrom>
 800156e:	4603      	mov	r3, r0
 8001570:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
                              (struct sockaddr*) &client_addr, &len);
            if (n > 0) {
 8001574:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001578:	2b00      	cmp	r3, #0
 800157a:	d018      	beq.n	80015ae <UDPControllerReceive+0x26a>
                timeout = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
                if (n < sizeof(struct controller_data)) {
 8001582:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001586:	2b13      	cmp	r3, #19
 8001588:	d803      	bhi.n	8001592 <UDPControllerReceive+0x24e>
                    printf("invalid data : \r\n");
 800158a:	4810      	ldr	r0, [pc, #64]	; (80015cc <UDPControllerReceive+0x288>)
 800158c:	f01a fa9e 	bl	801bacc <puts>
 8001590:	e77a      	b.n	8001488 <UDPControllerReceive+0x144>
                    continue;
                }

                struct controller_data *d = (struct controller_data*) &buffer;
 8001592:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001596:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
                printControllerValue(d);
 800159a:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 800159e:	f7ff fe71 	bl	8001284 <printControllerValue>
                memcpy(&controller_raw, d, sizeof(struct controller_data));
 80015a2:	2214      	movs	r2, #20
 80015a4:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 80015a8:	4807      	ldr	r0, [pc, #28]	; (80015c8 <UDPControllerReceive+0x284>)
 80015aa:	f01a f9dd 	bl	801b968 <memcpy>
            }
        }
        osDelay(100);
 80015ae:	2064      	movs	r0, #100	; 0x64
 80015b0:	f008 f834 	bl	800961c <osDelay>
        FD_SET(sock, &rset);
 80015b4:	e768      	b.n	8001488 <UDPControllerReceive+0x144>
 80015b6:	bf00      	nop
 80015b8:	0801cd24 	.word	0x0801cd24
 80015bc:	0801cd44 	.word	0x0801cd44
 80015c0:	0801cd5c 	.word	0x0801cd5c
 80015c4:	200024e8 	.word	0x200024e8
 80015c8:	200024d4 	.word	0x200024d4
 80015cc:	0801cd7c 	.word	0x0801cd7c

080015d0 <UDPController_GetControllerButtons>:
    }

}


uint16_t UDPController_GetControllerButtons() {
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
    return controller_raw.button;
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <UDPController_GetControllerButtons+0x14>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	200024d4 	.word	0x200024d4

080015e8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(uint8_t ch)
#else
#define PUTCHAR_PROTYPE int fputc(int ch,FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, &ch, 1, 500);
 80015f2:	1df9      	adds	r1, r7, #7
 80015f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015f8:	2201      	movs	r2, #1
 80015fa:	4804      	ldr	r0, [pc, #16]	; (800160c <__io_putchar+0x24>)
 80015fc:	f005 fd4c 	bl	8007098 <HAL_UART_Transmit>
    return ch;
 8001600:	79fb      	ldrb	r3, [r7, #7]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20002520 	.word	0x20002520

08001610 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8001618:	f7ff f896 	bl	8000748 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 800162c:	f7ff f892 	bl	8000754 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8001640:	f7ff f882 	bl	8000748 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan){
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8001654:	f7ff f87e 	bl	8000754 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8001668:	f7ff f86e 	bl	8000748 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan){
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 800167c:	f7ff f86a 	bl	8000754 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
    WhenCANRxFifo0MsgPending(hcan, &num_of_devices);
 8001690:	4903      	ldr	r1, [pc, #12]	; (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff f864 	bl	8000760 <WhenCANRxFifo0MsgPending>
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20004430 	.word	0x20004430

080016a4 <canSetting>:

void canSetting(){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	printf("Start Initializing CAN System:Begin\n\r");
 80016a8:	480f      	ldr	r0, [pc, #60]	; (80016e8 <canSetting+0x44>)
 80016aa:	f01a f973 	bl	801b994 <iprintf>
	HAL_Delay(100);
 80016ae:	2064      	movs	r0, #100	; 0x64
 80016b0:	f000 ffe2 	bl	8002678 <HAL_Delay>

	CAN_SystemInit(&hcan1); // F7のCAN通信のinit
 80016b4:	480d      	ldr	r0, [pc, #52]	; (80016ec <canSetting+0x48>)
 80016b6:	f7ff f9a3 	bl	8000a00 <CAN_SystemInit>

	// デバイス数の設定 (今回はmcmd4が1枚)
	num_of_devices.mcmd3 = 0;
 80016ba:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <canSetting+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	709a      	strb	r2, [r3, #2]
	num_of_devices.mcmd4 = 0;
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <canSetting+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	715a      	strb	r2, [r3, #5]
	num_of_devices.air = 1;
 80016c6:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <canSetting+0x4c>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	711a      	strb	r2, [r3, #4]
	num_of_devices.servo = 0;
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <canSetting+0x4c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	70da      	strb	r2, [r3, #3]

	printf("Start Initializing CAN System:End\n\r");
 80016d2:	4808      	ldr	r0, [pc, #32]	; (80016f4 <canSetting+0x50>)
 80016d4:	f01a f95e 	bl	801b994 <iprintf>
	HAL_Delay(100);
 80016d8:	2064      	movs	r0, #100	; 0x64
 80016da:	f000 ffcd 	bl	8002678 <HAL_Delay>
	CAN_WaitConnect(&num_of_devices);  // 設定された全てのCANモジュール基板との接続が確認できるまで待機
 80016de:	4804      	ldr	r0, [pc, #16]	; (80016f0 <canSetting+0x4c>)
 80016e0:	f7ff fc36 	bl	8000f50 <CAN_WaitConnect>
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	0801cdbc 	.word	0x0801cdbc
 80016ec:	200024f8 	.word	0x200024f8
 80016f0:	20004430 	.word	0x20004430
 80016f4:	0801cde4 	.word	0x0801cde4

080016f8 <airSetting>:
	servo_param.pulse_width_max=2.4f;//サーボの制御のPWM信号のパルス幅の最大値
	servo_param.pulse_width_min=0.5f;//サーボの制御のPWM信号のパルス幅の最小値
	servo_param.pwm_frequency=50;//PWM周波数（この変更は未実装
}

void airSetting(){
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
	air_device.node_type = NODE_AIR; //エアシリンダ基盤であることを示す
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <airSetting+0x1c>)
 80016fe:	2205      	movs	r2, #5
 8001700:	701a      	strb	r2, [r3, #0]
	air_device.node_id = 0; //基板の番号
 8001702:	4b04      	ldr	r3, [pc, #16]	; (8001714 <airSetting+0x1c>)
 8001704:	2200      	movs	r2, #0
 8001706:	705a      	strb	r2, [r3, #1]
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20004438 	.word	0x20004438

08001718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800171c:	f000 ff7e 	bl	800261c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001720:	f000 f83e 	bl	80017a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001724:	f000 f960 	bl	80019e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001728:	f000 f940 	bl	80019ac <MX_DMA_Init>
  MX_USART3_UART_Init();
 800172c:	f000 f8e0 	bl	80018f0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001730:	f000 f90e 	bl	8001950 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 8001734:	f000 f8a6 	bl	8001884 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  //記事ではmcmdなどの初期化コードを描くことになっている場所
  canSetting();
 8001738:	f7ff ffb4 	bl	80016a4 <canSetting>
  //mcmdSetting();
  //activateMcmdControll();
  //servoSetting();
  airSetting();
 800173c:	f7ff ffdc 	bl	80016f8 <airSetting>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001740:	f007 fe34 	bl	80093ac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001744:	4a0d      	ldr	r2, [pc, #52]	; (800177c <main+0x64>)
 8001746:	2100      	movs	r1, #0
 8001748:	480d      	ldr	r0, [pc, #52]	; (8001780 <main+0x68>)
 800174a:	f007 fec1 	bl	80094d0 <osThreadNew>
 800174e:	4603      	mov	r3, r0
 8001750:	4a0c      	ldr	r2, [pc, #48]	; (8001784 <main+0x6c>)
 8001752:	6013      	str	r3, [r2, #0]

  /* creation of systemCheckTask */
  systemCheckTaskHandle = osThreadNew(StartSystemCheckTask, NULL, &systemCheckTask_attributes);
 8001754:	4a0c      	ldr	r2, [pc, #48]	; (8001788 <main+0x70>)
 8001756:	2100      	movs	r1, #0
 8001758:	480c      	ldr	r0, [pc, #48]	; (800178c <main+0x74>)
 800175a:	f007 feb9 	bl	80094d0 <osThreadNew>
 800175e:	4603      	mov	r3, r0
 8001760:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <main+0x78>)
 8001762:	6013      	str	r3, [r2, #0]

  /* creation of ControllerTask */
  ControllerTaskHandle = osThreadNew(StartControllerTask, NULL, &ControllerTask_attributes);
 8001764:	4a0b      	ldr	r2, [pc, #44]	; (8001794 <main+0x7c>)
 8001766:	2100      	movs	r1, #0
 8001768:	480b      	ldr	r0, [pc, #44]	; (8001798 <main+0x80>)
 800176a:	f007 feb1 	bl	80094d0 <osThreadNew>
 800176e:	4603      	mov	r3, r0
 8001770:	4a0a      	ldr	r2, [pc, #40]	; (800179c <main+0x84>)
 8001772:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001774:	f007 fe4e 	bl	8009414 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001778:	e7fe      	b.n	8001778 <main+0x60>
 800177a:	bf00      	nop
 800177c:	080205c4 	.word	0x080205c4
 8001780:	08001b2d 	.word	0x08001b2d
 8001784:	20002b10 	.word	0x20002b10
 8001788:	080205e8 	.word	0x080205e8
 800178c:	08001bf9 	.word	0x08001bf9
 8001790:	20003370 	.word	0x20003370
 8001794:	0802060c 	.word	0x0802060c
 8001798:	08001c13 	.word	0x08001c13
 800179c:	20003bd0 	.word	0x20003bd0

080017a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b094      	sub	sp, #80	; 0x50
 80017a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a6:	f107 031c 	add.w	r3, r7, #28
 80017aa:	2234      	movs	r2, #52	; 0x34
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f01a f8e8 	bl	801b984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b4:	f107 0308 	add.w	r3, r7, #8
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80017c4:	f003 ffac 	bl	8005720 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c8:	4b2c      	ldr	r3, [pc, #176]	; (800187c <SystemClock_Config+0xdc>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	4a2b      	ldr	r2, [pc, #172]	; (800187c <SystemClock_Config+0xdc>)
 80017ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d2:	6413      	str	r3, [r2, #64]	; 0x40
 80017d4:	4b29      	ldr	r3, [pc, #164]	; (800187c <SystemClock_Config+0xdc>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017e0:	4b27      	ldr	r3, [pc, #156]	; (8001880 <SystemClock_Config+0xe0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017e8:	4a25      	ldr	r2, [pc, #148]	; (8001880 <SystemClock_Config+0xe0>)
 80017ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	4b23      	ldr	r3, [pc, #140]	; (8001880 <SystemClock_Config+0xe0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017f8:	603b      	str	r3, [r7, #0]
 80017fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017fc:	2301      	movs	r3, #1
 80017fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001800:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001804:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001806:	2302      	movs	r3, #2
 8001808:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800180a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800180e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001810:	2304      	movs	r3, #4
 8001812:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001814:	2360      	movs	r3, #96	; 0x60
 8001816:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001818:	2302      	movs	r3, #2
 800181a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800181c:	2304      	movs	r3, #4
 800181e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001820:	2302      	movs	r3, #2
 8001822:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	4618      	mov	r0, r3
 800182a:	f003 ffd9 	bl	80057e0 <HAL_RCC_OscConfig>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001834:	f000 fa0a 	bl	8001c4c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001838:	f003 ff82 	bl	8005740 <HAL_PWREx_EnableOverDrive>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001842:	f000 fa03 	bl	8001c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001846:	230f      	movs	r3, #15
 8001848:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800184a:	2302      	movs	r3, #2
 800184c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001856:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001858:	2300      	movs	r3, #0
 800185a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800185c:	f107 0308 	add.w	r3, r7, #8
 8001860:	2103      	movs	r1, #3
 8001862:	4618      	mov	r0, r3
 8001864:	f004 fa6a 	bl	8005d3c <HAL_RCC_ClockConfig>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800186e:	f000 f9ed 	bl	8001c4c <Error_Handler>
  }
}
 8001872:	bf00      	nop
 8001874:	3750      	adds	r7, #80	; 0x50
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800
 8001880:	40007000 	.word	0x40007000

08001884 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001888:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <MX_CAN1_Init+0x64>)
 800188a:	4a18      	ldr	r2, [pc, #96]	; (80018ec <MX_CAN1_Init+0x68>)
 800188c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800188e:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <MX_CAN1_Init+0x64>)
 8001890:	2206      	movs	r2, #6
 8001892:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001894:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <MX_CAN1_Init+0x64>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800189a:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <MX_CAN1_Init+0x64>)
 800189c:	2200      	movs	r2, #0
 800189e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_CAN1_Init+0x64>)
 80018a2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80018a6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <MX_CAN1_Init+0x64>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <MX_CAN1_Init+0x64>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <MX_CAN1_Init+0x64>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80018ba:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <MX_CAN1_Init+0x64>)
 80018bc:	2200      	movs	r2, #0
 80018be:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80018c0:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <MX_CAN1_Init+0x64>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80018c6:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <MX_CAN1_Init+0x64>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <MX_CAN1_Init+0x64>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <MX_CAN1_Init+0x64>)
 80018d4:	f000 fef4 	bl	80026c0 <HAL_CAN_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80018de:	f000 f9b5 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200024f8 	.word	0x200024f8
 80018ec:	40006400 	.word	0x40006400

080018f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <MX_USART3_UART_Init+0x58>)
 80018f6:	4a15      	ldr	r2, [pc, #84]	; (800194c <MX_USART3_UART_Init+0x5c>)
 80018f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018fa:	4b13      	ldr	r3, [pc, #76]	; (8001948 <MX_USART3_UART_Init+0x58>)
 80018fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001900:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_USART3_UART_Init+0x58>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <MX_USART3_UART_Init+0x58>)
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_USART3_UART_Init+0x58>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_USART3_UART_Init+0x58>)
 8001916:	220c      	movs	r2, #12
 8001918:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <MX_USART3_UART_Init+0x58>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_USART3_UART_Init+0x58>)
 8001922:	2200      	movs	r2, #0
 8001924:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <MX_USART3_UART_Init+0x58>)
 8001928:	2200      	movs	r2, #0
 800192a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_USART3_UART_Init+0x58>)
 800192e:	2200      	movs	r2, #0
 8001930:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001932:	4805      	ldr	r0, [pc, #20]	; (8001948 <MX_USART3_UART_Init+0x58>)
 8001934:	f005 fb62 	bl	8006ffc <HAL_UART_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800193e:	f000 f985 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20002520 	.word	0x20002520
 800194c:	40004800 	.word	0x40004800

08001950 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001956:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800195a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800195e:	2206      	movs	r2, #6
 8001960:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001964:	2202      	movs	r2, #2
 8001966:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800196a:	2200      	movs	r2, #0
 800196c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001970:	2202      	movs	r2, #2
 8001972:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001976:	2201      	movs	r2, #1
 8001978:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800197c:	2200      	movs	r2, #0
 800197e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001982:	2200      	movs	r2, #0
 8001984:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001988:	2201      	movs	r2, #1
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800198e:	2200      	movs	r2, #0
 8001990:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001994:	f003 fd7b 	bl	800548e <HAL_PCD_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800199e:	f000 f955 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20002608 	.word	0x20002608

080019ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019b2:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <MX_DMA_Init+0x38>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a0b      	ldr	r2, [pc, #44]	; (80019e4 <MX_DMA_Init+0x38>)
 80019b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <MX_DMA_Init+0x38>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2105      	movs	r1, #5
 80019ce:	200e      	movs	r0, #14
 80019d0:	f001 fd8a 	bl	80034e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80019d4:	200e      	movs	r0, #14
 80019d6:	f001 fda3 	bl	8003520 <HAL_NVIC_EnableIRQ>

}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800

080019e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08c      	sub	sp, #48	; 0x30
 80019ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ee:	f107 031c 	add.w	r3, r7, #28
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]
 80019fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fe:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <MX_GPIO_Init+0x134>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a46      	ldr	r2, [pc, #280]	; (8001b1c <MX_GPIO_Init+0x134>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b44      	ldr	r3, [pc, #272]	; (8001b1c <MX_GPIO_Init+0x134>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	61bb      	str	r3, [r7, #24]
 8001a14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a16:	4b41      	ldr	r3, [pc, #260]	; (8001b1c <MX_GPIO_Init+0x134>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a40      	ldr	r2, [pc, #256]	; (8001b1c <MX_GPIO_Init+0x134>)
 8001a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b3e      	ldr	r3, [pc, #248]	; (8001b1c <MX_GPIO_Init+0x134>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2e:	4b3b      	ldr	r3, [pc, #236]	; (8001b1c <MX_GPIO_Init+0x134>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a3a      	ldr	r2, [pc, #232]	; (8001b1c <MX_GPIO_Init+0x134>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b38      	ldr	r3, [pc, #224]	; (8001b1c <MX_GPIO_Init+0x134>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a46:	4b35      	ldr	r3, [pc, #212]	; (8001b1c <MX_GPIO_Init+0x134>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a34      	ldr	r2, [pc, #208]	; (8001b1c <MX_GPIO_Init+0x134>)
 8001a4c:	f043 0302 	orr.w	r3, r3, #2
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b32      	ldr	r3, [pc, #200]	; (8001b1c <MX_GPIO_Init+0x134>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a5e:	4b2f      	ldr	r3, [pc, #188]	; (8001b1c <MX_GPIO_Init+0x134>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a2e      	ldr	r2, [pc, #184]	; (8001b1c <MX_GPIO_Init+0x134>)
 8001a64:	f043 0308 	orr.w	r3, r3, #8
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b2c      	ldr	r3, [pc, #176]	; (8001b1c <MX_GPIO_Init+0x134>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a76:	4b29      	ldr	r3, [pc, #164]	; (8001b1c <MX_GPIO_Init+0x134>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a28      	ldr	r2, [pc, #160]	; (8001b1c <MX_GPIO_Init+0x134>)
 8001a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b26      	ldr	r3, [pc, #152]	; (8001b1c <MX_GPIO_Init+0x134>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f244 0181 	movw	r1, #16513	; 0x4081
 8001a94:	4822      	ldr	r0, [pc, #136]	; (8001b20 <MX_GPIO_Init+0x138>)
 8001a96:	f003 fcc7 	bl	8005428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2140      	movs	r1, #64	; 0x40
 8001a9e:	4821      	ldr	r0, [pc, #132]	; (8001b24 <MX_GPIO_Init+0x13c>)
 8001aa0:	f003 fcc2 	bl	8005428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001aa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aaa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001ab4:	f107 031c 	add.w	r3, r7, #28
 8001ab8:	4619      	mov	r1, r3
 8001aba:	481b      	ldr	r0, [pc, #108]	; (8001b28 <MX_GPIO_Init+0x140>)
 8001abc:	f003 fb08 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001ac0:	f244 0381 	movw	r3, #16513	; 0x4081
 8001ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad2:	f107 031c 	add.w	r3, r7, #28
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4811      	ldr	r0, [pc, #68]	; (8001b20 <MX_GPIO_Init+0x138>)
 8001ada:	f003 faf9 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001ade:	2340      	movs	r3, #64	; 0x40
 8001ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001aee:	f107 031c 	add.w	r3, r7, #28
 8001af2:	4619      	mov	r1, r3
 8001af4:	480b      	ldr	r0, [pc, #44]	; (8001b24 <MX_GPIO_Init+0x13c>)
 8001af6:	f003 faeb 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001afa:	2380      	movs	r3, #128	; 0x80
 8001afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afe:	2300      	movs	r3, #0
 8001b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b06:	f107 031c 	add.w	r3, r7, #28
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4805      	ldr	r0, [pc, #20]	; (8001b24 <MX_GPIO_Init+0x13c>)
 8001b0e:	f003 fadf 	bl	80050d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b12:	bf00      	nop
 8001b14:	3730      	adds	r7, #48	; 0x30
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40020400 	.word	0x40020400
 8001b24:	40021800 	.word	0x40021800
 8001b28:	40020800 	.word	0x40020800

08001b2c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001b34:	f006 fdf8 	bl	8008728 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);  // LED1 消灯
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	480d      	ldr	r0, [pc, #52]	; (8001b74 <StartDefaultTask+0x48>)
 8001b3e:	f003 fc73 	bl	8005428 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	uint16_t button_data = UDPController_GetControllerButtons();  // buttonの入力を取得
 8001b42:	f7ff fd45 	bl	80015d0 <UDPController_GetControllerButtons>
 8001b46:	4603      	mov	r3, r0
 8001b48:	81fb      	strh	r3, [r7, #14]
	if((button_data & CONTROLLER_CIRCLE) != 0){  // oボタンが押されている場合
 8001b4a:	89fb      	ldrh	r3, [r7, #14]
 8001b4c:	f003 0320 	and.w	r3, r3, #32
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <StartDefaultTask+0x34>
	   HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);  // LED1 点灯
 8001b54:	2201      	movs	r2, #1
 8001b56:	2101      	movs	r1, #1
 8001b58:	4806      	ldr	r0, [pc, #24]	; (8001b74 <StartDefaultTask+0x48>)
 8001b5a:	f003 fc65 	bl	8005428 <HAL_GPIO_WritePin>
 8001b5e:	e7f0      	b.n	8001b42 <StartDefaultTask+0x16>
	}else{
	   HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);  // LED1 消灯
 8001b60:	2200      	movs	r2, #0
 8001b62:	2101      	movs	r1, #1
 8001b64:	4803      	ldr	r0, [pc, #12]	; (8001b74 <StartDefaultTask+0x48>)
 8001b66:	f003 fc5f 	bl	8005428 <HAL_GPIO_WritePin>
	  osDelay(100);
 8001b6a:	2064      	movs	r0, #100	; 0x64
 8001b6c:	f007 fd56 	bl	800961c <osDelay>
  {
 8001b70:	e7e7      	b.n	8001b42 <StartDefaultTask+0x16>
 8001b72:	bf00      	nop
 8001b74:	40020400 	.word	0x40020400

08001b78 <freeRTOSChecker>:
/**
* @brief Function implementing the systemCheckTask thread.
* @param argument: Not used
* @retval None
*/
void freeRTOSChecker(){//無限ループの中で実行
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, LD2_Pin);  // PINのPin stateを反転
 8001b7c:	2180      	movs	r1, #128	; 0x80
 8001b7e:	4804      	ldr	r0, [pc, #16]	; (8001b90 <freeRTOSChecker+0x18>)
 8001b80:	f003 fc6b 	bl	800545a <HAL_GPIO_TogglePin>
	printf("RTOSchecking\r\n");
 8001b84:	4803      	ldr	r0, [pc, #12]	; (8001b94 <freeRTOSChecker+0x1c>)
 8001b86:	f019 ffa1 	bl	801bacc <puts>

}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40020400 	.word	0x40020400
 8001b94:	0801ce10 	.word	0x0801ce10

08001b98 <airChecker>:
	ServoDriver_Init(&servo_device, &servo_param);  // Servo基板にパラメータを送信
	HAL_Delay(100);  // 適切なdelayを入れる
	ServoDriver_SendValue(&servo_device, 20.0f);  // サーボが20.0度になるように回転させる
}

void airChecker(){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
	for(uint8_t i=PORT_1; i<=PORT_8; i++){  //すべてのポートを初期化しないとAir基板は動かない
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	71fb      	strb	r3, [r7, #7]
 8001ba2:	e00c      	b.n	8001bbe <airChecker+0x26>
	    air_device.device_num = i; // (i番ポートを指定)
 8001ba4:	4a13      	ldr	r2, [pc, #76]	; (8001bf4 <airChecker+0x5c>)
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	7093      	strb	r3, [r2, #2]
	    AirCylinder_Init(&air_device, AIR_OFF);
 8001baa:	2100      	movs	r1, #0
 8001bac:	4811      	ldr	r0, [pc, #68]	; (8001bf4 <airChecker+0x5c>)
 8001bae:	f7ff fa81 	bl	80010b4 <AirCylinder_Init>
	    osDelay(10);  // このdelayは必要
 8001bb2:	200a      	movs	r0, #10
 8001bb4:	f007 fd32 	bl	800961c <osDelay>
	for(uint8_t i=PORT_1; i<=PORT_8; i++){  //すべてのポートを初期化しないとAir基板は動かない
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	71fb      	strb	r3, [r7, #7]
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	2b07      	cmp	r3, #7
 8001bc2:	d9ef      	bls.n	8001ba4 <airChecker+0xc>
	  }
	  air_device.device_num=0; // とりあえず0番ポートのエアシリンダを動かします。
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <airChecker+0x5c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	709a      	strb	r2, [r3, #2]
	  AirCylinder_SendOutput(&air_device, AIR_ON);  // 0番ポートの電磁弁がonになる
 8001bca:	2101      	movs	r1, #1
 8001bcc:	4809      	ldr	r0, [pc, #36]	; (8001bf4 <airChecker+0x5c>)
 8001bce:	f7ff fa8c 	bl	80010ea <AirCylinder_SendOutput>
	  osDelay(1000);
 8001bd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bd6:	f007 fd21 	bl	800961c <osDelay>
	  AirCylinder_SendOutput(&air_device, AIR_OFF); // 0番ポートの電磁弁がoffになる
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <airChecker+0x5c>)
 8001bde:	f7ff fa84 	bl	80010ea <AirCylinder_SendOutput>
	  osDelay(1000);
 8001be2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001be6:	f007 fd19 	bl	800961c <osDelay>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20004438 	.word	0x20004438

08001bf8 <StartSystemCheckTask>:
/* USER CODE END Header_StartSystemCheckTask */
void StartSystemCheckTask(void *argument)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSystemCheckTask */
	//servoChecker();
	airChecker();
 8001c00:	f7ff ffca 	bl	8001b98 <airChecker>
  /* Infinite loop */
  for(;;)
  {
	  freeRTOSChecker();
 8001c04:	f7ff ffb8 	bl	8001b78 <freeRTOSChecker>
	  //mcmdChecker();
	  osDelay(1000);
 8001c08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c0c:	f007 fd06 	bl	800961c <osDelay>
	  freeRTOSChecker();
 8001c10:	e7f8      	b.n	8001c04 <StartSystemCheckTask+0xc>

08001c12 <StartControllerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControllerTask */
void StartControllerTask(void *argument)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControllerTask */
  /* Infinite loop */
  UDPControllerReceive(argument);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff fb92 	bl	8001344 <UDPControllerReceive>
  /* USER CODE END StartControllerTask */
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d101      	bne.n	8001c3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c3a:	f000 fcfd 	bl	8002638 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40002000 	.word	0x40002000

08001c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c50:	b672      	cpsid	i
}
 8001c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("error");
 8001c54:	4805      	ldr	r0, [pc, #20]	; (8001c6c <Error_Handler+0x20>)
 8001c56:	f019 fe9d 	bl	801b994 <iprintf>
	  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);  // LED1点灯
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	4804      	ldr	r0, [pc, #16]	; (8001c70 <Error_Handler+0x24>)
 8001c60:	f003 fbe2 	bl	8005428 <HAL_GPIO_WritePin>
	  osDelay(100);
 8001c64:	2064      	movs	r0, #100	; 0x64
 8001c66:	f007 fcd9 	bl	800961c <osDelay>
	  printf("error");
 8001c6a:	e7f3      	b.n	8001c54 <Error_Handler+0x8>
 8001c6c:	0801ce38 	.word	0x0801ce38
 8001c70:	40020400 	.word	0x40020400

08001c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <HAL_MspInit+0x4c>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	4a10      	ldr	r2, [pc, #64]	; (8001cc0 <HAL_MspInit+0x4c>)
 8001c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c84:	6413      	str	r3, [r2, #64]	; 0x40
 8001c86:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <HAL_MspInit+0x4c>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c92:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_MspInit+0x4c>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <HAL_MspInit+0x4c>)
 8001c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9e:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <HAL_MspInit+0x4c>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	210f      	movs	r1, #15
 8001cae:	f06f 0001 	mvn.w	r0, #1
 8001cb2:	f001 fc19 	bl	80034e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800

08001cc4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	; 0x28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a23      	ldr	r2, [pc, #140]	; (8001d70 <HAL_CAN_MspInit+0xac>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d13f      	bne.n	8001d66 <HAL_CAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001ce6:	4b23      	ldr	r3, [pc, #140]	; (8001d74 <HAL_CAN_MspInit+0xb0>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	4a22      	ldr	r2, [pc, #136]	; (8001d74 <HAL_CAN_MspInit+0xb0>)
 8001cec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf2:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <HAL_CAN_MspInit+0xb0>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <HAL_CAN_MspInit+0xb0>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a1c      	ldr	r2, [pc, #112]	; (8001d74 <HAL_CAN_MspInit+0xb0>)
 8001d04:	f043 0308 	orr.w	r3, r3, #8
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <HAL_CAN_MspInit+0xb0>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d16:	2303      	movs	r3, #3
 8001d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d22:	2303      	movs	r3, #3
 8001d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d26:	2309      	movs	r3, #9
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4811      	ldr	r0, [pc, #68]	; (8001d78 <HAL_CAN_MspInit+0xb4>)
 8001d32:	f003 f9cd 	bl	80050d0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2105      	movs	r1, #5
 8001d3a:	2013      	movs	r0, #19
 8001d3c:	f001 fbd4 	bl	80034e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001d40:	2013      	movs	r0, #19
 8001d42:	f001 fbed 	bl	8003520 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2105      	movs	r1, #5
 8001d4a:	2014      	movs	r0, #20
 8001d4c:	f001 fbcc 	bl	80034e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001d50:	2014      	movs	r0, #20
 8001d52:	f001 fbe5 	bl	8003520 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2105      	movs	r1, #5
 8001d5a:	2015      	movs	r0, #21
 8001d5c:	f001 fbc4 	bl	80034e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001d60:	2015      	movs	r0, #21
 8001d62:	f001 fbdd 	bl	8003520 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001d66:	bf00      	nop
 8001d68:	3728      	adds	r7, #40	; 0x28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40006400 	.word	0x40006400
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40020c00 	.word	0x40020c00

08001d7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b0ae      	sub	sp, #184	; 0xb8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	2290      	movs	r2, #144	; 0x90
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f019 fdf1 	bl	801b984 <memset>
  if(huart->Instance==USART3)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a3d      	ldr	r2, [pc, #244]	; (8001e9c <HAL_UART_MspInit+0x120>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d172      	bne.n	8001e92 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001dac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001db0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001db2:	2300      	movs	r3, #0
 8001db4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f004 fa16 	bl	80061ec <HAL_RCCEx_PeriphCLKConfig>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001dc6:	f7ff ff41 	bl	8001c4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dca:	4b35      	ldr	r3, [pc, #212]	; (8001ea0 <HAL_UART_MspInit+0x124>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	4a34      	ldr	r2, [pc, #208]	; (8001ea0 <HAL_UART_MspInit+0x124>)
 8001dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd6:	4b32      	ldr	r3, [pc, #200]	; (8001ea0 <HAL_UART_MspInit+0x124>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001de2:	4b2f      	ldr	r3, [pc, #188]	; (8001ea0 <HAL_UART_MspInit+0x124>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a2e      	ldr	r2, [pc, #184]	; (8001ea0 <HAL_UART_MspInit+0x124>)
 8001de8:	f043 0308 	orr.w	r3, r3, #8
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b2c      	ldr	r3, [pc, #176]	; (8001ea0 <HAL_UART_MspInit+0x124>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001dfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	2302      	movs	r3, #2
 8001e04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e14:	2307      	movs	r3, #7
 8001e16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e1a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4820      	ldr	r0, [pc, #128]	; (8001ea4 <HAL_UART_MspInit+0x128>)
 8001e22:	f003 f955 	bl	80050d0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001e26:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <HAL_UART_MspInit+0x12c>)
 8001e28:	4a20      	ldr	r2, [pc, #128]	; (8001eac <HAL_UART_MspInit+0x130>)
 8001e2a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001e2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <HAL_UART_MspInit+0x12c>)
 8001e2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e32:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e34:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <HAL_UART_MspInit+0x12c>)
 8001e36:	2240      	movs	r2, #64	; 0x40
 8001e38:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <HAL_UART_MspInit+0x12c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e40:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <HAL_UART_MspInit+0x12c>)
 8001e42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e46:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e48:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <HAL_UART_MspInit+0x12c>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e4e:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <HAL_UART_MspInit+0x12c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001e54:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <HAL_UART_MspInit+0x12c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e5a:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <HAL_UART_MspInit+0x12c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <HAL_UART_MspInit+0x12c>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001e66:	4810      	ldr	r0, [pc, #64]	; (8001ea8 <HAL_UART_MspInit+0x12c>)
 8001e68:	f001 fb68 	bl	800353c <HAL_DMA_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001e72:	f7ff feeb 	bl	8001c4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a0b      	ldr	r2, [pc, #44]	; (8001ea8 <HAL_UART_MspInit+0x12c>)
 8001e7a:	671a      	str	r2, [r3, #112]	; 0x70
 8001e7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <HAL_UART_MspInit+0x12c>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2105      	movs	r1, #5
 8001e86:	2027      	movs	r0, #39	; 0x27
 8001e88:	f001 fb2e 	bl	80034e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e8c:	2027      	movs	r0, #39	; 0x27
 8001e8e:	f001 fb47 	bl	8003520 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e92:	bf00      	nop
 8001e94:	37b8      	adds	r7, #184	; 0xb8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40004800 	.word	0x40004800
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40020c00 	.word	0x40020c00
 8001ea8:	200025a8 	.word	0x200025a8
 8001eac:	40026058 	.word	0x40026058

08001eb0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b0ae      	sub	sp, #184	; 0xb8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	2290      	movs	r2, #144	; 0x90
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f019 fd57 	bl	801b984 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ede:	d159      	bne.n	8001f94 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001ee0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ee4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f004 f97b 	bl	80061ec <HAL_RCCEx_PeriphCLKConfig>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001efc:	f7ff fea6 	bl	8001c4c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f00:	4b26      	ldr	r3, [pc, #152]	; (8001f9c <HAL_PCD_MspInit+0xec>)
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	4a25      	ldr	r2, [pc, #148]	; (8001f9c <HAL_PCD_MspInit+0xec>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0c:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <HAL_PCD_MspInit+0xec>)
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001f18:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001f1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f20:	2302      	movs	r3, #2
 8001f22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f32:	230a      	movs	r3, #10
 8001f34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4818      	ldr	r0, [pc, #96]	; (8001fa0 <HAL_PCD_MspInit+0xf0>)
 8001f40:	f003 f8c6 	bl	80050d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001f44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4810      	ldr	r0, [pc, #64]	; (8001fa0 <HAL_PCD_MspInit+0xf0>)
 8001f60:	f003 f8b6 	bl	80050d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f64:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <HAL_PCD_MspInit+0xec>)
 8001f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f68:	4a0c      	ldr	r2, [pc, #48]	; (8001f9c <HAL_PCD_MspInit+0xec>)
 8001f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f6e:	6353      	str	r3, [r2, #52]	; 0x34
 8001f70:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <HAL_PCD_MspInit+0xec>)
 8001f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <HAL_PCD_MspInit+0xec>)
 8001f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f80:	4a06      	ldr	r2, [pc, #24]	; (8001f9c <HAL_PCD_MspInit+0xec>)
 8001f82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f86:	6453      	str	r3, [r2, #68]	; 0x44
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <HAL_PCD_MspInit+0xec>)
 8001f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001f94:	bf00      	nop
 8001f96:	37b8      	adds	r7, #184	; 0xb8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40020000 	.word	0x40020000

08001fa4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08e      	sub	sp, #56	; 0x38
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001fb4:	4b33      	ldr	r3, [pc, #204]	; (8002084 <HAL_InitTick+0xe0>)
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	4a32      	ldr	r2, [pc, #200]	; (8002084 <HAL_InitTick+0xe0>)
 8001fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fbe:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc0:	4b30      	ldr	r3, [pc, #192]	; (8002084 <HAL_InitTick+0xe0>)
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fcc:	f107 0210 	add.w	r2, r7, #16
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f004 f8d6 	bl	8006188 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d103      	bne.n	8001fee <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001fe6:	f004 f8a7 	bl	8006138 <HAL_RCC_GetPCLK1Freq>
 8001fea:	6378      	str	r0, [r7, #52]	; 0x34
 8001fec:	e004      	b.n	8001ff8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001fee:	f004 f8a3 	bl	8006138 <HAL_RCC_GetPCLK1Freq>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffa:	4a23      	ldr	r2, [pc, #140]	; (8002088 <HAL_InitTick+0xe4>)
 8001ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8002000:	0c9b      	lsrs	r3, r3, #18
 8002002:	3b01      	subs	r3, #1
 8002004:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8002006:	4b21      	ldr	r3, [pc, #132]	; (800208c <HAL_InitTick+0xe8>)
 8002008:	4a21      	ldr	r2, [pc, #132]	; (8002090 <HAL_InitTick+0xec>)
 800200a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800200c:	4b1f      	ldr	r3, [pc, #124]	; (800208c <HAL_InitTick+0xe8>)
 800200e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002012:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8002014:	4a1d      	ldr	r2, [pc, #116]	; (800208c <HAL_InitTick+0xe8>)
 8002016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002018:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800201a:	4b1c      	ldr	r3, [pc, #112]	; (800208c <HAL_InitTick+0xe8>)
 800201c:	2200      	movs	r2, #0
 800201e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002020:	4b1a      	ldr	r3, [pc, #104]	; (800208c <HAL_InitTick+0xe8>)
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002026:	4b19      	ldr	r3, [pc, #100]	; (800208c <HAL_InitTick+0xe8>)
 8002028:	2200      	movs	r2, #0
 800202a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 800202c:	4817      	ldr	r0, [pc, #92]	; (800208c <HAL_InitTick+0xe8>)
 800202e:	f004 fd05 	bl	8006a3c <HAL_TIM_Base_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002038:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800203c:	2b00      	cmp	r3, #0
 800203e:	d11b      	bne.n	8002078 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8002040:	4812      	ldr	r0, [pc, #72]	; (800208c <HAL_InitTick+0xe8>)
 8002042:	f004 fd5d 	bl	8006b00 <HAL_TIM_Base_Start_IT>
 8002046:	4603      	mov	r3, r0
 8002048:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800204c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002050:	2b00      	cmp	r3, #0
 8002052:	d111      	bne.n	8002078 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002054:	202d      	movs	r0, #45	; 0x2d
 8002056:	f001 fa63 	bl	8003520 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b0f      	cmp	r3, #15
 800205e:	d808      	bhi.n	8002072 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8002060:	2200      	movs	r2, #0
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	202d      	movs	r0, #45	; 0x2d
 8002066:	f001 fa3f 	bl	80034e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800206a:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <HAL_InitTick+0xf0>)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	e002      	b.n	8002078 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002078:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800207c:	4618      	mov	r0, r3
 800207e:	3738      	adds	r7, #56	; 0x38
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40023800 	.word	0x40023800
 8002088:	431bde83 	.word	0x431bde83
 800208c:	2000443c 	.word	0x2000443c
 8002090:	40002000 	.word	0x40002000
 8002094:	20000004 	.word	0x20000004

08002098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800209c:	e7fe      	b.n	800209c <NMI_Handler+0x4>

0800209e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a2:	e7fe      	b.n	80020a2 <HardFault_Handler+0x4>

080020a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <MemManage_Handler+0x4>

080020aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ae:	e7fe      	b.n	80020ae <BusFault_Handler+0x4>

080020b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <UsageFault_Handler+0x4>

080020b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80020c8:	4802      	ldr	r0, [pc, #8]	; (80020d4 <DMA1_Stream3_IRQHandler+0x10>)
 80020ca:	f001 fb77 	bl	80037bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	200025a8 	.word	0x200025a8

080020d8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80020dc:	4802      	ldr	r0, [pc, #8]	; (80020e8 <CAN1_TX_IRQHandler+0x10>)
 80020de:	f000 ff58 	bl	8002f92 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200024f8 	.word	0x200024f8

080020ec <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80020f0:	4802      	ldr	r0, [pc, #8]	; (80020fc <CAN1_RX0_IRQHandler+0x10>)
 80020f2:	f000 ff4e 	bl	8002f92 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	200024f8 	.word	0x200024f8

08002100 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <CAN1_RX1_IRQHandler+0x10>)
 8002106:	f000 ff44 	bl	8002f92 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	200024f8 	.word	0x200024f8

08002114 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002118:	4802      	ldr	r0, [pc, #8]	; (8002124 <USART3_IRQHandler+0x10>)
 800211a:	f005 f841 	bl	80071a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20002520 	.word	0x20002520

08002128 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800212c:	4802      	ldr	r0, [pc, #8]	; (8002138 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800212e:	f004 fd5f 	bl	8006bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	2000443c 	.word	0x2000443c

0800213c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002140:	4802      	ldr	r0, [pc, #8]	; (800214c <ETH_IRQHandler+0x10>)
 8002142:	f002 f8f1 	bl	8004328 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20008e94 	.word	0x20008e94

08002150 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return 1;
 8002154:	2301      	movs	r3, #1
}
 8002156:	4618      	mov	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <_kill>:

int _kill(int pid, int sig)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800216a:	4b05      	ldr	r3, [pc, #20]	; (8002180 <_kill+0x20>)
 800216c:	2216      	movs	r2, #22
 800216e:	601a      	str	r2, [r3, #0]
  return -1;
 8002170:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	200111e8 	.word	0x200111e8

08002184 <_exit>:

void _exit (int status)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800218c:	f04f 31ff 	mov.w	r1, #4294967295
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff ffe5 	bl	8002160 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002196:	e7fe      	b.n	8002196 <_exit+0x12>

08002198 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	e00a      	b.n	80021c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021aa:	f3af 8000 	nop.w
 80021ae:	4601      	mov	r1, r0
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	60ba      	str	r2, [r7, #8]
 80021b6:	b2ca      	uxtb	r2, r1
 80021b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	3301      	adds	r3, #1
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	dbf0      	blt.n	80021aa <_read+0x12>
  }

  return len;
 80021c8:	687b      	ldr	r3, [r7, #4]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b086      	sub	sp, #24
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	e009      	b.n	80021f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	60ba      	str	r2, [r7, #8]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff f9fb 	bl	80015e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	3301      	adds	r3, #1
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	dbf1      	blt.n	80021e4 <_write+0x12>
  }
  return len;
 8002200:	687b      	ldr	r3, [r7, #4]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <_close>:

int _close(int file)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002212:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002232:	605a      	str	r2, [r3, #4]
  return 0;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <_isatty>:

int _isatty(int file)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800224a:	2301      	movs	r3, #1
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800227c:	4a14      	ldr	r2, [pc, #80]	; (80022d0 <_sbrk+0x5c>)
 800227e:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <_sbrk+0x60>)
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002288:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <_sbrk+0x64>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d102      	bne.n	8002296 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <_sbrk+0x64>)
 8002292:	4a12      	ldr	r2, [pc, #72]	; (80022dc <_sbrk+0x68>)
 8002294:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002296:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <_sbrk+0x64>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4413      	add	r3, r2
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d205      	bcs.n	80022b0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80022a4:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <_sbrk+0x6c>)
 80022a6:	220c      	movs	r2, #12
 80022a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022aa:	f04f 33ff 	mov.w	r3, #4294967295
 80022ae:	e009      	b.n	80022c4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80022b0:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <_sbrk+0x64>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022b6:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <_sbrk+0x64>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	4a06      	ldr	r2, [pc, #24]	; (80022d8 <_sbrk+0x64>)
 80022c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022c2:	68fb      	ldr	r3, [r7, #12]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	371c      	adds	r7, #28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	20080000 	.word	0x20080000
 80022d4:	00000400 	.word	0x00000400
 80022d8:	20004488 	.word	0x20004488
 80022dc:	20011200 	.word	0x20011200
 80022e0:	200111e8 	.word	0x200111e8

080022e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <SystemInit+0x20>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ee:	4a05      	ldr	r2, [pc, #20]	; (8002304 <SystemInit+0x20>)
 80022f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002340 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800230c:	480d      	ldr	r0, [pc, #52]	; (8002344 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800230e:	490e      	ldr	r1, [pc, #56]	; (8002348 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002310:	4a0e      	ldr	r2, [pc, #56]	; (800234c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002314:	e002      	b.n	800231c <LoopCopyDataInit>

08002316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800231a:	3304      	adds	r3, #4

0800231c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800231c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800231e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002320:	d3f9      	bcc.n	8002316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002322:	4a0b      	ldr	r2, [pc, #44]	; (8002350 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002324:	4c0b      	ldr	r4, [pc, #44]	; (8002354 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002328:	e001      	b.n	800232e <LoopFillZerobss>

0800232a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800232a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800232c:	3204      	adds	r2, #4

0800232e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800232e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002330:	d3fb      	bcc.n	800232a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002332:	f7ff ffd7 	bl	80022e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002336:	f019 fae3 	bl	801b900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800233a:	f7ff f9ed 	bl	8001718 <main>
  bx  lr    
 800233e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002340:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002348:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800234c:	08020920 	.word	0x08020920
  ldr r2, =_sbss
 8002350:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002354:	200111fc 	.word	0x200111fc

08002358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002358:	e7fe      	b.n	8002358 <ADC_IRQHandler>

0800235a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00b      	beq.n	8002382 <LAN8742_RegisterBusIO+0x28>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d007      	beq.n	8002382 <LAN8742_RegisterBusIO+0x28>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <LAN8742_RegisterBusIO+0x28>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d102      	bne.n	8002388 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002382:	f04f 33ff 	mov.w	r3, #4294967295
 8002386:	e014      	b.n	80023b2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80023be:	b580      	push	{r7, lr}
 80023c0:	b086      	sub	sp, #24
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d17c      	bne.n	80024d8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2220      	movs	r2, #32
 80023f0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	e01c      	b.n	8002432 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	f107 0208 	add.w	r2, r7, #8
 8002400:	2112      	movs	r1, #18
 8002402:	6978      	ldr	r0, [r7, #20]
 8002404:	4798      	blx	r3
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	da03      	bge.n	8002414 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800240c:	f06f 0304 	mvn.w	r3, #4
 8002410:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8002412:	e00b      	b.n	800242c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f003 031f 	and.w	r3, r3, #31
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	429a      	cmp	r2, r3
 800241e:	d105      	bne.n	800242c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
         break;
 800242a:	e005      	b.n	8002438 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	3301      	adds	r3, #1
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2b1f      	cmp	r3, #31
 8002436:	d9df      	bls.n	80023f8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b1f      	cmp	r3, #31
 800243e:	d902      	bls.n	8002446 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002440:	f06f 0302 	mvn.w	r3, #2
 8002444:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d145      	bne.n	80024d8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6810      	ldr	r0, [r2, #0]
 8002454:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002458:	2100      	movs	r1, #0
 800245a:	4798      	blx	r3
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	db37      	blt.n	80024d2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6810      	ldr	r0, [r2, #0]
 800246a:	f107 0208 	add.w	r2, r7, #8
 800246e:	2100      	movs	r1, #0
 8002470:	4798      	blx	r3
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	db28      	blt.n	80024ca <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	4798      	blx	r3
 800247e:	4603      	mov	r3, r0
 8002480:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002482:	e01c      	b.n	80024be <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	4798      	blx	r3
 800248a:	4603      	mov	r3, r0
 800248c:	461a      	mov	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002496:	d80e      	bhi.n	80024b6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6810      	ldr	r0, [r2, #0]
 80024a0:	f107 0208 	add.w	r2, r7, #8
 80024a4:	2100      	movs	r1, #0
 80024a6:	4798      	blx	r3
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	da07      	bge.n	80024be <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80024ae:	f06f 0304 	mvn.w	r3, #4
 80024b2:	613b      	str	r3, [r7, #16]
                 break;
 80024b4:	e010      	b.n	80024d8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80024b6:	f06f 0301 	mvn.w	r3, #1
 80024ba:	613b      	str	r3, [r7, #16]
               break;
 80024bc:	e00c      	b.n	80024d8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1dd      	bne.n	8002484 <LAN8742_Init+0xc6>
 80024c8:	e006      	b.n	80024d8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80024ca:	f06f 0304 	mvn.w	r3, #4
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	e002      	b.n	80024d8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80024d2:	f06f 0303 	mvn.w	r3, #3
 80024d6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d112      	bne.n	8002504 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	4798      	blx	r3
 80024e4:	4603      	mov	r3, r0
 80024e6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80024e8:	bf00      	nop
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	4798      	blx	r3
 80024f0:	4603      	mov	r3, r0
 80024f2:	461a      	mov	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80024fc:	d9f5      	bls.n	80024ea <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002504:	693b      	ldr	r3, [r7, #16]
 }
 8002506:	4618      	mov	r0, r3
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b084      	sub	sp, #16
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6810      	ldr	r0, [r2, #0]
 8002522:	f107 020c 	add.w	r2, r7, #12
 8002526:	2101      	movs	r1, #1
 8002528:	4798      	blx	r3
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	da02      	bge.n	8002536 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002530:	f06f 0304 	mvn.w	r3, #4
 8002534:	e06e      	b.n	8002614 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6810      	ldr	r0, [r2, #0]
 800253e:	f107 020c 	add.w	r2, r7, #12
 8002542:	2101      	movs	r1, #1
 8002544:	4798      	blx	r3
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	da02      	bge.n	8002552 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800254c:	f06f 0304 	mvn.w	r3, #4
 8002550:	e060      	b.n	8002614 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800255c:	2301      	movs	r3, #1
 800255e:	e059      	b.n	8002614 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6810      	ldr	r0, [r2, #0]
 8002568:	f107 020c 	add.w	r2, r7, #12
 800256c:	2100      	movs	r1, #0
 800256e:	4798      	blx	r3
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	da02      	bge.n	800257c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002576:	f06f 0304 	mvn.w	r3, #4
 800257a:	e04b      	b.n	8002614 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d11b      	bne.n	80025be <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d006      	beq.n	800259e <LAN8742_GetLinkState+0x90>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800259a:	2302      	movs	r3, #2
 800259c:	e03a      	b.n	8002614 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e033      	b.n	8002614 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80025b6:	2304      	movs	r3, #4
 80025b8:	e02c      	b.n	8002614 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80025ba:	2305      	movs	r3, #5
 80025bc:	e02a      	b.n	8002614 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6810      	ldr	r0, [r2, #0]
 80025c6:	f107 020c 	add.w	r2, r7, #12
 80025ca:	211f      	movs	r1, #31
 80025cc:	4798      	blx	r3
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	da02      	bge.n	80025da <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80025d4:	f06f 0304 	mvn.w	r3, #4
 80025d8:	e01c      	b.n	8002614 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80025e4:	2306      	movs	r3, #6
 80025e6:	e015      	b.n	8002614 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f003 031c 	and.w	r3, r3, #28
 80025ee:	2b18      	cmp	r3, #24
 80025f0:	d101      	bne.n	80025f6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80025f2:	2302      	movs	r3, #2
 80025f4:	e00e      	b.n	8002614 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f003 031c 	and.w	r3, r3, #28
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d101      	bne.n	8002604 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002600:	2303      	movs	r3, #3
 8002602:	e007      	b.n	8002614 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 031c 	and.w	r3, r3, #28
 800260a:	2b14      	cmp	r3, #20
 800260c:	d101      	bne.n	8002612 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800260e:	2304      	movs	r3, #4
 8002610:	e000      	b.n	8002614 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002612:	2305      	movs	r3, #5
    }				
  }
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002620:	2003      	movs	r0, #3
 8002622:	f000 ff56 	bl	80034d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002626:	200f      	movs	r0, #15
 8002628:	f7ff fcbc 	bl	8001fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800262c:	f7ff fb22 	bl	8001c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_IncTick+0x20>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	461a      	mov	r2, r3
 8002642:	4b06      	ldr	r3, [pc, #24]	; (800265c <HAL_IncTick+0x24>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4413      	add	r3, r2
 8002648:	4a04      	ldr	r2, [pc, #16]	; (800265c <HAL_IncTick+0x24>)
 800264a:	6013      	str	r3, [r2, #0]
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	20000008 	.word	0x20000008
 800265c:	2000448c 	.word	0x2000448c

08002660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return uwTick;
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <HAL_GetTick+0x14>)
 8002666:	681b      	ldr	r3, [r3, #0]
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	2000448c 	.word	0x2000448c

08002678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002680:	f7ff ffee 	bl	8002660 <HAL_GetTick>
 8002684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002690:	d005      	beq.n	800269e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002692:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <HAL_Delay+0x44>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4413      	add	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800269e:	bf00      	nop
 80026a0:	f7ff ffde 	bl	8002660 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d8f7      	bhi.n	80026a0 <HAL_Delay+0x28>
  {
  }
}
 80026b0:	bf00      	nop
 80026b2:	bf00      	nop
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000008 	.word	0x20000008

080026c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e0ed      	b.n	80028ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d102      	bne.n	80026e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff faf0 	bl	8001cc4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026f4:	f7ff ffb4 	bl	8002660 <HAL_GetTick>
 80026f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026fa:	e012      	b.n	8002722 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026fc:	f7ff ffb0 	bl	8002660 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b0a      	cmp	r3, #10
 8002708:	d90b      	bls.n	8002722 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2205      	movs	r2, #5
 800271a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e0c5      	b.n	80028ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0e5      	beq.n	80026fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0202 	bic.w	r2, r2, #2
 800273e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002740:	f7ff ff8e 	bl	8002660 <HAL_GetTick>
 8002744:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002746:	e012      	b.n	800276e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002748:	f7ff ff8a 	bl	8002660 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b0a      	cmp	r3, #10
 8002754:	d90b      	bls.n	800276e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2205      	movs	r2, #5
 8002766:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e09f      	b.n	80028ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1e5      	bne.n	8002748 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	7e1b      	ldrb	r3, [r3, #24]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d108      	bne.n	8002796 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	e007      	b.n	80027a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	7e5b      	ldrb	r3, [r3, #25]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d108      	bne.n	80027c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	e007      	b.n	80027d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	7e9b      	ldrb	r3, [r3, #26]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d108      	bne.n	80027ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0220 	orr.w	r2, r2, #32
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	e007      	b.n	80027fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0220 	bic.w	r2, r2, #32
 80027f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	7edb      	ldrb	r3, [r3, #27]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d108      	bne.n	8002814 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0210 	bic.w	r2, r2, #16
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	e007      	b.n	8002824 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0210 	orr.w	r2, r2, #16
 8002822:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	7f1b      	ldrb	r3, [r3, #28]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d108      	bne.n	800283e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0208 	orr.w	r2, r2, #8
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	e007      	b.n	800284e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0208 	bic.w	r2, r2, #8
 800284c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	7f5b      	ldrb	r3, [r3, #29]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d108      	bne.n	8002868 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f042 0204 	orr.w	r2, r2, #4
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	e007      	b.n	8002878 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0204 	bic.w	r2, r2, #4
 8002876:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	ea42 0103 	orr.w	r1, r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	1e5a      	subs	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ce:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80028d0:	7cfb      	ldrb	r3, [r7, #19]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d003      	beq.n	80028de <HAL_CAN_ConfigFilter+0x26>
 80028d6:	7cfb      	ldrb	r3, [r7, #19]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	f040 80c7 	bne.w	8002a6c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a69      	ldr	r2, [pc, #420]	; (8002a88 <HAL_CAN_ConfigFilter+0x1d0>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d001      	beq.n	80028ec <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80028e8:	4b68      	ldr	r3, [pc, #416]	; (8002a8c <HAL_CAN_ConfigFilter+0x1d4>)
 80028ea:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028f2:	f043 0201 	orr.w	r2, r3, #1
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	4a63      	ldr	r2, [pc, #396]	; (8002a8c <HAL_CAN_ConfigFilter+0x1d4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d111      	bne.n	8002928 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800290a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	021b      	lsls	r3, r3, #8
 8002920:	431a      	orrs	r2, r3
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	f003 031f 	and.w	r3, r3, #31
 8002930:	2201      	movs	r2, #1
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	43db      	mvns	r3, r3
 8002942:	401a      	ands	r2, r3
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d123      	bne.n	800299a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	43db      	mvns	r3, r3
 800295c:	401a      	ands	r2, r3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002974:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	3248      	adds	r2, #72	; 0x48
 800297a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800298e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002990:	6979      	ldr	r1, [r7, #20]
 8002992:	3348      	adds	r3, #72	; 0x48
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	440b      	add	r3, r1
 8002998:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d122      	bne.n	80029e8 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	431a      	orrs	r2, r3
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80029c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	3248      	adds	r2, #72	; 0x48
 80029c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029de:	6979      	ldr	r1, [r7, #20]
 80029e0:	3348      	adds	r3, #72	; 0x48
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	440b      	add	r3, r1
 80029e6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d109      	bne.n	8002a04 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	43db      	mvns	r3, r3
 80029fa:	401a      	ands	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002a02:	e007      	b.n	8002a14 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d109      	bne.n	8002a30 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	401a      	ands	r2, r3
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002a2e:	e007      	b.n	8002a40 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d107      	bne.n	8002a58 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	431a      	orrs	r2, r3
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a5e:	f023 0201 	bic.w	r2, r3, #1
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	e006      	b.n	8002a7a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
  }
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	371c      	adds	r7, #28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40003400 	.word	0x40003400
 8002a8c:	40006400 	.word	0x40006400

08002a90 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d12e      	bne.n	8002b02 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0201 	bic.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002abc:	f7ff fdd0 	bl	8002660 <HAL_GetTick>
 8002ac0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ac2:	e012      	b.n	8002aea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ac4:	f7ff fdcc 	bl	8002660 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b0a      	cmp	r3, #10
 8002ad0:	d90b      	bls.n	8002aea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2205      	movs	r2, #5
 8002ae2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e012      	b.n	8002b10 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1e5      	bne.n	8002ac4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	e006      	b.n	8002b10 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
  }
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b089      	sub	sp, #36	; 0x24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b2c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b36:	7ffb      	ldrb	r3, [r7, #31]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d003      	beq.n	8002b44 <HAL_CAN_AddTxMessage+0x2c>
 8002b3c:	7ffb      	ldrb	r3, [r7, #31]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	f040 80ad 	bne.w	8002c9e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10a      	bne.n	8002b64 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d105      	bne.n	8002b64 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 8095 	beq.w	8002c8e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	0e1b      	lsrs	r3, r3, #24
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002b6e:	2201      	movs	r2, #1
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	409a      	lsls	r2, r3
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10d      	bne.n	8002b9c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b8a:	68f9      	ldr	r1, [r7, #12]
 8002b8c:	6809      	ldr	r1, [r1, #0]
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	3318      	adds	r3, #24
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	440b      	add	r3, r1
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	e00f      	b.n	8002bbc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ba6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002bac:	68f9      	ldr	r1, [r7, #12]
 8002bae:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002bb0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	3318      	adds	r3, #24
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	440b      	add	r3, r1
 8002bba:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6819      	ldr	r1, [r3, #0]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	3318      	adds	r3, #24
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	440b      	add	r3, r1
 8002bcc:	3304      	adds	r3, #4
 8002bce:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	7d1b      	ldrb	r3, [r3, #20]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d111      	bne.n	8002bfc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	3318      	adds	r3, #24
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	4413      	add	r3, r2
 8002be4:	3304      	adds	r3, #4
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	6811      	ldr	r1, [r2, #0]
 8002bec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	3318      	adds	r3, #24
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	440b      	add	r3, r1
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3307      	adds	r3, #7
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	061a      	lsls	r2, r3, #24
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3306      	adds	r3, #6
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	041b      	lsls	r3, r3, #16
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3305      	adds	r3, #5
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	021b      	lsls	r3, r3, #8
 8002c16:	4313      	orrs	r3, r2
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	3204      	adds	r2, #4
 8002c1c:	7812      	ldrb	r2, [r2, #0]
 8002c1e:	4610      	mov	r0, r2
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	6811      	ldr	r1, [r2, #0]
 8002c24:	ea43 0200 	orr.w	r2, r3, r0
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	440b      	add	r3, r1
 8002c2e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002c32:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3303      	adds	r3, #3
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	061a      	lsls	r2, r3, #24
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3302      	adds	r3, #2
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	041b      	lsls	r3, r3, #16
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	021b      	lsls	r3, r3, #8
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	7812      	ldrb	r2, [r2, #0]
 8002c54:	4610      	mov	r0, r2
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	6811      	ldr	r1, [r2, #0]
 8002c5a:	ea43 0200 	orr.w	r2, r3, r0
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	440b      	add	r3, r1
 8002c64:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002c68:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	3318      	adds	r3, #24
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	4413      	add	r3, r2
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	6811      	ldr	r1, [r2, #0]
 8002c7c:	f043 0201 	orr.w	r2, r3, #1
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	3318      	adds	r3, #24
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	440b      	add	r3, r1
 8002c88:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	e00e      	b.n	8002cac <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e006      	b.n	8002cac <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
  }
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3724      	adds	r7, #36	; 0x24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cca:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002ccc:	7afb      	ldrb	r3, [r7, #11]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d002      	beq.n	8002cd8 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002cd2:	7afb      	ldrb	r3, [r7, #11]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d11d      	bne.n	8002d14 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	3301      	adds	r3, #1
 8002d12:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002d14:	68fb      	ldr	r3, [r7, #12]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002d22:	b480      	push	{r7}
 8002d24:	b087      	sub	sp, #28
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d36:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d38:	7dfb      	ldrb	r3, [r7, #23]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d003      	beq.n	8002d46 <HAL_CAN_GetRxMessage+0x24>
 8002d3e:	7dfb      	ldrb	r3, [r7, #23]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	f040 80f3 	bne.w	8002f2c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10e      	bne.n	8002d6a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d116      	bne.n	8002d88 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e0e7      	b.n	8002f3a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d107      	bne.n	8002d88 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0d8      	b.n	8002f3a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	331b      	adds	r3, #27
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	4413      	add	r3, r2
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0204 	and.w	r2, r3, #4
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10c      	bne.n	8002dc0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	331b      	adds	r3, #27
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	4413      	add	r3, r2
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	0d5b      	lsrs	r3, r3, #21
 8002db6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	e00b      	b.n	8002dd8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	331b      	adds	r3, #27
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	4413      	add	r3, r2
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	08db      	lsrs	r3, r3, #3
 8002dd0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	331b      	adds	r3, #27
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	4413      	add	r3, r2
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0202 	and.w	r2, r3, #2
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	331b      	adds	r3, #27
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	4413      	add	r3, r2
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 020f 	and.w	r2, r3, #15
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	331b      	adds	r3, #27
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	4413      	add	r3, r2
 8002e12:	3304      	adds	r3, #4
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	0a1b      	lsrs	r3, r3, #8
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	331b      	adds	r3, #27
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	4413      	add	r3, r2
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	0c1b      	lsrs	r3, r3, #16
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	0a1a      	lsrs	r2, r3, #8
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	3301      	adds	r3, #1
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	0c1a      	lsrs	r2, r3, #16
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	3302      	adds	r3, #2
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	0e1a      	lsrs	r2, r3, #24
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	3303      	adds	r3, #3
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	3304      	adds	r3, #4
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	0a1a      	lsrs	r2, r3, #8
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	3305      	adds	r3, #5
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	0c1a      	lsrs	r2, r3, #16
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	3306      	adds	r3, #6
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	0e1a      	lsrs	r2, r3, #24
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	3307      	adds	r3, #7
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d108      	bne.n	8002f18 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 0220 	orr.w	r2, r2, #32
 8002f14:	60da      	str	r2, [r3, #12]
 8002f16:	e007      	b.n	8002f28 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0220 	orr.w	r2, r2, #32
 8002f26:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e006      	b.n	8002f3a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
  }
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b085      	sub	sp, #20
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f56:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d002      	beq.n	8002f64 <HAL_CAN_ActivateNotification+0x1e>
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d109      	bne.n	8002f78 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6959      	ldr	r1, [r3, #20]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	e006      	b.n	8002f86 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
  }
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b08a      	sub	sp, #40	; 0x28
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d07c      	beq.n	80030d2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d023      	beq.n	800302a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7fe fb0b 	bl	8001610 <HAL_CAN_TxMailbox0CompleteCallback>
 8002ffa:	e016      	b.n	800302a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	d004      	beq.n	8003010 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
 800300e:	e00c      	b.n	800302a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d004      	beq.n	8003024 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
 8003022:	e002      	b.n	800302a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7fe fafd 	bl	8001624 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d024      	beq.n	800307e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f44f 7280 	mov.w	r2, #256	; 0x100
 800303c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7fe faf5 	bl	8001638 <HAL_CAN_TxMailbox1CompleteCallback>
 800304e:	e016      	b.n	800307e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003056:	2b00      	cmp	r3, #0
 8003058:	d004      	beq.n	8003064 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
 8003062:	e00c      	b.n	800307e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800306a:	2b00      	cmp	r3, #0
 800306c:	d004      	beq.n	8003078 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
 8003076:	e002      	b.n	800307e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7fe fae7 	bl	800164c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d024      	beq.n	80030d2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003090:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7fe fadf 	bl	8001660 <HAL_CAN_TxMailbox2CompleteCallback>
 80030a2:	e016      	b.n	80030d2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d004      	beq.n	80030b8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
 80030b6:	e00c      	b.n	80030d2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d004      	beq.n	80030cc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ca:	e002      	b.n	80030d2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7fe fad1 	bl	8001674 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00c      	beq.n	80030f6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f003 0310 	and.w	r3, r3, #16
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d007      	beq.n	80030f6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2210      	movs	r2, #16
 80030f4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00b      	beq.n	8003118 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d006      	beq.n	8003118 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2208      	movs	r2, #8
 8003110:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f8f4 	bl	8003300 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d009      	beq.n	8003136 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f003 0303 	and.w	r3, r3, #3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7fe faa9 	bl	8001688 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00c      	beq.n	800315a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	f003 0310 	and.w	r3, r3, #16
 8003146:	2b00      	cmp	r3, #0
 8003148:	d007      	beq.n	800315a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003150:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2210      	movs	r2, #16
 8003158:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	f003 0320 	and.w	r3, r3, #32
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00b      	beq.n	800317c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d006      	beq.n	800317c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2208      	movs	r2, #8
 8003174:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f8d6 	bl	8003328 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	f003 0310 	and.w	r3, r3, #16
 8003182:	2b00      	cmp	r3, #0
 8003184:	d009      	beq.n	800319a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f003 0303 	and.w	r3, r3, #3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f8bd 	bl	8003314 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00b      	beq.n	80031bc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d006      	beq.n	80031bc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2210      	movs	r2, #16
 80031b4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f8c0 	bl	800333c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00b      	beq.n	80031de <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d006      	beq.n	80031de <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2208      	movs	r2, #8
 80031d6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f8b9 	bl	8003350 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d07b      	beq.n	80032e0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d072      	beq.n	80032d8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d008      	beq.n	800320e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003214:	2b00      	cmp	r3, #0
 8003216:	d008      	beq.n	800322a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	f043 0302 	orr.w	r3, r3, #2
 8003228:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003230:	2b00      	cmp	r3, #0
 8003232:	d008      	beq.n	8003246 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	f043 0304 	orr.w	r3, r3, #4
 8003244:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800324c:	2b00      	cmp	r3, #0
 800324e:	d043      	beq.n	80032d8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003256:	2b00      	cmp	r3, #0
 8003258:	d03e      	beq.n	80032d8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003260:	2b60      	cmp	r3, #96	; 0x60
 8003262:	d02b      	beq.n	80032bc <HAL_CAN_IRQHandler+0x32a>
 8003264:	2b60      	cmp	r3, #96	; 0x60
 8003266:	d82e      	bhi.n	80032c6 <HAL_CAN_IRQHandler+0x334>
 8003268:	2b50      	cmp	r3, #80	; 0x50
 800326a:	d022      	beq.n	80032b2 <HAL_CAN_IRQHandler+0x320>
 800326c:	2b50      	cmp	r3, #80	; 0x50
 800326e:	d82a      	bhi.n	80032c6 <HAL_CAN_IRQHandler+0x334>
 8003270:	2b40      	cmp	r3, #64	; 0x40
 8003272:	d019      	beq.n	80032a8 <HAL_CAN_IRQHandler+0x316>
 8003274:	2b40      	cmp	r3, #64	; 0x40
 8003276:	d826      	bhi.n	80032c6 <HAL_CAN_IRQHandler+0x334>
 8003278:	2b30      	cmp	r3, #48	; 0x30
 800327a:	d010      	beq.n	800329e <HAL_CAN_IRQHandler+0x30c>
 800327c:	2b30      	cmp	r3, #48	; 0x30
 800327e:	d822      	bhi.n	80032c6 <HAL_CAN_IRQHandler+0x334>
 8003280:	2b10      	cmp	r3, #16
 8003282:	d002      	beq.n	800328a <HAL_CAN_IRQHandler+0x2f8>
 8003284:	2b20      	cmp	r3, #32
 8003286:	d005      	beq.n	8003294 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003288:	e01d      	b.n	80032c6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	f043 0308 	orr.w	r3, r3, #8
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003292:	e019      	b.n	80032c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	f043 0310 	orr.w	r3, r3, #16
 800329a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800329c:	e014      	b.n	80032c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	f043 0320 	orr.w	r3, r3, #32
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032a6:	e00f      	b.n	80032c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032b0:	e00a      	b.n	80032c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032ba:	e005      	b.n	80032c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032c4:	e000      	b.n	80032c8 <HAL_CAN_IRQHandler+0x336>
            break;
 80032c6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80032d6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2204      	movs	r2, #4
 80032de:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d008      	beq.n	80032f8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f836 	bl	8003364 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80032f8:	bf00      	nop
 80032fa:	3728      	adds	r7, #40	; 0x28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <__NVIC_SetPriorityGrouping+0x40>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003394:	4013      	ands	r3, r2
 8003396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <__NVIC_SetPriorityGrouping+0x44>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033a6:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <__NVIC_SetPriorityGrouping+0x40>)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	60d3      	str	r3, [r2, #12]
}
 80033ac:	bf00      	nop
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000ed00 	.word	0xe000ed00
 80033bc:	05fa0000 	.word	0x05fa0000

080033c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033c4:	4b04      	ldr	r3, [pc, #16]	; (80033d8 <__NVIC_GetPriorityGrouping+0x18>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	0a1b      	lsrs	r3, r3, #8
 80033ca:	f003 0307 	and.w	r3, r3, #7
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	db0b      	blt.n	8003406 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	f003 021f 	and.w	r2, r3, #31
 80033f4:	4907      	ldr	r1, [pc, #28]	; (8003414 <__NVIC_EnableIRQ+0x38>)
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	2001      	movs	r0, #1
 80033fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	e000e100 	.word	0xe000e100

08003418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	6039      	str	r1, [r7, #0]
 8003422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003428:	2b00      	cmp	r3, #0
 800342a:	db0a      	blt.n	8003442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	b2da      	uxtb	r2, r3
 8003430:	490c      	ldr	r1, [pc, #48]	; (8003464 <__NVIC_SetPriority+0x4c>)
 8003432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003436:	0112      	lsls	r2, r2, #4
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	440b      	add	r3, r1
 800343c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003440:	e00a      	b.n	8003458 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	b2da      	uxtb	r2, r3
 8003446:	4908      	ldr	r1, [pc, #32]	; (8003468 <__NVIC_SetPriority+0x50>)
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	3b04      	subs	r3, #4
 8003450:	0112      	lsls	r2, r2, #4
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	440b      	add	r3, r1
 8003456:	761a      	strb	r2, [r3, #24]
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	e000e100 	.word	0xe000e100
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800346c:	b480      	push	{r7}
 800346e:	b089      	sub	sp, #36	; 0x24
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f1c3 0307 	rsb	r3, r3, #7
 8003486:	2b04      	cmp	r3, #4
 8003488:	bf28      	it	cs
 800348a:	2304      	movcs	r3, #4
 800348c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	3304      	adds	r3, #4
 8003492:	2b06      	cmp	r3, #6
 8003494:	d902      	bls.n	800349c <NVIC_EncodePriority+0x30>
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	3b03      	subs	r3, #3
 800349a:	e000      	b.n	800349e <NVIC_EncodePriority+0x32>
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a0:	f04f 32ff 	mov.w	r2, #4294967295
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	43da      	mvns	r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	401a      	ands	r2, r3
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034b4:	f04f 31ff 	mov.w	r1, #4294967295
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	fa01 f303 	lsl.w	r3, r1, r3
 80034be:	43d9      	mvns	r1, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c4:	4313      	orrs	r3, r2
         );
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3724      	adds	r7, #36	; 0x24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff ff4c 	bl	8003378 <__NVIC_SetPriorityGrouping>
}
 80034e0:	bf00      	nop
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
 80034f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034fa:	f7ff ff61 	bl	80033c0 <__NVIC_GetPriorityGrouping>
 80034fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	68b9      	ldr	r1, [r7, #8]
 8003504:	6978      	ldr	r0, [r7, #20]
 8003506:	f7ff ffb1 	bl	800346c <NVIC_EncodePriority>
 800350a:	4602      	mov	r2, r0
 800350c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003510:	4611      	mov	r1, r2
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff ff80 	bl	8003418 <__NVIC_SetPriority>
}
 8003518:	bf00      	nop
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800352a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff ff54 	bl	80033dc <__NVIC_EnableIRQ>
}
 8003534:	bf00      	nop
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003548:	f7ff f88a 	bl	8002660 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e099      	b.n	800368c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0201 	bic.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003578:	e00f      	b.n	800359a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800357a:	f7ff f871 	bl	8002660 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b05      	cmp	r3, #5
 8003586:	d908      	bls.n	800359a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2220      	movs	r2, #32
 800358c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2203      	movs	r2, #3
 8003592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e078      	b.n	800368c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1e8      	bne.n	800357a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	4b38      	ldr	r3, [pc, #224]	; (8003694 <HAL_DMA_Init+0x158>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d107      	bne.n	8003604 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	4313      	orrs	r3, r2
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4313      	orrs	r3, r2
 8003602:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f023 0307 	bic.w	r3, r3, #7
 800361a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	4313      	orrs	r3, r2
 8003624:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	2b04      	cmp	r3, #4
 800362c:	d117      	bne.n	800365e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00e      	beq.n	800365e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fa7b 	bl	8003b3c <DMA_CheckFifoParam>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d008      	beq.n	800365e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2240      	movs	r2, #64	; 0x40
 8003650:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800365a:	2301      	movs	r3, #1
 800365c:	e016      	b.n	800368c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fa32 	bl	8003ad0 <DMA_CalcBaseAndBitshift>
 800366c:	4603      	mov	r3, r0
 800366e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003674:	223f      	movs	r2, #63	; 0x3f
 8003676:	409a      	lsls	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	e010803f 	.word	0xe010803f

08003698 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036a6:	f7fe ffdb 	bl	8002660 <HAL_GetTick>
 80036aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d008      	beq.n	80036ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2280      	movs	r2, #128	; 0x80
 80036bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e052      	b.n	8003770 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0216 	bic.w	r2, r2, #22
 80036d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695a      	ldr	r2, [r3, #20]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d103      	bne.n	80036fa <HAL_DMA_Abort+0x62>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d007      	beq.n	800370a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0208 	bic.w	r2, r2, #8
 8003708:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0201 	bic.w	r2, r2, #1
 8003718:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800371a:	e013      	b.n	8003744 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800371c:	f7fe ffa0 	bl	8002660 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b05      	cmp	r3, #5
 8003728:	d90c      	bls.n	8003744 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2220      	movs	r2, #32
 800372e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2203      	movs	r2, #3
 8003734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e015      	b.n	8003770 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1e4      	bne.n	800371c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003756:	223f      	movs	r2, #63	; 0x3f
 8003758:	409a      	lsls	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d004      	beq.n	8003796 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2280      	movs	r2, #128	; 0x80
 8003790:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e00c      	b.n	80037b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2205      	movs	r2, #5
 800379a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0201 	bic.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80037c8:	4b8e      	ldr	r3, [pc, #568]	; (8003a04 <HAL_DMA_IRQHandler+0x248>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a8e      	ldr	r2, [pc, #568]	; (8003a08 <HAL_DMA_IRQHandler+0x24c>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	0a9b      	lsrs	r3, r3, #10
 80037d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e6:	2208      	movs	r2, #8
 80037e8:	409a      	lsls	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	4013      	ands	r3, r2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d01a      	beq.n	8003828 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d013      	beq.n	8003828 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0204 	bic.w	r2, r2, #4
 800380e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003814:	2208      	movs	r2, #8
 8003816:	409a      	lsls	r2, r3
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003820:	f043 0201 	orr.w	r2, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382c:	2201      	movs	r2, #1
 800382e:	409a      	lsls	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4013      	ands	r3, r2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d012      	beq.n	800385e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00b      	beq.n	800385e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384a:	2201      	movs	r2, #1
 800384c:	409a      	lsls	r2, r3
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003856:	f043 0202 	orr.w	r2, r3, #2
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003862:	2204      	movs	r2, #4
 8003864:	409a      	lsls	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4013      	ands	r3, r2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d012      	beq.n	8003894 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00b      	beq.n	8003894 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003880:	2204      	movs	r2, #4
 8003882:	409a      	lsls	r2, r3
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388c:	f043 0204 	orr.w	r2, r3, #4
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003898:	2210      	movs	r2, #16
 800389a:	409a      	lsls	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4013      	ands	r3, r2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d043      	beq.n	800392c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d03c      	beq.n	800392c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b6:	2210      	movs	r2, #16
 80038b8:	409a      	lsls	r2, r3
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d018      	beq.n	80038fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d108      	bne.n	80038ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d024      	beq.n	800392c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	4798      	blx	r3
 80038ea:	e01f      	b.n	800392c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d01b      	beq.n	800392c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	4798      	blx	r3
 80038fc:	e016      	b.n	800392c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003908:	2b00      	cmp	r3, #0
 800390a:	d107      	bne.n	800391c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0208 	bic.w	r2, r2, #8
 800391a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003930:	2220      	movs	r2, #32
 8003932:	409a      	lsls	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4013      	ands	r3, r2
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 808f 	beq.w	8003a5c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 8087 	beq.w	8003a5c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003952:	2220      	movs	r2, #32
 8003954:	409a      	lsls	r2, r3
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b05      	cmp	r3, #5
 8003964:	d136      	bne.n	80039d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0216 	bic.w	r2, r2, #22
 8003974:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	695a      	ldr	r2, [r3, #20]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003984:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	2b00      	cmp	r3, #0
 800398c:	d103      	bne.n	8003996 <HAL_DMA_IRQHandler+0x1da>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003992:	2b00      	cmp	r3, #0
 8003994:	d007      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0208 	bic.w	r2, r2, #8
 80039a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039aa:	223f      	movs	r2, #63	; 0x3f
 80039ac:	409a      	lsls	r2, r3
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d07e      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	4798      	blx	r3
        }
        return;
 80039d2:	e079      	b.n	8003ac8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d01d      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10d      	bne.n	8003a0c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d031      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	4798      	blx	r3
 8003a00:	e02c      	b.n	8003a5c <HAL_DMA_IRQHandler+0x2a0>
 8003a02:	bf00      	nop
 8003a04:	20000000 	.word	0x20000000
 8003a08:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d023      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	4798      	blx	r3
 8003a1c:	e01e      	b.n	8003a5c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10f      	bne.n	8003a4c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0210 	bic.w	r2, r2, #16
 8003a3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d032      	beq.n	8003aca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d022      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2205      	movs	r2, #5
 8003a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0201 	bic.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	60bb      	str	r3, [r7, #8]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d307      	bcc.n	8003aa4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f2      	bne.n	8003a88 <HAL_DMA_IRQHandler+0x2cc>
 8003aa2:	e000      	b.n	8003aa6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003aa4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d005      	beq.n	8003aca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	4798      	blx	r3
 8003ac6:	e000      	b.n	8003aca <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ac8:	bf00      	nop
    }
  }
}
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	3b10      	subs	r3, #16
 8003ae0:	4a13      	ldr	r2, [pc, #76]	; (8003b30 <DMA_CalcBaseAndBitshift+0x60>)
 8003ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae6:	091b      	lsrs	r3, r3, #4
 8003ae8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003aea:	4a12      	ldr	r2, [pc, #72]	; (8003b34 <DMA_CalcBaseAndBitshift+0x64>)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4413      	add	r3, r2
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d908      	bls.n	8003b10 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <DMA_CalcBaseAndBitshift+0x68>)
 8003b06:	4013      	ands	r3, r2
 8003b08:	1d1a      	adds	r2, r3, #4
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	659a      	str	r2, [r3, #88]	; 0x58
 8003b0e:	e006      	b.n	8003b1e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	461a      	mov	r2, r3
 8003b16:	4b08      	ldr	r3, [pc, #32]	; (8003b38 <DMA_CalcBaseAndBitshift+0x68>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	aaaaaaab 	.word	0xaaaaaaab
 8003b34:	08020648 	.word	0x08020648
 8003b38:	fffffc00 	.word	0xfffffc00

08003b3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b44:	2300      	movs	r3, #0
 8003b46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d11f      	bne.n	8003b96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d856      	bhi.n	8003c0a <DMA_CheckFifoParam+0xce>
 8003b5c:	a201      	add	r2, pc, #4	; (adr r2, 8003b64 <DMA_CheckFifoParam+0x28>)
 8003b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b62:	bf00      	nop
 8003b64:	08003b75 	.word	0x08003b75
 8003b68:	08003b87 	.word	0x08003b87
 8003b6c:	08003b75 	.word	0x08003b75
 8003b70:	08003c0b 	.word	0x08003c0b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d046      	beq.n	8003c0e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b84:	e043      	b.n	8003c0e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b8e:	d140      	bne.n	8003c12 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b94:	e03d      	b.n	8003c12 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b9e:	d121      	bne.n	8003be4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d837      	bhi.n	8003c16 <DMA_CheckFifoParam+0xda>
 8003ba6:	a201      	add	r2, pc, #4	; (adr r2, 8003bac <DMA_CheckFifoParam+0x70>)
 8003ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bac:	08003bbd 	.word	0x08003bbd
 8003bb0:	08003bc3 	.word	0x08003bc3
 8003bb4:	08003bbd 	.word	0x08003bbd
 8003bb8:	08003bd5 	.word	0x08003bd5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8003bc0:	e030      	b.n	8003c24 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d025      	beq.n	8003c1a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bd2:	e022      	b.n	8003c1a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bdc:	d11f      	bne.n	8003c1e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003be2:	e01c      	b.n	8003c1e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d903      	bls.n	8003bf2 <DMA_CheckFifoParam+0xb6>
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d003      	beq.n	8003bf8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bf0:	e018      	b.n	8003c24 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf6:	e015      	b.n	8003c24 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00e      	beq.n	8003c22 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
      break;
 8003c08:	e00b      	b.n	8003c22 <DMA_CheckFifoParam+0xe6>
      break;
 8003c0a:	bf00      	nop
 8003c0c:	e00a      	b.n	8003c24 <DMA_CheckFifoParam+0xe8>
      break;
 8003c0e:	bf00      	nop
 8003c10:	e008      	b.n	8003c24 <DMA_CheckFifoParam+0xe8>
      break;
 8003c12:	bf00      	nop
 8003c14:	e006      	b.n	8003c24 <DMA_CheckFifoParam+0xe8>
      break;
 8003c16:	bf00      	nop
 8003c18:	e004      	b.n	8003c24 <DMA_CheckFifoParam+0xe8>
      break;
 8003c1a:	bf00      	nop
 8003c1c:	e002      	b.n	8003c24 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c1e:	bf00      	nop
 8003c20:	e000      	b.n	8003c24 <DMA_CheckFifoParam+0xe8>
      break;
 8003c22:	bf00      	nop
    }
  } 
  
  return status; 
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop

08003c34 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e06a      	b.n	8003d1c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d106      	bne.n	8003c5e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2223      	movs	r2, #35	; 0x23
 8003c54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f005 f987 	bl	8008f6c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c5e:	4b31      	ldr	r3, [pc, #196]	; (8003d24 <HAL_ETH_Init+0xf0>)
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	4a30      	ldr	r2, [pc, #192]	; (8003d24 <HAL_ETH_Init+0xf0>)
 8003c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c68:	6453      	str	r3, [r2, #68]	; 0x44
 8003c6a:	4b2e      	ldr	r3, [pc, #184]	; (8003d24 <HAL_ETH_Init+0xf0>)
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c72:	60bb      	str	r3, [r7, #8]
 8003c74:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003c76:	4b2c      	ldr	r3, [pc, #176]	; (8003d28 <HAL_ETH_Init+0xf4>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	4a2b      	ldr	r2, [pc, #172]	; (8003d28 <HAL_ETH_Init+0xf4>)
 8003c7c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c80:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003c82:	4b29      	ldr	r3, [pc, #164]	; (8003d28 <HAL_ETH_Init+0xf4>)
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	4927      	ldr	r1, [pc, #156]	; (8003d28 <HAL_ETH_Init+0xf4>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003c90:	4b25      	ldr	r3, [pc, #148]	; (8003d28 <HAL_ETH_Init+0xf4>)
 8003c92:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6812      	ldr	r2, [r2, #0]
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003caa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cac:	f7fe fcd8 	bl	8002660 <HAL_GetTick>
 8003cb0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003cb2:	e011      	b.n	8003cd8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003cb4:	f7fe fcd4 	bl	8002660 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003cc2:	d909      	bls.n	8003cd8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2204      	movs	r2, #4
 8003cc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	22e0      	movs	r2, #224	; 0xe0
 8003cd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e021      	b.n	8003d1c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e4      	bne.n	8003cb4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 ff4c 	bl	8004b88 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 fff3 	bl	8004cdc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f001 f849 	bl	8004d8e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	461a      	mov	r2, r3
 8003d02:	2100      	movs	r1, #0
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 ffb1 	bl	8004c6c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2210      	movs	r2, #16
 8003d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40023800 	.word	0x40023800
 8003d28:	40013800 	.word	0x40013800

08003d2c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d3a:	2b10      	cmp	r3, #16
 8003d3c:	d17b      	bne.n	8003e36 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2223      	movs	r2, #35	; 0x23
 8003d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8003d5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	4b35      	ldr	r3, [pc, #212]	; (8003e40 <HAL_ETH_Start_IT+0x114>)
 8003d6a:	430b      	orrs	r3, r1
 8003d6c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8003d80:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2204      	movs	r2, #4
 8003d88:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f9fc 	bl	8004188 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0208 	orr.w	r2, r2, #8
 8003d9e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003da8:	2001      	movs	r0, #1
 8003daa:	f7fe fc65 	bl	8002678 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0204 	orr.w	r2, r2, #4
 8003dc4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dce:	2001      	movs	r0, #1
 8003dd0:	f7fe fc52 	bl	8002678 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fd74 	bl	80048ca <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6812      	ldr	r2, [r2, #0]
 8003df0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003df4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003df8:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6812      	ldr	r2, [r2, #0]
 8003e08:	f043 0302 	orr.w	r3, r3, #2
 8003e0c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e10:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e1a:	69d9      	ldr	r1, [r3, #28]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	4b08      	ldr	r3, [pc, #32]	; (8003e44 <HAL_ETH_Start_IT+0x118>)
 8003e22:	430b      	orrs	r3, r1
 8003e24:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e28:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2223      	movs	r2, #35	; 0x23
 8003e2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	e000      	b.n	8003e38 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
  }
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	00020060 	.word	0x00020060
 8003e44:	0001a0c1 	.word	0x0001a0c1

08003e48 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e56:	2b23      	cmp	r3, #35	; 0x23
 8003e58:	d16e      	bne.n	8003f38 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2223      	movs	r2, #35	; 0x23
 8003e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e6a:	69d9      	ldr	r1, [r3, #28]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	4b34      	ldr	r3, [pc, #208]	; (8003f44 <HAL_ETH_Stop_IT+0xfc>)
 8003e72:	400b      	ands	r3, r1
 8003e74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e78:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e90:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	f023 0302 	bic.w	r3, r3, #2
 8003ea4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ea8:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0204 	bic.w	r2, r2, #4
 8003eb8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ec2:	2001      	movs	r0, #1
 8003ec4:	f7fe fbd8 	bl	8002678 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 fcfa 	bl	80048ca <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0208 	bic.w	r2, r2, #8
 8003ee4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003eee:	2001      	movs	r0, #1
 8003ef0:	f7fe fbc2 	bl	8002678 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003efc:	2300      	movs	r3, #0
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	e00e      	b.n	8003f20 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	3212      	adds	r2, #18
 8003f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f0c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d9ed      	bls.n	8003f02 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2210      	movs	r2, #16
 8003f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	e000      	b.n	8003f3a <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
  }
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3718      	adds	r7, #24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	fffe5f3e 	.word	0xfffe5f3e

08003f48 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d109      	bne.n	8003f6c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5e:	f043 0201 	orr.w	r2, r3, #1
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e045      	b.n	8003ff8 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f72:	2b23      	cmp	r3, #35	; 0x23
 8003f74:	d13f      	bne.n	8003ff6 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003f7e:	2201      	movs	r2, #1
 8003f80:	6839      	ldr	r1, [r7, #0]
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 ff70 	bl	8004e68 <ETH_Prepare_Tx_Descriptors>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d009      	beq.n	8003fa2 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f94:	f043 0202 	orr.w	r2, r3, #2
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e02a      	b.n	8003ff8 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003fa2:	f3bf 8f4f 	dsb	sy
}
 8003fa6:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	629a      	str	r2, [r3, #40]	; 0x28
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	d904      	bls.n	8003fc4 <HAL_ETH_Transmit_IT+0x7c>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbe:	1f1a      	subs	r2, r3, #4
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00d      	beq.n	8003ff2 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fde:	461a      	mov	r2, r3
 8003fe0:	2304      	movs	r3, #4
 8003fe2:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fec:	461a      	mov	r2, r3
 8003fee:	2300      	movs	r3, #0
 8003ff0:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	e000      	b.n	8003ff8 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
  }
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d109      	bne.n	800402c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401e:	f043 0201 	orr.w	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e0a8      	b.n	800417e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004032:	2b23      	cmp	r3, #35	; 0x23
 8004034:	d001      	beq.n	800403a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e0a1      	b.n	800417e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	69fa      	ldr	r2, [r7, #28]
 8004044:	3212      	adds	r2, #18
 8004046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800404a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004050:	f1c3 0304 	rsb	r3, r3, #4
 8004054:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004056:	e06a      	b.n	800412e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004060:	2b00      	cmp	r3, #0
 8004062:	d007      	beq.n	8004074 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	699a      	ldr	r2, [r3, #24]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	69da      	ldr	r2, [r3, #28]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800407c:	2b00      	cmp	r3, #0
 800407e:	d103      	bne.n	8004088 <HAL_ETH_ReadData+0x88>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004084:	2b00      	cmp	r3, #0
 8004086:	d040      	beq.n	800410a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00c      	beq.n	80040cc <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	0c1b      	lsrs	r3, r3, #16
 80040b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80040bc:	3b04      	subs	r3, #4
 80040be:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80040c8:	2301      	movs	r3, #1
 80040ca:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80040e4:	461a      	mov	r2, r3
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	f005 f90b 	bl	8009304 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	441a      	add	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2200      	movs	r2, #0
 8004108:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	3301      	adds	r3, #1
 800410e:	61fb      	str	r3, [r7, #28]
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	2b03      	cmp	r3, #3
 8004114:	d902      	bls.n	800411c <HAL_ETH_ReadData+0x11c>
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	3b04      	subs	r3, #4
 800411a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	3212      	adds	r2, #18
 8004122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004126:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	3301      	adds	r3, #1
 800412c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	db06      	blt.n	8004144 <HAL_ETH_ReadData+0x144>
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	429a      	cmp	r2, r3
 800413c:	d202      	bcs.n	8004144 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800413e:	7bfb      	ldrb	r3, [r7, #15]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d089      	beq.n	8004058 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	441a      	add	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f815 	bl	8004188 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69fa      	ldr	r2, [r7, #28]
 8004162:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8004164:	7bfb      	ldrb	r3, [r7, #15]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d108      	bne.n	800417c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	e000      	b.n	800417e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
}
 800417e:	4618      	mov	r0, r3
 8004180:	3720      	adds	r7, #32
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
	...

08004188 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004190:	2300      	movs	r3, #0
 8004192:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8004194:	2301      	movs	r3, #1
 8004196:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800419c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69fa      	ldr	r2, [r7, #28]
 80041a2:	3212      	adds	r2, #18
 80041a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041a8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ae:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80041b0:	e040      	b.n	8004234 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d112      	bne.n	80041e0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80041ba:	f107 030c 	add.w	r3, r7, #12
 80041be:	4618      	mov	r0, r3
 80041c0:	f005 f870 	bl	80092a4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d102      	bne.n	80041d0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	74fb      	strb	r3, [r7, #19]
 80041ce:	e007      	b.n	80041e0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	461a      	mov	r2, r3
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	461a      	mov	r2, r3
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80041e0:	7cfb      	ldrb	r3, [r7, #19]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d026      	beq.n	8004234 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d103      	bne.n	80041f6 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	4a1e      	ldr	r2, [pc, #120]	; (800426c <ETH_UpdateDescriptor+0xe4>)
 80041f2:	605a      	str	r2, [r3, #4]
 80041f4:	e003      	b.n	80041fe <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80041fc:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80041fe:	f3bf 8f5f 	dmb	sy
}
 8004202:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	3301      	adds	r3, #1
 8004214:	61fb      	str	r3, [r7, #28]
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	2b03      	cmp	r3, #3
 800421a:	d902      	bls.n	8004222 <ETH_UpdateDescriptor+0x9a>
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	3b04      	subs	r3, #4
 8004220:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	3212      	adds	r2, #18
 8004228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800422c:	617b      	str	r3, [r7, #20]
      desccount--;
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	3b01      	subs	r3, #1
 8004232:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <ETH_UpdateDescriptor+0xb8>
 800423a:	7cfb      	ldrb	r3, [r7, #19]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1b8      	bne.n	80041b2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	429a      	cmp	r2, r3
 8004248:	d00c      	beq.n	8004264 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004252:	461a      	mov	r2, r3
 8004254:	2300      	movs	r3, #0
 8004256:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8004264:	bf00      	nop
 8004266:	3720      	adds	r7, #32
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	80004600 	.word	0x80004600

08004270 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3318      	adds	r3, #24
 800427c:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004282:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800428a:	2301      	movs	r3, #1
 800428c:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800428e:	e03f      	b.n	8004310 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8004290:	2301      	movs	r3, #1
 8004292:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	3b01      	subs	r3, #1
 8004298:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	3304      	adds	r3, #4
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	3301      	adds	r3, #1
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80042b8:	7bbb      	ldrb	r3, [r7, #14]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d028      	beq.n	8004310 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68d9      	ldr	r1, [r3, #12]
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4613      	mov	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	440b      	add	r3, r1
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	db1b      	blt.n	800430c <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	3304      	adds	r3, #4
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f005 f851 	bl	8009388 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	3304      	adds	r3, #4
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	2200      	movs	r2, #0
 80042f2:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	3301      	adds	r3, #1
 80042f8:	f003 0303 	and.w	r3, r3, #3
 80042fc:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	62da      	str	r2, [r3, #44]	; 0x2c
 800430a:	e001      	b.n	8004310 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_ETH_ReleaseTxPacket+0xac>
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1b9      	bne.n	8004290 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433e:	2b40      	cmp	r3, #64	; 0x40
 8004340:	d112      	bne.n	8004368 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004350:	2b40      	cmp	r3, #64	; 0x40
 8004352:	d109      	bne.n	8004368 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800435c:	461a      	mov	r2, r3
 800435e:	4b50      	ldr	r3, [pc, #320]	; (80044a0 <HAL_ETH_IRQHandler+0x178>)
 8004360:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f004 fb64 	bl	8008a30 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b01      	cmp	r3, #1
 8004378:	d113      	bne.n	80043a2 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b01      	cmp	r3, #1
 800438a:	d10a      	bne.n	80043a2 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004394:	461a      	mov	r2, r3
 8004396:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800439a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f004 fb57 	bl	8008a50 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b4:	d14c      	bne.n	8004450 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043c8:	d142      	bne.n	8004450 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d0:	f043 0208 	orr.w	r2, r3, #8
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ec:	d11a      	bne.n	8004424 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f6:	695a      	ldr	r2, [r3, #20]
 80043f8:	4b2a      	ldr	r3, [pc, #168]	; (80044a4 <HAL_ETH_IRQHandler+0x17c>)
 80043fa:	4013      	ands	r3, r2
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6812      	ldr	r2, [r2, #0]
 8004410:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8004414:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004418:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	22e0      	movs	r2, #224	; 0xe0
 800441e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8004422:	e012      	b.n	800444a <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800442c:	695a      	ldr	r2, [r3, #20]
 800442e:	f248 6380 	movw	r3, #34432	; 0x8680
 8004432:	4013      	ands	r3, r2
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004442:	461a      	mov	r2, r3
 8004444:	f248 6380 	movw	r3, #34432	; 0x8680
 8004448:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f004 fb10 	bl	8008a70 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b08      	cmp	r3, #8
 800445c:	d10e      	bne.n	800447c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004464:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f81c 	bl	80044ac <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800447c:	4b0a      	ldr	r3, [pc, #40]	; (80044a8 <HAL_ETH_IRQHandler+0x180>)
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d006      	beq.n	8004496 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004488:	4b07      	ldr	r3, [pc, #28]	; (80044a8 <HAL_ETH_IRQHandler+0x180>)
 800448a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800448e:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f815 	bl	80044c0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004496:	bf00      	nop
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	00010040 	.word	0x00010040
 80044a4:	007e2000 	.word	0x007e2000
 80044a8:	40013c00 	.word	0x40013c00

080044ac <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f003 031c 	and.w	r3, r3, #28
 80044f0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	02db      	lsls	r3, r3, #11
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	019b      	lsls	r3, r3, #6
 8004502:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4313      	orrs	r3, r2
 800450a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f023 0302 	bic.w	r3, r3, #2
 8004512:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f043 0301 	orr.w	r3, r3, #1
 800451a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004524:	f7fe f89c 	bl	8002660 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800452a:	e00d      	b.n	8004548 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800452c:	f7fe f898 	bl	8002660 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800453a:	d301      	bcc.n	8004540 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e010      	b.n	8004562 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1ec      	bne.n	800452c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	b29b      	uxth	r3, r3
 800455a:	461a      	mov	r2, r3
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b086      	sub	sp, #24
 800456e:	af00      	add	r7, sp, #0
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	607a      	str	r2, [r7, #4]
 8004576:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f003 031c 	and.w	r3, r3, #28
 8004586:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	02db      	lsls	r3, r3, #11
 800458c:	b29b      	uxth	r3, r3
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	4313      	orrs	r3, r2
 8004592:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	019b      	lsls	r3, r3, #6
 8004598:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f043 0302 	orr.w	r3, r3, #2
 80045a8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f043 0301 	orr.w	r3, r3, #1
 80045b0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045c4:	f7fe f84c 	bl	8002660 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80045ca:	e00d      	b.n	80045e8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80045cc:	f7fe f848 	bl	8002660 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045da:	d301      	bcc.n	80045e0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e009      	b.n	80045f4 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1ec      	bne.n	80045cc <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e0d9      	b.n	80047c4 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0310 	and.w	r3, r3, #16
 800461a:	2b00      	cmp	r3, #0
 800461c:	bf14      	ite	ne
 800461e:	2301      	movne	r3, #1
 8004620:	2300      	moveq	r3, #0
 8004622:	b2db      	uxtb	r3, r3
 8004624:	461a      	mov	r2, r3
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004644:	2b00      	cmp	r3, #0
 8004646:	bf0c      	ite	eq
 8004648:	2301      	moveq	r3, #1
 800464a:	2300      	movne	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	461a      	mov	r2, r3
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8004660:	2b00      	cmp	r3, #0
 8004662:	bf14      	ite	ne
 8004664:	2301      	movne	r3, #1
 8004666:	2300      	moveq	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800467a:	2b00      	cmp	r3, #0
 800467c:	bf0c      	ite	eq
 800467e:	2301      	moveq	r3, #1
 8004680:	2300      	movne	r3, #0
 8004682:	b2db      	uxtb	r3, r3
 8004684:	461a      	mov	r2, r3
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004694:	2b00      	cmp	r3, #0
 8004696:	bf14      	ite	ne
 8004698:	2301      	movne	r3, #1
 800469a:	2300      	moveq	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	461a      	mov	r2, r3
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	bf0c      	ite	eq
 80046ce:	2301      	moveq	r3, #1
 80046d0:	2300      	movne	r3, #0
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	461a      	mov	r2, r3
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	bf0c      	ite	eq
 80046e8:	2301      	moveq	r3, #1
 80046ea:	2300      	movne	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	461a      	mov	r2, r3
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fe:	2b00      	cmp	r3, #0
 8004700:	bf14      	ite	ne
 8004702:	2301      	movne	r3, #1
 8004704:	2300      	moveq	r3, #0
 8004706:	b2db      	uxtb	r3, r3
 8004708:	461a      	mov	r2, r3
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004726:	2b00      	cmp	r3, #0
 8004728:	bf14      	ite	ne
 800472a:	2301      	movne	r3, #1
 800472c:	2300      	moveq	r3, #0
 800472e:	b2db      	uxtb	r3, r3
 8004730:	461a      	mov	r2, r3
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	bf14      	ite	ne
 8004744:	2301      	movne	r3, #1
 8004746:	2300      	moveq	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	461a      	mov	r2, r3
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475c:	2b00      	cmp	r3, #0
 800475e:	bf0c      	ite	eq
 8004760:	2301      	moveq	r3, #1
 8004762:	2300      	movne	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	461a      	mov	r2, r3
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	0c1b      	lsrs	r3, r3, #16
 8004784:	b29a      	uxth	r2, r3
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b00      	cmp	r3, #0
 8004796:	bf14      	ite	ne
 8004798:	2301      	movne	r3, #1
 800479a:	2300      	moveq	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	461a      	mov	r2, r3
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bf14      	ite	ne
 80047b4:	2301      	movne	r3, #1
 80047b6:	2300      	moveq	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e00b      	b.n	80047fc <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ea:	2b10      	cmp	r3, #16
 80047ec:	d105      	bne.n	80047fa <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80047ee:	6839      	ldr	r1, [r7, #0]
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f88f 	bl	8004914 <ETH_SetMACConfig>

    return HAL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	e000      	b.n	80047fc <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
  }
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 031c 	bic.w	r3, r3, #28
 800481a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800481c:	f001 fc80 	bl	8006120 <HAL_RCC_GetHCLKFreq>
 8004820:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	4a1d      	ldr	r2, [pc, #116]	; (800489c <HAL_ETH_SetMDIOClockRange+0x98>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d908      	bls.n	800483c <HAL_ETH_SetMDIOClockRange+0x38>
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	4a1c      	ldr	r2, [pc, #112]	; (80048a0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d804      	bhi.n	800483c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f043 0308 	orr.w	r3, r3, #8
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	e027      	b.n	800488c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	4a18      	ldr	r2, [pc, #96]	; (80048a0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d908      	bls.n	8004856 <HAL_ETH_SetMDIOClockRange+0x52>
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4a17      	ldr	r2, [pc, #92]	; (80048a4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d204      	bcs.n	8004856 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f043 030c 	orr.w	r3, r3, #12
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	e01a      	b.n	800488c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	4a12      	ldr	r2, [pc, #72]	; (80048a4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d303      	bcc.n	8004866 <HAL_ETH_SetMDIOClockRange+0x62>
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	4a11      	ldr	r2, [pc, #68]	; (80048a8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d911      	bls.n	800488a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	4a0f      	ldr	r2, [pc, #60]	; (80048a8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d908      	bls.n	8004880 <HAL_ETH_SetMDIOClockRange+0x7c>
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	4a0e      	ldr	r2, [pc, #56]	; (80048ac <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d804      	bhi.n	8004880 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f043 0304 	orr.w	r3, r3, #4
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	e005      	b.n	800488c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f043 0310 	orr.w	r3, r3, #16
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	e000      	b.n	800488c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800488a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	611a      	str	r2, [r3, #16]
}
 8004894:	bf00      	nop
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	01312cff 	.word	0x01312cff
 80048a0:	02160ebf 	.word	0x02160ebf
 80048a4:	03938700 	.word	0x03938700
 80048a8:	05f5e0ff 	.word	0x05f5e0ff
 80048ac:	08f0d17f 	.word	0x08f0d17f

080048b0 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80048be:	4618      	mov	r0, r3
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b084      	sub	sp, #16
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80048d2:	2300      	movs	r3, #0
 80048d4:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6812      	ldr	r2, [r2, #0]
 80048e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048ec:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80048fa:	2001      	movs	r0, #1
 80048fc:	f7fd febc 	bl	8002678 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800490a:	6193      	str	r3, [r2, #24]
}
 800490c:	bf00      	nop
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4b51      	ldr	r3, [pc, #324]	; (8004a70 <ETH_SetMACConfig+0x15c>)
 800492a:	4013      	ands	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	7c1b      	ldrb	r3, [r3, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d102      	bne.n	800493c <ETH_SetMACConfig+0x28>
 8004936:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800493a:	e000      	b.n	800493e <ETH_SetMACConfig+0x2a>
 800493c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	7c5b      	ldrb	r3, [r3, #17]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d102      	bne.n	800494c <ETH_SetMACConfig+0x38>
 8004946:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800494a:	e000      	b.n	800494e <ETH_SetMACConfig+0x3a>
 800494c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800494e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004954:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	7fdb      	ldrb	r3, [r3, #31]
 800495a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800495c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004962:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	7f92      	ldrb	r2, [r2, #30]
 8004968:	2a00      	cmp	r2, #0
 800496a:	d102      	bne.n	8004972 <ETH_SetMACConfig+0x5e>
 800496c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004970:	e000      	b.n	8004974 <ETH_SetMACConfig+0x60>
 8004972:	2200      	movs	r2, #0
                        macconf->Speed |
 8004974:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	7f1b      	ldrb	r3, [r3, #28]
 800497a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800497c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004982:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	791b      	ldrb	r3, [r3, #4]
 8004988:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800498a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004992:	2a00      	cmp	r2, #0
 8004994:	d102      	bne.n	800499c <ETH_SetMACConfig+0x88>
 8004996:	f44f 7200 	mov.w	r2, #512	; 0x200
 800499a:	e000      	b.n	800499e <ETH_SetMACConfig+0x8a>
 800499c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800499e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	7bdb      	ldrb	r3, [r3, #15]
 80049a4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80049a6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80049ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049b4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80049b6:	4313      	orrs	r3, r2
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80049ce:	2001      	movs	r0, #1
 80049d0:	f7fd fe52 	bl	8002678 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80049ea:	4013      	ands	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80049fa:	2a00      	cmp	r2, #0
 80049fc:	d101      	bne.n	8004a02 <ETH_SetMACConfig+0xee>
 80049fe:	2280      	movs	r2, #128	; 0x80
 8004a00:	e000      	b.n	8004a04 <ETH_SetMACConfig+0xf0>
 8004a02:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004a04:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004a0a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004a12:	2a01      	cmp	r2, #1
 8004a14:	d101      	bne.n	8004a1a <ETH_SetMACConfig+0x106>
 8004a16:	2208      	movs	r2, #8
 8004a18:	e000      	b.n	8004a1c <ETH_SetMACConfig+0x108>
 8004a1a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004a1c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004a24:	2a01      	cmp	r2, #1
 8004a26:	d101      	bne.n	8004a2c <ETH_SetMACConfig+0x118>
 8004a28:	2204      	movs	r2, #4
 8004a2a:	e000      	b.n	8004a2e <ETH_SetMACConfig+0x11a>
 8004a2c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004a2e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004a36:	2a01      	cmp	r2, #1
 8004a38:	d101      	bne.n	8004a3e <ETH_SetMACConfig+0x12a>
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	e000      	b.n	8004a40 <ETH_SetMACConfig+0x12c>
 8004a3e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004a40:	4313      	orrs	r3, r2
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a58:	2001      	movs	r0, #1
 8004a5a:	f7fd fe0d 	bl	8002678 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	619a      	str	r2, [r3, #24]
}
 8004a66:	bf00      	nop
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	ff20810f 	.word	0xff20810f

08004a74 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	4b3d      	ldr	r3, [pc, #244]	; (8004b84 <ETH_SetDMAConfig+0x110>)
 8004a8e:	4013      	ands	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	7b1b      	ldrb	r3, [r3, #12]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d102      	bne.n	8004aa0 <ETH_SetDMAConfig+0x2c>
 8004a9a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004a9e:	e000      	b.n	8004aa2 <ETH_SetDMAConfig+0x2e>
 8004aa0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	7b5b      	ldrb	r3, [r3, #13]
 8004aa6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004aa8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	7f52      	ldrb	r2, [r2, #29]
 8004aae:	2a00      	cmp	r2, #0
 8004ab0:	d102      	bne.n	8004ab8 <ETH_SetDMAConfig+0x44>
 8004ab2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ab6:	e000      	b.n	8004aba <ETH_SetDMAConfig+0x46>
 8004ab8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004aba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	7b9b      	ldrb	r3, [r3, #14]
 8004ac0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004ac2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004ac8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	7f1b      	ldrb	r3, [r3, #28]
 8004ace:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004ad0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	7f9b      	ldrb	r3, [r3, #30]
 8004ad6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004ad8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004ade:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ae6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004af8:	461a      	mov	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b0a:	2001      	movs	r0, #1
 8004b0c:	f7fd fdb4 	bl	8002678 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b18:	461a      	mov	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	791b      	ldrb	r3, [r3, #4]
 8004b22:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004b28:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004b2e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004b34:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b3c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004b3e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b44:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004b46:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004b4c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6812      	ldr	r2, [r2, #0]
 8004b52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b5a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b68:	2001      	movs	r0, #1
 8004b6a:	f7fd fd85 	bl	8002678 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b76:	461a      	mov	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6013      	str	r3, [r2, #0]
}
 8004b7c:	bf00      	nop
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	f8de3f23 	.word	0xf8de3f23

08004b88 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b0a6      	sub	sp, #152	; 0x98
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004b90:	2301      	movs	r3, #1
 8004b92:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004b96:	2301      	movs	r3, #1
 8004b98:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004bac:	2300      	movs	r3, #0
 8004bae:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004bde:	2300      	movs	r3, #0
 8004be0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004be4:	2300      	movs	r3, #0
 8004be6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004bea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004bee:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004bf0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004bfc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004c00:	4619      	mov	r1, r3
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7ff fe86 	bl	8004914 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004c10:	2301      	movs	r3, #1
 8004c12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004c16:	2301      	movs	r3, #1
 8004c18:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004c24:	2300      	movs	r3, #0
 8004c26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004c34:	2301      	movs	r3, #1
 8004c36:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004c38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c3c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004c3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c42:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004c44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c48:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004c54:	2300      	movs	r3, #0
 8004c56:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004c58:	f107 0308 	add.w	r3, r7, #8
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7ff ff08 	bl	8004a74 <ETH_SetDMAConfig>
}
 8004c64:	bf00      	nop
 8004c66:	3798      	adds	r7, #152	; 0x98
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3305      	adds	r3, #5
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	021b      	lsls	r3, r3, #8
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	3204      	adds	r2, #4
 8004c84:	7812      	ldrb	r2, [r2, #0]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	4b11      	ldr	r3, [pc, #68]	; (8004cd4 <ETH_MACAddressConfig+0x68>)
 8004c8e:	4413      	add	r3, r2
 8004c90:	461a      	mov	r2, r3
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	3303      	adds	r3, #3
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	061a      	lsls	r2, r3, #24
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3302      	adds	r3, #2
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	041b      	lsls	r3, r3, #16
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3301      	adds	r3, #1
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	021b      	lsls	r3, r3, #8
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	7812      	ldrb	r2, [r2, #0]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <ETH_MACAddressConfig+0x6c>)
 8004cbe:	4413      	add	r3, r2
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	6013      	str	r3, [r2, #0]
}
 8004cc6:	bf00      	nop
 8004cc8:	371c      	adds	r7, #28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	40028040 	.word	0x40028040
 8004cd8:	40028044 	.word	0x40028044

08004cdc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	e03e      	b.n	8004d68 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68d9      	ldr	r1, [r3, #12]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	440b      	add	r3, r1
 8004cfa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2200      	movs	r2, #0
 8004d06:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2200      	movs	r2, #0
 8004d12:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	3206      	adds	r2, #6
 8004d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d80c      	bhi.n	8004d4c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68d9      	ldr	r1, [r3, #12]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	440b      	add	r3, r1
 8004d44:	461a      	mov	r2, r3
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	60da      	str	r2, [r3, #12]
 8004d4a:	e004      	b.n	8004d56 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	461a      	mov	r2, r3
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	3301      	adds	r3, #1
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d9bd      	bls.n	8004cea <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d80:	611a      	str	r2, [r3, #16]
}
 8004d82:	bf00      	nop
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b085      	sub	sp, #20
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	e046      	b.n	8004e2a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6919      	ldr	r1, [r3, #16]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4613      	mov	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	00db      	lsls	r3, r3, #3
 8004daa:	440b      	add	r3, r1
 8004dac:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2200      	movs	r2, #0
 8004db2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	2200      	movs	r2, #0
 8004db8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004dd8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8004de0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004dee:	68b9      	ldr	r1, [r7, #8]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	3212      	adds	r2, #18
 8004df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d80c      	bhi.n	8004e1a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6919      	ldr	r1, [r3, #16]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	4613      	mov	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	440b      	add	r3, r1
 8004e12:	461a      	mov	r2, r3
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	60da      	str	r2, [r3, #12]
 8004e18:	e004      	b.n	8004e24 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	3301      	adds	r3, #1
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d9b5      	bls.n	8004d9c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691a      	ldr	r2, [r3, #16]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e5a:	60da      	str	r2, [r3, #12]
}
 8004e5c:	bf00      	nop
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b08d      	sub	sp, #52	; 0x34
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	3318      	adds	r3, #24
 8004e78:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004e86:	2300      	movs	r3, #0
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e92:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eaa:	d007      	beq.n	8004ebc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e0ff      	b.n	80050c0 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	4b7d      	ldr	r3, [pc, #500]	; (80050cc <ETH_Prepare_Tx_Descriptors+0x264>)
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	6852      	ldr	r2, [r2, #4]
 8004edc:	431a      	orrs	r2, r3
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d008      	beq.n	8004f00 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	431a      	orrs	r2, r3
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0320 	and.w	r3, r3, #32
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d008      	beq.n	8004f1e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0304 	and.w	r3, r3, #4
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d005      	beq.n	8004f36 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8004f42:	f3bf 8f5f 	dmb	sy
}
 8004f46:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004f50:	6a3b      	ldr	r3, [r7, #32]
 8004f52:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004f54:	e082      	b.n	800505c <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d006      	beq.n	8004f76 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004f68:	6a3b      	ldr	r3, [r7, #32]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	e005      	b.n	8004f82 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f84:	3301      	adds	r3, #1
 8004f86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d902      	bls.n	8004f94 <ETH_Prepare_Tx_Descriptors+0x12c>
 8004f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f90:	3b04      	subs	r3, #4
 8004f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f9c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fb6:	d007      	beq.n	8004fc8 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d029      	beq.n	800501c <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fd4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fda:	e019      	b.n	8005010 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8004fdc:	f3bf 8f5f 	dmb	sy
}
 8004fe0:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	d902      	bls.n	8005000 <ETH_Prepare_Tx_Descriptors+0x198>
 8004ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffc:	3b04      	subs	r3, #4
 8004ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005008:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800500a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500c:	3301      	adds	r3, #1
 800500e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005010:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	429a      	cmp	r2, r3
 8005016:	d3e1      	bcc.n	8004fdc <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8005018:	2302      	movs	r3, #2
 800501a:	e051      	b.n	80050c0 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	3301      	adds	r3, #1
 8005020:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	461a      	mov	r2, r3
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	4b25      	ldr	r3, [pc, #148]	; (80050cc <ETH_Prepare_Tx_Descriptors+0x264>)
 8005038:	4013      	ands	r3, r2
 800503a:	69fa      	ldr	r2, [r7, #28]
 800503c:	6852      	ldr	r2, [r2, #4]
 800503e:	431a      	orrs	r2, r3
 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	3301      	adds	r3, #1
 8005048:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800504a:	f3bf 8f5f 	dmb	sy
}
 800504e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	f47f af78 	bne.w	8004f56 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d006      	beq.n	800507a <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	e005      	b.n	8005086 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005096:	6979      	ldr	r1, [r7, #20]
 8005098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509a:	3304      	adds	r3, #4
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	440b      	add	r3, r1
 80050a0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050a6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80050a8:	b672      	cpsid	i
}
 80050aa:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	4413      	add	r3, r2
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80050ba:	b662      	cpsie	i
}
 80050bc:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3734      	adds	r7, #52	; 0x34
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	ffffe000 	.word	0xffffe000

080050d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b089      	sub	sp, #36	; 0x24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80050da:	2300      	movs	r3, #0
 80050dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80050de:	2300      	movs	r3, #0
 80050e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80050e2:	2300      	movs	r3, #0
 80050e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80050ea:	2300      	movs	r3, #0
 80050ec:	61fb      	str	r3, [r7, #28]
 80050ee:	e175      	b.n	80053dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80050f0:	2201      	movs	r2, #1
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	4013      	ands	r3, r2
 8005102:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	429a      	cmp	r2, r3
 800510a:	f040 8164 	bne.w	80053d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	2b01      	cmp	r3, #1
 8005118:	d005      	beq.n	8005126 <HAL_GPIO_Init+0x56>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d130      	bne.n	8005188 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	2203      	movs	r2, #3
 8005132:	fa02 f303 	lsl.w	r3, r2, r3
 8005136:	43db      	mvns	r3, r3
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	4013      	ands	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68da      	ldr	r2, [r3, #12]
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	fa02 f303 	lsl.w	r3, r2, r3
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	4313      	orrs	r3, r2
 800514e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800515c:	2201      	movs	r2, #1
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	fa02 f303 	lsl.w	r3, r2, r3
 8005164:	43db      	mvns	r3, r3
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	4013      	ands	r3, r2
 800516a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	091b      	lsrs	r3, r3, #4
 8005172:	f003 0201 	and.w	r2, r3, #1
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	fa02 f303 	lsl.w	r3, r2, r3
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	4313      	orrs	r3, r2
 8005180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f003 0303 	and.w	r3, r3, #3
 8005190:	2b03      	cmp	r3, #3
 8005192:	d017      	beq.n	80051c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	2203      	movs	r2, #3
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	43db      	mvns	r3, r3
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	4013      	ands	r3, r2
 80051aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	fa02 f303 	lsl.w	r3, r2, r3
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f003 0303 	and.w	r3, r3, #3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d123      	bne.n	8005218 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	08da      	lsrs	r2, r3, #3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3208      	adds	r2, #8
 80051d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	220f      	movs	r2, #15
 80051e8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ec:	43db      	mvns	r3, r3
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	4013      	ands	r3, r2
 80051f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	691a      	ldr	r2, [r3, #16]
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	f003 0307 	and.w	r3, r3, #7
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	4313      	orrs	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	08da      	lsrs	r2, r3, #3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	3208      	adds	r2, #8
 8005212:	69b9      	ldr	r1, [r7, #24]
 8005214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	2203      	movs	r2, #3
 8005224:	fa02 f303 	lsl.w	r3, r2, r3
 8005228:	43db      	mvns	r3, r3
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	4013      	ands	r3, r2
 800522e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f003 0203 	and.w	r2, r3, #3
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	4313      	orrs	r3, r2
 8005244:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 80be 	beq.w	80053d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800525a:	4b66      	ldr	r3, [pc, #408]	; (80053f4 <HAL_GPIO_Init+0x324>)
 800525c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525e:	4a65      	ldr	r2, [pc, #404]	; (80053f4 <HAL_GPIO_Init+0x324>)
 8005260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005264:	6453      	str	r3, [r2, #68]	; 0x44
 8005266:	4b63      	ldr	r3, [pc, #396]	; (80053f4 <HAL_GPIO_Init+0x324>)
 8005268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005272:	4a61      	ldr	r2, [pc, #388]	; (80053f8 <HAL_GPIO_Init+0x328>)
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	089b      	lsrs	r3, r3, #2
 8005278:	3302      	adds	r3, #2
 800527a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800527e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	f003 0303 	and.w	r3, r3, #3
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	220f      	movs	r2, #15
 800528a:	fa02 f303 	lsl.w	r3, r2, r3
 800528e:	43db      	mvns	r3, r3
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	4013      	ands	r3, r2
 8005294:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a58      	ldr	r2, [pc, #352]	; (80053fc <HAL_GPIO_Init+0x32c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d037      	beq.n	800530e <HAL_GPIO_Init+0x23e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a57      	ldr	r2, [pc, #348]	; (8005400 <HAL_GPIO_Init+0x330>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d031      	beq.n	800530a <HAL_GPIO_Init+0x23a>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a56      	ldr	r2, [pc, #344]	; (8005404 <HAL_GPIO_Init+0x334>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d02b      	beq.n	8005306 <HAL_GPIO_Init+0x236>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a55      	ldr	r2, [pc, #340]	; (8005408 <HAL_GPIO_Init+0x338>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d025      	beq.n	8005302 <HAL_GPIO_Init+0x232>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a54      	ldr	r2, [pc, #336]	; (800540c <HAL_GPIO_Init+0x33c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d01f      	beq.n	80052fe <HAL_GPIO_Init+0x22e>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a53      	ldr	r2, [pc, #332]	; (8005410 <HAL_GPIO_Init+0x340>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d019      	beq.n	80052fa <HAL_GPIO_Init+0x22a>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a52      	ldr	r2, [pc, #328]	; (8005414 <HAL_GPIO_Init+0x344>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d013      	beq.n	80052f6 <HAL_GPIO_Init+0x226>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a51      	ldr	r2, [pc, #324]	; (8005418 <HAL_GPIO_Init+0x348>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00d      	beq.n	80052f2 <HAL_GPIO_Init+0x222>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a50      	ldr	r2, [pc, #320]	; (800541c <HAL_GPIO_Init+0x34c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d007      	beq.n	80052ee <HAL_GPIO_Init+0x21e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a4f      	ldr	r2, [pc, #316]	; (8005420 <HAL_GPIO_Init+0x350>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d101      	bne.n	80052ea <HAL_GPIO_Init+0x21a>
 80052e6:	2309      	movs	r3, #9
 80052e8:	e012      	b.n	8005310 <HAL_GPIO_Init+0x240>
 80052ea:	230a      	movs	r3, #10
 80052ec:	e010      	b.n	8005310 <HAL_GPIO_Init+0x240>
 80052ee:	2308      	movs	r3, #8
 80052f0:	e00e      	b.n	8005310 <HAL_GPIO_Init+0x240>
 80052f2:	2307      	movs	r3, #7
 80052f4:	e00c      	b.n	8005310 <HAL_GPIO_Init+0x240>
 80052f6:	2306      	movs	r3, #6
 80052f8:	e00a      	b.n	8005310 <HAL_GPIO_Init+0x240>
 80052fa:	2305      	movs	r3, #5
 80052fc:	e008      	b.n	8005310 <HAL_GPIO_Init+0x240>
 80052fe:	2304      	movs	r3, #4
 8005300:	e006      	b.n	8005310 <HAL_GPIO_Init+0x240>
 8005302:	2303      	movs	r3, #3
 8005304:	e004      	b.n	8005310 <HAL_GPIO_Init+0x240>
 8005306:	2302      	movs	r3, #2
 8005308:	e002      	b.n	8005310 <HAL_GPIO_Init+0x240>
 800530a:	2301      	movs	r3, #1
 800530c:	e000      	b.n	8005310 <HAL_GPIO_Init+0x240>
 800530e:	2300      	movs	r3, #0
 8005310:	69fa      	ldr	r2, [r7, #28]
 8005312:	f002 0203 	and.w	r2, r2, #3
 8005316:	0092      	lsls	r2, r2, #2
 8005318:	4093      	lsls	r3, r2
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	4313      	orrs	r3, r2
 800531e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005320:	4935      	ldr	r1, [pc, #212]	; (80053f8 <HAL_GPIO_Init+0x328>)
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	089b      	lsrs	r3, r3, #2
 8005326:	3302      	adds	r3, #2
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800532e:	4b3d      	ldr	r3, [pc, #244]	; (8005424 <HAL_GPIO_Init+0x354>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	43db      	mvns	r3, r3
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	4013      	ands	r3, r2
 800533c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	4313      	orrs	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005352:	4a34      	ldr	r2, [pc, #208]	; (8005424 <HAL_GPIO_Init+0x354>)
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005358:	4b32      	ldr	r3, [pc, #200]	; (8005424 <HAL_GPIO_Init+0x354>)
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	43db      	mvns	r3, r3
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	4013      	ands	r3, r2
 8005366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d003      	beq.n	800537c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	4313      	orrs	r3, r2
 800537a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800537c:	4a29      	ldr	r2, [pc, #164]	; (8005424 <HAL_GPIO_Init+0x354>)
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005382:	4b28      	ldr	r3, [pc, #160]	; (8005424 <HAL_GPIO_Init+0x354>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	43db      	mvns	r3, r3
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	4013      	ands	r3, r2
 8005390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053a6:	4a1f      	ldr	r2, [pc, #124]	; (8005424 <HAL_GPIO_Init+0x354>)
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053ac:	4b1d      	ldr	r3, [pc, #116]	; (8005424 <HAL_GPIO_Init+0x354>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	43db      	mvns	r3, r3
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	4013      	ands	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053d0:	4a14      	ldr	r2, [pc, #80]	; (8005424 <HAL_GPIO_Init+0x354>)
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	3301      	adds	r3, #1
 80053da:	61fb      	str	r3, [r7, #28]
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	2b0f      	cmp	r3, #15
 80053e0:	f67f ae86 	bls.w	80050f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop
 80053e8:	3724      	adds	r7, #36	; 0x24
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	40023800 	.word	0x40023800
 80053f8:	40013800 	.word	0x40013800
 80053fc:	40020000 	.word	0x40020000
 8005400:	40020400 	.word	0x40020400
 8005404:	40020800 	.word	0x40020800
 8005408:	40020c00 	.word	0x40020c00
 800540c:	40021000 	.word	0x40021000
 8005410:	40021400 	.word	0x40021400
 8005414:	40021800 	.word	0x40021800
 8005418:	40021c00 	.word	0x40021c00
 800541c:	40022000 	.word	0x40022000
 8005420:	40022400 	.word	0x40022400
 8005424:	40013c00 	.word	0x40013c00

08005428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	807b      	strh	r3, [r7, #2]
 8005434:	4613      	mov	r3, r2
 8005436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005438:	787b      	ldrb	r3, [r7, #1]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800543e:	887a      	ldrh	r2, [r7, #2]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005444:	e003      	b.n	800544e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005446:	887b      	ldrh	r3, [r7, #2]
 8005448:	041a      	lsls	r2, r3, #16
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	619a      	str	r2, [r3, #24]
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800545a:	b480      	push	{r7}
 800545c:	b085      	sub	sp, #20
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	460b      	mov	r3, r1
 8005464:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800546c:	887a      	ldrh	r2, [r7, #2]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4013      	ands	r3, r2
 8005472:	041a      	lsls	r2, r3, #16
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	43d9      	mvns	r1, r3
 8005478:	887b      	ldrh	r3, [r7, #2]
 800547a:	400b      	ands	r3, r1
 800547c:	431a      	orrs	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	619a      	str	r2, [r3, #24]
}
 8005482:	bf00      	nop
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800548e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005490:	b08f      	sub	sp, #60	; 0x3c
 8005492:	af0a      	add	r7, sp, #40	; 0x28
 8005494:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e116      	b.n	80056ce <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d106      	bne.n	80054c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7fc fcf8 	bl	8001eb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2203      	movs	r2, #3
 80054c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d102      	bne.n	80054da <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4618      	mov	r0, r3
 80054e0:	f002 fe86 	bl	80081f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	603b      	str	r3, [r7, #0]
 80054ea:	687e      	ldr	r6, [r7, #4]
 80054ec:	466d      	mov	r5, sp
 80054ee:	f106 0410 	add.w	r4, r6, #16
 80054f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80054fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8005502:	1d33      	adds	r3, r6, #4
 8005504:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005506:	6838      	ldr	r0, [r7, #0]
 8005508:	f002 fe1a 	bl	8008140 <USB_CoreInit>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d005      	beq.n	800551e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2202      	movs	r2, #2
 8005516:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e0d7      	b.n	80056ce <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2100      	movs	r1, #0
 8005524:	4618      	mov	r0, r3
 8005526:	f002 fe74 	bl	8008212 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800552a:	2300      	movs	r3, #0
 800552c:	73fb      	strb	r3, [r7, #15]
 800552e:	e04a      	b.n	80055c6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005530:	7bfa      	ldrb	r2, [r7, #15]
 8005532:	6879      	ldr	r1, [r7, #4]
 8005534:	4613      	mov	r3, r2
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	4413      	add	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	440b      	add	r3, r1
 800553e:	333d      	adds	r3, #61	; 0x3d
 8005540:	2201      	movs	r2, #1
 8005542:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005544:	7bfa      	ldrb	r2, [r7, #15]
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	4613      	mov	r3, r2
 800554a:	00db      	lsls	r3, r3, #3
 800554c:	4413      	add	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	440b      	add	r3, r1
 8005552:	333c      	adds	r3, #60	; 0x3c
 8005554:	7bfa      	ldrb	r2, [r7, #15]
 8005556:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005558:	7bfa      	ldrb	r2, [r7, #15]
 800555a:	7bfb      	ldrb	r3, [r7, #15]
 800555c:	b298      	uxth	r0, r3
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	4613      	mov	r3, r2
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	4413      	add	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	440b      	add	r3, r1
 800556a:	3344      	adds	r3, #68	; 0x44
 800556c:	4602      	mov	r2, r0
 800556e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005570:	7bfa      	ldrb	r2, [r7, #15]
 8005572:	6879      	ldr	r1, [r7, #4]
 8005574:	4613      	mov	r3, r2
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	4413      	add	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	440b      	add	r3, r1
 800557e:	3340      	adds	r3, #64	; 0x40
 8005580:	2200      	movs	r2, #0
 8005582:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005584:	7bfa      	ldrb	r2, [r7, #15]
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	4613      	mov	r3, r2
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	4413      	add	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	440b      	add	r3, r1
 8005592:	3348      	adds	r3, #72	; 0x48
 8005594:	2200      	movs	r2, #0
 8005596:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005598:	7bfa      	ldrb	r2, [r7, #15]
 800559a:	6879      	ldr	r1, [r7, #4]
 800559c:	4613      	mov	r3, r2
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	4413      	add	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	440b      	add	r3, r1
 80055a6:	334c      	adds	r3, #76	; 0x4c
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80055ac:	7bfa      	ldrb	r2, [r7, #15]
 80055ae:	6879      	ldr	r1, [r7, #4]
 80055b0:	4613      	mov	r3, r2
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	4413      	add	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	3354      	adds	r3, #84	; 0x54
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
 80055c2:	3301      	adds	r3, #1
 80055c4:	73fb      	strb	r3, [r7, #15]
 80055c6:	7bfa      	ldrb	r2, [r7, #15]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d3af      	bcc.n	8005530 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055d0:	2300      	movs	r3, #0
 80055d2:	73fb      	strb	r3, [r7, #15]
 80055d4:	e044      	b.n	8005660 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80055d6:	7bfa      	ldrb	r2, [r7, #15]
 80055d8:	6879      	ldr	r1, [r7, #4]
 80055da:	4613      	mov	r3, r2
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	4413      	add	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	440b      	add	r3, r1
 80055e4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80055e8:	2200      	movs	r2, #0
 80055ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80055ec:	7bfa      	ldrb	r2, [r7, #15]
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	4613      	mov	r3, r2
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	4413      	add	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	440b      	add	r3, r1
 80055fa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80055fe:	7bfa      	ldrb	r2, [r7, #15]
 8005600:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005602:	7bfa      	ldrb	r2, [r7, #15]
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	4413      	add	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005614:	2200      	movs	r2, #0
 8005616:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005618:	7bfa      	ldrb	r2, [r7, #15]
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	4613      	mov	r3, r2
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	4413      	add	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	440b      	add	r3, r1
 8005626:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800562a:	2200      	movs	r2, #0
 800562c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800562e:	7bfa      	ldrb	r2, [r7, #15]
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	4613      	mov	r3, r2
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	4413      	add	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	440b      	add	r3, r1
 800563c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005644:	7bfa      	ldrb	r2, [r7, #15]
 8005646:	6879      	ldr	r1, [r7, #4]
 8005648:	4613      	mov	r3, r2
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	4413      	add	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	440b      	add	r3, r1
 8005652:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800565a:	7bfb      	ldrb	r3, [r7, #15]
 800565c:	3301      	adds	r3, #1
 800565e:	73fb      	strb	r3, [r7, #15]
 8005660:	7bfa      	ldrb	r2, [r7, #15]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	429a      	cmp	r2, r3
 8005668:	d3b5      	bcc.n	80055d6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	603b      	str	r3, [r7, #0]
 8005670:	687e      	ldr	r6, [r7, #4]
 8005672:	466d      	mov	r5, sp
 8005674:	f106 0410 	add.w	r4, r6, #16
 8005678:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800567a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800567c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800567e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005680:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005684:	e885 0003 	stmia.w	r5, {r0, r1}
 8005688:	1d33      	adds	r3, r6, #4
 800568a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800568c:	6838      	ldr	r0, [r7, #0]
 800568e:	f002 fe0d 	bl	80082ac <USB_DevInit>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d005      	beq.n	80056a4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e014      	b.n	80056ce <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d102      	bne.n	80056c2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f80b 	bl	80056d8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f002 ffcb 	bl	8008662 <USB_DevDisconnect>

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080056d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005706:	4b05      	ldr	r3, [pc, #20]	; (800571c <HAL_PCDEx_ActivateLPM+0x44>)
 8005708:	4313      	orrs	r3, r2
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	10000003 	.word	0x10000003

08005720 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005724:	4b05      	ldr	r3, [pc, #20]	; (800573c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a04      	ldr	r2, [pc, #16]	; (800573c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800572a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800572e:	6013      	str	r3, [r2, #0]
}
 8005730:	bf00      	nop
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	40007000 	.word	0x40007000

08005740 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005746:	2300      	movs	r3, #0
 8005748:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800574a:	4b23      	ldr	r3, [pc, #140]	; (80057d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574e:	4a22      	ldr	r2, [pc, #136]	; (80057d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005754:	6413      	str	r3, [r2, #64]	; 0x40
 8005756:	4b20      	ldr	r3, [pc, #128]	; (80057d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800575e:	603b      	str	r3, [r7, #0]
 8005760:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005762:	4b1e      	ldr	r3, [pc, #120]	; (80057dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a1d      	ldr	r2, [pc, #116]	; (80057dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800576c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800576e:	f7fc ff77 	bl	8002660 <HAL_GetTick>
 8005772:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005774:	e009      	b.n	800578a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005776:	f7fc ff73 	bl	8002660 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005784:	d901      	bls.n	800578a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e022      	b.n	80057d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800578a:	4b14      	ldr	r3, [pc, #80]	; (80057dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005796:	d1ee      	bne.n	8005776 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005798:	4b10      	ldr	r3, [pc, #64]	; (80057dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a0f      	ldr	r2, [pc, #60]	; (80057dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800579e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057a4:	f7fc ff5c 	bl	8002660 <HAL_GetTick>
 80057a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80057aa:	e009      	b.n	80057c0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80057ac:	f7fc ff58 	bl	8002660 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057ba:	d901      	bls.n	80057c0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e007      	b.n	80057d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80057c0:	4b06      	ldr	r3, [pc, #24]	; (80057dc <HAL_PWREx_EnableOverDrive+0x9c>)
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057cc:	d1ee      	bne.n	80057ac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	40023800 	.word	0x40023800
 80057dc:	40007000 	.word	0x40007000

080057e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80057e8:	2300      	movs	r3, #0
 80057ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e29b      	b.n	8005d2e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f000 8087 	beq.w	8005912 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005804:	4b96      	ldr	r3, [pc, #600]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f003 030c 	and.w	r3, r3, #12
 800580c:	2b04      	cmp	r3, #4
 800580e:	d00c      	beq.n	800582a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005810:	4b93      	ldr	r3, [pc, #588]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f003 030c 	and.w	r3, r3, #12
 8005818:	2b08      	cmp	r3, #8
 800581a:	d112      	bne.n	8005842 <HAL_RCC_OscConfig+0x62>
 800581c:	4b90      	ldr	r3, [pc, #576]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005824:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005828:	d10b      	bne.n	8005842 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800582a:	4b8d      	ldr	r3, [pc, #564]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d06c      	beq.n	8005910 <HAL_RCC_OscConfig+0x130>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d168      	bne.n	8005910 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e275      	b.n	8005d2e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800584a:	d106      	bne.n	800585a <HAL_RCC_OscConfig+0x7a>
 800584c:	4b84      	ldr	r3, [pc, #528]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a83      	ldr	r2, [pc, #524]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 8005852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005856:	6013      	str	r3, [r2, #0]
 8005858:	e02e      	b.n	80058b8 <HAL_RCC_OscConfig+0xd8>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10c      	bne.n	800587c <HAL_RCC_OscConfig+0x9c>
 8005862:	4b7f      	ldr	r3, [pc, #508]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a7e      	ldr	r2, [pc, #504]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 8005868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800586c:	6013      	str	r3, [r2, #0]
 800586e:	4b7c      	ldr	r3, [pc, #496]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a7b      	ldr	r2, [pc, #492]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 8005874:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005878:	6013      	str	r3, [r2, #0]
 800587a:	e01d      	b.n	80058b8 <HAL_RCC_OscConfig+0xd8>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005884:	d10c      	bne.n	80058a0 <HAL_RCC_OscConfig+0xc0>
 8005886:	4b76      	ldr	r3, [pc, #472]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a75      	ldr	r2, [pc, #468]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 800588c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	4b73      	ldr	r3, [pc, #460]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a72      	ldr	r2, [pc, #456]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 8005898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	e00b      	b.n	80058b8 <HAL_RCC_OscConfig+0xd8>
 80058a0:	4b6f      	ldr	r3, [pc, #444]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a6e      	ldr	r2, [pc, #440]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 80058a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058aa:	6013      	str	r3, [r2, #0]
 80058ac:	4b6c      	ldr	r3, [pc, #432]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a6b      	ldr	r2, [pc, #428]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 80058b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d013      	beq.n	80058e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c0:	f7fc fece 	bl	8002660 <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058c8:	f7fc feca 	bl	8002660 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b64      	cmp	r3, #100	; 0x64
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e229      	b.n	8005d2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058da:	4b61      	ldr	r3, [pc, #388]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0f0      	beq.n	80058c8 <HAL_RCC_OscConfig+0xe8>
 80058e6:	e014      	b.n	8005912 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e8:	f7fc feba 	bl	8002660 <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058ee:	e008      	b.n	8005902 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058f0:	f7fc feb6 	bl	8002660 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b64      	cmp	r3, #100	; 0x64
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e215      	b.n	8005d2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005902:	4b57      	ldr	r3, [pc, #348]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1f0      	bne.n	80058f0 <HAL_RCC_OscConfig+0x110>
 800590e:	e000      	b.n	8005912 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d069      	beq.n	80059f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800591e:	4b50      	ldr	r3, [pc, #320]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 030c 	and.w	r3, r3, #12
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00b      	beq.n	8005942 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800592a:	4b4d      	ldr	r3, [pc, #308]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f003 030c 	and.w	r3, r3, #12
 8005932:	2b08      	cmp	r3, #8
 8005934:	d11c      	bne.n	8005970 <HAL_RCC_OscConfig+0x190>
 8005936:	4b4a      	ldr	r3, [pc, #296]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d116      	bne.n	8005970 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005942:	4b47      	ldr	r3, [pc, #284]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d005      	beq.n	800595a <HAL_RCC_OscConfig+0x17a>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d001      	beq.n	800595a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e1e9      	b.n	8005d2e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800595a:	4b41      	ldr	r3, [pc, #260]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	493d      	ldr	r1, [pc, #244]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 800596a:	4313      	orrs	r3, r2
 800596c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800596e:	e040      	b.n	80059f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d023      	beq.n	80059c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005978:	4b39      	ldr	r3, [pc, #228]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a38      	ldr	r2, [pc, #224]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 800597e:	f043 0301 	orr.w	r3, r3, #1
 8005982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005984:	f7fc fe6c 	bl	8002660 <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800598c:	f7fc fe68 	bl	8002660 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e1c7      	b.n	8005d2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800599e:	4b30      	ldr	r3, [pc, #192]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d0f0      	beq.n	800598c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059aa:	4b2d      	ldr	r3, [pc, #180]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	4929      	ldr	r1, [pc, #164]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	600b      	str	r3, [r1, #0]
 80059be:	e018      	b.n	80059f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059c0:	4b27      	ldr	r3, [pc, #156]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a26      	ldr	r2, [pc, #152]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 80059c6:	f023 0301 	bic.w	r3, r3, #1
 80059ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059cc:	f7fc fe48 	bl	8002660 <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059d4:	f7fc fe44 	bl	8002660 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e1a3      	b.n	8005d2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059e6:	4b1e      	ldr	r3, [pc, #120]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1f0      	bne.n	80059d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0308 	and.w	r3, r3, #8
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d038      	beq.n	8005a70 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d019      	beq.n	8005a3a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a06:	4b16      	ldr	r3, [pc, #88]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 8005a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a0a:	4a15      	ldr	r2, [pc, #84]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 8005a0c:	f043 0301 	orr.w	r3, r3, #1
 8005a10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a12:	f7fc fe25 	bl	8002660 <HAL_GetTick>
 8005a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a18:	e008      	b.n	8005a2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a1a:	f7fc fe21 	bl	8002660 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d901      	bls.n	8005a2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e180      	b.n	8005d2e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a2c:	4b0c      	ldr	r3, [pc, #48]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 8005a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d0f0      	beq.n	8005a1a <HAL_RCC_OscConfig+0x23a>
 8005a38:	e01a      	b.n	8005a70 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a3a:	4b09      	ldr	r3, [pc, #36]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 8005a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a3e:	4a08      	ldr	r2, [pc, #32]	; (8005a60 <HAL_RCC_OscConfig+0x280>)
 8005a40:	f023 0301 	bic.w	r3, r3, #1
 8005a44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a46:	f7fc fe0b 	bl	8002660 <HAL_GetTick>
 8005a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a4c:	e00a      	b.n	8005a64 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a4e:	f7fc fe07 	bl	8002660 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d903      	bls.n	8005a64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e166      	b.n	8005d2e <HAL_RCC_OscConfig+0x54e>
 8005a60:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a64:	4b92      	ldr	r3, [pc, #584]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1ee      	bne.n	8005a4e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 80a4 	beq.w	8005bc6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a7e:	4b8c      	ldr	r3, [pc, #560]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10d      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a8a:	4b89      	ldr	r3, [pc, #548]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	4a88      	ldr	r2, [pc, #544]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a94:	6413      	str	r3, [r2, #64]	; 0x40
 8005a96:	4b86      	ldr	r3, [pc, #536]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a9e:	60bb      	str	r3, [r7, #8]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005aa6:	4b83      	ldr	r3, [pc, #524]	; (8005cb4 <HAL_RCC_OscConfig+0x4d4>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d118      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005ab2:	4b80      	ldr	r3, [pc, #512]	; (8005cb4 <HAL_RCC_OscConfig+0x4d4>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a7f      	ldr	r2, [pc, #508]	; (8005cb4 <HAL_RCC_OscConfig+0x4d4>)
 8005ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005abe:	f7fc fdcf 	bl	8002660 <HAL_GetTick>
 8005ac2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ac4:	e008      	b.n	8005ad8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ac6:	f7fc fdcb 	bl	8002660 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	2b64      	cmp	r3, #100	; 0x64
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e12a      	b.n	8005d2e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ad8:	4b76      	ldr	r3, [pc, #472]	; (8005cb4 <HAL_RCC_OscConfig+0x4d4>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d0f0      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d106      	bne.n	8005afa <HAL_RCC_OscConfig+0x31a>
 8005aec:	4b70      	ldr	r3, [pc, #448]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af0:	4a6f      	ldr	r2, [pc, #444]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005af2:	f043 0301 	orr.w	r3, r3, #1
 8005af6:	6713      	str	r3, [r2, #112]	; 0x70
 8005af8:	e02d      	b.n	8005b56 <HAL_RCC_OscConfig+0x376>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10c      	bne.n	8005b1c <HAL_RCC_OscConfig+0x33c>
 8005b02:	4b6b      	ldr	r3, [pc, #428]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b06:	4a6a      	ldr	r2, [pc, #424]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005b08:	f023 0301 	bic.w	r3, r3, #1
 8005b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b0e:	4b68      	ldr	r3, [pc, #416]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b12:	4a67      	ldr	r2, [pc, #412]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005b14:	f023 0304 	bic.w	r3, r3, #4
 8005b18:	6713      	str	r3, [r2, #112]	; 0x70
 8005b1a:	e01c      	b.n	8005b56 <HAL_RCC_OscConfig+0x376>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	2b05      	cmp	r3, #5
 8005b22:	d10c      	bne.n	8005b3e <HAL_RCC_OscConfig+0x35e>
 8005b24:	4b62      	ldr	r3, [pc, #392]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b28:	4a61      	ldr	r2, [pc, #388]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005b2a:	f043 0304 	orr.w	r3, r3, #4
 8005b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b30:	4b5f      	ldr	r3, [pc, #380]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b34:	4a5e      	ldr	r2, [pc, #376]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005b36:	f043 0301 	orr.w	r3, r3, #1
 8005b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b3c:	e00b      	b.n	8005b56 <HAL_RCC_OscConfig+0x376>
 8005b3e:	4b5c      	ldr	r3, [pc, #368]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b42:	4a5b      	ldr	r2, [pc, #364]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005b44:	f023 0301 	bic.w	r3, r3, #1
 8005b48:	6713      	str	r3, [r2, #112]	; 0x70
 8005b4a:	4b59      	ldr	r3, [pc, #356]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4e:	4a58      	ldr	r2, [pc, #352]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005b50:	f023 0304 	bic.w	r3, r3, #4
 8005b54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d015      	beq.n	8005b8a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b5e:	f7fc fd7f 	bl	8002660 <HAL_GetTick>
 8005b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b64:	e00a      	b.n	8005b7c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b66:	f7fc fd7b 	bl	8002660 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d901      	bls.n	8005b7c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e0d8      	b.n	8005d2e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b7c:	4b4c      	ldr	r3, [pc, #304]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0ee      	beq.n	8005b66 <HAL_RCC_OscConfig+0x386>
 8005b88:	e014      	b.n	8005bb4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b8a:	f7fc fd69 	bl	8002660 <HAL_GetTick>
 8005b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b90:	e00a      	b.n	8005ba8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b92:	f7fc fd65 	bl	8002660 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e0c2      	b.n	8005d2e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ba8:	4b41      	ldr	r3, [pc, #260]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1ee      	bne.n	8005b92 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005bb4:	7dfb      	ldrb	r3, [r7, #23]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d105      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bba:	4b3d      	ldr	r3, [pc, #244]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	4a3c      	ldr	r2, [pc, #240]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005bc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bc4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 80ae 	beq.w	8005d2c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bd0:	4b37      	ldr	r3, [pc, #220]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f003 030c 	and.w	r3, r3, #12
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d06d      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d14b      	bne.n	8005c7c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005be4:	4b32      	ldr	r3, [pc, #200]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a31      	ldr	r2, [pc, #196]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005bea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf0:	f7fc fd36 	bl	8002660 <HAL_GetTick>
 8005bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bf6:	e008      	b.n	8005c0a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf8:	f7fc fd32 	bl	8002660 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e091      	b.n	8005d2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c0a:	4b29      	ldr	r3, [pc, #164]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1f0      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	69da      	ldr	r2, [r3, #28]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	019b      	lsls	r3, r3, #6
 8005c26:	431a      	orrs	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2c:	085b      	lsrs	r3, r3, #1
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	041b      	lsls	r3, r3, #16
 8005c32:	431a      	orrs	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c38:	061b      	lsls	r3, r3, #24
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c40:	071b      	lsls	r3, r3, #28
 8005c42:	491b      	ldr	r1, [pc, #108]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c48:	4b19      	ldr	r3, [pc, #100]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a18      	ldr	r2, [pc, #96]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c54:	f7fc fd04 	bl	8002660 <HAL_GetTick>
 8005c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c5a:	e008      	b.n	8005c6e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c5c:	f7fc fd00 	bl	8002660 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d901      	bls.n	8005c6e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e05f      	b.n	8005d2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c6e:	4b10      	ldr	r3, [pc, #64]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d0f0      	beq.n	8005c5c <HAL_RCC_OscConfig+0x47c>
 8005c7a:	e057      	b.n	8005d2c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c7c:	4b0c      	ldr	r3, [pc, #48]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a0b      	ldr	r2, [pc, #44]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005c82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c88:	f7fc fcea 	bl	8002660 <HAL_GetTick>
 8005c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c8e:	e008      	b.n	8005ca2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c90:	f7fc fce6 	bl	8002660 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d901      	bls.n	8005ca2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e045      	b.n	8005d2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ca2:	4b03      	ldr	r3, [pc, #12]	; (8005cb0 <HAL_RCC_OscConfig+0x4d0>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1f0      	bne.n	8005c90 <HAL_RCC_OscConfig+0x4b0>
 8005cae:	e03d      	b.n	8005d2c <HAL_RCC_OscConfig+0x54c>
 8005cb0:	40023800 	.word	0x40023800
 8005cb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005cb8:	4b1f      	ldr	r3, [pc, #124]	; (8005d38 <HAL_RCC_OscConfig+0x558>)
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d030      	beq.n	8005d28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d129      	bne.n	8005d28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d122      	bne.n	8005d28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ce8:	4013      	ands	r3, r2
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005cee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d119      	bne.n	8005d28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfe:	085b      	lsrs	r3, r3, #1
 8005d00:	3b01      	subs	r3, #1
 8005d02:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d10f      	bne.n	8005d28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d12:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d107      	bne.n	8005d28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d22:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d001      	beq.n	8005d2c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e000      	b.n	8005d2e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	40023800 	.word	0x40023800

08005d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e0d0      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d54:	4b6a      	ldr	r3, [pc, #424]	; (8005f00 <HAL_RCC_ClockConfig+0x1c4>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 030f 	and.w	r3, r3, #15
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d910      	bls.n	8005d84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d62:	4b67      	ldr	r3, [pc, #412]	; (8005f00 <HAL_RCC_ClockConfig+0x1c4>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f023 020f 	bic.w	r2, r3, #15
 8005d6a:	4965      	ldr	r1, [pc, #404]	; (8005f00 <HAL_RCC_ClockConfig+0x1c4>)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d72:	4b63      	ldr	r3, [pc, #396]	; (8005f00 <HAL_RCC_ClockConfig+0x1c4>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d001      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e0b8      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d020      	beq.n	8005dd2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d005      	beq.n	8005da8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d9c:	4b59      	ldr	r3, [pc, #356]	; (8005f04 <HAL_RCC_ClockConfig+0x1c8>)
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	4a58      	ldr	r2, [pc, #352]	; (8005f04 <HAL_RCC_ClockConfig+0x1c8>)
 8005da2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005da6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0308 	and.w	r3, r3, #8
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d005      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005db4:	4b53      	ldr	r3, [pc, #332]	; (8005f04 <HAL_RCC_ClockConfig+0x1c8>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	4a52      	ldr	r2, [pc, #328]	; (8005f04 <HAL_RCC_ClockConfig+0x1c8>)
 8005dba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005dbe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dc0:	4b50      	ldr	r3, [pc, #320]	; (8005f04 <HAL_RCC_ClockConfig+0x1c8>)
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	494d      	ldr	r1, [pc, #308]	; (8005f04 <HAL_RCC_ClockConfig+0x1c8>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d040      	beq.n	8005e60 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d107      	bne.n	8005df6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005de6:	4b47      	ldr	r3, [pc, #284]	; (8005f04 <HAL_RCC_ClockConfig+0x1c8>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d115      	bne.n	8005e1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e07f      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d107      	bne.n	8005e0e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dfe:	4b41      	ldr	r3, [pc, #260]	; (8005f04 <HAL_RCC_ClockConfig+0x1c8>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d109      	bne.n	8005e1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e073      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e0e:	4b3d      	ldr	r3, [pc, #244]	; (8005f04 <HAL_RCC_ClockConfig+0x1c8>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e06b      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e1e:	4b39      	ldr	r3, [pc, #228]	; (8005f04 <HAL_RCC_ClockConfig+0x1c8>)
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f023 0203 	bic.w	r2, r3, #3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	4936      	ldr	r1, [pc, #216]	; (8005f04 <HAL_RCC_ClockConfig+0x1c8>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e30:	f7fc fc16 	bl	8002660 <HAL_GetTick>
 8005e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e36:	e00a      	b.n	8005e4e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e38:	f7fc fc12 	bl	8002660 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e053      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e4e:	4b2d      	ldr	r3, [pc, #180]	; (8005f04 <HAL_RCC_ClockConfig+0x1c8>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f003 020c 	and.w	r2, r3, #12
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d1eb      	bne.n	8005e38 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e60:	4b27      	ldr	r3, [pc, #156]	; (8005f00 <HAL_RCC_ClockConfig+0x1c4>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 030f 	and.w	r3, r3, #15
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d210      	bcs.n	8005e90 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e6e:	4b24      	ldr	r3, [pc, #144]	; (8005f00 <HAL_RCC_ClockConfig+0x1c4>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f023 020f 	bic.w	r2, r3, #15
 8005e76:	4922      	ldr	r1, [pc, #136]	; (8005f00 <HAL_RCC_ClockConfig+0x1c4>)
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e7e:	4b20      	ldr	r3, [pc, #128]	; (8005f00 <HAL_RCC_ClockConfig+0x1c4>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 030f 	and.w	r3, r3, #15
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d001      	beq.n	8005e90 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e032      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d008      	beq.n	8005eae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e9c:	4b19      	ldr	r3, [pc, #100]	; (8005f04 <HAL_RCC_ClockConfig+0x1c8>)
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	4916      	ldr	r1, [pc, #88]	; (8005f04 <HAL_RCC_ClockConfig+0x1c8>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0308 	and.w	r3, r3, #8
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d009      	beq.n	8005ece <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005eba:	4b12      	ldr	r3, [pc, #72]	; (8005f04 <HAL_RCC_ClockConfig+0x1c8>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	490e      	ldr	r1, [pc, #56]	; (8005f04 <HAL_RCC_ClockConfig+0x1c8>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ece:	f000 f821 	bl	8005f14 <HAL_RCC_GetSysClockFreq>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	4b0b      	ldr	r3, [pc, #44]	; (8005f04 <HAL_RCC_ClockConfig+0x1c8>)
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	091b      	lsrs	r3, r3, #4
 8005eda:	f003 030f 	and.w	r3, r3, #15
 8005ede:	490a      	ldr	r1, [pc, #40]	; (8005f08 <HAL_RCC_ClockConfig+0x1cc>)
 8005ee0:	5ccb      	ldrb	r3, [r1, r3]
 8005ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee6:	4a09      	ldr	r2, [pc, #36]	; (8005f0c <HAL_RCC_ClockConfig+0x1d0>)
 8005ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005eea:	4b09      	ldr	r3, [pc, #36]	; (8005f10 <HAL_RCC_ClockConfig+0x1d4>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fc f858 	bl	8001fa4 <HAL_InitTick>

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	40023c00 	.word	0x40023c00
 8005f04:	40023800 	.word	0x40023800
 8005f08:	08020630 	.word	0x08020630
 8005f0c:	20000000 	.word	0x20000000
 8005f10:	20000004 	.word	0x20000004

08005f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f18:	b094      	sub	sp, #80	; 0x50
 8005f1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	647b      	str	r3, [r7, #68]	; 0x44
 8005f20:	2300      	movs	r3, #0
 8005f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f24:	2300      	movs	r3, #0
 8005f26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f2c:	4b79      	ldr	r3, [pc, #484]	; (8006114 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f003 030c 	and.w	r3, r3, #12
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d00d      	beq.n	8005f54 <HAL_RCC_GetSysClockFreq+0x40>
 8005f38:	2b08      	cmp	r3, #8
 8005f3a:	f200 80e1 	bhi.w	8006100 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d002      	beq.n	8005f48 <HAL_RCC_GetSysClockFreq+0x34>
 8005f42:	2b04      	cmp	r3, #4
 8005f44:	d003      	beq.n	8005f4e <HAL_RCC_GetSysClockFreq+0x3a>
 8005f46:	e0db      	b.n	8006100 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f48:	4b73      	ldr	r3, [pc, #460]	; (8006118 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f4c:	e0db      	b.n	8006106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f4e:	4b73      	ldr	r3, [pc, #460]	; (800611c <HAL_RCC_GetSysClockFreq+0x208>)
 8005f50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f52:	e0d8      	b.n	8006106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f54:	4b6f      	ldr	r3, [pc, #444]	; (8006114 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f5c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005f5e:	4b6d      	ldr	r3, [pc, #436]	; (8006114 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d063      	beq.n	8006032 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f6a:	4b6a      	ldr	r3, [pc, #424]	; (8006114 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	099b      	lsrs	r3, r3, #6
 8005f70:	2200      	movs	r2, #0
 8005f72:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f7c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f7e:	2300      	movs	r3, #0
 8005f80:	637b      	str	r3, [r7, #52]	; 0x34
 8005f82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005f86:	4622      	mov	r2, r4
 8005f88:	462b      	mov	r3, r5
 8005f8a:	f04f 0000 	mov.w	r0, #0
 8005f8e:	f04f 0100 	mov.w	r1, #0
 8005f92:	0159      	lsls	r1, r3, #5
 8005f94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f98:	0150      	lsls	r0, r2, #5
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	1a51      	subs	r1, r2, r1
 8005fa2:	6139      	str	r1, [r7, #16]
 8005fa4:	4629      	mov	r1, r5
 8005fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8005faa:	617b      	str	r3, [r7, #20]
 8005fac:	f04f 0200 	mov.w	r2, #0
 8005fb0:	f04f 0300 	mov.w	r3, #0
 8005fb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fb8:	4659      	mov	r1, fp
 8005fba:	018b      	lsls	r3, r1, #6
 8005fbc:	4651      	mov	r1, sl
 8005fbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fc2:	4651      	mov	r1, sl
 8005fc4:	018a      	lsls	r2, r1, #6
 8005fc6:	4651      	mov	r1, sl
 8005fc8:	ebb2 0801 	subs.w	r8, r2, r1
 8005fcc:	4659      	mov	r1, fp
 8005fce:	eb63 0901 	sbc.w	r9, r3, r1
 8005fd2:	f04f 0200 	mov.w	r2, #0
 8005fd6:	f04f 0300 	mov.w	r3, #0
 8005fda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fe2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fe6:	4690      	mov	r8, r2
 8005fe8:	4699      	mov	r9, r3
 8005fea:	4623      	mov	r3, r4
 8005fec:	eb18 0303 	adds.w	r3, r8, r3
 8005ff0:	60bb      	str	r3, [r7, #8]
 8005ff2:	462b      	mov	r3, r5
 8005ff4:	eb49 0303 	adc.w	r3, r9, r3
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	f04f 0200 	mov.w	r2, #0
 8005ffe:	f04f 0300 	mov.w	r3, #0
 8006002:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006006:	4629      	mov	r1, r5
 8006008:	024b      	lsls	r3, r1, #9
 800600a:	4621      	mov	r1, r4
 800600c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006010:	4621      	mov	r1, r4
 8006012:	024a      	lsls	r2, r1, #9
 8006014:	4610      	mov	r0, r2
 8006016:	4619      	mov	r1, r3
 8006018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800601a:	2200      	movs	r2, #0
 800601c:	62bb      	str	r3, [r7, #40]	; 0x28
 800601e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006020:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006024:	f7fa f95c 	bl	80002e0 <__aeabi_uldivmod>
 8006028:	4602      	mov	r2, r0
 800602a:	460b      	mov	r3, r1
 800602c:	4613      	mov	r3, r2
 800602e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006030:	e058      	b.n	80060e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006032:	4b38      	ldr	r3, [pc, #224]	; (8006114 <HAL_RCC_GetSysClockFreq+0x200>)
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	099b      	lsrs	r3, r3, #6
 8006038:	2200      	movs	r2, #0
 800603a:	4618      	mov	r0, r3
 800603c:	4611      	mov	r1, r2
 800603e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006042:	623b      	str	r3, [r7, #32]
 8006044:	2300      	movs	r3, #0
 8006046:	627b      	str	r3, [r7, #36]	; 0x24
 8006048:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800604c:	4642      	mov	r2, r8
 800604e:	464b      	mov	r3, r9
 8006050:	f04f 0000 	mov.w	r0, #0
 8006054:	f04f 0100 	mov.w	r1, #0
 8006058:	0159      	lsls	r1, r3, #5
 800605a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800605e:	0150      	lsls	r0, r2, #5
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	4641      	mov	r1, r8
 8006066:	ebb2 0a01 	subs.w	sl, r2, r1
 800606a:	4649      	mov	r1, r9
 800606c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006070:	f04f 0200 	mov.w	r2, #0
 8006074:	f04f 0300 	mov.w	r3, #0
 8006078:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800607c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006080:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006084:	ebb2 040a 	subs.w	r4, r2, sl
 8006088:	eb63 050b 	sbc.w	r5, r3, fp
 800608c:	f04f 0200 	mov.w	r2, #0
 8006090:	f04f 0300 	mov.w	r3, #0
 8006094:	00eb      	lsls	r3, r5, #3
 8006096:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800609a:	00e2      	lsls	r2, r4, #3
 800609c:	4614      	mov	r4, r2
 800609e:	461d      	mov	r5, r3
 80060a0:	4643      	mov	r3, r8
 80060a2:	18e3      	adds	r3, r4, r3
 80060a4:	603b      	str	r3, [r7, #0]
 80060a6:	464b      	mov	r3, r9
 80060a8:	eb45 0303 	adc.w	r3, r5, r3
 80060ac:	607b      	str	r3, [r7, #4]
 80060ae:	f04f 0200 	mov.w	r2, #0
 80060b2:	f04f 0300 	mov.w	r3, #0
 80060b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060ba:	4629      	mov	r1, r5
 80060bc:	028b      	lsls	r3, r1, #10
 80060be:	4621      	mov	r1, r4
 80060c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060c4:	4621      	mov	r1, r4
 80060c6:	028a      	lsls	r2, r1, #10
 80060c8:	4610      	mov	r0, r2
 80060ca:	4619      	mov	r1, r3
 80060cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ce:	2200      	movs	r2, #0
 80060d0:	61bb      	str	r3, [r7, #24]
 80060d2:	61fa      	str	r2, [r7, #28]
 80060d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060d8:	f7fa f902 	bl	80002e0 <__aeabi_uldivmod>
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	4613      	mov	r3, r2
 80060e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80060e4:	4b0b      	ldr	r3, [pc, #44]	; (8006114 <HAL_RCC_GetSysClockFreq+0x200>)
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	0c1b      	lsrs	r3, r3, #16
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	3301      	adds	r3, #1
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80060f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060fe:	e002      	b.n	8006106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006100:	4b05      	ldr	r3, [pc, #20]	; (8006118 <HAL_RCC_GetSysClockFreq+0x204>)
 8006102:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006108:	4618      	mov	r0, r3
 800610a:	3750      	adds	r7, #80	; 0x50
 800610c:	46bd      	mov	sp, r7
 800610e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006112:	bf00      	nop
 8006114:	40023800 	.word	0x40023800
 8006118:	00f42400 	.word	0x00f42400
 800611c:	007a1200 	.word	0x007a1200

08006120 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006120:	b480      	push	{r7}
 8006122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006124:	4b03      	ldr	r3, [pc, #12]	; (8006134 <HAL_RCC_GetHCLKFreq+0x14>)
 8006126:	681b      	ldr	r3, [r3, #0]
}
 8006128:	4618      	mov	r0, r3
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	20000000 	.word	0x20000000

08006138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800613c:	f7ff fff0 	bl	8006120 <HAL_RCC_GetHCLKFreq>
 8006140:	4602      	mov	r2, r0
 8006142:	4b05      	ldr	r3, [pc, #20]	; (8006158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	0a9b      	lsrs	r3, r3, #10
 8006148:	f003 0307 	and.w	r3, r3, #7
 800614c:	4903      	ldr	r1, [pc, #12]	; (800615c <HAL_RCC_GetPCLK1Freq+0x24>)
 800614e:	5ccb      	ldrb	r3, [r1, r3]
 8006150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006154:	4618      	mov	r0, r3
 8006156:	bd80      	pop	{r7, pc}
 8006158:	40023800 	.word	0x40023800
 800615c:	08020640 	.word	0x08020640

08006160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006164:	f7ff ffdc 	bl	8006120 <HAL_RCC_GetHCLKFreq>
 8006168:	4602      	mov	r2, r0
 800616a:	4b05      	ldr	r3, [pc, #20]	; (8006180 <HAL_RCC_GetPCLK2Freq+0x20>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	0b5b      	lsrs	r3, r3, #13
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	4903      	ldr	r1, [pc, #12]	; (8006184 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006176:	5ccb      	ldrb	r3, [r1, r3]
 8006178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800617c:	4618      	mov	r0, r3
 800617e:	bd80      	pop	{r7, pc}
 8006180:	40023800 	.word	0x40023800
 8006184:	08020640 	.word	0x08020640

08006188 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	220f      	movs	r2, #15
 8006196:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006198:	4b12      	ldr	r3, [pc, #72]	; (80061e4 <HAL_RCC_GetClockConfig+0x5c>)
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f003 0203 	and.w	r2, r3, #3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80061a4:	4b0f      	ldr	r3, [pc, #60]	; (80061e4 <HAL_RCC_GetClockConfig+0x5c>)
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80061b0:	4b0c      	ldr	r3, [pc, #48]	; (80061e4 <HAL_RCC_GetClockConfig+0x5c>)
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80061bc:	4b09      	ldr	r3, [pc, #36]	; (80061e4 <HAL_RCC_GetClockConfig+0x5c>)
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	08db      	lsrs	r3, r3, #3
 80061c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80061ca:	4b07      	ldr	r3, [pc, #28]	; (80061e8 <HAL_RCC_GetClockConfig+0x60>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 020f 	and.w	r2, r3, #15
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	601a      	str	r2, [r3, #0]
}
 80061d6:	bf00      	nop
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	40023800 	.word	0x40023800
 80061e8:	40023c00 	.word	0x40023c00

080061ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b088      	sub	sp, #32
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80061f4:	2300      	movs	r3, #0
 80061f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80061f8:	2300      	movs	r3, #0
 80061fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80061fc:	2300      	movs	r3, #0
 80061fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006200:	2300      	movs	r3, #0
 8006202:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006204:	2300      	movs	r3, #0
 8006206:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b00      	cmp	r3, #0
 8006212:	d012      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006214:	4b69      	ldr	r3, [pc, #420]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	4a68      	ldr	r2, [pc, #416]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800621a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800621e:	6093      	str	r3, [r2, #8]
 8006220:	4b66      	ldr	r3, [pc, #408]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006228:	4964      	ldr	r1, [pc, #400]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800622a:	4313      	orrs	r3, r2
 800622c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006236:	2301      	movs	r3, #1
 8006238:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d017      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006246:	4b5d      	ldr	r3, [pc, #372]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800624c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006254:	4959      	ldr	r1, [pc, #356]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006256:	4313      	orrs	r3, r2
 8006258:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006260:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006264:	d101      	bne.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006266:	2301      	movs	r3, #1
 8006268:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006272:	2301      	movs	r3, #1
 8006274:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d017      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006282:	4b4e      	ldr	r3, [pc, #312]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006288:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006290:	494a      	ldr	r1, [pc, #296]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006292:	4313      	orrs	r3, r2
 8006294:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062a0:	d101      	bne.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80062a2:	2301      	movs	r3, #1
 80062a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80062ae:	2301      	movs	r3, #1
 80062b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80062be:	2301      	movs	r3, #1
 80062c0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0320 	and.w	r3, r3, #32
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 808b 	beq.w	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80062d0:	4b3a      	ldr	r3, [pc, #232]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d4:	4a39      	ldr	r2, [pc, #228]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062da:	6413      	str	r3, [r2, #64]	; 0x40
 80062dc:	4b37      	ldr	r3, [pc, #220]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062e4:	60bb      	str	r3, [r7, #8]
 80062e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80062e8:	4b35      	ldr	r3, [pc, #212]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a34      	ldr	r2, [pc, #208]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062f4:	f7fc f9b4 	bl	8002660 <HAL_GetTick>
 80062f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80062fa:	e008      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062fc:	f7fc f9b0 	bl	8002660 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b64      	cmp	r3, #100	; 0x64
 8006308:	d901      	bls.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e38f      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800630e:	4b2c      	ldr	r3, [pc, #176]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006316:	2b00      	cmp	r3, #0
 8006318:	d0f0      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800631a:	4b28      	ldr	r3, [pc, #160]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800631c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006322:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d035      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	429a      	cmp	r2, r3
 8006336:	d02e      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006338:	4b20      	ldr	r3, [pc, #128]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800633a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800633c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006340:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006342:	4b1e      	ldr	r3, [pc, #120]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006346:	4a1d      	ldr	r2, [pc, #116]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800634c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800634e:	4b1b      	ldr	r3, [pc, #108]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006352:	4a1a      	ldr	r2, [pc, #104]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006358:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800635a:	4a18      	ldr	r2, [pc, #96]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006360:	4b16      	ldr	r3, [pc, #88]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	2b01      	cmp	r3, #1
 800636a:	d114      	bne.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800636c:	f7fc f978 	bl	8002660 <HAL_GetTick>
 8006370:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006372:	e00a      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006374:	f7fc f974 	bl	8002660 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006382:	4293      	cmp	r3, r2
 8006384:	d901      	bls.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e351      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800638a:	4b0c      	ldr	r3, [pc, #48]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800638c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0ee      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800639e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063a2:	d111      	bne.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80063a4:	4b05      	ldr	r3, [pc, #20]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80063b0:	4b04      	ldr	r3, [pc, #16]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80063b2:	400b      	ands	r3, r1
 80063b4:	4901      	ldr	r1, [pc, #4]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	608b      	str	r3, [r1, #8]
 80063ba:	e00b      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80063bc:	40023800 	.word	0x40023800
 80063c0:	40007000 	.word	0x40007000
 80063c4:	0ffffcff 	.word	0x0ffffcff
 80063c8:	4bac      	ldr	r3, [pc, #688]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	4aab      	ldr	r2, [pc, #684]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80063d2:	6093      	str	r3, [r2, #8]
 80063d4:	4ba9      	ldr	r3, [pc, #676]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063e0:	49a6      	ldr	r1, [pc, #664]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0310 	and.w	r3, r3, #16
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d010      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80063f2:	4ba2      	ldr	r3, [pc, #648]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063f8:	4aa0      	ldr	r2, [pc, #640]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006402:	4b9e      	ldr	r3, [pc, #632]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006404:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	499b      	ldr	r1, [pc, #620]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800640e:	4313      	orrs	r3, r2
 8006410:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00a      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006420:	4b96      	ldr	r3, [pc, #600]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006426:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800642e:	4993      	ldr	r1, [pc, #588]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006430:	4313      	orrs	r3, r2
 8006432:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00a      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006442:	4b8e      	ldr	r3, [pc, #568]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006448:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006450:	498a      	ldr	r1, [pc, #552]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006452:	4313      	orrs	r3, r2
 8006454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00a      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006464:	4b85      	ldr	r3, [pc, #532]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800646a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006472:	4982      	ldr	r1, [pc, #520]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006474:	4313      	orrs	r3, r2
 8006476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006486:	4b7d      	ldr	r3, [pc, #500]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800648c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006494:	4979      	ldr	r1, [pc, #484]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006496:	4313      	orrs	r3, r2
 8006498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00a      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064a8:	4b74      	ldr	r3, [pc, #464]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ae:	f023 0203 	bic.w	r2, r3, #3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b6:	4971      	ldr	r1, [pc, #452]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00a      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064ca:	4b6c      	ldr	r3, [pc, #432]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d0:	f023 020c 	bic.w	r2, r3, #12
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064d8:	4968      	ldr	r1, [pc, #416]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064da:	4313      	orrs	r3, r2
 80064dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00a      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064ec:	4b63      	ldr	r3, [pc, #396]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064fa:	4960      	ldr	r1, [pc, #384]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800650e:	4b5b      	ldr	r3, [pc, #364]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006514:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800651c:	4957      	ldr	r1, [pc, #348]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800651e:	4313      	orrs	r3, r2
 8006520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00a      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006530:	4b52      	ldr	r3, [pc, #328]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006536:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653e:	494f      	ldr	r1, [pc, #316]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006540:	4313      	orrs	r3, r2
 8006542:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00a      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006552:	4b4a      	ldr	r3, [pc, #296]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006558:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006560:	4946      	ldr	r1, [pc, #280]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006562:	4313      	orrs	r3, r2
 8006564:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00a      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006574:	4b41      	ldr	r3, [pc, #260]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800657a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006582:	493e      	ldr	r1, [pc, #248]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006584:	4313      	orrs	r3, r2
 8006586:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006596:	4b39      	ldr	r3, [pc, #228]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800659c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065a4:	4935      	ldr	r1, [pc, #212]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00a      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80065b8:	4b30      	ldr	r3, [pc, #192]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065c6:	492d      	ldr	r1, [pc, #180]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d011      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80065da:	4b28      	ldr	r3, [pc, #160]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065e8:	4924      	ldr	r1, [pc, #144]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065f8:	d101      	bne.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80065fa:	2301      	movs	r3, #1
 80065fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0308 	and.w	r3, r3, #8
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800660a:	2301      	movs	r3, #1
 800660c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00a      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800661a:	4b18      	ldr	r3, [pc, #96]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800661c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006620:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006628:	4914      	ldr	r1, [pc, #80]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800662a:	4313      	orrs	r3, r2
 800662c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00b      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800663c:	4b0f      	ldr	r3, [pc, #60]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800663e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006642:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800664c:	490b      	ldr	r1, [pc, #44]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800664e:	4313      	orrs	r3, r2
 8006650:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00f      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006660:	4b06      	ldr	r3, [pc, #24]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006666:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006670:	4902      	ldr	r1, [pc, #8]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006672:	4313      	orrs	r3, r2
 8006674:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006678:	e002      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800667a:	bf00      	nop
 800667c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00b      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800668c:	4b8a      	ldr	r3, [pc, #552]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800668e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006692:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669c:	4986      	ldr	r1, [pc, #536]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00b      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80066b0:	4b81      	ldr	r3, [pc, #516]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066c0:	497d      	ldr	r1, [pc, #500]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d006      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f000 80d6 	beq.w	8006888 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80066dc:	4b76      	ldr	r3, [pc, #472]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a75      	ldr	r2, [pc, #468]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80066e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066e8:	f7fb ffba 	bl	8002660 <HAL_GetTick>
 80066ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066ee:	e008      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80066f0:	f7fb ffb6 	bl	8002660 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	2b64      	cmp	r3, #100	; 0x64
 80066fc:	d901      	bls.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e195      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006702:	4b6d      	ldr	r3, [pc, #436]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1f0      	bne.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b00      	cmp	r3, #0
 8006718:	d021      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800671e:	2b00      	cmp	r3, #0
 8006720:	d11d      	bne.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006722:	4b65      	ldr	r3, [pc, #404]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006728:	0c1b      	lsrs	r3, r3, #16
 800672a:	f003 0303 	and.w	r3, r3, #3
 800672e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006730:	4b61      	ldr	r3, [pc, #388]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006736:	0e1b      	lsrs	r3, r3, #24
 8006738:	f003 030f 	and.w	r3, r3, #15
 800673c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	019a      	lsls	r2, r3, #6
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	041b      	lsls	r3, r3, #16
 8006748:	431a      	orrs	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	061b      	lsls	r3, r3, #24
 800674e:	431a      	orrs	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	071b      	lsls	r3, r3, #28
 8006756:	4958      	ldr	r1, [pc, #352]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006758:	4313      	orrs	r3, r2
 800675a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d004      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800676e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006772:	d00a      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800677c:	2b00      	cmp	r3, #0
 800677e:	d02e      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006784:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006788:	d129      	bne.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800678a:	4b4b      	ldr	r3, [pc, #300]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800678c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006790:	0c1b      	lsrs	r3, r3, #16
 8006792:	f003 0303 	and.w	r3, r3, #3
 8006796:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006798:	4b47      	ldr	r3, [pc, #284]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800679a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800679e:	0f1b      	lsrs	r3, r3, #28
 80067a0:	f003 0307 	and.w	r3, r3, #7
 80067a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	019a      	lsls	r2, r3, #6
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	041b      	lsls	r3, r3, #16
 80067b0:	431a      	orrs	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	061b      	lsls	r3, r3, #24
 80067b8:	431a      	orrs	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	071b      	lsls	r3, r3, #28
 80067be:	493e      	ldr	r1, [pc, #248]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80067c6:	4b3c      	ldr	r3, [pc, #240]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067cc:	f023 021f 	bic.w	r2, r3, #31
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d4:	3b01      	subs	r3, #1
 80067d6:	4938      	ldr	r1, [pc, #224]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d01d      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80067ea:	4b33      	ldr	r3, [pc, #204]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067f0:	0e1b      	lsrs	r3, r3, #24
 80067f2:	f003 030f 	and.w	r3, r3, #15
 80067f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80067f8:	4b2f      	ldr	r3, [pc, #188]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067fe:	0f1b      	lsrs	r3, r3, #28
 8006800:	f003 0307 	and.w	r3, r3, #7
 8006804:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	019a      	lsls	r2, r3, #6
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	041b      	lsls	r3, r3, #16
 8006812:	431a      	orrs	r2, r3
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	061b      	lsls	r3, r3, #24
 8006818:	431a      	orrs	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	071b      	lsls	r3, r3, #28
 800681e:	4926      	ldr	r1, [pc, #152]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006820:	4313      	orrs	r3, r2
 8006822:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d011      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	019a      	lsls	r2, r3, #6
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	041b      	lsls	r3, r3, #16
 800683e:	431a      	orrs	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	061b      	lsls	r3, r3, #24
 8006846:	431a      	orrs	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	071b      	lsls	r3, r3, #28
 800684e:	491a      	ldr	r1, [pc, #104]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006850:	4313      	orrs	r3, r2
 8006852:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006856:	4b18      	ldr	r3, [pc, #96]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a17      	ldr	r2, [pc, #92]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800685c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006860:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006862:	f7fb fefd 	bl	8002660 <HAL_GetTick>
 8006866:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006868:	e008      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800686a:	f7fb fef9 	bl	8002660 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	2b64      	cmp	r3, #100	; 0x64
 8006876:	d901      	bls.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e0d8      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800687c:	4b0e      	ldr	r3, [pc, #56]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d0f0      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	2b01      	cmp	r3, #1
 800688c:	f040 80ce 	bne.w	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006890:	4b09      	ldr	r3, [pc, #36]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a08      	ldr	r2, [pc, #32]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800689a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800689c:	f7fb fee0 	bl	8002660 <HAL_GetTick>
 80068a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80068a2:	e00b      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80068a4:	f7fb fedc 	bl	8002660 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b64      	cmp	r3, #100	; 0x64
 80068b0:	d904      	bls.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e0bb      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80068b6:	bf00      	nop
 80068b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80068bc:	4b5e      	ldr	r3, [pc, #376]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068c8:	d0ec      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d009      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d02e      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d12a      	bne.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80068f2:	4b51      	ldr	r3, [pc, #324]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f8:	0c1b      	lsrs	r3, r3, #16
 80068fa:	f003 0303 	and.w	r3, r3, #3
 80068fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006900:	4b4d      	ldr	r3, [pc, #308]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006906:	0f1b      	lsrs	r3, r3, #28
 8006908:	f003 0307 	and.w	r3, r3, #7
 800690c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	019a      	lsls	r2, r3, #6
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	041b      	lsls	r3, r3, #16
 8006918:	431a      	orrs	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	061b      	lsls	r3, r3, #24
 8006920:	431a      	orrs	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	071b      	lsls	r3, r3, #28
 8006926:	4944      	ldr	r1, [pc, #272]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006928:	4313      	orrs	r3, r2
 800692a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800692e:	4b42      	ldr	r3, [pc, #264]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006934:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693c:	3b01      	subs	r3, #1
 800693e:	021b      	lsls	r3, r3, #8
 8006940:	493d      	ldr	r1, [pc, #244]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006942:	4313      	orrs	r3, r2
 8006944:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d022      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006958:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800695c:	d11d      	bne.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800695e:	4b36      	ldr	r3, [pc, #216]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006964:	0e1b      	lsrs	r3, r3, #24
 8006966:	f003 030f 	and.w	r3, r3, #15
 800696a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800696c:	4b32      	ldr	r3, [pc, #200]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800696e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006972:	0f1b      	lsrs	r3, r3, #28
 8006974:	f003 0307 	and.w	r3, r3, #7
 8006978:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	019a      	lsls	r2, r3, #6
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	041b      	lsls	r3, r3, #16
 8006986:	431a      	orrs	r2, r3
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	061b      	lsls	r3, r3, #24
 800698c:	431a      	orrs	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	071b      	lsls	r3, r3, #28
 8006992:	4929      	ldr	r1, [pc, #164]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006994:	4313      	orrs	r3, r2
 8006996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0308 	and.w	r3, r3, #8
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d028      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80069a6:	4b24      	ldr	r3, [pc, #144]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80069a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ac:	0e1b      	lsrs	r3, r3, #24
 80069ae:	f003 030f 	and.w	r3, r3, #15
 80069b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80069b4:	4b20      	ldr	r3, [pc, #128]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80069b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ba:	0c1b      	lsrs	r3, r3, #16
 80069bc:	f003 0303 	and.w	r3, r3, #3
 80069c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	019a      	lsls	r2, r3, #6
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	041b      	lsls	r3, r3, #16
 80069cc:	431a      	orrs	r2, r3
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	061b      	lsls	r3, r3, #24
 80069d2:	431a      	orrs	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	69db      	ldr	r3, [r3, #28]
 80069d8:	071b      	lsls	r3, r3, #28
 80069da:	4917      	ldr	r1, [pc, #92]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80069e2:	4b15      	ldr	r3, [pc, #84]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80069e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f0:	4911      	ldr	r1, [pc, #68]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80069f8:	4b0f      	ldr	r3, [pc, #60]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a0e      	ldr	r2, [pc, #56]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80069fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a04:	f7fb fe2c 	bl	8002660 <HAL_GetTick>
 8006a08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006a0a:	e008      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006a0c:	f7fb fe28 	bl	8002660 <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	2b64      	cmp	r3, #100	; 0x64
 8006a18:	d901      	bls.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e007      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006a1e:	4b06      	ldr	r3, [pc, #24]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a2a:	d1ef      	bne.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3720      	adds	r7, #32
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	40023800 	.word	0x40023800

08006a3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e049      	b.n	8006ae2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d106      	bne.n	8006a68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f841 	bl	8006aea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	3304      	adds	r3, #4
 8006a78:	4619      	mov	r1, r3
 8006a7a:	4610      	mov	r0, r2
 8006a7c:	f000 fa00 	bl	8006e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006af2:	bf00      	nop
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
	...

08006b00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d001      	beq.n	8006b18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e054      	b.n	8006bc2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68da      	ldr	r2, [r3, #12]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f042 0201 	orr.w	r2, r2, #1
 8006b2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a26      	ldr	r2, [pc, #152]	; (8006bd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d022      	beq.n	8006b80 <HAL_TIM_Base_Start_IT+0x80>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b42:	d01d      	beq.n	8006b80 <HAL_TIM_Base_Start_IT+0x80>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a22      	ldr	r2, [pc, #136]	; (8006bd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d018      	beq.n	8006b80 <HAL_TIM_Base_Start_IT+0x80>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a21      	ldr	r2, [pc, #132]	; (8006bd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d013      	beq.n	8006b80 <HAL_TIM_Base_Start_IT+0x80>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a1f      	ldr	r2, [pc, #124]	; (8006bdc <HAL_TIM_Base_Start_IT+0xdc>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d00e      	beq.n	8006b80 <HAL_TIM_Base_Start_IT+0x80>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a1e      	ldr	r2, [pc, #120]	; (8006be0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d009      	beq.n	8006b80 <HAL_TIM_Base_Start_IT+0x80>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a1c      	ldr	r2, [pc, #112]	; (8006be4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d004      	beq.n	8006b80 <HAL_TIM_Base_Start_IT+0x80>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a1b      	ldr	r2, [pc, #108]	; (8006be8 <HAL_TIM_Base_Start_IT+0xe8>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d115      	bne.n	8006bac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689a      	ldr	r2, [r3, #8]
 8006b86:	4b19      	ldr	r3, [pc, #100]	; (8006bec <HAL_TIM_Base_Start_IT+0xec>)
 8006b88:	4013      	ands	r3, r2
 8006b8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2b06      	cmp	r3, #6
 8006b90:	d015      	beq.n	8006bbe <HAL_TIM_Base_Start_IT+0xbe>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b98:	d011      	beq.n	8006bbe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f042 0201 	orr.w	r2, r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006baa:	e008      	b.n	8006bbe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f042 0201 	orr.w	r2, r2, #1
 8006bba:	601a      	str	r2, [r3, #0]
 8006bbc:	e000      	b.n	8006bc0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bbe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	40010000 	.word	0x40010000
 8006bd4:	40000400 	.word	0x40000400
 8006bd8:	40000800 	.word	0x40000800
 8006bdc:	40000c00 	.word	0x40000c00
 8006be0:	40010400 	.word	0x40010400
 8006be4:	40014000 	.word	0x40014000
 8006be8:	40001800 	.word	0x40001800
 8006bec:	00010007 	.word	0x00010007

08006bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d122      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d11b      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f06f 0202 	mvn.w	r2, #2
 8006c1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	f003 0303 	and.w	r3, r3, #3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f905 	bl	8006e42 <HAL_TIM_IC_CaptureCallback>
 8006c38:	e005      	b.n	8006c46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f8f7 	bl	8006e2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f908 	bl	8006e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f003 0304 	and.w	r3, r3, #4
 8006c56:	2b04      	cmp	r3, #4
 8006c58:	d122      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d11b      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f06f 0204 	mvn.w	r2, #4
 8006c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2202      	movs	r2, #2
 8006c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f8db 	bl	8006e42 <HAL_TIM_IC_CaptureCallback>
 8006c8c:	e005      	b.n	8006c9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f8cd 	bl	8006e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f8de 	bl	8006e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	f003 0308 	and.w	r3, r3, #8
 8006caa:	2b08      	cmp	r3, #8
 8006cac:	d122      	bne.n	8006cf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f003 0308 	and.w	r3, r3, #8
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	d11b      	bne.n	8006cf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f06f 0208 	mvn.w	r2, #8
 8006cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2204      	movs	r2, #4
 8006cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	f003 0303 	and.w	r3, r3, #3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f8b1 	bl	8006e42 <HAL_TIM_IC_CaptureCallback>
 8006ce0:	e005      	b.n	8006cee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f8a3 	bl	8006e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f8b4 	bl	8006e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	f003 0310 	and.w	r3, r3, #16
 8006cfe:	2b10      	cmp	r3, #16
 8006d00:	d122      	bne.n	8006d48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f003 0310 	and.w	r3, r3, #16
 8006d0c:	2b10      	cmp	r3, #16
 8006d0e:	d11b      	bne.n	8006d48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f06f 0210 	mvn.w	r2, #16
 8006d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2208      	movs	r2, #8
 8006d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f887 	bl	8006e42 <HAL_TIM_IC_CaptureCallback>
 8006d34:	e005      	b.n	8006d42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f879 	bl	8006e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f88a 	bl	8006e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d10e      	bne.n	8006d74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d107      	bne.n	8006d74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f06f 0201 	mvn.w	r2, #1
 8006d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7fa ff5a 	bl	8001c28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d7e:	2b80      	cmp	r3, #128	; 0x80
 8006d80:	d10e      	bne.n	8006da0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d8c:	2b80      	cmp	r3, #128	; 0x80
 8006d8e:	d107      	bne.n	8006da0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f91a 	bl	8006fd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dae:	d10e      	bne.n	8006dce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dba:	2b80      	cmp	r3, #128	; 0x80
 8006dbc:	d107      	bne.n	8006dce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f90d 	bl	8006fe8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd8:	2b40      	cmp	r3, #64	; 0x40
 8006dda:	d10e      	bne.n	8006dfa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de6:	2b40      	cmp	r3, #64	; 0x40
 8006de8:	d107      	bne.n	8006dfa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f838 	bl	8006e6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	f003 0320 	and.w	r3, r3, #32
 8006e04:	2b20      	cmp	r3, #32
 8006e06:	d10e      	bne.n	8006e26 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	f003 0320 	and.w	r3, r3, #32
 8006e12:	2b20      	cmp	r3, #32
 8006e14:	d107      	bne.n	8006e26 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f06f 0220 	mvn.w	r2, #32
 8006e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f8cd 	bl	8006fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e26:	bf00      	nop
 8006e28:	3708      	adds	r7, #8
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b083      	sub	sp, #12
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e36:	bf00      	nop
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b083      	sub	sp, #12
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e4a:	bf00      	nop
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b083      	sub	sp, #12
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e5e:	bf00      	nop
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e72:	bf00      	nop
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
	...

08006e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a40      	ldr	r2, [pc, #256]	; (8006f94 <TIM_Base_SetConfig+0x114>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d013      	beq.n	8006ec0 <TIM_Base_SetConfig+0x40>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e9e:	d00f      	beq.n	8006ec0 <TIM_Base_SetConfig+0x40>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a3d      	ldr	r2, [pc, #244]	; (8006f98 <TIM_Base_SetConfig+0x118>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d00b      	beq.n	8006ec0 <TIM_Base_SetConfig+0x40>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a3c      	ldr	r2, [pc, #240]	; (8006f9c <TIM_Base_SetConfig+0x11c>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d007      	beq.n	8006ec0 <TIM_Base_SetConfig+0x40>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a3b      	ldr	r2, [pc, #236]	; (8006fa0 <TIM_Base_SetConfig+0x120>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d003      	beq.n	8006ec0 <TIM_Base_SetConfig+0x40>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a3a      	ldr	r2, [pc, #232]	; (8006fa4 <TIM_Base_SetConfig+0x124>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d108      	bne.n	8006ed2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a2f      	ldr	r2, [pc, #188]	; (8006f94 <TIM_Base_SetConfig+0x114>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d02b      	beq.n	8006f32 <TIM_Base_SetConfig+0xb2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee0:	d027      	beq.n	8006f32 <TIM_Base_SetConfig+0xb2>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a2c      	ldr	r2, [pc, #176]	; (8006f98 <TIM_Base_SetConfig+0x118>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d023      	beq.n	8006f32 <TIM_Base_SetConfig+0xb2>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a2b      	ldr	r2, [pc, #172]	; (8006f9c <TIM_Base_SetConfig+0x11c>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d01f      	beq.n	8006f32 <TIM_Base_SetConfig+0xb2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a2a      	ldr	r2, [pc, #168]	; (8006fa0 <TIM_Base_SetConfig+0x120>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d01b      	beq.n	8006f32 <TIM_Base_SetConfig+0xb2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a29      	ldr	r2, [pc, #164]	; (8006fa4 <TIM_Base_SetConfig+0x124>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d017      	beq.n	8006f32 <TIM_Base_SetConfig+0xb2>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a28      	ldr	r2, [pc, #160]	; (8006fa8 <TIM_Base_SetConfig+0x128>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d013      	beq.n	8006f32 <TIM_Base_SetConfig+0xb2>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a27      	ldr	r2, [pc, #156]	; (8006fac <TIM_Base_SetConfig+0x12c>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d00f      	beq.n	8006f32 <TIM_Base_SetConfig+0xb2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a26      	ldr	r2, [pc, #152]	; (8006fb0 <TIM_Base_SetConfig+0x130>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d00b      	beq.n	8006f32 <TIM_Base_SetConfig+0xb2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a25      	ldr	r2, [pc, #148]	; (8006fb4 <TIM_Base_SetConfig+0x134>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d007      	beq.n	8006f32 <TIM_Base_SetConfig+0xb2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a24      	ldr	r2, [pc, #144]	; (8006fb8 <TIM_Base_SetConfig+0x138>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d003      	beq.n	8006f32 <TIM_Base_SetConfig+0xb2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a23      	ldr	r2, [pc, #140]	; (8006fbc <TIM_Base_SetConfig+0x13c>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d108      	bne.n	8006f44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	689a      	ldr	r2, [r3, #8]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a0a      	ldr	r2, [pc, #40]	; (8006f94 <TIM_Base_SetConfig+0x114>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d003      	beq.n	8006f78 <TIM_Base_SetConfig+0xf8>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a0c      	ldr	r2, [pc, #48]	; (8006fa4 <TIM_Base_SetConfig+0x124>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d103      	bne.n	8006f80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	691a      	ldr	r2, [r3, #16]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	615a      	str	r2, [r3, #20]
}
 8006f86:	bf00      	nop
 8006f88:	3714      	adds	r7, #20
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	40010000 	.word	0x40010000
 8006f98:	40000400 	.word	0x40000400
 8006f9c:	40000800 	.word	0x40000800
 8006fa0:	40000c00 	.word	0x40000c00
 8006fa4:	40010400 	.word	0x40010400
 8006fa8:	40014000 	.word	0x40014000
 8006fac:	40014400 	.word	0x40014400
 8006fb0:	40014800 	.word	0x40014800
 8006fb4:	40001800 	.word	0x40001800
 8006fb8:	40001c00 	.word	0x40001c00
 8006fbc:	40002000 	.word	0x40002000

08006fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e040      	b.n	8007090 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007012:	2b00      	cmp	r3, #0
 8007014:	d106      	bne.n	8007024 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7fa feac 	bl	8001d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2224      	movs	r2, #36	; 0x24
 8007028:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f022 0201 	bic.w	r2, r2, #1
 8007038:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fbc2 	bl	80077c4 <UART_SetConfig>
 8007040:	4603      	mov	r3, r0
 8007042:	2b01      	cmp	r3, #1
 8007044:	d101      	bne.n	800704a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e022      	b.n	8007090 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704e:	2b00      	cmp	r3, #0
 8007050:	d002      	beq.n	8007058 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fe1a 	bl	8007c8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685a      	ldr	r2, [r3, #4]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007066:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689a      	ldr	r2, [r3, #8]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007076:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f042 0201 	orr.w	r2, r2, #1
 8007086:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 fea1 	bl	8007dd0 <UART_CheckIdleState>
 800708e:	4603      	mov	r3, r0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b08a      	sub	sp, #40	; 0x28
 800709c:	af02      	add	r7, sp, #8
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	603b      	str	r3, [r7, #0]
 80070a4:	4613      	mov	r3, r2
 80070a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070ac:	2b20      	cmp	r3, #32
 80070ae:	d171      	bne.n	8007194 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d002      	beq.n	80070bc <HAL_UART_Transmit+0x24>
 80070b6:	88fb      	ldrh	r3, [r7, #6]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e06a      	b.n	8007196 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2221      	movs	r2, #33	; 0x21
 80070cc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070ce:	f7fb fac7 	bl	8002660 <HAL_GetTick>
 80070d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	88fa      	ldrh	r2, [r7, #6]
 80070d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	88fa      	ldrh	r2, [r7, #6]
 80070e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ec:	d108      	bne.n	8007100 <HAL_UART_Transmit+0x68>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d104      	bne.n	8007100 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80070f6:	2300      	movs	r3, #0
 80070f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	61bb      	str	r3, [r7, #24]
 80070fe:	e003      	b.n	8007108 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007104:	2300      	movs	r3, #0
 8007106:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007108:	e02c      	b.n	8007164 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	9300      	str	r3, [sp, #0]
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	2200      	movs	r2, #0
 8007112:	2180      	movs	r1, #128	; 0x80
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f000 fea8 	bl	8007e6a <UART_WaitOnFlagUntilTimeout>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d001      	beq.n	8007124 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e038      	b.n	8007196 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10b      	bne.n	8007142 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	881b      	ldrh	r3, [r3, #0]
 800712e:	461a      	mov	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007138:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	3302      	adds	r3, #2
 800713e:	61bb      	str	r3, [r7, #24]
 8007140:	e007      	b.n	8007152 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	781a      	ldrb	r2, [r3, #0]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	3301      	adds	r3, #1
 8007150:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007158:	b29b      	uxth	r3, r3
 800715a:	3b01      	subs	r3, #1
 800715c:	b29a      	uxth	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800716a:	b29b      	uxth	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1cc      	bne.n	800710a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	2200      	movs	r2, #0
 8007178:	2140      	movs	r1, #64	; 0x40
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f000 fe75 	bl	8007e6a <UART_WaitOnFlagUntilTimeout>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d001      	beq.n	800718a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e005      	b.n	8007196 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2220      	movs	r2, #32
 800718e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007190:	2300      	movs	r3, #0
 8007192:	e000      	b.n	8007196 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007194:	2302      	movs	r3, #2
  }
}
 8007196:	4618      	mov	r0, r3
 8007198:	3720      	adds	r7, #32
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
	...

080071a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b0ba      	sub	sp, #232	; 0xe8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80071c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80071ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80071ce:	4013      	ands	r3, r2
 80071d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80071d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d115      	bne.n	8007208 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80071dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e0:	f003 0320 	and.w	r3, r3, #32
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00f      	beq.n	8007208 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80071e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ec:	f003 0320 	and.w	r3, r3, #32
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d009      	beq.n	8007208 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 82ac 	beq.w	8007756 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	4798      	blx	r3
      }
      return;
 8007206:	e2a6      	b.n	8007756 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007208:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800720c:	2b00      	cmp	r3, #0
 800720e:	f000 8117 	beq.w	8007440 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d106      	bne.n	800722c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800721e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007222:	4b85      	ldr	r3, [pc, #532]	; (8007438 <HAL_UART_IRQHandler+0x298>)
 8007224:	4013      	ands	r3, r2
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 810a 	beq.w	8007440 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800722c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d011      	beq.n	800725c <HAL_UART_IRQHandler+0xbc>
 8007238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800723c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00b      	beq.n	800725c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2201      	movs	r2, #1
 800724a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007252:	f043 0201 	orr.w	r2, r3, #1
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800725c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	2b00      	cmp	r3, #0
 8007266:	d011      	beq.n	800728c <HAL_UART_IRQHandler+0xec>
 8007268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00b      	beq.n	800728c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2202      	movs	r2, #2
 800727a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007282:	f043 0204 	orr.w	r2, r3, #4
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800728c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007290:	f003 0304 	and.w	r3, r3, #4
 8007294:	2b00      	cmp	r3, #0
 8007296:	d011      	beq.n	80072bc <HAL_UART_IRQHandler+0x11c>
 8007298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800729c:	f003 0301 	and.w	r3, r3, #1
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00b      	beq.n	80072bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2204      	movs	r2, #4
 80072aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072b2:	f043 0202 	orr.w	r2, r3, #2
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80072bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072c0:	f003 0308 	and.w	r3, r3, #8
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d017      	beq.n	80072f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80072c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072cc:	f003 0320 	and.w	r3, r3, #32
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d105      	bne.n	80072e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80072d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00b      	beq.n	80072f8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2208      	movs	r2, #8
 80072e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072ee:	f043 0208 	orr.w	r2, r3, #8
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80072f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007300:	2b00      	cmp	r3, #0
 8007302:	d012      	beq.n	800732a <HAL_UART_IRQHandler+0x18a>
 8007304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007308:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00c      	beq.n	800732a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007318:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007320:	f043 0220 	orr.w	r2, r3, #32
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 8212 	beq.w	800775a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800733a:	f003 0320 	and.w	r3, r3, #32
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00d      	beq.n	800735e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007346:	f003 0320 	and.w	r3, r3, #32
 800734a:	2b00      	cmp	r3, #0
 800734c:	d007      	beq.n	800735e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007352:	2b00      	cmp	r3, #0
 8007354:	d003      	beq.n	800735e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007364:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007372:	2b40      	cmp	r3, #64	; 0x40
 8007374:	d005      	beq.n	8007382 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800737a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800737e:	2b00      	cmp	r3, #0
 8007380:	d04f      	beq.n	8007422 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fe37 	bl	8007ff6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007392:	2b40      	cmp	r3, #64	; 0x40
 8007394:	d141      	bne.n	800741a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	3308      	adds	r3, #8
 800739c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073a4:	e853 3f00 	ldrex	r3, [r3]
 80073a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80073ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3308      	adds	r3, #8
 80073be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80073c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80073c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80073ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80073d2:	e841 2300 	strex	r3, r2, [r1]
 80073d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80073da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1d9      	bne.n	8007396 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d013      	beq.n	8007412 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ee:	4a13      	ldr	r2, [pc, #76]	; (800743c <HAL_UART_IRQHandler+0x29c>)
 80073f0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7fc f9be 	bl	8003778 <HAL_DMA_Abort_IT>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d017      	beq.n	8007432 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800740c:	4610      	mov	r0, r2
 800740e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007410:	e00f      	b.n	8007432 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f9b6 	bl	8007784 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007418:	e00b      	b.n	8007432 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f9b2 	bl	8007784 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007420:	e007      	b.n	8007432 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f9ae 	bl	8007784 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007430:	e193      	b.n	800775a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007432:	bf00      	nop
    return;
 8007434:	e191      	b.n	800775a <HAL_UART_IRQHandler+0x5ba>
 8007436:	bf00      	nop
 8007438:	04000120 	.word	0x04000120
 800743c:	080080bf 	.word	0x080080bf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007444:	2b01      	cmp	r3, #1
 8007446:	f040 814c 	bne.w	80076e2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800744a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800744e:	f003 0310 	and.w	r3, r3, #16
 8007452:	2b00      	cmp	r3, #0
 8007454:	f000 8145 	beq.w	80076e2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800745c:	f003 0310 	and.w	r3, r3, #16
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 813e 	beq.w	80076e2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2210      	movs	r2, #16
 800746c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007478:	2b40      	cmp	r3, #64	; 0x40
 800747a:	f040 80b6 	bne.w	80075ea <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800748a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800748e:	2b00      	cmp	r3, #0
 8007490:	f000 8165 	beq.w	800775e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800749a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800749e:	429a      	cmp	r2, r3
 80074a0:	f080 815d 	bcs.w	800775e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074b2:	69db      	ldr	r3, [r3, #28]
 80074b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074b8:	f000 8086 	beq.w	80075c8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074c8:	e853 3f00 	ldrex	r3, [r3]
 80074cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80074d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	461a      	mov	r2, r3
 80074e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80074e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80074ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80074f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80074f6:	e841 2300 	strex	r3, r2, [r1]
 80074fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80074fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1da      	bne.n	80074bc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3308      	adds	r3, #8
 800750c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007510:	e853 3f00 	ldrex	r3, [r3]
 8007514:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007516:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007518:	f023 0301 	bic.w	r3, r3, #1
 800751c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3308      	adds	r3, #8
 8007526:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800752a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800752e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007530:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007532:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007536:	e841 2300 	strex	r3, r2, [r1]
 800753a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800753c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1e1      	bne.n	8007506 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3308      	adds	r3, #8
 8007548:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800754c:	e853 3f00 	ldrex	r3, [r3]
 8007550:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007558:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3308      	adds	r3, #8
 8007562:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007566:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007568:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800756c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800756e:	e841 2300 	strex	r3, r2, [r1]
 8007572:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007574:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1e3      	bne.n	8007542 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2220      	movs	r2, #32
 800757e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007590:	e853 3f00 	ldrex	r3, [r3]
 8007594:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007598:	f023 0310 	bic.w	r3, r3, #16
 800759c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	461a      	mov	r2, r3
 80075a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80075aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80075ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075b2:	e841 2300 	strex	r3, r2, [r1]
 80075b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1e4      	bne.n	8007588 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7fc f868 	bl	8003698 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2202      	movs	r2, #2
 80075cc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075da:	b29b      	uxth	r3, r3
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	b29b      	uxth	r3, r3
 80075e0:	4619      	mov	r1, r3
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f8d8 	bl	8007798 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075e8:	e0b9      	b.n	800775e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007604:	b29b      	uxth	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	f000 80ab 	beq.w	8007762 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 800760c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007610:	2b00      	cmp	r3, #0
 8007612:	f000 80a6 	beq.w	8007762 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761e:	e853 3f00 	ldrex	r3, [r3]
 8007622:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007626:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800762a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	461a      	mov	r2, r3
 8007634:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007638:	647b      	str	r3, [r7, #68]	; 0x44
 800763a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800763e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007640:	e841 2300 	strex	r3, r2, [r1]
 8007644:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1e4      	bne.n	8007616 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	3308      	adds	r3, #8
 8007652:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	e853 3f00 	ldrex	r3, [r3]
 800765a:	623b      	str	r3, [r7, #32]
   return(result);
 800765c:	6a3b      	ldr	r3, [r7, #32]
 800765e:	f023 0301 	bic.w	r3, r3, #1
 8007662:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3308      	adds	r3, #8
 800766c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007670:	633a      	str	r2, [r7, #48]	; 0x30
 8007672:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007674:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007678:	e841 2300 	strex	r3, r2, [r1]
 800767c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800767e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1e3      	bne.n	800764c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2220      	movs	r2, #32
 8007688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f023 0310 	bic.w	r3, r3, #16
 80076ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	461a      	mov	r2, r3
 80076b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80076ba:	61fb      	str	r3, [r7, #28]
 80076bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076be:	69b9      	ldr	r1, [r7, #24]
 80076c0:	69fa      	ldr	r2, [r7, #28]
 80076c2:	e841 2300 	strex	r3, r2, [r1]
 80076c6:	617b      	str	r3, [r7, #20]
   return(result);
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1e4      	bne.n	8007698 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2202      	movs	r2, #2
 80076d2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076d8:	4619      	mov	r1, r3
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f85c 	bl	8007798 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076e0:	e03f      	b.n	8007762 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80076e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00e      	beq.n	800770c <HAL_UART_IRQHandler+0x56c>
 80076ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d008      	beq.n	800770c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007702:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f853 	bl	80077b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800770a:	e02d      	b.n	8007768 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800770c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00e      	beq.n	8007736 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800771c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007720:	2b00      	cmp	r3, #0
 8007722:	d008      	beq.n	8007736 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007728:	2b00      	cmp	r3, #0
 800772a:	d01c      	beq.n	8007766 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	4798      	blx	r3
    }
    return;
 8007734:	e017      	b.n	8007766 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800773a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800773e:	2b00      	cmp	r3, #0
 8007740:	d012      	beq.n	8007768 <HAL_UART_IRQHandler+0x5c8>
 8007742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00c      	beq.n	8007768 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fccb 	bl	80080ea <UART_EndTransmit_IT>
    return;
 8007754:	e008      	b.n	8007768 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007756:	bf00      	nop
 8007758:	e006      	b.n	8007768 <HAL_UART_IRQHandler+0x5c8>
    return;
 800775a:	bf00      	nop
 800775c:	e004      	b.n	8007768 <HAL_UART_IRQHandler+0x5c8>
      return;
 800775e:	bf00      	nop
 8007760:	e002      	b.n	8007768 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007762:	bf00      	nop
 8007764:	e000      	b.n	8007768 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007766:	bf00      	nop
  }

}
 8007768:	37e8      	adds	r7, #232	; 0xe8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop

08007770 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	460b      	mov	r3, r1
 80077a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b088      	sub	sp, #32
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077cc:	2300      	movs	r3, #0
 80077ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	689a      	ldr	r2, [r3, #8]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	431a      	orrs	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	695b      	ldr	r3, [r3, #20]
 80077de:	431a      	orrs	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	69db      	ldr	r3, [r3, #28]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	4ba6      	ldr	r3, [pc, #664]	; (8007a88 <UART_SetConfig+0x2c4>)
 80077f0:	4013      	ands	r3, r2
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	6812      	ldr	r2, [r2, #0]
 80077f6:	6979      	ldr	r1, [r7, #20]
 80077f8:	430b      	orrs	r3, r1
 80077fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	68da      	ldr	r2, [r3, #12]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	430a      	orrs	r2, r1
 8007810:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a1b      	ldr	r3, [r3, #32]
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	4313      	orrs	r3, r2
 8007820:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	430a      	orrs	r2, r1
 8007834:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a94      	ldr	r2, [pc, #592]	; (8007a8c <UART_SetConfig+0x2c8>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d120      	bne.n	8007882 <UART_SetConfig+0xbe>
 8007840:	4b93      	ldr	r3, [pc, #588]	; (8007a90 <UART_SetConfig+0x2cc>)
 8007842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007846:	f003 0303 	and.w	r3, r3, #3
 800784a:	2b03      	cmp	r3, #3
 800784c:	d816      	bhi.n	800787c <UART_SetConfig+0xb8>
 800784e:	a201      	add	r2, pc, #4	; (adr r2, 8007854 <UART_SetConfig+0x90>)
 8007850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007854:	08007865 	.word	0x08007865
 8007858:	08007871 	.word	0x08007871
 800785c:	0800786b 	.word	0x0800786b
 8007860:	08007877 	.word	0x08007877
 8007864:	2301      	movs	r3, #1
 8007866:	77fb      	strb	r3, [r7, #31]
 8007868:	e150      	b.n	8007b0c <UART_SetConfig+0x348>
 800786a:	2302      	movs	r3, #2
 800786c:	77fb      	strb	r3, [r7, #31]
 800786e:	e14d      	b.n	8007b0c <UART_SetConfig+0x348>
 8007870:	2304      	movs	r3, #4
 8007872:	77fb      	strb	r3, [r7, #31]
 8007874:	e14a      	b.n	8007b0c <UART_SetConfig+0x348>
 8007876:	2308      	movs	r3, #8
 8007878:	77fb      	strb	r3, [r7, #31]
 800787a:	e147      	b.n	8007b0c <UART_SetConfig+0x348>
 800787c:	2310      	movs	r3, #16
 800787e:	77fb      	strb	r3, [r7, #31]
 8007880:	e144      	b.n	8007b0c <UART_SetConfig+0x348>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a83      	ldr	r2, [pc, #524]	; (8007a94 <UART_SetConfig+0x2d0>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d132      	bne.n	80078f2 <UART_SetConfig+0x12e>
 800788c:	4b80      	ldr	r3, [pc, #512]	; (8007a90 <UART_SetConfig+0x2cc>)
 800788e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007892:	f003 030c 	and.w	r3, r3, #12
 8007896:	2b0c      	cmp	r3, #12
 8007898:	d828      	bhi.n	80078ec <UART_SetConfig+0x128>
 800789a:	a201      	add	r2, pc, #4	; (adr r2, 80078a0 <UART_SetConfig+0xdc>)
 800789c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a0:	080078d5 	.word	0x080078d5
 80078a4:	080078ed 	.word	0x080078ed
 80078a8:	080078ed 	.word	0x080078ed
 80078ac:	080078ed 	.word	0x080078ed
 80078b0:	080078e1 	.word	0x080078e1
 80078b4:	080078ed 	.word	0x080078ed
 80078b8:	080078ed 	.word	0x080078ed
 80078bc:	080078ed 	.word	0x080078ed
 80078c0:	080078db 	.word	0x080078db
 80078c4:	080078ed 	.word	0x080078ed
 80078c8:	080078ed 	.word	0x080078ed
 80078cc:	080078ed 	.word	0x080078ed
 80078d0:	080078e7 	.word	0x080078e7
 80078d4:	2300      	movs	r3, #0
 80078d6:	77fb      	strb	r3, [r7, #31]
 80078d8:	e118      	b.n	8007b0c <UART_SetConfig+0x348>
 80078da:	2302      	movs	r3, #2
 80078dc:	77fb      	strb	r3, [r7, #31]
 80078de:	e115      	b.n	8007b0c <UART_SetConfig+0x348>
 80078e0:	2304      	movs	r3, #4
 80078e2:	77fb      	strb	r3, [r7, #31]
 80078e4:	e112      	b.n	8007b0c <UART_SetConfig+0x348>
 80078e6:	2308      	movs	r3, #8
 80078e8:	77fb      	strb	r3, [r7, #31]
 80078ea:	e10f      	b.n	8007b0c <UART_SetConfig+0x348>
 80078ec:	2310      	movs	r3, #16
 80078ee:	77fb      	strb	r3, [r7, #31]
 80078f0:	e10c      	b.n	8007b0c <UART_SetConfig+0x348>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a68      	ldr	r2, [pc, #416]	; (8007a98 <UART_SetConfig+0x2d4>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d120      	bne.n	800793e <UART_SetConfig+0x17a>
 80078fc:	4b64      	ldr	r3, [pc, #400]	; (8007a90 <UART_SetConfig+0x2cc>)
 80078fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007902:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007906:	2b30      	cmp	r3, #48	; 0x30
 8007908:	d013      	beq.n	8007932 <UART_SetConfig+0x16e>
 800790a:	2b30      	cmp	r3, #48	; 0x30
 800790c:	d814      	bhi.n	8007938 <UART_SetConfig+0x174>
 800790e:	2b20      	cmp	r3, #32
 8007910:	d009      	beq.n	8007926 <UART_SetConfig+0x162>
 8007912:	2b20      	cmp	r3, #32
 8007914:	d810      	bhi.n	8007938 <UART_SetConfig+0x174>
 8007916:	2b00      	cmp	r3, #0
 8007918:	d002      	beq.n	8007920 <UART_SetConfig+0x15c>
 800791a:	2b10      	cmp	r3, #16
 800791c:	d006      	beq.n	800792c <UART_SetConfig+0x168>
 800791e:	e00b      	b.n	8007938 <UART_SetConfig+0x174>
 8007920:	2300      	movs	r3, #0
 8007922:	77fb      	strb	r3, [r7, #31]
 8007924:	e0f2      	b.n	8007b0c <UART_SetConfig+0x348>
 8007926:	2302      	movs	r3, #2
 8007928:	77fb      	strb	r3, [r7, #31]
 800792a:	e0ef      	b.n	8007b0c <UART_SetConfig+0x348>
 800792c:	2304      	movs	r3, #4
 800792e:	77fb      	strb	r3, [r7, #31]
 8007930:	e0ec      	b.n	8007b0c <UART_SetConfig+0x348>
 8007932:	2308      	movs	r3, #8
 8007934:	77fb      	strb	r3, [r7, #31]
 8007936:	e0e9      	b.n	8007b0c <UART_SetConfig+0x348>
 8007938:	2310      	movs	r3, #16
 800793a:	77fb      	strb	r3, [r7, #31]
 800793c:	e0e6      	b.n	8007b0c <UART_SetConfig+0x348>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a56      	ldr	r2, [pc, #344]	; (8007a9c <UART_SetConfig+0x2d8>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d120      	bne.n	800798a <UART_SetConfig+0x1c6>
 8007948:	4b51      	ldr	r3, [pc, #324]	; (8007a90 <UART_SetConfig+0x2cc>)
 800794a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800794e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007952:	2bc0      	cmp	r3, #192	; 0xc0
 8007954:	d013      	beq.n	800797e <UART_SetConfig+0x1ba>
 8007956:	2bc0      	cmp	r3, #192	; 0xc0
 8007958:	d814      	bhi.n	8007984 <UART_SetConfig+0x1c0>
 800795a:	2b80      	cmp	r3, #128	; 0x80
 800795c:	d009      	beq.n	8007972 <UART_SetConfig+0x1ae>
 800795e:	2b80      	cmp	r3, #128	; 0x80
 8007960:	d810      	bhi.n	8007984 <UART_SetConfig+0x1c0>
 8007962:	2b00      	cmp	r3, #0
 8007964:	d002      	beq.n	800796c <UART_SetConfig+0x1a8>
 8007966:	2b40      	cmp	r3, #64	; 0x40
 8007968:	d006      	beq.n	8007978 <UART_SetConfig+0x1b4>
 800796a:	e00b      	b.n	8007984 <UART_SetConfig+0x1c0>
 800796c:	2300      	movs	r3, #0
 800796e:	77fb      	strb	r3, [r7, #31]
 8007970:	e0cc      	b.n	8007b0c <UART_SetConfig+0x348>
 8007972:	2302      	movs	r3, #2
 8007974:	77fb      	strb	r3, [r7, #31]
 8007976:	e0c9      	b.n	8007b0c <UART_SetConfig+0x348>
 8007978:	2304      	movs	r3, #4
 800797a:	77fb      	strb	r3, [r7, #31]
 800797c:	e0c6      	b.n	8007b0c <UART_SetConfig+0x348>
 800797e:	2308      	movs	r3, #8
 8007980:	77fb      	strb	r3, [r7, #31]
 8007982:	e0c3      	b.n	8007b0c <UART_SetConfig+0x348>
 8007984:	2310      	movs	r3, #16
 8007986:	77fb      	strb	r3, [r7, #31]
 8007988:	e0c0      	b.n	8007b0c <UART_SetConfig+0x348>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a44      	ldr	r2, [pc, #272]	; (8007aa0 <UART_SetConfig+0x2dc>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d125      	bne.n	80079e0 <UART_SetConfig+0x21c>
 8007994:	4b3e      	ldr	r3, [pc, #248]	; (8007a90 <UART_SetConfig+0x2cc>)
 8007996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800799a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800799e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079a2:	d017      	beq.n	80079d4 <UART_SetConfig+0x210>
 80079a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079a8:	d817      	bhi.n	80079da <UART_SetConfig+0x216>
 80079aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079ae:	d00b      	beq.n	80079c8 <UART_SetConfig+0x204>
 80079b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079b4:	d811      	bhi.n	80079da <UART_SetConfig+0x216>
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d003      	beq.n	80079c2 <UART_SetConfig+0x1fe>
 80079ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079be:	d006      	beq.n	80079ce <UART_SetConfig+0x20a>
 80079c0:	e00b      	b.n	80079da <UART_SetConfig+0x216>
 80079c2:	2300      	movs	r3, #0
 80079c4:	77fb      	strb	r3, [r7, #31]
 80079c6:	e0a1      	b.n	8007b0c <UART_SetConfig+0x348>
 80079c8:	2302      	movs	r3, #2
 80079ca:	77fb      	strb	r3, [r7, #31]
 80079cc:	e09e      	b.n	8007b0c <UART_SetConfig+0x348>
 80079ce:	2304      	movs	r3, #4
 80079d0:	77fb      	strb	r3, [r7, #31]
 80079d2:	e09b      	b.n	8007b0c <UART_SetConfig+0x348>
 80079d4:	2308      	movs	r3, #8
 80079d6:	77fb      	strb	r3, [r7, #31]
 80079d8:	e098      	b.n	8007b0c <UART_SetConfig+0x348>
 80079da:	2310      	movs	r3, #16
 80079dc:	77fb      	strb	r3, [r7, #31]
 80079de:	e095      	b.n	8007b0c <UART_SetConfig+0x348>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a2f      	ldr	r2, [pc, #188]	; (8007aa4 <UART_SetConfig+0x2e0>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d125      	bne.n	8007a36 <UART_SetConfig+0x272>
 80079ea:	4b29      	ldr	r3, [pc, #164]	; (8007a90 <UART_SetConfig+0x2cc>)
 80079ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80079f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079f8:	d017      	beq.n	8007a2a <UART_SetConfig+0x266>
 80079fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079fe:	d817      	bhi.n	8007a30 <UART_SetConfig+0x26c>
 8007a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a04:	d00b      	beq.n	8007a1e <UART_SetConfig+0x25a>
 8007a06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a0a:	d811      	bhi.n	8007a30 <UART_SetConfig+0x26c>
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d003      	beq.n	8007a18 <UART_SetConfig+0x254>
 8007a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a14:	d006      	beq.n	8007a24 <UART_SetConfig+0x260>
 8007a16:	e00b      	b.n	8007a30 <UART_SetConfig+0x26c>
 8007a18:	2301      	movs	r3, #1
 8007a1a:	77fb      	strb	r3, [r7, #31]
 8007a1c:	e076      	b.n	8007b0c <UART_SetConfig+0x348>
 8007a1e:	2302      	movs	r3, #2
 8007a20:	77fb      	strb	r3, [r7, #31]
 8007a22:	e073      	b.n	8007b0c <UART_SetConfig+0x348>
 8007a24:	2304      	movs	r3, #4
 8007a26:	77fb      	strb	r3, [r7, #31]
 8007a28:	e070      	b.n	8007b0c <UART_SetConfig+0x348>
 8007a2a:	2308      	movs	r3, #8
 8007a2c:	77fb      	strb	r3, [r7, #31]
 8007a2e:	e06d      	b.n	8007b0c <UART_SetConfig+0x348>
 8007a30:	2310      	movs	r3, #16
 8007a32:	77fb      	strb	r3, [r7, #31]
 8007a34:	e06a      	b.n	8007b0c <UART_SetConfig+0x348>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a1b      	ldr	r2, [pc, #108]	; (8007aa8 <UART_SetConfig+0x2e4>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d138      	bne.n	8007ab2 <UART_SetConfig+0x2ee>
 8007a40:	4b13      	ldr	r3, [pc, #76]	; (8007a90 <UART_SetConfig+0x2cc>)
 8007a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a46:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007a4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a4e:	d017      	beq.n	8007a80 <UART_SetConfig+0x2bc>
 8007a50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a54:	d82a      	bhi.n	8007aac <UART_SetConfig+0x2e8>
 8007a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a5a:	d00b      	beq.n	8007a74 <UART_SetConfig+0x2b0>
 8007a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a60:	d824      	bhi.n	8007aac <UART_SetConfig+0x2e8>
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d003      	beq.n	8007a6e <UART_SetConfig+0x2aa>
 8007a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a6a:	d006      	beq.n	8007a7a <UART_SetConfig+0x2b6>
 8007a6c:	e01e      	b.n	8007aac <UART_SetConfig+0x2e8>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	77fb      	strb	r3, [r7, #31]
 8007a72:	e04b      	b.n	8007b0c <UART_SetConfig+0x348>
 8007a74:	2302      	movs	r3, #2
 8007a76:	77fb      	strb	r3, [r7, #31]
 8007a78:	e048      	b.n	8007b0c <UART_SetConfig+0x348>
 8007a7a:	2304      	movs	r3, #4
 8007a7c:	77fb      	strb	r3, [r7, #31]
 8007a7e:	e045      	b.n	8007b0c <UART_SetConfig+0x348>
 8007a80:	2308      	movs	r3, #8
 8007a82:	77fb      	strb	r3, [r7, #31]
 8007a84:	e042      	b.n	8007b0c <UART_SetConfig+0x348>
 8007a86:	bf00      	nop
 8007a88:	efff69f3 	.word	0xefff69f3
 8007a8c:	40011000 	.word	0x40011000
 8007a90:	40023800 	.word	0x40023800
 8007a94:	40004400 	.word	0x40004400
 8007a98:	40004800 	.word	0x40004800
 8007a9c:	40004c00 	.word	0x40004c00
 8007aa0:	40005000 	.word	0x40005000
 8007aa4:	40011400 	.word	0x40011400
 8007aa8:	40007800 	.word	0x40007800
 8007aac:	2310      	movs	r3, #16
 8007aae:	77fb      	strb	r3, [r7, #31]
 8007ab0:	e02c      	b.n	8007b0c <UART_SetConfig+0x348>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a72      	ldr	r2, [pc, #456]	; (8007c80 <UART_SetConfig+0x4bc>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d125      	bne.n	8007b08 <UART_SetConfig+0x344>
 8007abc:	4b71      	ldr	r3, [pc, #452]	; (8007c84 <UART_SetConfig+0x4c0>)
 8007abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ac2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007ac6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007aca:	d017      	beq.n	8007afc <UART_SetConfig+0x338>
 8007acc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ad0:	d817      	bhi.n	8007b02 <UART_SetConfig+0x33e>
 8007ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ad6:	d00b      	beq.n	8007af0 <UART_SetConfig+0x32c>
 8007ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007adc:	d811      	bhi.n	8007b02 <UART_SetConfig+0x33e>
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d003      	beq.n	8007aea <UART_SetConfig+0x326>
 8007ae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ae6:	d006      	beq.n	8007af6 <UART_SetConfig+0x332>
 8007ae8:	e00b      	b.n	8007b02 <UART_SetConfig+0x33e>
 8007aea:	2300      	movs	r3, #0
 8007aec:	77fb      	strb	r3, [r7, #31]
 8007aee:	e00d      	b.n	8007b0c <UART_SetConfig+0x348>
 8007af0:	2302      	movs	r3, #2
 8007af2:	77fb      	strb	r3, [r7, #31]
 8007af4:	e00a      	b.n	8007b0c <UART_SetConfig+0x348>
 8007af6:	2304      	movs	r3, #4
 8007af8:	77fb      	strb	r3, [r7, #31]
 8007afa:	e007      	b.n	8007b0c <UART_SetConfig+0x348>
 8007afc:	2308      	movs	r3, #8
 8007afe:	77fb      	strb	r3, [r7, #31]
 8007b00:	e004      	b.n	8007b0c <UART_SetConfig+0x348>
 8007b02:	2310      	movs	r3, #16
 8007b04:	77fb      	strb	r3, [r7, #31]
 8007b06:	e001      	b.n	8007b0c <UART_SetConfig+0x348>
 8007b08:	2310      	movs	r3, #16
 8007b0a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	69db      	ldr	r3, [r3, #28]
 8007b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b14:	d15b      	bne.n	8007bce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007b16:	7ffb      	ldrb	r3, [r7, #31]
 8007b18:	2b08      	cmp	r3, #8
 8007b1a:	d828      	bhi.n	8007b6e <UART_SetConfig+0x3aa>
 8007b1c:	a201      	add	r2, pc, #4	; (adr r2, 8007b24 <UART_SetConfig+0x360>)
 8007b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b22:	bf00      	nop
 8007b24:	08007b49 	.word	0x08007b49
 8007b28:	08007b51 	.word	0x08007b51
 8007b2c:	08007b59 	.word	0x08007b59
 8007b30:	08007b6f 	.word	0x08007b6f
 8007b34:	08007b5f 	.word	0x08007b5f
 8007b38:	08007b6f 	.word	0x08007b6f
 8007b3c:	08007b6f 	.word	0x08007b6f
 8007b40:	08007b6f 	.word	0x08007b6f
 8007b44:	08007b67 	.word	0x08007b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b48:	f7fe faf6 	bl	8006138 <HAL_RCC_GetPCLK1Freq>
 8007b4c:	61b8      	str	r0, [r7, #24]
        break;
 8007b4e:	e013      	b.n	8007b78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b50:	f7fe fb06 	bl	8006160 <HAL_RCC_GetPCLK2Freq>
 8007b54:	61b8      	str	r0, [r7, #24]
        break;
 8007b56:	e00f      	b.n	8007b78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b58:	4b4b      	ldr	r3, [pc, #300]	; (8007c88 <UART_SetConfig+0x4c4>)
 8007b5a:	61bb      	str	r3, [r7, #24]
        break;
 8007b5c:	e00c      	b.n	8007b78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b5e:	f7fe f9d9 	bl	8005f14 <HAL_RCC_GetSysClockFreq>
 8007b62:	61b8      	str	r0, [r7, #24]
        break;
 8007b64:	e008      	b.n	8007b78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b6a:	61bb      	str	r3, [r7, #24]
        break;
 8007b6c:	e004      	b.n	8007b78 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	77bb      	strb	r3, [r7, #30]
        break;
 8007b76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d074      	beq.n	8007c68 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	005a      	lsls	r2, r3, #1
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	085b      	lsrs	r3, r3, #1
 8007b88:	441a      	add	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	2b0f      	cmp	r3, #15
 8007b98:	d916      	bls.n	8007bc8 <UART_SetConfig+0x404>
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ba0:	d212      	bcs.n	8007bc8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	f023 030f 	bic.w	r3, r3, #15
 8007baa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	085b      	lsrs	r3, r3, #1
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	f003 0307 	and.w	r3, r3, #7
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	89fb      	ldrh	r3, [r7, #14]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	89fa      	ldrh	r2, [r7, #14]
 8007bc4:	60da      	str	r2, [r3, #12]
 8007bc6:	e04f      	b.n	8007c68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	77bb      	strb	r3, [r7, #30]
 8007bcc:	e04c      	b.n	8007c68 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007bce:	7ffb      	ldrb	r3, [r7, #31]
 8007bd0:	2b08      	cmp	r3, #8
 8007bd2:	d828      	bhi.n	8007c26 <UART_SetConfig+0x462>
 8007bd4:	a201      	add	r2, pc, #4	; (adr r2, 8007bdc <UART_SetConfig+0x418>)
 8007bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bda:	bf00      	nop
 8007bdc:	08007c01 	.word	0x08007c01
 8007be0:	08007c09 	.word	0x08007c09
 8007be4:	08007c11 	.word	0x08007c11
 8007be8:	08007c27 	.word	0x08007c27
 8007bec:	08007c17 	.word	0x08007c17
 8007bf0:	08007c27 	.word	0x08007c27
 8007bf4:	08007c27 	.word	0x08007c27
 8007bf8:	08007c27 	.word	0x08007c27
 8007bfc:	08007c1f 	.word	0x08007c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c00:	f7fe fa9a 	bl	8006138 <HAL_RCC_GetPCLK1Freq>
 8007c04:	61b8      	str	r0, [r7, #24]
        break;
 8007c06:	e013      	b.n	8007c30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c08:	f7fe faaa 	bl	8006160 <HAL_RCC_GetPCLK2Freq>
 8007c0c:	61b8      	str	r0, [r7, #24]
        break;
 8007c0e:	e00f      	b.n	8007c30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c10:	4b1d      	ldr	r3, [pc, #116]	; (8007c88 <UART_SetConfig+0x4c4>)
 8007c12:	61bb      	str	r3, [r7, #24]
        break;
 8007c14:	e00c      	b.n	8007c30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c16:	f7fe f97d 	bl	8005f14 <HAL_RCC_GetSysClockFreq>
 8007c1a:	61b8      	str	r0, [r7, #24]
        break;
 8007c1c:	e008      	b.n	8007c30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c22:	61bb      	str	r3, [r7, #24]
        break;
 8007c24:	e004      	b.n	8007c30 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007c26:	2300      	movs	r3, #0
 8007c28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	77bb      	strb	r3, [r7, #30]
        break;
 8007c2e:	bf00      	nop
    }

    if (pclk != 0U)
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d018      	beq.n	8007c68 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	085a      	lsrs	r2, r3, #1
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	441a      	add	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	2b0f      	cmp	r3, #15
 8007c4e:	d909      	bls.n	8007c64 <UART_SetConfig+0x4a0>
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c56:	d205      	bcs.n	8007c64 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	60da      	str	r2, [r3, #12]
 8007c62:	e001      	b.n	8007c68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007c74:	7fbb      	ldrb	r3, [r7, #30]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3720      	adds	r7, #32
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	40007c00 	.word	0x40007c00
 8007c84:	40023800 	.word	0x40023800
 8007c88:	00f42400 	.word	0x00f42400

08007c8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	f003 0301 	and.w	r3, r3, #1
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00a      	beq.n	8007cb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cba:	f003 0302 	and.w	r3, r3, #2
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00a      	beq.n	8007cd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	430a      	orrs	r2, r1
 8007cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cdc:	f003 0304 	and.w	r3, r3, #4
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00a      	beq.n	8007cfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfe:	f003 0308 	and.w	r3, r3, #8
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00a      	beq.n	8007d1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	430a      	orrs	r2, r1
 8007d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d20:	f003 0310 	and.w	r3, r3, #16
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00a      	beq.n	8007d3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d42:	f003 0320 	and.w	r3, r3, #32
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	430a      	orrs	r2, r1
 8007d5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d01a      	beq.n	8007da2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	430a      	orrs	r2, r1
 8007d80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d8a:	d10a      	bne.n	8007da2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	430a      	orrs	r2, r1
 8007da0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00a      	beq.n	8007dc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	430a      	orrs	r2, r1
 8007dc2:	605a      	str	r2, [r3, #4]
  }
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af02      	add	r7, sp, #8
 8007dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007de0:	f7fa fc3e 	bl	8002660 <HAL_GetTick>
 8007de4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0308 	and.w	r3, r3, #8
 8007df0:	2b08      	cmp	r3, #8
 8007df2:	d10e      	bne.n	8007e12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007df4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f831 	bl	8007e6a <UART_WaitOnFlagUntilTimeout>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e027      	b.n	8007e62 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0304 	and.w	r3, r3, #4
 8007e1c:	2b04      	cmp	r3, #4
 8007e1e:	d10e      	bne.n	8007e3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f81b 	bl	8007e6a <UART_WaitOnFlagUntilTimeout>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e011      	b.n	8007e62 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2220      	movs	r2, #32
 8007e42:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2220      	movs	r2, #32
 8007e48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b09c      	sub	sp, #112	; 0x70
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	60f8      	str	r0, [r7, #12]
 8007e72:	60b9      	str	r1, [r7, #8]
 8007e74:	603b      	str	r3, [r7, #0]
 8007e76:	4613      	mov	r3, r2
 8007e78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e7a:	e0a7      	b.n	8007fcc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e82:	f000 80a3 	beq.w	8007fcc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e86:	f7fa fbeb 	bl	8002660 <HAL_GetTick>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d302      	bcc.n	8007e9c <UART_WaitOnFlagUntilTimeout+0x32>
 8007e96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d13f      	bne.n	8007f1c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ea4:	e853 3f00 	ldrex	r3, [r3]
 8007ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007eb0:	667b      	str	r3, [r7, #100]	; 0x64
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007eba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ebc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ec0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ec2:	e841 2300 	strex	r3, r2, [r1]
 8007ec6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1e6      	bne.n	8007e9c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	3308      	adds	r3, #8
 8007ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ed8:	e853 3f00 	ldrex	r3, [r3]
 8007edc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee0:	f023 0301 	bic.w	r3, r3, #1
 8007ee4:	663b      	str	r3, [r7, #96]	; 0x60
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3308      	adds	r3, #8
 8007eec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007eee:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ef0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ef4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ef6:	e841 2300 	strex	r3, r2, [r1]
 8007efa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1e5      	bne.n	8007ece <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2220      	movs	r2, #32
 8007f06:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2220      	movs	r2, #32
 8007f0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e068      	b.n	8007fee <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 0304 	and.w	r3, r3, #4
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d050      	beq.n	8007fcc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	69db      	ldr	r3, [r3, #28]
 8007f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f38:	d148      	bne.n	8007fcc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f42:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4c:	e853 3f00 	ldrex	r3, [r3]
 8007f50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f62:	637b      	str	r3, [r7, #52]	; 0x34
 8007f64:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f6a:	e841 2300 	strex	r3, r2, [r1]
 8007f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1e6      	bne.n	8007f44 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	3308      	adds	r3, #8
 8007f7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	e853 3f00 	ldrex	r3, [r3]
 8007f84:	613b      	str	r3, [r7, #16]
   return(result);
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	f023 0301 	bic.w	r3, r3, #1
 8007f8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	3308      	adds	r3, #8
 8007f94:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f96:	623a      	str	r2, [r7, #32]
 8007f98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9a:	69f9      	ldr	r1, [r7, #28]
 8007f9c:	6a3a      	ldr	r2, [r7, #32]
 8007f9e:	e841 2300 	strex	r3, r2, [r1]
 8007fa2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1e5      	bne.n	8007f76 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2220      	movs	r2, #32
 8007fae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2220      	movs	r2, #32
 8007fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2220      	movs	r2, #32
 8007fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e010      	b.n	8007fee <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	69da      	ldr	r2, [r3, #28]
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	bf0c      	ite	eq
 8007fdc:	2301      	moveq	r3, #1
 8007fde:	2300      	movne	r3, #0
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	79fb      	ldrb	r3, [r7, #7]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	f43f af48 	beq.w	8007e7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3770      	adds	r7, #112	; 0x70
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b095      	sub	sp, #84	; 0x54
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008006:	e853 3f00 	ldrex	r3, [r3]
 800800a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008012:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	461a      	mov	r2, r3
 800801a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800801c:	643b      	str	r3, [r7, #64]	; 0x40
 800801e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008020:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008022:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008024:	e841 2300 	strex	r3, r2, [r1]
 8008028:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800802a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1e6      	bne.n	8007ffe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	3308      	adds	r3, #8
 8008036:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008038:	6a3b      	ldr	r3, [r7, #32]
 800803a:	e853 3f00 	ldrex	r3, [r3]
 800803e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	f023 0301 	bic.w	r3, r3, #1
 8008046:	64bb      	str	r3, [r7, #72]	; 0x48
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3308      	adds	r3, #8
 800804e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008050:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008052:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008054:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008058:	e841 2300 	strex	r3, r2, [r1]
 800805c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800805e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008060:	2b00      	cmp	r3, #0
 8008062:	d1e5      	bne.n	8008030 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008068:	2b01      	cmp	r3, #1
 800806a:	d118      	bne.n	800809e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	e853 3f00 	ldrex	r3, [r3]
 8008078:	60bb      	str	r3, [r7, #8]
   return(result);
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	f023 0310 	bic.w	r3, r3, #16
 8008080:	647b      	str	r3, [r7, #68]	; 0x44
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800808a:	61bb      	str	r3, [r7, #24]
 800808c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808e:	6979      	ldr	r1, [r7, #20]
 8008090:	69ba      	ldr	r2, [r7, #24]
 8008092:	e841 2300 	strex	r3, r2, [r1]
 8008096:	613b      	str	r3, [r7, #16]
   return(result);
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1e6      	bne.n	800806c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2220      	movs	r2, #32
 80080a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80080b2:	bf00      	nop
 80080b4:	3754      	adds	r7, #84	; 0x54
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b084      	sub	sp, #16
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	f7ff fb51 	bl	8007784 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080e2:	bf00      	nop
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b088      	sub	sp, #32
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	e853 3f00 	ldrex	r3, [r3]
 80080fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008106:	61fb      	str	r3, [r7, #28]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	461a      	mov	r2, r3
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	61bb      	str	r3, [r7, #24]
 8008112:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008114:	6979      	ldr	r1, [r7, #20]
 8008116:	69ba      	ldr	r2, [r7, #24]
 8008118:	e841 2300 	strex	r3, r2, [r1]
 800811c:	613b      	str	r3, [r7, #16]
   return(result);
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1e6      	bne.n	80080f2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2220      	movs	r2, #32
 8008128:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f7ff fb1d 	bl	8007770 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008136:	bf00      	nop
 8008138:	3720      	adds	r7, #32
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
	...

08008140 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008140:	b084      	sub	sp, #16
 8008142:	b580      	push	{r7, lr}
 8008144:	b084      	sub	sp, #16
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	f107 001c 	add.w	r0, r7, #28
 800814e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008154:	2b01      	cmp	r3, #1
 8008156:	d120      	bne.n	800819a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	68da      	ldr	r2, [r3, #12]
 8008168:	4b20      	ldr	r3, [pc, #128]	; (80081ec <USB_CoreInit+0xac>)
 800816a:	4013      	ands	r3, r2
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800817c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800817e:	2b01      	cmp	r3, #1
 8008180:	d105      	bne.n	800818e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fa96 	bl	80086c0 <USB_CoreReset>
 8008194:	4603      	mov	r3, r0
 8008196:	73fb      	strb	r3, [r7, #15]
 8008198:	e010      	b.n	80081bc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fa8a 	bl	80086c0 <USB_CoreReset>
 80081ac:	4603      	mov	r3, r0
 80081ae:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80081bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d10b      	bne.n	80081da <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	f043 0206 	orr.w	r2, r3, #6
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	f043 0220 	orr.w	r2, r3, #32
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80081da:	7bfb      	ldrb	r3, [r7, #15]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081e6:	b004      	add	sp, #16
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	ffbdffbf 	.word	0xffbdffbf

080081f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	f023 0201 	bic.w	r2, r3, #1
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b084      	sub	sp, #16
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	460b      	mov	r3, r1
 800821c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800821e:	2300      	movs	r3, #0
 8008220:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800822e:	78fb      	ldrb	r3, [r7, #3]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d115      	bne.n	8008260 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008240:	2001      	movs	r0, #1
 8008242:	f7fa fa19 	bl	8002678 <HAL_Delay>
      ms++;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	3301      	adds	r3, #1
 800824a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fa29 	bl	80086a4 <USB_GetMode>
 8008252:	4603      	mov	r3, r0
 8008254:	2b01      	cmp	r3, #1
 8008256:	d01e      	beq.n	8008296 <USB_SetCurrentMode+0x84>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2b31      	cmp	r3, #49	; 0x31
 800825c:	d9f0      	bls.n	8008240 <USB_SetCurrentMode+0x2e>
 800825e:	e01a      	b.n	8008296 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d115      	bne.n	8008292 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008272:	2001      	movs	r0, #1
 8008274:	f7fa fa00 	bl	8002678 <HAL_Delay>
      ms++;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	3301      	adds	r3, #1
 800827c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fa10 	bl	80086a4 <USB_GetMode>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d005      	beq.n	8008296 <USB_SetCurrentMode+0x84>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2b31      	cmp	r3, #49	; 0x31
 800828e:	d9f0      	bls.n	8008272 <USB_SetCurrentMode+0x60>
 8008290:	e001      	b.n	8008296 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e005      	b.n	80082a2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2b32      	cmp	r3, #50	; 0x32
 800829a:	d101      	bne.n	80082a0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	e000      	b.n	80082a2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
	...

080082ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80082ac:	b084      	sub	sp, #16
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b086      	sub	sp, #24
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
 80082b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80082ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80082c6:	2300      	movs	r3, #0
 80082c8:	613b      	str	r3, [r7, #16]
 80082ca:	e009      	b.n	80082e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	3340      	adds	r3, #64	; 0x40
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4413      	add	r3, r2
 80082d6:	2200      	movs	r2, #0
 80082d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	3301      	adds	r3, #1
 80082de:	613b      	str	r3, [r7, #16]
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	2b0e      	cmp	r3, #14
 80082e4:	d9f2      	bls.n	80082cc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80082e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d11c      	bne.n	8008326 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082fa:	f043 0302 	orr.w	r3, r3, #2
 80082fe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008304:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	e005      	b.n	8008332 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008338:	461a      	mov	r2, r3
 800833a:	2300      	movs	r3, #0
 800833c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008344:	4619      	mov	r1, r3
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800834c:	461a      	mov	r2, r3
 800834e:	680b      	ldr	r3, [r1, #0]
 8008350:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008354:	2b01      	cmp	r3, #1
 8008356:	d10c      	bne.n	8008372 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835a:	2b00      	cmp	r3, #0
 800835c:	d104      	bne.n	8008368 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800835e:	2100      	movs	r1, #0
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f965 	bl	8008630 <USB_SetDevSpeed>
 8008366:	e008      	b.n	800837a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008368:	2101      	movs	r1, #1
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f960 	bl	8008630 <USB_SetDevSpeed>
 8008370:	e003      	b.n	800837a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008372:	2103      	movs	r1, #3
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 f95b 	bl	8008630 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800837a:	2110      	movs	r1, #16
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 f8f3 	bl	8008568 <USB_FlushTxFifo>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d001      	beq.n	800838c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f91f 	bl	80085d0 <USB_FlushRxFifo>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d001      	beq.n	800839c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a2:	461a      	mov	r2, r3
 80083a4:	2300      	movs	r3, #0
 80083a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ae:	461a      	mov	r2, r3
 80083b0:	2300      	movs	r3, #0
 80083b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ba:	461a      	mov	r2, r3
 80083bc:	2300      	movs	r3, #0
 80083be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083c0:	2300      	movs	r3, #0
 80083c2:	613b      	str	r3, [r7, #16]
 80083c4:	e043      	b.n	800844e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	015a      	lsls	r2, r3, #5
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	4413      	add	r3, r2
 80083ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083dc:	d118      	bne.n	8008410 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10a      	bne.n	80083fa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	015a      	lsls	r2, r3, #5
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	4413      	add	r3, r2
 80083ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f0:	461a      	mov	r2, r3
 80083f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80083f6:	6013      	str	r3, [r2, #0]
 80083f8:	e013      	b.n	8008422 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	015a      	lsls	r2, r3, #5
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	4413      	add	r3, r2
 8008402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008406:	461a      	mov	r2, r3
 8008408:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800840c:	6013      	str	r3, [r2, #0]
 800840e:	e008      	b.n	8008422 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	015a      	lsls	r2, r3, #5
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	4413      	add	r3, r2
 8008418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800841c:	461a      	mov	r2, r3
 800841e:	2300      	movs	r3, #0
 8008420:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	015a      	lsls	r2, r3, #5
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	4413      	add	r3, r2
 800842a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800842e:	461a      	mov	r2, r3
 8008430:	2300      	movs	r3, #0
 8008432:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	015a      	lsls	r2, r3, #5
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	4413      	add	r3, r2
 800843c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008440:	461a      	mov	r2, r3
 8008442:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008446:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	3301      	adds	r3, #1
 800844c:	613b      	str	r3, [r7, #16]
 800844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008450:	693a      	ldr	r2, [r7, #16]
 8008452:	429a      	cmp	r2, r3
 8008454:	d3b7      	bcc.n	80083c6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008456:	2300      	movs	r3, #0
 8008458:	613b      	str	r3, [r7, #16]
 800845a:	e043      	b.n	80084e4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	015a      	lsls	r2, r3, #5
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	4413      	add	r3, r2
 8008464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800846e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008472:	d118      	bne.n	80084a6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10a      	bne.n	8008490 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	015a      	lsls	r2, r3, #5
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	4413      	add	r3, r2
 8008482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008486:	461a      	mov	r2, r3
 8008488:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800848c:	6013      	str	r3, [r2, #0]
 800848e:	e013      	b.n	80084b8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	015a      	lsls	r2, r3, #5
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	4413      	add	r3, r2
 8008498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800849c:	461a      	mov	r2, r3
 800849e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80084a2:	6013      	str	r3, [r2, #0]
 80084a4:	e008      	b.n	80084b8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b2:	461a      	mov	r2, r3
 80084b4:	2300      	movs	r3, #0
 80084b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	015a      	lsls	r2, r3, #5
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	4413      	add	r3, r2
 80084c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c4:	461a      	mov	r2, r3
 80084c6:	2300      	movs	r3, #0
 80084c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	015a      	lsls	r2, r3, #5
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	4413      	add	r3, r2
 80084d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084d6:	461a      	mov	r2, r3
 80084d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	3301      	adds	r3, #1
 80084e2:	613b      	str	r3, [r7, #16]
 80084e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d3b7      	bcc.n	800845c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800850c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008510:	2b00      	cmp	r3, #0
 8008512:	d105      	bne.n	8008520 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	f043 0210 	orr.w	r2, r3, #16
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	699a      	ldr	r2, [r3, #24]
 8008524:	4b0e      	ldr	r3, [pc, #56]	; (8008560 <USB_DevInit+0x2b4>)
 8008526:	4313      	orrs	r3, r2
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800852c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800852e:	2b00      	cmp	r3, #0
 8008530:	d005      	beq.n	800853e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	f043 0208 	orr.w	r2, r3, #8
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800853e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008540:	2b01      	cmp	r3, #1
 8008542:	d105      	bne.n	8008550 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	699a      	ldr	r2, [r3, #24]
 8008548:	4b06      	ldr	r3, [pc, #24]	; (8008564 <USB_DevInit+0x2b8>)
 800854a:	4313      	orrs	r3, r2
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008550:	7dfb      	ldrb	r3, [r7, #23]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3718      	adds	r7, #24
 8008556:	46bd      	mov	sp, r7
 8008558:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800855c:	b004      	add	sp, #16
 800855e:	4770      	bx	lr
 8008560:	803c3800 	.word	0x803c3800
 8008564:	40000004 	.word	0x40000004

08008568 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008572:	2300      	movs	r3, #0
 8008574:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	3301      	adds	r3, #1
 800857a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	4a13      	ldr	r2, [pc, #76]	; (80085cc <USB_FlushTxFifo+0x64>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d901      	bls.n	8008588 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008584:	2303      	movs	r3, #3
 8008586:	e01b      	b.n	80085c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	2b00      	cmp	r3, #0
 800858e:	daf2      	bge.n	8008576 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008590:	2300      	movs	r3, #0
 8008592:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	019b      	lsls	r3, r3, #6
 8008598:	f043 0220 	orr.w	r2, r3, #32
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	3301      	adds	r3, #1
 80085a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	4a08      	ldr	r2, [pc, #32]	; (80085cc <USB_FlushTxFifo+0x64>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d901      	bls.n	80085b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80085ae:	2303      	movs	r3, #3
 80085b0:	e006      	b.n	80085c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	f003 0320 	and.w	r3, r3, #32
 80085ba:	2b20      	cmp	r3, #32
 80085bc:	d0f0      	beq.n	80085a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3714      	adds	r7, #20
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr
 80085cc:	00030d40 	.word	0x00030d40

080085d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085d8:	2300      	movs	r3, #0
 80085da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	3301      	adds	r3, #1
 80085e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	4a11      	ldr	r2, [pc, #68]	; (800862c <USB_FlushRxFifo+0x5c>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d901      	bls.n	80085ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e018      	b.n	8008620 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	daf2      	bge.n	80085dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80085f6:	2300      	movs	r3, #0
 80085f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2210      	movs	r2, #16
 80085fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	3301      	adds	r3, #1
 8008604:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	4a08      	ldr	r2, [pc, #32]	; (800862c <USB_FlushRxFifo+0x5c>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d901      	bls.n	8008612 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800860e:	2303      	movs	r3, #3
 8008610:	e006      	b.n	8008620 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	f003 0310 	and.w	r3, r3, #16
 800861a:	2b10      	cmp	r3, #16
 800861c:	d0f0      	beq.n	8008600 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr
 800862c:	00030d40 	.word	0x00030d40

08008630 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	460b      	mov	r3, r1
 800863a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	78fb      	ldrb	r3, [r7, #3]
 800864a:	68f9      	ldr	r1, [r7, #12]
 800864c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008650:	4313      	orrs	r3, r2
 8008652:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3714      	adds	r7, #20
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008662:	b480      	push	{r7}
 8008664:	b085      	sub	sp, #20
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800867c:	f023 0303 	bic.w	r3, r3, #3
 8008680:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008690:	f043 0302 	orr.w	r3, r3, #2
 8008694:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3714      	adds	r7, #20
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	695b      	ldr	r3, [r3, #20]
 80086b0:	f003 0301 	and.w	r3, r3, #1
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086c8:	2300      	movs	r3, #0
 80086ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	3301      	adds	r3, #1
 80086d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	4a13      	ldr	r2, [pc, #76]	; (8008724 <USB_CoreReset+0x64>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d901      	bls.n	80086de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	e01b      	b.n	8008716 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	daf2      	bge.n	80086cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80086e6:	2300      	movs	r3, #0
 80086e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	f043 0201 	orr.w	r2, r3, #1
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	3301      	adds	r3, #1
 80086fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	4a09      	ldr	r2, [pc, #36]	; (8008724 <USB_CoreReset+0x64>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d901      	bls.n	8008708 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008704:	2303      	movs	r3, #3
 8008706:	e006      	b.n	8008716 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	f003 0301 	and.w	r3, r3, #1
 8008710:	2b01      	cmp	r3, #1
 8008712:	d0f0      	beq.n	80086f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3714      	adds	r7, #20
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	00030d40 	.word	0x00030d40

08008728 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800872e:	4b98      	ldr	r3, [pc, #608]	; (8008990 <MX_LWIP_Init+0x268>)
 8008730:	22c0      	movs	r2, #192	; 0xc0
 8008732:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8008734:	4b96      	ldr	r3, [pc, #600]	; (8008990 <MX_LWIP_Init+0x268>)
 8008736:	22a8      	movs	r2, #168	; 0xa8
 8008738:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800873a:	4b95      	ldr	r3, [pc, #596]	; (8008990 <MX_LWIP_Init+0x268>)
 800873c:	2200      	movs	r2, #0
 800873e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 20;
 8008740:	4b93      	ldr	r3, [pc, #588]	; (8008990 <MX_LWIP_Init+0x268>)
 8008742:	2214      	movs	r2, #20
 8008744:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8008746:	4b93      	ldr	r3, [pc, #588]	; (8008994 <MX_LWIP_Init+0x26c>)
 8008748:	22ff      	movs	r2, #255	; 0xff
 800874a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800874c:	4b91      	ldr	r3, [pc, #580]	; (8008994 <MX_LWIP_Init+0x26c>)
 800874e:	22ff      	movs	r2, #255	; 0xff
 8008750:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8008752:	4b90      	ldr	r3, [pc, #576]	; (8008994 <MX_LWIP_Init+0x26c>)
 8008754:	22ff      	movs	r2, #255	; 0xff
 8008756:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8008758:	4b8e      	ldr	r3, [pc, #568]	; (8008994 <MX_LWIP_Init+0x26c>)
 800875a:	2200      	movs	r2, #0
 800875c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800875e:	4b8e      	ldr	r3, [pc, #568]	; (8008998 <MX_LWIP_Init+0x270>)
 8008760:	22c0      	movs	r2, #192	; 0xc0
 8008762:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8008764:	4b8c      	ldr	r3, [pc, #560]	; (8008998 <MX_LWIP_Init+0x270>)
 8008766:	22a8      	movs	r2, #168	; 0xa8
 8008768:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800876a:	4b8b      	ldr	r3, [pc, #556]	; (8008998 <MX_LWIP_Init+0x270>)
 800876c:	2200      	movs	r2, #0
 800876e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8008770:	4b89      	ldr	r3, [pc, #548]	; (8008998 <MX_LWIP_Init+0x270>)
 8008772:	2201      	movs	r2, #1
 8008774:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8008776:	2100      	movs	r1, #0
 8008778:	2000      	movs	r0, #0
 800877a:	f008 f907 	bl	801098c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800877e:	4b84      	ldr	r3, [pc, #528]	; (8008990 <MX_LWIP_Init+0x268>)
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	061a      	lsls	r2, r3, #24
 8008784:	4b82      	ldr	r3, [pc, #520]	; (8008990 <MX_LWIP_Init+0x268>)
 8008786:	785b      	ldrb	r3, [r3, #1]
 8008788:	041b      	lsls	r3, r3, #16
 800878a:	431a      	orrs	r2, r3
 800878c:	4b80      	ldr	r3, [pc, #512]	; (8008990 <MX_LWIP_Init+0x268>)
 800878e:	789b      	ldrb	r3, [r3, #2]
 8008790:	021b      	lsls	r3, r3, #8
 8008792:	4313      	orrs	r3, r2
 8008794:	4a7e      	ldr	r2, [pc, #504]	; (8008990 <MX_LWIP_Init+0x268>)
 8008796:	78d2      	ldrb	r2, [r2, #3]
 8008798:	4313      	orrs	r3, r2
 800879a:	061a      	lsls	r2, r3, #24
 800879c:	4b7c      	ldr	r3, [pc, #496]	; (8008990 <MX_LWIP_Init+0x268>)
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	0619      	lsls	r1, r3, #24
 80087a2:	4b7b      	ldr	r3, [pc, #492]	; (8008990 <MX_LWIP_Init+0x268>)
 80087a4:	785b      	ldrb	r3, [r3, #1]
 80087a6:	041b      	lsls	r3, r3, #16
 80087a8:	4319      	orrs	r1, r3
 80087aa:	4b79      	ldr	r3, [pc, #484]	; (8008990 <MX_LWIP_Init+0x268>)
 80087ac:	789b      	ldrb	r3, [r3, #2]
 80087ae:	021b      	lsls	r3, r3, #8
 80087b0:	430b      	orrs	r3, r1
 80087b2:	4977      	ldr	r1, [pc, #476]	; (8008990 <MX_LWIP_Init+0x268>)
 80087b4:	78c9      	ldrb	r1, [r1, #3]
 80087b6:	430b      	orrs	r3, r1
 80087b8:	021b      	lsls	r3, r3, #8
 80087ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80087be:	431a      	orrs	r2, r3
 80087c0:	4b73      	ldr	r3, [pc, #460]	; (8008990 <MX_LWIP_Init+0x268>)
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	0619      	lsls	r1, r3, #24
 80087c6:	4b72      	ldr	r3, [pc, #456]	; (8008990 <MX_LWIP_Init+0x268>)
 80087c8:	785b      	ldrb	r3, [r3, #1]
 80087ca:	041b      	lsls	r3, r3, #16
 80087cc:	4319      	orrs	r1, r3
 80087ce:	4b70      	ldr	r3, [pc, #448]	; (8008990 <MX_LWIP_Init+0x268>)
 80087d0:	789b      	ldrb	r3, [r3, #2]
 80087d2:	021b      	lsls	r3, r3, #8
 80087d4:	430b      	orrs	r3, r1
 80087d6:	496e      	ldr	r1, [pc, #440]	; (8008990 <MX_LWIP_Init+0x268>)
 80087d8:	78c9      	ldrb	r1, [r1, #3]
 80087da:	430b      	orrs	r3, r1
 80087dc:	0a1b      	lsrs	r3, r3, #8
 80087de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80087e2:	431a      	orrs	r2, r3
 80087e4:	4b6a      	ldr	r3, [pc, #424]	; (8008990 <MX_LWIP_Init+0x268>)
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	0619      	lsls	r1, r3, #24
 80087ea:	4b69      	ldr	r3, [pc, #420]	; (8008990 <MX_LWIP_Init+0x268>)
 80087ec:	785b      	ldrb	r3, [r3, #1]
 80087ee:	041b      	lsls	r3, r3, #16
 80087f0:	4319      	orrs	r1, r3
 80087f2:	4b67      	ldr	r3, [pc, #412]	; (8008990 <MX_LWIP_Init+0x268>)
 80087f4:	789b      	ldrb	r3, [r3, #2]
 80087f6:	021b      	lsls	r3, r3, #8
 80087f8:	430b      	orrs	r3, r1
 80087fa:	4965      	ldr	r1, [pc, #404]	; (8008990 <MX_LWIP_Init+0x268>)
 80087fc:	78c9      	ldrb	r1, [r1, #3]
 80087fe:	430b      	orrs	r3, r1
 8008800:	0e1b      	lsrs	r3, r3, #24
 8008802:	4313      	orrs	r3, r2
 8008804:	4a65      	ldr	r2, [pc, #404]	; (800899c <MX_LWIP_Init+0x274>)
 8008806:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008808:	4b62      	ldr	r3, [pc, #392]	; (8008994 <MX_LWIP_Init+0x26c>)
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	061a      	lsls	r2, r3, #24
 800880e:	4b61      	ldr	r3, [pc, #388]	; (8008994 <MX_LWIP_Init+0x26c>)
 8008810:	785b      	ldrb	r3, [r3, #1]
 8008812:	041b      	lsls	r3, r3, #16
 8008814:	431a      	orrs	r2, r3
 8008816:	4b5f      	ldr	r3, [pc, #380]	; (8008994 <MX_LWIP_Init+0x26c>)
 8008818:	789b      	ldrb	r3, [r3, #2]
 800881a:	021b      	lsls	r3, r3, #8
 800881c:	4313      	orrs	r3, r2
 800881e:	4a5d      	ldr	r2, [pc, #372]	; (8008994 <MX_LWIP_Init+0x26c>)
 8008820:	78d2      	ldrb	r2, [r2, #3]
 8008822:	4313      	orrs	r3, r2
 8008824:	061a      	lsls	r2, r3, #24
 8008826:	4b5b      	ldr	r3, [pc, #364]	; (8008994 <MX_LWIP_Init+0x26c>)
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	0619      	lsls	r1, r3, #24
 800882c:	4b59      	ldr	r3, [pc, #356]	; (8008994 <MX_LWIP_Init+0x26c>)
 800882e:	785b      	ldrb	r3, [r3, #1]
 8008830:	041b      	lsls	r3, r3, #16
 8008832:	4319      	orrs	r1, r3
 8008834:	4b57      	ldr	r3, [pc, #348]	; (8008994 <MX_LWIP_Init+0x26c>)
 8008836:	789b      	ldrb	r3, [r3, #2]
 8008838:	021b      	lsls	r3, r3, #8
 800883a:	430b      	orrs	r3, r1
 800883c:	4955      	ldr	r1, [pc, #340]	; (8008994 <MX_LWIP_Init+0x26c>)
 800883e:	78c9      	ldrb	r1, [r1, #3]
 8008840:	430b      	orrs	r3, r1
 8008842:	021b      	lsls	r3, r3, #8
 8008844:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008848:	431a      	orrs	r2, r3
 800884a:	4b52      	ldr	r3, [pc, #328]	; (8008994 <MX_LWIP_Init+0x26c>)
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	0619      	lsls	r1, r3, #24
 8008850:	4b50      	ldr	r3, [pc, #320]	; (8008994 <MX_LWIP_Init+0x26c>)
 8008852:	785b      	ldrb	r3, [r3, #1]
 8008854:	041b      	lsls	r3, r3, #16
 8008856:	4319      	orrs	r1, r3
 8008858:	4b4e      	ldr	r3, [pc, #312]	; (8008994 <MX_LWIP_Init+0x26c>)
 800885a:	789b      	ldrb	r3, [r3, #2]
 800885c:	021b      	lsls	r3, r3, #8
 800885e:	430b      	orrs	r3, r1
 8008860:	494c      	ldr	r1, [pc, #304]	; (8008994 <MX_LWIP_Init+0x26c>)
 8008862:	78c9      	ldrb	r1, [r1, #3]
 8008864:	430b      	orrs	r3, r1
 8008866:	0a1b      	lsrs	r3, r3, #8
 8008868:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800886c:	431a      	orrs	r2, r3
 800886e:	4b49      	ldr	r3, [pc, #292]	; (8008994 <MX_LWIP_Init+0x26c>)
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	0619      	lsls	r1, r3, #24
 8008874:	4b47      	ldr	r3, [pc, #284]	; (8008994 <MX_LWIP_Init+0x26c>)
 8008876:	785b      	ldrb	r3, [r3, #1]
 8008878:	041b      	lsls	r3, r3, #16
 800887a:	4319      	orrs	r1, r3
 800887c:	4b45      	ldr	r3, [pc, #276]	; (8008994 <MX_LWIP_Init+0x26c>)
 800887e:	789b      	ldrb	r3, [r3, #2]
 8008880:	021b      	lsls	r3, r3, #8
 8008882:	430b      	orrs	r3, r1
 8008884:	4943      	ldr	r1, [pc, #268]	; (8008994 <MX_LWIP_Init+0x26c>)
 8008886:	78c9      	ldrb	r1, [r1, #3]
 8008888:	430b      	orrs	r3, r1
 800888a:	0e1b      	lsrs	r3, r3, #24
 800888c:	4313      	orrs	r3, r2
 800888e:	4a44      	ldr	r2, [pc, #272]	; (80089a0 <MX_LWIP_Init+0x278>)
 8008890:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8008892:	4b41      	ldr	r3, [pc, #260]	; (8008998 <MX_LWIP_Init+0x270>)
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	061a      	lsls	r2, r3, #24
 8008898:	4b3f      	ldr	r3, [pc, #252]	; (8008998 <MX_LWIP_Init+0x270>)
 800889a:	785b      	ldrb	r3, [r3, #1]
 800889c:	041b      	lsls	r3, r3, #16
 800889e:	431a      	orrs	r2, r3
 80088a0:	4b3d      	ldr	r3, [pc, #244]	; (8008998 <MX_LWIP_Init+0x270>)
 80088a2:	789b      	ldrb	r3, [r3, #2]
 80088a4:	021b      	lsls	r3, r3, #8
 80088a6:	4313      	orrs	r3, r2
 80088a8:	4a3b      	ldr	r2, [pc, #236]	; (8008998 <MX_LWIP_Init+0x270>)
 80088aa:	78d2      	ldrb	r2, [r2, #3]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	061a      	lsls	r2, r3, #24
 80088b0:	4b39      	ldr	r3, [pc, #228]	; (8008998 <MX_LWIP_Init+0x270>)
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	0619      	lsls	r1, r3, #24
 80088b6:	4b38      	ldr	r3, [pc, #224]	; (8008998 <MX_LWIP_Init+0x270>)
 80088b8:	785b      	ldrb	r3, [r3, #1]
 80088ba:	041b      	lsls	r3, r3, #16
 80088bc:	4319      	orrs	r1, r3
 80088be:	4b36      	ldr	r3, [pc, #216]	; (8008998 <MX_LWIP_Init+0x270>)
 80088c0:	789b      	ldrb	r3, [r3, #2]
 80088c2:	021b      	lsls	r3, r3, #8
 80088c4:	430b      	orrs	r3, r1
 80088c6:	4934      	ldr	r1, [pc, #208]	; (8008998 <MX_LWIP_Init+0x270>)
 80088c8:	78c9      	ldrb	r1, [r1, #3]
 80088ca:	430b      	orrs	r3, r1
 80088cc:	021b      	lsls	r3, r3, #8
 80088ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80088d2:	431a      	orrs	r2, r3
 80088d4:	4b30      	ldr	r3, [pc, #192]	; (8008998 <MX_LWIP_Init+0x270>)
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	0619      	lsls	r1, r3, #24
 80088da:	4b2f      	ldr	r3, [pc, #188]	; (8008998 <MX_LWIP_Init+0x270>)
 80088dc:	785b      	ldrb	r3, [r3, #1]
 80088de:	041b      	lsls	r3, r3, #16
 80088e0:	4319      	orrs	r1, r3
 80088e2:	4b2d      	ldr	r3, [pc, #180]	; (8008998 <MX_LWIP_Init+0x270>)
 80088e4:	789b      	ldrb	r3, [r3, #2]
 80088e6:	021b      	lsls	r3, r3, #8
 80088e8:	430b      	orrs	r3, r1
 80088ea:	492b      	ldr	r1, [pc, #172]	; (8008998 <MX_LWIP_Init+0x270>)
 80088ec:	78c9      	ldrb	r1, [r1, #3]
 80088ee:	430b      	orrs	r3, r1
 80088f0:	0a1b      	lsrs	r3, r3, #8
 80088f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80088f6:	431a      	orrs	r2, r3
 80088f8:	4b27      	ldr	r3, [pc, #156]	; (8008998 <MX_LWIP_Init+0x270>)
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	0619      	lsls	r1, r3, #24
 80088fe:	4b26      	ldr	r3, [pc, #152]	; (8008998 <MX_LWIP_Init+0x270>)
 8008900:	785b      	ldrb	r3, [r3, #1]
 8008902:	041b      	lsls	r3, r3, #16
 8008904:	4319      	orrs	r1, r3
 8008906:	4b24      	ldr	r3, [pc, #144]	; (8008998 <MX_LWIP_Init+0x270>)
 8008908:	789b      	ldrb	r3, [r3, #2]
 800890a:	021b      	lsls	r3, r3, #8
 800890c:	430b      	orrs	r3, r1
 800890e:	4922      	ldr	r1, [pc, #136]	; (8008998 <MX_LWIP_Init+0x270>)
 8008910:	78c9      	ldrb	r1, [r1, #3]
 8008912:	430b      	orrs	r3, r1
 8008914:	0e1b      	lsrs	r3, r3, #24
 8008916:	4313      	orrs	r3, r2
 8008918:	4a22      	ldr	r2, [pc, #136]	; (80089a4 <MX_LWIP_Init+0x27c>)
 800891a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800891c:	4b22      	ldr	r3, [pc, #136]	; (80089a8 <MX_LWIP_Init+0x280>)
 800891e:	9302      	str	r3, [sp, #8]
 8008920:	4b22      	ldr	r3, [pc, #136]	; (80089ac <MX_LWIP_Init+0x284>)
 8008922:	9301      	str	r3, [sp, #4]
 8008924:	2300      	movs	r3, #0
 8008926:	9300      	str	r3, [sp, #0]
 8008928:	4b1e      	ldr	r3, [pc, #120]	; (80089a4 <MX_LWIP_Init+0x27c>)
 800892a:	4a1d      	ldr	r2, [pc, #116]	; (80089a0 <MX_LWIP_Init+0x278>)
 800892c:	491b      	ldr	r1, [pc, #108]	; (800899c <MX_LWIP_Init+0x274>)
 800892e:	4820      	ldr	r0, [pc, #128]	; (80089b0 <MX_LWIP_Init+0x288>)
 8008930:	f008 fdf6 	bl	8011520 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008934:	481e      	ldr	r0, [pc, #120]	; (80089b0 <MX_LWIP_Init+0x288>)
 8008936:	f008 ffa5 	bl	8011884 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800893a:	4b1d      	ldr	r3, [pc, #116]	; (80089b0 <MX_LWIP_Init+0x288>)
 800893c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008940:	089b      	lsrs	r3, r3, #2
 8008942:	f003 0301 	and.w	r3, r3, #1
 8008946:	b2db      	uxtb	r3, r3
 8008948:	2b00      	cmp	r3, #0
 800894a:	d003      	beq.n	8008954 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800894c:	4818      	ldr	r0, [pc, #96]	; (80089b0 <MX_LWIP_Init+0x288>)
 800894e:	f008 ffa9 	bl	80118a4 <netif_set_up>
 8008952:	e002      	b.n	800895a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8008954:	4816      	ldr	r0, [pc, #88]	; (80089b0 <MX_LWIP_Init+0x288>)
 8008956:	f009 f811 	bl	801197c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800895a:	4916      	ldr	r1, [pc, #88]	; (80089b4 <MX_LWIP_Init+0x28c>)
 800895c:	4814      	ldr	r0, [pc, #80]	; (80089b0 <MX_LWIP_Init+0x288>)
 800895e:	f009 f8a3 	bl	8011aa8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8008962:	2224      	movs	r2, #36	; 0x24
 8008964:	2100      	movs	r1, #0
 8008966:	4814      	ldr	r0, [pc, #80]	; (80089b8 <MX_LWIP_Init+0x290>)
 8008968:	f013 f80c 	bl	801b984 <memset>
  attributes.name = "EthLink";
 800896c:	4b12      	ldr	r3, [pc, #72]	; (80089b8 <MX_LWIP_Init+0x290>)
 800896e:	4a13      	ldr	r2, [pc, #76]	; (80089bc <MX_LWIP_Init+0x294>)
 8008970:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8008972:	4b11      	ldr	r3, [pc, #68]	; (80089b8 <MX_LWIP_Init+0x290>)
 8008974:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008978:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800897a:	4b0f      	ldr	r3, [pc, #60]	; (80089b8 <MX_LWIP_Init+0x290>)
 800897c:	2210      	movs	r2, #16
 800897e:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8008980:	4a0d      	ldr	r2, [pc, #52]	; (80089b8 <MX_LWIP_Init+0x290>)
 8008982:	490b      	ldr	r1, [pc, #44]	; (80089b0 <MX_LWIP_Init+0x288>)
 8008984:	480e      	ldr	r0, [pc, #56]	; (80089c0 <MX_LWIP_Init+0x298>)
 8008986:	f000 fda3 	bl	80094d0 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800898a:	bf00      	nop
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	200044d0 	.word	0x200044d0
 8008994:	200044d4 	.word	0x200044d4
 8008998:	200044d8 	.word	0x200044d8
 800899c:	200044c4 	.word	0x200044c4
 80089a0:	200044c8 	.word	0x200044c8
 80089a4:	200044cc 	.word	0x200044cc
 80089a8:	0801089d 	.word	0x0801089d
 80089ac:	08008ec1 	.word	0x08008ec1
 80089b0:	20004490 	.word	0x20004490
 80089b4:	080089c5 	.word	0x080089c5
 80089b8:	200044dc 	.word	0x200044dc
 80089bc:	0801ce40 	.word	0x0801ce40
 80089c0:	08009189 	.word	0x08009189

080089c4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80089cc:	bf00      	nop
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80089d8:	b480      	push	{r7}
 80089da:	b087      	sub	sp, #28
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80089ea:	2320      	movs	r3, #32
 80089ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80089ee:	f3bf 8f4f 	dsb	sy
}
 80089f2:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 80089f4:	e00b      	b.n	8008a0e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80089f6:	4a0d      	ldr	r2, [pc, #52]	; (8008a2c <SCB_InvalidateDCache_by_Addr+0x54>)
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	693a      	ldr	r2, [r7, #16]
 8008a02:	4413      	add	r3, r2
 8008a04:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	1ad3      	subs	r3, r2, r3
 8008a0c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	dcf0      	bgt.n	80089f6 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8008a14:	f3bf 8f4f 	dsb	sy
}
 8008a18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008a1a:	f3bf 8f6f 	isb	sy
}
 8008a1e:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8008a20:	bf00      	nop
 8008a22:	371c      	adds	r7, #28
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr
 8008a2c:	e000ed00 	.word	0xe000ed00

08008a30 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8008a38:	4b04      	ldr	r3, [pc, #16]	; (8008a4c <HAL_ETH_RxCpltCallback+0x1c>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f001 f865 	bl	8009b0c <osSemaphoreRelease>
}
 8008a42:	bf00      	nop
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	20008e8c 	.word	0x20008e8c

08008a50 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8008a58:	4b04      	ldr	r3, [pc, #16]	; (8008a6c <HAL_ETH_TxCpltCallback+0x1c>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f001 f855 	bl	8009b0c <osSemaphoreRelease>
}
 8008a62:	bf00      	nop
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	20008e90 	.word	0x20008e90

08008a70 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f7fb ff19 	bl	80048b0 <HAL_ETH_GetDMAError>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a84:	2b80      	cmp	r3, #128	; 0x80
 8008a86:	d104      	bne.n	8008a92 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8008a88:	4b04      	ldr	r3, [pc, #16]	; (8008a9c <HAL_ETH_ErrorCallback+0x2c>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f001 f83d 	bl	8009b0c <osSemaphoreRelease>
  }
}
 8008a92:	bf00      	nop
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	20008e8c 	.word	0x20008e8c

08008aa0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b0aa      	sub	sp, #168	; 0xa8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8008aba:	f107 0310 	add.w	r3, r7, #16
 8008abe:	2264      	movs	r2, #100	; 0x64
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f012 ff5e 	bl	801b984 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008ac8:	4b85      	ldr	r3, [pc, #532]	; (8008ce0 <low_level_init+0x240>)
 8008aca:	4a86      	ldr	r2, [pc, #536]	; (8008ce4 <low_level_init+0x244>)
 8008acc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8008ad2:	2380      	movs	r3, #128	; 0x80
 8008ad4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8008ad6:	23e1      	movs	r3, #225	; 0xe1
 8008ad8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8008ada:	2300      	movs	r3, #0
 8008adc:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008ae6:	4a7e      	ldr	r2, [pc, #504]	; (8008ce0 <low_level_init+0x240>)
 8008ae8:	f107 0308 	add.w	r3, r7, #8
 8008aec:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8008aee:	4b7c      	ldr	r3, [pc, #496]	; (8008ce0 <low_level_init+0x240>)
 8008af0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008af4:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8008af6:	4b7a      	ldr	r3, [pc, #488]	; (8008ce0 <low_level_init+0x240>)
 8008af8:	4a7b      	ldr	r2, [pc, #492]	; (8008ce8 <low_level_init+0x248>)
 8008afa:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8008afc:	4b78      	ldr	r3, [pc, #480]	; (8008ce0 <low_level_init+0x240>)
 8008afe:	4a7b      	ldr	r2, [pc, #492]	; (8008cec <low_level_init+0x24c>)
 8008b00:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8008b02:	4b77      	ldr	r3, [pc, #476]	; (8008ce0 <low_level_init+0x240>)
 8008b04:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008b08:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008b0a:	4875      	ldr	r0, [pc, #468]	; (8008ce0 <low_level_init+0x240>)
 8008b0c:	f7fb f892 	bl	8003c34 <HAL_ETH_Init>
 8008b10:	4603      	mov	r3, r0
 8008b12:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8008b16:	2238      	movs	r2, #56	; 0x38
 8008b18:	2100      	movs	r1, #0
 8008b1a:	4875      	ldr	r0, [pc, #468]	; (8008cf0 <low_level_init+0x250>)
 8008b1c:	f012 ff32 	bl	801b984 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8008b20:	4b73      	ldr	r3, [pc, #460]	; (8008cf0 <low_level_init+0x250>)
 8008b22:	2221      	movs	r2, #33	; 0x21
 8008b24:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8008b26:	4b72      	ldr	r3, [pc, #456]	; (8008cf0 <low_level_init+0x250>)
 8008b28:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8008b2c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8008b2e:	4b70      	ldr	r3, [pc, #448]	; (8008cf0 <low_level_init+0x250>)
 8008b30:	2200      	movs	r2, #0
 8008b32:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8008b34:	486f      	ldr	r0, [pc, #444]	; (8008cf4 <low_level_init+0x254>)
 8008b36:	f008 fbad 	bl	8011294 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2206      	movs	r2, #6
 8008b3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008b42:	4b67      	ldr	r3, [pc, #412]	; (8008ce0 <low_level_init+0x240>)
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	781a      	ldrb	r2, [r3, #0]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008b4e:	4b64      	ldr	r3, [pc, #400]	; (8008ce0 <low_level_init+0x240>)
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	785a      	ldrb	r2, [r3, #1]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008b5a:	4b61      	ldr	r3, [pc, #388]	; (8008ce0 <low_level_init+0x240>)
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	789a      	ldrb	r2, [r3, #2]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008b66:	4b5e      	ldr	r3, [pc, #376]	; (8008ce0 <low_level_init+0x240>)
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	78da      	ldrb	r2, [r3, #3]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008b72:	4b5b      	ldr	r3, [pc, #364]	; (8008ce0 <low_level_init+0x240>)
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	791a      	ldrb	r2, [r3, #4]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008b7e:	4b58      	ldr	r3, [pc, #352]	; (8008ce0 <low_level_init+0x240>)
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	795a      	ldrb	r2, [r3, #5]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008b90:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008b98:	f043 030a 	orr.w	r3, r3, #10
 8008b9c:	b2da      	uxtb	r2, r3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	2101      	movs	r1, #1
 8008ba8:	2001      	movs	r0, #1
 8008baa:	f000 fead 	bl	8009908 <osSemaphoreNew>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	4a51      	ldr	r2, [pc, #324]	; (8008cf8 <low_level_init+0x258>)
 8008bb2:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	2101      	movs	r1, #1
 8008bb8:	2001      	movs	r0, #1
 8008bba:	f000 fea5 	bl	8009908 <osSemaphoreNew>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	4a4e      	ldr	r2, [pc, #312]	; (8008cfc <low_level_init+0x25c>)
 8008bc2:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8008bc4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008bc8:	2224      	movs	r2, #36	; 0x24
 8008bca:	2100      	movs	r1, #0
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f012 fed9 	bl	801b984 <memset>
  attributes.name = "EthIf";
 8008bd2:	4b4b      	ldr	r3, [pc, #300]	; (8008d00 <low_level_init+0x260>)
 8008bd4:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8008bd6:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8008bda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 8008bde:	2330      	movs	r3, #48	; 0x30
 8008be0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8008be4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008be8:	461a      	mov	r2, r3
 8008bea:	6879      	ldr	r1, [r7, #4]
 8008bec:	4845      	ldr	r0, [pc, #276]	; (8008d04 <low_level_init+0x264>)
 8008bee:	f000 fc6f 	bl	80094d0 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8008bf2:	4945      	ldr	r1, [pc, #276]	; (8008d08 <low_level_init+0x268>)
 8008bf4:	4845      	ldr	r0, [pc, #276]	; (8008d0c <low_level_init+0x26c>)
 8008bf6:	f7f9 fbb0 	bl	800235a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8008bfa:	4844      	ldr	r0, [pc, #272]	; (8008d0c <low_level_init+0x26c>)
 8008bfc:	f7f9 fbdf 	bl	80023be <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8008c00:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d164      	bne.n	8008cd2 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008c08:	4840      	ldr	r0, [pc, #256]	; (8008d0c <low_level_init+0x26c>)
 8008c0a:	f7f9 fc80 	bl	800250e <LAN8742_GetLinkState>
 8008c0e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8008c12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	dc06      	bgt.n	8008c28 <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f008 ff14 	bl	8011a48 <netif_set_link_down>
      netif_set_down(netif);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f008 feab 	bl	801197c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008c26:	e056      	b.n	8008cd6 <low_level_init+0x236>
      switch (PHYLinkState)
 8008c28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c2c:	3b02      	subs	r3, #2
 8008c2e:	2b03      	cmp	r3, #3
 8008c30:	d82a      	bhi.n	8008c88 <low_level_init+0x1e8>
 8008c32:	a201      	add	r2, pc, #4	; (adr r2, 8008c38 <low_level_init+0x198>)
 8008c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c38:	08008c49 	.word	0x08008c49
 8008c3c:	08008c5b 	.word	0x08008c5b
 8008c40:	08008c6b 	.word	0x08008c6b
 8008c44:	08008c7b 	.word	0x08008c7b
        duplex = ETH_FULLDUPLEX_MODE;
 8008c48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8008c50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008c54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008c58:	e01f      	b.n	8008c9a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8008c60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008c64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008c68:	e017      	b.n	8008c9a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8008c6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8008c72:	2300      	movs	r3, #0
 8008c74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008c78:	e00f      	b.n	8008c9a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8008c80:	2300      	movs	r3, #0
 8008c82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008c86:	e008      	b.n	8008c9a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8008c88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8008c90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008c94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008c98:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008c9a:	f107 0310 	add.w	r3, r7, #16
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	480f      	ldr	r0, [pc, #60]	; (8008ce0 <low_level_init+0x240>)
 8008ca2:	f7fb fcab 	bl	80045fc <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8008ca6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008caa:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8008cac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008cb2:	f107 0310 	add.w	r3, r7, #16
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	4809      	ldr	r0, [pc, #36]	; (8008ce0 <low_level_init+0x240>)
 8008cba:	f7fb fd89 	bl	80047d0 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8008cbe:	4808      	ldr	r0, [pc, #32]	; (8008ce0 <low_level_init+0x240>)
 8008cc0:	f7fb f834 	bl	8003d2c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f008 fded 	bl	80118a4 <netif_set_up>
    netif_set_link_up(netif);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f008 fe88 	bl	80119e0 <netif_set_link_up>
}
 8008cd0:	e001      	b.n	8008cd6 <low_level_init+0x236>
    Error_Handler();
 8008cd2:	f7f8 ffbb 	bl	8001c4c <Error_Handler>
}
 8008cd6:	bf00      	nop
 8008cd8:	37a8      	adds	r7, #168	; 0xa8
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	20008e94 	.word	0x20008e94
 8008ce4:	40028000 	.word	0x40028000
 8008ce8:	20000134 	.word	0x20000134
 8008cec:	20000094 	.word	0x20000094
 8008cf0:	20008f44 	.word	0x20008f44
 8008cf4:	08020650 	.word	0x08020650
 8008cf8:	20008e8c 	.word	0x20008e8c
 8008cfc:	20008e90 	.word	0x20008e90
 8008d00:	0801ce48 	.word	0x0801ce48
 8008d04:	08008e6d 	.word	0x08008e6d
 8008d08:	2000000c 	.word	0x2000000c
 8008d0c:	20008f7c 	.word	0x20008f7c

08008d10 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b092      	sub	sp, #72	; 0x48
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8008d22:	2300      	movs	r3, #0
 8008d24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8008d28:	f107 030c 	add.w	r3, r7, #12
 8008d2c:	2230      	movs	r2, #48	; 0x30
 8008d2e:	2100      	movs	r1, #0
 8008d30:	4618      	mov	r0, r3
 8008d32:	f012 fe27 	bl	801b984 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008d36:	f107 030c 	add.w	r3, r7, #12
 8008d3a:	2230      	movs	r2, #48	; 0x30
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f012 fe20 	bl	801b984 <memset>

  for(q = p; q != NULL; q = q->next)
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	643b      	str	r3, [r7, #64]	; 0x40
 8008d48:	e045      	b.n	8008dd6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8008d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d4c:	2b03      	cmp	r3, #3
 8008d4e:	d902      	bls.n	8008d56 <low_level_output+0x46>
      return ERR_IF;
 8008d50:	f06f 030b 	mvn.w	r3, #11
 8008d54:	e065      	b.n	8008e22 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8008d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d58:	6859      	ldr	r1, [r3, #4]
 8008d5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	005b      	lsls	r3, r3, #1
 8008d60:	4413      	add	r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	3348      	adds	r3, #72	; 0x48
 8008d66:	443b      	add	r3, r7
 8008d68:	3b3c      	subs	r3, #60	; 0x3c
 8008d6a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d6e:	895b      	ldrh	r3, [r3, #10]
 8008d70:	4619      	mov	r1, r3
 8008d72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d74:	4613      	mov	r3, r2
 8008d76:	005b      	lsls	r3, r3, #1
 8008d78:	4413      	add	r3, r2
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	3348      	adds	r3, #72	; 0x48
 8008d7e:	443b      	add	r3, r7
 8008d80:	3b38      	subs	r3, #56	; 0x38
 8008d82:	6019      	str	r1, [r3, #0]

    if(i>0)
 8008d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d011      	beq.n	8008dae <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8008d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d8c:	1e5a      	subs	r2, r3, #1
 8008d8e:	f107 000c 	add.w	r0, r7, #12
 8008d92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d94:	460b      	mov	r3, r1
 8008d96:	005b      	lsls	r3, r3, #1
 8008d98:	440b      	add	r3, r1
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	18c1      	adds	r1, r0, r3
 8008d9e:	4613      	mov	r3, r2
 8008da0:	005b      	lsls	r3, r3, #1
 8008da2:	4413      	add	r3, r2
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	3348      	adds	r3, #72	; 0x48
 8008da8:	443b      	add	r3, r7
 8008daa:	3b34      	subs	r3, #52	; 0x34
 8008dac:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8008dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d109      	bne.n	8008dca <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8008db6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008db8:	4613      	mov	r3, r2
 8008dba:	005b      	lsls	r3, r3, #1
 8008dbc:	4413      	add	r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	3348      	adds	r3, #72	; 0x48
 8008dc2:	443b      	add	r3, r7
 8008dc4:	3b34      	subs	r3, #52	; 0x34
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	601a      	str	r2, [r3, #0]
    }

    i++;
 8008dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dcc:	3301      	adds	r3, #1
 8008dce:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8008dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	643b      	str	r3, [r7, #64]	; 0x40
 8008dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d1b6      	bne.n	8008d4a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	891b      	ldrh	r3, [r3, #8]
 8008de0:	461a      	mov	r2, r3
 8008de2:	4b12      	ldr	r3, [pc, #72]	; (8008e2c <low_level_output+0x11c>)
 8008de4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8008de6:	4a11      	ldr	r2, [pc, #68]	; (8008e2c <low_level_output+0x11c>)
 8008de8:	f107 030c 	add.w	r3, r7, #12
 8008dec:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8008dee:	4a0f      	ldr	r2, [pc, #60]	; (8008e2c <low_level_output+0x11c>)
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8008df4:	6838      	ldr	r0, [r7, #0]
 8008df6:	f009 fadd 	bl	80123b4 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8008dfa:	490c      	ldr	r1, [pc, #48]	; (8008e2c <low_level_output+0x11c>)
 8008dfc:	480c      	ldr	r0, [pc, #48]	; (8008e30 <low_level_output+0x120>)
 8008dfe:	f7fb f8a3 	bl	8003f48 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8008e02:	bf00      	nop
 8008e04:	4b0b      	ldr	r3, [pc, #44]	; (8008e34 <low_level_output+0x124>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f04f 31ff 	mov.w	r1, #4294967295
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f000 fe17 	bl	8009a40 <osSemaphoreAcquire>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1f5      	bne.n	8008e04 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8008e18:	4805      	ldr	r0, [pc, #20]	; (8008e30 <low_level_output+0x120>)
 8008e1a:	f7fb fa29 	bl	8004270 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8008e1e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3748      	adds	r7, #72	; 0x48
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	20008f44 	.word	0x20008f44
 8008e30:	20008e94 	.word	0x20008e94
 8008e34:	20008e90 	.word	0x20008e90

08008e38 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008e40:	2300      	movs	r3, #0
 8008e42:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8008e44:	4b07      	ldr	r3, [pc, #28]	; (8008e64 <low_level_input+0x2c>)
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d105      	bne.n	8008e58 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8008e4c:	f107 030c 	add.w	r3, r7, #12
 8008e50:	4619      	mov	r1, r3
 8008e52:	4805      	ldr	r0, [pc, #20]	; (8008e68 <low_level_input+0x30>)
 8008e54:	f7fb f8d4 	bl	8004000 <HAL_ETH_ReadData>
  }

  return p;
 8008e58:	68fb      	ldr	r3, [r7, #12]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3710      	adds	r7, #16
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	20008e88 	.word	0x20008e88
 8008e68:	20008e94 	.word	0x20008e94

08008e6c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008e74:	2300      	movs	r3, #0
 8008e76:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008e7c:	4b0f      	ldr	r3, [pc, #60]	; (8008ebc <ethernetif_input+0x50>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f04f 31ff 	mov.w	r1, #4294967295
 8008e84:	4618      	mov	r0, r3
 8008e86:	f000 fddb 	bl	8009a40 <osSemaphoreAcquire>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1f5      	bne.n	8008e7c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8008e90:	68b8      	ldr	r0, [r7, #8]
 8008e92:	f7ff ffd1 	bl	8008e38 <low_level_input>
 8008e96:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00a      	beq.n	8008eb4 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	68b9      	ldr	r1, [r7, #8]
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	4798      	blx	r3
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d002      	beq.n	8008eb4 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8008eae:	68f8      	ldr	r0, [r7, #12]
 8008eb0:	f009 f9da 	bl	8012268 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1ea      	bne.n	8008e90 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008eba:	e7df      	b.n	8008e7c <ethernetif_input+0x10>
 8008ebc:	20008e8c 	.word	0x20008e8c

08008ec0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d106      	bne.n	8008edc <ethernetif_init+0x1c>
 8008ece:	4b0e      	ldr	r3, [pc, #56]	; (8008f08 <ethernetif_init+0x48>)
 8008ed0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008ed4:	490d      	ldr	r1, [pc, #52]	; (8008f0c <ethernetif_init+0x4c>)
 8008ed6:	480e      	ldr	r0, [pc, #56]	; (8008f10 <ethernetif_init+0x50>)
 8008ed8:	f012 fd5c 	bl	801b994 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2273      	movs	r2, #115	; 0x73
 8008ee0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2274      	movs	r2, #116	; 0x74
 8008ee8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a09      	ldr	r2, [pc, #36]	; (8008f14 <ethernetif_init+0x54>)
 8008ef0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4a08      	ldr	r2, [pc, #32]	; (8008f18 <ethernetif_init+0x58>)
 8008ef6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f7ff fdd1 	bl	8008aa0 <low_level_init>

  return ERR_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	0801ce50 	.word	0x0801ce50
 8008f0c:	0801ce6c 	.word	0x0801ce6c
 8008f10:	0801ce7c 	.word	0x0801ce7c
 8008f14:	080198a1 	.word	0x080198a1
 8008f18:	08008d11 	.word	0x08008d11

08008f1c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008f28:	68f9      	ldr	r1, [r7, #12]
 8008f2a:	4809      	ldr	r0, [pc, #36]	; (8008f50 <pbuf_free_custom+0x34>)
 8008f2c:	f008 faa2 	bl	8011474 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8008f30:	4b08      	ldr	r3, [pc, #32]	; (8008f54 <pbuf_free_custom+0x38>)
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d107      	bne.n	8008f48 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8008f38:	4b06      	ldr	r3, [pc, #24]	; (8008f54 <pbuf_free_custom+0x38>)
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8008f3e:	4b06      	ldr	r3, [pc, #24]	; (8008f58 <pbuf_free_custom+0x3c>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 fde2 	bl	8009b0c <osSemaphoreRelease>
  }
}
 8008f48:	bf00      	nop
 8008f4a:	3710      	adds	r7, #16
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	08020650 	.word	0x08020650
 8008f54:	20008e88 	.word	0x20008e88
 8008f58:	20008e8c 	.word	0x20008e8c

08008f5c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008f60:	f7f9 fb7e 	bl	8002660 <HAL_GetTick>
 8008f64:	4603      	mov	r3, r0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	bd80      	pop	{r7, pc}
	...

08008f6c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b08e      	sub	sp, #56	; 0x38
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f78:	2200      	movs	r2, #0
 8008f7a:	601a      	str	r2, [r3, #0]
 8008f7c:	605a      	str	r2, [r3, #4]
 8008f7e:	609a      	str	r2, [r3, #8]
 8008f80:	60da      	str	r2, [r3, #12]
 8008f82:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a52      	ldr	r2, [pc, #328]	; (80090d4 <HAL_ETH_MspInit+0x168>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	f040 809e 	bne.w	80090cc <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8008f90:	4b51      	ldr	r3, [pc, #324]	; (80090d8 <HAL_ETH_MspInit+0x16c>)
 8008f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f94:	4a50      	ldr	r2, [pc, #320]	; (80090d8 <HAL_ETH_MspInit+0x16c>)
 8008f96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8008f9c:	4b4e      	ldr	r3, [pc, #312]	; (80090d8 <HAL_ETH_MspInit+0x16c>)
 8008f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fa4:	623b      	str	r3, [r7, #32]
 8008fa6:	6a3b      	ldr	r3, [r7, #32]
 8008fa8:	4b4b      	ldr	r3, [pc, #300]	; (80090d8 <HAL_ETH_MspInit+0x16c>)
 8008faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fac:	4a4a      	ldr	r2, [pc, #296]	; (80090d8 <HAL_ETH_MspInit+0x16c>)
 8008fae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008fb2:	6313      	str	r3, [r2, #48]	; 0x30
 8008fb4:	4b48      	ldr	r3, [pc, #288]	; (80090d8 <HAL_ETH_MspInit+0x16c>)
 8008fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008fbc:	61fb      	str	r3, [r7, #28]
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	4b45      	ldr	r3, [pc, #276]	; (80090d8 <HAL_ETH_MspInit+0x16c>)
 8008fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc4:	4a44      	ldr	r2, [pc, #272]	; (80090d8 <HAL_ETH_MspInit+0x16c>)
 8008fc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008fca:	6313      	str	r3, [r2, #48]	; 0x30
 8008fcc:	4b42      	ldr	r3, [pc, #264]	; (80090d8 <HAL_ETH_MspInit+0x16c>)
 8008fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fd4:	61bb      	str	r3, [r7, #24]
 8008fd6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008fd8:	4b3f      	ldr	r3, [pc, #252]	; (80090d8 <HAL_ETH_MspInit+0x16c>)
 8008fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fdc:	4a3e      	ldr	r2, [pc, #248]	; (80090d8 <HAL_ETH_MspInit+0x16c>)
 8008fde:	f043 0304 	orr.w	r3, r3, #4
 8008fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8008fe4:	4b3c      	ldr	r3, [pc, #240]	; (80090d8 <HAL_ETH_MspInit+0x16c>)
 8008fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe8:	f003 0304 	and.w	r3, r3, #4
 8008fec:	617b      	str	r3, [r7, #20]
 8008fee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ff0:	4b39      	ldr	r3, [pc, #228]	; (80090d8 <HAL_ETH_MspInit+0x16c>)
 8008ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff4:	4a38      	ldr	r2, [pc, #224]	; (80090d8 <HAL_ETH_MspInit+0x16c>)
 8008ff6:	f043 0301 	orr.w	r3, r3, #1
 8008ffa:	6313      	str	r3, [r2, #48]	; 0x30
 8008ffc:	4b36      	ldr	r3, [pc, #216]	; (80090d8 <HAL_ETH_MspInit+0x16c>)
 8008ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009000:	f003 0301 	and.w	r3, r3, #1
 8009004:	613b      	str	r3, [r7, #16]
 8009006:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009008:	4b33      	ldr	r3, [pc, #204]	; (80090d8 <HAL_ETH_MspInit+0x16c>)
 800900a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800900c:	4a32      	ldr	r2, [pc, #200]	; (80090d8 <HAL_ETH_MspInit+0x16c>)
 800900e:	f043 0302 	orr.w	r3, r3, #2
 8009012:	6313      	str	r3, [r2, #48]	; 0x30
 8009014:	4b30      	ldr	r3, [pc, #192]	; (80090d8 <HAL_ETH_MspInit+0x16c>)
 8009016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009018:	f003 0302 	and.w	r3, r3, #2
 800901c:	60fb      	str	r3, [r7, #12]
 800901e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009020:	4b2d      	ldr	r3, [pc, #180]	; (80090d8 <HAL_ETH_MspInit+0x16c>)
 8009022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009024:	4a2c      	ldr	r2, [pc, #176]	; (80090d8 <HAL_ETH_MspInit+0x16c>)
 8009026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800902a:	6313      	str	r3, [r2, #48]	; 0x30
 800902c:	4b2a      	ldr	r3, [pc, #168]	; (80090d8 <HAL_ETH_MspInit+0x16c>)
 800902e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009034:	60bb      	str	r3, [r7, #8]
 8009036:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8009038:	2332      	movs	r3, #50	; 0x32
 800903a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800903c:	2302      	movs	r3, #2
 800903e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009040:	2300      	movs	r3, #0
 8009042:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009044:	2303      	movs	r3, #3
 8009046:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009048:	230b      	movs	r3, #11
 800904a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800904c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009050:	4619      	mov	r1, r3
 8009052:	4822      	ldr	r0, [pc, #136]	; (80090dc <HAL_ETH_MspInit+0x170>)
 8009054:	f7fc f83c 	bl	80050d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8009058:	2386      	movs	r3, #134	; 0x86
 800905a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800905c:	2302      	movs	r3, #2
 800905e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009060:	2300      	movs	r3, #0
 8009062:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009064:	2303      	movs	r3, #3
 8009066:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009068:	230b      	movs	r3, #11
 800906a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800906c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009070:	4619      	mov	r1, r3
 8009072:	481b      	ldr	r0, [pc, #108]	; (80090e0 <HAL_ETH_MspInit+0x174>)
 8009074:	f7fc f82c 	bl	80050d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8009078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800907c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800907e:	2302      	movs	r3, #2
 8009080:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009082:	2300      	movs	r3, #0
 8009084:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009086:	2303      	movs	r3, #3
 8009088:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800908a:	230b      	movs	r3, #11
 800908c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800908e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009092:	4619      	mov	r1, r3
 8009094:	4813      	ldr	r0, [pc, #76]	; (80090e4 <HAL_ETH_MspInit+0x178>)
 8009096:	f7fc f81b 	bl	80050d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800909a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800909e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090a0:	2302      	movs	r3, #2
 80090a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090a4:	2300      	movs	r3, #0
 80090a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090a8:	2303      	movs	r3, #3
 80090aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80090ac:	230b      	movs	r3, #11
 80090ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80090b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090b4:	4619      	mov	r1, r3
 80090b6:	480c      	ldr	r0, [pc, #48]	; (80090e8 <HAL_ETH_MspInit+0x17c>)
 80090b8:	f7fc f80a 	bl	80050d0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80090bc:	2200      	movs	r2, #0
 80090be:	2105      	movs	r1, #5
 80090c0:	203d      	movs	r0, #61	; 0x3d
 80090c2:	f7fa fa11 	bl	80034e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80090c6:	203d      	movs	r0, #61	; 0x3d
 80090c8:	f7fa fa2a 	bl	8003520 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80090cc:	bf00      	nop
 80090ce:	3738      	adds	r7, #56	; 0x38
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	40028000 	.word	0x40028000
 80090d8:	40023800 	.word	0x40023800
 80090dc:	40020800 	.word	0x40020800
 80090e0:	40020000 	.word	0x40020000
 80090e4:	40020400 	.word	0x40020400
 80090e8:	40021800 	.word	0x40021800

080090ec <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80090f0:	4802      	ldr	r0, [pc, #8]	; (80090fc <ETH_PHY_IO_Init+0x10>)
 80090f2:	f7fb fb87 	bl	8004804 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	20008e94 	.word	0x20008e94

08009100 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8009100:	b480      	push	{r7}
 8009102:	af00      	add	r7, sp, #0
  return 0;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	68ba      	ldr	r2, [r7, #8]
 8009120:	68f9      	ldr	r1, [r7, #12]
 8009122:	4807      	ldr	r0, [pc, #28]	; (8009140 <ETH_PHY_IO_ReadReg+0x30>)
 8009124:	f7fb f9d6 	bl	80044d4 <HAL_ETH_ReadPHYRegister>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d002      	beq.n	8009134 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800912e:	f04f 33ff 	mov.w	r3, #4294967295
 8009132:	e000      	b.n	8009136 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	20008e94 	.word	0x20008e94

08009144 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	68ba      	ldr	r2, [r7, #8]
 8009154:	68f9      	ldr	r1, [r7, #12]
 8009156:	4807      	ldr	r0, [pc, #28]	; (8009174 <ETH_PHY_IO_WriteReg+0x30>)
 8009158:	f7fb fa07 	bl	800456a <HAL_ETH_WritePHYRegister>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d002      	beq.n	8009168 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8009162:	f04f 33ff 	mov.w	r3, #4294967295
 8009166:	e000      	b.n	800916a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	20008e94 	.word	0x20008e94

08009178 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800917c:	f7f9 fa70 	bl	8002660 <HAL_GetTick>
 8009180:	4603      	mov	r3, r0
}
 8009182:	4618      	mov	r0, r3
 8009184:	bd80      	pop	{r7, pc}
	...

08009188 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b0a0      	sub	sp, #128	; 0x80
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8009190:	f107 0308 	add.w	r3, r7, #8
 8009194:	2264      	movs	r2, #100	; 0x64
 8009196:	2100      	movs	r1, #0
 8009198:	4618      	mov	r0, r3
 800919a:	f012 fbf3 	bl	801b984 <memset>
  int32_t PHYLinkState = 0;
 800919e:	2300      	movs	r3, #0
 80091a0:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80091a2:	2300      	movs	r3, #0
 80091a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80091a6:	2300      	movs	r3, #0
 80091a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80091aa:	2300      	movs	r3, #0
 80091ac:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80091b2:	483a      	ldr	r0, [pc, #232]	; (800929c <ethernet_link_thread+0x114>)
 80091b4:	f7f9 f9ab 	bl	800250e <LAN8742_GetLinkState>
 80091b8:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80091ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80091c0:	089b      	lsrs	r3, r3, #2
 80091c2:	f003 0301 	and.w	r3, r3, #1
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d00c      	beq.n	80091e6 <ethernet_link_thread+0x5e>
 80091cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	dc09      	bgt.n	80091e6 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80091d2:	4833      	ldr	r0, [pc, #204]	; (80092a0 <ethernet_link_thread+0x118>)
 80091d4:	f7fa fe38 	bl	8003e48 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80091d8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80091da:	f008 fbcf 	bl	801197c <netif_set_down>
    netif_set_link_down(netif);
 80091de:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80091e0:	f008 fc32 	bl	8011a48 <netif_set_link_down>
 80091e4:	e055      	b.n	8009292 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80091e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80091ec:	f003 0304 	and.w	r3, r3, #4
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d14e      	bne.n	8009292 <ethernet_link_thread+0x10a>
 80091f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	dd4b      	ble.n	8009292 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80091fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091fc:	3b02      	subs	r3, #2
 80091fe:	2b03      	cmp	r3, #3
 8009200:	d82a      	bhi.n	8009258 <ethernet_link_thread+0xd0>
 8009202:	a201      	add	r2, pc, #4	; (adr r2, 8009208 <ethernet_link_thread+0x80>)
 8009204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009208:	08009219 	.word	0x08009219
 800920c:	0800922b 	.word	0x0800922b
 8009210:	0800923b 	.word	0x0800923b
 8009214:	0800924b 	.word	0x0800924b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8009218:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800921c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800921e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009222:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009224:	2301      	movs	r3, #1
 8009226:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009228:	e017      	b.n	800925a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800922a:	2300      	movs	r3, #0
 800922c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800922e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009232:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009234:	2301      	movs	r3, #1
 8009236:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009238:	e00f      	b.n	800925a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800923a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800923e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8009240:	2300      	movs	r3, #0
 8009242:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009244:	2301      	movs	r3, #1
 8009246:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009248:	e007      	b.n	800925a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800924a:	2300      	movs	r3, #0
 800924c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800924e:	2300      	movs	r3, #0
 8009250:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009252:	2301      	movs	r3, #1
 8009254:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009256:	e000      	b.n	800925a <ethernet_link_thread+0xd2>
    default:
      break;
 8009258:	bf00      	nop
    }

    if(linkchanged)
 800925a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800925c:	2b00      	cmp	r3, #0
 800925e:	d018      	beq.n	8009292 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009260:	f107 0308 	add.w	r3, r7, #8
 8009264:	4619      	mov	r1, r3
 8009266:	480e      	ldr	r0, [pc, #56]	; (80092a0 <ethernet_link_thread+0x118>)
 8009268:	f7fb f9c8 	bl	80045fc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800926c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800926e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8009270:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009272:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009274:	f107 0308 	add.w	r3, r7, #8
 8009278:	4619      	mov	r1, r3
 800927a:	4809      	ldr	r0, [pc, #36]	; (80092a0 <ethernet_link_thread+0x118>)
 800927c:	f7fb faa8 	bl	80047d0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8009280:	4807      	ldr	r0, [pc, #28]	; (80092a0 <ethernet_link_thread+0x118>)
 8009282:	f7fa fd53 	bl	8003d2c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8009286:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009288:	f008 fb0c 	bl	80118a4 <netif_set_up>
      netif_set_link_up(netif);
 800928c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800928e:	f008 fba7 	bl	80119e0 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8009292:	2064      	movs	r0, #100	; 0x64
 8009294:	f000 f9c2 	bl	800961c <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009298:	e78b      	b.n	80091b2 <ethernet_link_thread+0x2a>
 800929a:	bf00      	nop
 800929c:	20008f7c 	.word	0x20008f7c
 80092a0:	20008e94 	.word	0x20008e94

080092a4 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b086      	sub	sp, #24
 80092a8:	af02      	add	r7, sp, #8
 80092aa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80092ac:	4812      	ldr	r0, [pc, #72]	; (80092f8 <HAL_ETH_RxAllocateCallback+0x54>)
 80092ae:	f008 f86d 	bl	801138c <memp_malloc_pool>
 80092b2:	60f8      	str	r0, [r7, #12]
  if (p)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d014      	beq.n	80092e4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f103 0220 	add.w	r2, r3, #32
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	4a0d      	ldr	r2, [pc, #52]	; (80092fc <HAL_ETH_RxAllocateCallback+0x58>)
 80092c8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80092d2:	9201      	str	r2, [sp, #4]
 80092d4:	9300      	str	r3, [sp, #0]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2241      	movs	r2, #65	; 0x41
 80092da:	2100      	movs	r1, #0
 80092dc:	2000      	movs	r0, #0
 80092de:	f008 fdd7 	bl	8011e90 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80092e2:	e005      	b.n	80092f0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80092e4:	4b06      	ldr	r3, [pc, #24]	; (8009300 <HAL_ETH_RxAllocateCallback+0x5c>)
 80092e6:	2201      	movs	r2, #1
 80092e8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	601a      	str	r2, [r3, #0]
}
 80092f0:	bf00      	nop
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	08020650 	.word	0x08020650
 80092fc:	08008f1d 	.word	0x08008f1d
 8009300:	20008e88 	.word	0x20008e88

08009304 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b088      	sub	sp, #32
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	607a      	str	r2, [r7, #4]
 8009310:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800931a:	2300      	movs	r3, #0
 800931c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	3b20      	subs	r3, #32
 8009322:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	2200      	movs	r2, #0
 8009328:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	2200      	movs	r2, #0
 800932e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	887a      	ldrh	r2, [r7, #2]
 8009334:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d103      	bne.n	8009346 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	69fa      	ldr	r2, [r7, #28]
 8009342:	601a      	str	r2, [r3, #0]
 8009344:	e003      	b.n	800934e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	69fa      	ldr	r2, [r7, #28]
 800934c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	69fa      	ldr	r2, [r7, #28]
 8009352:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	61fb      	str	r3, [r7, #28]
 800935a:	e009      	b.n	8009370 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	891a      	ldrh	r2, [r3, #8]
 8009360:	887b      	ldrh	r3, [r7, #2]
 8009362:	4413      	add	r3, r2
 8009364:	b29a      	uxth	r2, r3
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	61fb      	str	r3, [r7, #28]
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1f2      	bne.n	800935c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8009376:	887b      	ldrh	r3, [r7, #2]
 8009378:	4619      	mov	r1, r3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f7ff fb2c 	bl	80089d8 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8009380:	bf00      	nop
 8009382:	3720      	adds	r7, #32
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f008 ff69 	bl	8012268 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8009396:	bf00      	nop
 8009398:	3708      	adds	r7, #8
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800939e:	b480      	push	{r7}
 80093a0:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80093a2:	bf00      	nop
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093b2:	f3ef 8305 	mrs	r3, IPSR
 80093b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80093b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d10f      	bne.n	80093de <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093be:	f3ef 8310 	mrs	r3, PRIMASK
 80093c2:	607b      	str	r3, [r7, #4]
  return(result);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d105      	bne.n	80093d6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80093ca:	f3ef 8311 	mrs	r3, BASEPRI
 80093ce:	603b      	str	r3, [r7, #0]
  return(result);
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d007      	beq.n	80093e6 <osKernelInitialize+0x3a>
 80093d6:	4b0e      	ldr	r3, [pc, #56]	; (8009410 <osKernelInitialize+0x64>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d103      	bne.n	80093e6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80093de:	f06f 0305 	mvn.w	r3, #5
 80093e2:	60fb      	str	r3, [r7, #12]
 80093e4:	e00c      	b.n	8009400 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80093e6:	4b0a      	ldr	r3, [pc, #40]	; (8009410 <osKernelInitialize+0x64>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d105      	bne.n	80093fa <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80093ee:	4b08      	ldr	r3, [pc, #32]	; (8009410 <osKernelInitialize+0x64>)
 80093f0:	2201      	movs	r2, #1
 80093f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80093f4:	2300      	movs	r3, #0
 80093f6:	60fb      	str	r3, [r7, #12]
 80093f8:	e002      	b.n	8009400 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80093fa:	f04f 33ff 	mov.w	r3, #4294967295
 80093fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009400:	68fb      	ldr	r3, [r7, #12]
}
 8009402:	4618      	mov	r0, r3
 8009404:	3714      	adds	r7, #20
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	20008f9c 	.word	0x20008f9c

08009414 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800941a:	f3ef 8305 	mrs	r3, IPSR
 800941e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009420:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009422:	2b00      	cmp	r3, #0
 8009424:	d10f      	bne.n	8009446 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009426:	f3ef 8310 	mrs	r3, PRIMASK
 800942a:	607b      	str	r3, [r7, #4]
  return(result);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d105      	bne.n	800943e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009432:	f3ef 8311 	mrs	r3, BASEPRI
 8009436:	603b      	str	r3, [r7, #0]
  return(result);
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d007      	beq.n	800944e <osKernelStart+0x3a>
 800943e:	4b0f      	ldr	r3, [pc, #60]	; (800947c <osKernelStart+0x68>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2b02      	cmp	r3, #2
 8009444:	d103      	bne.n	800944e <osKernelStart+0x3a>
    stat = osErrorISR;
 8009446:	f06f 0305 	mvn.w	r3, #5
 800944a:	60fb      	str	r3, [r7, #12]
 800944c:	e010      	b.n	8009470 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800944e:	4b0b      	ldr	r3, [pc, #44]	; (800947c <osKernelStart+0x68>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b01      	cmp	r3, #1
 8009454:	d109      	bne.n	800946a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009456:	f7ff ffa2 	bl	800939e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800945a:	4b08      	ldr	r3, [pc, #32]	; (800947c <osKernelStart+0x68>)
 800945c:	2202      	movs	r2, #2
 800945e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009460:	f002 f9ce 	bl	800b800 <vTaskStartScheduler>
      stat = osOK;
 8009464:	2300      	movs	r3, #0
 8009466:	60fb      	str	r3, [r7, #12]
 8009468:	e002      	b.n	8009470 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800946a:	f04f 33ff 	mov.w	r3, #4294967295
 800946e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009470:	68fb      	ldr	r3, [r7, #12]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	20008f9c 	.word	0x20008f9c

08009480 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009486:	f3ef 8305 	mrs	r3, IPSR
 800948a:	60bb      	str	r3, [r7, #8]
  return(result);
 800948c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800948e:	2b00      	cmp	r3, #0
 8009490:	d10f      	bne.n	80094b2 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009492:	f3ef 8310 	mrs	r3, PRIMASK
 8009496:	607b      	str	r3, [r7, #4]
  return(result);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d105      	bne.n	80094aa <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800949e:	f3ef 8311 	mrs	r3, BASEPRI
 80094a2:	603b      	str	r3, [r7, #0]
  return(result);
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d007      	beq.n	80094ba <osKernelGetTickCount+0x3a>
 80094aa:	4b08      	ldr	r3, [pc, #32]	; (80094cc <osKernelGetTickCount+0x4c>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d103      	bne.n	80094ba <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80094b2:	f002 facd 	bl	800ba50 <xTaskGetTickCountFromISR>
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	e002      	b.n	80094c0 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80094ba:	f002 fab9 	bl	800ba30 <xTaskGetTickCount>
 80094be:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80094c0:	68fb      	ldr	r3, [r7, #12]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	20008f9c 	.word	0x20008f9c

080094d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b090      	sub	sp, #64	; 0x40
 80094d4:	af04      	add	r7, sp, #16
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80094dc:	2300      	movs	r3, #0
 80094de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094e0:	f3ef 8305 	mrs	r3, IPSR
 80094e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80094e6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f040 808f 	bne.w	800960c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094ee:	f3ef 8310 	mrs	r3, PRIMASK
 80094f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d105      	bne.n	8009506 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80094fa:	f3ef 8311 	mrs	r3, BASEPRI
 80094fe:	617b      	str	r3, [r7, #20]
  return(result);
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d003      	beq.n	800950e <osThreadNew+0x3e>
 8009506:	4b44      	ldr	r3, [pc, #272]	; (8009618 <osThreadNew+0x148>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2b02      	cmp	r3, #2
 800950c:	d07e      	beq.n	800960c <osThreadNew+0x13c>
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d07b      	beq.n	800960c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009514:	2380      	movs	r3, #128	; 0x80
 8009516:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009518:	2318      	movs	r3, #24
 800951a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800951c:	2300      	movs	r3, #0
 800951e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009520:	f04f 33ff 	mov.w	r3, #4294967295
 8009524:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d045      	beq.n	80095b8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d002      	beq.n	800953a <osThreadNew+0x6a>
        name = attr->name;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	699b      	ldr	r3, [r3, #24]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d002      	beq.n	8009548 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954a:	2b00      	cmp	r3, #0
 800954c:	d008      	beq.n	8009560 <osThreadNew+0x90>
 800954e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009550:	2b38      	cmp	r3, #56	; 0x38
 8009552:	d805      	bhi.n	8009560 <osThreadNew+0x90>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	f003 0301 	and.w	r3, r3, #1
 800955c:	2b00      	cmp	r3, #0
 800955e:	d001      	beq.n	8009564 <osThreadNew+0x94>
        return (NULL);
 8009560:	2300      	movs	r3, #0
 8009562:	e054      	b.n	800960e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	695b      	ldr	r3, [r3, #20]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d003      	beq.n	8009574 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	695b      	ldr	r3, [r3, #20]
 8009570:	089b      	lsrs	r3, r3, #2
 8009572:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d00e      	beq.n	800959a <osThreadNew+0xca>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	2b5b      	cmp	r3, #91	; 0x5b
 8009582:	d90a      	bls.n	800959a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009588:	2b00      	cmp	r3, #0
 800958a:	d006      	beq.n	800959a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	695b      	ldr	r3, [r3, #20]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d002      	beq.n	800959a <osThreadNew+0xca>
        mem = 1;
 8009594:	2301      	movs	r3, #1
 8009596:	623b      	str	r3, [r7, #32]
 8009598:	e010      	b.n	80095bc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10c      	bne.n	80095bc <osThreadNew+0xec>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d108      	bne.n	80095bc <osThreadNew+0xec>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d104      	bne.n	80095bc <osThreadNew+0xec>
          mem = 0;
 80095b2:	2300      	movs	r3, #0
 80095b4:	623b      	str	r3, [r7, #32]
 80095b6:	e001      	b.n	80095bc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80095b8:	2300      	movs	r3, #0
 80095ba:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80095bc:	6a3b      	ldr	r3, [r7, #32]
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d110      	bne.n	80095e4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80095ca:	9202      	str	r2, [sp, #8]
 80095cc:	9301      	str	r3, [sp, #4]
 80095ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d0:	9300      	str	r3, [sp, #0]
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f001 ff31 	bl	800b440 <xTaskCreateStatic>
 80095de:	4603      	mov	r3, r0
 80095e0:	613b      	str	r3, [r7, #16]
 80095e2:	e013      	b.n	800960c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80095e4:	6a3b      	ldr	r3, [r7, #32]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d110      	bne.n	800960c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80095ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	f107 0310 	add.w	r3, r7, #16
 80095f2:	9301      	str	r3, [sp, #4]
 80095f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f6:	9300      	str	r3, [sp, #0]
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095fc:	68f8      	ldr	r0, [r7, #12]
 80095fe:	f001 ff82 	bl	800b506 <xTaskCreate>
 8009602:	4603      	mov	r3, r0
 8009604:	2b01      	cmp	r3, #1
 8009606:	d001      	beq.n	800960c <osThreadNew+0x13c>
          hTask = NULL;
 8009608:	2300      	movs	r3, #0
 800960a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800960c:	693b      	ldr	r3, [r7, #16]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3730      	adds	r7, #48	; 0x30
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	20008f9c 	.word	0x20008f9c

0800961c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800961c:	b580      	push	{r7, lr}
 800961e:	b086      	sub	sp, #24
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009624:	f3ef 8305 	mrs	r3, IPSR
 8009628:	613b      	str	r3, [r7, #16]
  return(result);
 800962a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800962c:	2b00      	cmp	r3, #0
 800962e:	d10f      	bne.n	8009650 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009630:	f3ef 8310 	mrs	r3, PRIMASK
 8009634:	60fb      	str	r3, [r7, #12]
  return(result);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d105      	bne.n	8009648 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800963c:	f3ef 8311 	mrs	r3, BASEPRI
 8009640:	60bb      	str	r3, [r7, #8]
  return(result);
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d007      	beq.n	8009658 <osDelay+0x3c>
 8009648:	4b0a      	ldr	r3, [pc, #40]	; (8009674 <osDelay+0x58>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2b02      	cmp	r3, #2
 800964e:	d103      	bne.n	8009658 <osDelay+0x3c>
    stat = osErrorISR;
 8009650:	f06f 0305 	mvn.w	r3, #5
 8009654:	617b      	str	r3, [r7, #20]
 8009656:	e007      	b.n	8009668 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009658:	2300      	movs	r3, #0
 800965a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d002      	beq.n	8009668 <osDelay+0x4c>
      vTaskDelay(ticks);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f002 f896 	bl	800b794 <vTaskDelay>
    }
  }

  return (stat);
 8009668:	697b      	ldr	r3, [r7, #20]
}
 800966a:	4618      	mov	r0, r3
 800966c:	3718      	adds	r7, #24
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	20008f9c 	.word	0x20008f9c

08009678 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009678:	b580      	push	{r7, lr}
 800967a:	b08a      	sub	sp, #40	; 0x28
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009680:	2300      	movs	r3, #0
 8009682:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009684:	f3ef 8305 	mrs	r3, IPSR
 8009688:	613b      	str	r3, [r7, #16]
  return(result);
 800968a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800968c:	2b00      	cmp	r3, #0
 800968e:	f040 8085 	bne.w	800979c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009692:	f3ef 8310 	mrs	r3, PRIMASK
 8009696:	60fb      	str	r3, [r7, #12]
  return(result);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d105      	bne.n	80096aa <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800969e:	f3ef 8311 	mrs	r3, BASEPRI
 80096a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d003      	beq.n	80096b2 <osMutexNew+0x3a>
 80096aa:	4b3f      	ldr	r3, [pc, #252]	; (80097a8 <osMutexNew+0x130>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2b02      	cmp	r3, #2
 80096b0:	d074      	beq.n	800979c <osMutexNew+0x124>
    if (attr != NULL) {
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d003      	beq.n	80096c0 <osMutexNew+0x48>
      type = attr->attr_bits;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	623b      	str	r3, [r7, #32]
 80096be:	e001      	b.n	80096c4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80096c0:	2300      	movs	r3, #0
 80096c2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80096c4:	6a3b      	ldr	r3, [r7, #32]
 80096c6:	f003 0301 	and.w	r3, r3, #1
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d002      	beq.n	80096d4 <osMutexNew+0x5c>
      rmtx = 1U;
 80096ce:	2301      	movs	r3, #1
 80096d0:	61fb      	str	r3, [r7, #28]
 80096d2:	e001      	b.n	80096d8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80096d4:	2300      	movs	r3, #0
 80096d6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80096d8:	6a3b      	ldr	r3, [r7, #32]
 80096da:	f003 0308 	and.w	r3, r3, #8
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d15c      	bne.n	800979c <osMutexNew+0x124>
      mem = -1;
 80096e2:	f04f 33ff 	mov.w	r3, #4294967295
 80096e6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d015      	beq.n	800971a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d006      	beq.n	8009704 <osMutexNew+0x8c>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	2b4f      	cmp	r3, #79	; 0x4f
 80096fc:	d902      	bls.n	8009704 <osMutexNew+0x8c>
          mem = 1;
 80096fe:	2301      	movs	r3, #1
 8009700:	61bb      	str	r3, [r7, #24]
 8009702:	e00c      	b.n	800971e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d108      	bne.n	800971e <osMutexNew+0xa6>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d104      	bne.n	800971e <osMutexNew+0xa6>
            mem = 0;
 8009714:	2300      	movs	r3, #0
 8009716:	61bb      	str	r3, [r7, #24]
 8009718:	e001      	b.n	800971e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800971a:	2300      	movs	r3, #0
 800971c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800971e:	69bb      	ldr	r3, [r7, #24]
 8009720:	2b01      	cmp	r3, #1
 8009722:	d112      	bne.n	800974a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d007      	beq.n	800973a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	4619      	mov	r1, r3
 8009730:	2004      	movs	r0, #4
 8009732:	f000 feb8 	bl	800a4a6 <xQueueCreateMutexStatic>
 8009736:	6278      	str	r0, [r7, #36]	; 0x24
 8009738:	e016      	b.n	8009768 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	4619      	mov	r1, r3
 8009740:	2001      	movs	r0, #1
 8009742:	f000 feb0 	bl	800a4a6 <xQueueCreateMutexStatic>
 8009746:	6278      	str	r0, [r7, #36]	; 0x24
 8009748:	e00e      	b.n	8009768 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d10b      	bne.n	8009768 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d004      	beq.n	8009760 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8009756:	2004      	movs	r0, #4
 8009758:	f000 fe8d 	bl	800a476 <xQueueCreateMutex>
 800975c:	6278      	str	r0, [r7, #36]	; 0x24
 800975e:	e003      	b.n	8009768 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8009760:	2001      	movs	r0, #1
 8009762:	f000 fe88 	bl	800a476 <xQueueCreateMutex>
 8009766:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00c      	beq.n	8009788 <osMutexNew+0x110>
        if (attr != NULL) {
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d003      	beq.n	800977c <osMutexNew+0x104>
          name = attr->name;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	617b      	str	r3, [r7, #20]
 800977a:	e001      	b.n	8009780 <osMutexNew+0x108>
        } else {
          name = NULL;
 800977c:	2300      	movs	r3, #0
 800977e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8009780:	6979      	ldr	r1, [r7, #20]
 8009782:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009784:	f001 fdd4 	bl	800b330 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978a:	2b00      	cmp	r3, #0
 800978c:	d006      	beq.n	800979c <osMutexNew+0x124>
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d003      	beq.n	800979c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009796:	f043 0301 	orr.w	r3, r3, #1
 800979a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800979c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3728      	adds	r7, #40	; 0x28
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	20008f9c 	.word	0x20008f9c

080097ac <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b088      	sub	sp, #32
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f023 0301 	bic.w	r3, r3, #1
 80097bc:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f003 0301 	and.w	r3, r3, #1
 80097c4:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80097c6:	2300      	movs	r3, #0
 80097c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097ca:	f3ef 8305 	mrs	r3, IPSR
 80097ce:	613b      	str	r3, [r7, #16]
  return(result);
 80097d0:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d10f      	bne.n	80097f6 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097d6:	f3ef 8310 	mrs	r3, PRIMASK
 80097da:	60fb      	str	r3, [r7, #12]
  return(result);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d105      	bne.n	80097ee <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80097e2:	f3ef 8311 	mrs	r3, BASEPRI
 80097e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d007      	beq.n	80097fe <osMutexAcquire+0x52>
 80097ee:	4b1d      	ldr	r3, [pc, #116]	; (8009864 <osMutexAcquire+0xb8>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	2b02      	cmp	r3, #2
 80097f4:	d103      	bne.n	80097fe <osMutexAcquire+0x52>
    stat = osErrorISR;
 80097f6:	f06f 0305 	mvn.w	r3, #5
 80097fa:	61fb      	str	r3, [r7, #28]
 80097fc:	e02c      	b.n	8009858 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d103      	bne.n	800980c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8009804:	f06f 0303 	mvn.w	r3, #3
 8009808:	61fb      	str	r3, [r7, #28]
 800980a:	e025      	b.n	8009858 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d011      	beq.n	8009836 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009812:	6839      	ldr	r1, [r7, #0]
 8009814:	69b8      	ldr	r0, [r7, #24]
 8009816:	f000 fe97 	bl	800a548 <xQueueTakeMutexRecursive>
 800981a:	4603      	mov	r3, r0
 800981c:	2b01      	cmp	r3, #1
 800981e:	d01b      	beq.n	8009858 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d003      	beq.n	800982e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8009826:	f06f 0301 	mvn.w	r3, #1
 800982a:	61fb      	str	r3, [r7, #28]
 800982c:	e014      	b.n	8009858 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800982e:	f06f 0302 	mvn.w	r3, #2
 8009832:	61fb      	str	r3, [r7, #28]
 8009834:	e010      	b.n	8009858 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009836:	6839      	ldr	r1, [r7, #0]
 8009838:	69b8      	ldr	r0, [r7, #24]
 800983a:	f001 fa51 	bl	800ace0 <xQueueSemaphoreTake>
 800983e:	4603      	mov	r3, r0
 8009840:	2b01      	cmp	r3, #1
 8009842:	d009      	beq.n	8009858 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d003      	beq.n	8009852 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800984a:	f06f 0301 	mvn.w	r3, #1
 800984e:	61fb      	str	r3, [r7, #28]
 8009850:	e002      	b.n	8009858 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8009852:	f06f 0302 	mvn.w	r3, #2
 8009856:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009858:	69fb      	ldr	r3, [r7, #28]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3720      	adds	r7, #32
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	20008f9c 	.word	0x20008f9c

08009868 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009868:	b580      	push	{r7, lr}
 800986a:	b088      	sub	sp, #32
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f023 0301 	bic.w	r3, r3, #1
 8009876:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f003 0301 	and.w	r3, r3, #1
 800987e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8009880:	2300      	movs	r3, #0
 8009882:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009884:	f3ef 8305 	mrs	r3, IPSR
 8009888:	613b      	str	r3, [r7, #16]
  return(result);
 800988a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800988c:	2b00      	cmp	r3, #0
 800988e:	d10f      	bne.n	80098b0 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009890:	f3ef 8310 	mrs	r3, PRIMASK
 8009894:	60fb      	str	r3, [r7, #12]
  return(result);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d105      	bne.n	80098a8 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800989c:	f3ef 8311 	mrs	r3, BASEPRI
 80098a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d007      	beq.n	80098b8 <osMutexRelease+0x50>
 80098a8:	4b16      	ldr	r3, [pc, #88]	; (8009904 <osMutexRelease+0x9c>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d103      	bne.n	80098b8 <osMutexRelease+0x50>
    stat = osErrorISR;
 80098b0:	f06f 0305 	mvn.w	r3, #5
 80098b4:	61fb      	str	r3, [r7, #28]
 80098b6:	e01f      	b.n	80098f8 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d103      	bne.n	80098c6 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80098be:	f06f 0303 	mvn.w	r3, #3
 80098c2:	61fb      	str	r3, [r7, #28]
 80098c4:	e018      	b.n	80098f8 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d009      	beq.n	80098e0 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80098cc:	69b8      	ldr	r0, [r7, #24]
 80098ce:	f000 fe05 	bl	800a4dc <xQueueGiveMutexRecursive>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d00f      	beq.n	80098f8 <osMutexRelease+0x90>
        stat = osErrorResource;
 80098d8:	f06f 0302 	mvn.w	r3, #2
 80098dc:	61fb      	str	r3, [r7, #28]
 80098de:	e00b      	b.n	80098f8 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80098e0:	2300      	movs	r3, #0
 80098e2:	2200      	movs	r2, #0
 80098e4:	2100      	movs	r1, #0
 80098e6:	69b8      	ldr	r0, [r7, #24]
 80098e8:	f000 fed8 	bl	800a69c <xQueueGenericSend>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d002      	beq.n	80098f8 <osMutexRelease+0x90>
        stat = osErrorResource;
 80098f2:	f06f 0302 	mvn.w	r3, #2
 80098f6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80098f8:	69fb      	ldr	r3, [r7, #28]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3720      	adds	r7, #32
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	20008f9c 	.word	0x20008f9c

08009908 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009908:	b580      	push	{r7, lr}
 800990a:	b08c      	sub	sp, #48	; 0x30
 800990c:	af02      	add	r7, sp, #8
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	60b9      	str	r1, [r7, #8]
 8009912:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009914:	2300      	movs	r3, #0
 8009916:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009918:	f3ef 8305 	mrs	r3, IPSR
 800991c:	61bb      	str	r3, [r7, #24]
  return(result);
 800991e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009920:	2b00      	cmp	r3, #0
 8009922:	f040 8086 	bne.w	8009a32 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009926:	f3ef 8310 	mrs	r3, PRIMASK
 800992a:	617b      	str	r3, [r7, #20]
  return(result);
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d105      	bne.n	800993e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009932:	f3ef 8311 	mrs	r3, BASEPRI
 8009936:	613b      	str	r3, [r7, #16]
  return(result);
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d003      	beq.n	8009946 <osSemaphoreNew+0x3e>
 800993e:	4b3f      	ldr	r3, [pc, #252]	; (8009a3c <osSemaphoreNew+0x134>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2b02      	cmp	r3, #2
 8009944:	d075      	beq.n	8009a32 <osSemaphoreNew+0x12a>
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d072      	beq.n	8009a32 <osSemaphoreNew+0x12a>
 800994c:	68ba      	ldr	r2, [r7, #8]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	429a      	cmp	r2, r3
 8009952:	d86e      	bhi.n	8009a32 <osSemaphoreNew+0x12a>
    mem = -1;
 8009954:	f04f 33ff 	mov.w	r3, #4294967295
 8009958:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d015      	beq.n	800998c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d006      	beq.n	8009976 <osSemaphoreNew+0x6e>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	2b4f      	cmp	r3, #79	; 0x4f
 800996e:	d902      	bls.n	8009976 <osSemaphoreNew+0x6e>
        mem = 1;
 8009970:	2301      	movs	r3, #1
 8009972:	623b      	str	r3, [r7, #32]
 8009974:	e00c      	b.n	8009990 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d108      	bne.n	8009990 <osSemaphoreNew+0x88>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	68db      	ldr	r3, [r3, #12]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d104      	bne.n	8009990 <osSemaphoreNew+0x88>
          mem = 0;
 8009986:	2300      	movs	r3, #0
 8009988:	623b      	str	r3, [r7, #32]
 800998a:	e001      	b.n	8009990 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800998c:	2300      	movs	r3, #0
 800998e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8009990:	6a3b      	ldr	r3, [r7, #32]
 8009992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009996:	d04c      	beq.n	8009a32 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2b01      	cmp	r3, #1
 800999c:	d128      	bne.n	80099f0 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800999e:	6a3b      	ldr	r3, [r7, #32]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d10a      	bne.n	80099ba <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	2203      	movs	r2, #3
 80099aa:	9200      	str	r2, [sp, #0]
 80099ac:	2200      	movs	r2, #0
 80099ae:	2100      	movs	r1, #0
 80099b0:	2001      	movs	r0, #1
 80099b2:	f000 fc5f 	bl	800a274 <xQueueGenericCreateStatic>
 80099b6:	6278      	str	r0, [r7, #36]	; 0x24
 80099b8:	e005      	b.n	80099c6 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80099ba:	2203      	movs	r2, #3
 80099bc:	2100      	movs	r1, #0
 80099be:	2001      	movs	r0, #1
 80099c0:	f000 fcda 	bl	800a378 <xQueueGenericCreate>
 80099c4:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80099c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d022      	beq.n	8009a12 <osSemaphoreNew+0x10a>
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d01f      	beq.n	8009a12 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80099d2:	2300      	movs	r3, #0
 80099d4:	2200      	movs	r2, #0
 80099d6:	2100      	movs	r1, #0
 80099d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099da:	f000 fe5f 	bl	800a69c <xQueueGenericSend>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d016      	beq.n	8009a12 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80099e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099e6:	f001 fb55 	bl	800b094 <vQueueDelete>
            hSemaphore = NULL;
 80099ea:	2300      	movs	r3, #0
 80099ec:	627b      	str	r3, [r7, #36]	; 0x24
 80099ee:	e010      	b.n	8009a12 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80099f0:	6a3b      	ldr	r3, [r7, #32]
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d108      	bne.n	8009a08 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	461a      	mov	r2, r3
 80099fc:	68b9      	ldr	r1, [r7, #8]
 80099fe:	68f8      	ldr	r0, [r7, #12]
 8009a00:	f000 fdda 	bl	800a5b8 <xQueueCreateCountingSemaphoreStatic>
 8009a04:	6278      	str	r0, [r7, #36]	; 0x24
 8009a06:	e004      	b.n	8009a12 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009a08:	68b9      	ldr	r1, [r7, #8]
 8009a0a:	68f8      	ldr	r0, [r7, #12]
 8009a0c:	f000 fe0f 	bl	800a62e <xQueueCreateCountingSemaphore>
 8009a10:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d00c      	beq.n	8009a32 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d003      	beq.n	8009a26 <osSemaphoreNew+0x11e>
          name = attr->name;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	61fb      	str	r3, [r7, #28]
 8009a24:	e001      	b.n	8009a2a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8009a26:	2300      	movs	r3, #0
 8009a28:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009a2a:	69f9      	ldr	r1, [r7, #28]
 8009a2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a2e:	f001 fc7f 	bl	800b330 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3728      	adds	r7, #40	; 0x28
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	20008f9c 	.word	0x20008f9c

08009a40 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b088      	sub	sp, #32
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d103      	bne.n	8009a60 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009a58:	f06f 0303 	mvn.w	r3, #3
 8009a5c:	61fb      	str	r3, [r7, #28]
 8009a5e:	e04b      	b.n	8009af8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a60:	f3ef 8305 	mrs	r3, IPSR
 8009a64:	617b      	str	r3, [r7, #20]
  return(result);
 8009a66:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d10f      	bne.n	8009a8c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a6c:	f3ef 8310 	mrs	r3, PRIMASK
 8009a70:	613b      	str	r3, [r7, #16]
  return(result);
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d105      	bne.n	8009a84 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009a78:	f3ef 8311 	mrs	r3, BASEPRI
 8009a7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d026      	beq.n	8009ad2 <osSemaphoreAcquire+0x92>
 8009a84:	4b1f      	ldr	r3, [pc, #124]	; (8009b04 <osSemaphoreAcquire+0xc4>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d122      	bne.n	8009ad2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d003      	beq.n	8009a9a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8009a92:	f06f 0303 	mvn.w	r3, #3
 8009a96:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8009a98:	e02d      	b.n	8009af6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009a9e:	f107 0308 	add.w	r3, r7, #8
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	2100      	movs	r1, #0
 8009aa6:	69b8      	ldr	r0, [r7, #24]
 8009aa8:	f001 fa2e 	bl	800af08 <xQueueReceiveFromISR>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d003      	beq.n	8009aba <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8009ab2:	f06f 0302 	mvn.w	r3, #2
 8009ab6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8009ab8:	e01d      	b.n	8009af6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d01a      	beq.n	8009af6 <osSemaphoreAcquire+0xb6>
 8009ac0:	4b11      	ldr	r3, [pc, #68]	; (8009b08 <osSemaphoreAcquire+0xc8>)
 8009ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ac6:	601a      	str	r2, [r3, #0]
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8009ad0:	e011      	b.n	8009af6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009ad2:	6839      	ldr	r1, [r7, #0]
 8009ad4:	69b8      	ldr	r0, [r7, #24]
 8009ad6:	f001 f903 	bl	800ace0 <xQueueSemaphoreTake>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d00b      	beq.n	8009af8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d003      	beq.n	8009aee <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8009ae6:	f06f 0301 	mvn.w	r3, #1
 8009aea:	61fb      	str	r3, [r7, #28]
 8009aec:	e004      	b.n	8009af8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8009aee:	f06f 0302 	mvn.w	r3, #2
 8009af2:	61fb      	str	r3, [r7, #28]
 8009af4:	e000      	b.n	8009af8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8009af6:	bf00      	nop
      }
    }
  }

  return (stat);
 8009af8:	69fb      	ldr	r3, [r7, #28]
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3720      	adds	r7, #32
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	20008f9c 	.word	0x20008f9c
 8009b08:	e000ed04 	.word	0xe000ed04

08009b0c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b088      	sub	sp, #32
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d103      	bne.n	8009b2a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009b22:	f06f 0303 	mvn.w	r3, #3
 8009b26:	61fb      	str	r3, [r7, #28]
 8009b28:	e03e      	b.n	8009ba8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b2a:	f3ef 8305 	mrs	r3, IPSR
 8009b2e:	617b      	str	r3, [r7, #20]
  return(result);
 8009b30:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d10f      	bne.n	8009b56 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b36:	f3ef 8310 	mrs	r3, PRIMASK
 8009b3a:	613b      	str	r3, [r7, #16]
  return(result);
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d105      	bne.n	8009b4e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009b42:	f3ef 8311 	mrs	r3, BASEPRI
 8009b46:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d01e      	beq.n	8009b8c <osSemaphoreRelease+0x80>
 8009b4e:	4b19      	ldr	r3, [pc, #100]	; (8009bb4 <osSemaphoreRelease+0xa8>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	d11a      	bne.n	8009b8c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8009b56:	2300      	movs	r3, #0
 8009b58:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009b5a:	f107 0308 	add.w	r3, r7, #8
 8009b5e:	4619      	mov	r1, r3
 8009b60:	69b8      	ldr	r0, [r7, #24]
 8009b62:	f000 ff41 	bl	800a9e8 <xQueueGiveFromISR>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d003      	beq.n	8009b74 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8009b6c:	f06f 0302 	mvn.w	r3, #2
 8009b70:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009b72:	e018      	b.n	8009ba6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d015      	beq.n	8009ba6 <osSemaphoreRelease+0x9a>
 8009b7a:	4b0f      	ldr	r3, [pc, #60]	; (8009bb8 <osSemaphoreRelease+0xac>)
 8009b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b80:	601a      	str	r2, [r3, #0]
 8009b82:	f3bf 8f4f 	dsb	sy
 8009b86:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009b8a:	e00c      	b.n	8009ba6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	2200      	movs	r2, #0
 8009b90:	2100      	movs	r1, #0
 8009b92:	69b8      	ldr	r0, [r7, #24]
 8009b94:	f000 fd82 	bl	800a69c <xQueueGenericSend>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d004      	beq.n	8009ba8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8009b9e:	f06f 0302 	mvn.w	r3, #2
 8009ba2:	61fb      	str	r3, [r7, #28]
 8009ba4:	e000      	b.n	8009ba8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009ba6:	bf00      	nop
    }
  }

  return (stat);
 8009ba8:	69fb      	ldr	r3, [r7, #28]
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3720      	adds	r7, #32
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	20008f9c 	.word	0x20008f9c
 8009bb8:	e000ed04 	.word	0xe000ed04

08009bbc <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b088      	sub	sp, #32
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bc8:	f3ef 8305 	mrs	r3, IPSR
 8009bcc:	617b      	str	r3, [r7, #20]
  return(result);
 8009bce:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d10f      	bne.n	8009bf4 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bd4:	f3ef 8310 	mrs	r3, PRIMASK
 8009bd8:	613b      	str	r3, [r7, #16]
  return(result);
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d105      	bne.n	8009bec <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009be0:	f3ef 8311 	mrs	r3, BASEPRI
 8009be4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d007      	beq.n	8009bfc <osSemaphoreDelete+0x40>
 8009bec:	4b0d      	ldr	r3, [pc, #52]	; (8009c24 <osSemaphoreDelete+0x68>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	d103      	bne.n	8009bfc <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8009bf4:	f06f 0305 	mvn.w	r3, #5
 8009bf8:	61fb      	str	r3, [r7, #28]
 8009bfa:	e00e      	b.n	8009c1a <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d103      	bne.n	8009c0a <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8009c02:	f06f 0303 	mvn.w	r3, #3
 8009c06:	61fb      	str	r3, [r7, #28]
 8009c08:	e007      	b.n	8009c1a <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8009c0a:	69b8      	ldr	r0, [r7, #24]
 8009c0c:	f001 fbba 	bl	800b384 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8009c10:	2300      	movs	r3, #0
 8009c12:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8009c14:	69b8      	ldr	r0, [r7, #24]
 8009c16:	f001 fa3d 	bl	800b094 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8009c1a:	69fb      	ldr	r3, [r7, #28]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3720      	adds	r7, #32
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	20008f9c 	.word	0x20008f9c

08009c28 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b08c      	sub	sp, #48	; 0x30
 8009c2c:	af02      	add	r7, sp, #8
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009c34:	2300      	movs	r3, #0
 8009c36:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c38:	f3ef 8305 	mrs	r3, IPSR
 8009c3c:	61bb      	str	r3, [r7, #24]
  return(result);
 8009c3e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d16f      	bne.n	8009d24 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c44:	f3ef 8310 	mrs	r3, PRIMASK
 8009c48:	617b      	str	r3, [r7, #20]
  return(result);
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d105      	bne.n	8009c5c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009c50:	f3ef 8311 	mrs	r3, BASEPRI
 8009c54:	613b      	str	r3, [r7, #16]
  return(result);
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d003      	beq.n	8009c64 <osMessageQueueNew+0x3c>
 8009c5c:	4b34      	ldr	r3, [pc, #208]	; (8009d30 <osMessageQueueNew+0x108>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	d05f      	beq.n	8009d24 <osMessageQueueNew+0xfc>
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d05c      	beq.n	8009d24 <osMessageQueueNew+0xfc>
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d059      	beq.n	8009d24 <osMessageQueueNew+0xfc>
    mem = -1;
 8009c70:	f04f 33ff 	mov.w	r3, #4294967295
 8009c74:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d029      	beq.n	8009cd0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d012      	beq.n	8009caa <osMessageQueueNew+0x82>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	2b4f      	cmp	r3, #79	; 0x4f
 8009c8a:	d90e      	bls.n	8009caa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d00a      	beq.n	8009caa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	695a      	ldr	r2, [r3, #20]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	68b9      	ldr	r1, [r7, #8]
 8009c9c:	fb01 f303 	mul.w	r3, r1, r3
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d302      	bcc.n	8009caa <osMessageQueueNew+0x82>
        mem = 1;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	623b      	str	r3, [r7, #32]
 8009ca8:	e014      	b.n	8009cd4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d110      	bne.n	8009cd4 <osMessageQueueNew+0xac>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d10c      	bne.n	8009cd4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d108      	bne.n	8009cd4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	695b      	ldr	r3, [r3, #20]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d104      	bne.n	8009cd4 <osMessageQueueNew+0xac>
          mem = 0;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	623b      	str	r3, [r7, #32]
 8009cce:	e001      	b.n	8009cd4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009cd4:	6a3b      	ldr	r3, [r7, #32]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d10b      	bne.n	8009cf2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	691a      	ldr	r2, [r3, #16]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	9100      	str	r1, [sp, #0]
 8009ce6:	68b9      	ldr	r1, [r7, #8]
 8009ce8:	68f8      	ldr	r0, [r7, #12]
 8009cea:	f000 fac3 	bl	800a274 <xQueueGenericCreateStatic>
 8009cee:	6278      	str	r0, [r7, #36]	; 0x24
 8009cf0:	e008      	b.n	8009d04 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8009cf2:	6a3b      	ldr	r3, [r7, #32]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d105      	bne.n	8009d04 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	68b9      	ldr	r1, [r7, #8]
 8009cfc:	68f8      	ldr	r0, [r7, #12]
 8009cfe:	f000 fb3b 	bl	800a378 <xQueueGenericCreate>
 8009d02:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00c      	beq.n	8009d24 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d003      	beq.n	8009d18 <osMessageQueueNew+0xf0>
        name = attr->name;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	61fb      	str	r3, [r7, #28]
 8009d16:	e001      	b.n	8009d1c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8009d1c:	69f9      	ldr	r1, [r7, #28]
 8009d1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d20:	f001 fb06 	bl	800b330 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3728      	adds	r7, #40	; 0x28
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	20008f9c 	.word	0x20008f9c

08009d34 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b08a      	sub	sp, #40	; 0x28
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	603b      	str	r3, [r7, #0]
 8009d40:	4613      	mov	r3, r2
 8009d42:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d4c:	f3ef 8305 	mrs	r3, IPSR
 8009d50:	61fb      	str	r3, [r7, #28]
  return(result);
 8009d52:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10f      	bne.n	8009d78 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d58:	f3ef 8310 	mrs	r3, PRIMASK
 8009d5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d105      	bne.n	8009d70 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d64:	f3ef 8311 	mrs	r3, BASEPRI
 8009d68:	617b      	str	r3, [r7, #20]
  return(result);
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d02c      	beq.n	8009dca <osMessageQueuePut+0x96>
 8009d70:	4b28      	ldr	r3, [pc, #160]	; (8009e14 <osMessageQueuePut+0xe0>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	d128      	bne.n	8009dca <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009d78:	6a3b      	ldr	r3, [r7, #32]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d005      	beq.n	8009d8a <osMessageQueuePut+0x56>
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d002      	beq.n	8009d8a <osMessageQueuePut+0x56>
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d003      	beq.n	8009d92 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8009d8a:	f06f 0303 	mvn.w	r3, #3
 8009d8e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009d90:	e039      	b.n	8009e06 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8009d92:	2300      	movs	r3, #0
 8009d94:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009d96:	f107 0210 	add.w	r2, r7, #16
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	68b9      	ldr	r1, [r7, #8]
 8009d9e:	6a38      	ldr	r0, [r7, #32]
 8009da0:	f000 fd82 	bl	800a8a8 <xQueueGenericSendFromISR>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d003      	beq.n	8009db2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8009daa:	f06f 0302 	mvn.w	r3, #2
 8009dae:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009db0:	e029      	b.n	8009e06 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d026      	beq.n	8009e06 <osMessageQueuePut+0xd2>
 8009db8:	4b17      	ldr	r3, [pc, #92]	; (8009e18 <osMessageQueuePut+0xe4>)
 8009dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dbe:	601a      	str	r2, [r3, #0]
 8009dc0:	f3bf 8f4f 	dsb	sy
 8009dc4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009dc8:	e01d      	b.n	8009e06 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009dca:	6a3b      	ldr	r3, [r7, #32]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d002      	beq.n	8009dd6 <osMessageQueuePut+0xa2>
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d103      	bne.n	8009dde <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8009dd6:	f06f 0303 	mvn.w	r3, #3
 8009dda:	627b      	str	r3, [r7, #36]	; 0x24
 8009ddc:	e014      	b.n	8009e08 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009dde:	2300      	movs	r3, #0
 8009de0:	683a      	ldr	r2, [r7, #0]
 8009de2:	68b9      	ldr	r1, [r7, #8]
 8009de4:	6a38      	ldr	r0, [r7, #32]
 8009de6:	f000 fc59 	bl	800a69c <xQueueGenericSend>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d00b      	beq.n	8009e08 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d003      	beq.n	8009dfe <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8009df6:	f06f 0301 	mvn.w	r3, #1
 8009dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8009dfc:	e004      	b.n	8009e08 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8009dfe:	f06f 0302 	mvn.w	r3, #2
 8009e02:	627b      	str	r3, [r7, #36]	; 0x24
 8009e04:	e000      	b.n	8009e08 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009e06:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3728      	adds	r7, #40	; 0x28
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	20008f9c 	.word	0x20008f9c
 8009e18:	e000ed04 	.word	0xe000ed04

08009e1c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b08a      	sub	sp, #40	; 0x28
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	607a      	str	r2, [r7, #4]
 8009e28:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e32:	f3ef 8305 	mrs	r3, IPSR
 8009e36:	61fb      	str	r3, [r7, #28]
  return(result);
 8009e38:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d10f      	bne.n	8009e5e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8009e42:	61bb      	str	r3, [r7, #24]
  return(result);
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d105      	bne.n	8009e56 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009e4a:	f3ef 8311 	mrs	r3, BASEPRI
 8009e4e:	617b      	str	r3, [r7, #20]
  return(result);
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d02c      	beq.n	8009eb0 <osMessageQueueGet+0x94>
 8009e56:	4b28      	ldr	r3, [pc, #160]	; (8009ef8 <osMessageQueueGet+0xdc>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	d128      	bne.n	8009eb0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009e5e:	6a3b      	ldr	r3, [r7, #32]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d005      	beq.n	8009e70 <osMessageQueueGet+0x54>
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d002      	beq.n	8009e70 <osMessageQueueGet+0x54>
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d003      	beq.n	8009e78 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8009e70:	f06f 0303 	mvn.w	r3, #3
 8009e74:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009e76:	e038      	b.n	8009eea <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009e7c:	f107 0310 	add.w	r3, r7, #16
 8009e80:	461a      	mov	r2, r3
 8009e82:	68b9      	ldr	r1, [r7, #8]
 8009e84:	6a38      	ldr	r0, [r7, #32]
 8009e86:	f001 f83f 	bl	800af08 <xQueueReceiveFromISR>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d003      	beq.n	8009e98 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8009e90:	f06f 0302 	mvn.w	r3, #2
 8009e94:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009e96:	e028      	b.n	8009eea <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d025      	beq.n	8009eea <osMessageQueueGet+0xce>
 8009e9e:	4b17      	ldr	r3, [pc, #92]	; (8009efc <osMessageQueueGet+0xe0>)
 8009ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ea4:	601a      	str	r2, [r3, #0]
 8009ea6:	f3bf 8f4f 	dsb	sy
 8009eaa:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009eae:	e01c      	b.n	8009eea <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009eb0:	6a3b      	ldr	r3, [r7, #32]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d002      	beq.n	8009ebc <osMessageQueueGet+0xa0>
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d103      	bne.n	8009ec4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8009ebc:	f06f 0303 	mvn.w	r3, #3
 8009ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8009ec2:	e013      	b.n	8009eec <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009ec4:	683a      	ldr	r2, [r7, #0]
 8009ec6:	68b9      	ldr	r1, [r7, #8]
 8009ec8:	6a38      	ldr	r0, [r7, #32]
 8009eca:	f000 fe23 	bl	800ab14 <xQueueReceive>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d00b      	beq.n	8009eec <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d003      	beq.n	8009ee2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8009eda:	f06f 0301 	mvn.w	r3, #1
 8009ede:	627b      	str	r3, [r7, #36]	; 0x24
 8009ee0:	e004      	b.n	8009eec <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8009ee2:	f06f 0302 	mvn.w	r3, #2
 8009ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8009ee8:	e000      	b.n	8009eec <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009eea:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3728      	adds	r7, #40	; 0x28
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	20008f9c 	.word	0x20008f9c
 8009efc:	e000ed04 	.word	0xe000ed04

08009f00 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b088      	sub	sp, #32
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d102      	bne.n	8009f18 <osMessageQueueGetCount+0x18>
    count = 0U;
 8009f12:	2300      	movs	r3, #0
 8009f14:	61fb      	str	r3, [r7, #28]
 8009f16:	e01e      	b.n	8009f56 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f18:	f3ef 8305 	mrs	r3, IPSR
 8009f1c:	617b      	str	r3, [r7, #20]
  return(result);
 8009f1e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d10f      	bne.n	8009f44 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f24:	f3ef 8310 	mrs	r3, PRIMASK
 8009f28:	613b      	str	r3, [r7, #16]
  return(result);
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d105      	bne.n	8009f3c <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009f30:	f3ef 8311 	mrs	r3, BASEPRI
 8009f34:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d008      	beq.n	8009f4e <osMessageQueueGetCount+0x4e>
 8009f3c:	4b08      	ldr	r3, [pc, #32]	; (8009f60 <osMessageQueueGetCount+0x60>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d104      	bne.n	8009f4e <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8009f44:	69b8      	ldr	r0, [r7, #24]
 8009f46:	f001 f885 	bl	800b054 <uxQueueMessagesWaitingFromISR>
 8009f4a:	61f8      	str	r0, [r7, #28]
 8009f4c:	e003      	b.n	8009f56 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8009f4e:	69b8      	ldr	r0, [r7, #24]
 8009f50:	f001 f860 	bl	800b014 <uxQueueMessagesWaiting>
 8009f54:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8009f56:	69fb      	ldr	r3, [r7, #28]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3720      	adds	r7, #32
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	20008f9c 	.word	0x20008f9c

08009f64 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b088      	sub	sp, #32
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f70:	f3ef 8305 	mrs	r3, IPSR
 8009f74:	617b      	str	r3, [r7, #20]
  return(result);
 8009f76:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d10f      	bne.n	8009f9c <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8009f80:	613b      	str	r3, [r7, #16]
  return(result);
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d105      	bne.n	8009f94 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009f88:	f3ef 8311 	mrs	r3, BASEPRI
 8009f8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d007      	beq.n	8009fa4 <osMessageQueueDelete+0x40>
 8009f94:	4b0d      	ldr	r3, [pc, #52]	; (8009fcc <osMessageQueueDelete+0x68>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2b02      	cmp	r3, #2
 8009f9a:	d103      	bne.n	8009fa4 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 8009f9c:	f06f 0305 	mvn.w	r3, #5
 8009fa0:	61fb      	str	r3, [r7, #28]
 8009fa2:	e00e      	b.n	8009fc2 <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 8009fa4:	69bb      	ldr	r3, [r7, #24]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d103      	bne.n	8009fb2 <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 8009faa:	f06f 0303 	mvn.w	r3, #3
 8009fae:	61fb      	str	r3, [r7, #28]
 8009fb0:	e007      	b.n	8009fc2 <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8009fb2:	69b8      	ldr	r0, [r7, #24]
 8009fb4:	f001 f9e6 	bl	800b384 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8009fbc:	69b8      	ldr	r0, [r7, #24]
 8009fbe:	f001 f869 	bl	800b094 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8009fc2:	69fb      	ldr	r3, [r7, #28]
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3720      	adds	r7, #32
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	20008f9c 	.word	0x20008f9c

08009fd0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009fd0:	b480      	push	{r7}
 8009fd2:	b085      	sub	sp, #20
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	4a07      	ldr	r2, [pc, #28]	; (8009ffc <vApplicationGetIdleTaskMemory+0x2c>)
 8009fe0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	4a06      	ldr	r2, [pc, #24]	; (800a000 <vApplicationGetIdleTaskMemory+0x30>)
 8009fe6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2280      	movs	r2, #128	; 0x80
 8009fec:	601a      	str	r2, [r3, #0]
}
 8009fee:	bf00      	nop
 8009ff0:	3714      	adds	r7, #20
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop
 8009ffc:	20008fa0 	.word	0x20008fa0
 800a000:	20008ffc 	.word	0x20008ffc

0800a004 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a004:	b480      	push	{r7}
 800a006:	b085      	sub	sp, #20
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	4a07      	ldr	r2, [pc, #28]	; (800a030 <vApplicationGetTimerTaskMemory+0x2c>)
 800a014:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	4a06      	ldr	r2, [pc, #24]	; (800a034 <vApplicationGetTimerTaskMemory+0x30>)
 800a01a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a022:	601a      	str	r2, [r3, #0]
}
 800a024:	bf00      	nop
 800a026:	3714      	adds	r7, #20
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr
 800a030:	200091fc 	.word	0x200091fc
 800a034:	20009258 	.word	0x20009258

0800a038 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f103 0208 	add.w	r2, r3, #8
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f04f 32ff 	mov.w	r2, #4294967295
 800a050:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f103 0208 	add.w	r2, r3, #8
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f103 0208 	add.w	r2, r3, #8
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a06c:	bf00      	nop
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a086:	bf00      	nop
 800a088:	370c      	adds	r7, #12
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a092:	b480      	push	{r7}
 800a094:	b085      	sub	sp, #20
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
 800a09a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	689a      	ldr	r2, [r3, #8]
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	683a      	ldr	r2, [r7, #0]
 800a0b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	683a      	ldr	r2, [r7, #0]
 800a0bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	1c5a      	adds	r2, r3, #1
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	601a      	str	r2, [r3, #0]
}
 800a0ce:	bf00      	nop
 800a0d0:	3714      	adds	r7, #20
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr

0800a0da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a0da:	b480      	push	{r7}
 800a0dc:	b085      	sub	sp, #20
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
 800a0e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0f0:	d103      	bne.n	800a0fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	691b      	ldr	r3, [r3, #16]
 800a0f6:	60fb      	str	r3, [r7, #12]
 800a0f8:	e00c      	b.n	800a114 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	3308      	adds	r3, #8
 800a0fe:	60fb      	str	r3, [r7, #12]
 800a100:	e002      	b.n	800a108 <vListInsert+0x2e>
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	60fb      	str	r3, [r7, #12]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	68ba      	ldr	r2, [r7, #8]
 800a110:	429a      	cmp	r2, r3
 800a112:	d2f6      	bcs.n	800a102 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	685a      	ldr	r2, [r3, #4]
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	683a      	ldr	r2, [r7, #0]
 800a122:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	68fa      	ldr	r2, [r7, #12]
 800a128:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	683a      	ldr	r2, [r7, #0]
 800a12e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	1c5a      	adds	r2, r3, #1
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	601a      	str	r2, [r3, #0]
}
 800a140:	bf00      	nop
 800a142:	3714      	adds	r7, #20
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a14c:	b480      	push	{r7}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	6892      	ldr	r2, [r2, #8]
 800a162:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	6852      	ldr	r2, [r2, #4]
 800a16c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	429a      	cmp	r2, r3
 800a176:	d103      	bne.n	800a180 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	689a      	ldr	r2, [r3, #8]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	1e5a      	subs	r2, r3, #1
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
}
 800a194:	4618      	mov	r0, r3
 800a196:	3714      	adds	r7, #20
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d10c      	bne.n	800a1ce <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b8:	b672      	cpsid	i
 800a1ba:	f383 8811 	msr	BASEPRI, r3
 800a1be:	f3bf 8f6f 	isb	sy
 800a1c2:	f3bf 8f4f 	dsb	sy
 800a1c6:	b662      	cpsie	i
 800a1c8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a1ca:	bf00      	nop
 800a1cc:	e7fe      	b.n	800a1cc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a1ce:	f002 fde5 	bl	800cd9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1da:	68f9      	ldr	r1, [r7, #12]
 800a1dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a1de:	fb01 f303 	mul.w	r3, r1, r3
 800a1e2:	441a      	add	r2, r3
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1fe:	3b01      	subs	r3, #1
 800a200:	68f9      	ldr	r1, [r7, #12]
 800a202:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a204:	fb01 f303 	mul.w	r3, r1, r3
 800a208:	441a      	add	r2, r3
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	22ff      	movs	r2, #255	; 0xff
 800a212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	22ff      	movs	r2, #255	; 0xff
 800a21a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d114      	bne.n	800a24e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	691b      	ldr	r3, [r3, #16]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d01a      	beq.n	800a262 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	3310      	adds	r3, #16
 800a230:	4618      	mov	r0, r3
 800a232:	f001 fd8f 	bl	800bd54 <xTaskRemoveFromEventList>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d012      	beq.n	800a262 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a23c:	4b0c      	ldr	r3, [pc, #48]	; (800a270 <xQueueGenericReset+0xd0>)
 800a23e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a242:	601a      	str	r2, [r3, #0]
 800a244:	f3bf 8f4f 	dsb	sy
 800a248:	f3bf 8f6f 	isb	sy
 800a24c:	e009      	b.n	800a262 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	3310      	adds	r3, #16
 800a252:	4618      	mov	r0, r3
 800a254:	f7ff fef0 	bl	800a038 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	3324      	adds	r3, #36	; 0x24
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7ff feeb 	bl	800a038 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a262:	f002 fdcf 	bl	800ce04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a266:	2301      	movs	r3, #1
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	e000ed04 	.word	0xe000ed04

0800a274 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a274:	b580      	push	{r7, lr}
 800a276:	b08e      	sub	sp, #56	; 0x38
 800a278:	af02      	add	r7, sp, #8
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
 800a280:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d10c      	bne.n	800a2a2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800a288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28c:	b672      	cpsid	i
 800a28e:	f383 8811 	msr	BASEPRI, r3
 800a292:	f3bf 8f6f 	isb	sy
 800a296:	f3bf 8f4f 	dsb	sy
 800a29a:	b662      	cpsie	i
 800a29c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a29e:	bf00      	nop
 800a2a0:	e7fe      	b.n	800a2a0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d10c      	bne.n	800a2c2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800a2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ac:	b672      	cpsid	i
 800a2ae:	f383 8811 	msr	BASEPRI, r3
 800a2b2:	f3bf 8f6f 	isb	sy
 800a2b6:	f3bf 8f4f 	dsb	sy
 800a2ba:	b662      	cpsie	i
 800a2bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a2be:	bf00      	nop
 800a2c0:	e7fe      	b.n	800a2c0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d002      	beq.n	800a2ce <xQueueGenericCreateStatic+0x5a>
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d001      	beq.n	800a2d2 <xQueueGenericCreateStatic+0x5e>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e000      	b.n	800a2d4 <xQueueGenericCreateStatic+0x60>
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10c      	bne.n	800a2f2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800a2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2dc:	b672      	cpsid	i
 800a2de:	f383 8811 	msr	BASEPRI, r3
 800a2e2:	f3bf 8f6f 	isb	sy
 800a2e6:	f3bf 8f4f 	dsb	sy
 800a2ea:	b662      	cpsie	i
 800a2ec:	623b      	str	r3, [r7, #32]
}
 800a2ee:	bf00      	nop
 800a2f0:	e7fe      	b.n	800a2f0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d102      	bne.n	800a2fe <xQueueGenericCreateStatic+0x8a>
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d101      	bne.n	800a302 <xQueueGenericCreateStatic+0x8e>
 800a2fe:	2301      	movs	r3, #1
 800a300:	e000      	b.n	800a304 <xQueueGenericCreateStatic+0x90>
 800a302:	2300      	movs	r3, #0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d10c      	bne.n	800a322 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800a308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30c:	b672      	cpsid	i
 800a30e:	f383 8811 	msr	BASEPRI, r3
 800a312:	f3bf 8f6f 	isb	sy
 800a316:	f3bf 8f4f 	dsb	sy
 800a31a:	b662      	cpsie	i
 800a31c:	61fb      	str	r3, [r7, #28]
}
 800a31e:	bf00      	nop
 800a320:	e7fe      	b.n	800a320 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a322:	2350      	movs	r3, #80	; 0x50
 800a324:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	2b50      	cmp	r3, #80	; 0x50
 800a32a:	d00c      	beq.n	800a346 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800a32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a330:	b672      	cpsid	i
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	b662      	cpsie	i
 800a340:	61bb      	str	r3, [r7, #24]
}
 800a342:	bf00      	nop
 800a344:	e7fe      	b.n	800a344 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a346:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d00d      	beq.n	800a36e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a354:	2201      	movs	r2, #1
 800a356:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a35a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	4613      	mov	r3, r2
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	68b9      	ldr	r1, [r7, #8]
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f000 f847 	bl	800a3fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a370:	4618      	mov	r0, r3
 800a372:	3730      	adds	r7, #48	; 0x30
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b08a      	sub	sp, #40	; 0x28
 800a37c:	af02      	add	r7, sp, #8
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	4613      	mov	r3, r2
 800a384:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d10c      	bne.n	800a3a6 <xQueueGenericCreate+0x2e>
	__asm volatile
 800a38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a390:	b672      	cpsid	i
 800a392:	f383 8811 	msr	BASEPRI, r3
 800a396:	f3bf 8f6f 	isb	sy
 800a39a:	f3bf 8f4f 	dsb	sy
 800a39e:	b662      	cpsie	i
 800a3a0:	613b      	str	r3, [r7, #16]
}
 800a3a2:	bf00      	nop
 800a3a4:	e7fe      	b.n	800a3a4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d102      	bne.n	800a3b2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	61fb      	str	r3, [r7, #28]
 800a3b0:	e004      	b.n	800a3bc <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	68ba      	ldr	r2, [r7, #8]
 800a3b6:	fb02 f303 	mul.w	r3, r2, r3
 800a3ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	3350      	adds	r3, #80	; 0x50
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f002 fe17 	bl	800cff4 <pvPortMalloc>
 800a3c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a3c8:	69bb      	ldr	r3, [r7, #24]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d011      	beq.n	800a3f2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a3ce:	69bb      	ldr	r3, [r7, #24]
 800a3d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	3350      	adds	r3, #80	; 0x50
 800a3d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a3d8:	69bb      	ldr	r3, [r7, #24]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a3e0:	79fa      	ldrb	r2, [r7, #7]
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	9300      	str	r3, [sp, #0]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	697a      	ldr	r2, [r7, #20]
 800a3ea:	68b9      	ldr	r1, [r7, #8]
 800a3ec:	68f8      	ldr	r0, [r7, #12]
 800a3ee:	f000 f805 	bl	800a3fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a3f2:	69bb      	ldr	r3, [r7, #24]
	}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3720      	adds	r7, #32
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	607a      	str	r2, [r7, #4]
 800a408:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d103      	bne.n	800a418 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	69ba      	ldr	r2, [r7, #24]
 800a414:	601a      	str	r2, [r3, #0]
 800a416:	e002      	b.n	800a41e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a418:	69bb      	ldr	r3, [r7, #24]
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	68fa      	ldr	r2, [r7, #12]
 800a422:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	68ba      	ldr	r2, [r7, #8]
 800a428:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a42a:	2101      	movs	r1, #1
 800a42c:	69b8      	ldr	r0, [r7, #24]
 800a42e:	f7ff feb7 	bl	800a1a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	78fa      	ldrb	r2, [r7, #3]
 800a436:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a43a:	bf00      	nop
 800a43c:	3710      	adds	r7, #16
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}

0800a442 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a442:	b580      	push	{r7, lr}
 800a444:	b082      	sub	sp, #8
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d00e      	beq.n	800a46e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a462:	2300      	movs	r3, #0
 800a464:	2200      	movs	r2, #0
 800a466:	2100      	movs	r1, #0
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 f917 	bl	800a69c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a46e:	bf00      	nop
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}

0800a476 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a476:	b580      	push	{r7, lr}
 800a478:	b086      	sub	sp, #24
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	4603      	mov	r3, r0
 800a47e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a480:	2301      	movs	r3, #1
 800a482:	617b      	str	r3, [r7, #20]
 800a484:	2300      	movs	r3, #0
 800a486:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a488:	79fb      	ldrb	r3, [r7, #7]
 800a48a:	461a      	mov	r2, r3
 800a48c:	6939      	ldr	r1, [r7, #16]
 800a48e:	6978      	ldr	r0, [r7, #20]
 800a490:	f7ff ff72 	bl	800a378 <xQueueGenericCreate>
 800a494:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a496:	68f8      	ldr	r0, [r7, #12]
 800a498:	f7ff ffd3 	bl	800a442 <prvInitialiseMutex>

		return xNewQueue;
 800a49c:	68fb      	ldr	r3, [r7, #12]
	}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3718      	adds	r7, #24
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b088      	sub	sp, #32
 800a4aa:	af02      	add	r7, sp, #8
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	6039      	str	r1, [r7, #0]
 800a4b0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	617b      	str	r3, [r7, #20]
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a4ba:	79fb      	ldrb	r3, [r7, #7]
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	6939      	ldr	r1, [r7, #16]
 800a4c4:	6978      	ldr	r0, [r7, #20]
 800a4c6:	f7ff fed5 	bl	800a274 <xQueueGenericCreateStatic>
 800a4ca:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f7ff ffb8 	bl	800a442 <prvInitialiseMutex>

		return xNewQueue;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
	}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3718      	adds	r7, #24
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a4dc:	b590      	push	{r4, r7, lr}
 800a4de:	b087      	sub	sp, #28
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d10c      	bne.n	800a508 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 800a4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f2:	b672      	cpsid	i
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	b662      	cpsie	i
 800a502:	60fb      	str	r3, [r7, #12]
}
 800a504:	bf00      	nop
 800a506:	e7fe      	b.n	800a506 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	689c      	ldr	r4, [r3, #8]
 800a50c:	f001 fde8 	bl	800c0e0 <xTaskGetCurrentTaskHandle>
 800a510:	4603      	mov	r3, r0
 800a512:	429c      	cmp	r4, r3
 800a514:	d111      	bne.n	800a53a <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	1e5a      	subs	r2, r3, #1
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d105      	bne.n	800a534 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a528:	2300      	movs	r3, #0
 800a52a:	2200      	movs	r2, #0
 800a52c:	2100      	movs	r1, #0
 800a52e:	6938      	ldr	r0, [r7, #16]
 800a530:	f000 f8b4 	bl	800a69c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a534:	2301      	movs	r3, #1
 800a536:	617b      	str	r3, [r7, #20]
 800a538:	e001      	b.n	800a53e <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a53a:	2300      	movs	r3, #0
 800a53c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a53e:	697b      	ldr	r3, [r7, #20]
	}
 800a540:	4618      	mov	r0, r3
 800a542:	371c      	adds	r7, #28
 800a544:	46bd      	mov	sp, r7
 800a546:	bd90      	pop	{r4, r7, pc}

0800a548 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a548:	b590      	push	{r4, r7, lr}
 800a54a:	b087      	sub	sp, #28
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d10c      	bne.n	800a576 <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 800a55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a560:	b672      	cpsid	i
 800a562:	f383 8811 	msr	BASEPRI, r3
 800a566:	f3bf 8f6f 	isb	sy
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	b662      	cpsie	i
 800a570:	60fb      	str	r3, [r7, #12]
}
 800a572:	bf00      	nop
 800a574:	e7fe      	b.n	800a574 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	689c      	ldr	r4, [r3, #8]
 800a57a:	f001 fdb1 	bl	800c0e0 <xTaskGetCurrentTaskHandle>
 800a57e:	4603      	mov	r3, r0
 800a580:	429c      	cmp	r4, r3
 800a582:	d107      	bne.n	800a594 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	1c5a      	adds	r2, r3, #1
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a58e:	2301      	movs	r3, #1
 800a590:	617b      	str	r3, [r7, #20]
 800a592:	e00c      	b.n	800a5ae <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a594:	6839      	ldr	r1, [r7, #0]
 800a596:	6938      	ldr	r0, [r7, #16]
 800a598:	f000 fba2 	bl	800ace0 <xQueueSemaphoreTake>
 800a59c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d004      	beq.n	800a5ae <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	1c5a      	adds	r2, r3, #1
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a5ae:	697b      	ldr	r3, [r7, #20]
	}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	371c      	adds	r7, #28
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd90      	pop	{r4, r7, pc}

0800a5b8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b08a      	sub	sp, #40	; 0x28
 800a5bc:	af02      	add	r7, sp, #8
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d10c      	bne.n	800a5e4 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800a5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ce:	b672      	cpsid	i
 800a5d0:	f383 8811 	msr	BASEPRI, r3
 800a5d4:	f3bf 8f6f 	isb	sy
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	b662      	cpsie	i
 800a5de:	61bb      	str	r3, [r7, #24]
}
 800a5e0:	bf00      	nop
 800a5e2:	e7fe      	b.n	800a5e2 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a5e4:	68ba      	ldr	r2, [r7, #8]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d90c      	bls.n	800a606 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800a5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f0:	b672      	cpsid	i
 800a5f2:	f383 8811 	msr	BASEPRI, r3
 800a5f6:	f3bf 8f6f 	isb	sy
 800a5fa:	f3bf 8f4f 	dsb	sy
 800a5fe:	b662      	cpsie	i
 800a600:	617b      	str	r3, [r7, #20]
}
 800a602:	bf00      	nop
 800a604:	e7fe      	b.n	800a604 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a606:	2302      	movs	r3, #2
 800a608:	9300      	str	r3, [sp, #0]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	2100      	movs	r1, #0
 800a610:	68f8      	ldr	r0, [r7, #12]
 800a612:	f7ff fe2f 	bl	800a274 <xQueueGenericCreateStatic>
 800a616:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a618:	69fb      	ldr	r3, [r7, #28]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d002      	beq.n	800a624 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a61e:	69fb      	ldr	r3, [r7, #28]
 800a620:	68ba      	ldr	r2, [r7, #8]
 800a622:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a624:	69fb      	ldr	r3, [r7, #28]
	}
 800a626:	4618      	mov	r0, r3
 800a628:	3720      	adds	r7, #32
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b086      	sub	sp, #24
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
 800a636:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d10c      	bne.n	800a658 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800a63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a642:	b672      	cpsid	i
 800a644:	f383 8811 	msr	BASEPRI, r3
 800a648:	f3bf 8f6f 	isb	sy
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	b662      	cpsie	i
 800a652:	613b      	str	r3, [r7, #16]
}
 800a654:	bf00      	nop
 800a656:	e7fe      	b.n	800a656 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a658:	683a      	ldr	r2, [r7, #0]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d90c      	bls.n	800a67a <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800a660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a664:	b672      	cpsid	i
 800a666:	f383 8811 	msr	BASEPRI, r3
 800a66a:	f3bf 8f6f 	isb	sy
 800a66e:	f3bf 8f4f 	dsb	sy
 800a672:	b662      	cpsie	i
 800a674:	60fb      	str	r3, [r7, #12]
}
 800a676:	bf00      	nop
 800a678:	e7fe      	b.n	800a678 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a67a:	2202      	movs	r2, #2
 800a67c:	2100      	movs	r1, #0
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f7ff fe7a 	bl	800a378 <xQueueGenericCreate>
 800a684:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d002      	beq.n	800a692 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	683a      	ldr	r2, [r7, #0]
 800a690:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a692:	697b      	ldr	r3, [r7, #20]
	}
 800a694:	4618      	mov	r0, r3
 800a696:	3718      	adds	r7, #24
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b08e      	sub	sp, #56	; 0x38
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]
 800a6a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d10c      	bne.n	800a6d2 <xQueueGenericSend+0x36>
	__asm volatile
 800a6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6bc:	b672      	cpsid	i
 800a6be:	f383 8811 	msr	BASEPRI, r3
 800a6c2:	f3bf 8f6f 	isb	sy
 800a6c6:	f3bf 8f4f 	dsb	sy
 800a6ca:	b662      	cpsie	i
 800a6cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a6ce:	bf00      	nop
 800a6d0:	e7fe      	b.n	800a6d0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d103      	bne.n	800a6e0 <xQueueGenericSend+0x44>
 800a6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d101      	bne.n	800a6e4 <xQueueGenericSend+0x48>
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e000      	b.n	800a6e6 <xQueueGenericSend+0x4a>
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d10c      	bne.n	800a704 <xQueueGenericSend+0x68>
	__asm volatile
 800a6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ee:	b672      	cpsid	i
 800a6f0:	f383 8811 	msr	BASEPRI, r3
 800a6f4:	f3bf 8f6f 	isb	sy
 800a6f8:	f3bf 8f4f 	dsb	sy
 800a6fc:	b662      	cpsie	i
 800a6fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a700:	bf00      	nop
 800a702:	e7fe      	b.n	800a702 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	2b02      	cmp	r3, #2
 800a708:	d103      	bne.n	800a712 <xQueueGenericSend+0x76>
 800a70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d101      	bne.n	800a716 <xQueueGenericSend+0x7a>
 800a712:	2301      	movs	r3, #1
 800a714:	e000      	b.n	800a718 <xQueueGenericSend+0x7c>
 800a716:	2300      	movs	r3, #0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d10c      	bne.n	800a736 <xQueueGenericSend+0x9a>
	__asm volatile
 800a71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a720:	b672      	cpsid	i
 800a722:	f383 8811 	msr	BASEPRI, r3
 800a726:	f3bf 8f6f 	isb	sy
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	b662      	cpsie	i
 800a730:	623b      	str	r3, [r7, #32]
}
 800a732:	bf00      	nop
 800a734:	e7fe      	b.n	800a734 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a736:	f001 fce3 	bl	800c100 <xTaskGetSchedulerState>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d102      	bne.n	800a746 <xQueueGenericSend+0xaa>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d101      	bne.n	800a74a <xQueueGenericSend+0xae>
 800a746:	2301      	movs	r3, #1
 800a748:	e000      	b.n	800a74c <xQueueGenericSend+0xb0>
 800a74a:	2300      	movs	r3, #0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d10c      	bne.n	800a76a <xQueueGenericSend+0xce>
	__asm volatile
 800a750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a754:	b672      	cpsid	i
 800a756:	f383 8811 	msr	BASEPRI, r3
 800a75a:	f3bf 8f6f 	isb	sy
 800a75e:	f3bf 8f4f 	dsb	sy
 800a762:	b662      	cpsie	i
 800a764:	61fb      	str	r3, [r7, #28]
}
 800a766:	bf00      	nop
 800a768:	e7fe      	b.n	800a768 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a76a:	f002 fb17 	bl	800cd9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a776:	429a      	cmp	r2, r3
 800a778:	d302      	bcc.n	800a780 <xQueueGenericSend+0xe4>
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	d129      	bne.n	800a7d4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a780:	683a      	ldr	r2, [r7, #0]
 800a782:	68b9      	ldr	r1, [r7, #8]
 800a784:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a786:	f000 fcc2 	bl	800b10e <prvCopyDataToQueue>
 800a78a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a790:	2b00      	cmp	r3, #0
 800a792:	d010      	beq.n	800a7b6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a796:	3324      	adds	r3, #36	; 0x24
 800a798:	4618      	mov	r0, r3
 800a79a:	f001 fadb 	bl	800bd54 <xTaskRemoveFromEventList>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d013      	beq.n	800a7cc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a7a4:	4b3f      	ldr	r3, [pc, #252]	; (800a8a4 <xQueueGenericSend+0x208>)
 800a7a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7aa:	601a      	str	r2, [r3, #0]
 800a7ac:	f3bf 8f4f 	dsb	sy
 800a7b0:	f3bf 8f6f 	isb	sy
 800a7b4:	e00a      	b.n	800a7cc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d007      	beq.n	800a7cc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a7bc:	4b39      	ldr	r3, [pc, #228]	; (800a8a4 <xQueueGenericSend+0x208>)
 800a7be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7c2:	601a      	str	r2, [r3, #0]
 800a7c4:	f3bf 8f4f 	dsb	sy
 800a7c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a7cc:	f002 fb1a 	bl	800ce04 <vPortExitCritical>
				return pdPASS;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	e063      	b.n	800a89c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d103      	bne.n	800a7e2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a7da:	f002 fb13 	bl	800ce04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	e05c      	b.n	800a89c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a7e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d106      	bne.n	800a7f6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a7e8:	f107 0314 	add.w	r3, r7, #20
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f001 fb17 	bl	800be20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7f6:	f002 fb05 	bl	800ce04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7fa:	f001 f86b 	bl	800b8d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7fe:	f002 facd 	bl	800cd9c <vPortEnterCritical>
 800a802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a804:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a808:	b25b      	sxtb	r3, r3
 800a80a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a80e:	d103      	bne.n	800a818 <xQueueGenericSend+0x17c>
 800a810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a812:	2200      	movs	r2, #0
 800a814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a81e:	b25b      	sxtb	r3, r3
 800a820:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a824:	d103      	bne.n	800a82e <xQueueGenericSend+0x192>
 800a826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a828:	2200      	movs	r2, #0
 800a82a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a82e:	f002 fae9 	bl	800ce04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a832:	1d3a      	adds	r2, r7, #4
 800a834:	f107 0314 	add.w	r3, r7, #20
 800a838:	4611      	mov	r1, r2
 800a83a:	4618      	mov	r0, r3
 800a83c:	f001 fb06 	bl	800be4c <xTaskCheckForTimeOut>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d124      	bne.n	800a890 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a846:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a848:	f000 fd59 	bl	800b2fe <prvIsQueueFull>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d018      	beq.n	800a884 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a854:	3310      	adds	r3, #16
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	4611      	mov	r1, r2
 800a85a:	4618      	mov	r0, r3
 800a85c:	f001 fa26 	bl	800bcac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a862:	f000 fce4 	bl	800b22e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a866:	f001 f843 	bl	800b8f0 <xTaskResumeAll>
 800a86a:	4603      	mov	r3, r0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	f47f af7c 	bne.w	800a76a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800a872:	4b0c      	ldr	r3, [pc, #48]	; (800a8a4 <xQueueGenericSend+0x208>)
 800a874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a878:	601a      	str	r2, [r3, #0]
 800a87a:	f3bf 8f4f 	dsb	sy
 800a87e:	f3bf 8f6f 	isb	sy
 800a882:	e772      	b.n	800a76a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a886:	f000 fcd2 	bl	800b22e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a88a:	f001 f831 	bl	800b8f0 <xTaskResumeAll>
 800a88e:	e76c      	b.n	800a76a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a892:	f000 fccc 	bl	800b22e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a896:	f001 f82b 	bl	800b8f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a89a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3738      	adds	r7, #56	; 0x38
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}
 800a8a4:	e000ed04 	.word	0xe000ed04

0800a8a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b08e      	sub	sp, #56	; 0x38
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]
 800a8b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d10c      	bne.n	800a8da <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800a8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c4:	b672      	cpsid	i
 800a8c6:	f383 8811 	msr	BASEPRI, r3
 800a8ca:	f3bf 8f6f 	isb	sy
 800a8ce:	f3bf 8f4f 	dsb	sy
 800a8d2:	b662      	cpsie	i
 800a8d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8d6:	bf00      	nop
 800a8d8:	e7fe      	b.n	800a8d8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d103      	bne.n	800a8e8 <xQueueGenericSendFromISR+0x40>
 800a8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d101      	bne.n	800a8ec <xQueueGenericSendFromISR+0x44>
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e000      	b.n	800a8ee <xQueueGenericSendFromISR+0x46>
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d10c      	bne.n	800a90c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800a8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f6:	b672      	cpsid	i
 800a8f8:	f383 8811 	msr	BASEPRI, r3
 800a8fc:	f3bf 8f6f 	isb	sy
 800a900:	f3bf 8f4f 	dsb	sy
 800a904:	b662      	cpsie	i
 800a906:	623b      	str	r3, [r7, #32]
}
 800a908:	bf00      	nop
 800a90a:	e7fe      	b.n	800a90a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	2b02      	cmp	r3, #2
 800a910:	d103      	bne.n	800a91a <xQueueGenericSendFromISR+0x72>
 800a912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a916:	2b01      	cmp	r3, #1
 800a918:	d101      	bne.n	800a91e <xQueueGenericSendFromISR+0x76>
 800a91a:	2301      	movs	r3, #1
 800a91c:	e000      	b.n	800a920 <xQueueGenericSendFromISR+0x78>
 800a91e:	2300      	movs	r3, #0
 800a920:	2b00      	cmp	r3, #0
 800a922:	d10c      	bne.n	800a93e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800a924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a928:	b672      	cpsid	i
 800a92a:	f383 8811 	msr	BASEPRI, r3
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f3bf 8f4f 	dsb	sy
 800a936:	b662      	cpsie	i
 800a938:	61fb      	str	r3, [r7, #28]
}
 800a93a:	bf00      	nop
 800a93c:	e7fe      	b.n	800a93c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a93e:	f002 fb15 	bl	800cf6c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a942:	f3ef 8211 	mrs	r2, BASEPRI
 800a946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94a:	b672      	cpsid	i
 800a94c:	f383 8811 	msr	BASEPRI, r3
 800a950:	f3bf 8f6f 	isb	sy
 800a954:	f3bf 8f4f 	dsb	sy
 800a958:	b662      	cpsie	i
 800a95a:	61ba      	str	r2, [r7, #24]
 800a95c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a95e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a960:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d302      	bcc.n	800a974 <xQueueGenericSendFromISR+0xcc>
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	2b02      	cmp	r3, #2
 800a972:	d12c      	bne.n	800a9ce <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a976:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a97a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a97e:	683a      	ldr	r2, [r7, #0]
 800a980:	68b9      	ldr	r1, [r7, #8]
 800a982:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a984:	f000 fbc3 	bl	800b10e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a988:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a98c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a990:	d112      	bne.n	800a9b8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a996:	2b00      	cmp	r3, #0
 800a998:	d016      	beq.n	800a9c8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99c:	3324      	adds	r3, #36	; 0x24
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f001 f9d8 	bl	800bd54 <xTaskRemoveFromEventList>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00e      	beq.n	800a9c8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00b      	beq.n	800a9c8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	601a      	str	r2, [r3, #0]
 800a9b6:	e007      	b.n	800a9c8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a9b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a9bc:	3301      	adds	r3, #1
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	b25a      	sxtb	r2, r3
 800a9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a9cc:	e001      	b.n	800a9d2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	637b      	str	r3, [r7, #52]	; 0x34
 800a9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a9dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3738      	adds	r7, #56	; 0x38
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b08e      	sub	sp, #56	; 0x38
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d10c      	bne.n	800aa16 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800a9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa00:	b672      	cpsid	i
 800aa02:	f383 8811 	msr	BASEPRI, r3
 800aa06:	f3bf 8f6f 	isb	sy
 800aa0a:	f3bf 8f4f 	dsb	sy
 800aa0e:	b662      	cpsie	i
 800aa10:	623b      	str	r3, [r7, #32]
}
 800aa12:	bf00      	nop
 800aa14:	e7fe      	b.n	800aa14 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800aa16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d00c      	beq.n	800aa38 <xQueueGiveFromISR+0x50>
	__asm volatile
 800aa1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa22:	b672      	cpsid	i
 800aa24:	f383 8811 	msr	BASEPRI, r3
 800aa28:	f3bf 8f6f 	isb	sy
 800aa2c:	f3bf 8f4f 	dsb	sy
 800aa30:	b662      	cpsie	i
 800aa32:	61fb      	str	r3, [r7, #28]
}
 800aa34:	bf00      	nop
 800aa36:	e7fe      	b.n	800aa36 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800aa38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d103      	bne.n	800aa48 <xQueueGiveFromISR+0x60>
 800aa40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d101      	bne.n	800aa4c <xQueueGiveFromISR+0x64>
 800aa48:	2301      	movs	r3, #1
 800aa4a:	e000      	b.n	800aa4e <xQueueGiveFromISR+0x66>
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d10c      	bne.n	800aa6c <xQueueGiveFromISR+0x84>
	__asm volatile
 800aa52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa56:	b672      	cpsid	i
 800aa58:	f383 8811 	msr	BASEPRI, r3
 800aa5c:	f3bf 8f6f 	isb	sy
 800aa60:	f3bf 8f4f 	dsb	sy
 800aa64:	b662      	cpsie	i
 800aa66:	61bb      	str	r3, [r7, #24]
}
 800aa68:	bf00      	nop
 800aa6a:	e7fe      	b.n	800aa6a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa6c:	f002 fa7e 	bl	800cf6c <vPortValidateInterruptPriority>
	__asm volatile
 800aa70:	f3ef 8211 	mrs	r2, BASEPRI
 800aa74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa78:	b672      	cpsid	i
 800aa7a:	f383 8811 	msr	BASEPRI, r3
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	f3bf 8f4f 	dsb	sy
 800aa86:	b662      	cpsie	i
 800aa88:	617a      	str	r2, [r7, #20]
 800aa8a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800aa8c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa94:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800aa96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d22b      	bcs.n	800aaf8 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aaa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aaa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aaaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaac:	1c5a      	adds	r2, r3, #1
 800aaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aab2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaba:	d112      	bne.n	800aae2 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aabe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d016      	beq.n	800aaf2 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac6:	3324      	adds	r3, #36	; 0x24
 800aac8:	4618      	mov	r0, r3
 800aaca:	f001 f943 	bl	800bd54 <xTaskRemoveFromEventList>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d00e      	beq.n	800aaf2 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00b      	beq.n	800aaf2 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	2201      	movs	r2, #1
 800aade:	601a      	str	r2, [r3, #0]
 800aae0:	e007      	b.n	800aaf2 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aae2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aae6:	3301      	adds	r3, #1
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	b25a      	sxtb	r2, r3
 800aaec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	637b      	str	r3, [r7, #52]	; 0x34
 800aaf6:	e001      	b.n	800aafc <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	637b      	str	r3, [r7, #52]	; 0x34
 800aafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafe:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f383 8811 	msr	BASEPRI, r3
}
 800ab06:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3738      	adds	r7, #56	; 0x38
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
	...

0800ab14 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b08c      	sub	sp, #48	; 0x30
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab20:	2300      	movs	r3, #0
 800ab22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ab28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d10c      	bne.n	800ab48 <xQueueReceive+0x34>
	__asm volatile
 800ab2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab32:	b672      	cpsid	i
 800ab34:	f383 8811 	msr	BASEPRI, r3
 800ab38:	f3bf 8f6f 	isb	sy
 800ab3c:	f3bf 8f4f 	dsb	sy
 800ab40:	b662      	cpsie	i
 800ab42:	623b      	str	r3, [r7, #32]
}
 800ab44:	bf00      	nop
 800ab46:	e7fe      	b.n	800ab46 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d103      	bne.n	800ab56 <xQueueReceive+0x42>
 800ab4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d101      	bne.n	800ab5a <xQueueReceive+0x46>
 800ab56:	2301      	movs	r3, #1
 800ab58:	e000      	b.n	800ab5c <xQueueReceive+0x48>
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d10c      	bne.n	800ab7a <xQueueReceive+0x66>
	__asm volatile
 800ab60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab64:	b672      	cpsid	i
 800ab66:	f383 8811 	msr	BASEPRI, r3
 800ab6a:	f3bf 8f6f 	isb	sy
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	b662      	cpsie	i
 800ab74:	61fb      	str	r3, [r7, #28]
}
 800ab76:	bf00      	nop
 800ab78:	e7fe      	b.n	800ab78 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab7a:	f001 fac1 	bl	800c100 <xTaskGetSchedulerState>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d102      	bne.n	800ab8a <xQueueReceive+0x76>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d101      	bne.n	800ab8e <xQueueReceive+0x7a>
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e000      	b.n	800ab90 <xQueueReceive+0x7c>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d10c      	bne.n	800abae <xQueueReceive+0x9a>
	__asm volatile
 800ab94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab98:	b672      	cpsid	i
 800ab9a:	f383 8811 	msr	BASEPRI, r3
 800ab9e:	f3bf 8f6f 	isb	sy
 800aba2:	f3bf 8f4f 	dsb	sy
 800aba6:	b662      	cpsie	i
 800aba8:	61bb      	str	r3, [r7, #24]
}
 800abaa:	bf00      	nop
 800abac:	e7fe      	b.n	800abac <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800abae:	f002 f8f5 	bl	800cd9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d01f      	beq.n	800abfe <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800abbe:	68b9      	ldr	r1, [r7, #8]
 800abc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abc2:	f000 fb0e 	bl	800b1e2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800abc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc8:	1e5a      	subs	r2, r3, #1
 800abca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abcc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd0:	691b      	ldr	r3, [r3, #16]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00f      	beq.n	800abf6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd8:	3310      	adds	r3, #16
 800abda:	4618      	mov	r0, r3
 800abdc:	f001 f8ba 	bl	800bd54 <xTaskRemoveFromEventList>
 800abe0:	4603      	mov	r3, r0
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d007      	beq.n	800abf6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800abe6:	4b3d      	ldr	r3, [pc, #244]	; (800acdc <xQueueReceive+0x1c8>)
 800abe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abec:	601a      	str	r2, [r3, #0]
 800abee:	f3bf 8f4f 	dsb	sy
 800abf2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800abf6:	f002 f905 	bl	800ce04 <vPortExitCritical>
				return pdPASS;
 800abfa:	2301      	movs	r3, #1
 800abfc:	e069      	b.n	800acd2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d103      	bne.n	800ac0c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac04:	f002 f8fe 	bl	800ce04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	e062      	b.n	800acd2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d106      	bne.n	800ac20 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac12:	f107 0310 	add.w	r3, r7, #16
 800ac16:	4618      	mov	r0, r3
 800ac18:	f001 f902 	bl	800be20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac20:	f002 f8f0 	bl	800ce04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac24:	f000 fe56 	bl	800b8d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac28:	f002 f8b8 	bl	800cd9c <vPortEnterCritical>
 800ac2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac32:	b25b      	sxtb	r3, r3
 800ac34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac38:	d103      	bne.n	800ac42 <xQueueReceive+0x12e>
 800ac3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac48:	b25b      	sxtb	r3, r3
 800ac4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac4e:	d103      	bne.n	800ac58 <xQueueReceive+0x144>
 800ac50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac52:	2200      	movs	r2, #0
 800ac54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac58:	f002 f8d4 	bl	800ce04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac5c:	1d3a      	adds	r2, r7, #4
 800ac5e:	f107 0310 	add.w	r3, r7, #16
 800ac62:	4611      	mov	r1, r2
 800ac64:	4618      	mov	r0, r3
 800ac66:	f001 f8f1 	bl	800be4c <xTaskCheckForTimeOut>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d123      	bne.n	800acb8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac72:	f000 fb2e 	bl	800b2d2 <prvIsQueueEmpty>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d017      	beq.n	800acac <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ac7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac7e:	3324      	adds	r3, #36	; 0x24
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	4611      	mov	r1, r2
 800ac84:	4618      	mov	r0, r3
 800ac86:	f001 f811 	bl	800bcac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ac8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac8c:	f000 facf 	bl	800b22e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ac90:	f000 fe2e 	bl	800b8f0 <xTaskResumeAll>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d189      	bne.n	800abae <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800ac9a:	4b10      	ldr	r3, [pc, #64]	; (800acdc <xQueueReceive+0x1c8>)
 800ac9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aca0:	601a      	str	r2, [r3, #0]
 800aca2:	f3bf 8f4f 	dsb	sy
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	e780      	b.n	800abae <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800acac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acae:	f000 fabe 	bl	800b22e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800acb2:	f000 fe1d 	bl	800b8f0 <xTaskResumeAll>
 800acb6:	e77a      	b.n	800abae <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800acb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acba:	f000 fab8 	bl	800b22e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800acbe:	f000 fe17 	bl	800b8f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800acc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acc4:	f000 fb05 	bl	800b2d2 <prvIsQueueEmpty>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	f43f af6f 	beq.w	800abae <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800acd0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3730      	adds	r7, #48	; 0x30
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	e000ed04 	.word	0xe000ed04

0800ace0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b08e      	sub	sp, #56	; 0x38
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800acea:	2300      	movs	r3, #0
 800acec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800acf2:	2300      	movs	r3, #0
 800acf4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800acf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d10c      	bne.n	800ad16 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800acfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad00:	b672      	cpsid	i
 800ad02:	f383 8811 	msr	BASEPRI, r3
 800ad06:	f3bf 8f6f 	isb	sy
 800ad0a:	f3bf 8f4f 	dsb	sy
 800ad0e:	b662      	cpsie	i
 800ad10:	623b      	str	r3, [r7, #32]
}
 800ad12:	bf00      	nop
 800ad14:	e7fe      	b.n	800ad14 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ad16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d00c      	beq.n	800ad38 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800ad1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad22:	b672      	cpsid	i
 800ad24:	f383 8811 	msr	BASEPRI, r3
 800ad28:	f3bf 8f6f 	isb	sy
 800ad2c:	f3bf 8f4f 	dsb	sy
 800ad30:	b662      	cpsie	i
 800ad32:	61fb      	str	r3, [r7, #28]
}
 800ad34:	bf00      	nop
 800ad36:	e7fe      	b.n	800ad36 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad38:	f001 f9e2 	bl	800c100 <xTaskGetSchedulerState>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d102      	bne.n	800ad48 <xQueueSemaphoreTake+0x68>
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d101      	bne.n	800ad4c <xQueueSemaphoreTake+0x6c>
 800ad48:	2301      	movs	r3, #1
 800ad4a:	e000      	b.n	800ad4e <xQueueSemaphoreTake+0x6e>
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d10c      	bne.n	800ad6c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800ad52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad56:	b672      	cpsid	i
 800ad58:	f383 8811 	msr	BASEPRI, r3
 800ad5c:	f3bf 8f6f 	isb	sy
 800ad60:	f3bf 8f4f 	dsb	sy
 800ad64:	b662      	cpsie	i
 800ad66:	61bb      	str	r3, [r7, #24]
}
 800ad68:	bf00      	nop
 800ad6a:	e7fe      	b.n	800ad6a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad6c:	f002 f816 	bl	800cd9c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ad70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad74:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ad76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d024      	beq.n	800adc6 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ad7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad7e:	1e5a      	subs	r2, r3, #1
 800ad80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad82:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d104      	bne.n	800ad96 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ad8c:	f001 fb36 	bl	800c3fc <pvTaskIncrementMutexHeldCount>
 800ad90:	4602      	mov	r2, r0
 800ad92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad94:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad98:	691b      	ldr	r3, [r3, #16]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00f      	beq.n	800adbe <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada0:	3310      	adds	r3, #16
 800ada2:	4618      	mov	r0, r3
 800ada4:	f000 ffd6 	bl	800bd54 <xTaskRemoveFromEventList>
 800ada8:	4603      	mov	r3, r0
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d007      	beq.n	800adbe <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800adae:	4b55      	ldr	r3, [pc, #340]	; (800af04 <xQueueSemaphoreTake+0x224>)
 800adb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adb4:	601a      	str	r2, [r3, #0]
 800adb6:	f3bf 8f4f 	dsb	sy
 800adba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800adbe:	f002 f821 	bl	800ce04 <vPortExitCritical>
				return pdPASS;
 800adc2:	2301      	movs	r3, #1
 800adc4:	e099      	b.n	800aefa <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d113      	bne.n	800adf4 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800adcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adce:	2b00      	cmp	r3, #0
 800add0:	d00c      	beq.n	800adec <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800add2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add6:	b672      	cpsid	i
 800add8:	f383 8811 	msr	BASEPRI, r3
 800addc:	f3bf 8f6f 	isb	sy
 800ade0:	f3bf 8f4f 	dsb	sy
 800ade4:	b662      	cpsie	i
 800ade6:	617b      	str	r3, [r7, #20]
}
 800ade8:	bf00      	nop
 800adea:	e7fe      	b.n	800adea <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800adec:	f002 f80a 	bl	800ce04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800adf0:	2300      	movs	r3, #0
 800adf2:	e082      	b.n	800aefa <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800adf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d106      	bne.n	800ae08 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800adfa:	f107 030c 	add.w	r3, r7, #12
 800adfe:	4618      	mov	r0, r3
 800ae00:	f001 f80e 	bl	800be20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae04:	2301      	movs	r3, #1
 800ae06:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae08:	f001 fffc 	bl	800ce04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae0c:	f000 fd62 	bl	800b8d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae10:	f001 ffc4 	bl	800cd9c <vPortEnterCritical>
 800ae14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae1a:	b25b      	sxtb	r3, r3
 800ae1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae20:	d103      	bne.n	800ae2a <xQueueSemaphoreTake+0x14a>
 800ae22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae24:	2200      	movs	r2, #0
 800ae26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae30:	b25b      	sxtb	r3, r3
 800ae32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae36:	d103      	bne.n	800ae40 <xQueueSemaphoreTake+0x160>
 800ae38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae40:	f001 ffe0 	bl	800ce04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae44:	463a      	mov	r2, r7
 800ae46:	f107 030c 	add.w	r3, r7, #12
 800ae4a:	4611      	mov	r1, r2
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f000 fffd 	bl	800be4c <xTaskCheckForTimeOut>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d132      	bne.n	800aebe <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae5a:	f000 fa3a 	bl	800b2d2 <prvIsQueueEmpty>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d026      	beq.n	800aeb2 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d109      	bne.n	800ae80 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800ae6c:	f001 ff96 	bl	800cd9c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae72:	689b      	ldr	r3, [r3, #8]
 800ae74:	4618      	mov	r0, r3
 800ae76:	f001 f961 	bl	800c13c <xTaskPriorityInherit>
 800ae7a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ae7c:	f001 ffc2 	bl	800ce04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ae80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae82:	3324      	adds	r3, #36	; 0x24
 800ae84:	683a      	ldr	r2, [r7, #0]
 800ae86:	4611      	mov	r1, r2
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f000 ff0f 	bl	800bcac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae90:	f000 f9cd 	bl	800b22e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae94:	f000 fd2c 	bl	800b8f0 <xTaskResumeAll>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f47f af66 	bne.w	800ad6c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800aea0:	4b18      	ldr	r3, [pc, #96]	; (800af04 <xQueueSemaphoreTake+0x224>)
 800aea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aea6:	601a      	str	r2, [r3, #0]
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	f3bf 8f6f 	isb	sy
 800aeb0:	e75c      	b.n	800ad6c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800aeb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aeb4:	f000 f9bb 	bl	800b22e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aeb8:	f000 fd1a 	bl	800b8f0 <xTaskResumeAll>
 800aebc:	e756      	b.n	800ad6c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800aebe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aec0:	f000 f9b5 	bl	800b22e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aec4:	f000 fd14 	bl	800b8f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aec8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aeca:	f000 fa02 	bl	800b2d2 <prvIsQueueEmpty>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f43f af4b 	beq.w	800ad6c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d00d      	beq.n	800aef8 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800aedc:	f001 ff5e 	bl	800cd9c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aee0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aee2:	f000 f8fc 	bl	800b0de <prvGetDisinheritPriorityAfterTimeout>
 800aee6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aeee:	4618      	mov	r0, r3
 800aef0:	f001 f9fe 	bl	800c2f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aef4:	f001 ff86 	bl	800ce04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aef8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3738      	adds	r7, #56	; 0x38
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	e000ed04 	.word	0xe000ed04

0800af08 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b08e      	sub	sp, #56	; 0x38
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d10c      	bne.n	800af38 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800af1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af22:	b672      	cpsid	i
 800af24:	f383 8811 	msr	BASEPRI, r3
 800af28:	f3bf 8f6f 	isb	sy
 800af2c:	f3bf 8f4f 	dsb	sy
 800af30:	b662      	cpsie	i
 800af32:	623b      	str	r3, [r7, #32]
}
 800af34:	bf00      	nop
 800af36:	e7fe      	b.n	800af36 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d103      	bne.n	800af46 <xQueueReceiveFromISR+0x3e>
 800af3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af42:	2b00      	cmp	r3, #0
 800af44:	d101      	bne.n	800af4a <xQueueReceiveFromISR+0x42>
 800af46:	2301      	movs	r3, #1
 800af48:	e000      	b.n	800af4c <xQueueReceiveFromISR+0x44>
 800af4a:	2300      	movs	r3, #0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d10c      	bne.n	800af6a <xQueueReceiveFromISR+0x62>
	__asm volatile
 800af50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af54:	b672      	cpsid	i
 800af56:	f383 8811 	msr	BASEPRI, r3
 800af5a:	f3bf 8f6f 	isb	sy
 800af5e:	f3bf 8f4f 	dsb	sy
 800af62:	b662      	cpsie	i
 800af64:	61fb      	str	r3, [r7, #28]
}
 800af66:	bf00      	nop
 800af68:	e7fe      	b.n	800af68 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800af6a:	f001 ffff 	bl	800cf6c <vPortValidateInterruptPriority>
	__asm volatile
 800af6e:	f3ef 8211 	mrs	r2, BASEPRI
 800af72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af76:	b672      	cpsid	i
 800af78:	f383 8811 	msr	BASEPRI, r3
 800af7c:	f3bf 8f6f 	isb	sy
 800af80:	f3bf 8f4f 	dsb	sy
 800af84:	b662      	cpsie	i
 800af86:	61ba      	str	r2, [r7, #24]
 800af88:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800af8a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800af8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af96:	2b00      	cmp	r3, #0
 800af98:	d02f      	beq.n	800affa <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800af9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800afa4:	68b9      	ldr	r1, [r7, #8]
 800afa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afa8:	f000 f91b 	bl	800b1e2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800afac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afae:	1e5a      	subs	r2, r3, #1
 800afb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800afb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800afb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afbc:	d112      	bne.n	800afe4 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc0:	691b      	ldr	r3, [r3, #16]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d016      	beq.n	800aff4 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc8:	3310      	adds	r3, #16
 800afca:	4618      	mov	r0, r3
 800afcc:	f000 fec2 	bl	800bd54 <xTaskRemoveFromEventList>
 800afd0:	4603      	mov	r3, r0
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d00e      	beq.n	800aff4 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d00b      	beq.n	800aff4 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2201      	movs	r2, #1
 800afe0:	601a      	str	r2, [r3, #0]
 800afe2:	e007      	b.n	800aff4 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800afe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afe8:	3301      	adds	r3, #1
 800afea:	b2db      	uxtb	r3, r3
 800afec:	b25a      	sxtb	r2, r3
 800afee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800aff4:	2301      	movs	r3, #1
 800aff6:	637b      	str	r3, [r7, #52]	; 0x34
 800aff8:	e001      	b.n	800affe <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800affa:	2300      	movs	r3, #0
 800affc:	637b      	str	r3, [r7, #52]	; 0x34
 800affe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b000:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	f383 8811 	msr	BASEPRI, r3
}
 800b008:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3738      	adds	r7, #56	; 0x38
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d10c      	bne.n	800b03c <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800b022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b026:	b672      	cpsid	i
 800b028:	f383 8811 	msr	BASEPRI, r3
 800b02c:	f3bf 8f6f 	isb	sy
 800b030:	f3bf 8f4f 	dsb	sy
 800b034:	b662      	cpsie	i
 800b036:	60bb      	str	r3, [r7, #8]
}
 800b038:	bf00      	nop
 800b03a:	e7fe      	b.n	800b03a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800b03c:	f001 feae 	bl	800cd9c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b044:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800b046:	f001 fedd 	bl	800ce04 <vPortExitCritical>

	return uxReturn;
 800b04a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b04c:	4618      	mov	r0, r3
 800b04e:	3710      	adds	r7, #16
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800b054:	b480      	push	{r7}
 800b056:	b087      	sub	sp, #28
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d10c      	bne.n	800b080 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 800b066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06a:	b672      	cpsid	i
 800b06c:	f383 8811 	msr	BASEPRI, r3
 800b070:	f3bf 8f6f 	isb	sy
 800b074:	f3bf 8f4f 	dsb	sy
 800b078:	b662      	cpsie	i
 800b07a:	60fb      	str	r3, [r7, #12]
}
 800b07c:	bf00      	nop
 800b07e:	e7fe      	b.n	800b07e <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b084:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800b086:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b088:	4618      	mov	r0, r3
 800b08a:	371c      	adds	r7, #28
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr

0800b094 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d10c      	bne.n	800b0c0 <vQueueDelete+0x2c>
	__asm volatile
 800b0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0aa:	b672      	cpsid	i
 800b0ac:	f383 8811 	msr	BASEPRI, r3
 800b0b0:	f3bf 8f6f 	isb	sy
 800b0b4:	f3bf 8f4f 	dsb	sy
 800b0b8:	b662      	cpsie	i
 800b0ba:	60bb      	str	r3, [r7, #8]
}
 800b0bc:	bf00      	nop
 800b0be:	e7fe      	b.n	800b0be <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b0c0:	68f8      	ldr	r0, [r7, #12]
 800b0c2:	f000 f95f 	bl	800b384 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d102      	bne.n	800b0d6 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800b0d0:	68f8      	ldr	r0, [r7, #12]
 800b0d2:	f002 f859 	bl	800d188 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b0d6:	bf00      	nop
 800b0d8:	3710      	adds	r7, #16
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b0de:	b480      	push	{r7}
 800b0e0:	b085      	sub	sp, #20
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d006      	beq.n	800b0fc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b0f8:	60fb      	str	r3, [r7, #12]
 800b0fa:	e001      	b.n	800b100 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b100:	68fb      	ldr	r3, [r7, #12]
	}
 800b102:	4618      	mov	r0, r3
 800b104:	3714      	adds	r7, #20
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr

0800b10e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b10e:	b580      	push	{r7, lr}
 800b110:	b086      	sub	sp, #24
 800b112:	af00      	add	r7, sp, #0
 800b114:	60f8      	str	r0, [r7, #12]
 800b116:	60b9      	str	r1, [r7, #8]
 800b118:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b11a:	2300      	movs	r3, #0
 800b11c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b122:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d10d      	bne.n	800b148 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d14d      	bne.n	800b1d0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	4618      	mov	r0, r3
 800b13a:	f001 f867 	bl	800c20c <xTaskPriorityDisinherit>
 800b13e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2200      	movs	r2, #0
 800b144:	609a      	str	r2, [r3, #8]
 800b146:	e043      	b.n	800b1d0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d119      	bne.n	800b182 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	6858      	ldr	r0, [r3, #4]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b156:	461a      	mov	r2, r3
 800b158:	68b9      	ldr	r1, [r7, #8]
 800b15a:	f010 fc05 	bl	801b968 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	685a      	ldr	r2, [r3, #4]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b166:	441a      	add	r2, r3
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	685a      	ldr	r2, [r3, #4]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	429a      	cmp	r2, r3
 800b176:	d32b      	bcc.n	800b1d0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	605a      	str	r2, [r3, #4]
 800b180:	e026      	b.n	800b1d0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	68d8      	ldr	r0, [r3, #12]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b18a:	461a      	mov	r2, r3
 800b18c:	68b9      	ldr	r1, [r7, #8]
 800b18e:	f010 fbeb 	bl	801b968 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	68da      	ldr	r2, [r3, #12]
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b19a:	425b      	negs	r3, r3
 800b19c:	441a      	add	r2, r3
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	68da      	ldr	r2, [r3, #12]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d207      	bcs.n	800b1be <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	689a      	ldr	r2, [r3, #8]
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b6:	425b      	negs	r3, r3
 800b1b8:	441a      	add	r2, r3
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2b02      	cmp	r3, #2
 800b1c2:	d105      	bne.n	800b1d0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d002      	beq.n	800b1d0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	1c5a      	adds	r2, r3, #1
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b1d8:	697b      	ldr	r3, [r7, #20]
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3718      	adds	r7, #24
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}

0800b1e2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b1e2:	b580      	push	{r7, lr}
 800b1e4:	b082      	sub	sp, #8
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
 800b1ea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d018      	beq.n	800b226 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	68da      	ldr	r2, [r3, #12]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1fc:	441a      	add	r2, r3
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	68da      	ldr	r2, [r3, #12]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	689b      	ldr	r3, [r3, #8]
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d303      	bcc.n	800b216 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681a      	ldr	r2, [r3, #0]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	68d9      	ldr	r1, [r3, #12]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b21e:	461a      	mov	r2, r3
 800b220:	6838      	ldr	r0, [r7, #0]
 800b222:	f010 fba1 	bl	801b968 <memcpy>
	}
}
 800b226:	bf00      	nop
 800b228:	3708      	adds	r7, #8
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}

0800b22e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b22e:	b580      	push	{r7, lr}
 800b230:	b084      	sub	sp, #16
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b236:	f001 fdb1 	bl	800cd9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b240:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b242:	e011      	b.n	800b268 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d012      	beq.n	800b272 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	3324      	adds	r3, #36	; 0x24
 800b250:	4618      	mov	r0, r3
 800b252:	f000 fd7f 	bl	800bd54 <xTaskRemoveFromEventList>
 800b256:	4603      	mov	r3, r0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d001      	beq.n	800b260 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b25c:	f000 fe5c 	bl	800bf18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b260:	7bfb      	ldrb	r3, [r7, #15]
 800b262:	3b01      	subs	r3, #1
 800b264:	b2db      	uxtb	r3, r3
 800b266:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	dce9      	bgt.n	800b244 <prvUnlockQueue+0x16>
 800b270:	e000      	b.n	800b274 <prvUnlockQueue+0x46>
					break;
 800b272:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	22ff      	movs	r2, #255	; 0xff
 800b278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b27c:	f001 fdc2 	bl	800ce04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b280:	f001 fd8c 	bl	800cd9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b28a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b28c:	e011      	b.n	800b2b2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	691b      	ldr	r3, [r3, #16]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d012      	beq.n	800b2bc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	3310      	adds	r3, #16
 800b29a:	4618      	mov	r0, r3
 800b29c:	f000 fd5a 	bl	800bd54 <xTaskRemoveFromEventList>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d001      	beq.n	800b2aa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b2a6:	f000 fe37 	bl	800bf18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b2aa:	7bbb      	ldrb	r3, [r7, #14]
 800b2ac:	3b01      	subs	r3, #1
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b2b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	dce9      	bgt.n	800b28e <prvUnlockQueue+0x60>
 800b2ba:	e000      	b.n	800b2be <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b2bc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	22ff      	movs	r2, #255	; 0xff
 800b2c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b2c6:	f001 fd9d 	bl	800ce04 <vPortExitCritical>
}
 800b2ca:	bf00      	nop
 800b2cc:	3710      	adds	r7, #16
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b084      	sub	sp, #16
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b2da:	f001 fd5f 	bl	800cd9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d102      	bne.n	800b2ec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	60fb      	str	r3, [r7, #12]
 800b2ea:	e001      	b.n	800b2f0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b2f0:	f001 fd88 	bl	800ce04 <vPortExitCritical>

	return xReturn;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3710      	adds	r7, #16
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}

0800b2fe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b084      	sub	sp, #16
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b306:	f001 fd49 	bl	800cd9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b312:	429a      	cmp	r2, r3
 800b314:	d102      	bne.n	800b31c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b316:	2301      	movs	r3, #1
 800b318:	60fb      	str	r3, [r7, #12]
 800b31a:	e001      	b.n	800b320 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b31c:	2300      	movs	r3, #0
 800b31e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b320:	f001 fd70 	bl	800ce04 <vPortExitCritical>

	return xReturn;
 800b324:	68fb      	ldr	r3, [r7, #12]
}
 800b326:	4618      	mov	r0, r3
 800b328:	3710      	adds	r7, #16
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
	...

0800b330 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b330:	b480      	push	{r7}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b33a:	2300      	movs	r3, #0
 800b33c:	60fb      	str	r3, [r7, #12]
 800b33e:	e014      	b.n	800b36a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b340:	4a0f      	ldr	r2, [pc, #60]	; (800b380 <vQueueAddToRegistry+0x50>)
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d10b      	bne.n	800b364 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b34c:	490c      	ldr	r1, [pc, #48]	; (800b380 <vQueueAddToRegistry+0x50>)
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	683a      	ldr	r2, [r7, #0]
 800b352:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b356:	4a0a      	ldr	r2, [pc, #40]	; (800b380 <vQueueAddToRegistry+0x50>)
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	00db      	lsls	r3, r3, #3
 800b35c:	4413      	add	r3, r2
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b362:	e006      	b.n	800b372 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	3301      	adds	r3, #1
 800b368:	60fb      	str	r3, [r7, #12]
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2b07      	cmp	r3, #7
 800b36e:	d9e7      	bls.n	800b340 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b370:	bf00      	nop
 800b372:	bf00      	nop
 800b374:	3714      	adds	r7, #20
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop
 800b380:	20009658 	.word	0x20009658

0800b384 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b384:	b480      	push	{r7}
 800b386:	b085      	sub	sp, #20
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b38c:	2300      	movs	r3, #0
 800b38e:	60fb      	str	r3, [r7, #12]
 800b390:	e016      	b.n	800b3c0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b392:	4a10      	ldr	r2, [pc, #64]	; (800b3d4 <vQueueUnregisterQueue+0x50>)
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	00db      	lsls	r3, r3, #3
 800b398:	4413      	add	r3, r2
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d10b      	bne.n	800b3ba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b3a2:	4a0c      	ldr	r2, [pc, #48]	; (800b3d4 <vQueueUnregisterQueue+0x50>)
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2100      	movs	r1, #0
 800b3a8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b3ac:	4a09      	ldr	r2, [pc, #36]	; (800b3d4 <vQueueUnregisterQueue+0x50>)
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	00db      	lsls	r3, r3, #3
 800b3b2:	4413      	add	r3, r2
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	605a      	str	r2, [r3, #4]
				break;
 800b3b8:	e006      	b.n	800b3c8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	60fb      	str	r3, [r7, #12]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2b07      	cmp	r3, #7
 800b3c4:	d9e5      	bls.n	800b392 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b3c6:	bf00      	nop
 800b3c8:	bf00      	nop
 800b3ca:	3714      	adds	r7, #20
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr
 800b3d4:	20009658 	.word	0x20009658

0800b3d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b086      	sub	sp, #24
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	60f8      	str	r0, [r7, #12]
 800b3e0:	60b9      	str	r1, [r7, #8]
 800b3e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b3e8:	f001 fcd8 	bl	800cd9c <vPortEnterCritical>
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3f2:	b25b      	sxtb	r3, r3
 800b3f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3f8:	d103      	bne.n	800b402 <vQueueWaitForMessageRestricted+0x2a>
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b408:	b25b      	sxtb	r3, r3
 800b40a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b40e:	d103      	bne.n	800b418 <vQueueWaitForMessageRestricted+0x40>
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	2200      	movs	r2, #0
 800b414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b418:	f001 fcf4 	bl	800ce04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b420:	2b00      	cmp	r3, #0
 800b422:	d106      	bne.n	800b432 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	3324      	adds	r3, #36	; 0x24
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	68b9      	ldr	r1, [r7, #8]
 800b42c:	4618      	mov	r0, r3
 800b42e:	f000 fc63 	bl	800bcf8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b432:	6978      	ldr	r0, [r7, #20]
 800b434:	f7ff fefb 	bl	800b22e <prvUnlockQueue>
	}
 800b438:	bf00      	nop
 800b43a:	3718      	adds	r7, #24
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b440:	b580      	push	{r7, lr}
 800b442:	b08e      	sub	sp, #56	; 0x38
 800b444:	af04      	add	r7, sp, #16
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
 800b44c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b450:	2b00      	cmp	r3, #0
 800b452:	d10c      	bne.n	800b46e <xTaskCreateStatic+0x2e>
	__asm volatile
 800b454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b458:	b672      	cpsid	i
 800b45a:	f383 8811 	msr	BASEPRI, r3
 800b45e:	f3bf 8f6f 	isb	sy
 800b462:	f3bf 8f4f 	dsb	sy
 800b466:	b662      	cpsie	i
 800b468:	623b      	str	r3, [r7, #32]
}
 800b46a:	bf00      	nop
 800b46c:	e7fe      	b.n	800b46c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b470:	2b00      	cmp	r3, #0
 800b472:	d10c      	bne.n	800b48e <xTaskCreateStatic+0x4e>
	__asm volatile
 800b474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b478:	b672      	cpsid	i
 800b47a:	f383 8811 	msr	BASEPRI, r3
 800b47e:	f3bf 8f6f 	isb	sy
 800b482:	f3bf 8f4f 	dsb	sy
 800b486:	b662      	cpsie	i
 800b488:	61fb      	str	r3, [r7, #28]
}
 800b48a:	bf00      	nop
 800b48c:	e7fe      	b.n	800b48c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b48e:	235c      	movs	r3, #92	; 0x5c
 800b490:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	2b5c      	cmp	r3, #92	; 0x5c
 800b496:	d00c      	beq.n	800b4b2 <xTaskCreateStatic+0x72>
	__asm volatile
 800b498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b49c:	b672      	cpsid	i
 800b49e:	f383 8811 	msr	BASEPRI, r3
 800b4a2:	f3bf 8f6f 	isb	sy
 800b4a6:	f3bf 8f4f 	dsb	sy
 800b4aa:	b662      	cpsie	i
 800b4ac:	61bb      	str	r3, [r7, #24]
}
 800b4ae:	bf00      	nop
 800b4b0:	e7fe      	b.n	800b4b0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b4b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d01e      	beq.n	800b4f8 <xTaskCreateStatic+0xb8>
 800b4ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d01b      	beq.n	800b4f8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4cc:	2202      	movs	r2, #2
 800b4ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	9303      	str	r3, [sp, #12]
 800b4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d8:	9302      	str	r3, [sp, #8]
 800b4da:	f107 0314 	add.w	r3, r7, #20
 800b4de:	9301      	str	r3, [sp, #4]
 800b4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	68b9      	ldr	r1, [r7, #8]
 800b4ea:	68f8      	ldr	r0, [r7, #12]
 800b4ec:	f000 f850 	bl	800b590 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b4f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4f2:	f000 f8df 	bl	800b6b4 <prvAddNewTaskToReadyList>
 800b4f6:	e001      	b.n	800b4fc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b4fc:	697b      	ldr	r3, [r7, #20]
	}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3728      	adds	r7, #40	; 0x28
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b506:	b580      	push	{r7, lr}
 800b508:	b08c      	sub	sp, #48	; 0x30
 800b50a:	af04      	add	r7, sp, #16
 800b50c:	60f8      	str	r0, [r7, #12]
 800b50e:	60b9      	str	r1, [r7, #8]
 800b510:	603b      	str	r3, [r7, #0]
 800b512:	4613      	mov	r3, r2
 800b514:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b516:	88fb      	ldrh	r3, [r7, #6]
 800b518:	009b      	lsls	r3, r3, #2
 800b51a:	4618      	mov	r0, r3
 800b51c:	f001 fd6a 	bl	800cff4 <pvPortMalloc>
 800b520:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d00e      	beq.n	800b546 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b528:	205c      	movs	r0, #92	; 0x5c
 800b52a:	f001 fd63 	bl	800cff4 <pvPortMalloc>
 800b52e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b530:	69fb      	ldr	r3, [r7, #28]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d003      	beq.n	800b53e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	697a      	ldr	r2, [r7, #20]
 800b53a:	631a      	str	r2, [r3, #48]	; 0x30
 800b53c:	e005      	b.n	800b54a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b53e:	6978      	ldr	r0, [r7, #20]
 800b540:	f001 fe22 	bl	800d188 <vPortFree>
 800b544:	e001      	b.n	800b54a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b546:	2300      	movs	r3, #0
 800b548:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b54a:	69fb      	ldr	r3, [r7, #28]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d017      	beq.n	800b580 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b550:	69fb      	ldr	r3, [r7, #28]
 800b552:	2200      	movs	r2, #0
 800b554:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b558:	88fa      	ldrh	r2, [r7, #6]
 800b55a:	2300      	movs	r3, #0
 800b55c:	9303      	str	r3, [sp, #12]
 800b55e:	69fb      	ldr	r3, [r7, #28]
 800b560:	9302      	str	r3, [sp, #8]
 800b562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b564:	9301      	str	r3, [sp, #4]
 800b566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b568:	9300      	str	r3, [sp, #0]
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	68b9      	ldr	r1, [r7, #8]
 800b56e:	68f8      	ldr	r0, [r7, #12]
 800b570:	f000 f80e 	bl	800b590 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b574:	69f8      	ldr	r0, [r7, #28]
 800b576:	f000 f89d 	bl	800b6b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b57a:	2301      	movs	r3, #1
 800b57c:	61bb      	str	r3, [r7, #24]
 800b57e:	e002      	b.n	800b586 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b580:	f04f 33ff 	mov.w	r3, #4294967295
 800b584:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b586:	69bb      	ldr	r3, [r7, #24]
	}
 800b588:	4618      	mov	r0, r3
 800b58a:	3720      	adds	r7, #32
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b088      	sub	sp, #32
 800b594:	af00      	add	r7, sp, #0
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	60b9      	str	r1, [r7, #8]
 800b59a:	607a      	str	r2, [r7, #4]
 800b59c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	21a5      	movs	r1, #165	; 0xa5
 800b5aa:	f010 f9eb 	bl	801b984 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5b2:	6879      	ldr	r1, [r7, #4]
 800b5b4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b5b8:	440b      	add	r3, r1
 800b5ba:	009b      	lsls	r3, r3, #2
 800b5bc:	4413      	add	r3, r2
 800b5be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b5c0:	69bb      	ldr	r3, [r7, #24]
 800b5c2:	f023 0307 	bic.w	r3, r3, #7
 800b5c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b5c8:	69bb      	ldr	r3, [r7, #24]
 800b5ca:	f003 0307 	and.w	r3, r3, #7
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d00c      	beq.n	800b5ec <prvInitialiseNewTask+0x5c>
	__asm volatile
 800b5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d6:	b672      	cpsid	i
 800b5d8:	f383 8811 	msr	BASEPRI, r3
 800b5dc:	f3bf 8f6f 	isb	sy
 800b5e0:	f3bf 8f4f 	dsb	sy
 800b5e4:	b662      	cpsie	i
 800b5e6:	617b      	str	r3, [r7, #20]
}
 800b5e8:	bf00      	nop
 800b5ea:	e7fe      	b.n	800b5ea <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d01f      	beq.n	800b632 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	61fb      	str	r3, [r7, #28]
 800b5f6:	e012      	b.n	800b61e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b5f8:	68ba      	ldr	r2, [r7, #8]
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	7819      	ldrb	r1, [r3, #0]
 800b600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b602:	69fb      	ldr	r3, [r7, #28]
 800b604:	4413      	add	r3, r2
 800b606:	3334      	adds	r3, #52	; 0x34
 800b608:	460a      	mov	r2, r1
 800b60a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b60c:	68ba      	ldr	r2, [r7, #8]
 800b60e:	69fb      	ldr	r3, [r7, #28]
 800b610:	4413      	add	r3, r2
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d006      	beq.n	800b626 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	3301      	adds	r3, #1
 800b61c:	61fb      	str	r3, [r7, #28]
 800b61e:	69fb      	ldr	r3, [r7, #28]
 800b620:	2b0f      	cmp	r3, #15
 800b622:	d9e9      	bls.n	800b5f8 <prvInitialiseNewTask+0x68>
 800b624:	e000      	b.n	800b628 <prvInitialiseNewTask+0x98>
			{
				break;
 800b626:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62a:	2200      	movs	r2, #0
 800b62c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b630:	e003      	b.n	800b63a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b634:	2200      	movs	r2, #0
 800b636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63c:	2b37      	cmp	r3, #55	; 0x37
 800b63e:	d901      	bls.n	800b644 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b640:	2337      	movs	r3, #55	; 0x37
 800b642:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b648:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b64c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b64e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b652:	2200      	movs	r2, #0
 800b654:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b658:	3304      	adds	r3, #4
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7fe fd0c 	bl	800a078 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b662:	3318      	adds	r3, #24
 800b664:	4618      	mov	r0, r3
 800b666:	f7fe fd07 	bl	800a078 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b66e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b672:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b678:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b67e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b682:	2200      	movs	r2, #0
 800b684:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b688:	2200      	movs	r2, #0
 800b68a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b68e:	683a      	ldr	r2, [r7, #0]
 800b690:	68f9      	ldr	r1, [r7, #12]
 800b692:	69b8      	ldr	r0, [r7, #24]
 800b694:	f001 fa76 	bl	800cb84 <pxPortInitialiseStack>
 800b698:	4602      	mov	r2, r0
 800b69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d002      	beq.n	800b6aa <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6aa:	bf00      	nop
 800b6ac:	3720      	adds	r7, #32
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
	...

0800b6b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b6bc:	f001 fb6e 	bl	800cd9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b6c0:	4b2d      	ldr	r3, [pc, #180]	; (800b778 <prvAddNewTaskToReadyList+0xc4>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	4a2c      	ldr	r2, [pc, #176]	; (800b778 <prvAddNewTaskToReadyList+0xc4>)
 800b6c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b6ca:	4b2c      	ldr	r3, [pc, #176]	; (800b77c <prvAddNewTaskToReadyList+0xc8>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d109      	bne.n	800b6e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b6d2:	4a2a      	ldr	r2, [pc, #168]	; (800b77c <prvAddNewTaskToReadyList+0xc8>)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b6d8:	4b27      	ldr	r3, [pc, #156]	; (800b778 <prvAddNewTaskToReadyList+0xc4>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d110      	bne.n	800b702 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b6e0:	f000 fc3e 	bl	800bf60 <prvInitialiseTaskLists>
 800b6e4:	e00d      	b.n	800b702 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b6e6:	4b26      	ldr	r3, [pc, #152]	; (800b780 <prvAddNewTaskToReadyList+0xcc>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d109      	bne.n	800b702 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b6ee:	4b23      	ldr	r3, [pc, #140]	; (800b77c <prvAddNewTaskToReadyList+0xc8>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d802      	bhi.n	800b702 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b6fc:	4a1f      	ldr	r2, [pc, #124]	; (800b77c <prvAddNewTaskToReadyList+0xc8>)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b702:	4b20      	ldr	r3, [pc, #128]	; (800b784 <prvAddNewTaskToReadyList+0xd0>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	3301      	adds	r3, #1
 800b708:	4a1e      	ldr	r2, [pc, #120]	; (800b784 <prvAddNewTaskToReadyList+0xd0>)
 800b70a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b70c:	4b1d      	ldr	r3, [pc, #116]	; (800b784 <prvAddNewTaskToReadyList+0xd0>)
 800b70e:	681a      	ldr	r2, [r3, #0]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b718:	4b1b      	ldr	r3, [pc, #108]	; (800b788 <prvAddNewTaskToReadyList+0xd4>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d903      	bls.n	800b728 <prvAddNewTaskToReadyList+0x74>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b724:	4a18      	ldr	r2, [pc, #96]	; (800b788 <prvAddNewTaskToReadyList+0xd4>)
 800b726:	6013      	str	r3, [r2, #0]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b72c:	4613      	mov	r3, r2
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	4413      	add	r3, r2
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	4a15      	ldr	r2, [pc, #84]	; (800b78c <prvAddNewTaskToReadyList+0xd8>)
 800b736:	441a      	add	r2, r3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	3304      	adds	r3, #4
 800b73c:	4619      	mov	r1, r3
 800b73e:	4610      	mov	r0, r2
 800b740:	f7fe fca7 	bl	800a092 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b744:	f001 fb5e 	bl	800ce04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b748:	4b0d      	ldr	r3, [pc, #52]	; (800b780 <prvAddNewTaskToReadyList+0xcc>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d00e      	beq.n	800b76e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b750:	4b0a      	ldr	r3, [pc, #40]	; (800b77c <prvAddNewTaskToReadyList+0xc8>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d207      	bcs.n	800b76e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b75e:	4b0c      	ldr	r3, [pc, #48]	; (800b790 <prvAddNewTaskToReadyList+0xdc>)
 800b760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b764:	601a      	str	r2, [r3, #0]
 800b766:	f3bf 8f4f 	dsb	sy
 800b76a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b76e:	bf00      	nop
 800b770:	3708      	adds	r7, #8
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	20009b6c 	.word	0x20009b6c
 800b77c:	20009698 	.word	0x20009698
 800b780:	20009b78 	.word	0x20009b78
 800b784:	20009b88 	.word	0x20009b88
 800b788:	20009b74 	.word	0x20009b74
 800b78c:	2000969c 	.word	0x2000969c
 800b790:	e000ed04 	.word	0xe000ed04

0800b794 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b79c:	2300      	movs	r3, #0
 800b79e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d019      	beq.n	800b7da <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b7a6:	4b14      	ldr	r3, [pc, #80]	; (800b7f8 <vTaskDelay+0x64>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d00c      	beq.n	800b7c8 <vTaskDelay+0x34>
	__asm volatile
 800b7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b2:	b672      	cpsid	i
 800b7b4:	f383 8811 	msr	BASEPRI, r3
 800b7b8:	f3bf 8f6f 	isb	sy
 800b7bc:	f3bf 8f4f 	dsb	sy
 800b7c0:	b662      	cpsie	i
 800b7c2:	60bb      	str	r3, [r7, #8]
}
 800b7c4:	bf00      	nop
 800b7c6:	e7fe      	b.n	800b7c6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800b7c8:	f000 f884 	bl	800b8d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b7cc:	2100      	movs	r1, #0
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f000 fe28 	bl	800c424 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b7d4:	f000 f88c 	bl	800b8f0 <xTaskResumeAll>
 800b7d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d107      	bne.n	800b7f0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800b7e0:	4b06      	ldr	r3, [pc, #24]	; (800b7fc <vTaskDelay+0x68>)
 800b7e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7e6:	601a      	str	r2, [r3, #0]
 800b7e8:	f3bf 8f4f 	dsb	sy
 800b7ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b7f0:	bf00      	nop
 800b7f2:	3710      	adds	r7, #16
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}
 800b7f8:	20009b94 	.word	0x20009b94
 800b7fc:	e000ed04 	.word	0xe000ed04

0800b800 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b08a      	sub	sp, #40	; 0x28
 800b804:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b806:	2300      	movs	r3, #0
 800b808:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b80a:	2300      	movs	r3, #0
 800b80c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b80e:	463a      	mov	r2, r7
 800b810:	1d39      	adds	r1, r7, #4
 800b812:	f107 0308 	add.w	r3, r7, #8
 800b816:	4618      	mov	r0, r3
 800b818:	f7fe fbda 	bl	8009fd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b81c:	6839      	ldr	r1, [r7, #0]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	68ba      	ldr	r2, [r7, #8]
 800b822:	9202      	str	r2, [sp, #8]
 800b824:	9301      	str	r3, [sp, #4]
 800b826:	2300      	movs	r3, #0
 800b828:	9300      	str	r3, [sp, #0]
 800b82a:	2300      	movs	r3, #0
 800b82c:	460a      	mov	r2, r1
 800b82e:	4923      	ldr	r1, [pc, #140]	; (800b8bc <vTaskStartScheduler+0xbc>)
 800b830:	4823      	ldr	r0, [pc, #140]	; (800b8c0 <vTaskStartScheduler+0xc0>)
 800b832:	f7ff fe05 	bl	800b440 <xTaskCreateStatic>
 800b836:	4603      	mov	r3, r0
 800b838:	4a22      	ldr	r2, [pc, #136]	; (800b8c4 <vTaskStartScheduler+0xc4>)
 800b83a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b83c:	4b21      	ldr	r3, [pc, #132]	; (800b8c4 <vTaskStartScheduler+0xc4>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d002      	beq.n	800b84a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b844:	2301      	movs	r3, #1
 800b846:	617b      	str	r3, [r7, #20]
 800b848:	e001      	b.n	800b84e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b84a:	2300      	movs	r3, #0
 800b84c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	2b01      	cmp	r3, #1
 800b852:	d102      	bne.n	800b85a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b854:	f000 fe3a 	bl	800c4cc <xTimerCreateTimerTask>
 800b858:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d118      	bne.n	800b892 <vTaskStartScheduler+0x92>
	__asm volatile
 800b860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b864:	b672      	cpsid	i
 800b866:	f383 8811 	msr	BASEPRI, r3
 800b86a:	f3bf 8f6f 	isb	sy
 800b86e:	f3bf 8f4f 	dsb	sy
 800b872:	b662      	cpsie	i
 800b874:	613b      	str	r3, [r7, #16]
}
 800b876:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b878:	4b13      	ldr	r3, [pc, #76]	; (800b8c8 <vTaskStartScheduler+0xc8>)
 800b87a:	f04f 32ff 	mov.w	r2, #4294967295
 800b87e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b880:	4b12      	ldr	r3, [pc, #72]	; (800b8cc <vTaskStartScheduler+0xcc>)
 800b882:	2201      	movs	r2, #1
 800b884:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b886:	4b12      	ldr	r3, [pc, #72]	; (800b8d0 <vTaskStartScheduler+0xd0>)
 800b888:	2200      	movs	r2, #0
 800b88a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b88c:	f001 fa08 	bl	800cca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b890:	e010      	b.n	800b8b4 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b898:	d10c      	bne.n	800b8b4 <vTaskStartScheduler+0xb4>
	__asm volatile
 800b89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89e:	b672      	cpsid	i
 800b8a0:	f383 8811 	msr	BASEPRI, r3
 800b8a4:	f3bf 8f6f 	isb	sy
 800b8a8:	f3bf 8f4f 	dsb	sy
 800b8ac:	b662      	cpsie	i
 800b8ae:	60fb      	str	r3, [r7, #12]
}
 800b8b0:	bf00      	nop
 800b8b2:	e7fe      	b.n	800b8b2 <vTaskStartScheduler+0xb2>
}
 800b8b4:	bf00      	nop
 800b8b6:	3718      	adds	r7, #24
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}
 800b8bc:	0801cea4 	.word	0x0801cea4
 800b8c0:	0800bf31 	.word	0x0800bf31
 800b8c4:	20009b90 	.word	0x20009b90
 800b8c8:	20009b8c 	.word	0x20009b8c
 800b8cc:	20009b78 	.word	0x20009b78
 800b8d0:	20009b70 	.word	0x20009b70

0800b8d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b8d8:	4b04      	ldr	r3, [pc, #16]	; (800b8ec <vTaskSuspendAll+0x18>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	3301      	adds	r3, #1
 800b8de:	4a03      	ldr	r2, [pc, #12]	; (800b8ec <vTaskSuspendAll+0x18>)
 800b8e0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b8e2:	bf00      	nop
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr
 800b8ec:	20009b94 	.word	0x20009b94

0800b8f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b084      	sub	sp, #16
 800b8f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b8fe:	4b43      	ldr	r3, [pc, #268]	; (800ba0c <xTaskResumeAll+0x11c>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d10c      	bne.n	800b920 <xTaskResumeAll+0x30>
	__asm volatile
 800b906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90a:	b672      	cpsid	i
 800b90c:	f383 8811 	msr	BASEPRI, r3
 800b910:	f3bf 8f6f 	isb	sy
 800b914:	f3bf 8f4f 	dsb	sy
 800b918:	b662      	cpsie	i
 800b91a:	603b      	str	r3, [r7, #0]
}
 800b91c:	bf00      	nop
 800b91e:	e7fe      	b.n	800b91e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b920:	f001 fa3c 	bl	800cd9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b924:	4b39      	ldr	r3, [pc, #228]	; (800ba0c <xTaskResumeAll+0x11c>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	3b01      	subs	r3, #1
 800b92a:	4a38      	ldr	r2, [pc, #224]	; (800ba0c <xTaskResumeAll+0x11c>)
 800b92c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b92e:	4b37      	ldr	r3, [pc, #220]	; (800ba0c <xTaskResumeAll+0x11c>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d162      	bne.n	800b9fc <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b936:	4b36      	ldr	r3, [pc, #216]	; (800ba10 <xTaskResumeAll+0x120>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d05e      	beq.n	800b9fc <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b93e:	e02f      	b.n	800b9a0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b940:	4b34      	ldr	r3, [pc, #208]	; (800ba14 <xTaskResumeAll+0x124>)
 800b942:	68db      	ldr	r3, [r3, #12]
 800b944:	68db      	ldr	r3, [r3, #12]
 800b946:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	3318      	adds	r3, #24
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7fe fbfd 	bl	800a14c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	3304      	adds	r3, #4
 800b956:	4618      	mov	r0, r3
 800b958:	f7fe fbf8 	bl	800a14c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b960:	4b2d      	ldr	r3, [pc, #180]	; (800ba18 <xTaskResumeAll+0x128>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	429a      	cmp	r2, r3
 800b966:	d903      	bls.n	800b970 <xTaskResumeAll+0x80>
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b96c:	4a2a      	ldr	r2, [pc, #168]	; (800ba18 <xTaskResumeAll+0x128>)
 800b96e:	6013      	str	r3, [r2, #0]
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b974:	4613      	mov	r3, r2
 800b976:	009b      	lsls	r3, r3, #2
 800b978:	4413      	add	r3, r2
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	4a27      	ldr	r2, [pc, #156]	; (800ba1c <xTaskResumeAll+0x12c>)
 800b97e:	441a      	add	r2, r3
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	3304      	adds	r3, #4
 800b984:	4619      	mov	r1, r3
 800b986:	4610      	mov	r0, r2
 800b988:	f7fe fb83 	bl	800a092 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b990:	4b23      	ldr	r3, [pc, #140]	; (800ba20 <xTaskResumeAll+0x130>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b996:	429a      	cmp	r2, r3
 800b998:	d302      	bcc.n	800b9a0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800b99a:	4b22      	ldr	r3, [pc, #136]	; (800ba24 <xTaskResumeAll+0x134>)
 800b99c:	2201      	movs	r2, #1
 800b99e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9a0:	4b1c      	ldr	r3, [pc, #112]	; (800ba14 <xTaskResumeAll+0x124>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d1cb      	bne.n	800b940 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d001      	beq.n	800b9b2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b9ae:	f000 fb77 	bl	800c0a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b9b2:	4b1d      	ldr	r3, [pc, #116]	; (800ba28 <xTaskResumeAll+0x138>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d010      	beq.n	800b9e0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b9be:	f000 f859 	bl	800ba74 <xTaskIncrementTick>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d002      	beq.n	800b9ce <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800b9c8:	4b16      	ldr	r3, [pc, #88]	; (800ba24 <xTaskResumeAll+0x134>)
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	3b01      	subs	r3, #1
 800b9d2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d1f1      	bne.n	800b9be <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800b9da:	4b13      	ldr	r3, [pc, #76]	; (800ba28 <xTaskResumeAll+0x138>)
 800b9dc:	2200      	movs	r2, #0
 800b9de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b9e0:	4b10      	ldr	r3, [pc, #64]	; (800ba24 <xTaskResumeAll+0x134>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d009      	beq.n	800b9fc <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b9ec:	4b0f      	ldr	r3, [pc, #60]	; (800ba2c <xTaskResumeAll+0x13c>)
 800b9ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9f2:	601a      	str	r2, [r3, #0]
 800b9f4:	f3bf 8f4f 	dsb	sy
 800b9f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b9fc:	f001 fa02 	bl	800ce04 <vPortExitCritical>

	return xAlreadyYielded;
 800ba00:	68bb      	ldr	r3, [r7, #8]
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	20009b94 	.word	0x20009b94
 800ba10:	20009b6c 	.word	0x20009b6c
 800ba14:	20009b2c 	.word	0x20009b2c
 800ba18:	20009b74 	.word	0x20009b74
 800ba1c:	2000969c 	.word	0x2000969c
 800ba20:	20009698 	.word	0x20009698
 800ba24:	20009b80 	.word	0x20009b80
 800ba28:	20009b7c 	.word	0x20009b7c
 800ba2c:	e000ed04 	.word	0xe000ed04

0800ba30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ba30:	b480      	push	{r7}
 800ba32:	b083      	sub	sp, #12
 800ba34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ba36:	4b05      	ldr	r3, [pc, #20]	; (800ba4c <xTaskGetTickCount+0x1c>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ba3c:	687b      	ldr	r3, [r7, #4]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	370c      	adds	r7, #12
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr
 800ba4a:	bf00      	nop
 800ba4c:	20009b70 	.word	0x20009b70

0800ba50 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b082      	sub	sp, #8
 800ba54:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba56:	f001 fa89 	bl	800cf6c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ba5e:	4b04      	ldr	r3, [pc, #16]	; (800ba70 <xTaskGetTickCountFromISR+0x20>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba64:	683b      	ldr	r3, [r7, #0]
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3708      	adds	r7, #8
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	20009b70 	.word	0x20009b70

0800ba74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b086      	sub	sp, #24
 800ba78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba7e:	4b50      	ldr	r3, [pc, #320]	; (800bbc0 <xTaskIncrementTick+0x14c>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	f040 808b 	bne.w	800bb9e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ba88:	4b4e      	ldr	r3, [pc, #312]	; (800bbc4 <xTaskIncrementTick+0x150>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ba90:	4a4c      	ldr	r2, [pc, #304]	; (800bbc4 <xTaskIncrementTick+0x150>)
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d122      	bne.n	800bae2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800ba9c:	4b4a      	ldr	r3, [pc, #296]	; (800bbc8 <xTaskIncrementTick+0x154>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d00c      	beq.n	800bac0 <xTaskIncrementTick+0x4c>
	__asm volatile
 800baa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baaa:	b672      	cpsid	i
 800baac:	f383 8811 	msr	BASEPRI, r3
 800bab0:	f3bf 8f6f 	isb	sy
 800bab4:	f3bf 8f4f 	dsb	sy
 800bab8:	b662      	cpsie	i
 800baba:	603b      	str	r3, [r7, #0]
}
 800babc:	bf00      	nop
 800babe:	e7fe      	b.n	800babe <xTaskIncrementTick+0x4a>
 800bac0:	4b41      	ldr	r3, [pc, #260]	; (800bbc8 <xTaskIncrementTick+0x154>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	60fb      	str	r3, [r7, #12]
 800bac6:	4b41      	ldr	r3, [pc, #260]	; (800bbcc <xTaskIncrementTick+0x158>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a3f      	ldr	r2, [pc, #252]	; (800bbc8 <xTaskIncrementTick+0x154>)
 800bacc:	6013      	str	r3, [r2, #0]
 800bace:	4a3f      	ldr	r2, [pc, #252]	; (800bbcc <xTaskIncrementTick+0x158>)
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6013      	str	r3, [r2, #0]
 800bad4:	4b3e      	ldr	r3, [pc, #248]	; (800bbd0 <xTaskIncrementTick+0x15c>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	3301      	adds	r3, #1
 800bada:	4a3d      	ldr	r2, [pc, #244]	; (800bbd0 <xTaskIncrementTick+0x15c>)
 800badc:	6013      	str	r3, [r2, #0]
 800bade:	f000 fadf 	bl	800c0a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bae2:	4b3c      	ldr	r3, [pc, #240]	; (800bbd4 <xTaskIncrementTick+0x160>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	693a      	ldr	r2, [r7, #16]
 800bae8:	429a      	cmp	r2, r3
 800baea:	d349      	bcc.n	800bb80 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800baec:	4b36      	ldr	r3, [pc, #216]	; (800bbc8 <xTaskIncrementTick+0x154>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d104      	bne.n	800bb00 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800baf6:	4b37      	ldr	r3, [pc, #220]	; (800bbd4 <xTaskIncrementTick+0x160>)
 800baf8:	f04f 32ff 	mov.w	r2, #4294967295
 800bafc:	601a      	str	r2, [r3, #0]
					break;
 800bafe:	e03f      	b.n	800bb80 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb00:	4b31      	ldr	r3, [pc, #196]	; (800bbc8 <xTaskIncrementTick+0x154>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	68db      	ldr	r3, [r3, #12]
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bb10:	693a      	ldr	r2, [r7, #16]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d203      	bcs.n	800bb20 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bb18:	4a2e      	ldr	r2, [pc, #184]	; (800bbd4 <xTaskIncrementTick+0x160>)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bb1e:	e02f      	b.n	800bb80 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	3304      	adds	r3, #4
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7fe fb11 	bl	800a14c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d004      	beq.n	800bb3c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	3318      	adds	r3, #24
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7fe fb08 	bl	800a14c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb40:	4b25      	ldr	r3, [pc, #148]	; (800bbd8 <xTaskIncrementTick+0x164>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d903      	bls.n	800bb50 <xTaskIncrementTick+0xdc>
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb4c:	4a22      	ldr	r2, [pc, #136]	; (800bbd8 <xTaskIncrementTick+0x164>)
 800bb4e:	6013      	str	r3, [r2, #0]
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb54:	4613      	mov	r3, r2
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	4413      	add	r3, r2
 800bb5a:	009b      	lsls	r3, r3, #2
 800bb5c:	4a1f      	ldr	r2, [pc, #124]	; (800bbdc <xTaskIncrementTick+0x168>)
 800bb5e:	441a      	add	r2, r3
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	3304      	adds	r3, #4
 800bb64:	4619      	mov	r1, r3
 800bb66:	4610      	mov	r0, r2
 800bb68:	f7fe fa93 	bl	800a092 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb70:	4b1b      	ldr	r3, [pc, #108]	; (800bbe0 <xTaskIncrementTick+0x16c>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d3b8      	bcc.n	800baec <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb7e:	e7b5      	b.n	800baec <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bb80:	4b17      	ldr	r3, [pc, #92]	; (800bbe0 <xTaskIncrementTick+0x16c>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb86:	4915      	ldr	r1, [pc, #84]	; (800bbdc <xTaskIncrementTick+0x168>)
 800bb88:	4613      	mov	r3, r2
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	4413      	add	r3, r2
 800bb8e:	009b      	lsls	r3, r3, #2
 800bb90:	440b      	add	r3, r1
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d907      	bls.n	800bba8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800bb98:	2301      	movs	r3, #1
 800bb9a:	617b      	str	r3, [r7, #20]
 800bb9c:	e004      	b.n	800bba8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bb9e:	4b11      	ldr	r3, [pc, #68]	; (800bbe4 <xTaskIncrementTick+0x170>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	3301      	adds	r3, #1
 800bba4:	4a0f      	ldr	r2, [pc, #60]	; (800bbe4 <xTaskIncrementTick+0x170>)
 800bba6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bba8:	4b0f      	ldr	r3, [pc, #60]	; (800bbe8 <xTaskIncrementTick+0x174>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d001      	beq.n	800bbb4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bbb4:	697b      	ldr	r3, [r7, #20]
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3718      	adds	r7, #24
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	20009b94 	.word	0x20009b94
 800bbc4:	20009b70 	.word	0x20009b70
 800bbc8:	20009b24 	.word	0x20009b24
 800bbcc:	20009b28 	.word	0x20009b28
 800bbd0:	20009b84 	.word	0x20009b84
 800bbd4:	20009b8c 	.word	0x20009b8c
 800bbd8:	20009b74 	.word	0x20009b74
 800bbdc:	2000969c 	.word	0x2000969c
 800bbe0:	20009698 	.word	0x20009698
 800bbe4:	20009b7c 	.word	0x20009b7c
 800bbe8:	20009b80 	.word	0x20009b80

0800bbec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bbec:	b480      	push	{r7}
 800bbee:	b085      	sub	sp, #20
 800bbf0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bbf2:	4b29      	ldr	r3, [pc, #164]	; (800bc98 <vTaskSwitchContext+0xac>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d003      	beq.n	800bc02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bbfa:	4b28      	ldr	r3, [pc, #160]	; (800bc9c <vTaskSwitchContext+0xb0>)
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bc00:	e043      	b.n	800bc8a <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800bc02:	4b26      	ldr	r3, [pc, #152]	; (800bc9c <vTaskSwitchContext+0xb0>)
 800bc04:	2200      	movs	r2, #0
 800bc06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc08:	4b25      	ldr	r3, [pc, #148]	; (800bca0 <vTaskSwitchContext+0xb4>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	60fb      	str	r3, [r7, #12]
 800bc0e:	e012      	b.n	800bc36 <vTaskSwitchContext+0x4a>
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d10c      	bne.n	800bc30 <vTaskSwitchContext+0x44>
	__asm volatile
 800bc16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc1a:	b672      	cpsid	i
 800bc1c:	f383 8811 	msr	BASEPRI, r3
 800bc20:	f3bf 8f6f 	isb	sy
 800bc24:	f3bf 8f4f 	dsb	sy
 800bc28:	b662      	cpsie	i
 800bc2a:	607b      	str	r3, [r7, #4]
}
 800bc2c:	bf00      	nop
 800bc2e:	e7fe      	b.n	800bc2e <vTaskSwitchContext+0x42>
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	3b01      	subs	r3, #1
 800bc34:	60fb      	str	r3, [r7, #12]
 800bc36:	491b      	ldr	r1, [pc, #108]	; (800bca4 <vTaskSwitchContext+0xb8>)
 800bc38:	68fa      	ldr	r2, [r7, #12]
 800bc3a:	4613      	mov	r3, r2
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	4413      	add	r3, r2
 800bc40:	009b      	lsls	r3, r3, #2
 800bc42:	440b      	add	r3, r1
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d0e2      	beq.n	800bc10 <vTaskSwitchContext+0x24>
 800bc4a:	68fa      	ldr	r2, [r7, #12]
 800bc4c:	4613      	mov	r3, r2
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	4413      	add	r3, r2
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	4a13      	ldr	r2, [pc, #76]	; (800bca4 <vTaskSwitchContext+0xb8>)
 800bc56:	4413      	add	r3, r2
 800bc58:	60bb      	str	r3, [r7, #8]
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	685a      	ldr	r2, [r3, #4]
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	605a      	str	r2, [r3, #4]
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	685a      	ldr	r2, [r3, #4]
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	3308      	adds	r3, #8
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d104      	bne.n	800bc7a <vTaskSwitchContext+0x8e>
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	685a      	ldr	r2, [r3, #4]
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	605a      	str	r2, [r3, #4]
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	68db      	ldr	r3, [r3, #12]
 800bc80:	4a09      	ldr	r2, [pc, #36]	; (800bca8 <vTaskSwitchContext+0xbc>)
 800bc82:	6013      	str	r3, [r2, #0]
 800bc84:	4a06      	ldr	r2, [pc, #24]	; (800bca0 <vTaskSwitchContext+0xb4>)
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	6013      	str	r3, [r2, #0]
}
 800bc8a:	bf00      	nop
 800bc8c:	3714      	adds	r7, #20
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr
 800bc96:	bf00      	nop
 800bc98:	20009b94 	.word	0x20009b94
 800bc9c:	20009b80 	.word	0x20009b80
 800bca0:	20009b74 	.word	0x20009b74
 800bca4:	2000969c 	.word	0x2000969c
 800bca8:	20009698 	.word	0x20009698

0800bcac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b084      	sub	sp, #16
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d10c      	bne.n	800bcd6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800bcbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc0:	b672      	cpsid	i
 800bcc2:	f383 8811 	msr	BASEPRI, r3
 800bcc6:	f3bf 8f6f 	isb	sy
 800bcca:	f3bf 8f4f 	dsb	sy
 800bcce:	b662      	cpsie	i
 800bcd0:	60fb      	str	r3, [r7, #12]
}
 800bcd2:	bf00      	nop
 800bcd4:	e7fe      	b.n	800bcd4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bcd6:	4b07      	ldr	r3, [pc, #28]	; (800bcf4 <vTaskPlaceOnEventList+0x48>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	3318      	adds	r3, #24
 800bcdc:	4619      	mov	r1, r3
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f7fe f9fb 	bl	800a0da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bce4:	2101      	movs	r1, #1
 800bce6:	6838      	ldr	r0, [r7, #0]
 800bce8:	f000 fb9c 	bl	800c424 <prvAddCurrentTaskToDelayedList>
}
 800bcec:	bf00      	nop
 800bcee:	3710      	adds	r7, #16
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}
 800bcf4:	20009698 	.word	0x20009698

0800bcf8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b086      	sub	sp, #24
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d10c      	bne.n	800bd24 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800bd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0e:	b672      	cpsid	i
 800bd10:	f383 8811 	msr	BASEPRI, r3
 800bd14:	f3bf 8f6f 	isb	sy
 800bd18:	f3bf 8f4f 	dsb	sy
 800bd1c:	b662      	cpsie	i
 800bd1e:	617b      	str	r3, [r7, #20]
}
 800bd20:	bf00      	nop
 800bd22:	e7fe      	b.n	800bd22 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd24:	4b0a      	ldr	r3, [pc, #40]	; (800bd50 <vTaskPlaceOnEventListRestricted+0x58>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	3318      	adds	r3, #24
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f7fe f9b0 	bl	800a092 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d002      	beq.n	800bd3e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800bd38:	f04f 33ff 	mov.w	r3, #4294967295
 800bd3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bd3e:	6879      	ldr	r1, [r7, #4]
 800bd40:	68b8      	ldr	r0, [r7, #8]
 800bd42:	f000 fb6f 	bl	800c424 <prvAddCurrentTaskToDelayedList>
	}
 800bd46:	bf00      	nop
 800bd48:	3718      	adds	r7, #24
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	20009698 	.word	0x20009698

0800bd54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b086      	sub	sp, #24
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	68db      	ldr	r3, [r3, #12]
 800bd60:	68db      	ldr	r3, [r3, #12]
 800bd62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d10c      	bne.n	800bd84 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800bd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd6e:	b672      	cpsid	i
 800bd70:	f383 8811 	msr	BASEPRI, r3
 800bd74:	f3bf 8f6f 	isb	sy
 800bd78:	f3bf 8f4f 	dsb	sy
 800bd7c:	b662      	cpsie	i
 800bd7e:	60fb      	str	r3, [r7, #12]
}
 800bd80:	bf00      	nop
 800bd82:	e7fe      	b.n	800bd82 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	3318      	adds	r3, #24
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f7fe f9df 	bl	800a14c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd8e:	4b1e      	ldr	r3, [pc, #120]	; (800be08 <xTaskRemoveFromEventList+0xb4>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d11d      	bne.n	800bdd2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	3304      	adds	r3, #4
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7fe f9d6 	bl	800a14c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bda4:	4b19      	ldr	r3, [pc, #100]	; (800be0c <xTaskRemoveFromEventList+0xb8>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d903      	bls.n	800bdb4 <xTaskRemoveFromEventList+0x60>
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb0:	4a16      	ldr	r2, [pc, #88]	; (800be0c <xTaskRemoveFromEventList+0xb8>)
 800bdb2:	6013      	str	r3, [r2, #0]
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdb8:	4613      	mov	r3, r2
 800bdba:	009b      	lsls	r3, r3, #2
 800bdbc:	4413      	add	r3, r2
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	4a13      	ldr	r2, [pc, #76]	; (800be10 <xTaskRemoveFromEventList+0xbc>)
 800bdc2:	441a      	add	r2, r3
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	3304      	adds	r3, #4
 800bdc8:	4619      	mov	r1, r3
 800bdca:	4610      	mov	r0, r2
 800bdcc:	f7fe f961 	bl	800a092 <vListInsertEnd>
 800bdd0:	e005      	b.n	800bdde <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	3318      	adds	r3, #24
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	480e      	ldr	r0, [pc, #56]	; (800be14 <xTaskRemoveFromEventList+0xc0>)
 800bdda:	f7fe f95a 	bl	800a092 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bde2:	4b0d      	ldr	r3, [pc, #52]	; (800be18 <xTaskRemoveFromEventList+0xc4>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d905      	bls.n	800bdf8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bdec:	2301      	movs	r3, #1
 800bdee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bdf0:	4b0a      	ldr	r3, [pc, #40]	; (800be1c <xTaskRemoveFromEventList+0xc8>)
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	601a      	str	r2, [r3, #0]
 800bdf6:	e001      	b.n	800bdfc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bdfc:	697b      	ldr	r3, [r7, #20]
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3718      	adds	r7, #24
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}
 800be06:	bf00      	nop
 800be08:	20009b94 	.word	0x20009b94
 800be0c:	20009b74 	.word	0x20009b74
 800be10:	2000969c 	.word	0x2000969c
 800be14:	20009b2c 	.word	0x20009b2c
 800be18:	20009698 	.word	0x20009698
 800be1c:	20009b80 	.word	0x20009b80

0800be20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800be20:	b480      	push	{r7}
 800be22:	b083      	sub	sp, #12
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be28:	4b06      	ldr	r3, [pc, #24]	; (800be44 <vTaskInternalSetTimeOutState+0x24>)
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800be30:	4b05      	ldr	r3, [pc, #20]	; (800be48 <vTaskInternalSetTimeOutState+0x28>)
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	605a      	str	r2, [r3, #4]
}
 800be38:	bf00      	nop
 800be3a:	370c      	adds	r7, #12
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr
 800be44:	20009b84 	.word	0x20009b84
 800be48:	20009b70 	.word	0x20009b70

0800be4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b088      	sub	sp, #32
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d10c      	bne.n	800be76 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800be5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be60:	b672      	cpsid	i
 800be62:	f383 8811 	msr	BASEPRI, r3
 800be66:	f3bf 8f6f 	isb	sy
 800be6a:	f3bf 8f4f 	dsb	sy
 800be6e:	b662      	cpsie	i
 800be70:	613b      	str	r3, [r7, #16]
}
 800be72:	bf00      	nop
 800be74:	e7fe      	b.n	800be74 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d10c      	bne.n	800be96 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800be7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be80:	b672      	cpsid	i
 800be82:	f383 8811 	msr	BASEPRI, r3
 800be86:	f3bf 8f6f 	isb	sy
 800be8a:	f3bf 8f4f 	dsb	sy
 800be8e:	b662      	cpsie	i
 800be90:	60fb      	str	r3, [r7, #12]
}
 800be92:	bf00      	nop
 800be94:	e7fe      	b.n	800be94 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800be96:	f000 ff81 	bl	800cd9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800be9a:	4b1d      	ldr	r3, [pc, #116]	; (800bf10 <xTaskCheckForTimeOut+0xc4>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	685b      	ldr	r3, [r3, #4]
 800bea4:	69ba      	ldr	r2, [r7, #24]
 800bea6:	1ad3      	subs	r3, r2, r3
 800bea8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beb2:	d102      	bne.n	800beba <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800beb4:	2300      	movs	r3, #0
 800beb6:	61fb      	str	r3, [r7, #28]
 800beb8:	e023      	b.n	800bf02 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	4b15      	ldr	r3, [pc, #84]	; (800bf14 <xTaskCheckForTimeOut+0xc8>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d007      	beq.n	800bed6 <xTaskCheckForTimeOut+0x8a>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	69ba      	ldr	r2, [r7, #24]
 800becc:	429a      	cmp	r2, r3
 800bece:	d302      	bcc.n	800bed6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bed0:	2301      	movs	r3, #1
 800bed2:	61fb      	str	r3, [r7, #28]
 800bed4:	e015      	b.n	800bf02 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	697a      	ldr	r2, [r7, #20]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d20b      	bcs.n	800bef8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	1ad2      	subs	r2, r2, r3
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f7ff ff97 	bl	800be20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bef2:	2300      	movs	r3, #0
 800bef4:	61fb      	str	r3, [r7, #28]
 800bef6:	e004      	b.n	800bf02 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	2200      	movs	r2, #0
 800befc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800befe:	2301      	movs	r3, #1
 800bf00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bf02:	f000 ff7f 	bl	800ce04 <vPortExitCritical>

	return xReturn;
 800bf06:	69fb      	ldr	r3, [r7, #28]
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3720      	adds	r7, #32
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}
 800bf10:	20009b70 	.word	0x20009b70
 800bf14:	20009b84 	.word	0x20009b84

0800bf18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bf18:	b480      	push	{r7}
 800bf1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bf1c:	4b03      	ldr	r3, [pc, #12]	; (800bf2c <vTaskMissedYield+0x14>)
 800bf1e:	2201      	movs	r2, #1
 800bf20:	601a      	str	r2, [r3, #0]
}
 800bf22:	bf00      	nop
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr
 800bf2c:	20009b80 	.word	0x20009b80

0800bf30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bf38:	f000 f852 	bl	800bfe0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bf3c:	4b06      	ldr	r3, [pc, #24]	; (800bf58 <prvIdleTask+0x28>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	d9f9      	bls.n	800bf38 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bf44:	4b05      	ldr	r3, [pc, #20]	; (800bf5c <prvIdleTask+0x2c>)
 800bf46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf4a:	601a      	str	r2, [r3, #0]
 800bf4c:	f3bf 8f4f 	dsb	sy
 800bf50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bf54:	e7f0      	b.n	800bf38 <prvIdleTask+0x8>
 800bf56:	bf00      	nop
 800bf58:	2000969c 	.word	0x2000969c
 800bf5c:	e000ed04 	.word	0xe000ed04

0800bf60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf66:	2300      	movs	r3, #0
 800bf68:	607b      	str	r3, [r7, #4]
 800bf6a:	e00c      	b.n	800bf86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	4613      	mov	r3, r2
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	4413      	add	r3, r2
 800bf74:	009b      	lsls	r3, r3, #2
 800bf76:	4a12      	ldr	r2, [pc, #72]	; (800bfc0 <prvInitialiseTaskLists+0x60>)
 800bf78:	4413      	add	r3, r2
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7fe f85c 	bl	800a038 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	3301      	adds	r3, #1
 800bf84:	607b      	str	r3, [r7, #4]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2b37      	cmp	r3, #55	; 0x37
 800bf8a:	d9ef      	bls.n	800bf6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bf8c:	480d      	ldr	r0, [pc, #52]	; (800bfc4 <prvInitialiseTaskLists+0x64>)
 800bf8e:	f7fe f853 	bl	800a038 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bf92:	480d      	ldr	r0, [pc, #52]	; (800bfc8 <prvInitialiseTaskLists+0x68>)
 800bf94:	f7fe f850 	bl	800a038 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bf98:	480c      	ldr	r0, [pc, #48]	; (800bfcc <prvInitialiseTaskLists+0x6c>)
 800bf9a:	f7fe f84d 	bl	800a038 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bf9e:	480c      	ldr	r0, [pc, #48]	; (800bfd0 <prvInitialiseTaskLists+0x70>)
 800bfa0:	f7fe f84a 	bl	800a038 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bfa4:	480b      	ldr	r0, [pc, #44]	; (800bfd4 <prvInitialiseTaskLists+0x74>)
 800bfa6:	f7fe f847 	bl	800a038 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bfaa:	4b0b      	ldr	r3, [pc, #44]	; (800bfd8 <prvInitialiseTaskLists+0x78>)
 800bfac:	4a05      	ldr	r2, [pc, #20]	; (800bfc4 <prvInitialiseTaskLists+0x64>)
 800bfae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bfb0:	4b0a      	ldr	r3, [pc, #40]	; (800bfdc <prvInitialiseTaskLists+0x7c>)
 800bfb2:	4a05      	ldr	r2, [pc, #20]	; (800bfc8 <prvInitialiseTaskLists+0x68>)
 800bfb4:	601a      	str	r2, [r3, #0]
}
 800bfb6:	bf00      	nop
 800bfb8:	3708      	adds	r7, #8
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	2000969c 	.word	0x2000969c
 800bfc4:	20009afc 	.word	0x20009afc
 800bfc8:	20009b10 	.word	0x20009b10
 800bfcc:	20009b2c 	.word	0x20009b2c
 800bfd0:	20009b40 	.word	0x20009b40
 800bfd4:	20009b58 	.word	0x20009b58
 800bfd8:	20009b24 	.word	0x20009b24
 800bfdc:	20009b28 	.word	0x20009b28

0800bfe0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bfe6:	e019      	b.n	800c01c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bfe8:	f000 fed8 	bl	800cd9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfec:	4b10      	ldr	r3, [pc, #64]	; (800c030 <prvCheckTasksWaitingTermination+0x50>)
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	68db      	ldr	r3, [r3, #12]
 800bff2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	3304      	adds	r3, #4
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7fe f8a7 	bl	800a14c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bffe:	4b0d      	ldr	r3, [pc, #52]	; (800c034 <prvCheckTasksWaitingTermination+0x54>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	3b01      	subs	r3, #1
 800c004:	4a0b      	ldr	r2, [pc, #44]	; (800c034 <prvCheckTasksWaitingTermination+0x54>)
 800c006:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c008:	4b0b      	ldr	r3, [pc, #44]	; (800c038 <prvCheckTasksWaitingTermination+0x58>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	3b01      	subs	r3, #1
 800c00e:	4a0a      	ldr	r2, [pc, #40]	; (800c038 <prvCheckTasksWaitingTermination+0x58>)
 800c010:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c012:	f000 fef7 	bl	800ce04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 f810 	bl	800c03c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c01c:	4b06      	ldr	r3, [pc, #24]	; (800c038 <prvCheckTasksWaitingTermination+0x58>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d1e1      	bne.n	800bfe8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c024:	bf00      	nop
 800c026:	bf00      	nop
 800c028:	3708      	adds	r7, #8
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop
 800c030:	20009b40 	.word	0x20009b40
 800c034:	20009b6c 	.word	0x20009b6c
 800c038:	20009b54 	.word	0x20009b54

0800c03c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b084      	sub	sp, #16
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d108      	bne.n	800c060 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c052:	4618      	mov	r0, r3
 800c054:	f001 f898 	bl	800d188 <vPortFree>
				vPortFree( pxTCB );
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f001 f895 	bl	800d188 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c05e:	e01a      	b.n	800c096 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c066:	2b01      	cmp	r3, #1
 800c068:	d103      	bne.n	800c072 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f001 f88c 	bl	800d188 <vPortFree>
	}
 800c070:	e011      	b.n	800c096 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c078:	2b02      	cmp	r3, #2
 800c07a:	d00c      	beq.n	800c096 <prvDeleteTCB+0x5a>
	__asm volatile
 800c07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c080:	b672      	cpsid	i
 800c082:	f383 8811 	msr	BASEPRI, r3
 800c086:	f3bf 8f6f 	isb	sy
 800c08a:	f3bf 8f4f 	dsb	sy
 800c08e:	b662      	cpsie	i
 800c090:	60fb      	str	r3, [r7, #12]
}
 800c092:	bf00      	nop
 800c094:	e7fe      	b.n	800c094 <prvDeleteTCB+0x58>
	}
 800c096:	bf00      	nop
 800c098:	3710      	adds	r7, #16
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
	...

0800c0a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0a6:	4b0c      	ldr	r3, [pc, #48]	; (800c0d8 <prvResetNextTaskUnblockTime+0x38>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d104      	bne.n	800c0ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c0b0:	4b0a      	ldr	r3, [pc, #40]	; (800c0dc <prvResetNextTaskUnblockTime+0x3c>)
 800c0b2:	f04f 32ff 	mov.w	r2, #4294967295
 800c0b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c0b8:	e008      	b.n	800c0cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0ba:	4b07      	ldr	r3, [pc, #28]	; (800c0d8 <prvResetNextTaskUnblockTime+0x38>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	68db      	ldr	r3, [r3, #12]
 800c0c0:	68db      	ldr	r3, [r3, #12]
 800c0c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	685b      	ldr	r3, [r3, #4]
 800c0c8:	4a04      	ldr	r2, [pc, #16]	; (800c0dc <prvResetNextTaskUnblockTime+0x3c>)
 800c0ca:	6013      	str	r3, [r2, #0]
}
 800c0cc:	bf00      	nop
 800c0ce:	370c      	adds	r7, #12
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr
 800c0d8:	20009b24 	.word	0x20009b24
 800c0dc:	20009b8c 	.word	0x20009b8c

0800c0e0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b083      	sub	sp, #12
 800c0e4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c0e6:	4b05      	ldr	r3, [pc, #20]	; (800c0fc <xTaskGetCurrentTaskHandle+0x1c>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c0ec:	687b      	ldr	r3, [r7, #4]
	}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	370c      	adds	r7, #12
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr
 800c0fa:	bf00      	nop
 800c0fc:	20009698 	.word	0x20009698

0800c100 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c100:	b480      	push	{r7}
 800c102:	b083      	sub	sp, #12
 800c104:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c106:	4b0b      	ldr	r3, [pc, #44]	; (800c134 <xTaskGetSchedulerState+0x34>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d102      	bne.n	800c114 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c10e:	2301      	movs	r3, #1
 800c110:	607b      	str	r3, [r7, #4]
 800c112:	e008      	b.n	800c126 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c114:	4b08      	ldr	r3, [pc, #32]	; (800c138 <xTaskGetSchedulerState+0x38>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d102      	bne.n	800c122 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c11c:	2302      	movs	r3, #2
 800c11e:	607b      	str	r3, [r7, #4]
 800c120:	e001      	b.n	800c126 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c122:	2300      	movs	r3, #0
 800c124:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c126:	687b      	ldr	r3, [r7, #4]
	}
 800c128:	4618      	mov	r0, r3
 800c12a:	370c      	adds	r7, #12
 800c12c:	46bd      	mov	sp, r7
 800c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c132:	4770      	bx	lr
 800c134:	20009b78 	.word	0x20009b78
 800c138:	20009b94 	.word	0x20009b94

0800c13c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c148:	2300      	movs	r3, #0
 800c14a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d051      	beq.n	800c1f6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c156:	4b2a      	ldr	r3, [pc, #168]	; (800c200 <xTaskPriorityInherit+0xc4>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d241      	bcs.n	800c1e4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	699b      	ldr	r3, [r3, #24]
 800c164:	2b00      	cmp	r3, #0
 800c166:	db06      	blt.n	800c176 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c168:	4b25      	ldr	r3, [pc, #148]	; (800c200 <xTaskPriorityInherit+0xc4>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c16e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	6959      	ldr	r1, [r3, #20]
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c17e:	4613      	mov	r3, r2
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	4413      	add	r3, r2
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	4a1f      	ldr	r2, [pc, #124]	; (800c204 <xTaskPriorityInherit+0xc8>)
 800c188:	4413      	add	r3, r2
 800c18a:	4299      	cmp	r1, r3
 800c18c:	d122      	bne.n	800c1d4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	3304      	adds	r3, #4
 800c192:	4618      	mov	r0, r3
 800c194:	f7fd ffda 	bl	800a14c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c198:	4b19      	ldr	r3, [pc, #100]	; (800c200 <xTaskPriorityInherit+0xc4>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1a6:	4b18      	ldr	r3, [pc, #96]	; (800c208 <xTaskPriorityInherit+0xcc>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d903      	bls.n	800c1b6 <xTaskPriorityInherit+0x7a>
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b2:	4a15      	ldr	r2, [pc, #84]	; (800c208 <xTaskPriorityInherit+0xcc>)
 800c1b4:	6013      	str	r3, [r2, #0]
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ba:	4613      	mov	r3, r2
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	4413      	add	r3, r2
 800c1c0:	009b      	lsls	r3, r3, #2
 800c1c2:	4a10      	ldr	r2, [pc, #64]	; (800c204 <xTaskPriorityInherit+0xc8>)
 800c1c4:	441a      	add	r2, r3
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	3304      	adds	r3, #4
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	4610      	mov	r0, r2
 800c1ce:	f7fd ff60 	bl	800a092 <vListInsertEnd>
 800c1d2:	e004      	b.n	800c1de <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c1d4:	4b0a      	ldr	r3, [pc, #40]	; (800c200 <xTaskPriorityInherit+0xc4>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	60fb      	str	r3, [r7, #12]
 800c1e2:	e008      	b.n	800c1f6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c1e8:	4b05      	ldr	r3, [pc, #20]	; (800c200 <xTaskPriorityInherit+0xc4>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d201      	bcs.n	800c1f6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
	}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3710      	adds	r7, #16
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	20009698 	.word	0x20009698
 800c204:	2000969c 	.word	0x2000969c
 800c208:	20009b74 	.word	0x20009b74

0800c20c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b086      	sub	sp, #24
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c218:	2300      	movs	r3, #0
 800c21a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d05a      	beq.n	800c2d8 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c222:	4b30      	ldr	r3, [pc, #192]	; (800c2e4 <xTaskPriorityDisinherit+0xd8>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	693a      	ldr	r2, [r7, #16]
 800c228:	429a      	cmp	r2, r3
 800c22a:	d00c      	beq.n	800c246 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800c22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c230:	b672      	cpsid	i
 800c232:	f383 8811 	msr	BASEPRI, r3
 800c236:	f3bf 8f6f 	isb	sy
 800c23a:	f3bf 8f4f 	dsb	sy
 800c23e:	b662      	cpsie	i
 800c240:	60fb      	str	r3, [r7, #12]
}
 800c242:	bf00      	nop
 800c244:	e7fe      	b.n	800c244 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d10c      	bne.n	800c268 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800c24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c252:	b672      	cpsid	i
 800c254:	f383 8811 	msr	BASEPRI, r3
 800c258:	f3bf 8f6f 	isb	sy
 800c25c:	f3bf 8f4f 	dsb	sy
 800c260:	b662      	cpsie	i
 800c262:	60bb      	str	r3, [r7, #8]
}
 800c264:	bf00      	nop
 800c266:	e7fe      	b.n	800c266 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c26c:	1e5a      	subs	r2, r3, #1
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d02c      	beq.n	800c2d8 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c282:	2b00      	cmp	r3, #0
 800c284:	d128      	bne.n	800c2d8 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	3304      	adds	r3, #4
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7fd ff5e 	bl	800a14c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c29c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2a8:	4b0f      	ldr	r3, [pc, #60]	; (800c2e8 <xTaskPriorityDisinherit+0xdc>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d903      	bls.n	800c2b8 <xTaskPriorityDisinherit+0xac>
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b4:	4a0c      	ldr	r2, [pc, #48]	; (800c2e8 <xTaskPriorityDisinherit+0xdc>)
 800c2b6:	6013      	str	r3, [r2, #0]
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2bc:	4613      	mov	r3, r2
 800c2be:	009b      	lsls	r3, r3, #2
 800c2c0:	4413      	add	r3, r2
 800c2c2:	009b      	lsls	r3, r3, #2
 800c2c4:	4a09      	ldr	r2, [pc, #36]	; (800c2ec <xTaskPriorityDisinherit+0xe0>)
 800c2c6:	441a      	add	r2, r3
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	3304      	adds	r3, #4
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	4610      	mov	r0, r2
 800c2d0:	f7fd fedf 	bl	800a092 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c2d8:	697b      	ldr	r3, [r7, #20]
	}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3718      	adds	r7, #24
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	20009698 	.word	0x20009698
 800c2e8:	20009b74 	.word	0x20009b74
 800c2ec:	2000969c 	.word	0x2000969c

0800c2f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b088      	sub	sp, #32
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c2fe:	2301      	movs	r3, #1
 800c300:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d06e      	beq.n	800c3e6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c308:	69bb      	ldr	r3, [r7, #24]
 800c30a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d10c      	bne.n	800c32a <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800c310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c314:	b672      	cpsid	i
 800c316:	f383 8811 	msr	BASEPRI, r3
 800c31a:	f3bf 8f6f 	isb	sy
 800c31e:	f3bf 8f4f 	dsb	sy
 800c322:	b662      	cpsie	i
 800c324:	60fb      	str	r3, [r7, #12]
}
 800c326:	bf00      	nop
 800c328:	e7fe      	b.n	800c328 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c32a:	69bb      	ldr	r3, [r7, #24]
 800c32c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c32e:	683a      	ldr	r2, [r7, #0]
 800c330:	429a      	cmp	r2, r3
 800c332:	d902      	bls.n	800c33a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	61fb      	str	r3, [r7, #28]
 800c338:	e002      	b.n	800c340 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c33a:	69bb      	ldr	r3, [r7, #24]
 800c33c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c33e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c340:	69bb      	ldr	r3, [r7, #24]
 800c342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c344:	69fa      	ldr	r2, [r7, #28]
 800c346:	429a      	cmp	r2, r3
 800c348:	d04d      	beq.n	800c3e6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c34e:	697a      	ldr	r2, [r7, #20]
 800c350:	429a      	cmp	r2, r3
 800c352:	d148      	bne.n	800c3e6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c354:	4b26      	ldr	r3, [pc, #152]	; (800c3f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	69ba      	ldr	r2, [r7, #24]
 800c35a:	429a      	cmp	r2, r3
 800c35c:	d10c      	bne.n	800c378 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800c35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c362:	b672      	cpsid	i
 800c364:	f383 8811 	msr	BASEPRI, r3
 800c368:	f3bf 8f6f 	isb	sy
 800c36c:	f3bf 8f4f 	dsb	sy
 800c370:	b662      	cpsie	i
 800c372:	60bb      	str	r3, [r7, #8]
}
 800c374:	bf00      	nop
 800c376:	e7fe      	b.n	800c376 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c37c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c37e:	69bb      	ldr	r3, [r7, #24]
 800c380:	69fa      	ldr	r2, [r7, #28]
 800c382:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	699b      	ldr	r3, [r3, #24]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	db04      	blt.n	800c396 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c38c:	69fb      	ldr	r3, [r7, #28]
 800c38e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c396:	69bb      	ldr	r3, [r7, #24]
 800c398:	6959      	ldr	r1, [r3, #20]
 800c39a:	693a      	ldr	r2, [r7, #16]
 800c39c:	4613      	mov	r3, r2
 800c39e:	009b      	lsls	r3, r3, #2
 800c3a0:	4413      	add	r3, r2
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	4a13      	ldr	r2, [pc, #76]	; (800c3f4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c3a6:	4413      	add	r3, r2
 800c3a8:	4299      	cmp	r1, r3
 800c3aa:	d11c      	bne.n	800c3e6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3ac:	69bb      	ldr	r3, [r7, #24]
 800c3ae:	3304      	adds	r3, #4
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7fd fecb 	bl	800a14c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c3b6:	69bb      	ldr	r3, [r7, #24]
 800c3b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ba:	4b0f      	ldr	r3, [pc, #60]	; (800c3f8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d903      	bls.n	800c3ca <vTaskPriorityDisinheritAfterTimeout+0xda>
 800c3c2:	69bb      	ldr	r3, [r7, #24]
 800c3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c6:	4a0c      	ldr	r2, [pc, #48]	; (800c3f8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800c3c8:	6013      	str	r3, [r2, #0]
 800c3ca:	69bb      	ldr	r3, [r7, #24]
 800c3cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ce:	4613      	mov	r3, r2
 800c3d0:	009b      	lsls	r3, r3, #2
 800c3d2:	4413      	add	r3, r2
 800c3d4:	009b      	lsls	r3, r3, #2
 800c3d6:	4a07      	ldr	r2, [pc, #28]	; (800c3f4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c3d8:	441a      	add	r2, r3
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	3304      	adds	r3, #4
 800c3de:	4619      	mov	r1, r3
 800c3e0:	4610      	mov	r0, r2
 800c3e2:	f7fd fe56 	bl	800a092 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c3e6:	bf00      	nop
 800c3e8:	3720      	adds	r7, #32
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}
 800c3ee:	bf00      	nop
 800c3f0:	20009698 	.word	0x20009698
 800c3f4:	2000969c 	.word	0x2000969c
 800c3f8:	20009b74 	.word	0x20009b74

0800c3fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c3fc:	b480      	push	{r7}
 800c3fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c400:	4b07      	ldr	r3, [pc, #28]	; (800c420 <pvTaskIncrementMutexHeldCount+0x24>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d004      	beq.n	800c412 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c408:	4b05      	ldr	r3, [pc, #20]	; (800c420 <pvTaskIncrementMutexHeldCount+0x24>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c40e:	3201      	adds	r2, #1
 800c410:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c412:	4b03      	ldr	r3, [pc, #12]	; (800c420 <pvTaskIncrementMutexHeldCount+0x24>)
 800c414:	681b      	ldr	r3, [r3, #0]
	}
 800c416:	4618      	mov	r0, r3
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr
 800c420:	20009698 	.word	0x20009698

0800c424 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b084      	sub	sp, #16
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c42e:	4b21      	ldr	r3, [pc, #132]	; (800c4b4 <prvAddCurrentTaskToDelayedList+0x90>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c434:	4b20      	ldr	r3, [pc, #128]	; (800c4b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	3304      	adds	r3, #4
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7fd fe86 	bl	800a14c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c446:	d10a      	bne.n	800c45e <prvAddCurrentTaskToDelayedList+0x3a>
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d007      	beq.n	800c45e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c44e:	4b1a      	ldr	r3, [pc, #104]	; (800c4b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	3304      	adds	r3, #4
 800c454:	4619      	mov	r1, r3
 800c456:	4819      	ldr	r0, [pc, #100]	; (800c4bc <prvAddCurrentTaskToDelayedList+0x98>)
 800c458:	f7fd fe1b 	bl	800a092 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c45c:	e026      	b.n	800c4ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c45e:	68fa      	ldr	r2, [r7, #12]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	4413      	add	r3, r2
 800c464:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c466:	4b14      	ldr	r3, [pc, #80]	; (800c4b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	68ba      	ldr	r2, [r7, #8]
 800c46c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c46e:	68ba      	ldr	r2, [r7, #8]
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	429a      	cmp	r2, r3
 800c474:	d209      	bcs.n	800c48a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c476:	4b12      	ldr	r3, [pc, #72]	; (800c4c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c478:	681a      	ldr	r2, [r3, #0]
 800c47a:	4b0f      	ldr	r3, [pc, #60]	; (800c4b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	3304      	adds	r3, #4
 800c480:	4619      	mov	r1, r3
 800c482:	4610      	mov	r0, r2
 800c484:	f7fd fe29 	bl	800a0da <vListInsert>
}
 800c488:	e010      	b.n	800c4ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c48a:	4b0e      	ldr	r3, [pc, #56]	; (800c4c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c48c:	681a      	ldr	r2, [r3, #0]
 800c48e:	4b0a      	ldr	r3, [pc, #40]	; (800c4b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	3304      	adds	r3, #4
 800c494:	4619      	mov	r1, r3
 800c496:	4610      	mov	r0, r2
 800c498:	f7fd fe1f 	bl	800a0da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c49c:	4b0a      	ldr	r3, [pc, #40]	; (800c4c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	68ba      	ldr	r2, [r7, #8]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d202      	bcs.n	800c4ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c4a6:	4a08      	ldr	r2, [pc, #32]	; (800c4c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	6013      	str	r3, [r2, #0]
}
 800c4ac:	bf00      	nop
 800c4ae:	3710      	adds	r7, #16
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}
 800c4b4:	20009b70 	.word	0x20009b70
 800c4b8:	20009698 	.word	0x20009698
 800c4bc:	20009b58 	.word	0x20009b58
 800c4c0:	20009b28 	.word	0x20009b28
 800c4c4:	20009b24 	.word	0x20009b24
 800c4c8:	20009b8c 	.word	0x20009b8c

0800c4cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b08a      	sub	sp, #40	; 0x28
 800c4d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c4d6:	f000 fb15 	bl	800cb04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c4da:	4b1d      	ldr	r3, [pc, #116]	; (800c550 <xTimerCreateTimerTask+0x84>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d021      	beq.n	800c526 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c4ea:	1d3a      	adds	r2, r7, #4
 800c4ec:	f107 0108 	add.w	r1, r7, #8
 800c4f0:	f107 030c 	add.w	r3, r7, #12
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f7fd fd85 	bl	800a004 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c4fa:	6879      	ldr	r1, [r7, #4]
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	68fa      	ldr	r2, [r7, #12]
 800c500:	9202      	str	r2, [sp, #8]
 800c502:	9301      	str	r3, [sp, #4]
 800c504:	2302      	movs	r3, #2
 800c506:	9300      	str	r3, [sp, #0]
 800c508:	2300      	movs	r3, #0
 800c50a:	460a      	mov	r2, r1
 800c50c:	4911      	ldr	r1, [pc, #68]	; (800c554 <xTimerCreateTimerTask+0x88>)
 800c50e:	4812      	ldr	r0, [pc, #72]	; (800c558 <xTimerCreateTimerTask+0x8c>)
 800c510:	f7fe ff96 	bl	800b440 <xTaskCreateStatic>
 800c514:	4603      	mov	r3, r0
 800c516:	4a11      	ldr	r2, [pc, #68]	; (800c55c <xTimerCreateTimerTask+0x90>)
 800c518:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c51a:	4b10      	ldr	r3, [pc, #64]	; (800c55c <xTimerCreateTimerTask+0x90>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d001      	beq.n	800c526 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c522:	2301      	movs	r3, #1
 800c524:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d10c      	bne.n	800c546 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800c52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c530:	b672      	cpsid	i
 800c532:	f383 8811 	msr	BASEPRI, r3
 800c536:	f3bf 8f6f 	isb	sy
 800c53a:	f3bf 8f4f 	dsb	sy
 800c53e:	b662      	cpsie	i
 800c540:	613b      	str	r3, [r7, #16]
}
 800c542:	bf00      	nop
 800c544:	e7fe      	b.n	800c544 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800c546:	697b      	ldr	r3, [r7, #20]
}
 800c548:	4618      	mov	r0, r3
 800c54a:	3718      	adds	r7, #24
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	20009bc8 	.word	0x20009bc8
 800c554:	0801ceac 	.word	0x0801ceac
 800c558:	0800c69d 	.word	0x0800c69d
 800c55c:	20009bcc 	.word	0x20009bcc

0800c560 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b08a      	sub	sp, #40	; 0x28
 800c564:	af00      	add	r7, sp, #0
 800c566:	60f8      	str	r0, [r7, #12]
 800c568:	60b9      	str	r1, [r7, #8]
 800c56a:	607a      	str	r2, [r7, #4]
 800c56c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c56e:	2300      	movs	r3, #0
 800c570:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d10c      	bne.n	800c592 <xTimerGenericCommand+0x32>
	__asm volatile
 800c578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c57c:	b672      	cpsid	i
 800c57e:	f383 8811 	msr	BASEPRI, r3
 800c582:	f3bf 8f6f 	isb	sy
 800c586:	f3bf 8f4f 	dsb	sy
 800c58a:	b662      	cpsie	i
 800c58c:	623b      	str	r3, [r7, #32]
}
 800c58e:	bf00      	nop
 800c590:	e7fe      	b.n	800c590 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c592:	4b1a      	ldr	r3, [pc, #104]	; (800c5fc <xTimerGenericCommand+0x9c>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d02a      	beq.n	800c5f0 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	2b05      	cmp	r3, #5
 800c5aa:	dc18      	bgt.n	800c5de <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c5ac:	f7ff fda8 	bl	800c100 <xTaskGetSchedulerState>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b02      	cmp	r3, #2
 800c5b4:	d109      	bne.n	800c5ca <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c5b6:	4b11      	ldr	r3, [pc, #68]	; (800c5fc <xTimerGenericCommand+0x9c>)
 800c5b8:	6818      	ldr	r0, [r3, #0]
 800c5ba:	f107 0110 	add.w	r1, r7, #16
 800c5be:	2300      	movs	r3, #0
 800c5c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5c2:	f7fe f86b 	bl	800a69c <xQueueGenericSend>
 800c5c6:	6278      	str	r0, [r7, #36]	; 0x24
 800c5c8:	e012      	b.n	800c5f0 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c5ca:	4b0c      	ldr	r3, [pc, #48]	; (800c5fc <xTimerGenericCommand+0x9c>)
 800c5cc:	6818      	ldr	r0, [r3, #0]
 800c5ce:	f107 0110 	add.w	r1, r7, #16
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	f7fe f861 	bl	800a69c <xQueueGenericSend>
 800c5da:	6278      	str	r0, [r7, #36]	; 0x24
 800c5dc:	e008      	b.n	800c5f0 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c5de:	4b07      	ldr	r3, [pc, #28]	; (800c5fc <xTimerGenericCommand+0x9c>)
 800c5e0:	6818      	ldr	r0, [r3, #0]
 800c5e2:	f107 0110 	add.w	r1, r7, #16
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	683a      	ldr	r2, [r7, #0]
 800c5ea:	f7fe f95d 	bl	800a8a8 <xQueueGenericSendFromISR>
 800c5ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3728      	adds	r7, #40	; 0x28
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	20009bc8 	.word	0x20009bc8

0800c600 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b088      	sub	sp, #32
 800c604:	af02      	add	r7, sp, #8
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c60a:	4b23      	ldr	r3, [pc, #140]	; (800c698 <prvProcessExpiredTimer+0x98>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	68db      	ldr	r3, [r3, #12]
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	3304      	adds	r3, #4
 800c618:	4618      	mov	r0, r3
 800c61a:	f7fd fd97 	bl	800a14c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c624:	f003 0304 	and.w	r3, r3, #4
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d024      	beq.n	800c676 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	699a      	ldr	r2, [r3, #24]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	18d1      	adds	r1, r2, r3
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	683a      	ldr	r2, [r7, #0]
 800c638:	6978      	ldr	r0, [r7, #20]
 800c63a:	f000 f8d3 	bl	800c7e4 <prvInsertTimerInActiveList>
 800c63e:	4603      	mov	r3, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	d021      	beq.n	800c688 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c644:	2300      	movs	r3, #0
 800c646:	9300      	str	r3, [sp, #0]
 800c648:	2300      	movs	r3, #0
 800c64a:	687a      	ldr	r2, [r7, #4]
 800c64c:	2100      	movs	r1, #0
 800c64e:	6978      	ldr	r0, [r7, #20]
 800c650:	f7ff ff86 	bl	800c560 <xTimerGenericCommand>
 800c654:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d115      	bne.n	800c688 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800c65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c660:	b672      	cpsid	i
 800c662:	f383 8811 	msr	BASEPRI, r3
 800c666:	f3bf 8f6f 	isb	sy
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	b662      	cpsie	i
 800c670:	60fb      	str	r3, [r7, #12]
}
 800c672:	bf00      	nop
 800c674:	e7fe      	b.n	800c674 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c67c:	f023 0301 	bic.w	r3, r3, #1
 800c680:	b2da      	uxtb	r2, r3
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	6a1b      	ldr	r3, [r3, #32]
 800c68c:	6978      	ldr	r0, [r7, #20]
 800c68e:	4798      	blx	r3
}
 800c690:	bf00      	nop
 800c692:	3718      	adds	r7, #24
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	20009bc0 	.word	0x20009bc0

0800c69c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c6a4:	f107 0308 	add.w	r3, r7, #8
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f000 f857 	bl	800c75c <prvGetNextExpireTime>
 800c6ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	68f8      	ldr	r0, [r7, #12]
 800c6b6:	f000 f803 	bl	800c6c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c6ba:	f000 f8d5 	bl	800c868 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c6be:	e7f1      	b.n	800c6a4 <prvTimerTask+0x8>

0800c6c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b084      	sub	sp, #16
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c6ca:	f7ff f903 	bl	800b8d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c6ce:	f107 0308 	add.w	r3, r7, #8
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f000 f866 	bl	800c7a4 <prvSampleTimeNow>
 800c6d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d130      	bne.n	800c742 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d10a      	bne.n	800c6fc <prvProcessTimerOrBlockTask+0x3c>
 800c6e6:	687a      	ldr	r2, [r7, #4]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d806      	bhi.n	800c6fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c6ee:	f7ff f8ff 	bl	800b8f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c6f2:	68f9      	ldr	r1, [r7, #12]
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f7ff ff83 	bl	800c600 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c6fa:	e024      	b.n	800c746 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d008      	beq.n	800c714 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c702:	4b13      	ldr	r3, [pc, #76]	; (800c750 <prvProcessTimerOrBlockTask+0x90>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d101      	bne.n	800c710 <prvProcessTimerOrBlockTask+0x50>
 800c70c:	2301      	movs	r3, #1
 800c70e:	e000      	b.n	800c712 <prvProcessTimerOrBlockTask+0x52>
 800c710:	2300      	movs	r3, #0
 800c712:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c714:	4b0f      	ldr	r3, [pc, #60]	; (800c754 <prvProcessTimerOrBlockTask+0x94>)
 800c716:	6818      	ldr	r0, [r3, #0]
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	1ad3      	subs	r3, r2, r3
 800c71e:	683a      	ldr	r2, [r7, #0]
 800c720:	4619      	mov	r1, r3
 800c722:	f7fe fe59 	bl	800b3d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c726:	f7ff f8e3 	bl	800b8f0 <xTaskResumeAll>
 800c72a:	4603      	mov	r3, r0
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d10a      	bne.n	800c746 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c730:	4b09      	ldr	r3, [pc, #36]	; (800c758 <prvProcessTimerOrBlockTask+0x98>)
 800c732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c736:	601a      	str	r2, [r3, #0]
 800c738:	f3bf 8f4f 	dsb	sy
 800c73c:	f3bf 8f6f 	isb	sy
}
 800c740:	e001      	b.n	800c746 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c742:	f7ff f8d5 	bl	800b8f0 <xTaskResumeAll>
}
 800c746:	bf00      	nop
 800c748:	3710      	adds	r7, #16
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}
 800c74e:	bf00      	nop
 800c750:	20009bc4 	.word	0x20009bc4
 800c754:	20009bc8 	.word	0x20009bc8
 800c758:	e000ed04 	.word	0xe000ed04

0800c75c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c75c:	b480      	push	{r7}
 800c75e:	b085      	sub	sp, #20
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c764:	4b0e      	ldr	r3, [pc, #56]	; (800c7a0 <prvGetNextExpireTime+0x44>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d101      	bne.n	800c772 <prvGetNextExpireTime+0x16>
 800c76e:	2201      	movs	r2, #1
 800c770:	e000      	b.n	800c774 <prvGetNextExpireTime+0x18>
 800c772:	2200      	movs	r2, #0
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d105      	bne.n	800c78c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c780:	4b07      	ldr	r3, [pc, #28]	; (800c7a0 <prvGetNextExpireTime+0x44>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	68db      	ldr	r3, [r3, #12]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	60fb      	str	r3, [r7, #12]
 800c78a:	e001      	b.n	800c790 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c78c:	2300      	movs	r3, #0
 800c78e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c790:	68fb      	ldr	r3, [r7, #12]
}
 800c792:	4618      	mov	r0, r3
 800c794:	3714      	adds	r7, #20
 800c796:	46bd      	mov	sp, r7
 800c798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79c:	4770      	bx	lr
 800c79e:	bf00      	nop
 800c7a0:	20009bc0 	.word	0x20009bc0

0800c7a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c7ac:	f7ff f940 	bl	800ba30 <xTaskGetTickCount>
 800c7b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c7b2:	4b0b      	ldr	r3, [pc, #44]	; (800c7e0 <prvSampleTimeNow+0x3c>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	68fa      	ldr	r2, [r7, #12]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d205      	bcs.n	800c7c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c7bc:	f000 f93c 	bl	800ca38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	601a      	str	r2, [r3, #0]
 800c7c6:	e002      	b.n	800c7ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c7ce:	4a04      	ldr	r2, [pc, #16]	; (800c7e0 <prvSampleTimeNow+0x3c>)
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3710      	adds	r7, #16
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
 800c7de:	bf00      	nop
 800c7e0:	20009bd0 	.word	0x20009bd0

0800c7e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b086      	sub	sp, #24
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	60f8      	str	r0, [r7, #12]
 800c7ec:	60b9      	str	r1, [r7, #8]
 800c7ee:	607a      	str	r2, [r7, #4]
 800c7f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	68ba      	ldr	r2, [r7, #8]
 800c7fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	68fa      	ldr	r2, [r7, #12]
 800c800:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c802:	68ba      	ldr	r2, [r7, #8]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	429a      	cmp	r2, r3
 800c808:	d812      	bhi.n	800c830 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c80a:	687a      	ldr	r2, [r7, #4]
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	1ad2      	subs	r2, r2, r3
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	699b      	ldr	r3, [r3, #24]
 800c814:	429a      	cmp	r2, r3
 800c816:	d302      	bcc.n	800c81e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c818:	2301      	movs	r3, #1
 800c81a:	617b      	str	r3, [r7, #20]
 800c81c:	e01b      	b.n	800c856 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c81e:	4b10      	ldr	r3, [pc, #64]	; (800c860 <prvInsertTimerInActiveList+0x7c>)
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	3304      	adds	r3, #4
 800c826:	4619      	mov	r1, r3
 800c828:	4610      	mov	r0, r2
 800c82a:	f7fd fc56 	bl	800a0da <vListInsert>
 800c82e:	e012      	b.n	800c856 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c830:	687a      	ldr	r2, [r7, #4]
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	429a      	cmp	r2, r3
 800c836:	d206      	bcs.n	800c846 <prvInsertTimerInActiveList+0x62>
 800c838:	68ba      	ldr	r2, [r7, #8]
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d302      	bcc.n	800c846 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c840:	2301      	movs	r3, #1
 800c842:	617b      	str	r3, [r7, #20]
 800c844:	e007      	b.n	800c856 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c846:	4b07      	ldr	r3, [pc, #28]	; (800c864 <prvInsertTimerInActiveList+0x80>)
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	3304      	adds	r3, #4
 800c84e:	4619      	mov	r1, r3
 800c850:	4610      	mov	r0, r2
 800c852:	f7fd fc42 	bl	800a0da <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c856:	697b      	ldr	r3, [r7, #20]
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3718      	adds	r7, #24
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	20009bc4 	.word	0x20009bc4
 800c864:	20009bc0 	.word	0x20009bc0

0800c868 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b08e      	sub	sp, #56	; 0x38
 800c86c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c86e:	e0d0      	b.n	800ca12 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2b00      	cmp	r3, #0
 800c874:	da1a      	bge.n	800c8ac <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c876:	1d3b      	adds	r3, r7, #4
 800c878:	3304      	adds	r3, #4
 800c87a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d10c      	bne.n	800c89c <prvProcessReceivedCommands+0x34>
	__asm volatile
 800c882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c886:	b672      	cpsid	i
 800c888:	f383 8811 	msr	BASEPRI, r3
 800c88c:	f3bf 8f6f 	isb	sy
 800c890:	f3bf 8f4f 	dsb	sy
 800c894:	b662      	cpsie	i
 800c896:	61fb      	str	r3, [r7, #28]
}
 800c898:	bf00      	nop
 800c89a:	e7fe      	b.n	800c89a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8a2:	6850      	ldr	r0, [r2, #4]
 800c8a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8a6:	6892      	ldr	r2, [r2, #8]
 800c8a8:	4611      	mov	r1, r2
 800c8aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	f2c0 80ae 	blt.w	800ca10 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ba:	695b      	ldr	r3, [r3, #20]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d004      	beq.n	800c8ca <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c2:	3304      	adds	r3, #4
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7fd fc41 	bl	800a14c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c8ca:	463b      	mov	r3, r7
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7ff ff69 	bl	800c7a4 <prvSampleTimeNow>
 800c8d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2b09      	cmp	r3, #9
 800c8d8:	f200 809b 	bhi.w	800ca12 <prvProcessReceivedCommands+0x1aa>
 800c8dc:	a201      	add	r2, pc, #4	; (adr r2, 800c8e4 <prvProcessReceivedCommands+0x7c>)
 800c8de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8e2:	bf00      	nop
 800c8e4:	0800c90d 	.word	0x0800c90d
 800c8e8:	0800c90d 	.word	0x0800c90d
 800c8ec:	0800c90d 	.word	0x0800c90d
 800c8f0:	0800c985 	.word	0x0800c985
 800c8f4:	0800c999 	.word	0x0800c999
 800c8f8:	0800c9e7 	.word	0x0800c9e7
 800c8fc:	0800c90d 	.word	0x0800c90d
 800c900:	0800c90d 	.word	0x0800c90d
 800c904:	0800c985 	.word	0x0800c985
 800c908:	0800c999 	.word	0x0800c999
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c90e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c912:	f043 0301 	orr.w	r3, r3, #1
 800c916:	b2da      	uxtb	r2, r3
 800c918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c91e:	68ba      	ldr	r2, [r7, #8]
 800c920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c922:	699b      	ldr	r3, [r3, #24]
 800c924:	18d1      	adds	r1, r2, r3
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c92a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c92c:	f7ff ff5a 	bl	800c7e4 <prvInsertTimerInActiveList>
 800c930:	4603      	mov	r3, r0
 800c932:	2b00      	cmp	r3, #0
 800c934:	d06d      	beq.n	800ca12 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c938:	6a1b      	ldr	r3, [r3, #32]
 800c93a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c93c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c944:	f003 0304 	and.w	r3, r3, #4
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d062      	beq.n	800ca12 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c94c:	68ba      	ldr	r2, [r7, #8]
 800c94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c950:	699b      	ldr	r3, [r3, #24]
 800c952:	441a      	add	r2, r3
 800c954:	2300      	movs	r3, #0
 800c956:	9300      	str	r3, [sp, #0]
 800c958:	2300      	movs	r3, #0
 800c95a:	2100      	movs	r1, #0
 800c95c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c95e:	f7ff fdff 	bl	800c560 <xTimerGenericCommand>
 800c962:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c964:	6a3b      	ldr	r3, [r7, #32]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d153      	bne.n	800ca12 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800c96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c96e:	b672      	cpsid	i
 800c970:	f383 8811 	msr	BASEPRI, r3
 800c974:	f3bf 8f6f 	isb	sy
 800c978:	f3bf 8f4f 	dsb	sy
 800c97c:	b662      	cpsie	i
 800c97e:	61bb      	str	r3, [r7, #24]
}
 800c980:	bf00      	nop
 800c982:	e7fe      	b.n	800c982 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c986:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c98a:	f023 0301 	bic.w	r3, r3, #1
 800c98e:	b2da      	uxtb	r2, r3
 800c990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c996:	e03c      	b.n	800ca12 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c99e:	f043 0301 	orr.w	r3, r3, #1
 800c9a2:	b2da      	uxtb	r2, r3
 800c9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c9aa:	68ba      	ldr	r2, [r7, #8]
 800c9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b2:	699b      	ldr	r3, [r3, #24]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d10c      	bne.n	800c9d2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800c9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9bc:	b672      	cpsid	i
 800c9be:	f383 8811 	msr	BASEPRI, r3
 800c9c2:	f3bf 8f6f 	isb	sy
 800c9c6:	f3bf 8f4f 	dsb	sy
 800c9ca:	b662      	cpsie	i
 800c9cc:	617b      	str	r3, [r7, #20]
}
 800c9ce:	bf00      	nop
 800c9d0:	e7fe      	b.n	800c9d0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d4:	699a      	ldr	r2, [r3, #24]
 800c9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d8:	18d1      	adds	r1, r2, r3
 800c9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9e0:	f7ff ff00 	bl	800c7e4 <prvInsertTimerInActiveList>
					break;
 800c9e4:	e015      	b.n	800ca12 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9ec:	f003 0302 	and.w	r3, r3, #2
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d103      	bne.n	800c9fc <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800c9f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9f6:	f000 fbc7 	bl	800d188 <vPortFree>
 800c9fa:	e00a      	b.n	800ca12 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca02:	f023 0301 	bic.w	r3, r3, #1
 800ca06:	b2da      	uxtb	r2, r3
 800ca08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ca0e:	e000      	b.n	800ca12 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ca10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca12:	4b08      	ldr	r3, [pc, #32]	; (800ca34 <prvProcessReceivedCommands+0x1cc>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	1d39      	adds	r1, r7, #4
 800ca18:	2200      	movs	r2, #0
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7fe f87a 	bl	800ab14 <xQueueReceive>
 800ca20:	4603      	mov	r3, r0
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	f47f af24 	bne.w	800c870 <prvProcessReceivedCommands+0x8>
	}
}
 800ca28:	bf00      	nop
 800ca2a:	bf00      	nop
 800ca2c:	3730      	adds	r7, #48	; 0x30
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}
 800ca32:	bf00      	nop
 800ca34:	20009bc8 	.word	0x20009bc8

0800ca38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b088      	sub	sp, #32
 800ca3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca3e:	e04a      	b.n	800cad6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca40:	4b2e      	ldr	r3, [pc, #184]	; (800cafc <prvSwitchTimerLists+0xc4>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	68db      	ldr	r3, [r3, #12]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca4a:	4b2c      	ldr	r3, [pc, #176]	; (800cafc <prvSwitchTimerLists+0xc4>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	68db      	ldr	r3, [r3, #12]
 800ca50:	68db      	ldr	r3, [r3, #12]
 800ca52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	3304      	adds	r3, #4
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7fd fb77 	bl	800a14c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	6a1b      	ldr	r3, [r3, #32]
 800ca62:	68f8      	ldr	r0, [r7, #12]
 800ca64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca6c:	f003 0304 	and.w	r3, r3, #4
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d030      	beq.n	800cad6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	699b      	ldr	r3, [r3, #24]
 800ca78:	693a      	ldr	r2, [r7, #16]
 800ca7a:	4413      	add	r3, r2
 800ca7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ca7e:	68ba      	ldr	r2, [r7, #8]
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d90e      	bls.n	800caa4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	68ba      	ldr	r2, [r7, #8]
 800ca8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	68fa      	ldr	r2, [r7, #12]
 800ca90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca92:	4b1a      	ldr	r3, [pc, #104]	; (800cafc <prvSwitchTimerLists+0xc4>)
 800ca94:	681a      	ldr	r2, [r3, #0]
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	3304      	adds	r3, #4
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	4610      	mov	r0, r2
 800ca9e:	f7fd fb1c 	bl	800a0da <vListInsert>
 800caa2:	e018      	b.n	800cad6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800caa4:	2300      	movs	r3, #0
 800caa6:	9300      	str	r3, [sp, #0]
 800caa8:	2300      	movs	r3, #0
 800caaa:	693a      	ldr	r2, [r7, #16]
 800caac:	2100      	movs	r1, #0
 800caae:	68f8      	ldr	r0, [r7, #12]
 800cab0:	f7ff fd56 	bl	800c560 <xTimerGenericCommand>
 800cab4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d10c      	bne.n	800cad6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800cabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac0:	b672      	cpsid	i
 800cac2:	f383 8811 	msr	BASEPRI, r3
 800cac6:	f3bf 8f6f 	isb	sy
 800caca:	f3bf 8f4f 	dsb	sy
 800cace:	b662      	cpsie	i
 800cad0:	603b      	str	r3, [r7, #0]
}
 800cad2:	bf00      	nop
 800cad4:	e7fe      	b.n	800cad4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cad6:	4b09      	ldr	r3, [pc, #36]	; (800cafc <prvSwitchTimerLists+0xc4>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d1af      	bne.n	800ca40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cae0:	4b06      	ldr	r3, [pc, #24]	; (800cafc <prvSwitchTimerLists+0xc4>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cae6:	4b06      	ldr	r3, [pc, #24]	; (800cb00 <prvSwitchTimerLists+0xc8>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	4a04      	ldr	r2, [pc, #16]	; (800cafc <prvSwitchTimerLists+0xc4>)
 800caec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800caee:	4a04      	ldr	r2, [pc, #16]	; (800cb00 <prvSwitchTimerLists+0xc8>)
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	6013      	str	r3, [r2, #0]
}
 800caf4:	bf00      	nop
 800caf6:	3718      	adds	r7, #24
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	20009bc0 	.word	0x20009bc0
 800cb00:	20009bc4 	.word	0x20009bc4

0800cb04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cb0a:	f000 f947 	bl	800cd9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cb0e:	4b15      	ldr	r3, [pc, #84]	; (800cb64 <prvCheckForValidListAndQueue+0x60>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d120      	bne.n	800cb58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cb16:	4814      	ldr	r0, [pc, #80]	; (800cb68 <prvCheckForValidListAndQueue+0x64>)
 800cb18:	f7fd fa8e 	bl	800a038 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cb1c:	4813      	ldr	r0, [pc, #76]	; (800cb6c <prvCheckForValidListAndQueue+0x68>)
 800cb1e:	f7fd fa8b 	bl	800a038 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cb22:	4b13      	ldr	r3, [pc, #76]	; (800cb70 <prvCheckForValidListAndQueue+0x6c>)
 800cb24:	4a10      	ldr	r2, [pc, #64]	; (800cb68 <prvCheckForValidListAndQueue+0x64>)
 800cb26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cb28:	4b12      	ldr	r3, [pc, #72]	; (800cb74 <prvCheckForValidListAndQueue+0x70>)
 800cb2a:	4a10      	ldr	r2, [pc, #64]	; (800cb6c <prvCheckForValidListAndQueue+0x68>)
 800cb2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cb2e:	2300      	movs	r3, #0
 800cb30:	9300      	str	r3, [sp, #0]
 800cb32:	4b11      	ldr	r3, [pc, #68]	; (800cb78 <prvCheckForValidListAndQueue+0x74>)
 800cb34:	4a11      	ldr	r2, [pc, #68]	; (800cb7c <prvCheckForValidListAndQueue+0x78>)
 800cb36:	2110      	movs	r1, #16
 800cb38:	200a      	movs	r0, #10
 800cb3a:	f7fd fb9b 	bl	800a274 <xQueueGenericCreateStatic>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	4a08      	ldr	r2, [pc, #32]	; (800cb64 <prvCheckForValidListAndQueue+0x60>)
 800cb42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cb44:	4b07      	ldr	r3, [pc, #28]	; (800cb64 <prvCheckForValidListAndQueue+0x60>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d005      	beq.n	800cb58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cb4c:	4b05      	ldr	r3, [pc, #20]	; (800cb64 <prvCheckForValidListAndQueue+0x60>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	490b      	ldr	r1, [pc, #44]	; (800cb80 <prvCheckForValidListAndQueue+0x7c>)
 800cb52:	4618      	mov	r0, r3
 800cb54:	f7fe fbec 	bl	800b330 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb58:	f000 f954 	bl	800ce04 <vPortExitCritical>
}
 800cb5c:	bf00      	nop
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	20009bc8 	.word	0x20009bc8
 800cb68:	20009b98 	.word	0x20009b98
 800cb6c:	20009bac 	.word	0x20009bac
 800cb70:	20009bc0 	.word	0x20009bc0
 800cb74:	20009bc4 	.word	0x20009bc4
 800cb78:	20009c74 	.word	0x20009c74
 800cb7c:	20009bd4 	.word	0x20009bd4
 800cb80:	0801ceb4 	.word	0x0801ceb4

0800cb84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cb84:	b480      	push	{r7}
 800cb86:	b085      	sub	sp, #20
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	60b9      	str	r1, [r7, #8]
 800cb8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	3b04      	subs	r3, #4
 800cb94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cb9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	3b04      	subs	r3, #4
 800cba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	f023 0201 	bic.w	r2, r3, #1
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	3b04      	subs	r3, #4
 800cbb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cbb4:	4a0c      	ldr	r2, [pc, #48]	; (800cbe8 <pxPortInitialiseStack+0x64>)
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	3b14      	subs	r3, #20
 800cbbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cbc0:	687a      	ldr	r2, [r7, #4]
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	3b04      	subs	r3, #4
 800cbca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	f06f 0202 	mvn.w	r2, #2
 800cbd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	3b20      	subs	r3, #32
 800cbd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cbda:	68fb      	ldr	r3, [r7, #12]
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3714      	adds	r7, #20
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr
 800cbe8:	0800cbed 	.word	0x0800cbed

0800cbec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cbec:	b480      	push	{r7}
 800cbee:	b085      	sub	sp, #20
 800cbf0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cbf6:	4b14      	ldr	r3, [pc, #80]	; (800cc48 <prvTaskExitError+0x5c>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbfe:	d00c      	beq.n	800cc1a <prvTaskExitError+0x2e>
	__asm volatile
 800cc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc04:	b672      	cpsid	i
 800cc06:	f383 8811 	msr	BASEPRI, r3
 800cc0a:	f3bf 8f6f 	isb	sy
 800cc0e:	f3bf 8f4f 	dsb	sy
 800cc12:	b662      	cpsie	i
 800cc14:	60fb      	str	r3, [r7, #12]
}
 800cc16:	bf00      	nop
 800cc18:	e7fe      	b.n	800cc18 <prvTaskExitError+0x2c>
	__asm volatile
 800cc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc1e:	b672      	cpsid	i
 800cc20:	f383 8811 	msr	BASEPRI, r3
 800cc24:	f3bf 8f6f 	isb	sy
 800cc28:	f3bf 8f4f 	dsb	sy
 800cc2c:	b662      	cpsie	i
 800cc2e:	60bb      	str	r3, [r7, #8]
}
 800cc30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cc32:	bf00      	nop
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d0fc      	beq.n	800cc34 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cc3a:	bf00      	nop
 800cc3c:	bf00      	nop
 800cc3e:	3714      	adds	r7, #20
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr
 800cc48:	20000020 	.word	0x20000020
 800cc4c:	00000000 	.word	0x00000000

0800cc50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cc50:	4b07      	ldr	r3, [pc, #28]	; (800cc70 <pxCurrentTCBConst2>)
 800cc52:	6819      	ldr	r1, [r3, #0]
 800cc54:	6808      	ldr	r0, [r1, #0]
 800cc56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc5a:	f380 8809 	msr	PSP, r0
 800cc5e:	f3bf 8f6f 	isb	sy
 800cc62:	f04f 0000 	mov.w	r0, #0
 800cc66:	f380 8811 	msr	BASEPRI, r0
 800cc6a:	4770      	bx	lr
 800cc6c:	f3af 8000 	nop.w

0800cc70 <pxCurrentTCBConst2>:
 800cc70:	20009698 	.word	0x20009698
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cc74:	bf00      	nop
 800cc76:	bf00      	nop

0800cc78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cc78:	4808      	ldr	r0, [pc, #32]	; (800cc9c <prvPortStartFirstTask+0x24>)
 800cc7a:	6800      	ldr	r0, [r0, #0]
 800cc7c:	6800      	ldr	r0, [r0, #0]
 800cc7e:	f380 8808 	msr	MSP, r0
 800cc82:	f04f 0000 	mov.w	r0, #0
 800cc86:	f380 8814 	msr	CONTROL, r0
 800cc8a:	b662      	cpsie	i
 800cc8c:	b661      	cpsie	f
 800cc8e:	f3bf 8f4f 	dsb	sy
 800cc92:	f3bf 8f6f 	isb	sy
 800cc96:	df00      	svc	0
 800cc98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cc9a:	bf00      	nop
 800cc9c:	e000ed08 	.word	0xe000ed08

0800cca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b084      	sub	sp, #16
 800cca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cca6:	4b37      	ldr	r3, [pc, #220]	; (800cd84 <xPortStartScheduler+0xe4>)
 800cca8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	22ff      	movs	r2, #255	; 0xff
 800ccb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	b2db      	uxtb	r3, r3
 800ccbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ccc0:	78fb      	ldrb	r3, [r7, #3]
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ccc8:	b2da      	uxtb	r2, r3
 800ccca:	4b2f      	ldr	r3, [pc, #188]	; (800cd88 <xPortStartScheduler+0xe8>)
 800cccc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ccce:	4b2f      	ldr	r3, [pc, #188]	; (800cd8c <xPortStartScheduler+0xec>)
 800ccd0:	2207      	movs	r2, #7
 800ccd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ccd4:	e009      	b.n	800ccea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ccd6:	4b2d      	ldr	r3, [pc, #180]	; (800cd8c <xPortStartScheduler+0xec>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	3b01      	subs	r3, #1
 800ccdc:	4a2b      	ldr	r2, [pc, #172]	; (800cd8c <xPortStartScheduler+0xec>)
 800ccde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cce0:	78fb      	ldrb	r3, [r7, #3]
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	005b      	lsls	r3, r3, #1
 800cce6:	b2db      	uxtb	r3, r3
 800cce8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ccea:	78fb      	ldrb	r3, [r7, #3]
 800ccec:	b2db      	uxtb	r3, r3
 800ccee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccf2:	2b80      	cmp	r3, #128	; 0x80
 800ccf4:	d0ef      	beq.n	800ccd6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ccf6:	4b25      	ldr	r3, [pc, #148]	; (800cd8c <xPortStartScheduler+0xec>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f1c3 0307 	rsb	r3, r3, #7
 800ccfe:	2b04      	cmp	r3, #4
 800cd00:	d00c      	beq.n	800cd1c <xPortStartScheduler+0x7c>
	__asm volatile
 800cd02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd06:	b672      	cpsid	i
 800cd08:	f383 8811 	msr	BASEPRI, r3
 800cd0c:	f3bf 8f6f 	isb	sy
 800cd10:	f3bf 8f4f 	dsb	sy
 800cd14:	b662      	cpsie	i
 800cd16:	60bb      	str	r3, [r7, #8]
}
 800cd18:	bf00      	nop
 800cd1a:	e7fe      	b.n	800cd1a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cd1c:	4b1b      	ldr	r3, [pc, #108]	; (800cd8c <xPortStartScheduler+0xec>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	021b      	lsls	r3, r3, #8
 800cd22:	4a1a      	ldr	r2, [pc, #104]	; (800cd8c <xPortStartScheduler+0xec>)
 800cd24:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cd26:	4b19      	ldr	r3, [pc, #100]	; (800cd8c <xPortStartScheduler+0xec>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cd2e:	4a17      	ldr	r2, [pc, #92]	; (800cd8c <xPortStartScheduler+0xec>)
 800cd30:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	b2da      	uxtb	r2, r3
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cd3a:	4b15      	ldr	r3, [pc, #84]	; (800cd90 <xPortStartScheduler+0xf0>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	4a14      	ldr	r2, [pc, #80]	; (800cd90 <xPortStartScheduler+0xf0>)
 800cd40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cd44:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cd46:	4b12      	ldr	r3, [pc, #72]	; (800cd90 <xPortStartScheduler+0xf0>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	4a11      	ldr	r2, [pc, #68]	; (800cd90 <xPortStartScheduler+0xf0>)
 800cd4c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cd50:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cd52:	f000 f8dd 	bl	800cf10 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cd56:	4b0f      	ldr	r3, [pc, #60]	; (800cd94 <xPortStartScheduler+0xf4>)
 800cd58:	2200      	movs	r2, #0
 800cd5a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cd5c:	f000 f8fc 	bl	800cf58 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cd60:	4b0d      	ldr	r3, [pc, #52]	; (800cd98 <xPortStartScheduler+0xf8>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4a0c      	ldr	r2, [pc, #48]	; (800cd98 <xPortStartScheduler+0xf8>)
 800cd66:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cd6a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cd6c:	f7ff ff84 	bl	800cc78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cd70:	f7fe ff3c 	bl	800bbec <vTaskSwitchContext>
	prvTaskExitError();
 800cd74:	f7ff ff3a 	bl	800cbec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cd78:	2300      	movs	r3, #0
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3710      	adds	r7, #16
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
 800cd82:	bf00      	nop
 800cd84:	e000e400 	.word	0xe000e400
 800cd88:	20009cc4 	.word	0x20009cc4
 800cd8c:	20009cc8 	.word	0x20009cc8
 800cd90:	e000ed20 	.word	0xe000ed20
 800cd94:	20000020 	.word	0x20000020
 800cd98:	e000ef34 	.word	0xe000ef34

0800cd9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b083      	sub	sp, #12
 800cda0:	af00      	add	r7, sp, #0
	__asm volatile
 800cda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda6:	b672      	cpsid	i
 800cda8:	f383 8811 	msr	BASEPRI, r3
 800cdac:	f3bf 8f6f 	isb	sy
 800cdb0:	f3bf 8f4f 	dsb	sy
 800cdb4:	b662      	cpsie	i
 800cdb6:	607b      	str	r3, [r7, #4]
}
 800cdb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cdba:	4b10      	ldr	r3, [pc, #64]	; (800cdfc <vPortEnterCritical+0x60>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	4a0e      	ldr	r2, [pc, #56]	; (800cdfc <vPortEnterCritical+0x60>)
 800cdc2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cdc4:	4b0d      	ldr	r3, [pc, #52]	; (800cdfc <vPortEnterCritical+0x60>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2b01      	cmp	r3, #1
 800cdca:	d111      	bne.n	800cdf0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cdcc:	4b0c      	ldr	r3, [pc, #48]	; (800ce00 <vPortEnterCritical+0x64>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	b2db      	uxtb	r3, r3
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d00c      	beq.n	800cdf0 <vPortEnterCritical+0x54>
	__asm volatile
 800cdd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdda:	b672      	cpsid	i
 800cddc:	f383 8811 	msr	BASEPRI, r3
 800cde0:	f3bf 8f6f 	isb	sy
 800cde4:	f3bf 8f4f 	dsb	sy
 800cde8:	b662      	cpsie	i
 800cdea:	603b      	str	r3, [r7, #0]
}
 800cdec:	bf00      	nop
 800cdee:	e7fe      	b.n	800cdee <vPortEnterCritical+0x52>
	}
}
 800cdf0:	bf00      	nop
 800cdf2:	370c      	adds	r7, #12
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfa:	4770      	bx	lr
 800cdfc:	20000020 	.word	0x20000020
 800ce00:	e000ed04 	.word	0xe000ed04

0800ce04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ce04:	b480      	push	{r7}
 800ce06:	b083      	sub	sp, #12
 800ce08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ce0a:	4b13      	ldr	r3, [pc, #76]	; (800ce58 <vPortExitCritical+0x54>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d10c      	bne.n	800ce2c <vPortExitCritical+0x28>
	__asm volatile
 800ce12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce16:	b672      	cpsid	i
 800ce18:	f383 8811 	msr	BASEPRI, r3
 800ce1c:	f3bf 8f6f 	isb	sy
 800ce20:	f3bf 8f4f 	dsb	sy
 800ce24:	b662      	cpsie	i
 800ce26:	607b      	str	r3, [r7, #4]
}
 800ce28:	bf00      	nop
 800ce2a:	e7fe      	b.n	800ce2a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ce2c:	4b0a      	ldr	r3, [pc, #40]	; (800ce58 <vPortExitCritical+0x54>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	3b01      	subs	r3, #1
 800ce32:	4a09      	ldr	r2, [pc, #36]	; (800ce58 <vPortExitCritical+0x54>)
 800ce34:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ce36:	4b08      	ldr	r3, [pc, #32]	; (800ce58 <vPortExitCritical+0x54>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d105      	bne.n	800ce4a <vPortExitCritical+0x46>
 800ce3e:	2300      	movs	r3, #0
 800ce40:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	f383 8811 	msr	BASEPRI, r3
}
 800ce48:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ce4a:	bf00      	nop
 800ce4c:	370c      	adds	r7, #12
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce54:	4770      	bx	lr
 800ce56:	bf00      	nop
 800ce58:	20000020 	.word	0x20000020
 800ce5c:	00000000 	.word	0x00000000

0800ce60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ce60:	f3ef 8009 	mrs	r0, PSP
 800ce64:	f3bf 8f6f 	isb	sy
 800ce68:	4b15      	ldr	r3, [pc, #84]	; (800cec0 <pxCurrentTCBConst>)
 800ce6a:	681a      	ldr	r2, [r3, #0]
 800ce6c:	f01e 0f10 	tst.w	lr, #16
 800ce70:	bf08      	it	eq
 800ce72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ce76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce7a:	6010      	str	r0, [r2, #0]
 800ce7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ce80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ce84:	b672      	cpsid	i
 800ce86:	f380 8811 	msr	BASEPRI, r0
 800ce8a:	f3bf 8f4f 	dsb	sy
 800ce8e:	f3bf 8f6f 	isb	sy
 800ce92:	b662      	cpsie	i
 800ce94:	f7fe feaa 	bl	800bbec <vTaskSwitchContext>
 800ce98:	f04f 0000 	mov.w	r0, #0
 800ce9c:	f380 8811 	msr	BASEPRI, r0
 800cea0:	bc09      	pop	{r0, r3}
 800cea2:	6819      	ldr	r1, [r3, #0]
 800cea4:	6808      	ldr	r0, [r1, #0]
 800cea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceaa:	f01e 0f10 	tst.w	lr, #16
 800ceae:	bf08      	it	eq
 800ceb0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ceb4:	f380 8809 	msr	PSP, r0
 800ceb8:	f3bf 8f6f 	isb	sy
 800cebc:	4770      	bx	lr
 800cebe:	bf00      	nop

0800cec0 <pxCurrentTCBConst>:
 800cec0:	20009698 	.word	0x20009698
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cec4:	bf00      	nop
 800cec6:	bf00      	nop

0800cec8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
	__asm volatile
 800cece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced2:	b672      	cpsid	i
 800ced4:	f383 8811 	msr	BASEPRI, r3
 800ced8:	f3bf 8f6f 	isb	sy
 800cedc:	f3bf 8f4f 	dsb	sy
 800cee0:	b662      	cpsie	i
 800cee2:	607b      	str	r3, [r7, #4]
}
 800cee4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cee6:	f7fe fdc5 	bl	800ba74 <xTaskIncrementTick>
 800ceea:	4603      	mov	r3, r0
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d003      	beq.n	800cef8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cef0:	4b06      	ldr	r3, [pc, #24]	; (800cf0c <SysTick_Handler+0x44>)
 800cef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cef6:	601a      	str	r2, [r3, #0]
 800cef8:	2300      	movs	r3, #0
 800cefa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	f383 8811 	msr	BASEPRI, r3
}
 800cf02:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cf04:	bf00      	nop
 800cf06:	3708      	adds	r7, #8
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}
 800cf0c:	e000ed04 	.word	0xe000ed04

0800cf10 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cf10:	b480      	push	{r7}
 800cf12:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cf14:	4b0b      	ldr	r3, [pc, #44]	; (800cf44 <vPortSetupTimerInterrupt+0x34>)
 800cf16:	2200      	movs	r2, #0
 800cf18:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cf1a:	4b0b      	ldr	r3, [pc, #44]	; (800cf48 <vPortSetupTimerInterrupt+0x38>)
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cf20:	4b0a      	ldr	r3, [pc, #40]	; (800cf4c <vPortSetupTimerInterrupt+0x3c>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4a0a      	ldr	r2, [pc, #40]	; (800cf50 <vPortSetupTimerInterrupt+0x40>)
 800cf26:	fba2 2303 	umull	r2, r3, r2, r3
 800cf2a:	099b      	lsrs	r3, r3, #6
 800cf2c:	4a09      	ldr	r2, [pc, #36]	; (800cf54 <vPortSetupTimerInterrupt+0x44>)
 800cf2e:	3b01      	subs	r3, #1
 800cf30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cf32:	4b04      	ldr	r3, [pc, #16]	; (800cf44 <vPortSetupTimerInterrupt+0x34>)
 800cf34:	2207      	movs	r2, #7
 800cf36:	601a      	str	r2, [r3, #0]
}
 800cf38:	bf00      	nop
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf40:	4770      	bx	lr
 800cf42:	bf00      	nop
 800cf44:	e000e010 	.word	0xe000e010
 800cf48:	e000e018 	.word	0xe000e018
 800cf4c:	20000000 	.word	0x20000000
 800cf50:	10624dd3 	.word	0x10624dd3
 800cf54:	e000e014 	.word	0xe000e014

0800cf58 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cf58:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cf68 <vPortEnableVFP+0x10>
 800cf5c:	6801      	ldr	r1, [r0, #0]
 800cf5e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cf62:	6001      	str	r1, [r0, #0]
 800cf64:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cf66:	bf00      	nop
 800cf68:	e000ed88 	.word	0xe000ed88

0800cf6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b085      	sub	sp, #20
 800cf70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cf72:	f3ef 8305 	mrs	r3, IPSR
 800cf76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	2b0f      	cmp	r3, #15
 800cf7c:	d916      	bls.n	800cfac <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cf7e:	4a19      	ldr	r2, [pc, #100]	; (800cfe4 <vPortValidateInterruptPriority+0x78>)
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	4413      	add	r3, r2
 800cf84:	781b      	ldrb	r3, [r3, #0]
 800cf86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cf88:	4b17      	ldr	r3, [pc, #92]	; (800cfe8 <vPortValidateInterruptPriority+0x7c>)
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	7afa      	ldrb	r2, [r7, #11]
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d20c      	bcs.n	800cfac <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800cf92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf96:	b672      	cpsid	i
 800cf98:	f383 8811 	msr	BASEPRI, r3
 800cf9c:	f3bf 8f6f 	isb	sy
 800cfa0:	f3bf 8f4f 	dsb	sy
 800cfa4:	b662      	cpsie	i
 800cfa6:	607b      	str	r3, [r7, #4]
}
 800cfa8:	bf00      	nop
 800cfaa:	e7fe      	b.n	800cfaa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cfac:	4b0f      	ldr	r3, [pc, #60]	; (800cfec <vPortValidateInterruptPriority+0x80>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cfb4:	4b0e      	ldr	r3, [pc, #56]	; (800cff0 <vPortValidateInterruptPriority+0x84>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d90c      	bls.n	800cfd6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800cfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc0:	b672      	cpsid	i
 800cfc2:	f383 8811 	msr	BASEPRI, r3
 800cfc6:	f3bf 8f6f 	isb	sy
 800cfca:	f3bf 8f4f 	dsb	sy
 800cfce:	b662      	cpsie	i
 800cfd0:	603b      	str	r3, [r7, #0]
}
 800cfd2:	bf00      	nop
 800cfd4:	e7fe      	b.n	800cfd4 <vPortValidateInterruptPriority+0x68>
	}
 800cfd6:	bf00      	nop
 800cfd8:	3714      	adds	r7, #20
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr
 800cfe2:	bf00      	nop
 800cfe4:	e000e3f0 	.word	0xe000e3f0
 800cfe8:	20009cc4 	.word	0x20009cc4
 800cfec:	e000ed0c 	.word	0xe000ed0c
 800cff0:	20009cc8 	.word	0x20009cc8

0800cff4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b08a      	sub	sp, #40	; 0x28
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cffc:	2300      	movs	r3, #0
 800cffe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d000:	f7fe fc68 	bl	800b8d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d004:	4b5b      	ldr	r3, [pc, #364]	; (800d174 <pvPortMalloc+0x180>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d101      	bne.n	800d010 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d00c:	f000 f91a 	bl	800d244 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d010:	4b59      	ldr	r3, [pc, #356]	; (800d178 <pvPortMalloc+0x184>)
 800d012:	681a      	ldr	r2, [r3, #0]
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	4013      	ands	r3, r2
 800d018:	2b00      	cmp	r3, #0
 800d01a:	f040 8092 	bne.w	800d142 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d01f      	beq.n	800d064 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800d024:	2208      	movs	r2, #8
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	4413      	add	r3, r2
 800d02a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f003 0307 	and.w	r3, r3, #7
 800d032:	2b00      	cmp	r3, #0
 800d034:	d016      	beq.n	800d064 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f023 0307 	bic.w	r3, r3, #7
 800d03c:	3308      	adds	r3, #8
 800d03e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f003 0307 	and.w	r3, r3, #7
 800d046:	2b00      	cmp	r3, #0
 800d048:	d00c      	beq.n	800d064 <pvPortMalloc+0x70>
	__asm volatile
 800d04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d04e:	b672      	cpsid	i
 800d050:	f383 8811 	msr	BASEPRI, r3
 800d054:	f3bf 8f6f 	isb	sy
 800d058:	f3bf 8f4f 	dsb	sy
 800d05c:	b662      	cpsie	i
 800d05e:	617b      	str	r3, [r7, #20]
}
 800d060:	bf00      	nop
 800d062:	e7fe      	b.n	800d062 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d06b      	beq.n	800d142 <pvPortMalloc+0x14e>
 800d06a:	4b44      	ldr	r3, [pc, #272]	; (800d17c <pvPortMalloc+0x188>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	429a      	cmp	r2, r3
 800d072:	d866      	bhi.n	800d142 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d074:	4b42      	ldr	r3, [pc, #264]	; (800d180 <pvPortMalloc+0x18c>)
 800d076:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d078:	4b41      	ldr	r3, [pc, #260]	; (800d180 <pvPortMalloc+0x18c>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d07e:	e004      	b.n	800d08a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800d080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d082:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08c:	685b      	ldr	r3, [r3, #4]
 800d08e:	687a      	ldr	r2, [r7, #4]
 800d090:	429a      	cmp	r2, r3
 800d092:	d903      	bls.n	800d09c <pvPortMalloc+0xa8>
 800d094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d1f1      	bne.n	800d080 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d09c:	4b35      	ldr	r3, [pc, #212]	; (800d174 <pvPortMalloc+0x180>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d04d      	beq.n	800d142 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d0a6:	6a3b      	ldr	r3, [r7, #32]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	2208      	movs	r2, #8
 800d0ac:	4413      	add	r3, r2
 800d0ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b2:	681a      	ldr	r2, [r3, #0]
 800d0b4:	6a3b      	ldr	r3, [r7, #32]
 800d0b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ba:	685a      	ldr	r2, [r3, #4]
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	1ad2      	subs	r2, r2, r3
 800d0c0:	2308      	movs	r3, #8
 800d0c2:	005b      	lsls	r3, r3, #1
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d921      	bls.n	800d10c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d0c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	4413      	add	r3, r2
 800d0ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0d0:	69bb      	ldr	r3, [r7, #24]
 800d0d2:	f003 0307 	and.w	r3, r3, #7
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d00c      	beq.n	800d0f4 <pvPortMalloc+0x100>
	__asm volatile
 800d0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0de:	b672      	cpsid	i
 800d0e0:	f383 8811 	msr	BASEPRI, r3
 800d0e4:	f3bf 8f6f 	isb	sy
 800d0e8:	f3bf 8f4f 	dsb	sy
 800d0ec:	b662      	cpsie	i
 800d0ee:	613b      	str	r3, [r7, #16]
}
 800d0f0:	bf00      	nop
 800d0f2:	e7fe      	b.n	800d0f2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f6:	685a      	ldr	r2, [r3, #4]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	1ad2      	subs	r2, r2, r3
 800d0fc:	69bb      	ldr	r3, [r7, #24]
 800d0fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d106:	69b8      	ldr	r0, [r7, #24]
 800d108:	f000 f8fe 	bl	800d308 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d10c:	4b1b      	ldr	r3, [pc, #108]	; (800d17c <pvPortMalloc+0x188>)
 800d10e:	681a      	ldr	r2, [r3, #0]
 800d110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d112:	685b      	ldr	r3, [r3, #4]
 800d114:	1ad3      	subs	r3, r2, r3
 800d116:	4a19      	ldr	r2, [pc, #100]	; (800d17c <pvPortMalloc+0x188>)
 800d118:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d11a:	4b18      	ldr	r3, [pc, #96]	; (800d17c <pvPortMalloc+0x188>)
 800d11c:	681a      	ldr	r2, [r3, #0]
 800d11e:	4b19      	ldr	r3, [pc, #100]	; (800d184 <pvPortMalloc+0x190>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	429a      	cmp	r2, r3
 800d124:	d203      	bcs.n	800d12e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d126:	4b15      	ldr	r3, [pc, #84]	; (800d17c <pvPortMalloc+0x188>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	4a16      	ldr	r2, [pc, #88]	; (800d184 <pvPortMalloc+0x190>)
 800d12c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d130:	685a      	ldr	r2, [r3, #4]
 800d132:	4b11      	ldr	r3, [pc, #68]	; (800d178 <pvPortMalloc+0x184>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	431a      	orrs	r2, r3
 800d138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13e:	2200      	movs	r2, #0
 800d140:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d142:	f7fe fbd5 	bl	800b8f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d146:	69fb      	ldr	r3, [r7, #28]
 800d148:	f003 0307 	and.w	r3, r3, #7
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d00c      	beq.n	800d16a <pvPortMalloc+0x176>
	__asm volatile
 800d150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d154:	b672      	cpsid	i
 800d156:	f383 8811 	msr	BASEPRI, r3
 800d15a:	f3bf 8f6f 	isb	sy
 800d15e:	f3bf 8f4f 	dsb	sy
 800d162:	b662      	cpsie	i
 800d164:	60fb      	str	r3, [r7, #12]
}
 800d166:	bf00      	nop
 800d168:	e7fe      	b.n	800d168 <pvPortMalloc+0x174>
	return pvReturn;
 800d16a:	69fb      	ldr	r3, [r7, #28]
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3728      	adds	r7, #40	; 0x28
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}
 800d174:	2000d8d4 	.word	0x2000d8d4
 800d178:	2000d8e0 	.word	0x2000d8e0
 800d17c:	2000d8d8 	.word	0x2000d8d8
 800d180:	2000d8cc 	.word	0x2000d8cc
 800d184:	2000d8dc 	.word	0x2000d8dc

0800d188 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b086      	sub	sp, #24
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d04c      	beq.n	800d234 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d19a:	2308      	movs	r3, #8
 800d19c:	425b      	negs	r3, r3
 800d19e:	697a      	ldr	r2, [r7, #20]
 800d1a0:	4413      	add	r3, r2
 800d1a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	685a      	ldr	r2, [r3, #4]
 800d1ac:	4b23      	ldr	r3, [pc, #140]	; (800d23c <vPortFree+0xb4>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4013      	ands	r3, r2
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d10c      	bne.n	800d1d0 <vPortFree+0x48>
	__asm volatile
 800d1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ba:	b672      	cpsid	i
 800d1bc:	f383 8811 	msr	BASEPRI, r3
 800d1c0:	f3bf 8f6f 	isb	sy
 800d1c4:	f3bf 8f4f 	dsb	sy
 800d1c8:	b662      	cpsie	i
 800d1ca:	60fb      	str	r3, [r7, #12]
}
 800d1cc:	bf00      	nop
 800d1ce:	e7fe      	b.n	800d1ce <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d00c      	beq.n	800d1f2 <vPortFree+0x6a>
	__asm volatile
 800d1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1dc:	b672      	cpsid	i
 800d1de:	f383 8811 	msr	BASEPRI, r3
 800d1e2:	f3bf 8f6f 	isb	sy
 800d1e6:	f3bf 8f4f 	dsb	sy
 800d1ea:	b662      	cpsie	i
 800d1ec:	60bb      	str	r3, [r7, #8]
}
 800d1ee:	bf00      	nop
 800d1f0:	e7fe      	b.n	800d1f0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	685a      	ldr	r2, [r3, #4]
 800d1f6:	4b11      	ldr	r3, [pc, #68]	; (800d23c <vPortFree+0xb4>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	4013      	ands	r3, r2
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d019      	beq.n	800d234 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d115      	bne.n	800d234 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	685a      	ldr	r2, [r3, #4]
 800d20c:	4b0b      	ldr	r3, [pc, #44]	; (800d23c <vPortFree+0xb4>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	43db      	mvns	r3, r3
 800d212:	401a      	ands	r2, r3
 800d214:	693b      	ldr	r3, [r7, #16]
 800d216:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d218:	f7fe fb5c 	bl	800b8d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	685a      	ldr	r2, [r3, #4]
 800d220:	4b07      	ldr	r3, [pc, #28]	; (800d240 <vPortFree+0xb8>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4413      	add	r3, r2
 800d226:	4a06      	ldr	r2, [pc, #24]	; (800d240 <vPortFree+0xb8>)
 800d228:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d22a:	6938      	ldr	r0, [r7, #16]
 800d22c:	f000 f86c 	bl	800d308 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d230:	f7fe fb5e 	bl	800b8f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d234:	bf00      	nop
 800d236:	3718      	adds	r7, #24
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}
 800d23c:	2000d8e0 	.word	0x2000d8e0
 800d240:	2000d8d8 	.word	0x2000d8d8

0800d244 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d244:	b480      	push	{r7}
 800d246:	b085      	sub	sp, #20
 800d248:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d24a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d24e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d250:	4b27      	ldr	r3, [pc, #156]	; (800d2f0 <prvHeapInit+0xac>)
 800d252:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f003 0307 	and.w	r3, r3, #7
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d00c      	beq.n	800d278 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	3307      	adds	r3, #7
 800d262:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f023 0307 	bic.w	r3, r3, #7
 800d26a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d26c:	68ba      	ldr	r2, [r7, #8]
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	1ad3      	subs	r3, r2, r3
 800d272:	4a1f      	ldr	r2, [pc, #124]	; (800d2f0 <prvHeapInit+0xac>)
 800d274:	4413      	add	r3, r2
 800d276:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d27c:	4a1d      	ldr	r2, [pc, #116]	; (800d2f4 <prvHeapInit+0xb0>)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d282:	4b1c      	ldr	r3, [pc, #112]	; (800d2f4 <prvHeapInit+0xb0>)
 800d284:	2200      	movs	r2, #0
 800d286:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	68ba      	ldr	r2, [r7, #8]
 800d28c:	4413      	add	r3, r2
 800d28e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d290:	2208      	movs	r2, #8
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	1a9b      	subs	r3, r3, r2
 800d296:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	f023 0307 	bic.w	r3, r3, #7
 800d29e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	4a15      	ldr	r2, [pc, #84]	; (800d2f8 <prvHeapInit+0xb4>)
 800d2a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d2a6:	4b14      	ldr	r3, [pc, #80]	; (800d2f8 <prvHeapInit+0xb4>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d2ae:	4b12      	ldr	r3, [pc, #72]	; (800d2f8 <prvHeapInit+0xb4>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	68fa      	ldr	r2, [r7, #12]
 800d2be:	1ad2      	subs	r2, r2, r3
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d2c4:	4b0c      	ldr	r3, [pc, #48]	; (800d2f8 <prvHeapInit+0xb4>)
 800d2c6:	681a      	ldr	r2, [r3, #0]
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	685b      	ldr	r3, [r3, #4]
 800d2d0:	4a0a      	ldr	r2, [pc, #40]	; (800d2fc <prvHeapInit+0xb8>)
 800d2d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	685b      	ldr	r3, [r3, #4]
 800d2d8:	4a09      	ldr	r2, [pc, #36]	; (800d300 <prvHeapInit+0xbc>)
 800d2da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d2dc:	4b09      	ldr	r3, [pc, #36]	; (800d304 <prvHeapInit+0xc0>)
 800d2de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d2e2:	601a      	str	r2, [r3, #0]
}
 800d2e4:	bf00      	nop
 800d2e6:	3714      	adds	r7, #20
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ee:	4770      	bx	lr
 800d2f0:	20009ccc 	.word	0x20009ccc
 800d2f4:	2000d8cc 	.word	0x2000d8cc
 800d2f8:	2000d8d4 	.word	0x2000d8d4
 800d2fc:	2000d8dc 	.word	0x2000d8dc
 800d300:	2000d8d8 	.word	0x2000d8d8
 800d304:	2000d8e0 	.word	0x2000d8e0

0800d308 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d308:	b480      	push	{r7}
 800d30a:	b085      	sub	sp, #20
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d310:	4b28      	ldr	r3, [pc, #160]	; (800d3b4 <prvInsertBlockIntoFreeList+0xac>)
 800d312:	60fb      	str	r3, [r7, #12]
 800d314:	e002      	b.n	800d31c <prvInsertBlockIntoFreeList+0x14>
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	60fb      	str	r3, [r7, #12]
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	429a      	cmp	r2, r3
 800d324:	d8f7      	bhi.n	800d316 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	68ba      	ldr	r2, [r7, #8]
 800d330:	4413      	add	r3, r2
 800d332:	687a      	ldr	r2, [r7, #4]
 800d334:	429a      	cmp	r2, r3
 800d336:	d108      	bne.n	800d34a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	685a      	ldr	r2, [r3, #4]
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	685b      	ldr	r3, [r3, #4]
 800d340:	441a      	add	r2, r3
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	685b      	ldr	r3, [r3, #4]
 800d352:	68ba      	ldr	r2, [r7, #8]
 800d354:	441a      	add	r2, r3
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d118      	bne.n	800d390 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681a      	ldr	r2, [r3, #0]
 800d362:	4b15      	ldr	r3, [pc, #84]	; (800d3b8 <prvInsertBlockIntoFreeList+0xb0>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	429a      	cmp	r2, r3
 800d368:	d00d      	beq.n	800d386 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	685a      	ldr	r2, [r3, #4]
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	441a      	add	r2, r3
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	681a      	ldr	r2, [r3, #0]
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	601a      	str	r2, [r3, #0]
 800d384:	e008      	b.n	800d398 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d386:	4b0c      	ldr	r3, [pc, #48]	; (800d3b8 <prvInsertBlockIntoFreeList+0xb0>)
 800d388:	681a      	ldr	r2, [r3, #0]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	601a      	str	r2, [r3, #0]
 800d38e:	e003      	b.n	800d398 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	681a      	ldr	r2, [r3, #0]
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d398:	68fa      	ldr	r2, [r7, #12]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d002      	beq.n	800d3a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	687a      	ldr	r2, [r7, #4]
 800d3a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d3a6:	bf00      	nop
 800d3a8:	3714      	adds	r7, #20
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b0:	4770      	bx	lr
 800d3b2:	bf00      	nop
 800d3b4:	2000d8cc 	.word	0x2000d8cc
 800d3b8:	2000d8d4 	.word	0x2000d8d4

0800d3bc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b084      	sub	sp, #16
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	330c      	adds	r3, #12
 800d3cc:	461a      	mov	r2, r3
 800d3ce:	6839      	ldr	r1, [r7, #0]
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f003 fac5 	bl	8010960 <tcpip_send_msg_wait_sem>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800d3da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d103      	bne.n	800d3ea <netconn_apimsg+0x2e>
    return apimsg->err;
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d3e8:	e001      	b.n	800d3ee <netconn_apimsg+0x32>
  }
  return err;
 800d3ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3710      	adds	r7, #16
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
	...

0800d3f8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b08c      	sub	sp, #48	; 0x30
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	4603      	mov	r3, r0
 800d400:	603a      	str	r2, [r7, #0]
 800d402:	71fb      	strb	r3, [r7, #7]
 800d404:	460b      	mov	r3, r1
 800d406:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800d408:	79fb      	ldrb	r3, [r7, #7]
 800d40a:	6839      	ldr	r1, [r7, #0]
 800d40c:	4618      	mov	r0, r3
 800d40e:	f000 ff2f 	bl	800e270 <netconn_alloc>
 800d412:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800d414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d416:	2b00      	cmp	r3, #0
 800d418:	d054      	beq.n	800d4c4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800d41a:	79bb      	ldrb	r3, [r7, #6]
 800d41c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800d41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d420:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800d422:	f107 0308 	add.w	r3, r7, #8
 800d426:	4619      	mov	r1, r3
 800d428:	4829      	ldr	r0, [pc, #164]	; (800d4d0 <netconn_new_with_proto_and_callback+0xd8>)
 800d42a:	f7ff ffc7 	bl	800d3bc <netconn_apimsg>
 800d42e:	4603      	mov	r3, r0
 800d430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800d434:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d043      	beq.n	800d4c4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800d43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d005      	beq.n	800d450 <netconn_new_with_proto_and_callback+0x58>
 800d444:	4b23      	ldr	r3, [pc, #140]	; (800d4d4 <netconn_new_with_proto_and_callback+0xdc>)
 800d446:	22a3      	movs	r2, #163	; 0xa3
 800d448:	4923      	ldr	r1, [pc, #140]	; (800d4d8 <netconn_new_with_proto_and_callback+0xe0>)
 800d44a:	4824      	ldr	r0, [pc, #144]	; (800d4dc <netconn_new_with_proto_and_callback+0xe4>)
 800d44c:	f00e faa2 	bl	801b994 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800d450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d452:	3310      	adds	r3, #16
 800d454:	4618      	mov	r0, r3
 800d456:	f00e f92b 	bl	801b6b0 <sys_mbox_valid>
 800d45a:	4603      	mov	r3, r0
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d105      	bne.n	800d46c <netconn_new_with_proto_and_callback+0x74>
 800d460:	4b1c      	ldr	r3, [pc, #112]	; (800d4d4 <netconn_new_with_proto_and_callback+0xdc>)
 800d462:	22a4      	movs	r2, #164	; 0xa4
 800d464:	491e      	ldr	r1, [pc, #120]	; (800d4e0 <netconn_new_with_proto_and_callback+0xe8>)
 800d466:	481d      	ldr	r0, [pc, #116]	; (800d4dc <netconn_new_with_proto_and_callback+0xe4>)
 800d468:	f00e fa94 	bl	801b994 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800d46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46e:	3314      	adds	r3, #20
 800d470:	4618      	mov	r0, r3
 800d472:	f00e f91d 	bl	801b6b0 <sys_mbox_valid>
 800d476:	4603      	mov	r3, r0
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d005      	beq.n	800d488 <netconn_new_with_proto_and_callback+0x90>
 800d47c:	4b15      	ldr	r3, [pc, #84]	; (800d4d4 <netconn_new_with_proto_and_callback+0xdc>)
 800d47e:	22a6      	movs	r2, #166	; 0xa6
 800d480:	4918      	ldr	r1, [pc, #96]	; (800d4e4 <netconn_new_with_proto_and_callback+0xec>)
 800d482:	4816      	ldr	r0, [pc, #88]	; (800d4dc <netconn_new_with_proto_and_callback+0xe4>)
 800d484:	f00e fa86 	bl	801b994 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800d488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48a:	330c      	adds	r3, #12
 800d48c:	4618      	mov	r0, r3
 800d48e:	f00e f99d 	bl	801b7cc <sys_sem_valid>
 800d492:	4603      	mov	r3, r0
 800d494:	2b00      	cmp	r3, #0
 800d496:	d105      	bne.n	800d4a4 <netconn_new_with_proto_and_callback+0xac>
 800d498:	4b0e      	ldr	r3, [pc, #56]	; (800d4d4 <netconn_new_with_proto_and_callback+0xdc>)
 800d49a:	22a9      	movs	r2, #169	; 0xa9
 800d49c:	4912      	ldr	r1, [pc, #72]	; (800d4e8 <netconn_new_with_proto_and_callback+0xf0>)
 800d49e:	480f      	ldr	r0, [pc, #60]	; (800d4dc <netconn_new_with_proto_and_callback+0xe4>)
 800d4a0:	f00e fa78 	bl	801b994 <iprintf>
      sys_sem_free(&conn->op_completed);
 800d4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a6:	330c      	adds	r3, #12
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f00e f982 	bl	801b7b2 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800d4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b0:	3310      	adds	r3, #16
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f00e f888 	bl	801b5c8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800d4b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d4ba:	2007      	movs	r0, #7
 800d4bc:	f003 fffe 	bl	80114bc <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	e000      	b.n	800d4c6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800d4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3730      	adds	r7, #48	; 0x30
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	0800e245 	.word	0x0800e245
 800d4d4:	0801cebc 	.word	0x0801cebc
 800d4d8:	0801cef0 	.word	0x0801cef0
 800d4dc:	0801cf14 	.word	0x0801cf14
 800d4e0:	0801cf3c 	.word	0x0801cf3c
 800d4e4:	0801cf54 	.word	0x0801cf54
 800d4e8:	0801cf78 	.word	0x0801cf78

0800d4ec <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b08c      	sub	sp, #48	; 0x30
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d101      	bne.n	800d4fe <netconn_prepare_delete+0x12>
    return ERR_OK;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	e014      	b.n	800d528 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800d502:	2329      	movs	r3, #41	; 0x29
 800d504:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800d506:	f107 030c 	add.w	r3, r7, #12
 800d50a:	4619      	mov	r1, r3
 800d50c:	4808      	ldr	r0, [pc, #32]	; (800d530 <netconn_prepare_delete+0x44>)
 800d50e:	f7ff ff55 	bl	800d3bc <netconn_apimsg>
 800d512:	4603      	mov	r3, r0
 800d514:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800d518:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d002      	beq.n	800d526 <netconn_prepare_delete+0x3a>
    return err;
 800d520:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d524:	e000      	b.n	800d528 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800d526:	2300      	movs	r3, #0
}
 800d528:	4618      	mov	r0, r3
 800d52a:	3730      	adds	r7, #48	; 0x30
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}
 800d530:	0800e7b1 	.word	0x0800e7b1

0800d534 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b084      	sub	sp, #16
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d101      	bne.n	800d546 <netconn_delete+0x12>
    return ERR_OK;
 800d542:	2300      	movs	r3, #0
 800d544:	e00d      	b.n	800d562 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f7ff ffd0 	bl	800d4ec <netconn_prepare_delete>
 800d54c:	4603      	mov	r3, r0
 800d54e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800d550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d102      	bne.n	800d55e <netconn_delete+0x2a>
    netconn_free(conn);
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f000 fef7 	bl	800e34c <netconn_free>
  }
  return err;
 800d55e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d562:	4618      	mov	r0, r3
 800d564:	3710      	adds	r7, #16
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
	...

0800d56c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b08e      	sub	sp, #56	; 0x38
 800d570:	af00      	add	r7, sp, #0
 800d572:	60f8      	str	r0, [r7, #12]
 800d574:	60b9      	str	r1, [r7, #8]
 800d576:	607a      	str	r2, [r7, #4]
 800d578:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d109      	bne.n	800d594 <netconn_getaddr+0x28>
 800d580:	4b1d      	ldr	r3, [pc, #116]	; (800d5f8 <netconn_getaddr+0x8c>)
 800d582:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d586:	491d      	ldr	r1, [pc, #116]	; (800d5fc <netconn_getaddr+0x90>)
 800d588:	481d      	ldr	r0, [pc, #116]	; (800d600 <netconn_getaddr+0x94>)
 800d58a:	f00e fa03 	bl	801b994 <iprintf>
 800d58e:	f06f 030f 	mvn.w	r3, #15
 800d592:	e02d      	b.n	800d5f0 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d109      	bne.n	800d5ae <netconn_getaddr+0x42>
 800d59a:	4b17      	ldr	r3, [pc, #92]	; (800d5f8 <netconn_getaddr+0x8c>)
 800d59c:	f240 1213 	movw	r2, #275	; 0x113
 800d5a0:	4918      	ldr	r1, [pc, #96]	; (800d604 <netconn_getaddr+0x98>)
 800d5a2:	4817      	ldr	r0, [pc, #92]	; (800d600 <netconn_getaddr+0x94>)
 800d5a4:	f00e f9f6 	bl	801b994 <iprintf>
 800d5a8:	f06f 030f 	mvn.w	r3, #15
 800d5ac:	e020      	b.n	800d5f0 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d109      	bne.n	800d5c8 <netconn_getaddr+0x5c>
 800d5b4:	4b10      	ldr	r3, [pc, #64]	; (800d5f8 <netconn_getaddr+0x8c>)
 800d5b6:	f44f 728a 	mov.w	r2, #276	; 0x114
 800d5ba:	4913      	ldr	r1, [pc, #76]	; (800d608 <netconn_getaddr+0x9c>)
 800d5bc:	4810      	ldr	r0, [pc, #64]	; (800d600 <netconn_getaddr+0x94>)
 800d5be:	f00e f9e9 	bl	801b994 <iprintf>
 800d5c2:	f06f 030f 	mvn.w	r3, #15
 800d5c6:	e013      	b.n	800d5f0 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800d5cc:	78fb      	ldrb	r3, [r7, #3]
 800d5ce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800d5da:	f107 0314 	add.w	r3, r7, #20
 800d5de:	4619      	mov	r1, r3
 800d5e0:	480a      	ldr	r0, [pc, #40]	; (800d60c <netconn_getaddr+0xa0>)
 800d5e2:	f7ff feeb 	bl	800d3bc <netconn_apimsg>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800d5ec:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3738      	adds	r7, #56	; 0x38
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}
 800d5f8:	0801cebc 	.word	0x0801cebc
 800d5fc:	0801cf94 	.word	0x0801cf94
 800d600:	0801cf14 	.word	0x0801cf14
 800d604:	0801cfb4 	.word	0x0801cfb4
 800d608:	0801cfd4 	.word	0x0801cfd4
 800d60c:	0800edf1 	.word	0x0800edf1

0800d610 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b08e      	sub	sp, #56	; 0x38
 800d614:	af00      	add	r7, sp, #0
 800d616:	60f8      	str	r0, [r7, #12]
 800d618:	60b9      	str	r1, [r7, #8]
 800d61a:	4613      	mov	r3, r2
 800d61c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d109      	bne.n	800d638 <netconn_bind+0x28>
 800d624:	4b11      	ldr	r3, [pc, #68]	; (800d66c <netconn_bind+0x5c>)
 800d626:	f44f 729c 	mov.w	r2, #312	; 0x138
 800d62a:	4911      	ldr	r1, [pc, #68]	; (800d670 <netconn_bind+0x60>)
 800d62c:	4811      	ldr	r0, [pc, #68]	; (800d674 <netconn_bind+0x64>)
 800d62e:	f00e f9b1 	bl	801b994 <iprintf>
 800d632:	f06f 030f 	mvn.w	r3, #15
 800d636:	e015      	b.n	800d664 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d101      	bne.n	800d642 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800d63e:	4b0e      	ldr	r3, [pc, #56]	; (800d678 <netconn_bind+0x68>)
 800d640:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800d64a:	88fb      	ldrh	r3, [r7, #6]
 800d64c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800d64e:	f107 0314 	add.w	r3, r7, #20
 800d652:	4619      	mov	r1, r3
 800d654:	4809      	ldr	r0, [pc, #36]	; (800d67c <netconn_bind+0x6c>)
 800d656:	f7ff feb1 	bl	800d3bc <netconn_apimsg>
 800d65a:	4603      	mov	r3, r0
 800d65c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800d660:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d664:	4618      	mov	r0, r3
 800d666:	3738      	adds	r7, #56	; 0x38
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}
 800d66c:	0801cebc 	.word	0x0801cebc
 800d670:	0801cff4 	.word	0x0801cff4
 800d674:	0801cf14 	.word	0x0801cf14
 800d678:	080207b4 	.word	0x080207b4
 800d67c:	0800e979 	.word	0x0800e979

0800d680 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b088      	sub	sp, #32
 800d684:	af00      	add	r7, sp, #0
 800d686:	60f8      	str	r0, [r7, #12]
 800d688:	60b9      	str	r1, [r7, #8]
 800d68a:	4613      	mov	r3, r2
 800d68c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800d68e:	2300      	movs	r3, #0
 800d690:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d109      	bne.n	800d6ac <netconn_recv_data+0x2c>
 800d698:	4b58      	ldr	r3, [pc, #352]	; (800d7fc <netconn_recv_data+0x17c>)
 800d69a:	f44f 7212 	mov.w	r2, #584	; 0x248
 800d69e:	4958      	ldr	r1, [pc, #352]	; (800d800 <netconn_recv_data+0x180>)
 800d6a0:	4858      	ldr	r0, [pc, #352]	; (800d804 <netconn_recv_data+0x184>)
 800d6a2:	f00e f977 	bl	801b994 <iprintf>
 800d6a6:	f06f 030f 	mvn.w	r3, #15
 800d6aa:	e0a2      	b.n	800d7f2 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d109      	bne.n	800d6cc <netconn_recv_data+0x4c>
 800d6b8:	4b50      	ldr	r3, [pc, #320]	; (800d7fc <netconn_recv_data+0x17c>)
 800d6ba:	f240 224a 	movw	r2, #586	; 0x24a
 800d6be:	4952      	ldr	r1, [pc, #328]	; (800d808 <netconn_recv_data+0x188>)
 800d6c0:	4850      	ldr	r0, [pc, #320]	; (800d804 <netconn_recv_data+0x184>)
 800d6c2:	f00e f967 	bl	801b994 <iprintf>
 800d6c6:	f06f 030f 	mvn.w	r3, #15
 800d6ca:	e092      	b.n	800d7f2 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	3310      	adds	r3, #16
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f00d ffed 	bl	801b6b0 <sys_mbox_valid>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d10e      	bne.n	800d6fa <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800d6dc:	68f8      	ldr	r0, [r7, #12]
 800d6de:	f000 fa01 	bl	800dae4 <netconn_err>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800d6e6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d002      	beq.n	800d6f4 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800d6ee:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800d6f2:	e07e      	b.n	800d7f2 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800d6f4:	f06f 030a 	mvn.w	r3, #10
 800d6f8:	e07b      	b.n	800d7f2 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	7f1b      	ldrb	r3, [r3, #28]
 800d6fe:	f003 0302 	and.w	r3, r3, #2
 800d702:	2b00      	cmp	r3, #0
 800d704:	d10f      	bne.n	800d726 <netconn_recv_data+0xa6>
 800d706:	79fb      	ldrb	r3, [r7, #7]
 800d708:	f003 0304 	and.w	r3, r3, #4
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d10a      	bne.n	800d726 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	7f1b      	ldrb	r3, [r3, #28]
 800d714:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d104      	bne.n	800d726 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d023      	beq.n	800d76e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	3310      	adds	r3, #16
 800d72a:	f107 0218 	add.w	r2, r7, #24
 800d72e:	4611      	mov	r1, r2
 800d730:	4618      	mov	r0, r3
 800d732:	f00d ffa6 	bl	801b682 <sys_arch_mbox_tryfetch>
 800d736:	4603      	mov	r3, r0
 800d738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d73c:	d11f      	bne.n	800d77e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800d73e:	68f8      	ldr	r0, [r7, #12]
 800d740:	f000 f9d0 	bl	800dae4 <netconn_err>
 800d744:	4603      	mov	r3, r0
 800d746:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800d748:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d002      	beq.n	800d756 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800d750:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d754:	e04d      	b.n	800d7f2 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	7f1b      	ldrb	r3, [r3, #28]
 800d75a:	f003 0301 	and.w	r3, r3, #1
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d002      	beq.n	800d768 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800d762:	f06f 030a 	mvn.w	r3, #10
 800d766:	e044      	b.n	800d7f2 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800d768:	f06f 0306 	mvn.w	r3, #6
 800d76c:	e041      	b.n	800d7f2 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	3310      	adds	r3, #16
 800d772:	f107 0118 	add.w	r1, r7, #24
 800d776:	2200      	movs	r2, #0
 800d778:	4618      	mov	r0, r3
 800d77a:	f00d ff51 	bl	801b620 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	781b      	ldrb	r3, [r3, #0]
 800d782:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d786:	2b10      	cmp	r3, #16
 800d788:	d117      	bne.n	800d7ba <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800d78a:	69bb      	ldr	r3, [r7, #24]
 800d78c:	f107 0217 	add.w	r2, r7, #23
 800d790:	4611      	mov	r1, r2
 800d792:	4618      	mov	r0, r3
 800d794:	f000 f9f8 	bl	800db88 <lwip_netconn_is_err_msg>
 800d798:	4603      	mov	r3, r0
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d009      	beq.n	800d7b2 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800d79e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d7a2:	f113 0f0f 	cmn.w	r3, #15
 800d7a6:	d101      	bne.n	800d7ac <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	e022      	b.n	800d7f2 <netconn_recv_data+0x172>
      }
      return err;
 800d7ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d7b0:	e01f      	b.n	800d7f2 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800d7b2:	69bb      	ldr	r3, [r7, #24]
 800d7b4:	891b      	ldrh	r3, [r3, #8]
 800d7b6:	83fb      	strh	r3, [r7, #30]
 800d7b8:	e00d      	b.n	800d7d6 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800d7ba:	69bb      	ldr	r3, [r7, #24]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d106      	bne.n	800d7ce <netconn_recv_data+0x14e>
 800d7c0:	4b0e      	ldr	r3, [pc, #56]	; (800d7fc <netconn_recv_data+0x17c>)
 800d7c2:	f240 2291 	movw	r2, #657	; 0x291
 800d7c6:	4911      	ldr	r1, [pc, #68]	; (800d80c <netconn_recv_data+0x18c>)
 800d7c8:	480e      	ldr	r0, [pc, #56]	; (800d804 <netconn_recv_data+0x184>)
 800d7ca:	f00e f8e3 	bl	801b994 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800d7ce:	69bb      	ldr	r3, [r7, #24]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	891b      	ldrh	r3, [r3, #8]
 800d7d4:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d005      	beq.n	800d7ea <netconn_recv_data+0x16a>
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7e2:	8bfa      	ldrh	r2, [r7, #30]
 800d7e4:	2101      	movs	r1, #1
 800d7e6:	68f8      	ldr	r0, [r7, #12]
 800d7e8:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800d7ea:	69ba      	ldr	r2, [r7, #24]
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800d7f0:	2300      	movs	r3, #0
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3720      	adds	r7, #32
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	0801cebc 	.word	0x0801cebc
 800d800:	0801d0d4 	.word	0x0801d0d4
 800d804:	0801cf14 	.word	0x0801cf14
 800d808:	0801d0f4 	.word	0x0801d0f4
 800d80c:	0801d110 	.word	0x0801d110

0800d810 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b084      	sub	sp, #16
 800d814:	af00      	add	r7, sp, #0
 800d816:	60f8      	str	r0, [r7, #12]
 800d818:	60b9      	str	r1, [r7, #8]
 800d81a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d005      	beq.n	800d82e <netconn_tcp_recvd_msg+0x1e>
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	781b      	ldrb	r3, [r3, #0]
 800d826:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d82a:	2b10      	cmp	r3, #16
 800d82c:	d009      	beq.n	800d842 <netconn_tcp_recvd_msg+0x32>
 800d82e:	4b0c      	ldr	r3, [pc, #48]	; (800d860 <netconn_tcp_recvd_msg+0x50>)
 800d830:	f240 22a7 	movw	r2, #679	; 0x2a7
 800d834:	490b      	ldr	r1, [pc, #44]	; (800d864 <netconn_tcp_recvd_msg+0x54>)
 800d836:	480c      	ldr	r0, [pc, #48]	; (800d868 <netconn_tcp_recvd_msg+0x58>)
 800d838:	f00e f8ac 	bl	801b994 <iprintf>
 800d83c:	f06f 030f 	mvn.w	r3, #15
 800d840:	e00a      	b.n	800d858 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	68fa      	ldr	r2, [r7, #12]
 800d846:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	68ba      	ldr	r2, [r7, #8]
 800d84c:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800d84e:	6879      	ldr	r1, [r7, #4]
 800d850:	4806      	ldr	r0, [pc, #24]	; (800d86c <netconn_tcp_recvd_msg+0x5c>)
 800d852:	f7ff fdb3 	bl	800d3bc <netconn_apimsg>
 800d856:	4603      	mov	r3, r0
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3710      	adds	r7, #16
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}
 800d860:	0801cebc 	.word	0x0801cebc
 800d864:	0801d11c 	.word	0x0801d11c
 800d868:	0801cf14 	.word	0x0801cf14
 800d86c:	0800e9ed 	.word	0x0800e9ed

0800d870 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b08c      	sub	sp, #48	; 0x30
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d005      	beq.n	800d88c <netconn_tcp_recvd+0x1c>
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	781b      	ldrb	r3, [r3, #0]
 800d884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d888:	2b10      	cmp	r3, #16
 800d88a:	d009      	beq.n	800d8a0 <netconn_tcp_recvd+0x30>
 800d88c:	4b0c      	ldr	r3, [pc, #48]	; (800d8c0 <netconn_tcp_recvd+0x50>)
 800d88e:	f240 22b5 	movw	r2, #693	; 0x2b5
 800d892:	490c      	ldr	r1, [pc, #48]	; (800d8c4 <netconn_tcp_recvd+0x54>)
 800d894:	480c      	ldr	r0, [pc, #48]	; (800d8c8 <netconn_tcp_recvd+0x58>)
 800d896:	f00e f87d 	bl	801b994 <iprintf>
 800d89a:	f06f 030f 	mvn.w	r3, #15
 800d89e:	e00b      	b.n	800d8b8 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800d8a0:	f107 030c 	add.w	r3, r7, #12
 800d8a4:	461a      	mov	r2, r3
 800d8a6:	6839      	ldr	r1, [r7, #0]
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f7ff ffb1 	bl	800d810 <netconn_tcp_recvd_msg>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800d8b4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	3730      	adds	r7, #48	; 0x30
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}
 800d8c0:	0801cebc 	.word	0x0801cebc
 800d8c4:	0801d11c 	.word	0x0801d11c
 800d8c8:	0801cf14 	.word	0x0801cf14

0800d8cc <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b090      	sub	sp, #64	; 0x40
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	60b9      	str	r1, [r7, #8]
 800d8d6:	4613      	mov	r3, r2
 800d8d8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	3310      	adds	r3, #16
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f00d fee6 	bl	801b6b0 <sys_mbox_valid>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d102      	bne.n	800d8f0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800d8ea:	f06f 030a 	mvn.w	r3, #10
 800d8ee:	e06d      	b.n	800d9cc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	7f1b      	ldrb	r3, [r3, #28]
 800d8f4:	b25b      	sxtb	r3, r3
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	da07      	bge.n	800d90a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	7f1b      	ldrb	r3, [r3, #28]
 800d8fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d902:	b2da      	uxtb	r2, r3
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800d908:	e039      	b.n	800d97e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800d90a:	79fb      	ldrb	r3, [r7, #7]
 800d90c:	461a      	mov	r2, r3
 800d90e:	68b9      	ldr	r1, [r7, #8]
 800d910:	68f8      	ldr	r0, [r7, #12]
 800d912:	f7ff feb5 	bl	800d680 <netconn_recv_data>
 800d916:	4603      	mov	r3, r0
 800d918:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800d91c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d920:	2b00      	cmp	r3, #0
 800d922:	d002      	beq.n	800d92a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800d924:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d928:	e050      	b.n	800d9cc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800d930:	79fb      	ldrb	r3, [r7, #7]
 800d932:	f003 0308 	and.w	r3, r3, #8
 800d936:	2b00      	cmp	r3, #0
 800d938:	d10e      	bne.n	800d958 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800d93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d002      	beq.n	800d946 <netconn_recv_data_tcp+0x7a>
 800d940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d942:	891b      	ldrh	r3, [r3, #8]
 800d944:	e000      	b.n	800d948 <netconn_recv_data_tcp+0x7c>
 800d946:	2301      	movs	r3, #1
 800d948:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800d94a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d94c:	f107 0214 	add.w	r2, r7, #20
 800d950:	4619      	mov	r1, r3
 800d952:	68f8      	ldr	r0, [r7, #12]
 800d954:	f7ff ff5c 	bl	800d810 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800d958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d134      	bne.n	800d9c8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800d95e:	79fb      	ldrb	r3, [r7, #7]
 800d960:	f003 0310 	and.w	r3, r3, #16
 800d964:	2b00      	cmp	r3, #0
 800d966:	d009      	beq.n	800d97c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	7f1b      	ldrb	r3, [r3, #28]
 800d96c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d970:	b2da      	uxtb	r2, r3
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800d976:	f06f 0306 	mvn.w	r3, #6
 800d97a:	e027      	b.n	800d9cc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800d97c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d982:	2b00      	cmp	r3, #0
 800d984:	d005      	beq.n	800d992 <netconn_recv_data_tcp+0xc6>
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d98a:	2200      	movs	r2, #0
 800d98c:	2101      	movs	r1, #1
 800d98e:	68f8      	ldr	r0, [r7, #12]
 800d990:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d10f      	bne.n	800d9ba <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800d99a:	68f8      	ldr	r0, [r7, #12]
 800d99c:	f000 f8a2 	bl	800dae4 <netconn_err>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800d9a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d002      	beq.n	800d9b4 <netconn_recv_data_tcp+0xe8>
          return err;
 800d9ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d9b2:	e00b      	b.n	800d9cc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800d9b4:	f06f 030d 	mvn.w	r3, #13
 800d9b8:	e008      	b.n	800d9cc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800d9ba:	2101      	movs	r1, #1
 800d9bc:	68f8      	ldr	r0, [r7, #12]
 800d9be:	f000 f861 	bl	800da84 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800d9c2:	f06f 030e 	mvn.w	r3, #14
 800d9c6:	e001      	b.n	800d9cc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800d9c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3740      	adds	r7, #64	; 0x40
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}

0800d9d4 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b084      	sub	sp, #16
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	60f8      	str	r0, [r7, #12]
 800d9dc:	60b9      	str	r1, [r7, #8]
 800d9de:	4613      	mov	r3, r2
 800d9e0:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d005      	beq.n	800d9f4 <netconn_recv_tcp_pbuf_flags+0x20>
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	781b      	ldrb	r3, [r3, #0]
 800d9ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d9f0:	2b10      	cmp	r3, #16
 800d9f2:	d009      	beq.n	800da08 <netconn_recv_tcp_pbuf_flags+0x34>
 800d9f4:	4b0a      	ldr	r3, [pc, #40]	; (800da20 <netconn_recv_tcp_pbuf_flags+0x4c>)
 800d9f6:	f240 3225 	movw	r2, #805	; 0x325
 800d9fa:	490a      	ldr	r1, [pc, #40]	; (800da24 <netconn_recv_tcp_pbuf_flags+0x50>)
 800d9fc:	480a      	ldr	r0, [pc, #40]	; (800da28 <netconn_recv_tcp_pbuf_flags+0x54>)
 800d9fe:	f00d ffc9 	bl	801b994 <iprintf>
 800da02:	f06f 030f 	mvn.w	r3, #15
 800da06:	e006      	b.n	800da16 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800da08:	79fb      	ldrb	r3, [r7, #7]
 800da0a:	461a      	mov	r2, r3
 800da0c:	68b9      	ldr	r1, [r7, #8]
 800da0e:	68f8      	ldr	r0, [r7, #12]
 800da10:	f7ff ff5c 	bl	800d8cc <netconn_recv_data_tcp>
 800da14:	4603      	mov	r3, r0
}
 800da16:	4618      	mov	r0, r3
 800da18:	3710      	adds	r7, #16
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	0801cebc 	.word	0x0801cebc
 800da24:	0801d11c 	.word	0x0801d11c
 800da28:	0801cf14 	.word	0x0801cf14

0800da2c <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	60b9      	str	r1, [r7, #8]
 800da36:	4613      	mov	r3, r2
 800da38:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d005      	beq.n	800da4c <netconn_recv_udp_raw_netbuf_flags+0x20>
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	781b      	ldrb	r3, [r3, #0]
 800da44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da48:	2b10      	cmp	r3, #16
 800da4a:	d109      	bne.n	800da60 <netconn_recv_udp_raw_netbuf_flags+0x34>
 800da4c:	4b0a      	ldr	r3, [pc, #40]	; (800da78 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800da4e:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800da52:	490a      	ldr	r1, [pc, #40]	; (800da7c <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800da54:	480a      	ldr	r0, [pc, #40]	; (800da80 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800da56:	f00d ff9d 	bl	801b994 <iprintf>
 800da5a:	f06f 030f 	mvn.w	r3, #15
 800da5e:	e006      	b.n	800da6e <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800da60:	79fb      	ldrb	r3, [r7, #7]
 800da62:	461a      	mov	r2, r3
 800da64:	68b9      	ldr	r1, [r7, #8]
 800da66:	68f8      	ldr	r0, [r7, #12]
 800da68:	f7ff fe0a 	bl	800d680 <netconn_recv_data>
 800da6c:	4603      	mov	r3, r0
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3710      	adds	r7, #16
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
 800da76:	bf00      	nop
 800da78:	0801cebc 	.word	0x0801cebc
 800da7c:	0801d140 	.word	0x0801d140
 800da80:	0801cf14 	.word	0x0801cf14

0800da84 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b08c      	sub	sp, #48	; 0x30
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	460b      	mov	r3, r1
 800da8e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d109      	bne.n	800daaa <netconn_close_shutdown+0x26>
 800da96:	4b0f      	ldr	r3, [pc, #60]	; (800dad4 <netconn_close_shutdown+0x50>)
 800da98:	f240 4247 	movw	r2, #1095	; 0x447
 800da9c:	490e      	ldr	r1, [pc, #56]	; (800dad8 <netconn_close_shutdown+0x54>)
 800da9e:	480f      	ldr	r0, [pc, #60]	; (800dadc <netconn_close_shutdown+0x58>)
 800daa0:	f00d ff78 	bl	801b994 <iprintf>
 800daa4:	f06f 030f 	mvn.w	r3, #15
 800daa8:	e010      	b.n	800dacc <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800daae:	78fb      	ldrb	r3, [r7, #3]
 800dab0:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800dab2:	2329      	movs	r3, #41	; 0x29
 800dab4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800dab6:	f107 030c 	add.w	r3, r7, #12
 800daba:	4619      	mov	r1, r3
 800dabc:	4808      	ldr	r0, [pc, #32]	; (800dae0 <netconn_close_shutdown+0x5c>)
 800dabe:	f7ff fc7d 	bl	800d3bc <netconn_apimsg>
 800dac2:	4603      	mov	r3, r0
 800dac4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800dac8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3730      	adds	r7, #48	; 0x30
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}
 800dad4:	0801cebc 	.word	0x0801cebc
 800dad8:	0801d1f8 	.word	0x0801d1f8
 800dadc:	0801cf14 	.word	0x0801cf14
 800dae0:	0800eefd 	.word	0x0800eefd

0800dae4 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b084      	sub	sp, #16
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d101      	bne.n	800daf6 <netconn_err+0x12>
    return ERR_OK;
 800daf2:	2300      	movs	r3, #0
 800daf4:	e00d      	b.n	800db12 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800daf6:	f00d fee5 	bl	801b8c4 <sys_arch_protect>
 800dafa:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	7a1b      	ldrb	r3, [r3, #8]
 800db00:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2200      	movs	r2, #0
 800db06:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800db08:	68f8      	ldr	r0, [r7, #12]
 800db0a:	f00d fee9 	bl	801b8e0 <sys_arch_unprotect>
  return err;
 800db0e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800db12:	4618      	mov	r0, r3
 800db14:	3710      	adds	r7, #16
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}
	...

0800db1c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b082      	sub	sp, #8
 800db20:	af00      	add	r7, sp, #0
 800db22:	4603      	mov	r3, r0
 800db24:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800db26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db2a:	f113 0f0d 	cmn.w	r3, #13
 800db2e:	d009      	beq.n	800db44 <lwip_netconn_err_to_msg+0x28>
 800db30:	f113 0f0d 	cmn.w	r3, #13
 800db34:	dc0c      	bgt.n	800db50 <lwip_netconn_err_to_msg+0x34>
 800db36:	f113 0f0f 	cmn.w	r3, #15
 800db3a:	d007      	beq.n	800db4c <lwip_netconn_err_to_msg+0x30>
 800db3c:	f113 0f0e 	cmn.w	r3, #14
 800db40:	d002      	beq.n	800db48 <lwip_netconn_err_to_msg+0x2c>
 800db42:	e005      	b.n	800db50 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800db44:	4b0a      	ldr	r3, [pc, #40]	; (800db70 <lwip_netconn_err_to_msg+0x54>)
 800db46:	e00e      	b.n	800db66 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800db48:	4b0a      	ldr	r3, [pc, #40]	; (800db74 <lwip_netconn_err_to_msg+0x58>)
 800db4a:	e00c      	b.n	800db66 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800db4c:	4b0a      	ldr	r3, [pc, #40]	; (800db78 <lwip_netconn_err_to_msg+0x5c>)
 800db4e:	e00a      	b.n	800db66 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800db50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d005      	beq.n	800db64 <lwip_netconn_err_to_msg+0x48>
 800db58:	4b08      	ldr	r3, [pc, #32]	; (800db7c <lwip_netconn_err_to_msg+0x60>)
 800db5a:	227d      	movs	r2, #125	; 0x7d
 800db5c:	4908      	ldr	r1, [pc, #32]	; (800db80 <lwip_netconn_err_to_msg+0x64>)
 800db5e:	4809      	ldr	r0, [pc, #36]	; (800db84 <lwip_netconn_err_to_msg+0x68>)
 800db60:	f00d ff18 	bl	801b994 <iprintf>
      return NULL;
 800db64:	2300      	movs	r3, #0
  }
}
 800db66:	4618      	mov	r0, r3
 800db68:	3708      	adds	r7, #8
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop
 800db70:	0802065c 	.word	0x0802065c
 800db74:	0802065d 	.word	0x0802065d
 800db78:	0802065e 	.word	0x0802065e
 800db7c:	0801d214 	.word	0x0801d214
 800db80:	0801d248 	.word	0x0801d248
 800db84:	0801d258 	.word	0x0801d258

0800db88 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b082      	sub	sp, #8
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d105      	bne.n	800dba4 <lwip_netconn_is_err_msg+0x1c>
 800db98:	4b12      	ldr	r3, [pc, #72]	; (800dbe4 <lwip_netconn_is_err_msg+0x5c>)
 800db9a:	2285      	movs	r2, #133	; 0x85
 800db9c:	4912      	ldr	r1, [pc, #72]	; (800dbe8 <lwip_netconn_is_err_msg+0x60>)
 800db9e:	4813      	ldr	r0, [pc, #76]	; (800dbec <lwip_netconn_is_err_msg+0x64>)
 800dba0:	f00d fef8 	bl	801b994 <iprintf>

  if (msg == &netconn_aborted) {
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	4a12      	ldr	r2, [pc, #72]	; (800dbf0 <lwip_netconn_is_err_msg+0x68>)
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d104      	bne.n	800dbb6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	22f3      	movs	r2, #243	; 0xf3
 800dbb0:	701a      	strb	r2, [r3, #0]
    return 1;
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	e012      	b.n	800dbdc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	4a0e      	ldr	r2, [pc, #56]	; (800dbf4 <lwip_netconn_is_err_msg+0x6c>)
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d104      	bne.n	800dbc8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	22f2      	movs	r2, #242	; 0xf2
 800dbc2:	701a      	strb	r2, [r3, #0]
    return 1;
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	e009      	b.n	800dbdc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	4a0b      	ldr	r2, [pc, #44]	; (800dbf8 <lwip_netconn_is_err_msg+0x70>)
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d104      	bne.n	800dbda <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	22f1      	movs	r2, #241	; 0xf1
 800dbd4:	701a      	strb	r2, [r3, #0]
    return 1;
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	e000      	b.n	800dbdc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800dbda:	2300      	movs	r3, #0
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3708      	adds	r7, #8
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}
 800dbe4:	0801d214 	.word	0x0801d214
 800dbe8:	0801d280 	.word	0x0801d280
 800dbec:	0801d258 	.word	0x0801d258
 800dbf0:	0802065c 	.word	0x0802065c
 800dbf4:	0802065d 	.word	0x0802065d
 800dbf8:	0802065e 	.word	0x0802065e

0800dbfc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b088      	sub	sp, #32
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	60f8      	str	r0, [r7, #12]
 800dc04:	60b9      	str	r1, [r7, #8]
 800dc06:	607a      	str	r2, [r7, #4]
 800dc08:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d105      	bne.n	800dc1c <recv_udp+0x20>
 800dc10:	4b34      	ldr	r3, [pc, #208]	; (800dce4 <recv_udp+0xe8>)
 800dc12:	22e5      	movs	r2, #229	; 0xe5
 800dc14:	4934      	ldr	r1, [pc, #208]	; (800dce8 <recv_udp+0xec>)
 800dc16:	4835      	ldr	r0, [pc, #212]	; (800dcec <recv_udp+0xf0>)
 800dc18:	f00d febc 	bl	801b994 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d105      	bne.n	800dc2e <recv_udp+0x32>
 800dc22:	4b30      	ldr	r3, [pc, #192]	; (800dce4 <recv_udp+0xe8>)
 800dc24:	22e6      	movs	r2, #230	; 0xe6
 800dc26:	4932      	ldr	r1, [pc, #200]	; (800dcf0 <recv_udp+0xf4>)
 800dc28:	4830      	ldr	r0, [pc, #192]	; (800dcec <recv_udp+0xf0>)
 800dc2a:	f00d feb3 	bl	801b994 <iprintf>
  conn = (struct netconn *)arg;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800dc32:	69fb      	ldr	r3, [r7, #28]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d103      	bne.n	800dc40 <recv_udp+0x44>
    pbuf_free(p);
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f004 fb15 	bl	8012268 <pbuf_free>
    return;
 800dc3e:	e04d      	b.n	800dcdc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800dc40:	69fb      	ldr	r3, [r7, #28]
 800dc42:	685b      	ldr	r3, [r3, #4]
 800dc44:	68ba      	ldr	r2, [r7, #8]
 800dc46:	429a      	cmp	r2, r3
 800dc48:	d005      	beq.n	800dc56 <recv_udp+0x5a>
 800dc4a:	4b26      	ldr	r3, [pc, #152]	; (800dce4 <recv_udp+0xe8>)
 800dc4c:	22ee      	movs	r2, #238	; 0xee
 800dc4e:	4929      	ldr	r1, [pc, #164]	; (800dcf4 <recv_udp+0xf8>)
 800dc50:	4826      	ldr	r0, [pc, #152]	; (800dcec <recv_udp+0xf0>)
 800dc52:	f00d fe9f 	bl	801b994 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800dc56:	69fb      	ldr	r3, [r7, #28]
 800dc58:	3310      	adds	r3, #16
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f00d fd28 	bl	801b6b0 <sys_mbox_valid>
 800dc60:	4603      	mov	r3, r0
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d103      	bne.n	800dc6e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f004 fafe 	bl	8012268 <pbuf_free>
    return;
 800dc6c:	e036      	b.n	800dcdc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800dc6e:	2006      	movs	r0, #6
 800dc70:	f003 fbae 	bl	80113d0 <memp_malloc>
 800dc74:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800dc76:	69bb      	ldr	r3, [r7, #24]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d103      	bne.n	800dc84 <recv_udp+0x88>
    pbuf_free(p);
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f004 faf3 	bl	8012268 <pbuf_free>
    return;
 800dc82:	e02b      	b.n	800dcdc <recv_udp+0xe0>
  } else {
    buf->p = p;
 800dc84:	69bb      	ldr	r3, [r7, #24]
 800dc86:	687a      	ldr	r2, [r7, #4]
 800dc88:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800dc8a:	69bb      	ldr	r3, [r7, #24]
 800dc8c:	687a      	ldr	r2, [r7, #4]
 800dc8e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d002      	beq.n	800dc9c <recv_udp+0xa0>
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	e000      	b.n	800dc9e <recv_udp+0xa2>
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	69ba      	ldr	r2, [r7, #24]
 800dca0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800dca2:	69bb      	ldr	r3, [r7, #24]
 800dca4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800dca6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	891b      	ldrh	r3, [r3, #8]
 800dcac:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800dcae:	69fb      	ldr	r3, [r7, #28]
 800dcb0:	3310      	adds	r3, #16
 800dcb2:	69b9      	ldr	r1, [r7, #24]
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f00d fc99 	bl	801b5ec <sys_mbox_trypost>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d003      	beq.n	800dcc8 <recv_udp+0xcc>
    netbuf_delete(buf);
 800dcc0:	69b8      	ldr	r0, [r7, #24]
 800dcc2:	f001 f9c5 	bl	800f050 <netbuf_delete>
    return;
 800dcc6:	e009      	b.n	800dcdc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800dcc8:	69fb      	ldr	r3, [r7, #28]
 800dcca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d005      	beq.n	800dcdc <recv_udp+0xe0>
 800dcd0:	69fb      	ldr	r3, [r7, #28]
 800dcd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcd4:	8afa      	ldrh	r2, [r7, #22]
 800dcd6:	2100      	movs	r1, #0
 800dcd8:	69f8      	ldr	r0, [r7, #28]
 800dcda:	4798      	blx	r3
  }
}
 800dcdc:	3720      	adds	r7, #32
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	0801d214 	.word	0x0801d214
 800dce8:	0801d28c 	.word	0x0801d28c
 800dcec:	0801d258 	.word	0x0801d258
 800dcf0:	0801d2b0 	.word	0x0801d2b0
 800dcf4:	0801d2d0 	.word	0x0801d2d0

0800dcf8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b088      	sub	sp, #32
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	60f8      	str	r0, [r7, #12]
 800dd00:	60b9      	str	r1, [r7, #8]
 800dd02:	607a      	str	r2, [r7, #4]
 800dd04:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d106      	bne.n	800dd1a <recv_tcp+0x22>
 800dd0c:	4b36      	ldr	r3, [pc, #216]	; (800dde8 <recv_tcp+0xf0>)
 800dd0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800dd12:	4936      	ldr	r1, [pc, #216]	; (800ddec <recv_tcp+0xf4>)
 800dd14:	4836      	ldr	r0, [pc, #216]	; (800ddf0 <recv_tcp+0xf8>)
 800dd16:	f00d fe3d 	bl	801b994 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d106      	bne.n	800dd2e <recv_tcp+0x36>
 800dd20:	4b31      	ldr	r3, [pc, #196]	; (800dde8 <recv_tcp+0xf0>)
 800dd22:	f240 122d 	movw	r2, #301	; 0x12d
 800dd26:	4933      	ldr	r1, [pc, #204]	; (800ddf4 <recv_tcp+0xfc>)
 800dd28:	4831      	ldr	r0, [pc, #196]	; (800ddf0 <recv_tcp+0xf8>)
 800dd2a:	f00d fe33 	bl	801b994 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800dd2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d006      	beq.n	800dd44 <recv_tcp+0x4c>
 800dd36:	4b2c      	ldr	r3, [pc, #176]	; (800dde8 <recv_tcp+0xf0>)
 800dd38:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800dd3c:	492e      	ldr	r1, [pc, #184]	; (800ddf8 <recv_tcp+0x100>)
 800dd3e:	482c      	ldr	r0, [pc, #176]	; (800ddf0 <recv_tcp+0xf8>)
 800dd40:	f00d fe28 	bl	801b994 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d102      	bne.n	800dd54 <recv_tcp+0x5c>
    return ERR_VAL;
 800dd4e:	f06f 0305 	mvn.w	r3, #5
 800dd52:	e045      	b.n	800dde0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	68ba      	ldr	r2, [r7, #8]
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d006      	beq.n	800dd6c <recv_tcp+0x74>
 800dd5e:	4b22      	ldr	r3, [pc, #136]	; (800dde8 <recv_tcp+0xf0>)
 800dd60:	f240 1235 	movw	r2, #309	; 0x135
 800dd64:	4925      	ldr	r1, [pc, #148]	; (800ddfc <recv_tcp+0x104>)
 800dd66:	4822      	ldr	r0, [pc, #136]	; (800ddf0 <recv_tcp+0xf8>)
 800dd68:	f00d fe14 	bl	801b994 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	3310      	adds	r3, #16
 800dd70:	4618      	mov	r0, r3
 800dd72:	f00d fc9d 	bl	801b6b0 <sys_mbox_valid>
 800dd76:	4603      	mov	r3, r0
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d10d      	bne.n	800dd98 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d008      	beq.n	800dd94 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	891b      	ldrh	r3, [r3, #8]
 800dd86:	4619      	mov	r1, r3
 800dd88:	68b8      	ldr	r0, [r7, #8]
 800dd8a:	f005 f95b 	bl	8013044 <tcp_recved>
      pbuf_free(p);
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f004 fa6a 	bl	8012268 <pbuf_free>
    }
    return ERR_OK;
 800dd94:	2300      	movs	r3, #0
 800dd96:	e023      	b.n	800dde0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d005      	beq.n	800ddaa <recv_tcp+0xb2>
    msg = p;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	891b      	ldrh	r3, [r3, #8]
 800dda6:	83fb      	strh	r3, [r7, #30]
 800dda8:	e003      	b.n	800ddb2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800ddaa:	4b15      	ldr	r3, [pc, #84]	; (800de00 <recv_tcp+0x108>)
 800ddac:	61bb      	str	r3, [r7, #24]
    len = 0;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	3310      	adds	r3, #16
 800ddb6:	69b9      	ldr	r1, [r7, #24]
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f00d fc17 	bl	801b5ec <sys_mbox_trypost>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d002      	beq.n	800ddca <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800ddc4:	f04f 33ff 	mov.w	r3, #4294967295
 800ddc8:	e00a      	b.n	800dde0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d005      	beq.n	800ddde <recv_tcp+0xe6>
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd6:	8bfa      	ldrh	r2, [r7, #30]
 800ddd8:	2100      	movs	r1, #0
 800ddda:	6978      	ldr	r0, [r7, #20]
 800dddc:	4798      	blx	r3
  }

  return ERR_OK;
 800ddde:	2300      	movs	r3, #0
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3720      	adds	r7, #32
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}
 800dde8:	0801d214 	.word	0x0801d214
 800ddec:	0801d2f0 	.word	0x0801d2f0
 800ddf0:	0801d258 	.word	0x0801d258
 800ddf4:	0801d314 	.word	0x0801d314
 800ddf8:	0801d334 	.word	0x0801d334
 800ddfc:	0801d34c 	.word	0x0801d34c
 800de00:	0802065e 	.word	0x0802065e

0800de04 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b084      	sub	sp, #16
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d106      	bne.n	800de26 <poll_tcp+0x22>
 800de18:	4b29      	ldr	r3, [pc, #164]	; (800dec0 <poll_tcp+0xbc>)
 800de1a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800de1e:	4929      	ldr	r1, [pc, #164]	; (800dec4 <poll_tcp+0xc0>)
 800de20:	4829      	ldr	r0, [pc, #164]	; (800dec8 <poll_tcp+0xc4>)
 800de22:	f00d fdb7 	bl	801b994 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	785b      	ldrb	r3, [r3, #1]
 800de2a:	2b01      	cmp	r3, #1
 800de2c:	d104      	bne.n	800de38 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800de2e:	2101      	movs	r1, #1
 800de30:	68f8      	ldr	r0, [r7, #12]
 800de32:	f000 fe11 	bl	800ea58 <lwip_netconn_do_writemore>
 800de36:	e016      	b.n	800de66 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	785b      	ldrb	r3, [r3, #1]
 800de3c:	2b04      	cmp	r3, #4
 800de3e:	d112      	bne.n	800de66 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	6a1b      	ldr	r3, [r3, #32]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d00a      	beq.n	800de5e <poll_tcp+0x5a>
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	6a1b      	ldr	r3, [r3, #32]
 800de4c:	7a5b      	ldrb	r3, [r3, #9]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d005      	beq.n	800de5e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	6a1b      	ldr	r3, [r3, #32]
 800de56:	7a5a      	ldrb	r2, [r3, #9]
 800de58:	3a01      	subs	r2, #1
 800de5a:	b2d2      	uxtb	r2, r2
 800de5c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800de5e:	2101      	movs	r1, #1
 800de60:	68f8      	ldr	r0, [r7, #12]
 800de62:	f000 fb3b 	bl	800e4dc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	7f1b      	ldrb	r3, [r3, #28]
 800de6a:	f003 0310 	and.w	r3, r3, #16
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d021      	beq.n	800deb6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	685b      	ldr	r3, [r3, #4]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d01d      	beq.n	800deb6 <poll_tcp+0xb2>
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800de82:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800de86:	d316      	bcc.n	800deb6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800de90:	2b04      	cmp	r3, #4
 800de92:	d810      	bhi.n	800deb6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	7f1b      	ldrb	r3, [r3, #28]
 800de98:	f023 0310 	bic.w	r3, r3, #16
 800de9c:	b2da      	uxtb	r2, r3
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d005      	beq.n	800deb6 <poll_tcp+0xb2>
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deae:	2200      	movs	r2, #0
 800deb0:	2102      	movs	r1, #2
 800deb2:	68f8      	ldr	r0, [r7, #12]
 800deb4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800deb6:	2300      	movs	r3, #0
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3710      	adds	r7, #16
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}
 800dec0:	0801d214 	.word	0x0801d214
 800dec4:	0801d36c 	.word	0x0801d36c
 800dec8:	0801d258 	.word	0x0801d258

0800decc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b086      	sub	sp, #24
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	60f8      	str	r0, [r7, #12]
 800ded4:	60b9      	str	r1, [r7, #8]
 800ded6:	4613      	mov	r3, r2
 800ded8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d106      	bne.n	800def2 <sent_tcp+0x26>
 800dee4:	4b20      	ldr	r3, [pc, #128]	; (800df68 <sent_tcp+0x9c>)
 800dee6:	f240 1293 	movw	r2, #403	; 0x193
 800deea:	4920      	ldr	r1, [pc, #128]	; (800df6c <sent_tcp+0xa0>)
 800deec:	4820      	ldr	r0, [pc, #128]	; (800df70 <sent_tcp+0xa4>)
 800deee:	f00d fd51 	bl	801b994 <iprintf>

  if (conn) {
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d032      	beq.n	800df5e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	785b      	ldrb	r3, [r3, #1]
 800defc:	2b01      	cmp	r3, #1
 800defe:	d104      	bne.n	800df0a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800df00:	2101      	movs	r1, #1
 800df02:	6978      	ldr	r0, [r7, #20]
 800df04:	f000 fda8 	bl	800ea58 <lwip_netconn_do_writemore>
 800df08:	e007      	b.n	800df1a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	785b      	ldrb	r3, [r3, #1]
 800df0e:	2b04      	cmp	r3, #4
 800df10:	d103      	bne.n	800df1a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800df12:	2101      	movs	r1, #1
 800df14:	6978      	ldr	r0, [r7, #20]
 800df16:	f000 fae1 	bl	800e4dc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	685b      	ldr	r3, [r3, #4]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d01d      	beq.n	800df5e <sent_tcp+0x92>
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800df2a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800df2e:	d316      	bcc.n	800df5e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	685b      	ldr	r3, [r3, #4]
 800df34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800df38:	2b04      	cmp	r3, #4
 800df3a:	d810      	bhi.n	800df5e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	7f1b      	ldrb	r3, [r3, #28]
 800df40:	f023 0310 	bic.w	r3, r3, #16
 800df44:	b2da      	uxtb	r2, r3
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d005      	beq.n	800df5e <sent_tcp+0x92>
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df56:	88fa      	ldrh	r2, [r7, #6]
 800df58:	2102      	movs	r1, #2
 800df5a:	6978      	ldr	r0, [r7, #20]
 800df5c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800df5e:	2300      	movs	r3, #0
}
 800df60:	4618      	mov	r0, r3
 800df62:	3718      	adds	r7, #24
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}
 800df68:	0801d214 	.word	0x0801d214
 800df6c:	0801d36c 	.word	0x0801d36c
 800df70:	0801d258 	.word	0x0801d258

0800df74 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b088      	sub	sp, #32
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
 800df7c:	460b      	mov	r3, r1
 800df7e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800df84:	69fb      	ldr	r3, [r7, #28]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d106      	bne.n	800df98 <err_tcp+0x24>
 800df8a:	4b5f      	ldr	r3, [pc, #380]	; (800e108 <err_tcp+0x194>)
 800df8c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800df90:	495e      	ldr	r1, [pc, #376]	; (800e10c <err_tcp+0x198>)
 800df92:	485f      	ldr	r0, [pc, #380]	; (800e110 <err_tcp+0x19c>)
 800df94:	f00d fcfe 	bl	801b994 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800df98:	f00d fc94 	bl	801b8c4 <sys_arch_protect>
 800df9c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800df9e:	69fb      	ldr	r3, [r7, #28]
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800dfa4:	69fb      	ldr	r3, [r7, #28]
 800dfa6:	78fa      	ldrb	r2, [r7, #3]
 800dfa8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800dfaa:	69fb      	ldr	r3, [r7, #28]
 800dfac:	7f1b      	ldrb	r3, [r3, #28]
 800dfae:	f043 0301 	orr.w	r3, r3, #1
 800dfb2:	b2da      	uxtb	r2, r3
 800dfb4:	69fb      	ldr	r3, [r7, #28]
 800dfb6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800dfb8:	69fb      	ldr	r3, [r7, #28]
 800dfba:	785b      	ldrb	r3, [r3, #1]
 800dfbc:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800dfbe:	69fb      	ldr	r3, [r7, #28]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800dfc4:	69b8      	ldr	r0, [r7, #24]
 800dfc6:	f00d fc8b 	bl	801b8e0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800dfca:	69fb      	ldr	r3, [r7, #28]
 800dfcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d005      	beq.n	800dfde <err_tcp+0x6a>
 800dfd2:	69fb      	ldr	r3, [r7, #28]
 800dfd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	2104      	movs	r1, #4
 800dfda:	69f8      	ldr	r0, [r7, #28]
 800dfdc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800dfde:	69fb      	ldr	r3, [r7, #28]
 800dfe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d005      	beq.n	800dff2 <err_tcp+0x7e>
 800dfe6:	69fb      	ldr	r3, [r7, #28]
 800dfe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfea:	2200      	movs	r2, #0
 800dfec:	2100      	movs	r1, #0
 800dfee:	69f8      	ldr	r0, [r7, #28]
 800dff0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800dff2:	69fb      	ldr	r3, [r7, #28]
 800dff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d005      	beq.n	800e006 <err_tcp+0x92>
 800dffa:	69fb      	ldr	r3, [r7, #28]
 800dffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dffe:	2200      	movs	r2, #0
 800e000:	2102      	movs	r1, #2
 800e002:	69f8      	ldr	r0, [r7, #28]
 800e004:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800e006:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7ff fd86 	bl	800db1c <lwip_netconn_err_to_msg>
 800e010:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800e012:	69fb      	ldr	r3, [r7, #28]
 800e014:	3310      	adds	r3, #16
 800e016:	4618      	mov	r0, r3
 800e018:	f00d fb4a 	bl	801b6b0 <sys_mbox_valid>
 800e01c:	4603      	mov	r3, r0
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d005      	beq.n	800e02e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800e022:	69fb      	ldr	r3, [r7, #28]
 800e024:	3310      	adds	r3, #16
 800e026:	6939      	ldr	r1, [r7, #16]
 800e028:	4618      	mov	r0, r3
 800e02a:	f00d fadf 	bl	801b5ec <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800e02e:	69fb      	ldr	r3, [r7, #28]
 800e030:	3314      	adds	r3, #20
 800e032:	4618      	mov	r0, r3
 800e034:	f00d fb3c 	bl	801b6b0 <sys_mbox_valid>
 800e038:	4603      	mov	r3, r0
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d005      	beq.n	800e04a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800e03e:	69fb      	ldr	r3, [r7, #28]
 800e040:	3314      	adds	r3, #20
 800e042:	6939      	ldr	r1, [r7, #16]
 800e044:	4618      	mov	r0, r3
 800e046:	f00d fad1 	bl	801b5ec <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800e04a:	7dfb      	ldrb	r3, [r7, #23]
 800e04c:	2b01      	cmp	r3, #1
 800e04e:	d005      	beq.n	800e05c <err_tcp+0xe8>
 800e050:	7dfb      	ldrb	r3, [r7, #23]
 800e052:	2b04      	cmp	r3, #4
 800e054:	d002      	beq.n	800e05c <err_tcp+0xe8>
 800e056:	7dfb      	ldrb	r3, [r7, #23]
 800e058:	2b03      	cmp	r3, #3
 800e05a:	d143      	bne.n	800e0e4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800e05c:	69fb      	ldr	r3, [r7, #28]
 800e05e:	7f1b      	ldrb	r3, [r3, #28]
 800e060:	f003 0304 	and.w	r3, r3, #4
 800e064:	2b00      	cmp	r3, #0
 800e066:	bf14      	ite	ne
 800e068:	2301      	movne	r3, #1
 800e06a:	2300      	moveq	r3, #0
 800e06c:	b2db      	uxtb	r3, r3
 800e06e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800e070:	69fb      	ldr	r3, [r7, #28]
 800e072:	7f1b      	ldrb	r3, [r3, #28]
 800e074:	f023 0304 	bic.w	r3, r3, #4
 800e078:	b2da      	uxtb	r2, r3
 800e07a:	69fb      	ldr	r3, [r7, #28]
 800e07c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d13b      	bne.n	800e0fc <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e084:	69fb      	ldr	r3, [r7, #28]
 800e086:	6a1b      	ldr	r3, [r3, #32]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d106      	bne.n	800e09a <err_tcp+0x126>
 800e08c:	4b1e      	ldr	r3, [pc, #120]	; (800e108 <err_tcp+0x194>)
 800e08e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e092:	4920      	ldr	r1, [pc, #128]	; (800e114 <err_tcp+0x1a0>)
 800e094:	481e      	ldr	r0, [pc, #120]	; (800e110 <err_tcp+0x19c>)
 800e096:	f00d fc7d 	bl	801b994 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800e09a:	7dfb      	ldrb	r3, [r7, #23]
 800e09c:	2b04      	cmp	r3, #4
 800e09e:	d104      	bne.n	800e0aa <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800e0a0:	69fb      	ldr	r3, [r7, #28]
 800e0a2:	6a1b      	ldr	r3, [r3, #32]
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	711a      	strb	r2, [r3, #4]
 800e0a8:	e003      	b.n	800e0b2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800e0aa:	69fb      	ldr	r3, [r7, #28]
 800e0ac:	6a1b      	ldr	r3, [r3, #32]
 800e0ae:	78fa      	ldrb	r2, [r7, #3]
 800e0b0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e0b2:	69fb      	ldr	r3, [r7, #28]
 800e0b4:	6a1b      	ldr	r3, [r3, #32]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	330c      	adds	r3, #12
 800e0ba:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800e0bc:	68b8      	ldr	r0, [r7, #8]
 800e0be:	f00d fb85 	bl	801b7cc <sys_sem_valid>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d106      	bne.n	800e0d6 <err_tcp+0x162>
 800e0c8:	4b0f      	ldr	r3, [pc, #60]	; (800e108 <err_tcp+0x194>)
 800e0ca:	f240 12ef 	movw	r2, #495	; 0x1ef
 800e0ce:	4912      	ldr	r1, [pc, #72]	; (800e118 <err_tcp+0x1a4>)
 800e0d0:	480f      	ldr	r0, [pc, #60]	; (800e110 <err_tcp+0x19c>)
 800e0d2:	f00d fc5f 	bl	801b994 <iprintf>
      conn->current_msg = NULL;
 800e0d6:	69fb      	ldr	r3, [r7, #28]
 800e0d8:	2200      	movs	r2, #0
 800e0da:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800e0dc:	68b8      	ldr	r0, [r7, #8]
 800e0de:	f00d fb5b 	bl	801b798 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800e0e2:	e00b      	b.n	800e0fc <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800e0e4:	69fb      	ldr	r3, [r7, #28]
 800e0e6:	6a1b      	ldr	r3, [r3, #32]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d008      	beq.n	800e0fe <err_tcp+0x18a>
 800e0ec:	4b06      	ldr	r3, [pc, #24]	; (800e108 <err_tcp+0x194>)
 800e0ee:	f240 12f7 	movw	r2, #503	; 0x1f7
 800e0f2:	490a      	ldr	r1, [pc, #40]	; (800e11c <err_tcp+0x1a8>)
 800e0f4:	4806      	ldr	r0, [pc, #24]	; (800e110 <err_tcp+0x19c>)
 800e0f6:	f00d fc4d 	bl	801b994 <iprintf>
  }
}
 800e0fa:	e000      	b.n	800e0fe <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800e0fc:	bf00      	nop
}
 800e0fe:	bf00      	nop
 800e100:	3720      	adds	r7, #32
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
 800e106:	bf00      	nop
 800e108:	0801d214 	.word	0x0801d214
 800e10c:	0801d36c 	.word	0x0801d36c
 800e110:	0801d258 	.word	0x0801d258
 800e114:	0801d37c 	.word	0x0801d37c
 800e118:	0801d398 	.word	0x0801d398
 800e11c:	0801d3b4 	.word	0x0801d3b4

0800e120 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b084      	sub	sp, #16
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800e12e:	6879      	ldr	r1, [r7, #4]
 800e130:	68f8      	ldr	r0, [r7, #12]
 800e132:	f005 fe4d 	bl	8013dd0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800e136:	490a      	ldr	r1, [pc, #40]	; (800e160 <setup_tcp+0x40>)
 800e138:	68f8      	ldr	r0, [r7, #12]
 800e13a:	f005 fe5b 	bl	8013df4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800e13e:	4909      	ldr	r1, [pc, #36]	; (800e164 <setup_tcp+0x44>)
 800e140:	68f8      	ldr	r0, [r7, #12]
 800e142:	f005 fe79 	bl	8013e38 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800e146:	2202      	movs	r2, #2
 800e148:	4907      	ldr	r1, [pc, #28]	; (800e168 <setup_tcp+0x48>)
 800e14a:	68f8      	ldr	r0, [r7, #12]
 800e14c:	f005 fed0 	bl	8013ef0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800e150:	4906      	ldr	r1, [pc, #24]	; (800e16c <setup_tcp+0x4c>)
 800e152:	68f8      	ldr	r0, [r7, #12]
 800e154:	f005 fe92 	bl	8013e7c <tcp_err>
}
 800e158:	bf00      	nop
 800e15a:	3710      	adds	r7, #16
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}
 800e160:	0800dcf9 	.word	0x0800dcf9
 800e164:	0800decd 	.word	0x0800decd
 800e168:	0800de05 	.word	0x0800de05
 800e16c:	0800df75 	.word	0x0800df75

0800e170 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800e170:	b590      	push	{r4, r7, lr}
 800e172:	b085      	sub	sp, #20
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800e178:	2300      	movs	r3, #0
 800e17a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	685b      	ldr	r3, [r3, #4]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d006      	beq.n	800e194 <pcb_new+0x24>
 800e186:	4b2b      	ldr	r3, [pc, #172]	; (800e234 <pcb_new+0xc4>)
 800e188:	f240 2265 	movw	r2, #613	; 0x265
 800e18c:	492a      	ldr	r1, [pc, #168]	; (800e238 <pcb_new+0xc8>)
 800e18e:	482b      	ldr	r0, [pc, #172]	; (800e23c <pcb_new+0xcc>)
 800e190:	f00d fc00 	bl	801b994 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	781b      	ldrb	r3, [r3, #0]
 800e19a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e19e:	2b10      	cmp	r3, #16
 800e1a0:	d022      	beq.n	800e1e8 <pcb_new+0x78>
 800e1a2:	2b20      	cmp	r3, #32
 800e1a4:	d133      	bne.n	800e20e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681c      	ldr	r4, [r3, #0]
 800e1aa:	7bfb      	ldrb	r3, [r7, #15]
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f00a feee 	bl	8018f8e <udp_new_ip_type>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	685b      	ldr	r3, [r3, #4]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d02a      	beq.n	800e216 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	781b      	ldrb	r3, [r3, #0]
 800e1c6:	2b22      	cmp	r3, #34	; 0x22
 800e1c8:	d104      	bne.n	800e1d4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	685b      	ldr	r3, [r3, #4]
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	6858      	ldr	r0, [r3, #4]
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	461a      	mov	r2, r3
 800e1e0:	4917      	ldr	r1, [pc, #92]	; (800e240 <pcb_new+0xd0>)
 800e1e2:	f00a fe5b 	bl	8018e9c <udp_recv>
      }
      break;
 800e1e6:	e016      	b.n	800e216 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681c      	ldr	r4, [r3, #0]
 800e1ec:	7bfb      	ldrb	r3, [r7, #15]
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f005 fde0 	bl	8013db4 <tcp_new_ip_type>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	685b      	ldr	r3, [r3, #4]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d00b      	beq.n	800e21a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	4618      	mov	r0, r3
 800e208:	f7ff ff8a 	bl	800e120 <setup_tcp>
      }
      break;
 800e20c:	e005      	b.n	800e21a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	22fa      	movs	r2, #250	; 0xfa
 800e212:	711a      	strb	r2, [r3, #4]
      return;
 800e214:	e00a      	b.n	800e22c <pcb_new+0xbc>
      break;
 800e216:	bf00      	nop
 800e218:	e000      	b.n	800e21c <pcb_new+0xac>
      break;
 800e21a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	685b      	ldr	r3, [r3, #4]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d102      	bne.n	800e22c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	22ff      	movs	r2, #255	; 0xff
 800e22a:	711a      	strb	r2, [r3, #4]
  }
}
 800e22c:	3714      	adds	r7, #20
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd90      	pop	{r4, r7, pc}
 800e232:	bf00      	nop
 800e234:	0801d214 	.word	0x0801d214
 800e238:	0801d3f8 	.word	0x0801d3f8
 800e23c:	0801d258 	.word	0x0801d258
 800e240:	0800dbfd 	.word	0x0800dbfd

0800e244 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b084      	sub	sp, #16
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	2200      	movs	r2, #0
 800e254:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	685b      	ldr	r3, [r3, #4]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d102      	bne.n	800e266 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800e260:	68f8      	ldr	r0, [r7, #12]
 800e262:	f7ff ff85 	bl	800e170 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800e266:	bf00      	nop
 800e268:	3710      	adds	r7, #16
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}
	...

0800e270 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b086      	sub	sp, #24
 800e274:	af00      	add	r7, sp, #0
 800e276:	4603      	mov	r3, r0
 800e278:	6039      	str	r1, [r7, #0]
 800e27a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800e27c:	2300      	movs	r3, #0
 800e27e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800e280:	2007      	movs	r0, #7
 800e282:	f003 f8a5 	bl	80113d0 <memp_malloc>
 800e286:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d101      	bne.n	800e292 <netconn_alloc+0x22>
    return NULL;
 800e28e:	2300      	movs	r3, #0
 800e290:	e052      	b.n	800e338 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2200      	movs	r2, #0
 800e296:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	79fa      	ldrb	r2, [r7, #7]
 800e29c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800e2a4:	79fb      	ldrb	r3, [r7, #7]
 800e2a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e2aa:	2b10      	cmp	r3, #16
 800e2ac:	d004      	beq.n	800e2b8 <netconn_alloc+0x48>
 800e2ae:	2b20      	cmp	r3, #32
 800e2b0:	d105      	bne.n	800e2be <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800e2b2:	2306      	movs	r3, #6
 800e2b4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800e2b6:	e00a      	b.n	800e2ce <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800e2b8:	2306      	movs	r3, #6
 800e2ba:	617b      	str	r3, [r7, #20]
      break;
 800e2bc:	e007      	b.n	800e2ce <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800e2be:	4b20      	ldr	r3, [pc, #128]	; (800e340 <netconn_alloc+0xd0>)
 800e2c0:	f240 22e5 	movw	r2, #741	; 0x2e5
 800e2c4:	491f      	ldr	r1, [pc, #124]	; (800e344 <netconn_alloc+0xd4>)
 800e2c6:	4820      	ldr	r0, [pc, #128]	; (800e348 <netconn_alloc+0xd8>)
 800e2c8:	f00d fb64 	bl	801b994 <iprintf>
      goto free_and_return;
 800e2cc:	e02f      	b.n	800e32e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	3310      	adds	r3, #16
 800e2d2:	6979      	ldr	r1, [r7, #20]
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f00d f95d 	bl	801b594 <sys_mbox_new>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d125      	bne.n	800e32c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	330c      	adds	r3, #12
 800e2e4:	2100      	movs	r1, #0
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f00d fa00 	bl	801b6ec <sys_sem_new>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d005      	beq.n	800e2fe <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	3310      	adds	r3, #16
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f00d f966 	bl	801b5c8 <sys_mbox_free>
    goto free_and_return;
 800e2fc:	e017      	b.n	800e32e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	3314      	adds	r3, #20
 800e302:	4618      	mov	r0, r3
 800e304:	f00d f9e5 	bl	801b6d2 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	2200      	movs	r2, #0
 800e30c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	f04f 32ff 	mov.w	r2, #4294967295
 800e314:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	683a      	ldr	r2, [r7, #0]
 800e31a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	2200      	movs	r2, #0
 800e320:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	7cfa      	ldrb	r2, [r7, #19]
 800e326:	771a      	strb	r2, [r3, #28]
  return conn;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	e005      	b.n	800e338 <netconn_alloc+0xc8>
    goto free_and_return;
 800e32c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800e32e:	68f9      	ldr	r1, [r7, #12]
 800e330:	2007      	movs	r0, #7
 800e332:	f003 f8c3 	bl	80114bc <memp_free>
  return NULL;
 800e336:	2300      	movs	r3, #0
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3718      	adds	r7, #24
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}
 800e340:	0801d214 	.word	0x0801d214
 800e344:	0801d418 	.word	0x0801d418
 800e348:	0801d258 	.word	0x0801d258

0800e34c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b082      	sub	sp, #8
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	685b      	ldr	r3, [r3, #4]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d006      	beq.n	800e36a <netconn_free+0x1e>
 800e35c:	4b1b      	ldr	r3, [pc, #108]	; (800e3cc <netconn_free+0x80>)
 800e35e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e362:	491b      	ldr	r1, [pc, #108]	; (800e3d0 <netconn_free+0x84>)
 800e364:	481b      	ldr	r0, [pc, #108]	; (800e3d4 <netconn_free+0x88>)
 800e366:	f00d fb15 	bl	801b994 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	3310      	adds	r3, #16
 800e36e:	4618      	mov	r0, r3
 800e370:	f00d f99e 	bl	801b6b0 <sys_mbox_valid>
 800e374:	4603      	mov	r3, r0
 800e376:	2b00      	cmp	r3, #0
 800e378:	d006      	beq.n	800e388 <netconn_free+0x3c>
 800e37a:	4b14      	ldr	r3, [pc, #80]	; (800e3cc <netconn_free+0x80>)
 800e37c:	f240 3223 	movw	r2, #803	; 0x323
 800e380:	4915      	ldr	r1, [pc, #84]	; (800e3d8 <netconn_free+0x8c>)
 800e382:	4814      	ldr	r0, [pc, #80]	; (800e3d4 <netconn_free+0x88>)
 800e384:	f00d fb06 	bl	801b994 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	3314      	adds	r3, #20
 800e38c:	4618      	mov	r0, r3
 800e38e:	f00d f98f 	bl	801b6b0 <sys_mbox_valid>
 800e392:	4603      	mov	r3, r0
 800e394:	2b00      	cmp	r3, #0
 800e396:	d006      	beq.n	800e3a6 <netconn_free+0x5a>
 800e398:	4b0c      	ldr	r3, [pc, #48]	; (800e3cc <netconn_free+0x80>)
 800e39a:	f240 3226 	movw	r2, #806	; 0x326
 800e39e:	490f      	ldr	r1, [pc, #60]	; (800e3dc <netconn_free+0x90>)
 800e3a0:	480c      	ldr	r0, [pc, #48]	; (800e3d4 <netconn_free+0x88>)
 800e3a2:	f00d faf7 	bl	801b994 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	330c      	adds	r3, #12
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f00d fa01 	bl	801b7b2 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	330c      	adds	r3, #12
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f00d fa1a 	bl	801b7ee <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800e3ba:	6879      	ldr	r1, [r7, #4]
 800e3bc:	2007      	movs	r0, #7
 800e3be:	f003 f87d 	bl	80114bc <memp_free>
}
 800e3c2:	bf00      	nop
 800e3c4:	3708      	adds	r7, #8
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}
 800e3ca:	bf00      	nop
 800e3cc:	0801d214 	.word	0x0801d214
 800e3d0:	0801d440 	.word	0x0801d440
 800e3d4:	0801d258 	.word	0x0801d258
 800e3d8:	0801d470 	.word	0x0801d470
 800e3dc:	0801d4ac 	.word	0x0801d4ac

0800e3e0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b086      	sub	sp, #24
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	3310      	adds	r3, #16
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f00d f95f 	bl	801b6b0 <sys_mbox_valid>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d02f      	beq.n	800e458 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800e3f8:	e018      	b.n	800e42c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	781b      	ldrb	r3, [r3, #0]
 800e3fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e402:	2b10      	cmp	r3, #16
 800e404:	d10e      	bne.n	800e424 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800e406:	693b      	ldr	r3, [r7, #16]
 800e408:	f107 020f 	add.w	r2, r7, #15
 800e40c:	4611      	mov	r1, r2
 800e40e:	4618      	mov	r0, r3
 800e410:	f7ff fbba 	bl	800db88 <lwip_netconn_is_err_msg>
 800e414:	4603      	mov	r3, r0
 800e416:	2b00      	cmp	r3, #0
 800e418:	d108      	bne.n	800e42c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800e41a:	693b      	ldr	r3, [r7, #16]
 800e41c:	4618      	mov	r0, r3
 800e41e:	f003 ff23 	bl	8012268 <pbuf_free>
 800e422:	e003      	b.n	800e42c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	4618      	mov	r0, r3
 800e428:	f000 fe12 	bl	800f050 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	3310      	adds	r3, #16
 800e430:	f107 0210 	add.w	r2, r7, #16
 800e434:	4611      	mov	r1, r2
 800e436:	4618      	mov	r0, r3
 800e438:	f00d f923 	bl	801b682 <sys_arch_mbox_tryfetch>
 800e43c:	4603      	mov	r3, r0
 800e43e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e442:	d1da      	bne.n	800e3fa <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	3310      	adds	r3, #16
 800e448:	4618      	mov	r0, r3
 800e44a:	f00d f8bd 	bl	801b5c8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	3310      	adds	r3, #16
 800e452:	4618      	mov	r0, r3
 800e454:	f00d f93d 	bl	801b6d2 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	3314      	adds	r3, #20
 800e45c:	4618      	mov	r0, r3
 800e45e:	f00d f927 	bl	801b6b0 <sys_mbox_valid>
 800e462:	4603      	mov	r3, r0
 800e464:	2b00      	cmp	r3, #0
 800e466:	d034      	beq.n	800e4d2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800e468:	e01d      	b.n	800e4a6 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800e46a:	693b      	ldr	r3, [r7, #16]
 800e46c:	f107 020e 	add.w	r2, r7, #14
 800e470:	4611      	mov	r1, r2
 800e472:	4618      	mov	r0, r3
 800e474:	f7ff fb88 	bl	800db88 <lwip_netconn_is_err_msg>
 800e478:	4603      	mov	r3, r0
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d113      	bne.n	800e4a6 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800e482:	6978      	ldr	r0, [r7, #20]
 800e484:	f7ff ffac 	bl	800e3e0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	685b      	ldr	r3, [r3, #4]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d007      	beq.n	800e4a0 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800e490:	697b      	ldr	r3, [r7, #20]
 800e492:	685b      	ldr	r3, [r3, #4]
 800e494:	4618      	mov	r0, r3
 800e496:	f004 fcd7 	bl	8012e48 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	2200      	movs	r2, #0
 800e49e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800e4a0:	6978      	ldr	r0, [r7, #20]
 800e4a2:	f7ff ff53 	bl	800e34c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	3314      	adds	r3, #20
 800e4aa:	f107 0210 	add.w	r2, r7, #16
 800e4ae:	4611      	mov	r1, r2
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f00d f8e6 	bl	801b682 <sys_arch_mbox_tryfetch>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4bc:	d1d5      	bne.n	800e46a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	3314      	adds	r3, #20
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f00d f880 	bl	801b5c8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	3314      	adds	r3, #20
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f00d f900 	bl	801b6d2 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800e4d2:	bf00      	nop
 800e4d4:	3718      	adds	r7, #24
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}
	...

0800e4dc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b086      	sub	sp, #24
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
 800e4e4:	460b      	mov	r3, r1
 800e4e6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d106      	bne.n	800e500 <lwip_netconn_do_close_internal+0x24>
 800e4f2:	4b87      	ldr	r3, [pc, #540]	; (800e710 <lwip_netconn_do_close_internal+0x234>)
 800e4f4:	f240 32a2 	movw	r2, #930	; 0x3a2
 800e4f8:	4986      	ldr	r1, [pc, #536]	; (800e714 <lwip_netconn_do_close_internal+0x238>)
 800e4fa:	4887      	ldr	r0, [pc, #540]	; (800e718 <lwip_netconn_do_close_internal+0x23c>)
 800e4fc:	f00d fa4a 	bl	801b994 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	781b      	ldrb	r3, [r3, #0]
 800e504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e508:	2b10      	cmp	r3, #16
 800e50a:	d006      	beq.n	800e51a <lwip_netconn_do_close_internal+0x3e>
 800e50c:	4b80      	ldr	r3, [pc, #512]	; (800e710 <lwip_netconn_do_close_internal+0x234>)
 800e50e:	f240 32a3 	movw	r2, #931	; 0x3a3
 800e512:	4982      	ldr	r1, [pc, #520]	; (800e71c <lwip_netconn_do_close_internal+0x240>)
 800e514:	4880      	ldr	r0, [pc, #512]	; (800e718 <lwip_netconn_do_close_internal+0x23c>)
 800e516:	f00d fa3d 	bl	801b994 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	785b      	ldrb	r3, [r3, #1]
 800e51e:	2b04      	cmp	r3, #4
 800e520:	d006      	beq.n	800e530 <lwip_netconn_do_close_internal+0x54>
 800e522:	4b7b      	ldr	r3, [pc, #492]	; (800e710 <lwip_netconn_do_close_internal+0x234>)
 800e524:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800e528:	497d      	ldr	r1, [pc, #500]	; (800e720 <lwip_netconn_do_close_internal+0x244>)
 800e52a:	487b      	ldr	r0, [pc, #492]	; (800e718 <lwip_netconn_do_close_internal+0x23c>)
 800e52c:	f00d fa32 	bl	801b994 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	685b      	ldr	r3, [r3, #4]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d106      	bne.n	800e546 <lwip_netconn_do_close_internal+0x6a>
 800e538:	4b75      	ldr	r3, [pc, #468]	; (800e710 <lwip_netconn_do_close_internal+0x234>)
 800e53a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800e53e:	4979      	ldr	r1, [pc, #484]	; (800e724 <lwip_netconn_do_close_internal+0x248>)
 800e540:	4875      	ldr	r0, [pc, #468]	; (800e718 <lwip_netconn_do_close_internal+0x23c>)
 800e542:	f00d fa27 	bl	801b994 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6a1b      	ldr	r3, [r3, #32]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d106      	bne.n	800e55c <lwip_netconn_do_close_internal+0x80>
 800e54e:	4b70      	ldr	r3, [pc, #448]	; (800e710 <lwip_netconn_do_close_internal+0x234>)
 800e550:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e554:	4974      	ldr	r1, [pc, #464]	; (800e728 <lwip_netconn_do_close_internal+0x24c>)
 800e556:	4870      	ldr	r0, [pc, #448]	; (800e718 <lwip_netconn_do_close_internal+0x23c>)
 800e558:	f00d fa1c 	bl	801b994 <iprintf>

  tpcb = conn->pcb.tcp;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6a1b      	ldr	r3, [r3, #32]
 800e566:	7a1b      	ldrb	r3, [r3, #8]
 800e568:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800e56a:	7bfb      	ldrb	r3, [r7, #15]
 800e56c:	f003 0301 	and.w	r3, r3, #1
 800e570:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800e572:	7bfb      	ldrb	r3, [r7, #15]
 800e574:	f003 0302 	and.w	r3, r3, #2
 800e578:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800e57a:	7bfb      	ldrb	r3, [r7, #15]
 800e57c:	2b03      	cmp	r3, #3
 800e57e:	d102      	bne.n	800e586 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800e580:	2301      	movs	r3, #1
 800e582:	75bb      	strb	r3, [r7, #22]
 800e584:	e01f      	b.n	800e5c6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800e586:	7bbb      	ldrb	r3, [r7, #14]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d00e      	beq.n	800e5aa <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800e590:	2b05      	cmp	r3, #5
 800e592:	d007      	beq.n	800e5a4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800e594:	693b      	ldr	r3, [r7, #16]
 800e596:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800e598:	2b06      	cmp	r3, #6
 800e59a:	d003      	beq.n	800e5a4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800e5a0:	2b08      	cmp	r3, #8
 800e5a2:	d102      	bne.n	800e5aa <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	75bb      	strb	r3, [r7, #22]
 800e5a8:	e00d      	b.n	800e5c6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800e5aa:	7b7b      	ldrb	r3, [r7, #13]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d008      	beq.n	800e5c2 <lwip_netconn_do_close_internal+0xe6>
 800e5b0:	693b      	ldr	r3, [r7, #16]
 800e5b2:	8b5b      	ldrh	r3, [r3, #26]
 800e5b4:	f003 0310 	and.w	r3, r3, #16
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d002      	beq.n	800e5c2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800e5bc:	2301      	movs	r3, #1
 800e5be:	75bb      	strb	r3, [r7, #22]
 800e5c0:	e001      	b.n	800e5c6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800e5c6:	7dbb      	ldrb	r3, [r7, #22]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d003      	beq.n	800e5d4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800e5cc:	2100      	movs	r1, #0
 800e5ce:	6938      	ldr	r0, [r7, #16]
 800e5d0:	f005 fbfe 	bl	8013dd0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	7d1b      	ldrb	r3, [r3, #20]
 800e5d8:	2b01      	cmp	r3, #1
 800e5da:	d104      	bne.n	800e5e6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800e5dc:	2100      	movs	r1, #0
 800e5de:	6938      	ldr	r0, [r7, #16]
 800e5e0:	f005 fc6e 	bl	8013ec0 <tcp_accept>
 800e5e4:	e01d      	b.n	800e622 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800e5e6:	7bbb      	ldrb	r3, [r7, #14]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d007      	beq.n	800e5fc <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800e5ec:	2100      	movs	r1, #0
 800e5ee:	6938      	ldr	r0, [r7, #16]
 800e5f0:	f005 fc00 	bl	8013df4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800e5f4:	2100      	movs	r1, #0
 800e5f6:	6938      	ldr	r0, [r7, #16]
 800e5f8:	f005 fc62 	bl	8013ec0 <tcp_accept>
    }
    if (shut_tx) {
 800e5fc:	7b7b      	ldrb	r3, [r7, #13]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d003      	beq.n	800e60a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800e602:	2100      	movs	r1, #0
 800e604:	6938      	ldr	r0, [r7, #16]
 800e606:	f005 fc17 	bl	8013e38 <tcp_sent>
    }
    if (shut_close) {
 800e60a:	7dbb      	ldrb	r3, [r7, #22]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d008      	beq.n	800e622 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800e610:	2200      	movs	r2, #0
 800e612:	2100      	movs	r1, #0
 800e614:	6938      	ldr	r0, [r7, #16]
 800e616:	f005 fc6b 	bl	8013ef0 <tcp_poll>
      tcp_err(tpcb, NULL);
 800e61a:	2100      	movs	r1, #0
 800e61c:	6938      	ldr	r0, [r7, #16]
 800e61e:	f005 fc2d 	bl	8013e7c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800e622:	7dbb      	ldrb	r3, [r7, #22]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d005      	beq.n	800e634 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800e628:	6938      	ldr	r0, [r7, #16]
 800e62a:	f004 fac7 	bl	8012bbc <tcp_close>
 800e62e:	4603      	mov	r3, r0
 800e630:	75fb      	strb	r3, [r7, #23]
 800e632:	e007      	b.n	800e644 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800e634:	7bbb      	ldrb	r3, [r7, #14]
 800e636:	7b7a      	ldrb	r2, [r7, #13]
 800e638:	4619      	mov	r1, r3
 800e63a:	6938      	ldr	r0, [r7, #16]
 800e63c:	f004 faea 	bl	8012c14 <tcp_shutdown>
 800e640:	4603      	mov	r3, r0
 800e642:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800e644:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d102      	bne.n	800e652 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800e64c:	2301      	movs	r3, #1
 800e64e:	757b      	strb	r3, [r7, #21]
 800e650:	e016      	b.n	800e680 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800e652:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e65a:	d10f      	bne.n	800e67c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6a1b      	ldr	r3, [r3, #32]
 800e660:	7a5b      	ldrb	r3, [r3, #9]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d10c      	bne.n	800e680 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800e666:	2301      	movs	r3, #1
 800e668:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800e66a:	7dbb      	ldrb	r3, [r7, #22]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d007      	beq.n	800e680 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800e670:	6938      	ldr	r0, [r7, #16]
 800e672:	f004 fbe9 	bl	8012e48 <tcp_abort>
          err = ERR_OK;
 800e676:	2300      	movs	r3, #0
 800e678:	75fb      	strb	r3, [r7, #23]
 800e67a:	e001      	b.n	800e680 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800e67c:	2301      	movs	r3, #1
 800e67e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800e680:	7d7b      	ldrb	r3, [r7, #21]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d052      	beq.n	800e72c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6a1b      	ldr	r3, [r3, #32]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	330c      	adds	r3, #12
 800e68e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	6a1b      	ldr	r3, [r3, #32]
 800e694:	7dfa      	ldrb	r2, [r7, #23]
 800e696:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2200      	movs	r2, #0
 800e69c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800e6a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d129      	bne.n	800e700 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800e6ac:	7dbb      	ldrb	r3, [r7, #22]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d00c      	beq.n	800e6cc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d005      	beq.n	800e6cc <lwip_netconn_do_close_internal+0x1f0>
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	2104      	movs	r1, #4
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	4798      	blx	r3
      }
      if (shut_rx) {
 800e6cc:	7bbb      	ldrb	r3, [r7, #14]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d009      	beq.n	800e6e6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d005      	beq.n	800e6e6 <lwip_netconn_do_close_internal+0x20a>
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6de:	2200      	movs	r2, #0
 800e6e0:	2100      	movs	r1, #0
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	4798      	blx	r3
      }
      if (shut_tx) {
 800e6e6:	7b7b      	ldrb	r3, [r7, #13]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d009      	beq.n	800e700 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d005      	beq.n	800e700 <lwip_netconn_do_close_internal+0x224>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	2102      	movs	r1, #2
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e700:	78fb      	ldrb	r3, [r7, #3]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d002      	beq.n	800e70c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800e706:	68b8      	ldr	r0, [r7, #8]
 800e708:	f00d f846 	bl	801b798 <sys_sem_signal>
    }
    return ERR_OK;
 800e70c:	2300      	movs	r3, #0
 800e70e:	e03c      	b.n	800e78a <lwip_netconn_do_close_internal+0x2ae>
 800e710:	0801d214 	.word	0x0801d214
 800e714:	0801d4e8 	.word	0x0801d4e8
 800e718:	0801d258 	.word	0x0801d258
 800e71c:	0801d4f8 	.word	0x0801d4f8
 800e720:	0801d518 	.word	0x0801d518
 800e724:	0801d53c 	.word	0x0801d53c
 800e728:	0801d37c 	.word	0x0801d37c
  }
  if (!close_finished) {
 800e72c:	7d7b      	ldrb	r3, [r7, #21]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d11e      	bne.n	800e770 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	7d1b      	ldrb	r3, [r3, #20]
 800e736:	2b01      	cmp	r3, #1
 800e738:	d106      	bne.n	800e748 <lwip_netconn_do_close_internal+0x26c>
 800e73a:	4b16      	ldr	r3, [pc, #88]	; (800e794 <lwip_netconn_do_close_internal+0x2b8>)
 800e73c:	f240 4241 	movw	r2, #1089	; 0x441
 800e740:	4915      	ldr	r1, [pc, #84]	; (800e798 <lwip_netconn_do_close_internal+0x2bc>)
 800e742:	4816      	ldr	r0, [pc, #88]	; (800e79c <lwip_netconn_do_close_internal+0x2c0>)
 800e744:	f00d f926 	bl	801b994 <iprintf>
    if (shut_tx) {
 800e748:	7b7b      	ldrb	r3, [r7, #13]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d003      	beq.n	800e756 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800e74e:	4914      	ldr	r1, [pc, #80]	; (800e7a0 <lwip_netconn_do_close_internal+0x2c4>)
 800e750:	6938      	ldr	r0, [r7, #16]
 800e752:	f005 fb71 	bl	8013e38 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800e756:	2201      	movs	r2, #1
 800e758:	4912      	ldr	r1, [pc, #72]	; (800e7a4 <lwip_netconn_do_close_internal+0x2c8>)
 800e75a:	6938      	ldr	r0, [r7, #16]
 800e75c:	f005 fbc8 	bl	8013ef0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800e760:	4911      	ldr	r1, [pc, #68]	; (800e7a8 <lwip_netconn_do_close_internal+0x2cc>)
 800e762:	6938      	ldr	r0, [r7, #16]
 800e764:	f005 fb8a 	bl	8013e7c <tcp_err>
    tcp_arg(tpcb, conn);
 800e768:	6879      	ldr	r1, [r7, #4]
 800e76a:	6938      	ldr	r0, [r7, #16]
 800e76c:	f005 fb30 	bl	8013dd0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800e770:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d106      	bne.n	800e786 <lwip_netconn_do_close_internal+0x2aa>
 800e778:	4b06      	ldr	r3, [pc, #24]	; (800e794 <lwip_netconn_do_close_internal+0x2b8>)
 800e77a:	f240 424d 	movw	r2, #1101	; 0x44d
 800e77e:	490b      	ldr	r1, [pc, #44]	; (800e7ac <lwip_netconn_do_close_internal+0x2d0>)
 800e780:	4806      	ldr	r0, [pc, #24]	; (800e79c <lwip_netconn_do_close_internal+0x2c0>)
 800e782:	f00d f907 	bl	801b994 <iprintf>
  return err;
 800e786:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	3718      	adds	r7, #24
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}
 800e792:	bf00      	nop
 800e794:	0801d214 	.word	0x0801d214
 800e798:	0801d550 	.word	0x0801d550
 800e79c:	0801d258 	.word	0x0801d258
 800e7a0:	0800decd 	.word	0x0800decd
 800e7a4:	0800de05 	.word	0x0800de05
 800e7a8:	0800df75 	.word	0x0800df75
 800e7ac:	0801d574 	.word	0x0801d574

0800e7b0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b084      	sub	sp, #16
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	785b      	ldrb	r3, [r3, #1]
 800e7c2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800e7c4:	7afb      	ldrb	r3, [r7, #11]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d00d      	beq.n	800e7e6 <lwip_netconn_do_delconn+0x36>
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	781b      	ldrb	r3, [r3, #0]
 800e7d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e7d4:	2b10      	cmp	r3, #16
 800e7d6:	d006      	beq.n	800e7e6 <lwip_netconn_do_delconn+0x36>
 800e7d8:	4b60      	ldr	r3, [pc, #384]	; (800e95c <lwip_netconn_do_delconn+0x1ac>)
 800e7da:	f240 425e 	movw	r2, #1118	; 0x45e
 800e7de:	4960      	ldr	r1, [pc, #384]	; (800e960 <lwip_netconn_do_delconn+0x1b0>)
 800e7e0:	4860      	ldr	r0, [pc, #384]	; (800e964 <lwip_netconn_do_delconn+0x1b4>)
 800e7e2:	f00d f8d7 	bl	801b994 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800e7e6:	7afb      	ldrb	r3, [r7, #11]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d005      	beq.n	800e7f8 <lwip_netconn_do_delconn+0x48>
 800e7ec:	7afb      	ldrb	r3, [r7, #11]
 800e7ee:	2b02      	cmp	r3, #2
 800e7f0:	d002      	beq.n	800e7f8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800e7f2:	7afb      	ldrb	r3, [r7, #11]
 800e7f4:	2b03      	cmp	r3, #3
 800e7f6:	d109      	bne.n	800e80c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800e7f8:	7afb      	ldrb	r3, [r7, #11]
 800e7fa:	2b03      	cmp	r3, #3
 800e7fc:	d10a      	bne.n	800e814 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	7f1b      	ldrb	r3, [r3, #28]
 800e804:	f003 0304 	and.w	r3, r3, #4
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d103      	bne.n	800e814 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	22fb      	movs	r2, #251	; 0xfb
 800e810:	711a      	strb	r2, [r3, #4]
 800e812:	e097      	b.n	800e944 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800e814:	7afb      	ldrb	r3, [r7, #11]
 800e816:	2b03      	cmp	r3, #3
 800e818:	d10d      	bne.n	800e836 <lwip_netconn_do_delconn+0x86>
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	7f1b      	ldrb	r3, [r3, #28]
 800e820:	f003 0304 	and.w	r3, r3, #4
 800e824:	2b00      	cmp	r3, #0
 800e826:	d106      	bne.n	800e836 <lwip_netconn_do_delconn+0x86>
 800e828:	4b4c      	ldr	r3, [pc, #304]	; (800e95c <lwip_netconn_do_delconn+0x1ac>)
 800e82a:	f240 427a 	movw	r2, #1146	; 0x47a
 800e82e:	494e      	ldr	r1, [pc, #312]	; (800e968 <lwip_netconn_do_delconn+0x1b8>)
 800e830:	484c      	ldr	r0, [pc, #304]	; (800e964 <lwip_netconn_do_delconn+0x1b4>)
 800e832:	f00d f8af 	bl	801b994 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	2200      	movs	r2, #0
 800e83a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	4618      	mov	r0, r3
 800e842:	f7ff fdcd 	bl	800e3e0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	685b      	ldr	r3, [r3, #4]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d05f      	beq.n	800e910 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	781b      	ldrb	r3, [r3, #0]
 800e856:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e85a:	2b10      	cmp	r3, #16
 800e85c:	d00d      	beq.n	800e87a <lwip_netconn_do_delconn+0xca>
 800e85e:	2b20      	cmp	r3, #32
 800e860:	d151      	bne.n	800e906 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	685b      	ldr	r3, [r3, #4]
 800e868:	2200      	movs	r2, #0
 800e86a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	685b      	ldr	r3, [r3, #4]
 800e872:	4618      	mov	r0, r3
 800e874:	f00a fb32 	bl	8018edc <udp_remove>
          break;
 800e878:	e046      	b.n	800e908 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	6a1b      	ldr	r3, [r3, #32]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d006      	beq.n	800e892 <lwip_netconn_do_delconn+0xe2>
 800e884:	4b35      	ldr	r3, [pc, #212]	; (800e95c <lwip_netconn_do_delconn+0x1ac>)
 800e886:	f240 4294 	movw	r2, #1172	; 0x494
 800e88a:	4938      	ldr	r1, [pc, #224]	; (800e96c <lwip_netconn_do_delconn+0x1bc>)
 800e88c:	4835      	ldr	r0, [pc, #212]	; (800e964 <lwip_netconn_do_delconn+0x1b4>)
 800e88e:	f00d f881 	bl	801b994 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	2204      	movs	r2, #4
 800e898:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	2203      	movs	r2, #3
 800e89e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	68fa      	ldr	r2, [r7, #12]
 800e8a6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	2100      	movs	r1, #0
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7ff fe14 	bl	800e4dc <lwip_netconn_do_close_internal>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d04b      	beq.n	800e952 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	785b      	ldrb	r3, [r3, #1]
 800e8c0:	2b04      	cmp	r3, #4
 800e8c2:	d006      	beq.n	800e8d2 <lwip_netconn_do_delconn+0x122>
 800e8c4:	4b25      	ldr	r3, [pc, #148]	; (800e95c <lwip_netconn_do_delconn+0x1ac>)
 800e8c6:	f240 429a 	movw	r2, #1178	; 0x49a
 800e8ca:	4929      	ldr	r1, [pc, #164]	; (800e970 <lwip_netconn_do_delconn+0x1c0>)
 800e8cc:	4825      	ldr	r0, [pc, #148]	; (800e964 <lwip_netconn_do_delconn+0x1b4>)
 800e8ce:	f00d f861 	bl	801b994 <iprintf>
            UNLOCK_TCPIP_CORE();
 800e8d2:	4828      	ldr	r0, [pc, #160]	; (800e974 <lwip_netconn_do_delconn+0x1c4>)
 800e8d4:	f00c ffc9 	bl	801b86a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	330c      	adds	r3, #12
 800e8de:	2100      	movs	r1, #0
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f00c ff28 	bl	801b736 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800e8e6:	4823      	ldr	r0, [pc, #140]	; (800e974 <lwip_netconn_do_delconn+0x1c4>)
 800e8e8:	f00c ffb0 	bl	801b84c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	785b      	ldrb	r3, [r3, #1]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d02d      	beq.n	800e952 <lwip_netconn_do_delconn+0x1a2>
 800e8f6:	4b19      	ldr	r3, [pc, #100]	; (800e95c <lwip_netconn_do_delconn+0x1ac>)
 800e8f8:	f240 429e 	movw	r2, #1182	; 0x49e
 800e8fc:	491c      	ldr	r1, [pc, #112]	; (800e970 <lwip_netconn_do_delconn+0x1c0>)
 800e8fe:	4819      	ldr	r0, [pc, #100]	; (800e964 <lwip_netconn_do_delconn+0x1b4>)
 800e900:	f00d f848 	bl	801b994 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800e904:	e025      	b.n	800e952 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800e906:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	2200      	movs	r2, #0
 800e90e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e916:	2b00      	cmp	r3, #0
 800e918:	d007      	beq.n	800e92a <lwip_netconn_do_delconn+0x17a>
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e920:	68fa      	ldr	r2, [r7, #12]
 800e922:	6810      	ldr	r0, [r2, #0]
 800e924:	2200      	movs	r2, #0
 800e926:	2100      	movs	r1, #0
 800e928:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e930:	2b00      	cmp	r3, #0
 800e932:	d007      	beq.n	800e944 <lwip_netconn_do_delconn+0x194>
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e93a:	68fa      	ldr	r2, [r7, #12]
 800e93c:	6810      	ldr	r0, [r2, #0]
 800e93e:	2200      	movs	r2, #0
 800e940:	2102      	movs	r1, #2
 800e942:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	330c      	adds	r3, #12
 800e94a:	4618      	mov	r0, r3
 800e94c:	f00c ff3e 	bl	801b7cc <sys_sem_valid>
 800e950:	e000      	b.n	800e954 <lwip_netconn_do_delconn+0x1a4>
          return;
 800e952:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800e954:	3710      	adds	r7, #16
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}
 800e95a:	bf00      	nop
 800e95c:	0801d214 	.word	0x0801d214
 800e960:	0801d584 	.word	0x0801d584
 800e964:	0801d258 	.word	0x0801d258
 800e968:	0801d598 	.word	0x0801d598
 800e96c:	0801d5b8 	.word	0x0801d5b8
 800e970:	0801d5d4 	.word	0x0801d5d4
 800e974:	2000d934 	.word	0x2000d934

0800e978 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b084      	sub	sp, #16
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	685b      	ldr	r3, [r3, #4]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d025      	beq.n	800e9da <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	781b      	ldrb	r3, [r3, #0]
 800e994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e998:	2b10      	cmp	r3, #16
 800e99a:	d00e      	beq.n	800e9ba <lwip_netconn_do_bind+0x42>
 800e99c:	2b20      	cmp	r3, #32
 800e99e:	d119      	bne.n	800e9d4 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800e9a0:	68bb      	ldr	r3, [r7, #8]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	6858      	ldr	r0, [r3, #4]
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	6899      	ldr	r1, [r3, #8]
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	899b      	ldrh	r3, [r3, #12]
 800e9ae:	461a      	mov	r2, r3
 800e9b0:	f00a f9ec 	bl	8018d8c <udp_bind>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	73fb      	strb	r3, [r7, #15]
        break;
 800e9b8:	e011      	b.n	800e9de <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	6858      	ldr	r0, [r3, #4]
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	6899      	ldr	r1, [r3, #8]
 800e9c4:	68bb      	ldr	r3, [r7, #8]
 800e9c6:	899b      	ldrh	r3, [r3, #12]
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	f004 fa49 	bl	8012e60 <tcp_bind>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	73fb      	strb	r3, [r7, #15]
        break;
 800e9d2:	e004      	b.n	800e9de <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800e9d4:	23fa      	movs	r3, #250	; 0xfa
 800e9d6:	73fb      	strb	r3, [r7, #15]
        break;
 800e9d8:	e001      	b.n	800e9de <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800e9da:	23fa      	movs	r3, #250	; 0xfa
 800e9dc:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	7bfa      	ldrb	r2, [r7, #15]
 800e9e2:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800e9e4:	bf00      	nop
 800e9e6:	3710      	adds	r7, #16
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}

0800e9ec <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b086      	sub	sp, #24
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800e9f8:	693b      	ldr	r3, [r7, #16]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d022      	beq.n	800ea4e <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	781b      	ldrb	r3, [r3, #0]
 800ea0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ea12:	2b10      	cmp	r3, #16
 800ea14:	d11b      	bne.n	800ea4e <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	689b      	ldr	r3, [r3, #8]
 800ea1a:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea22:	d202      	bcs.n	800ea2a <lwip_netconn_do_recv+0x3e>
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	b29b      	uxth	r3, r3
 800ea28:	e001      	b.n	800ea2e <lwip_netconn_do_recv+0x42>
 800ea2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ea2e:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	89fa      	ldrh	r2, [r7, #14]
 800ea38:	4611      	mov	r1, r2
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f004 fb02 	bl	8013044 <tcp_recved>
        remaining -= recved;
 800ea40:	89fb      	ldrh	r3, [r7, #14]
 800ea42:	697a      	ldr	r2, [r7, #20]
 800ea44:	1ad3      	subs	r3, r2, r3
 800ea46:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d1e6      	bne.n	800ea1c <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ea4e:	bf00      	nop
 800ea50:	3718      	adds	r7, #24
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}
	...

0800ea58 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b088      	sub	sp, #32
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	460b      	mov	r3, r1
 800ea62:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800ea64:	2300      	movs	r3, #0
 800ea66:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d106      	bne.n	800ea7c <lwip_netconn_do_writemore+0x24>
 800ea6e:	4b96      	ldr	r3, [pc, #600]	; (800ecc8 <lwip_netconn_do_writemore+0x270>)
 800ea70:	f240 6273 	movw	r2, #1651	; 0x673
 800ea74:	4995      	ldr	r1, [pc, #596]	; (800eccc <lwip_netconn_do_writemore+0x274>)
 800ea76:	4896      	ldr	r0, [pc, #600]	; (800ecd0 <lwip_netconn_do_writemore+0x278>)
 800ea78:	f00c ff8c 	bl	801b994 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	785b      	ldrb	r3, [r3, #1]
 800ea80:	2b01      	cmp	r3, #1
 800ea82:	d006      	beq.n	800ea92 <lwip_netconn_do_writemore+0x3a>
 800ea84:	4b90      	ldr	r3, [pc, #576]	; (800ecc8 <lwip_netconn_do_writemore+0x270>)
 800ea86:	f240 6274 	movw	r2, #1652	; 0x674
 800ea8a:	4992      	ldr	r1, [pc, #584]	; (800ecd4 <lwip_netconn_do_writemore+0x27c>)
 800ea8c:	4890      	ldr	r0, [pc, #576]	; (800ecd0 <lwip_netconn_do_writemore+0x278>)
 800ea8e:	f00c ff81 	bl	801b994 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6a1b      	ldr	r3, [r3, #32]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d106      	bne.n	800eaa8 <lwip_netconn_do_writemore+0x50>
 800ea9a:	4b8b      	ldr	r3, [pc, #556]	; (800ecc8 <lwip_netconn_do_writemore+0x270>)
 800ea9c:	f240 6275 	movw	r2, #1653	; 0x675
 800eaa0:	498d      	ldr	r1, [pc, #564]	; (800ecd8 <lwip_netconn_do_writemore+0x280>)
 800eaa2:	488b      	ldr	r0, [pc, #556]	; (800ecd0 <lwip_netconn_do_writemore+0x278>)
 800eaa4:	f00c ff76 	bl	801b994 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	685b      	ldr	r3, [r3, #4]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d106      	bne.n	800eabe <lwip_netconn_do_writemore+0x66>
 800eab0:	4b85      	ldr	r3, [pc, #532]	; (800ecc8 <lwip_netconn_do_writemore+0x270>)
 800eab2:	f240 6276 	movw	r2, #1654	; 0x676
 800eab6:	4989      	ldr	r1, [pc, #548]	; (800ecdc <lwip_netconn_do_writemore+0x284>)
 800eab8:	4885      	ldr	r0, [pc, #532]	; (800ecd0 <lwip_netconn_do_writemore+0x278>)
 800eaba:	f00c ff6b 	bl	801b994 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6a1b      	ldr	r3, [r3, #32]
 800eac2:	699a      	ldr	r2, [r3, #24]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6a1b      	ldr	r3, [r3, #32]
 800eac8:	695b      	ldr	r3, [r3, #20]
 800eaca:	429a      	cmp	r2, r3
 800eacc:	d306      	bcc.n	800eadc <lwip_netconn_do_writemore+0x84>
 800eace:	4b7e      	ldr	r3, [pc, #504]	; (800ecc8 <lwip_netconn_do_writemore+0x270>)
 800ead0:	f240 6277 	movw	r2, #1655	; 0x677
 800ead4:	4982      	ldr	r1, [pc, #520]	; (800ece0 <lwip_netconn_do_writemore+0x288>)
 800ead6:	487e      	ldr	r0, [pc, #504]	; (800ecd0 <lwip_netconn_do_writemore+0x278>)
 800ead8:	f00c ff5c 	bl	801b994 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	6a1b      	ldr	r3, [r3, #32]
 800eae0:	899b      	ldrh	r3, [r3, #12]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d106      	bne.n	800eaf4 <lwip_netconn_do_writemore+0x9c>
 800eae6:	4b78      	ldr	r3, [pc, #480]	; (800ecc8 <lwip_netconn_do_writemore+0x270>)
 800eae8:	f240 6279 	movw	r2, #1657	; 0x679
 800eaec:	497d      	ldr	r1, [pc, #500]	; (800ece4 <lwip_netconn_do_writemore+0x28c>)
 800eaee:	4878      	ldr	r0, [pc, #480]	; (800ecd0 <lwip_netconn_do_writemore+0x278>)
 800eaf0:	f00c ff50 	bl	801b994 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	6a1b      	ldr	r3, [r3, #32]
 800eaf8:	7f1b      	ldrb	r3, [r3, #28]
 800eafa:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	7f1b      	ldrb	r3, [r3, #28]
 800eb00:	f003 0302 	and.w	r3, r3, #2
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d104      	bne.n	800eb12 <lwip_netconn_do_writemore+0xba>
 800eb08:	7ebb      	ldrb	r3, [r7, #26]
 800eb0a:	f003 0304 	and.w	r3, r3, #4
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d001      	beq.n	800eb16 <lwip_netconn_do_writemore+0xbe>
 800eb12:	2301      	movs	r3, #1
 800eb14:	e000      	b.n	800eb18 <lwip_netconn_do_writemore+0xc0>
 800eb16:	2300      	movs	r3, #0
 800eb18:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6a1b      	ldr	r3, [r3, #32]
 800eb1e:	689b      	ldr	r3, [r3, #8]
 800eb20:	681a      	ldr	r2, [r3, #0]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6a1b      	ldr	r3, [r3, #32]
 800eb26:	691b      	ldr	r3, [r3, #16]
 800eb28:	4413      	add	r3, r2
 800eb2a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6a1b      	ldr	r3, [r3, #32]
 800eb30:	689b      	ldr	r3, [r3, #8]
 800eb32:	685a      	ldr	r2, [r3, #4]
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	6a1b      	ldr	r3, [r3, #32]
 800eb38:	691b      	ldr	r3, [r3, #16]
 800eb3a:	1ad3      	subs	r3, r2, r3
 800eb3c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb44:	d307      	bcc.n	800eb56 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800eb46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb4a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800eb4c:	7ebb      	ldrb	r3, [r7, #26]
 800eb4e:	f043 0302 	orr.w	r3, r3, #2
 800eb52:	76bb      	strb	r3, [r7, #26]
 800eb54:	e001      	b.n	800eb5a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800eb56:	693b      	ldr	r3, [r7, #16]
 800eb58:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800eb62:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800eb64:	89fa      	ldrh	r2, [r7, #14]
 800eb66:	8bbb      	ldrh	r3, [r7, #28]
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d216      	bcs.n	800eb9a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800eb6c:	89fb      	ldrh	r3, [r7, #14]
 800eb6e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800eb70:	7e3b      	ldrb	r3, [r7, #24]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d00d      	beq.n	800eb92 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800eb76:	8bbb      	ldrh	r3, [r7, #28]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d10e      	bne.n	800eb9a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6a1b      	ldr	r3, [r3, #32]
 800eb80:	699b      	ldr	r3, [r3, #24]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d102      	bne.n	800eb8c <lwip_netconn_do_writemore+0x134>
 800eb86:	f06f 0306 	mvn.w	r3, #6
 800eb8a:	e000      	b.n	800eb8e <lwip_netconn_do_writemore+0x136>
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800eb90:	e07d      	b.n	800ec8e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800eb92:	7ebb      	ldrb	r3, [r7, #26]
 800eb94:	f043 0302 	orr.w	r3, r3, #2
 800eb98:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6a1b      	ldr	r3, [r3, #32]
 800eb9e:	691a      	ldr	r2, [r3, #16]
 800eba0:	8bbb      	ldrh	r3, [r7, #28]
 800eba2:	441a      	add	r2, r3
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6a1b      	ldr	r3, [r3, #32]
 800eba8:	689b      	ldr	r3, [r3, #8]
 800ebaa:	685b      	ldr	r3, [r3, #4]
 800ebac:	429a      	cmp	r2, r3
 800ebae:	d906      	bls.n	800ebbe <lwip_netconn_do_writemore+0x166>
 800ebb0:	4b45      	ldr	r3, [pc, #276]	; (800ecc8 <lwip_netconn_do_writemore+0x270>)
 800ebb2:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800ebb6:	494c      	ldr	r1, [pc, #304]	; (800ece8 <lwip_netconn_do_writemore+0x290>)
 800ebb8:	4845      	ldr	r0, [pc, #276]	; (800ecd0 <lwip_netconn_do_writemore+0x278>)
 800ebba:	f00c feeb 	bl	801b994 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ebbe:	8bbb      	ldrh	r3, [r7, #28]
 800ebc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebc4:	4293      	cmp	r3, r2
 800ebc6:	d103      	bne.n	800ebd0 <lwip_netconn_do_writemore+0x178>
 800ebc8:	693b      	ldr	r3, [r7, #16]
 800ebca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebce:	d209      	bcs.n	800ebe4 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ebd4:	8bba      	ldrh	r2, [r7, #28]
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	d10b      	bne.n	800ebf2 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6a1b      	ldr	r3, [r3, #32]
 800ebde:	899b      	ldrh	r3, [r3, #12]
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	d906      	bls.n	800ebf2 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ebe8:	7ebb      	ldrb	r3, [r7, #26]
 800ebea:	f043 0302 	orr.w	r3, r3, #2
 800ebee:	76bb      	strb	r3, [r7, #26]
 800ebf0:	e001      	b.n	800ebf6 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6858      	ldr	r0, [r3, #4]
 800ebfa:	7ebb      	ldrb	r3, [r7, #26]
 800ebfc:	8bba      	ldrh	r2, [r7, #28]
 800ebfe:	6979      	ldr	r1, [r7, #20]
 800ec00:	f008 f828 	bl	8016c54 <tcp_write>
 800ec04:	4603      	mov	r3, r0
 800ec06:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800ec08:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d12c      	bne.n	800ec6a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	6a1b      	ldr	r3, [r3, #32]
 800ec14:	6999      	ldr	r1, [r3, #24]
 800ec16:	8bba      	ldrh	r2, [r7, #28]
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6a1b      	ldr	r3, [r3, #32]
 800ec1c:	440a      	add	r2, r1
 800ec1e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6a1b      	ldr	r3, [r3, #32]
 800ec24:	6919      	ldr	r1, [r3, #16]
 800ec26:	8bba      	ldrh	r2, [r7, #28]
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	6a1b      	ldr	r3, [r3, #32]
 800ec2c:	440a      	add	r2, r1
 800ec2e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	6a1b      	ldr	r3, [r3, #32]
 800ec34:	691a      	ldr	r2, [r3, #16]
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6a1b      	ldr	r3, [r3, #32]
 800ec3a:	689b      	ldr	r3, [r3, #8]
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	429a      	cmp	r2, r3
 800ec40:	d113      	bne.n	800ec6a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6a1b      	ldr	r3, [r3, #32]
 800ec46:	899a      	ldrh	r2, [r3, #12]
 800ec48:	3a01      	subs	r2, #1
 800ec4a:	b292      	uxth	r2, r2
 800ec4c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	6a1b      	ldr	r3, [r3, #32]
 800ec52:	899b      	ldrh	r3, [r3, #12]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d008      	beq.n	800ec6a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	6a1b      	ldr	r3, [r3, #32]
 800ec5c:	689a      	ldr	r2, [r3, #8]
 800ec5e:	3208      	adds	r2, #8
 800ec60:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6a1b      	ldr	r3, [r3, #32]
 800ec66:	2200      	movs	r2, #0
 800ec68:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800ec6a:	7e7b      	ldrb	r3, [r7, #25]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d004      	beq.n	800ec7a <lwip_netconn_do_writemore+0x222>
 800ec70:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	f43f af50 	beq.w	800eb1a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800ec7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d004      	beq.n	800ec8c <lwip_netconn_do_writemore+0x234>
 800ec82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ec86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec8a:	d146      	bne.n	800ed1a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800ec8c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800ec8e:	7e3b      	ldrb	r3, [r7, #24]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d02b      	beq.n	800ecec <lwip_netconn_do_writemore+0x294>
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	6a1b      	ldr	r3, [r3, #32]
 800ec98:	699a      	ldr	r2, [r3, #24]
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	6a1b      	ldr	r3, [r3, #32]
 800ec9e:	695b      	ldr	r3, [r3, #20]
 800eca0:	429a      	cmp	r2, r3
 800eca2:	d223      	bcs.n	800ecec <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d005      	beq.n	800ecb8 <lwip_netconn_do_writemore+0x260>
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	2103      	movs	r1, #3
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	7f1b      	ldrb	r3, [r3, #28]
 800ecbc:	f043 0310 	orr.w	r3, r3, #16
 800ecc0:	b2da      	uxtb	r2, r3
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	771a      	strb	r2, [r3, #28]
 800ecc6:	e028      	b.n	800ed1a <lwip_netconn_do_writemore+0x2c2>
 800ecc8:	0801d214 	.word	0x0801d214
 800eccc:	0801d36c 	.word	0x0801d36c
 800ecd0:	0801d258 	.word	0x0801d258
 800ecd4:	0801d674 	.word	0x0801d674
 800ecd8:	0801d37c 	.word	0x0801d37c
 800ecdc:	0801d694 	.word	0x0801d694
 800ece0:	0801d6ac 	.word	0x0801d6ac
 800ece4:	0801d6ec 	.word	0x0801d6ec
 800ece8:	0801d714 	.word	0x0801d714
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	685b      	ldr	r3, [r3, #4]
 800ecf0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ecf4:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ecf8:	d305      	bcc.n	800ed06 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ed02:	2b04      	cmp	r3, #4
 800ed04:	d909      	bls.n	800ed1a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d005      	beq.n	800ed1a <lwip_netconn_do_writemore+0x2c2>
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed12:	2200      	movs	r2, #0
 800ed14:	2103      	movs	r1, #3
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800ed1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d11d      	bne.n	800ed5e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6a1b      	ldr	r3, [r3, #32]
 800ed26:	699a      	ldr	r2, [r3, #24]
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	6a1b      	ldr	r3, [r3, #32]
 800ed2c:	695b      	ldr	r3, [r3, #20]
 800ed2e:	429a      	cmp	r2, r3
 800ed30:	d002      	beq.n	800ed38 <lwip_netconn_do_writemore+0x2e0>
 800ed32:	7e3b      	ldrb	r3, [r7, #24]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d001      	beq.n	800ed3c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800ed38:	2301      	movs	r3, #1
 800ed3a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	685b      	ldr	r3, [r3, #4]
 800ed40:	4618      	mov	r0, r3
 800ed42:	f008 fd71 	bl	8017828 <tcp_output>
 800ed46:	4603      	mov	r3, r0
 800ed48:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800ed4a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800ed4e:	f113 0f04 	cmn.w	r3, #4
 800ed52:	d12c      	bne.n	800edae <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ed54:	7b3b      	ldrb	r3, [r7, #12]
 800ed56:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ed58:	2301      	movs	r3, #1
 800ed5a:	76fb      	strb	r3, [r7, #27]
 800ed5c:	e027      	b.n	800edae <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800ed5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ed62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed66:	d120      	bne.n	800edaa <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	685b      	ldr	r3, [r3, #4]
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f008 fd5b 	bl	8017828 <tcp_output>
 800ed72:	4603      	mov	r3, r0
 800ed74:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800ed76:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800ed7a:	f113 0f04 	cmn.w	r3, #4
 800ed7e:	d104      	bne.n	800ed8a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ed80:	7b7b      	ldrb	r3, [r7, #13]
 800ed82:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ed84:	2301      	movs	r3, #1
 800ed86:	76fb      	strb	r3, [r7, #27]
 800ed88:	e011      	b.n	800edae <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800ed8a:	7e3b      	ldrb	r3, [r7, #24]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d00e      	beq.n	800edae <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	6a1b      	ldr	r3, [r3, #32]
 800ed94:	699b      	ldr	r3, [r3, #24]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d102      	bne.n	800eda0 <lwip_netconn_do_writemore+0x348>
 800ed9a:	f06f 0306 	mvn.w	r3, #6
 800ed9e:	e000      	b.n	800eda2 <lwip_netconn_do_writemore+0x34a>
 800eda0:	2300      	movs	r3, #0
 800eda2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800eda4:	2301      	movs	r3, #1
 800eda6:	76fb      	strb	r3, [r7, #27]
 800eda8:	e001      	b.n	800edae <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800edaa:	2301      	movs	r3, #1
 800edac:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800edae:	7efb      	ldrb	r3, [r7, #27]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d015      	beq.n	800ede0 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6a1b      	ldr	r3, [r3, #32]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	330c      	adds	r3, #12
 800edbc:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6a1b      	ldr	r3, [r3, #32]
 800edc2:	7ffa      	ldrb	r2, [r7, #31]
 800edc4:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2200      	movs	r2, #0
 800edca:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2200      	movs	r2, #0
 800edd0:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800edd2:	78fb      	ldrb	r3, [r7, #3]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d006      	beq.n	800ede6 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800edd8:	68b8      	ldr	r0, [r7, #8]
 800edda:	f00c fcdd 	bl	801b798 <sys_sem_signal>
 800edde:	e002      	b.n	800ede6 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800ede0:	f04f 33ff 	mov.w	r3, #4294967295
 800ede4:	e000      	b.n	800ede8 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800ede6:	2300      	movs	r3, #0
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3720      	adds	r7, #32
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	685b      	ldr	r3, [r3, #4]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d06b      	beq.n	800eede <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	7c1b      	ldrb	r3, [r3, #16]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d007      	beq.n	800ee1e <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	685a      	ldr	r2, [r3, #4]
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	689b      	ldr	r3, [r3, #8]
 800ee18:	6812      	ldr	r2, [r2, #0]
 800ee1a:	601a      	str	r2, [r3, #0]
 800ee1c:	e006      	b.n	800ee2c <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	685a      	ldr	r2, [r3, #4]
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	689b      	ldr	r3, [r3, #8]
 800ee28:	6852      	ldr	r2, [r2, #4]
 800ee2a:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	2200      	movs	r2, #0
 800ee30:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	781b      	ldrb	r3, [r3, #0]
 800ee38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ee3c:	2b10      	cmp	r3, #16
 800ee3e:	d021      	beq.n	800ee84 <lwip_netconn_do_getaddr+0x94>
 800ee40:	2b20      	cmp	r3, #32
 800ee42:	d144      	bne.n	800eece <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	7c1b      	ldrb	r3, [r3, #16]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d007      	beq.n	800ee5c <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	685a      	ldr	r2, [r3, #4]
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	68db      	ldr	r3, [r3, #12]
 800ee56:	8a52      	ldrh	r2, [r2, #18]
 800ee58:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800ee5a:	e044      	b.n	800eee6 <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	685b      	ldr	r3, [r3, #4]
 800ee62:	7c1b      	ldrb	r3, [r3, #16]
 800ee64:	f003 0304 	and.w	r3, r3, #4
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d103      	bne.n	800ee74 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	22f5      	movs	r2, #245	; 0xf5
 800ee70:	711a      	strb	r2, [r3, #4]
        break;
 800ee72:	e038      	b.n	800eee6 <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	685a      	ldr	r2, [r3, #4]
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	68db      	ldr	r3, [r3, #12]
 800ee7e:	8a92      	ldrh	r2, [r2, #20]
 800ee80:	801a      	strh	r2, [r3, #0]
        break;
 800ee82:	e030      	b.n	800eee6 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	7c1b      	ldrb	r3, [r3, #16]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d10f      	bne.n	800eeac <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	685b      	ldr	r3, [r3, #4]
 800ee92:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d005      	beq.n	800eea4 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	685b      	ldr	r3, [r3, #4]
 800ee9e:	7d1b      	ldrb	r3, [r3, #20]
 800eea0:	2b01      	cmp	r3, #1
 800eea2:	d103      	bne.n	800eeac <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	22f5      	movs	r2, #245	; 0xf5
 800eea8:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800eeaa:	e01c      	b.n	800eee6 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	7c1b      	ldrb	r3, [r3, #16]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d004      	beq.n	800eebe <lwip_netconn_do_getaddr+0xce>
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	685b      	ldr	r3, [r3, #4]
 800eeba:	8adb      	ldrh	r3, [r3, #22]
 800eebc:	e003      	b.n	800eec6 <lwip_netconn_do_getaddr+0xd6>
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	8b1b      	ldrh	r3, [r3, #24]
 800eec6:	68fa      	ldr	r2, [r7, #12]
 800eec8:	68d2      	ldr	r2, [r2, #12]
 800eeca:	8013      	strh	r3, [r2, #0]
        break;
 800eecc:	e00b      	b.n	800eee6 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800eece:	4b08      	ldr	r3, [pc, #32]	; (800eef0 <lwip_netconn_do_getaddr+0x100>)
 800eed0:	f240 727d 	movw	r2, #1917	; 0x77d
 800eed4:	4907      	ldr	r1, [pc, #28]	; (800eef4 <lwip_netconn_do_getaddr+0x104>)
 800eed6:	4808      	ldr	r0, [pc, #32]	; (800eef8 <lwip_netconn_do_getaddr+0x108>)
 800eed8:	f00c fd5c 	bl	801b994 <iprintf>
        break;
 800eedc:	e003      	b.n	800eee6 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	22f5      	movs	r2, #245	; 0xf5
 800eee2:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800eee4:	bf00      	nop
 800eee6:	bf00      	nop
 800eee8:	3710      	adds	r7, #16
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}
 800eeee:	bf00      	nop
 800eef0:	0801d214 	.word	0x0801d214
 800eef4:	0801d754 	.word	0x0801d754
 800eef8:	0801d258 	.word	0x0801d258

0800eefc <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b084      	sub	sp, #16
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	785b      	ldrb	r3, [r3, #1]
 800ef0e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	685b      	ldr	r3, [r3, #4]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d069      	beq.n	800efee <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800ef24:	2b10      	cmp	r3, #16
 800ef26:	d162      	bne.n	800efee <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800ef2c:	2b03      	cmp	r3, #3
 800ef2e:	d002      	beq.n	800ef36 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ef30:	7afb      	ldrb	r3, [r7, #11]
 800ef32:	2b02      	cmp	r3, #2
 800ef34:	d05b      	beq.n	800efee <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800ef36:	7afb      	ldrb	r3, [r7, #11]
 800ef38:	2b03      	cmp	r3, #3
 800ef3a:	d103      	bne.n	800ef44 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	22f5      	movs	r2, #245	; 0xf5
 800ef40:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ef42:	e059      	b.n	800eff8 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800ef44:	7afb      	ldrb	r3, [r7, #11]
 800ef46:	2b01      	cmp	r3, #1
 800ef48:	d103      	bne.n	800ef52 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	22fb      	movs	r2, #251	; 0xfb
 800ef4e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ef50:	e052      	b.n	800eff8 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	7a1b      	ldrb	r3, [r3, #8]
 800ef56:	f003 0301 	and.w	r3, r3, #1
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d004      	beq.n	800ef68 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	4618      	mov	r0, r3
 800ef64:	f7ff fa3c 	bl	800e3e0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	6a1b      	ldr	r3, [r3, #32]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d006      	beq.n	800ef80 <lwip_netconn_do_close+0x84>
 800ef72:	4b23      	ldr	r3, [pc, #140]	; (800f000 <lwip_netconn_do_close+0x104>)
 800ef74:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800ef78:	4922      	ldr	r1, [pc, #136]	; (800f004 <lwip_netconn_do_close+0x108>)
 800ef7a:	4823      	ldr	r0, [pc, #140]	; (800f008 <lwip_netconn_do_close+0x10c>)
 800ef7c:	f00c fd0a 	bl	801b994 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	2204      	movs	r2, #4
 800ef86:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	68fa      	ldr	r2, [r7, #12]
 800ef8e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	2100      	movs	r1, #0
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7ff faa0 	bl	800e4dc <lwip_netconn_do_close_internal>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d029      	beq.n	800eff6 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	785b      	ldrb	r3, [r3, #1]
 800efa8:	2b04      	cmp	r3, #4
 800efaa:	d006      	beq.n	800efba <lwip_netconn_do_close+0xbe>
 800efac:	4b14      	ldr	r3, [pc, #80]	; (800f000 <lwip_netconn_do_close+0x104>)
 800efae:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800efb2:	4916      	ldr	r1, [pc, #88]	; (800f00c <lwip_netconn_do_close+0x110>)
 800efb4:	4814      	ldr	r0, [pc, #80]	; (800f008 <lwip_netconn_do_close+0x10c>)
 800efb6:	f00c fced 	bl	801b994 <iprintf>
        UNLOCK_TCPIP_CORE();
 800efba:	4815      	ldr	r0, [pc, #84]	; (800f010 <lwip_netconn_do_close+0x114>)
 800efbc:	f00c fc55 	bl	801b86a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	330c      	adds	r3, #12
 800efc6:	2100      	movs	r1, #0
 800efc8:	4618      	mov	r0, r3
 800efca:	f00c fbb4 	bl	801b736 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800efce:	4810      	ldr	r0, [pc, #64]	; (800f010 <lwip_netconn_do_close+0x114>)
 800efd0:	f00c fc3c 	bl	801b84c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	785b      	ldrb	r3, [r3, #1]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d00b      	beq.n	800eff6 <lwip_netconn_do_close+0xfa>
 800efde:	4b08      	ldr	r3, [pc, #32]	; (800f000 <lwip_netconn_do_close+0x104>)
 800efe0:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800efe4:	4909      	ldr	r1, [pc, #36]	; (800f00c <lwip_netconn_do_close+0x110>)
 800efe6:	4808      	ldr	r0, [pc, #32]	; (800f008 <lwip_netconn_do_close+0x10c>)
 800efe8:	f00c fcd4 	bl	801b994 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800efec:	e003      	b.n	800eff6 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	22f5      	movs	r2, #245	; 0xf5
 800eff2:	711a      	strb	r2, [r3, #4]
 800eff4:	e000      	b.n	800eff8 <lwip_netconn_do_close+0xfc>
      return;
 800eff6:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800eff8:	3710      	adds	r7, #16
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}
 800effe:	bf00      	nop
 800f000:	0801d214 	.word	0x0801d214
 800f004:	0801d5b8 	.word	0x0801d5b8
 800f008:	0801d258 	.word	0x0801d258
 800f00c:	0801d5d4 	.word	0x0801d5d4
 800f010:	2000d934 	.word	0x2000d934

0800f014 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800f014:	b480      	push	{r7}
 800f016:	b083      	sub	sp, #12
 800f018:	af00      	add	r7, sp, #0
 800f01a:	4603      	mov	r3, r0
 800f01c:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800f01e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f022:	2b00      	cmp	r3, #0
 800f024:	dc04      	bgt.n	800f030 <err_to_errno+0x1c>
 800f026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f02a:	f113 0f10 	cmn.w	r3, #16
 800f02e:	da01      	bge.n	800f034 <err_to_errno+0x20>
    return EIO;
 800f030:	2305      	movs	r3, #5
 800f032:	e005      	b.n	800f040 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800f034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f038:	425b      	negs	r3, r3
 800f03a:	4a04      	ldr	r2, [pc, #16]	; (800f04c <err_to_errno+0x38>)
 800f03c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800f040:	4618      	mov	r0, r3
 800f042:	370c      	adds	r7, #12
 800f044:	46bd      	mov	sp, r7
 800f046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04a:	4770      	bx	lr
 800f04c:	08020660 	.word	0x08020660

0800f050 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b082      	sub	sp, #8
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d013      	beq.n	800f086 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d00b      	beq.n	800f07e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	4618      	mov	r0, r3
 800f06c:	f003 f8fc 	bl	8012268 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2200      	movs	r2, #0
 800f074:	605a      	str	r2, [r3, #4]
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	685a      	ldr	r2, [r3, #4]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800f07e:	6879      	ldr	r1, [r7, #4]
 800f080:	2006      	movs	r0, #6
 800f082:	f002 fa1b 	bl	80114bc <memp_free>
  }
}
 800f086:	bf00      	nop
 800f088:	3708      	adds	r7, #8
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}
	...

0800f090 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800f090:	b480      	push	{r7}
 800f092:	b085      	sub	sp, #20
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	db02      	blt.n	800f0a8 <tryget_socket_unconn_nouse+0x18>
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	2b03      	cmp	r3, #3
 800f0a6:	dd01      	ble.n	800f0ac <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	e003      	b.n	800f0b4 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	011b      	lsls	r3, r3, #4
 800f0b0:	4a03      	ldr	r2, [pc, #12]	; (800f0c0 <tryget_socket_unconn_nouse+0x30>)
 800f0b2:	4413      	add	r3, r2
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3714      	adds	r7, #20
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0be:	4770      	bx	lr
 800f0c0:	2000d8e4 	.word	0x2000d8e4

0800f0c4 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b084      	sub	sp, #16
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	f7ff ffdf 	bl	800f090 <tryget_socket_unconn_nouse>
 800f0d2:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
}
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	3710      	adds	r7, #16
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}

0800f0de <tryget_socket_unconn_locked>:

/* Like tryget_socket_unconn(), but called under SYS_ARCH_PROTECT lock. */
static struct lwip_sock *
tryget_socket_unconn_locked(int fd)
{
 800f0de:	b580      	push	{r7, lr}
 800f0e0:	b084      	sub	sp, #16
 800f0e2:	af00      	add	r7, sp, #0
 800f0e4:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f7ff ffd2 	bl	800f090 <tryget_socket_unconn_nouse>
 800f0ec:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used_locked(ret)) {
      return NULL;
    }
  }
  return ret;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	3710      	adds	r7, #16
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd80      	pop	{r7, pc}

0800f0f8 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b084      	sub	sp, #16
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f7ff ffdf 	bl	800f0c4 <tryget_socket_unconn>
 800f106:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d005      	beq.n	800f11a <tryget_socket+0x22>
    if (sock->conn) {
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d001      	beq.n	800f11a <tryget_socket+0x22>
      return sock;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	e000      	b.n	800f11c <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800f11a:	2300      	movs	r3, #0
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	3710      	adds	r7, #16
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}

0800f124 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b084      	sub	sp, #16
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f7ff ffe3 	bl	800f0f8 <tryget_socket>
 800f132:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d104      	bne.n	800f144 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800f13a:	4b05      	ldr	r3, [pc, #20]	; (800f150 <get_socket+0x2c>)
 800f13c:	2209      	movs	r2, #9
 800f13e:	601a      	str	r2, [r3, #0]
    return NULL;
 800f140:	2300      	movs	r3, #0
 800f142:	e000      	b.n	800f146 <get_socket+0x22>
  }
  return sock;
 800f144:	68fb      	ldr	r3, [r7, #12]
}
 800f146:	4618      	mov	r0, r3
 800f148:	3710      	adds	r7, #16
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}
 800f14e:	bf00      	nop
 800f150:	200111e8 	.word	0x200111e8

0800f154 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b084      	sub	sp, #16
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800f15e:	2300      	movs	r3, #0
 800f160:	60fb      	str	r3, [r7, #12]
 800f162:	e052      	b.n	800f20a <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800f164:	f00c fbae 	bl	801b8c4 <sys_arch_protect>
 800f168:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800f16a:	4a2c      	ldr	r2, [pc, #176]	; (800f21c <alloc_socket+0xc8>)
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	011b      	lsls	r3, r3, #4
 800f170:	4413      	add	r3, r2
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d142      	bne.n	800f1fe <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800f178:	4a28      	ldr	r2, [pc, #160]	; (800f21c <alloc_socket+0xc8>)
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	011b      	lsls	r3, r3, #4
 800f17e:	4413      	add	r3, r2
 800f180:	687a      	ldr	r2, [r7, #4]
 800f182:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800f184:	68b8      	ldr	r0, [r7, #8]
 800f186:	f00c fbab 	bl	801b8e0 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800f18a:	4a24      	ldr	r2, [pc, #144]	; (800f21c <alloc_socket+0xc8>)
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	011b      	lsls	r3, r3, #4
 800f190:	4413      	add	r3, r2
 800f192:	3304      	adds	r3, #4
 800f194:	2200      	movs	r2, #0
 800f196:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800f198:	4a20      	ldr	r2, [pc, #128]	; (800f21c <alloc_socket+0xc8>)
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	011b      	lsls	r3, r3, #4
 800f19e:	4413      	add	r3, r2
 800f1a0:	330e      	adds	r3, #14
 800f1a2:	781b      	ldrb	r3, [r3, #0]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d006      	beq.n	800f1b6 <alloc_socket+0x62>
 800f1a8:	4b1d      	ldr	r3, [pc, #116]	; (800f220 <alloc_socket+0xcc>)
 800f1aa:	f240 220e 	movw	r2, #526	; 0x20e
 800f1ae:	491d      	ldr	r1, [pc, #116]	; (800f224 <alloc_socket+0xd0>)
 800f1b0:	481d      	ldr	r0, [pc, #116]	; (800f228 <alloc_socket+0xd4>)
 800f1b2:	f00c fbef 	bl	801b994 <iprintf>
      sockets[i].rcvevent   = 0;
 800f1b6:	4a19      	ldr	r2, [pc, #100]	; (800f21c <alloc_socket+0xc8>)
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	011b      	lsls	r3, r3, #4
 800f1bc:	4413      	add	r3, r2
 800f1be:	3308      	adds	r3, #8
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	781b      	ldrb	r3, [r3, #0]
 800f1c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f1cc:	2b10      	cmp	r3, #16
 800f1ce:	d102      	bne.n	800f1d6 <alloc_socket+0x82>
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d001      	beq.n	800f1da <alloc_socket+0x86>
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	e000      	b.n	800f1dc <alloc_socket+0x88>
 800f1da:	2300      	movs	r3, #0
 800f1dc:	b299      	uxth	r1, r3
 800f1de:	4a0f      	ldr	r2, [pc, #60]	; (800f21c <alloc_socket+0xc8>)
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	011b      	lsls	r3, r3, #4
 800f1e4:	4413      	add	r3, r2
 800f1e6:	330a      	adds	r3, #10
 800f1e8:	460a      	mov	r2, r1
 800f1ea:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800f1ec:	4a0b      	ldr	r2, [pc, #44]	; (800f21c <alloc_socket+0xc8>)
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	011b      	lsls	r3, r3, #4
 800f1f2:	4413      	add	r3, r2
 800f1f4:	330c      	adds	r3, #12
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	e00a      	b.n	800f214 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800f1fe:	68b8      	ldr	r0, [r7, #8]
 800f200:	f00c fb6e 	bl	801b8e0 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	3301      	adds	r3, #1
 800f208:	60fb      	str	r3, [r7, #12]
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	2b03      	cmp	r3, #3
 800f20e:	dda9      	ble.n	800f164 <alloc_socket+0x10>
  }
  return -1;
 800f210:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f214:	4618      	mov	r0, r3
 800f216:	3710      	adds	r7, #16
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}
 800f21c:	2000d8e4 	.word	0x2000d8e4
 800f220:	0801d76c 	.word	0x0801d76c
 800f224:	0801d7a0 	.word	0x0801d7a0
 800f228:	0801d7c0 	.word	0x0801d7c0

0800f22c <lwip_bind>:
  return newsock;
}

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b08a      	sub	sp, #40	; 0x28
 800f230:	af00      	add	r7, sp, #0
 800f232:	60f8      	str	r0, [r7, #12]
 800f234:	60b9      	str	r1, [r7, #8]
 800f236:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800f238:	68f8      	ldr	r0, [r7, #12]
 800f23a:	f7ff ff73 	bl	800f124 <get_socket>
 800f23e:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800f240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f242:	2b00      	cmp	r3, #0
 800f244:	d102      	bne.n	800f24c <lwip_bind+0x20>
    return -1;
 800f246:	f04f 33ff 	mov.w	r3, #4294967295
 800f24a:	e051      	b.n	800f2f0 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2b10      	cmp	r3, #16
 800f250:	d108      	bne.n	800f264 <lwip_bind+0x38>
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	785b      	ldrb	r3, [r3, #1]
 800f256:	2b02      	cmp	r3, #2
 800f258:	d104      	bne.n	800f264 <lwip_bind+0x38>
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	f003 0303 	and.w	r3, r3, #3
 800f260:	2b00      	cmp	r3, #0
 800f262:	d014      	beq.n	800f28e <lwip_bind+0x62>
 800f264:	4b24      	ldr	r3, [pc, #144]	; (800f2f8 <lwip_bind+0xcc>)
 800f266:	f240 22e2 	movw	r2, #738	; 0x2e2
 800f26a:	4924      	ldr	r1, [pc, #144]	; (800f2fc <lwip_bind+0xd0>)
 800f26c:	4824      	ldr	r0, [pc, #144]	; (800f300 <lwip_bind+0xd4>)
 800f26e:	f00c fb91 	bl	801b994 <iprintf>
 800f272:	f06f 000f 	mvn.w	r0, #15
 800f276:	f7ff fecd 	bl	800f014 <err_to_errno>
 800f27a:	6178      	str	r0, [r7, #20]
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d002      	beq.n	800f288 <lwip_bind+0x5c>
 800f282:	4a20      	ldr	r2, [pc, #128]	; (800f304 <lwip_bind+0xd8>)
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	6013      	str	r3, [r2, #0]
 800f288:	f04f 33ff 	mov.w	r3, #4294967295
 800f28c:	e030      	b.n	800f2f0 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	685b      	ldr	r3, [r3, #4]
 800f292:	613b      	str	r3, [r7, #16]
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	885b      	ldrh	r3, [r3, #2]
 800f298:	4618      	mov	r0, r3
 800f29a:	f001 fbc1 	bl	8010a20 <lwip_htons>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800f2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f2a8:	f107 0110 	add.w	r1, r7, #16
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f7fe f9af 	bl	800d610 <netconn_bind>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 800f2b8:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d00e      	beq.n	800f2de <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800f2c0:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f7ff fea5 	bl	800f014 <err_to_errno>
 800f2ca:	61b8      	str	r0, [r7, #24]
 800f2cc:	69bb      	ldr	r3, [r7, #24]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d002      	beq.n	800f2d8 <lwip_bind+0xac>
 800f2d2:	4a0c      	ldr	r2, [pc, #48]	; (800f304 <lwip_bind+0xd8>)
 800f2d4:	69bb      	ldr	r3, [r7, #24]
 800f2d6:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800f2d8:	f04f 33ff 	mov.w	r3, #4294967295
 800f2dc:	e008      	b.n	800f2f0 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800f2de:	2300      	movs	r3, #0
 800f2e0:	61fb      	str	r3, [r7, #28]
 800f2e2:	69fb      	ldr	r3, [r7, #28]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d002      	beq.n	800f2ee <lwip_bind+0xc2>
 800f2e8:	4a06      	ldr	r2, [pc, #24]	; (800f304 <lwip_bind+0xd8>)
 800f2ea:	69fb      	ldr	r3, [r7, #28]
 800f2ec:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800f2ee:	2300      	movs	r3, #0
}
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	3728      	adds	r7, #40	; 0x28
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}
 800f2f8:	0801d76c 	.word	0x0801d76c
 800f2fc:	0801d810 	.word	0x0801d810
 800f300:	0801d7c0 	.word	0x0801d7c0
 800f304:	200111e8 	.word	0x200111e8

0800f308 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b08c      	sub	sp, #48	; 0x30
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	60f8      	str	r0, [r7, #12]
 800f310:	60b9      	str	r1, [r7, #8]
 800f312:	607a      	str	r2, [r7, #4]
 800f314:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800f316:	2308      	movs	r3, #8
 800f318:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 800f31c:	2300      	movs	r3, #0
 800f31e:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2b00      	cmp	r3, #0
 800f324:	db01      	blt.n	800f32a <lwip_recv_tcp+0x22>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	e001      	b.n	800f32e <lwip_recv_tcp+0x26>
 800f32a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f32e:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d106      	bne.n	800f344 <lwip_recv_tcp+0x3c>
 800f336:	4b74      	ldr	r3, [pc, #464]	; (800f508 <lwip_recv_tcp+0x200>)
 800f338:	f240 329e 	movw	r2, #926	; 0x39e
 800f33c:	4973      	ldr	r1, [pc, #460]	; (800f50c <lwip_recv_tcp+0x204>)
 800f33e:	4874      	ldr	r0, [pc, #464]	; (800f510 <lwip_recv_tcp+0x208>)
 800f340:	f00c fb28 	bl	801b994 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	781b      	ldrb	r3, [r3, #0]
 800f34a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f34e:	2b10      	cmp	r3, #16
 800f350:	d006      	beq.n	800f360 <lwip_recv_tcp+0x58>
 800f352:	4b6d      	ldr	r3, [pc, #436]	; (800f508 <lwip_recv_tcp+0x200>)
 800f354:	f240 329f 	movw	r2, #927	; 0x39f
 800f358:	496e      	ldr	r1, [pc, #440]	; (800f514 <lwip_recv_tcp+0x20c>)
 800f35a:	486d      	ldr	r0, [pc, #436]	; (800f510 <lwip_recv_tcp+0x208>)
 800f35c:	f00c fb1a 	bl	801b994 <iprintf>

  if (flags & MSG_DONTWAIT) {
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	f003 0308 	and.w	r3, r3, #8
 800f366:	2b00      	cmp	r3, #0
 800f368:	d005      	beq.n	800f376 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800f36a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f36e:	f043 0304 	orr.w	r3, r3, #4
 800f372:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	685b      	ldr	r3, [r3, #4]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d003      	beq.n	800f386 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	685b      	ldr	r3, [r3, #4]
 800f382:	617b      	str	r3, [r7, #20]
 800f384:	e036      	b.n	800f3f4 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f38e:	f107 0114 	add.w	r1, r7, #20
 800f392:	4618      	mov	r0, r3
 800f394:	f7fe fb1e 	bl	800d9d4 <netconn_recv_tcp_pbuf_flags>
 800f398:	4603      	mov	r3, r0
 800f39a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800f39e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d019      	beq.n	800f3da <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800f3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	f300 808d 	bgt.w	800f4c8 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800f3ae:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f7ff fe2e 	bl	800f014 <err_to_errno>
 800f3b8:	61f8      	str	r0, [r7, #28]
 800f3ba:	69fb      	ldr	r3, [r7, #28]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d002      	beq.n	800f3c6 <lwip_recv_tcp+0xbe>
 800f3c0:	4a55      	ldr	r2, [pc, #340]	; (800f518 <lwip_recv_tcp+0x210>)
 800f3c2:	69fb      	ldr	r3, [r7, #28]
 800f3c4:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800f3c6:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800f3ca:	f113 0f0f 	cmn.w	r3, #15
 800f3ce:	d101      	bne.n	800f3d4 <lwip_recv_tcp+0xcc>
          return 0;
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	e094      	b.n	800f4fe <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800f3d4:	f04f 33ff 	mov.w	r3, #4294967295
 800f3d8:	e091      	b.n	800f4fe <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d106      	bne.n	800f3ee <lwip_recv_tcp+0xe6>
 800f3e0:	4b49      	ldr	r3, [pc, #292]	; (800f508 <lwip_recv_tcp+0x200>)
 800f3e2:	f240 32c5 	movw	r2, #965	; 0x3c5
 800f3e6:	494d      	ldr	r1, [pc, #308]	; (800f51c <lwip_recv_tcp+0x214>)
 800f3e8:	4849      	ldr	r0, [pc, #292]	; (800f510 <lwip_recv_tcp+0x208>)
 800f3ea:	f00c fad3 	bl	801b994 <iprintf>
      sock->lastdata.pbuf = p;
 800f3ee:	697a      	ldr	r2, [r7, #20]
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	891b      	ldrh	r3, [r3, #8]
 800f3f8:	461a      	mov	r2, r3
 800f3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3fc:	4293      	cmp	r3, r2
 800f3fe:	dd03      	ble.n	800f408 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	891b      	ldrh	r3, [r3, #8]
 800f404:	847b      	strh	r3, [r7, #34]	; 0x22
 800f406:	e001      	b.n	800f40c <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800f408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f40a:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 800f40c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f410:	4413      	add	r3, r2
 800f412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f414:	429a      	cmp	r2, r3
 800f416:	dd03      	ble.n	800f420 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800f418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f41a:	b29b      	uxth	r3, r3
 800f41c:	43db      	mvns	r3, r3
 800f41e:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800f420:	6978      	ldr	r0, [r7, #20]
 800f422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f424:	68ba      	ldr	r2, [r7, #8]
 800f426:	18d1      	adds	r1, r2, r3
 800f428:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f42a:	2300      	movs	r3, #0
 800f42c:	f003 f912 	bl	8012654 <pbuf_copy_partial>

    recvd += copylen;
 800f430:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f432:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f434:	4413      	add	r3, r2
 800f436:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800f438:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f43a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f43c:	429a      	cmp	r2, r3
 800f43e:	da06      	bge.n	800f44e <lwip_recv_tcp+0x146>
 800f440:	4b31      	ldr	r3, [pc, #196]	; (800f508 <lwip_recv_tcp+0x200>)
 800f442:	f240 32dd 	movw	r2, #989	; 0x3dd
 800f446:	4936      	ldr	r1, [pc, #216]	; (800f520 <lwip_recv_tcp+0x218>)
 800f448:	4831      	ldr	r0, [pc, #196]	; (800f510 <lwip_recv_tcp+0x208>)
 800f44a:	f00c faa3 	bl	801b994 <iprintf>
    recv_left -= copylen;
 800f44e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f452:	1ad3      	subs	r3, r2, r3
 800f454:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	f003 0301 	and.w	r3, r3, #1
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d123      	bne.n	800f4a8 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	891b      	ldrh	r3, [r3, #8]
 800f464:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f466:	429a      	cmp	r2, r3
 800f468:	d906      	bls.n	800f478 <lwip_recv_tcp+0x170>
 800f46a:	4b27      	ldr	r3, [pc, #156]	; (800f508 <lwip_recv_tcp+0x200>)
 800f46c:	f240 32e3 	movw	r2, #995	; 0x3e3
 800f470:	492c      	ldr	r1, [pc, #176]	; (800f524 <lwip_recv_tcp+0x21c>)
 800f472:	4827      	ldr	r0, [pc, #156]	; (800f510 <lwip_recv_tcp+0x208>)
 800f474:	f00c fa8e 	bl	801b994 <iprintf>
      if (p->tot_len - copylen > 0) {
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	891b      	ldrh	r3, [r3, #8]
 800f47c:	461a      	mov	r2, r3
 800f47e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f480:	1ad3      	subs	r3, r2, r3
 800f482:	2b00      	cmp	r3, #0
 800f484:	dd09      	ble.n	800f49a <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800f486:	697b      	ldr	r3, [r7, #20]
 800f488:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f48a:	4611      	mov	r1, r2
 800f48c:	4618      	mov	r0, r3
 800f48e:	f002 feb8 	bl	8012202 <pbuf_free_header>
 800f492:	4602      	mov	r2, r0
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	605a      	str	r2, [r3, #4]
 800f498:	e006      	b.n	800f4a8 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	2200      	movs	r2, #0
 800f49e:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f002 fee0 	bl	8012268 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800f4a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4ac:	f043 0314 	orr.w	r3, r3, #20
 800f4b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800f4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	dd08      	ble.n	800f4cc <lwip_recv_tcp+0x1c4>
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	f003 0301 	and.w	r3, r3, #1
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	f43f af58 	beq.w	800f376 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800f4c6:	e001      	b.n	800f4cc <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800f4c8:	bf00      	nop
 800f4ca:	e000      	b.n	800f4ce <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800f4cc:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800f4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	dd0b      	ble.n	800f4ec <lwip_recv_tcp+0x1e4>
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	f003 0301 	and.w	r3, r3, #1
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d106      	bne.n	800f4ec <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f4e4:	4611      	mov	r1, r2
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7fe f9c2 	bl	800d870 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	61bb      	str	r3, [r7, #24]
 800f4f0:	69bb      	ldr	r3, [r7, #24]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d002      	beq.n	800f4fc <lwip_recv_tcp+0x1f4>
 800f4f6:	4a08      	ldr	r2, [pc, #32]	; (800f518 <lwip_recv_tcp+0x210>)
 800f4f8:	69bb      	ldr	r3, [r7, #24]
 800f4fa:	6013      	str	r3, [r2, #0]
  return recvd;
 800f4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	3730      	adds	r7, #48	; 0x30
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}
 800f506:	bf00      	nop
 800f508:	0801d76c 	.word	0x0801d76c
 800f50c:	0801d864 	.word	0x0801d864
 800f510:	0801d7c0 	.word	0x0801d7c0
 800f514:	0801d874 	.word	0x0801d874
 800f518:	200111e8 	.word	0x200111e8
 800f51c:	0801d898 	.word	0x0801d898
 800f520:	0801d8a4 	.word	0x0801d8a4
 800f524:	0801d8cc 	.word	0x0801d8cc

0800f528 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800f528:	b590      	push	{r4, r7, lr}
 800f52a:	b08b      	sub	sp, #44	; 0x2c
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	60f8      	str	r0, [r7, #12]
 800f530:	60b9      	str	r1, [r7, #8]
 800f532:	603b      	str	r3, [r7, #0]
 800f534:	4613      	mov	r3, r2
 800f536:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800f538:	2300      	movs	r3, #0
 800f53a:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d106      	bne.n	800f550 <lwip_sock_make_addr+0x28>
 800f542:	4b2b      	ldr	r3, [pc, #172]	; (800f5f0 <lwip_sock_make_addr+0xc8>)
 800f544:	f240 4207 	movw	r2, #1031	; 0x407
 800f548:	492a      	ldr	r1, [pc, #168]	; (800f5f4 <lwip_sock_make_addr+0xcc>)
 800f54a:	482b      	ldr	r0, [pc, #172]	; (800f5f8 <lwip_sock_make_addr+0xd0>)
 800f54c:	f00c fa22 	bl	801b994 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d106      	bne.n	800f564 <lwip_sock_make_addr+0x3c>
 800f556:	4b26      	ldr	r3, [pc, #152]	; (800f5f0 <lwip_sock_make_addr+0xc8>)
 800f558:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800f55c:	4927      	ldr	r1, [pc, #156]	; (800f5fc <lwip_sock_make_addr+0xd4>)
 800f55e:	4826      	ldr	r0, [pc, #152]	; (800f5f8 <lwip_sock_make_addr+0xd0>)
 800f560:	f00c fa18 	bl	801b994 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800f564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f566:	2b00      	cmp	r3, #0
 800f568:	d106      	bne.n	800f578 <lwip_sock_make_addr+0x50>
 800f56a:	4b21      	ldr	r3, [pc, #132]	; (800f5f0 <lwip_sock_make_addr+0xc8>)
 800f56c:	f240 4209 	movw	r2, #1033	; 0x409
 800f570:	4923      	ldr	r1, [pc, #140]	; (800f600 <lwip_sock_make_addr+0xd8>)
 800f572:	4821      	ldr	r0, [pc, #132]	; (800f5f8 <lwip_sock_make_addr+0xd0>)
 800f574:	f00c fa0e 	bl	801b994 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800f578:	f107 0314 	add.w	r3, r7, #20
 800f57c:	2210      	movs	r2, #16
 800f57e:	701a      	strb	r2, [r3, #0]
 800f580:	f107 0314 	add.w	r3, r7, #20
 800f584:	2202      	movs	r2, #2
 800f586:	705a      	strb	r2, [r3, #1]
 800f588:	f107 0414 	add.w	r4, r7, #20
 800f58c:	88fb      	ldrh	r3, [r7, #6]
 800f58e:	4618      	mov	r0, r3
 800f590:	f001 fa46 	bl	8010a20 <lwip_htons>
 800f594:	4603      	mov	r3, r0
 800f596:	8063      	strh	r3, [r4, #2]
 800f598:	f107 0314 	add.w	r3, r7, #20
 800f59c:	68ba      	ldr	r2, [r7, #8]
 800f59e:	6812      	ldr	r2, [r2, #0]
 800f5a0:	605a      	str	r2, [r3, #4]
 800f5a2:	f107 0314 	add.w	r3, r7, #20
 800f5a6:	3308      	adds	r3, #8
 800f5a8:	2208      	movs	r2, #8
 800f5aa:	2100      	movs	r1, #0
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f00c f9e9 	bl	801b984 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800f5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	7d3a      	ldrb	r2, [r7, #20]
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	d202      	bcs.n	800f5c2 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800f5bc:	2301      	movs	r3, #1
 800f5be:	627b      	str	r3, [r7, #36]	; 0x24
 800f5c0:	e008      	b.n	800f5d4 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800f5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	7d3a      	ldrb	r2, [r7, #20]
 800f5c8:	4293      	cmp	r3, r2
 800f5ca:	d903      	bls.n	800f5d4 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800f5cc:	7d3b      	ldrb	r3, [r7, #20]
 800f5ce:	461a      	mov	r2, r3
 800f5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d2:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800f5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d6:	681a      	ldr	r2, [r3, #0]
 800f5d8:	f107 0314 	add.w	r3, r7, #20
 800f5dc:	4619      	mov	r1, r3
 800f5de:	6838      	ldr	r0, [r7, #0]
 800f5e0:	f00c f9c2 	bl	801b968 <memcpy>
  return truncated;
 800f5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	372c      	adds	r7, #44	; 0x2c
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd90      	pop	{r4, r7, pc}
 800f5ee:	bf00      	nop
 800f5f0:	0801d76c 	.word	0x0801d76c
 800f5f4:	0801d8dc 	.word	0x0801d8dc
 800f5f8:	0801d7c0 	.word	0x0801d7c0
 800f5fc:	0801d8f0 	.word	0x0801d8f0
 800f600:	0801d900 	.word	0x0801d900

0800f604 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b088      	sub	sp, #32
 800f608:	af02      	add	r7, sp, #8
 800f60a:	60f8      	str	r0, [r7, #12]
 800f60c:	60b9      	str	r1, [r7, #8]
 800f60e:	607a      	str	r2, [r7, #4]
 800f610:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d101      	bne.n	800f61c <lwip_recv_tcp_from+0x18>
    return 0;
 800f618:	2300      	movs	r3, #0
 800f61a:	e021      	b.n	800f660 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d01d      	beq.n	800f65e <lwip_recv_tcp_from+0x5a>
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d01a      	beq.n	800f65e <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	6818      	ldr	r0, [r3, #0]
 800f62c:	f107 0216 	add.w	r2, r7, #22
 800f630:	f107 0110 	add.w	r1, r7, #16
 800f634:	2300      	movs	r3, #0
 800f636:	f7fd ff99 	bl	800d56c <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d00e      	beq.n	800f65e <lwip_recv_tcp_from+0x5a>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d00b      	beq.n	800f65e <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	6818      	ldr	r0, [r3, #0]
 800f64a:	8afa      	ldrh	r2, [r7, #22]
 800f64c:	f107 0110 	add.w	r1, r7, #16
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	9300      	str	r3, [sp, #0]
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	f7ff ff67 	bl	800f528 <lwip_sock_make_addr>
 800f65a:	4603      	mov	r3, r0
 800f65c:	e000      	b.n	800f660 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800f65e:	2300      	movs	r3, #0
}
 800f660:	4618      	mov	r0, r3
 800f662:	3718      	adds	r7, #24
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}

0800f668 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800f668:	b590      	push	{r4, r7, lr}
 800f66a:	b08d      	sub	sp, #52	; 0x34
 800f66c:	af02      	add	r7, sp, #8
 800f66e:	60f8      	str	r0, [r7, #12]
 800f670:	60b9      	str	r1, [r7, #8]
 800f672:	607a      	str	r2, [r7, #4]
 800f674:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	689b      	ldr	r3, [r3, #8]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d10d      	bne.n	800f69a <lwip_recvfrom_udp_raw+0x32>
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	68db      	ldr	r3, [r3, #12]
 800f682:	2b00      	cmp	r3, #0
 800f684:	dd09      	ble.n	800f69a <lwip_recvfrom_udp_raw+0x32>
 800f686:	4b5e      	ldr	r3, [pc, #376]	; (800f800 <lwip_recvfrom_udp_raw+0x198>)
 800f688:	f240 4249 	movw	r2, #1097	; 0x449
 800f68c:	495d      	ldr	r1, [pc, #372]	; (800f804 <lwip_recvfrom_udp_raw+0x19c>)
 800f68e:	485e      	ldr	r0, [pc, #376]	; (800f808 <lwip_recvfrom_udp_raw+0x1a0>)
 800f690:	f00c f980 	bl	801b994 <iprintf>
 800f694:	f06f 030f 	mvn.w	r3, #15
 800f698:	e0ad      	b.n	800f7f6 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	f003 0308 	and.w	r3, r3, #8
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d003      	beq.n	800f6ac <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800f6a4:	2304      	movs	r3, #4
 800f6a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f6aa:	e002      	b.n	800f6b2 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	685b      	ldr	r3, [r3, #4]
 800f6b6:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d11e      	bne.n	800f6fc <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f6c6:	f107 0110 	add.w	r1, r7, #16
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7fe f9ae 	bl	800da2c <netconn_recv_udp_raw_netbuf_flags>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800f6d4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d002      	beq.n	800f6e2 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800f6dc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f6e0:	e089      	b.n	800f7f6 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d106      	bne.n	800f6f6 <lwip_recvfrom_udp_raw+0x8e>
 800f6e8:	4b45      	ldr	r3, [pc, #276]	; (800f800 <lwip_recvfrom_udp_raw+0x198>)
 800f6ea:	f240 425e 	movw	r2, #1118	; 0x45e
 800f6ee:	4947      	ldr	r1, [pc, #284]	; (800f80c <lwip_recvfrom_udp_raw+0x1a4>)
 800f6f0:	4845      	ldr	r0, [pc, #276]	; (800f808 <lwip_recvfrom_udp_raw+0x1a0>)
 800f6f2:	f00c f94f 	bl	801b994 <iprintf>
    sock->lastdata.netbuf = buf;
 800f6f6:	693a      	ldr	r2, [r7, #16]
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	891b      	ldrh	r3, [r3, #8]
 800f702:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800f704:	2300      	movs	r3, #0
 800f706:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800f708:	2300      	movs	r3, #0
 800f70a:	61fb      	str	r3, [r7, #28]
 800f70c:	e029      	b.n	800f762 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800f70e:	8b3a      	ldrh	r2, [r7, #24]
 800f710:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f712:	1ad3      	subs	r3, r2, r3
 800f714:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	689a      	ldr	r2, [r3, #8]
 800f71a:	69fb      	ldr	r3, [r7, #28]
 800f71c:	00db      	lsls	r3, r3, #3
 800f71e:	4413      	add	r3, r2
 800f720:	685a      	ldr	r2, [r3, #4]
 800f722:	8afb      	ldrh	r3, [r7, #22]
 800f724:	429a      	cmp	r2, r3
 800f726:	d902      	bls.n	800f72e <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800f728:	8afb      	ldrh	r3, [r7, #22]
 800f72a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f72c:	e006      	b.n	800f73c <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	689a      	ldr	r2, [r3, #8]
 800f732:	69fb      	ldr	r3, [r7, #28]
 800f734:	00db      	lsls	r3, r3, #3
 800f736:	4413      	add	r3, r2
 800f738:	685b      	ldr	r3, [r3, #4]
 800f73a:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800f73c:	693b      	ldr	r3, [r7, #16]
 800f73e:	6818      	ldr	r0, [r3, #0]
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	689a      	ldr	r2, [r3, #8]
 800f744:	69fb      	ldr	r3, [r7, #28]
 800f746:	00db      	lsls	r3, r3, #3
 800f748:	4413      	add	r3, r2
 800f74a:	6819      	ldr	r1, [r3, #0]
 800f74c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f74e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f750:	f002 ff80 	bl	8012654 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800f754:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f756:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f758:	4413      	add	r3, r2
 800f75a:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800f75c:	69fb      	ldr	r3, [r7, #28]
 800f75e:	3301      	adds	r3, #1
 800f760:	61fb      	str	r3, [r7, #28]
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	68db      	ldr	r3, [r3, #12]
 800f766:	69fa      	ldr	r2, [r7, #28]
 800f768:	429a      	cmp	r2, r3
 800f76a:	da03      	bge.n	800f774 <lwip_recvfrom_udp_raw+0x10c>
 800f76c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f76e:	8b3b      	ldrh	r3, [r7, #24]
 800f770:	429a      	cmp	r2, r3
 800f772:	d3cc      	bcc.n	800f70e <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d01a      	beq.n	800f7b2 <lwip_recvfrom_udp_raw+0x14a>
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	685b      	ldr	r3, [r3, #4]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d016      	beq.n	800f7b2 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d012      	beq.n	800f7b2 <lwip_recvfrom_udp_raw+0x14a>
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	685b      	ldr	r3, [r3, #4]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d00e      	beq.n	800f7b2 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	6818      	ldr	r0, [r3, #0]
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	f103 0108 	add.w	r1, r3, #8
 800f79e:	693b      	ldr	r3, [r7, #16]
 800f7a0:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	3304      	adds	r3, #4
 800f7aa:	9300      	str	r3, [sp, #0]
 800f7ac:	4623      	mov	r3, r4
 800f7ae:	f7ff febb 	bl	800f528 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	691b      	ldr	r3, [r3, #16]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d007      	beq.n	800f7d0 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800f7c4:	7d7b      	ldrb	r3, [r7, #21]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d102      	bne.n	800f7d0 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	f003 0301 	and.w	r3, r3, #1
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d106      	bne.n	800f7e8 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	2200      	movs	r2, #0
 800f7de:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800f7e0:	693b      	ldr	r3, [r7, #16]
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f7ff fc34 	bl	800f050 <netbuf_delete>
  }
  if (datagram_len) {
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d002      	beq.n	800f7f4 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	8b3a      	ldrh	r2, [r7, #24]
 800f7f2:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800f7f4:	2300      	movs	r3, #0
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	372c      	adds	r7, #44	; 0x2c
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd90      	pop	{r4, r7, pc}
 800f7fe:	bf00      	nop
 800f800:	0801d76c 	.word	0x0801d76c
 800f804:	0801d910 	.word	0x0801d910
 800f808:	0801d7c0 	.word	0x0801d7c0
 800f80c:	0801d93c 	.word	0x0801d93c

0800f810 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b096      	sub	sp, #88	; 0x58
 800f814:	af02      	add	r7, sp, #8
 800f816:	60f8      	str	r0, [r7, #12]
 800f818:	60b9      	str	r1, [r7, #8]
 800f81a:	607a      	str	r2, [r7, #4]
 800f81c:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800f81e:	68f8      	ldr	r0, [r7, #12]
 800f820:	f7ff fc80 	bl	800f124 <get_socket>
 800f824:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800f826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d102      	bne.n	800f832 <lwip_recvfrom+0x22>
    return -1;
 800f82c:	f04f 33ff 	mov.w	r3, #4294967295
 800f830:	e078      	b.n	800f924 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800f832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	781b      	ldrb	r3, [r3, #0]
 800f838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f83c:	2b10      	cmp	r3, #16
 800f83e:	d112      	bne.n	800f866 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	687a      	ldr	r2, [r7, #4]
 800f844:	68b9      	ldr	r1, [r7, #8]
 800f846:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f848:	f7ff fd5e 	bl	800f308 <lwip_recv_tcp>
 800f84c:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800f84e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f850:	9301      	str	r3, [sp, #4]
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	9300      	str	r3, [sp, #0]
 800f856:	4b35      	ldr	r3, [pc, #212]	; (800f92c <lwip_recvfrom+0x11c>)
 800f858:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f85a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f85c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f85e:	f7ff fed1 	bl	800f604 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800f862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f864:	e05e      	b.n	800f924 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800f866:	2300      	movs	r3, #0
 800f868:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800f872:	2300      	movs	r3, #0
 800f874:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800f876:	2300      	movs	r3, #0
 800f878:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800f87a:	2300      	movs	r3, #0
 800f87c:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800f87e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f882:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800f884:	2301      	movs	r3, #1
 800f886:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800f888:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f88a:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800f88c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d002      	beq.n	800f898 <lwip_recvfrom+0x88>
 800f892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	e000      	b.n	800f89a <lwip_recvfrom+0x8a>
 800f898:	2300      	movs	r3, #0
 800f89a:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800f89c:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800f8a0:	f107 0214 	add.w	r2, r7, #20
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	9300      	str	r3, [sp, #0]
 800f8a8:	460b      	mov	r3, r1
 800f8aa:	6839      	ldr	r1, [r7, #0]
 800f8ac:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f8ae:	f7ff fedb 	bl	800f668 <lwip_recvfrom_udp_raw>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800f8b8:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d00e      	beq.n	800f8de <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800f8c0:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	f7ff fba5 	bl	800f014 <err_to_errno>
 800f8ca:	63f8      	str	r0, [r7, #60]	; 0x3c
 800f8cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d002      	beq.n	800f8d8 <lwip_recvfrom+0xc8>
 800f8d2:	4a17      	ldr	r2, [pc, #92]	; (800f930 <lwip_recvfrom+0x120>)
 800f8d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8d6:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800f8d8:	f04f 33ff 	mov.w	r3, #4294967295
 800f8dc:	e022      	b.n	800f924 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800f8de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f8e0:	461a      	mov	r2, r3
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	4293      	cmp	r3, r2
 800f8e6:	bf28      	it	cs
 800f8e8:	4613      	movcs	r3, r2
 800f8ea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800f8ee:	4293      	cmp	r3, r2
 800f8f0:	d206      	bcs.n	800f900 <lwip_recvfrom+0xf0>
 800f8f2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f8f4:	461a      	mov	r2, r3
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	4293      	cmp	r3, r2
 800f8fa:	bf28      	it	cs
 800f8fc:	4613      	movcs	r3, r2
 800f8fe:	e001      	b.n	800f904 <lwip_recvfrom+0xf4>
 800f900:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f904:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800f906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d002      	beq.n	800f912 <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800f90c:	69ba      	ldr	r2, [r7, #24]
 800f90e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f910:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800f912:	2300      	movs	r3, #0
 800f914:	643b      	str	r3, [r7, #64]	; 0x40
 800f916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d002      	beq.n	800f922 <lwip_recvfrom+0x112>
 800f91c:	4a04      	ldr	r2, [pc, #16]	; (800f930 <lwip_recvfrom+0x120>)
 800f91e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f920:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800f922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800f924:	4618      	mov	r0, r3
 800f926:	3750      	adds	r7, #80	; 0x50
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}
 800f92c:	0801d948 	.word	0x0801d948
 800f930:	200111e8 	.word	0x200111e8

0800f934 <lwip_socket>:
  return (err == ERR_OK ? short_size : -1);
}

int
lwip_socket(int domain, int type, int protocol)
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b086      	sub	sp, #24
 800f938:	af00      	add	r7, sp, #0
 800f93a:	60f8      	str	r0, [r7, #12]
 800f93c:	60b9      	str	r1, [r7, #8]
 800f93e:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	2b03      	cmp	r3, #3
 800f944:	d009      	beq.n	800f95a <lwip_socket+0x26>
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	2b03      	cmp	r3, #3
 800f94a:	dc23      	bgt.n	800f994 <lwip_socket+0x60>
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	2b01      	cmp	r3, #1
 800f950:	d019      	beq.n	800f986 <lwip_socket+0x52>
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	2b02      	cmp	r3, #2
 800f956:	d009      	beq.n	800f96c <lwip_socket+0x38>
 800f958:	e01c      	b.n	800f994 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	b2db      	uxtb	r3, r3
 800f95e:	4a22      	ldr	r2, [pc, #136]	; (800f9e8 <lwip_socket+0xb4>)
 800f960:	4619      	mov	r1, r3
 800f962:	2040      	movs	r0, #64	; 0x40
 800f964:	f7fd fd48 	bl	800d3f8 <netconn_new_with_proto_and_callback>
 800f968:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800f96a:	e019      	b.n	800f9a0 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2b88      	cmp	r3, #136	; 0x88
 800f970:	d101      	bne.n	800f976 <lwip_socket+0x42>
 800f972:	2321      	movs	r3, #33	; 0x21
 800f974:	e000      	b.n	800f978 <lwip_socket+0x44>
 800f976:	2320      	movs	r3, #32
 800f978:	4a1b      	ldr	r2, [pc, #108]	; (800f9e8 <lwip_socket+0xb4>)
 800f97a:	2100      	movs	r1, #0
 800f97c:	4618      	mov	r0, r3
 800f97e:	f7fd fd3b 	bl	800d3f8 <netconn_new_with_proto_and_callback>
 800f982:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800f984:	e00c      	b.n	800f9a0 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800f986:	4a18      	ldr	r2, [pc, #96]	; (800f9e8 <lwip_socket+0xb4>)
 800f988:	2100      	movs	r1, #0
 800f98a:	2010      	movs	r0, #16
 800f98c:	f7fd fd34 	bl	800d3f8 <netconn_new_with_proto_and_callback>
 800f990:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800f992:	e005      	b.n	800f9a0 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800f994:	4b15      	ldr	r3, [pc, #84]	; (800f9ec <lwip_socket+0xb8>)
 800f996:	2216      	movs	r2, #22
 800f998:	601a      	str	r2, [r3, #0]
      return -1;
 800f99a:	f04f 33ff 	mov.w	r3, #4294967295
 800f99e:	e01e      	b.n	800f9de <lwip_socket+0xaa>
  }

  if (!conn) {
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d105      	bne.n	800f9b2 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800f9a6:	4b11      	ldr	r3, [pc, #68]	; (800f9ec <lwip_socket+0xb8>)
 800f9a8:	2269      	movs	r2, #105	; 0x69
 800f9aa:	601a      	str	r2, [r3, #0]
    return -1;
 800f9ac:	f04f 33ff 	mov.w	r3, #4294967295
 800f9b0:	e015      	b.n	800f9de <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800f9b2:	2100      	movs	r1, #0
 800f9b4:	6978      	ldr	r0, [r7, #20]
 800f9b6:	f7ff fbcd 	bl	800f154 <alloc_socket>
 800f9ba:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800f9bc:	693b      	ldr	r3, [r7, #16]
 800f9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9c2:	d108      	bne.n	800f9d6 <lwip_socket+0xa2>
    netconn_delete(conn);
 800f9c4:	6978      	ldr	r0, [r7, #20]
 800f9c6:	f7fd fdb5 	bl	800d534 <netconn_delete>
    set_errno(ENFILE);
 800f9ca:	4b08      	ldr	r3, [pc, #32]	; (800f9ec <lwip_socket+0xb8>)
 800f9cc:	2217      	movs	r2, #23
 800f9ce:	601a      	str	r2, [r3, #0]
    return -1;
 800f9d0:	f04f 33ff 	mov.w	r3, #4294967295
 800f9d4:	e003      	b.n	800f9de <lwip_socket+0xaa>
  }
  conn->socket = i;
 800f9d6:	697b      	ldr	r3, [r7, #20]
 800f9d8:	693a      	ldr	r2, [r7, #16]
 800f9da:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800f9dc:	693b      	ldr	r3, [r7, #16]
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	3718      	adds	r7, #24
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}
 800f9e6:	bf00      	nop
 800f9e8:	080102a5 	.word	0x080102a5
 800f9ec:	200111e8 	.word	0x200111e8

0800f9f0 <lwip_link_select_cb>:

#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
/* Add select_cb to select_cb_list. */
static void
lwip_link_select_cb(struct lwip_select_cb *select_cb)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b082      	sub	sp, #8
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
  LWIP_SOCKET_SELECT_DECL_PROTECT(lev);

  /* Protect the select_cb_list */
  LWIP_SOCKET_SELECT_PROTECT(lev);
 800f9f8:	480c      	ldr	r0, [pc, #48]	; (800fa2c <lwip_link_select_cb+0x3c>)
 800f9fa:	f00b ff27 	bl	801b84c <sys_mutex_lock>

  /* Put this select_cb on top of list */
  select_cb->next = select_cb_list;
 800f9fe:	4b0c      	ldr	r3, [pc, #48]	; (800fa30 <lwip_link_select_cb+0x40>)
 800fa00:	681a      	ldr	r2, [r3, #0]
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	601a      	str	r2, [r3, #0]
  if (select_cb_list != NULL) {
 800fa06:	4b0a      	ldr	r3, [pc, #40]	; (800fa30 <lwip_link_select_cb+0x40>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d003      	beq.n	800fa16 <lwip_link_select_cb+0x26>
    select_cb_list->prev = select_cb;
 800fa0e:	4b08      	ldr	r3, [pc, #32]	; (800fa30 <lwip_link_select_cb+0x40>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	687a      	ldr	r2, [r7, #4]
 800fa14:	605a      	str	r2, [r3, #4]
  }
  select_cb_list = select_cb;
 800fa16:	4a06      	ldr	r2, [pc, #24]	; (800fa30 <lwip_link_select_cb+0x40>)
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	6013      	str	r3, [r2, #0]
  /* Increasing this counter tells select_check_waiters that the list has changed. */
  select_cb_ctr++;
#endif

  /* Now we can safely unprotect */
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 800fa1c:	4803      	ldr	r0, [pc, #12]	; (800fa2c <lwip_link_select_cb+0x3c>)
 800fa1e:	f00b ff24 	bl	801b86a <sys_mutex_unlock>
}
 800fa22:	bf00      	nop
 800fa24:	3708      	adds	r7, #8
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bd80      	pop	{r7, pc}
 800fa2a:	bf00      	nop
 800fa2c:	2000d934 	.word	0x2000d934
 800fa30:	2000d924 	.word	0x2000d924

0800fa34 <lwip_unlink_select_cb>:

/* Remove select_cb from select_cb_list. */
static void
lwip_unlink_select_cb(struct lwip_select_cb *select_cb)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b082      	sub	sp, #8
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  LWIP_SOCKET_SELECT_DECL_PROTECT(lev);

  /* Take us off the list */
  LWIP_SOCKET_SELECT_PROTECT(lev);
 800fa3c:	481b      	ldr	r0, [pc, #108]	; (800faac <lwip_unlink_select_cb+0x78>)
 800fa3e:	f00b ff05 	bl	801b84c <sys_mutex_lock>
  if (select_cb->next != NULL) {
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d004      	beq.n	800fa54 <lwip_unlink_select_cb+0x20>
    select_cb->next->prev = select_cb->prev;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	687a      	ldr	r2, [r7, #4]
 800fa50:	6852      	ldr	r2, [r2, #4]
 800fa52:	605a      	str	r2, [r3, #4]
  }
  if (select_cb_list == select_cb) {
 800fa54:	4b16      	ldr	r3, [pc, #88]	; (800fab0 <lwip_unlink_select_cb+0x7c>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	687a      	ldr	r2, [r7, #4]
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	d10f      	bne.n	800fa7e <lwip_unlink_select_cb+0x4a>
    LWIP_ASSERT("select_cb->prev == NULL", select_cb->prev == NULL);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	685b      	ldr	r3, [r3, #4]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d006      	beq.n	800fa74 <lwip_unlink_select_cb+0x40>
 800fa66:	4b13      	ldr	r3, [pc, #76]	; (800fab4 <lwip_unlink_select_cb+0x80>)
 800fa68:	f240 720d 	movw	r2, #1805	; 0x70d
 800fa6c:	4912      	ldr	r1, [pc, #72]	; (800fab8 <lwip_unlink_select_cb+0x84>)
 800fa6e:	4813      	ldr	r0, [pc, #76]	; (800fabc <lwip_unlink_select_cb+0x88>)
 800fa70:	f00b ff90 	bl	801b994 <iprintf>
    select_cb_list = select_cb->next;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	4a0d      	ldr	r2, [pc, #52]	; (800fab0 <lwip_unlink_select_cb+0x7c>)
 800fa7a:	6013      	str	r3, [r2, #0]
 800fa7c:	e00f      	b.n	800fa9e <lwip_unlink_select_cb+0x6a>
  } else {
    LWIP_ASSERT("select_cb->prev != NULL", select_cb->prev != NULL);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	685b      	ldr	r3, [r3, #4]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d106      	bne.n	800fa94 <lwip_unlink_select_cb+0x60>
 800fa86:	4b0b      	ldr	r3, [pc, #44]	; (800fab4 <lwip_unlink_select_cb+0x80>)
 800fa88:	f44f 62e2 	mov.w	r2, #1808	; 0x710
 800fa8c:	490c      	ldr	r1, [pc, #48]	; (800fac0 <lwip_unlink_select_cb+0x8c>)
 800fa8e:	480b      	ldr	r0, [pc, #44]	; (800fabc <lwip_unlink_select_cb+0x88>)
 800fa90:	f00b ff80 	bl	801b994 <iprintf>
    select_cb->prev->next = select_cb->next;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	685b      	ldr	r3, [r3, #4]
 800fa98:	687a      	ldr	r2, [r7, #4]
 800fa9a:	6812      	ldr	r2, [r2, #0]
 800fa9c:	601a      	str	r2, [r3, #0]
  }
#if !LWIP_TCPIP_CORE_LOCKING
  /* Increasing this counter tells select_check_waiters that the list has changed. */
  select_cb_ctr++;
#endif
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 800fa9e:	4803      	ldr	r0, [pc, #12]	; (800faac <lwip_unlink_select_cb+0x78>)
 800faa0:	f00b fee3 	bl	801b86a <sys_mutex_unlock>
}
 800faa4:	bf00      	nop
 800faa6:	3708      	adds	r7, #8
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd80      	pop	{r7, pc}
 800faac:	2000d934 	.word	0x2000d934
 800fab0:	2000d924 	.word	0x2000d924
 800fab4:	0801d76c 	.word	0x0801d76c
 800fab8:	0801da6c 	.word	0x0801da6c
 800fabc:	0801d7c0 	.word	0x0801d7c0
 800fac0:	0801da84 	.word	0x0801da84

0800fac4 <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b098      	sub	sp, #96	; 0x60
 800fac8:	af00      	add	r7, sp, #0
 800faca:	60f8      	str	r0, [r7, #12]
 800facc:	60b9      	str	r1, [r7, #8]
 800face:	607a      	str	r2, [r7, #4]
 800fad0:	603b      	str	r3, [r7, #0]
  int i, nready = 0;
 800fad2:	2300      	movs	r3, #0
 800fad4:	65bb      	str	r3, [r7, #88]	; 0x58
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_sock *sock;
  SYS_ARCH_DECL_PROTECT(lev);

  FD_ZERO(&lreadset);
 800fad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fada:	64bb      	str	r3, [r7, #72]	; 0x48
 800fadc:	2302      	movs	r3, #2
 800fade:	657b      	str	r3, [r7, #84]	; 0x54
 800fae0:	e007      	b.n	800faf2 <lwip_selscan+0x2e>
 800fae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fae4:	3b01      	subs	r3, #1
 800fae6:	657b      	str	r3, [r7, #84]	; 0x54
 800fae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800faea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800faec:	2100      	movs	r1, #0
 800faee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800faf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d1f4      	bne.n	800fae2 <lwip_selscan+0x1e>
  FD_ZERO(&lwriteset);
 800faf8:	f107 031c 	add.w	r3, r7, #28
 800fafc:	647b      	str	r3, [r7, #68]	; 0x44
 800fafe:	2302      	movs	r3, #2
 800fb00:	653b      	str	r3, [r7, #80]	; 0x50
 800fb02:	e007      	b.n	800fb14 <lwip_selscan+0x50>
 800fb04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb06:	3b01      	subs	r3, #1
 800fb08:	653b      	str	r3, [r7, #80]	; 0x50
 800fb0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fb0e:	2100      	movs	r1, #0
 800fb10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800fb14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d1f4      	bne.n	800fb04 <lwip_selscan+0x40>
  FD_ZERO(&lexceptset);
 800fb1a:	f107 0314 	add.w	r3, r7, #20
 800fb1e:	643b      	str	r3, [r7, #64]	; 0x40
 800fb20:	2302      	movs	r3, #2
 800fb22:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fb24:	e007      	b.n	800fb36 <lwip_selscan+0x72>
 800fb26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb28:	3b01      	subs	r3, #1
 800fb2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fb2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fb30:	2100      	movs	r1, #0
 800fb32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800fb36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d1f4      	bne.n	800fb26 <lwip_selscan+0x62>

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fb40:	e12c      	b.n	800fd9c <lwip_selscan+0x2d8>
    /* if this FD is not in the set, continue */
    if (!(readset_in && FD_ISSET(i, readset_in)) &&
 800fb42:	68bb      	ldr	r3, [r7, #8]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d016      	beq.n	800fb76 <lwip_selscan+0xb2>
 800fb48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	da00      	bge.n	800fb50 <lwip_selscan+0x8c>
 800fb4e:	331f      	adds	r3, #31
 800fb50:	115b      	asrs	r3, r3, #5
 800fb52:	461a      	mov	r2, r3
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fb5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb5c:	4259      	negs	r1, r3
 800fb5e:	f003 031f 	and.w	r3, r3, #31
 800fb62:	f001 011f 	and.w	r1, r1, #31
 800fb66:	bf58      	it	pl
 800fb68:	424b      	negpl	r3, r1
 800fb6a:	fa22 f303 	lsr.w	r3, r2, r3
 800fb6e:	f003 0301 	and.w	r3, r3, #1
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d135      	bne.n	800fbe2 <lwip_selscan+0x11e>
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d016      	beq.n	800fbaa <lwip_selscan+0xe6>
        !(writeset_in && FD_ISSET(i, writeset_in)) &&
 800fb7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	da00      	bge.n	800fb84 <lwip_selscan+0xc0>
 800fb82:	331f      	adds	r3, #31
 800fb84:	115b      	asrs	r3, r3, #5
 800fb86:	461a      	mov	r2, r3
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fb8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb90:	4259      	negs	r1, r3
 800fb92:	f003 031f 	and.w	r3, r3, #31
 800fb96:	f001 011f 	and.w	r1, r1, #31
 800fb9a:	bf58      	it	pl
 800fb9c:	424b      	negpl	r3, r1
 800fb9e:	fa22 f303 	lsr.w	r3, r2, r3
 800fba2:	f003 0301 	and.w	r3, r3, #1
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d11b      	bne.n	800fbe2 <lwip_selscan+0x11e>
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	f000 80f1 	beq.w	800fd94 <lwip_selscan+0x2d0>
        !(exceptset_in && FD_ISSET(i, exceptset_in))) {
 800fbb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	da00      	bge.n	800fbba <lwip_selscan+0xf6>
 800fbb8:	331f      	adds	r3, #31
 800fbba:	115b      	asrs	r3, r3, #5
 800fbbc:	461a      	mov	r2, r3
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fbc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbc6:	4259      	negs	r1, r3
 800fbc8:	f003 031f 	and.w	r3, r3, #31
 800fbcc:	f001 011f 	and.w	r1, r1, #31
 800fbd0:	bf58      	it	pl
 800fbd2:	424b      	negpl	r3, r1
 800fbd4:	fa22 f303 	lsr.w	r3, r2, r3
 800fbd8:	f003 0301 	and.w	r3, r3, #1
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	f000 80d9 	beq.w	800fd94 <lwip_selscan+0x2d0>
      continue;
    }
    /* First get the socket's status (protected)... */
    SYS_ARCH_PROTECT(lev);
 800fbe2:	f00b fe6f 	bl	801b8c4 <sys_arch_protect>
 800fbe6:	63f8      	str	r0, [r7, #60]	; 0x3c
    sock = tryget_socket_unconn_locked(i);
 800fbe8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800fbea:	f7ff fa78 	bl	800f0de <tryget_socket_unconn_locked>
 800fbee:	63b8      	str	r0, [r7, #56]	; 0x38
    if (sock != NULL) {
 800fbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	f000 80c8 	beq.w	800fd88 <lwip_selscan+0x2c4>
      void *lastdata = sock->lastdata.pbuf;
 800fbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbfa:	685b      	ldr	r3, [r3, #4]
 800fbfc:	637b      	str	r3, [r7, #52]	; 0x34
      s16_t rcvevent = sock->rcvevent;
 800fbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc00:	891b      	ldrh	r3, [r3, #8]
 800fc02:	867b      	strh	r3, [r7, #50]	; 0x32
      u16_t sendevent = sock->sendevent;
 800fc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc06:	895b      	ldrh	r3, [r3, #10]
 800fc08:	863b      	strh	r3, [r7, #48]	; 0x30
      u16_t errevent = sock->errevent;
 800fc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc0c:	899b      	ldrh	r3, [r3, #12]
 800fc0e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      SYS_ARCH_UNPROTECT(lev);
 800fc10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fc12:	f00b fe65 	bl	801b8e0 <sys_arch_unprotect>

      /* ... then examine it: */
      /* See if netconn of this socket is ready for read */
      if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d03c      	beq.n	800fc96 <lwip_selscan+0x1d2>
 800fc1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	da00      	bge.n	800fc24 <lwip_selscan+0x160>
 800fc22:	331f      	adds	r3, #31
 800fc24:	115b      	asrs	r3, r3, #5
 800fc26:	461a      	mov	r2, r3
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fc2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc30:	4259      	negs	r1, r3
 800fc32:	f003 031f 	and.w	r3, r3, #31
 800fc36:	f001 011f 	and.w	r1, r1, #31
 800fc3a:	bf58      	it	pl
 800fc3c:	424b      	negpl	r3, r1
 800fc3e:	fa22 f303 	lsr.w	r3, r2, r3
 800fc42:	f003 0301 	and.w	r3, r3, #1
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d025      	beq.n	800fc96 <lwip_selscan+0x1d2>
 800fc4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d103      	bne.n	800fc58 <lwip_selscan+0x194>
 800fc50:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	dd1e      	ble.n	800fc96 <lwip_selscan+0x1d2>
        FD_SET(i, &lreadset);
 800fc58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	da00      	bge.n	800fc60 <lwip_selscan+0x19c>
 800fc5e:	331f      	adds	r3, #31
 800fc60:	115b      	asrs	r3, r3, #5
 800fc62:	461a      	mov	r2, r3
 800fc64:	0093      	lsls	r3, r2, #2
 800fc66:	3360      	adds	r3, #96	; 0x60
 800fc68:	443b      	add	r3, r7
 800fc6a:	f853 1c3c 	ldr.w	r1, [r3, #-60]
 800fc6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc70:	4258      	negs	r0, r3
 800fc72:	f003 031f 	and.w	r3, r3, #31
 800fc76:	f000 001f 	and.w	r0, r0, #31
 800fc7a:	bf58      	it	pl
 800fc7c:	4243      	negpl	r3, r0
 800fc7e:	2001      	movs	r0, #1
 800fc80:	fa00 f303 	lsl.w	r3, r0, r3
 800fc84:	4319      	orrs	r1, r3
 800fc86:	0093      	lsls	r3, r2, #2
 800fc88:	3360      	adds	r3, #96	; 0x60
 800fc8a:	443b      	add	r3, r7
 800fc8c:	f843 1c3c 	str.w	r1, [r3, #-60]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
        nready++;
 800fc90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc92:	3301      	adds	r3, #1
 800fc94:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      /* See if netconn of this socket is ready for write */
      if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d038      	beq.n	800fd0e <lwip_selscan+0x24a>
 800fc9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	da00      	bge.n	800fca4 <lwip_selscan+0x1e0>
 800fca2:	331f      	adds	r3, #31
 800fca4:	115b      	asrs	r3, r3, #5
 800fca6:	461a      	mov	r2, r3
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fcae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcb0:	4259      	negs	r1, r3
 800fcb2:	f003 031f 	and.w	r3, r3, #31
 800fcb6:	f001 011f 	and.w	r1, r1, #31
 800fcba:	bf58      	it	pl
 800fcbc:	424b      	negpl	r3, r1
 800fcbe:	fa22 f303 	lsr.w	r3, r2, r3
 800fcc2:	f003 0301 	and.w	r3, r3, #1
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d021      	beq.n	800fd0e <lwip_selscan+0x24a>
 800fcca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d01e      	beq.n	800fd0e <lwip_selscan+0x24a>
        FD_SET(i, &lwriteset);
 800fcd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	da00      	bge.n	800fcd8 <lwip_selscan+0x214>
 800fcd6:	331f      	adds	r3, #31
 800fcd8:	115b      	asrs	r3, r3, #5
 800fcda:	461a      	mov	r2, r3
 800fcdc:	0093      	lsls	r3, r2, #2
 800fcde:	3360      	adds	r3, #96	; 0x60
 800fce0:	443b      	add	r3, r7
 800fce2:	f853 1c44 	ldr.w	r1, [r3, #-68]
 800fce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fce8:	4258      	negs	r0, r3
 800fcea:	f003 031f 	and.w	r3, r3, #31
 800fcee:	f000 001f 	and.w	r0, r0, #31
 800fcf2:	bf58      	it	pl
 800fcf4:	4243      	negpl	r3, r0
 800fcf6:	2001      	movs	r0, #1
 800fcf8:	fa00 f303 	lsl.w	r3, r0, r3
 800fcfc:	4319      	orrs	r1, r3
 800fcfe:	0093      	lsls	r3, r2, #2
 800fd00:	3360      	adds	r3, #96	; 0x60
 800fd02:	443b      	add	r3, r7
 800fd04:	f843 1c44 	str.w	r1, [r3, #-68]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
 800fd08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fd0a:	3301      	adds	r3, #1
 800fd0c:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      /* See if netconn of this socket had an error */
      if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
 800fd0e:	683b      	ldr	r3, [r7, #0]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d040      	beq.n	800fd96 <lwip_selscan+0x2d2>
 800fd14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	da00      	bge.n	800fd1c <lwip_selscan+0x258>
 800fd1a:	331f      	adds	r3, #31
 800fd1c:	115b      	asrs	r3, r3, #5
 800fd1e:	461a      	mov	r2, r3
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fd26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd28:	4259      	negs	r1, r3
 800fd2a:	f003 031f 	and.w	r3, r3, #31
 800fd2e:	f001 011f 	and.w	r1, r1, #31
 800fd32:	bf58      	it	pl
 800fd34:	424b      	negpl	r3, r1
 800fd36:	fa22 f303 	lsr.w	r3, r2, r3
 800fd3a:	f003 0301 	and.w	r3, r3, #1
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d029      	beq.n	800fd96 <lwip_selscan+0x2d2>
 800fd42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d026      	beq.n	800fd96 <lwip_selscan+0x2d2>
        FD_SET(i, &lexceptset);
 800fd48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	da00      	bge.n	800fd50 <lwip_selscan+0x28c>
 800fd4e:	331f      	adds	r3, #31
 800fd50:	115b      	asrs	r3, r3, #5
 800fd52:	461a      	mov	r2, r3
 800fd54:	0093      	lsls	r3, r2, #2
 800fd56:	3360      	adds	r3, #96	; 0x60
 800fd58:	443b      	add	r3, r7
 800fd5a:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 800fd5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd60:	4258      	negs	r0, r3
 800fd62:	f003 031f 	and.w	r3, r3, #31
 800fd66:	f000 001f 	and.w	r0, r0, #31
 800fd6a:	bf58      	it	pl
 800fd6c:	4243      	negpl	r3, r0
 800fd6e:	2001      	movs	r0, #1
 800fd70:	fa00 f303 	lsl.w	r3, r0, r3
 800fd74:	4319      	orrs	r1, r3
 800fd76:	0093      	lsls	r3, r2, #2
 800fd78:	3360      	adds	r3, #96	; 0x60
 800fd7a:	443b      	add	r3, r7
 800fd7c:	f843 1c4c 	str.w	r1, [r3, #-76]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
        nready++;
 800fd80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fd82:	3301      	adds	r3, #1
 800fd84:	65bb      	str	r3, [r7, #88]	; 0x58
 800fd86:	e006      	b.n	800fd96 <lwip_selscan+0x2d2>
      }
      done_socket(sock);
    } else {
      SYS_ARCH_UNPROTECT(lev);
 800fd88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fd8a:	f00b fda9 	bl	801b8e0 <sys_arch_unprotect>
      /* no a valid open socket */
      return -1;
 800fd8e:	f04f 33ff 	mov.w	r3, #4294967295
 800fd92:	e02b      	b.n	800fdec <lwip_selscan+0x328>
      continue;
 800fd94:	bf00      	nop
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800fd96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd98:	3301      	adds	r3, #1
 800fd9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fd9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	429a      	cmp	r2, r3
 800fda2:	f6ff aece 	blt.w	800fb42 <lwip_selscan+0x7e>
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
 800fda6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fda8:	461a      	mov	r2, r3
 800fdaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fdae:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fdb2:	e882 0003 	stmia.w	r2, {r0, r1}
  *writeset_out = lwriteset;
 800fdb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdb8:	461a      	mov	r2, r3
 800fdba:	f107 031c 	add.w	r3, r7, #28
 800fdbe:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fdc2:	e882 0003 	stmia.w	r2, {r0, r1}
  *exceptset_out = lexceptset;
 800fdc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fdc8:	461a      	mov	r2, r3
 800fdca:	f107 0314 	add.w	r3, r7, #20
 800fdce:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fdd2:	e882 0003 	stmia.w	r2, {r0, r1}

  LWIP_ASSERT("nready >= 0", nready >= 0);
 800fdd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	da06      	bge.n	800fdea <lwip_selscan+0x326>
 800fddc:	4b05      	ldr	r3, [pc, #20]	; (800fdf4 <lwip_selscan+0x330>)
 800fdde:	f240 7269 	movw	r2, #1897	; 0x769
 800fde2:	4905      	ldr	r1, [pc, #20]	; (800fdf8 <lwip_selscan+0x334>)
 800fde4:	4805      	ldr	r0, [pc, #20]	; (800fdfc <lwip_selscan+0x338>)
 800fde6:	f00b fdd5 	bl	801b994 <iprintf>
  return nready;
 800fdea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800fdec:	4618      	mov	r0, r3
 800fdee:	3760      	adds	r7, #96	; 0x60
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd80      	pop	{r7, pc}
 800fdf4:	0801d76c 	.word	0x0801d76c
 800fdf8:	0801da9c 	.word	0x0801da9c
 800fdfc:	0801d7c0 	.word	0x0801d7c0

0800fe00 <lwip_select>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

int
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
            struct timeval *timeout)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b0a0      	sub	sp, #128	; 0x80
 800fe04:	af04      	add	r7, sp, #16
 800fe06:	60f8      	str	r0, [r7, #12]
 800fe08:	60b9      	str	r1, [r7, #8]
 800fe0a:	607a      	str	r2, [r7, #4]
 800fe0c:	603b      	str	r3, [r7, #0]
  u32_t waitres = 0;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	66fb      	str	r3, [r7, #108]	; 0x6c
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select(%d, %p, %p, %p, tvsec=%"S32_F" tvusec=%"S32_F")\n",
                              maxfdp1, (void *)readset, (void *) writeset, (void *) exceptset,
                              timeout ? (s32_t)timeout->tv_sec : (s32_t) - 1,
                              timeout ? (s32_t)timeout->tv_usec : (s32_t) - 1));

  if ((maxfdp1 < 0) || (maxfdp1 > LWIP_SELECT_MAXNFDS)) {
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	db02      	blt.n	800fe1e <lwip_select+0x1e>
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	2b40      	cmp	r3, #64	; 0x40
 800fe1c:	dd05      	ble.n	800fe2a <lwip_select+0x2a>
    set_errno(EINVAL);
 800fe1e:	4b92      	ldr	r3, [pc, #584]	; (8010068 <lwip_select+0x268>)
 800fe20:	2216      	movs	r2, #22
 800fe22:	601a      	str	r2, [r3, #0]
    return -1;
 800fe24:	f04f 33ff 	mov.w	r3, #4294967295
 800fe28:	e1eb      	b.n	8010202 <lwip_select+0x402>

  lwip_select_inc_sockets_used(maxfdp1, readset, writeset, exceptset, &used_sockets);

  /* Go through each socket in each list to count number of sockets which
     currently match */
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 800fe2a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fe2e:	9302      	str	r3, [sp, #8]
 800fe30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800fe34:	9301      	str	r3, [sp, #4]
 800fe36:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800fe3a:	9300      	str	r3, [sp, #0]
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	687a      	ldr	r2, [r7, #4]
 800fe40:	68b9      	ldr	r1, [r7, #8]
 800fe42:	68f8      	ldr	r0, [r7, #12]
 800fe44:	f7ff fe3e 	bl	800fac4 <lwip_selscan>
 800fe48:	66b8      	str	r0, [r7, #104]	; 0x68

  if (nready < 0) {
 800fe4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	da05      	bge.n	800fe5c <lwip_select+0x5c>
    /* one of the sockets in one of the fd_sets was invalid */
    set_errno(EBADF);
 800fe50:	4b85      	ldr	r3, [pc, #532]	; (8010068 <lwip_select+0x268>)
 800fe52:	2209      	movs	r2, #9
 800fe54:	601a      	str	r2, [r3, #0]
    lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
    return -1;
 800fe56:	f04f 33ff 	mov.w	r3, #4294967295
 800fe5a:	e1d2      	b.n	8010202 <lwip_select+0x402>
  } else if (nready > 0) {
 800fe5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	f300 81ad 	bgt.w	80101be <lwip_select+0x3be>
    /* one or more sockets are set, no need to wait */
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
  } else {
    /* If we don't have any current events, then suspend if we are supposed to */
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
 800fe64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d009      	beq.n	800fe7e <lwip_select+0x7e>
 800fe6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fe6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe70:	4313      	orrs	r3, r2
 800fe72:	d104      	bne.n	800fe7e <lwip_select+0x7e>
 800fe74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fe76:	689b      	ldr	r3, [r3, #8]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	f000 81a0 	beq.w	80101be <lwip_select+0x3be>
         list is only valid while we are in this function, so it's ok
         to use local variables (unless we're running in MPU compatible
         mode). */
      API_SELECT_CB_VAR_DECLARE(select_cb);
      API_SELECT_CB_VAR_ALLOC(select_cb, set_errno(ENOMEM); lwip_select_dec_sockets_used(maxfdp1, &used_sockets); return -1);
      memset(&API_SELECT_CB_VAR_REF(select_cb), 0, sizeof(struct lwip_select_cb));
 800fe7e:	f107 0310 	add.w	r3, r7, #16
 800fe82:	2224      	movs	r2, #36	; 0x24
 800fe84:	2100      	movs	r1, #0
 800fe86:	4618      	mov	r0, r3
 800fe88:	f00b fd7c 	bl	801b984 <memset>

      API_SELECT_CB_VAR_REF(select_cb).readset = readset;
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	61bb      	str	r3, [r7, #24]
      API_SELECT_CB_VAR_REF(select_cb).writeset = writeset;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	61fb      	str	r3, [r7, #28]
      API_SELECT_CB_VAR_REF(select_cb).exceptset = exceptset;
 800fe94:	683b      	ldr	r3, [r7, #0]
 800fe96:	623b      	str	r3, [r7, #32]
#if LWIP_NETCONN_SEM_PER_THREAD
      API_SELECT_CB_VAR_REF(select_cb).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD */
      if (sys_sem_new(&API_SELECT_CB_VAR_REF(select_cb).sem, 0) != ERR_OK) {
 800fe98:	f107 0310 	add.w	r3, r7, #16
 800fe9c:	3320      	adds	r3, #32
 800fe9e:	2100      	movs	r1, #0
 800fea0:	4618      	mov	r0, r3
 800fea2:	f00b fc23 	bl	801b6ec <sys_sem_new>
 800fea6:	4603      	mov	r3, r0
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d005      	beq.n	800feb8 <lwip_select+0xb8>
        /* failed to create semaphore */
        set_errno(ENOMEM);
 800feac:	4b6e      	ldr	r3, [pc, #440]	; (8010068 <lwip_select+0x268>)
 800feae:	220c      	movs	r2, #12
 800feb0:	601a      	str	r2, [r3, #0]
        lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
        API_SELECT_CB_VAR_FREE(select_cb);
        return -1;
 800feb2:	f04f 33ff 	mov.w	r3, #4294967295
 800feb6:	e1a4      	b.n	8010202 <lwip_select+0x402>
      }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

      lwip_link_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 800feb8:	f107 0310 	add.w	r3, r7, #16
 800febc:	4618      	mov	r0, r3
 800febe:	f7ff fd97 	bl	800f9f0 <lwip_link_select_cb>

      /* Increase select_waiting for each socket we are interested in */
      maxfdp2 = maxfdp1;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	65fb      	str	r3, [r7, #92]	; 0x5c
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800fec6:	2300      	movs	r3, #0
 800fec8:	663b      	str	r3, [r7, #96]	; 0x60
 800feca:	e086      	b.n	800ffda <lwip_select+0x1da>
        if ((readset && FD_ISSET(i, readset)) ||
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d016      	beq.n	800ff00 <lwip_select+0x100>
 800fed2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	da00      	bge.n	800feda <lwip_select+0xda>
 800fed8:	331f      	adds	r3, #31
 800feda:	115b      	asrs	r3, r3, #5
 800fedc:	461a      	mov	r2, r3
 800fede:	68bb      	ldr	r3, [r7, #8]
 800fee0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fee4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fee6:	4259      	negs	r1, r3
 800fee8:	f003 031f 	and.w	r3, r3, #31
 800feec:	f001 011f 	and.w	r1, r1, #31
 800fef0:	bf58      	it	pl
 800fef2:	424b      	negpl	r3, r1
 800fef4:	fa22 f303 	lsr.w	r3, r2, r3
 800fef8:	f003 0301 	and.w	r3, r3, #1
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d133      	bne.n	800ff68 <lwip_select+0x168>
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d016      	beq.n	800ff34 <lwip_select+0x134>
            (writeset && FD_ISSET(i, writeset)) ||
 800ff06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	da00      	bge.n	800ff0e <lwip_select+0x10e>
 800ff0c:	331f      	adds	r3, #31
 800ff0e:	115b      	asrs	r3, r3, #5
 800ff10:	461a      	mov	r2, r3
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ff18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff1a:	4259      	negs	r1, r3
 800ff1c:	f003 031f 	and.w	r3, r3, #31
 800ff20:	f001 011f 	and.w	r1, r1, #31
 800ff24:	bf58      	it	pl
 800ff26:	424b      	negpl	r3, r1
 800ff28:	fa22 f303 	lsr.w	r3, r2, r3
 800ff2c:	f003 0301 	and.w	r3, r3, #1
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d119      	bne.n	800ff68 <lwip_select+0x168>
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d04c      	beq.n	800ffd4 <lwip_select+0x1d4>
            (exceptset && FD_ISSET(i, exceptset))) {
 800ff3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	da00      	bge.n	800ff42 <lwip_select+0x142>
 800ff40:	331f      	adds	r3, #31
 800ff42:	115b      	asrs	r3, r3, #5
 800ff44:	461a      	mov	r2, r3
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ff4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff4e:	4259      	negs	r1, r3
 800ff50:	f003 031f 	and.w	r3, r3, #31
 800ff54:	f001 011f 	and.w	r1, r1, #31
 800ff58:	bf58      	it	pl
 800ff5a:	424b      	negpl	r3, r1
 800ff5c:	fa22 f303 	lsr.w	r3, r2, r3
 800ff60:	f003 0301 	and.w	r3, r3, #1
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d035      	beq.n	800ffd4 <lwip_select+0x1d4>
          struct lwip_sock *sock;
          SYS_ARCH_PROTECT(lev);
 800ff68:	f00b fcac 	bl	801b8c4 <sys_arch_protect>
 800ff6c:	65b8      	str	r0, [r7, #88]	; 0x58
          sock = tryget_socket_unconn_locked(i);
 800ff6e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800ff70:	f7ff f8b5 	bl	800f0de <tryget_socket_unconn_locked>
 800ff74:	6578      	str	r0, [r7, #84]	; 0x54
          if (sock != NULL) {
 800ff76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d01f      	beq.n	800ffbc <lwip_select+0x1bc>
            sock->select_waiting++;
 800ff7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff7e:	7b9b      	ldrb	r3, [r3, #14]
 800ff80:	3301      	adds	r3, #1
 800ff82:	b2da      	uxtb	r2, r3
 800ff84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff86:	739a      	strb	r2, [r3, #14]
            if (sock->select_waiting == 0) {
 800ff88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff8a:	7b9b      	ldrb	r3, [r3, #14]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d111      	bne.n	800ffb4 <lwip_select+0x1b4>
              /* overflow - too many threads waiting */
              sock->select_waiting--;
 800ff90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff92:	7b9b      	ldrb	r3, [r3, #14]
 800ff94:	3b01      	subs	r3, #1
 800ff96:	b2da      	uxtb	r2, r3
 800ff98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff9a:	739a      	strb	r2, [r3, #14]
              nready = -1;
 800ff9c:	f04f 33ff 	mov.w	r3, #4294967295
 800ffa0:	66bb      	str	r3, [r7, #104]	; 0x68
              maxfdp2 = i;
 800ffa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ffa4:	65fb      	str	r3, [r7, #92]	; 0x5c
              SYS_ARCH_UNPROTECT(lev);
 800ffa6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ffa8:	f00b fc9a 	bl	801b8e0 <sys_arch_unprotect>
              done_socket(sock);
              set_errno(EBUSY);
 800ffac:	4b2e      	ldr	r3, [pc, #184]	; (8010068 <lwip_select+0x268>)
 800ffae:	2210      	movs	r2, #16
 800ffb0:	601a      	str	r2, [r3, #0]
              break;
 800ffb2:	e017      	b.n	800ffe4 <lwip_select+0x1e4>
            }
            SYS_ARCH_UNPROTECT(lev);
 800ffb4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ffb6:	f00b fc93 	bl	801b8e0 <sys_arch_unprotect>
 800ffba:	e00b      	b.n	800ffd4 <lwip_select+0x1d4>
            done_socket(sock);
          } else {
            /* Not a valid socket */
            nready = -1;
 800ffbc:	f04f 33ff 	mov.w	r3, #4294967295
 800ffc0:	66bb      	str	r3, [r7, #104]	; 0x68
            maxfdp2 = i;
 800ffc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ffc4:	65fb      	str	r3, [r7, #92]	; 0x5c
            SYS_ARCH_UNPROTECT(lev);
 800ffc6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ffc8:	f00b fc8a 	bl	801b8e0 <sys_arch_unprotect>
            set_errno(EBADF);
 800ffcc:	4b26      	ldr	r3, [pc, #152]	; (8010068 <lwip_select+0x268>)
 800ffce:	2209      	movs	r2, #9
 800ffd0:	601a      	str	r2, [r3, #0]
            break;
 800ffd2:	e007      	b.n	800ffe4 <lwip_select+0x1e4>
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800ffd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ffd6:	3301      	adds	r3, #1
 800ffd8:	663b      	str	r3, [r7, #96]	; 0x60
 800ffda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	429a      	cmp	r2, r3
 800ffe0:	f6ff af74 	blt.w	800fecc <lwip_select+0xcc>
          }
        }
      }

      if (nready >= 0) {
 800ffe4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	db3b      	blt.n	8010062 <lwip_select+0x262>
        /* Call lwip_selscan again: there could have been events between
           the last scan (without us on the list) and putting us on the list! */
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 800ffea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ffee:	9302      	str	r3, [sp, #8]
 800fff0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800fff4:	9301      	str	r3, [sp, #4]
 800fff6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800fffa:	9300      	str	r3, [sp, #0]
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	687a      	ldr	r2, [r7, #4]
 8010000:	68b9      	ldr	r1, [r7, #8]
 8010002:	68f8      	ldr	r0, [r7, #12]
 8010004:	f7ff fd5e 	bl	800fac4 <lwip_selscan>
 8010008:	66b8      	str	r0, [r7, #104]	; 0x68
        if (!nready) {
 801000a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801000c:	2b00      	cmp	r3, #0
 801000e:	d128      	bne.n	8010062 <lwip_select+0x262>
          /* Still none ready, just wait to be woken */
          if (timeout == 0) {
 8010010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010012:	2b00      	cmp	r3, #0
 8010014:	d102      	bne.n	801001c <lwip_select+0x21c>
            /* Wait forever */
            msectimeout = 0;
 8010016:	2300      	movs	r3, #0
 8010018:	667b      	str	r3, [r7, #100]	; 0x64
 801001a:	e01a      	b.n	8010052 <lwip_select+0x252>
          } else {
            long msecs_long = ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500) / 1000));
 801001c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801001e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010026:	fb03 f202 	mul.w	r2, r3, r2
 801002a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801002c:	689b      	ldr	r3, [r3, #8]
 801002e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8010032:	490e      	ldr	r1, [pc, #56]	; (801006c <lwip_select+0x26c>)
 8010034:	fb81 0103 	smull	r0, r1, r1, r3
 8010038:	1189      	asrs	r1, r1, #6
 801003a:	17db      	asrs	r3, r3, #31
 801003c:	1acb      	subs	r3, r1, r3
 801003e:	4413      	add	r3, r2
 8010040:	653b      	str	r3, [r7, #80]	; 0x50
            if (msecs_long <= 0) {
 8010042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010044:	2b00      	cmp	r3, #0
 8010046:	dc02      	bgt.n	801004e <lwip_select+0x24e>
              /* Wait 1ms at least (0 means wait forever) */
              msectimeout = 1;
 8010048:	2301      	movs	r3, #1
 801004a:	667b      	str	r3, [r7, #100]	; 0x64
 801004c:	e001      	b.n	8010052 <lwip_select+0x252>
            } else {
              msectimeout = (u32_t)msecs_long;
 801004e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010050:	667b      	str	r3, [r7, #100]	; 0x64
            }
          }

          waitres = sys_arch_sem_wait(SELECT_SEM_PTR(API_SELECT_CB_VAR_REF(select_cb).sem), msectimeout);
 8010052:	f107 0310 	add.w	r3, r7, #16
 8010056:	3320      	adds	r3, #32
 8010058:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801005a:	4618      	mov	r0, r3
 801005c:	f00b fb6b 	bl	801b736 <sys_arch_sem_wait>
 8010060:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif
        }
      }

      /* Decrease select_waiting for each socket we are interested in */
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 8010062:	2300      	movs	r3, #0
 8010064:	663b      	str	r3, [r7, #96]	; 0x60
 8010066:	e080      	b.n	801016a <lwip_select+0x36a>
 8010068:	200111e8 	.word	0x200111e8
 801006c:	10624dd3 	.word	0x10624dd3
        if ((readset && FD_ISSET(i, readset)) ||
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d016      	beq.n	80100a4 <lwip_select+0x2a4>
 8010076:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010078:	2b00      	cmp	r3, #0
 801007a:	da00      	bge.n	801007e <lwip_select+0x27e>
 801007c:	331f      	adds	r3, #31
 801007e:	115b      	asrs	r3, r3, #5
 8010080:	461a      	mov	r2, r3
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010088:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801008a:	4259      	negs	r1, r3
 801008c:	f003 031f 	and.w	r3, r3, #31
 8010090:	f001 011f 	and.w	r1, r1, #31
 8010094:	bf58      	it	pl
 8010096:	424b      	negpl	r3, r1
 8010098:	fa22 f303 	lsr.w	r3, r2, r3
 801009c:	f003 0301 	and.w	r3, r3, #1
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d133      	bne.n	801010c <lwip_select+0x30c>
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d016      	beq.n	80100d8 <lwip_select+0x2d8>
            (writeset && FD_ISSET(i, writeset)) ||
 80100aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	da00      	bge.n	80100b2 <lwip_select+0x2b2>
 80100b0:	331f      	adds	r3, #31
 80100b2:	115b      	asrs	r3, r3, #5
 80100b4:	461a      	mov	r2, r3
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80100bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80100be:	4259      	negs	r1, r3
 80100c0:	f003 031f 	and.w	r3, r3, #31
 80100c4:	f001 011f 	and.w	r1, r1, #31
 80100c8:	bf58      	it	pl
 80100ca:	424b      	negpl	r3, r1
 80100cc:	fa22 f303 	lsr.w	r3, r2, r3
 80100d0:	f003 0301 	and.w	r3, r3, #1
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d119      	bne.n	801010c <lwip_select+0x30c>
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d042      	beq.n	8010164 <lwip_select+0x364>
            (exceptset && FD_ISSET(i, exceptset))) {
 80100de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	da00      	bge.n	80100e6 <lwip_select+0x2e6>
 80100e4:	331f      	adds	r3, #31
 80100e6:	115b      	asrs	r3, r3, #5
 80100e8:	461a      	mov	r2, r3
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80100f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80100f2:	4259      	negs	r1, r3
 80100f4:	f003 031f 	and.w	r3, r3, #31
 80100f8:	f001 011f 	and.w	r1, r1, #31
 80100fc:	bf58      	it	pl
 80100fe:	424b      	negpl	r3, r1
 8010100:	fa22 f303 	lsr.w	r3, r2, r3
 8010104:	f003 0301 	and.w	r3, r3, #1
 8010108:	2b00      	cmp	r3, #0
 801010a:	d02b      	beq.n	8010164 <lwip_select+0x364>
          struct lwip_sock *sock;
          SYS_ARCH_PROTECT(lev);
 801010c:	f00b fbda 	bl	801b8c4 <sys_arch_protect>
 8010110:	65b8      	str	r0, [r7, #88]	; 0x58
          sock = tryget_socket_unconn_locked(i);
 8010112:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8010114:	f7fe ffe3 	bl	800f0de <tryget_socket_unconn_locked>
 8010118:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (sock != NULL) {
 801011a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801011c:	2b00      	cmp	r3, #0
 801011e:	d018      	beq.n	8010152 <lwip_select+0x352>
            /* for now, handle select_waiting==0... */
            LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
 8010120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010122:	7b9b      	ldrb	r3, [r3, #14]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d106      	bne.n	8010136 <lwip_select+0x336>
 8010128:	4b38      	ldr	r3, [pc, #224]	; (801020c <lwip_select+0x40c>)
 801012a:	f640 023c 	movw	r2, #2108	; 0x83c
 801012e:	4938      	ldr	r1, [pc, #224]	; (8010210 <lwip_select+0x410>)
 8010130:	4838      	ldr	r0, [pc, #224]	; (8010214 <lwip_select+0x414>)
 8010132:	f00b fc2f 	bl	801b994 <iprintf>
            if (sock->select_waiting > 0) {
 8010136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010138:	7b9b      	ldrb	r3, [r3, #14]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d005      	beq.n	801014a <lwip_select+0x34a>
              sock->select_waiting--;
 801013e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010140:	7b9b      	ldrb	r3, [r3, #14]
 8010142:	3b01      	subs	r3, #1
 8010144:	b2da      	uxtb	r2, r3
 8010146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010148:	739a      	strb	r2, [r3, #14]
            }
            SYS_ARCH_UNPROTECT(lev);
 801014a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801014c:	f00b fbc8 	bl	801b8e0 <sys_arch_unprotect>
 8010150:	e008      	b.n	8010164 <lwip_select+0x364>
            done_socket(sock);
          } else {
            SYS_ARCH_UNPROTECT(lev);
 8010152:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8010154:	f00b fbc4 	bl	801b8e0 <sys_arch_unprotect>
            /* Not a valid socket */
            nready = -1;
 8010158:	f04f 33ff 	mov.w	r3, #4294967295
 801015c:	66bb      	str	r3, [r7, #104]	; 0x68
            set_errno(EBADF);
 801015e:	4b2e      	ldr	r3, [pc, #184]	; (8010218 <lwip_select+0x418>)
 8010160:	2209      	movs	r2, #9
 8010162:	601a      	str	r2, [r3, #0]
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 8010164:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010166:	3301      	adds	r3, #1
 8010168:	663b      	str	r3, [r7, #96]	; 0x60
 801016a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801016c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801016e:	429a      	cmp	r2, r3
 8010170:	f6ff af7e 	blt.w	8010070 <lwip_select+0x270>
          }
        }
      }

      lwip_unlink_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 8010174:	f107 0310 	add.w	r3, r7, #16
 8010178:	4618      	mov	r0, r3
 801017a:	f7ff fc5b 	bl	800fa34 <lwip_unlink_select_cb>
      if (API_SELECT_CB_VAR_REF(select_cb).sem_signalled && (!waited || (waitres == SYS_ARCH_TIMEOUT))) {
        /* don't leave the thread-local semaphore signalled */
        sys_arch_sem_wait(API_SELECT_CB_VAR_REF(select_cb).sem, 1);
      }
#else /* LWIP_NETCONN_SEM_PER_THREAD */
      sys_sem_free(&API_SELECT_CB_VAR_REF(select_cb).sem);
 801017e:	f107 0310 	add.w	r3, r7, #16
 8010182:	3320      	adds	r3, #32
 8010184:	4618      	mov	r0, r3
 8010186:	f00b fb14 	bl	801b7b2 <sys_sem_free>
#endif /* LWIP_NETCONN_SEM_PER_THREAD */
      API_SELECT_CB_VAR_FREE(select_cb);

      if (nready < 0) {
 801018a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801018c:	2b00      	cmp	r3, #0
 801018e:	da02      	bge.n	8010196 <lwip_select+0x396>
        /* This happens when a socket got closed while waiting */
        lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
        return -1;
 8010190:	f04f 33ff 	mov.w	r3, #4294967295
 8010194:	e035      	b.n	8010202 <lwip_select+0x402>
      }

      if (waitres == SYS_ARCH_TIMEOUT) {
 8010196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010198:	f1b3 3fff 	cmp.w	r3, #4294967295
 801019c:	d00f      	beq.n	80101be <lwip_select+0x3be>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: timeout expired\n"));
        /* This is OK as the local fdsets are empty and nready is zero,
           or we would have returned earlier. */
      } else {
        /* See what's set now after waiting */
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 801019e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80101a2:	9302      	str	r3, [sp, #8]
 80101a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80101a8:	9301      	str	r3, [sp, #4]
 80101aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80101ae:	9300      	str	r3, [sp, #0]
 80101b0:	683b      	ldr	r3, [r7, #0]
 80101b2:	687a      	ldr	r2, [r7, #4]
 80101b4:	68b9      	ldr	r1, [r7, #8]
 80101b6:	68f8      	ldr	r0, [r7, #12]
 80101b8:	f7ff fc84 	bl	800fac4 <lwip_selscan>
 80101bc:	66b8      	str	r0, [r7, #104]	; 0x68
    }
  }

  lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
  set_errno(0);
  if (readset) {
 80101be:	68bb      	ldr	r3, [r7, #8]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d007      	beq.n	80101d4 <lwip_select+0x3d4>
    *readset = lreadset;
 80101c4:	68bb      	ldr	r3, [r7, #8]
 80101c6:	461a      	mov	r2, r3
 80101c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80101cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80101d0:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  if (writeset) {
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d007      	beq.n	80101ea <lwip_select+0x3ea>
    *writeset = lwriteset;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	461a      	mov	r2, r3
 80101de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80101e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80101e6:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  if (exceptset) {
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d007      	beq.n	8010200 <lwip_select+0x400>
    *exceptset = lexceptset;
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	461a      	mov	r2, r3
 80101f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80101f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80101fc:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  return nready;
 8010200:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8010202:	4618      	mov	r0, r3
 8010204:	3770      	adds	r7, #112	; 0x70
 8010206:	46bd      	mov	sp, r7
 8010208:	bd80      	pop	{r7, pc}
 801020a:	bf00      	nop
 801020c:	0801d76c 	.word	0x0801d76c
 8010210:	0801daa8 	.word	0x0801daa8
 8010214:	0801d7c0 	.word	0x0801d7c0
 8010218:	200111e8 	.word	0x200111e8

0801021c <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 801021c:	b480      	push	{r7}
 801021e:	b087      	sub	sp, #28
 8010220:	af00      	add	r7, sp, #0
 8010222:	60f8      	str	r0, [r7, #12]
 8010224:	60b9      	str	r1, [r7, #8]
 8010226:	607a      	str	r2, [r7, #4]
 8010228:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 801022a:	2300      	movs	r3, #0
 801022c:	617b      	str	r3, [r7, #20]
 801022e:	e02c      	b.n	801028a <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	695a      	ldr	r2, [r3, #20]
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	00db      	lsls	r3, r3, #3
 8010238:	4413      	add	r3, r2
 801023a:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 801023c:	693b      	ldr	r3, [r7, #16]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	68ba      	ldr	r2, [r7, #8]
 8010242:	429a      	cmp	r2, r3
 8010244:	d11e      	bne.n	8010284 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d009      	beq.n	8010260 <lwip_poll_should_wake+0x44>
 801024c:	693b      	ldr	r3, [r7, #16]
 801024e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010252:	b29b      	uxth	r3, r3
 8010254:	f003 0301 	and.w	r3, r3, #1
 8010258:	2b00      	cmp	r3, #0
 801025a:	d001      	beq.n	8010260 <lwip_poll_should_wake+0x44>
        return 1;
 801025c:	2301      	movs	r3, #1
 801025e:	e01a      	b.n	8010296 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d009      	beq.n	801027a <lwip_poll_should_wake+0x5e>
 8010266:	693b      	ldr	r3, [r7, #16]
 8010268:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801026c:	b29b      	uxth	r3, r3
 801026e:	f003 0302 	and.w	r3, r3, #2
 8010272:	2b00      	cmp	r3, #0
 8010274:	d001      	beq.n	801027a <lwip_poll_should_wake+0x5e>
        return 1;
 8010276:	2301      	movs	r3, #1
 8010278:	e00d      	b.n	8010296 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 801027a:	6a3b      	ldr	r3, [r7, #32]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d001      	beq.n	8010284 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 8010280:	2301      	movs	r3, #1
 8010282:	e008      	b.n	8010296 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8010284:	697b      	ldr	r3, [r7, #20]
 8010286:	3301      	adds	r3, #1
 8010288:	617b      	str	r3, [r7, #20]
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	699b      	ldr	r3, [r3, #24]
 801028e:	697a      	ldr	r2, [r7, #20]
 8010290:	429a      	cmp	r2, r3
 8010292:	d3cd      	bcc.n	8010230 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 8010294:	2300      	movs	r3, #0
}
 8010296:	4618      	mov	r0, r3
 8010298:	371c      	adds	r7, #28
 801029a:	46bd      	mov	sp, r7
 801029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a0:	4770      	bx	lr
	...

080102a4 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b08a      	sub	sp, #40	; 0x28
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
 80102ac:	460b      	mov	r3, r1
 80102ae:	70fb      	strb	r3, [r7, #3]
 80102b0:	4613      	mov	r3, r2
 80102b2:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	f000 80a4 	beq.w	8010404 <event_callback+0x160>
    s = conn->socket;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	699b      	ldr	r3, [r3, #24]
 80102c0:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 80102c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	da18      	bge.n	80102fa <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 80102c8:	f00b fafc 	bl	801b8c4 <sys_arch_protect>
 80102cc:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	699b      	ldr	r3, [r3, #24]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	da0b      	bge.n	80102ee <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 80102d6:	78fb      	ldrb	r3, [r7, #3]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d104      	bne.n	80102e6 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	699b      	ldr	r3, [r3, #24]
 80102e0:	1e5a      	subs	r2, r3, #1
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 80102e6:	69f8      	ldr	r0, [r7, #28]
 80102e8:	f00b fafa 	bl	801b8e0 <sys_arch_unprotect>
        return;
 80102ec:	e08d      	b.n	801040a <event_callback+0x166>
      }
      s = conn->socket;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	699b      	ldr	r3, [r3, #24]
 80102f2:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 80102f4:	69f8      	ldr	r0, [r7, #28]
 80102f6:	f00b faf3 	bl	801b8e0 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 80102fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80102fc:	f7fe ff12 	bl	800f124 <get_socket>
 8010300:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 8010302:	69bb      	ldr	r3, [r7, #24]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d07f      	beq.n	8010408 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 8010308:	2301      	movs	r3, #1
 801030a:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 801030c:	f00b fada 	bl	801b8c4 <sys_arch_protect>
 8010310:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 8010312:	78fb      	ldrb	r3, [r7, #3]
 8010314:	2b04      	cmp	r3, #4
 8010316:	d83e      	bhi.n	8010396 <event_callback+0xf2>
 8010318:	a201      	add	r2, pc, #4	; (adr r2, 8010320 <event_callback+0x7c>)
 801031a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801031e:	bf00      	nop
 8010320:	08010335 	.word	0x08010335
 8010324:	08010357 	.word	0x08010357
 8010328:	0801036f 	.word	0x0801036f
 801032c:	08010383 	.word	0x08010383
 8010330:	0801038f 	.word	0x0801038f
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 8010334:	69bb      	ldr	r3, [r7, #24]
 8010336:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801033a:	b29b      	uxth	r3, r3
 801033c:	3301      	adds	r3, #1
 801033e:	b29b      	uxth	r3, r3
 8010340:	b21a      	sxth	r2, r3
 8010342:	69bb      	ldr	r3, [r7, #24]
 8010344:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 8010346:	69bb      	ldr	r3, [r7, #24]
 8010348:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801034c:	2b01      	cmp	r3, #1
 801034e:	dd2a      	ble.n	80103a6 <event_callback+0x102>
        check_waiters = 0;
 8010350:	2300      	movs	r3, #0
 8010352:	623b      	str	r3, [r7, #32]
      }
      break;
 8010354:	e027      	b.n	80103a6 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 8010356:	69bb      	ldr	r3, [r7, #24]
 8010358:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801035c:	b29b      	uxth	r3, r3
 801035e:	3b01      	subs	r3, #1
 8010360:	b29b      	uxth	r3, r3
 8010362:	b21a      	sxth	r2, r3
 8010364:	69bb      	ldr	r3, [r7, #24]
 8010366:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 8010368:	2300      	movs	r3, #0
 801036a:	623b      	str	r3, [r7, #32]
      break;
 801036c:	e01c      	b.n	80103a8 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 801036e:	69bb      	ldr	r3, [r7, #24]
 8010370:	895b      	ldrh	r3, [r3, #10]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d001      	beq.n	801037a <event_callback+0xd6>
        check_waiters = 0;
 8010376:	2300      	movs	r3, #0
 8010378:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 801037a:	69bb      	ldr	r3, [r7, #24]
 801037c:	2201      	movs	r2, #1
 801037e:	815a      	strh	r2, [r3, #10]
      break;
 8010380:	e012      	b.n	80103a8 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 8010382:	69bb      	ldr	r3, [r7, #24]
 8010384:	2200      	movs	r2, #0
 8010386:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 8010388:	2300      	movs	r3, #0
 801038a:	623b      	str	r3, [r7, #32]
      break;
 801038c:	e00c      	b.n	80103a8 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 801038e:	69bb      	ldr	r3, [r7, #24]
 8010390:	2201      	movs	r2, #1
 8010392:	819a      	strh	r2, [r3, #12]
      break;
 8010394:	e008      	b.n	80103a8 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 8010396:	4b1e      	ldr	r3, [pc, #120]	; (8010410 <event_callback+0x16c>)
 8010398:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 801039c:	491d      	ldr	r1, [pc, #116]	; (8010414 <event_callback+0x170>)
 801039e:	481e      	ldr	r0, [pc, #120]	; (8010418 <event_callback+0x174>)
 80103a0:	f00b faf8 	bl	801b994 <iprintf>
      break;
 80103a4:	e000      	b.n	80103a8 <event_callback+0x104>
      break;
 80103a6:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 80103a8:	69bb      	ldr	r3, [r7, #24]
 80103aa:	7b9b      	ldrb	r3, [r3, #14]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d025      	beq.n	80103fc <event_callback+0x158>
 80103b0:	6a3b      	ldr	r3, [r7, #32]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d022      	beq.n	80103fc <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 80103b6:	69bb      	ldr	r3, [r7, #24]
 80103b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	bfcc      	ite	gt
 80103c0:	2301      	movgt	r3, #1
 80103c2:	2300      	movle	r3, #0
 80103c4:	b2db      	uxtb	r3, r3
 80103c6:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 80103c8:	69bb      	ldr	r3, [r7, #24]
 80103ca:	895b      	ldrh	r3, [r3, #10]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	bf14      	ite	ne
 80103d0:	2301      	movne	r3, #1
 80103d2:	2300      	moveq	r3, #0
 80103d4:	b2db      	uxtb	r3, r3
 80103d6:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 80103d8:	69bb      	ldr	r3, [r7, #24]
 80103da:	899b      	ldrh	r3, [r3, #12]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	bf14      	ite	ne
 80103e0:	2301      	movne	r3, #1
 80103e2:	2300      	moveq	r3, #0
 80103e4:	b2db      	uxtb	r3, r3
 80103e6:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 80103e8:	69f8      	ldr	r0, [r7, #28]
 80103ea:	f00b fa79 	bl	801b8e0 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	693a      	ldr	r2, [r7, #16]
 80103f2:	6979      	ldr	r1, [r7, #20]
 80103f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80103f6:	f000 f811 	bl	801041c <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 80103fa:	e006      	b.n	801040a <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 80103fc:	69f8      	ldr	r0, [r7, #28]
 80103fe:	f00b fa6f 	bl	801b8e0 <sys_arch_unprotect>
 8010402:	e002      	b.n	801040a <event_callback+0x166>
    return;
 8010404:	bf00      	nop
 8010406:	e000      	b.n	801040a <event_callback+0x166>
      return;
 8010408:	bf00      	nop
  }
  done_socket(sock);
}
 801040a:	3728      	adds	r7, #40	; 0x28
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}
 8010410:	0801d76c 	.word	0x0801d76c
 8010414:	0801dae8 	.word	0x0801dae8
 8010418:	0801d7c0 	.word	0x0801d7c0

0801041c <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b088      	sub	sp, #32
 8010420:	af02      	add	r7, sp, #8
 8010422:	60f8      	str	r0, [r7, #12]
 8010424:	60b9      	str	r1, [r7, #8]
 8010426:	607a      	str	r2, [r7, #4]
 8010428:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 801042a:	4b4b      	ldr	r3, [pc, #300]	; (8010558 <select_check_waiters+0x13c>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	617b      	str	r3, [r7, #20]
 8010430:	e088      	b.n	8010544 <select_check_waiters+0x128>
    if (scb->sem_signalled == 0) {
 8010432:	697b      	ldr	r3, [r7, #20]
 8010434:	69db      	ldr	r3, [r3, #28]
 8010436:	2b00      	cmp	r3, #0
 8010438:	f040 8081 	bne.w	801053e <select_check_waiters+0x122>
      /* semaphore not signalled yet */
      int do_signal = 0;
 801043c:	2300      	movs	r3, #0
 801043e:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 8010440:	697b      	ldr	r3, [r7, #20]
 8010442:	695b      	ldr	r3, [r3, #20]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d009      	beq.n	801045c <select_check_waiters+0x40>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	9300      	str	r3, [sp, #0]
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	68ba      	ldr	r2, [r7, #8]
 8010450:	68f9      	ldr	r1, [r7, #12]
 8010452:	6978      	ldr	r0, [r7, #20]
 8010454:	f7ff fee2 	bl	801021c <lwip_poll_should_wake>
 8010458:	6138      	str	r0, [r7, #16]
 801045a:	e065      	b.n	8010528 <select_check_waiters+0x10c>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d01c      	beq.n	801049c <select_check_waiters+0x80>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	689b      	ldr	r3, [r3, #8]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d018      	beq.n	801049c <select_check_waiters+0x80>
 801046a:	697b      	ldr	r3, [r7, #20]
 801046c:	689a      	ldr	r2, [r3, #8]
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	2b00      	cmp	r3, #0
 8010472:	da00      	bge.n	8010476 <select_check_waiters+0x5a>
 8010474:	331f      	adds	r3, #31
 8010476:	115b      	asrs	r3, r3, #5
 8010478:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	4259      	negs	r1, r3
 8010480:	f003 031f 	and.w	r3, r3, #31
 8010484:	f001 011f 	and.w	r1, r1, #31
 8010488:	bf58      	it	pl
 801048a:	424b      	negpl	r3, r1
 801048c:	fa22 f303 	lsr.w	r3, r2, r3
 8010490:	f003 0301 	and.w	r3, r3, #1
 8010494:	2b00      	cmp	r3, #0
 8010496:	d001      	beq.n	801049c <select_check_waiters+0x80>
            do_signal = 1;
 8010498:	2301      	movs	r3, #1
 801049a:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d01f      	beq.n	80104e2 <select_check_waiters+0xc6>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 80104a2:	693b      	ldr	r3, [r7, #16]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d11c      	bne.n	80104e2 <select_check_waiters+0xc6>
 80104a8:	697b      	ldr	r3, [r7, #20]
 80104aa:	68db      	ldr	r3, [r3, #12]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d018      	beq.n	80104e2 <select_check_waiters+0xc6>
 80104b0:	697b      	ldr	r3, [r7, #20]
 80104b2:	68da      	ldr	r2, [r3, #12]
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	da00      	bge.n	80104bc <select_check_waiters+0xa0>
 80104ba:	331f      	adds	r3, #31
 80104bc:	115b      	asrs	r3, r3, #5
 80104be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	4259      	negs	r1, r3
 80104c6:	f003 031f 	and.w	r3, r3, #31
 80104ca:	f001 011f 	and.w	r1, r1, #31
 80104ce:	bf58      	it	pl
 80104d0:	424b      	negpl	r3, r1
 80104d2:	fa22 f303 	lsr.w	r3, r2, r3
 80104d6:	f003 0301 	and.w	r3, r3, #1
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d001      	beq.n	80104e2 <select_check_waiters+0xc6>
            do_signal = 1;
 80104de:	2301      	movs	r3, #1
 80104e0:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 80104e2:	683b      	ldr	r3, [r7, #0]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d01f      	beq.n	8010528 <select_check_waiters+0x10c>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 80104e8:	693b      	ldr	r3, [r7, #16]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d11c      	bne.n	8010528 <select_check_waiters+0x10c>
 80104ee:	697b      	ldr	r3, [r7, #20]
 80104f0:	691b      	ldr	r3, [r3, #16]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d018      	beq.n	8010528 <select_check_waiters+0x10c>
 80104f6:	697b      	ldr	r3, [r7, #20]
 80104f8:	691a      	ldr	r2, [r3, #16]
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	da00      	bge.n	8010502 <select_check_waiters+0xe6>
 8010500:	331f      	adds	r3, #31
 8010502:	115b      	asrs	r3, r3, #5
 8010504:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	4259      	negs	r1, r3
 801050c:	f003 031f 	and.w	r3, r3, #31
 8010510:	f001 011f 	and.w	r1, r1, #31
 8010514:	bf58      	it	pl
 8010516:	424b      	negpl	r3, r1
 8010518:	fa22 f303 	lsr.w	r3, r2, r3
 801051c:	f003 0301 	and.w	r3, r3, #1
 8010520:	2b00      	cmp	r3, #0
 8010522:	d001      	beq.n	8010528 <select_check_waiters+0x10c>
            do_signal = 1;
 8010524:	2301      	movs	r3, #1
 8010526:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 8010528:	693b      	ldr	r3, [r7, #16]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d007      	beq.n	801053e <select_check_waiters+0x122>
        scb->sem_signalled = 1;
 801052e:	697b      	ldr	r3, [r7, #20]
 8010530:	2201      	movs	r2, #1
 8010532:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 8010534:	697b      	ldr	r3, [r7, #20]
 8010536:	3320      	adds	r3, #32
 8010538:	4618      	mov	r0, r3
 801053a:	f00b f92d 	bl	801b798 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 801053e:	697b      	ldr	r3, [r7, #20]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	617b      	str	r3, [r7, #20]
 8010544:	697b      	ldr	r3, [r7, #20]
 8010546:	2b00      	cmp	r3, #0
 8010548:	f47f af73 	bne.w	8010432 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 801054c:	bf00      	nop
 801054e:	bf00      	nop
 8010550:	3718      	adds	r7, #24
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}
 8010556:	bf00      	nop
 8010558:	2000d924 	.word	0x2000d924

0801055c <lwip_fcntl>:
 * The flag O_NONBLOCK and access modes are supported for F_GETFL, only
 * the flag O_NONBLOCK is implemented for F_SETFL.
 */
int
lwip_fcntl(int s, int cmd, int val)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b08c      	sub	sp, #48	; 0x30
 8010560:	af00      	add	r7, sp, #0
 8010562:	60f8      	str	r0, [r7, #12]
 8010564:	60b9      	str	r1, [r7, #8]
 8010566:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock = get_socket(s);
 8010568:	68f8      	ldr	r0, [r7, #12]
 801056a:	f7fe fddb 	bl	800f124 <get_socket>
 801056e:	6278      	str	r0, [r7, #36]	; 0x24
  int ret = -1;
 8010570:	f04f 33ff 	mov.w	r3, #4294967295
 8010574:	62fb      	str	r3, [r7, #44]	; 0x2c
  int op_mode = 0;
 8010576:	2300      	movs	r3, #0
 8010578:	62bb      	str	r3, [r7, #40]	; 0x28

  if (!sock) {
 801057a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801057c:	2b00      	cmp	r3, #0
 801057e:	d102      	bne.n	8010586 <lwip_fcntl+0x2a>
    return -1;
 8010580:	f04f 33ff 	mov.w	r3, #4294967295
 8010584:	e08b      	b.n	801069e <lwip_fcntl+0x142>
  }

  switch (cmd) {
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	2b03      	cmp	r3, #3
 801058a:	d003      	beq.n	8010594 <lwip_fcntl+0x38>
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	2b04      	cmp	r3, #4
 8010590:	d043      	beq.n	801061a <lwip_fcntl+0xbe>
 8010592:	e077      	b.n	8010684 <lwip_fcntl+0x128>
    case F_GETFL:
      ret = netconn_is_nonblocking(sock->conn) ? O_NONBLOCK : 0;
 8010594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	7f1b      	ldrb	r3, [r3, #28]
 801059a:	105b      	asrs	r3, r3, #1
 801059c:	f003 0301 	and.w	r3, r3, #1
 80105a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      sock_set_errno(sock, 0);
 80105a2:	2300      	movs	r3, #0
 80105a4:	61bb      	str	r3, [r7, #24]
 80105a6:	69bb      	ldr	r3, [r7, #24]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d002      	beq.n	80105b2 <lwip_fcntl+0x56>
 80105ac:	4a3e      	ldr	r2, [pc, #248]	; (80106a8 <lwip_fcntl+0x14c>)
 80105ae:	69bb      	ldr	r3, [r7, #24]
 80105b0:	6013      	str	r3, [r2, #0]

      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 80105b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	781b      	ldrb	r3, [r3, #0]
 80105b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80105bc:	2b10      	cmp	r3, #16
 80105be:	d123      	bne.n	8010608 <lwip_fcntl+0xac>
#if LWIP_TCPIP_CORE_LOCKING
        LOCK_TCPIP_CORE();
 80105c0:	483a      	ldr	r0, [pc, #232]	; (80106ac <lwip_fcntl+0x150>)
 80105c2:	f00b f943 	bl	801b84c <sys_mutex_lock>
        /* the proper thing to do here would be to get into the tcpip_thread,
           but locking should be OK as well since we only *read* some flags */
        SYS_ARCH_PROTECT(lev);
#endif
#if LWIP_TCP
        if (sock->conn->pcb.tcp) {
 80105c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	685b      	ldr	r3, [r3, #4]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d017      	beq.n	8010600 <lwip_fcntl+0xa4>
          if (!(sock->conn->pcb.tcp->flags & TF_RXCLOSED)) {
 80105d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	685b      	ldr	r3, [r3, #4]
 80105d6:	8b5b      	ldrh	r3, [r3, #26]
 80105d8:	f003 0310 	and.w	r3, r3, #16
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d103      	bne.n	80105e8 <lwip_fcntl+0x8c>
            op_mode |= O_RDONLY;
 80105e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e2:	f043 0302 	orr.w	r3, r3, #2
 80105e6:	62bb      	str	r3, [r7, #40]	; 0x28
          }
          if (!(sock->conn->pcb.tcp->flags & TF_FIN)) {
 80105e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	685b      	ldr	r3, [r3, #4]
 80105ee:	8b5b      	ldrh	r3, [r3, #26]
 80105f0:	f003 0320 	and.w	r3, r3, #32
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d103      	bne.n	8010600 <lwip_fcntl+0xa4>
            op_mode |= O_WRONLY;
 80105f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105fa:	f043 0304 	orr.w	r3, r3, #4
 80105fe:	62bb      	str	r3, [r7, #40]	; 0x28
          }
        }
#endif
#if LWIP_TCPIP_CORE_LOCKING
        UNLOCK_TCPIP_CORE();
 8010600:	482a      	ldr	r0, [pc, #168]	; (80106ac <lwip_fcntl+0x150>)
 8010602:	f00b f932 	bl	801b86a <sys_mutex_unlock>
 8010606:	e003      	b.n	8010610 <lwip_fcntl+0xb4>
#else
        SYS_ARCH_UNPROTECT(lev);
#endif
      } else {
        op_mode |= O_RDWR;
 8010608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801060a:	f043 0306 	orr.w	r3, r3, #6
 801060e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* ensure O_RDWR for (O_RDONLY|O_WRONLY) != O_RDWR cases */
      ret |= (op_mode == (O_RDONLY | O_WRONLY)) ? O_RDWR : op_mode;
 8010610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010614:	4313      	orrs	r3, r2
 8010616:	62fb      	str	r3, [r7, #44]	; 0x2c

      break;
 8010618:	e040      	b.n	801069c <lwip_fcntl+0x140>
    case F_SETFL:
      /* Bits corresponding to the file access mode and the file creation flags [..] that are set in arg shall be ignored */
      val &= ~(O_RDONLY | O_WRONLY | O_RDWR);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f023 0306 	bic.w	r3, r3, #6
 8010620:	607b      	str	r3, [r7, #4]
      if ((val & ~O_NONBLOCK) == 0) {
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	f023 0301 	bic.w	r3, r3, #1
 8010628:	2b00      	cmp	r3, #0
 801062a:	d122      	bne.n	8010672 <lwip_fcntl+0x116>
        /* only O_NONBLOCK, all other bits are zero */
        netconn_set_nonblocking(sock->conn, val & O_NONBLOCK);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f003 0301 	and.w	r3, r3, #1
 8010632:	2b00      	cmp	r3, #0
 8010634:	d009      	beq.n	801064a <lwip_fcntl+0xee>
 8010636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	7f1a      	ldrb	r2, [r3, #28]
 801063c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	f042 0202 	orr.w	r2, r2, #2
 8010644:	b2d2      	uxtb	r2, r2
 8010646:	771a      	strb	r2, [r3, #28]
 8010648:	e008      	b.n	801065c <lwip_fcntl+0x100>
 801064a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	7f1a      	ldrb	r2, [r3, #28]
 8010650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	f022 0202 	bic.w	r2, r2, #2
 8010658:	b2d2      	uxtb	r2, r2
 801065a:	771a      	strb	r2, [r3, #28]
        ret = 0;
 801065c:	2300      	movs	r3, #0
 801065e:	62fb      	str	r3, [r7, #44]	; 0x2c
        sock_set_errno(sock, 0);
 8010660:	2300      	movs	r3, #0
 8010662:	61fb      	str	r3, [r7, #28]
 8010664:	69fb      	ldr	r3, [r7, #28]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d015      	beq.n	8010696 <lwip_fcntl+0x13a>
 801066a:	4a0f      	ldr	r2, [pc, #60]	; (80106a8 <lwip_fcntl+0x14c>)
 801066c:	69fb      	ldr	r3, [r7, #28]
 801066e:	6013      	str	r3, [r2, #0]
      } else {
        sock_set_errno(sock, ENOSYS); /* not yet implemented */
      }
      break;
 8010670:	e011      	b.n	8010696 <lwip_fcntl+0x13a>
        sock_set_errno(sock, ENOSYS); /* not yet implemented */
 8010672:	2326      	movs	r3, #38	; 0x26
 8010674:	623b      	str	r3, [r7, #32]
 8010676:	6a3b      	ldr	r3, [r7, #32]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d00c      	beq.n	8010696 <lwip_fcntl+0x13a>
 801067c:	4a0a      	ldr	r2, [pc, #40]	; (80106a8 <lwip_fcntl+0x14c>)
 801067e:	6a3b      	ldr	r3, [r7, #32]
 8010680:	6013      	str	r3, [r2, #0]
      break;
 8010682:	e008      	b.n	8010696 <lwip_fcntl+0x13a>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_fcntl(%d, UNIMPL: %d, %d)\n", s, cmd, val));
      sock_set_errno(sock, ENOSYS); /* not yet implemented */
 8010684:	2326      	movs	r3, #38	; 0x26
 8010686:	617b      	str	r3, [r7, #20]
 8010688:	697b      	ldr	r3, [r7, #20]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d005      	beq.n	801069a <lwip_fcntl+0x13e>
 801068e:	4a06      	ldr	r2, [pc, #24]	; (80106a8 <lwip_fcntl+0x14c>)
 8010690:	697b      	ldr	r3, [r7, #20]
 8010692:	6013      	str	r3, [r2, #0]
      break;
 8010694:	e001      	b.n	801069a <lwip_fcntl+0x13e>
      break;
 8010696:	bf00      	nop
 8010698:	e000      	b.n	801069c <lwip_fcntl+0x140>
      break;
 801069a:	bf00      	nop
  }
  done_socket(sock);
  return ret;
 801069c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801069e:	4618      	mov	r0, r3
 80106a0:	3730      	adds	r7, #48	; 0x30
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}
 80106a6:	bf00      	nop
 80106a8:	200111e8 	.word	0x200111e8
 80106ac:	2000d934 	.word	0x2000d934

080106b0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b084      	sub	sp, #16
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80106ba:	f008 f96d 	bl	8018998 <sys_timeouts_sleeptime>
 80106be:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106c6:	d10b      	bne.n	80106e0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80106c8:	4813      	ldr	r0, [pc, #76]	; (8010718 <tcpip_timeouts_mbox_fetch+0x68>)
 80106ca:	f00b f8ce 	bl	801b86a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80106ce:	2200      	movs	r2, #0
 80106d0:	6839      	ldr	r1, [r7, #0]
 80106d2:	6878      	ldr	r0, [r7, #4]
 80106d4:	f00a ffa4 	bl	801b620 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80106d8:	480f      	ldr	r0, [pc, #60]	; (8010718 <tcpip_timeouts_mbox_fetch+0x68>)
 80106da:	f00b f8b7 	bl	801b84c <sys_mutex_lock>
    return;
 80106de:	e018      	b.n	8010712 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d102      	bne.n	80106ec <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80106e6:	f008 f91d 	bl	8018924 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80106ea:	e7e6      	b.n	80106ba <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80106ec:	480a      	ldr	r0, [pc, #40]	; (8010718 <tcpip_timeouts_mbox_fetch+0x68>)
 80106ee:	f00b f8bc 	bl	801b86a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80106f2:	68fa      	ldr	r2, [r7, #12]
 80106f4:	6839      	ldr	r1, [r7, #0]
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f00a ff92 	bl	801b620 <sys_arch_mbox_fetch>
 80106fc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80106fe:	4806      	ldr	r0, [pc, #24]	; (8010718 <tcpip_timeouts_mbox_fetch+0x68>)
 8010700:	f00b f8a4 	bl	801b84c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8010704:	68bb      	ldr	r3, [r7, #8]
 8010706:	f1b3 3fff 	cmp.w	r3, #4294967295
 801070a:	d102      	bne.n	8010712 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801070c:	f008 f90a 	bl	8018924 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010710:	e7d3      	b.n	80106ba <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8010712:	3710      	adds	r7, #16
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}
 8010718:	2000d934 	.word	0x2000d934

0801071c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b084      	sub	sp, #16
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8010724:	4810      	ldr	r0, [pc, #64]	; (8010768 <tcpip_thread+0x4c>)
 8010726:	f00b f891 	bl	801b84c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801072a:	4b10      	ldr	r3, [pc, #64]	; (801076c <tcpip_thread+0x50>)
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d005      	beq.n	801073e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8010732:	4b0e      	ldr	r3, [pc, #56]	; (801076c <tcpip_thread+0x50>)
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	4a0e      	ldr	r2, [pc, #56]	; (8010770 <tcpip_thread+0x54>)
 8010738:	6812      	ldr	r2, [r2, #0]
 801073a:	4610      	mov	r0, r2
 801073c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801073e:	f107 030c 	add.w	r3, r7, #12
 8010742:	4619      	mov	r1, r3
 8010744:	480b      	ldr	r0, [pc, #44]	; (8010774 <tcpip_thread+0x58>)
 8010746:	f7ff ffb3 	bl	80106b0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d106      	bne.n	801075e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010750:	4b09      	ldr	r3, [pc, #36]	; (8010778 <tcpip_thread+0x5c>)
 8010752:	2291      	movs	r2, #145	; 0x91
 8010754:	4909      	ldr	r1, [pc, #36]	; (801077c <tcpip_thread+0x60>)
 8010756:	480a      	ldr	r0, [pc, #40]	; (8010780 <tcpip_thread+0x64>)
 8010758:	f00b f91c 	bl	801b994 <iprintf>
      continue;
 801075c:	e003      	b.n	8010766 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	4618      	mov	r0, r3
 8010762:	f000 f80f 	bl	8010784 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8010766:	e7ea      	b.n	801073e <tcpip_thread+0x22>
 8010768:	2000d934 	.word	0x2000d934
 801076c:	2000d928 	.word	0x2000d928
 8010770:	2000d92c 	.word	0x2000d92c
 8010774:	2000d930 	.word	0x2000d930
 8010778:	0801db3c 	.word	0x0801db3c
 801077c:	0801db6c 	.word	0x0801db6c
 8010780:	0801db8c 	.word	0x0801db8c

08010784 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	781b      	ldrb	r3, [r3, #0]
 8010790:	2b02      	cmp	r3, #2
 8010792:	d026      	beq.n	80107e2 <tcpip_thread_handle_msg+0x5e>
 8010794:	2b02      	cmp	r3, #2
 8010796:	dc2b      	bgt.n	80107f0 <tcpip_thread_handle_msg+0x6c>
 8010798:	2b00      	cmp	r3, #0
 801079a:	d002      	beq.n	80107a2 <tcpip_thread_handle_msg+0x1e>
 801079c:	2b01      	cmp	r3, #1
 801079e:	d015      	beq.n	80107cc <tcpip_thread_handle_msg+0x48>
 80107a0:	e026      	b.n	80107f0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	68db      	ldr	r3, [r3, #12]
 80107a6:	687a      	ldr	r2, [r7, #4]
 80107a8:	6850      	ldr	r0, [r2, #4]
 80107aa:	687a      	ldr	r2, [r7, #4]
 80107ac:	6892      	ldr	r2, [r2, #8]
 80107ae:	4611      	mov	r1, r2
 80107b0:	4798      	blx	r3
 80107b2:	4603      	mov	r3, r0
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d004      	beq.n	80107c2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	685b      	ldr	r3, [r3, #4]
 80107bc:	4618      	mov	r0, r3
 80107be:	f001 fd53 	bl	8012268 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80107c2:	6879      	ldr	r1, [r7, #4]
 80107c4:	2009      	movs	r0, #9
 80107c6:	f000 fe79 	bl	80114bc <memp_free>
      break;
 80107ca:	e018      	b.n	80107fe <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	685b      	ldr	r3, [r3, #4]
 80107d0:	687a      	ldr	r2, [r7, #4]
 80107d2:	6892      	ldr	r2, [r2, #8]
 80107d4:	4610      	mov	r0, r2
 80107d6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80107d8:	6879      	ldr	r1, [r7, #4]
 80107da:	2008      	movs	r0, #8
 80107dc:	f000 fe6e 	bl	80114bc <memp_free>
      break;
 80107e0:	e00d      	b.n	80107fe <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	685b      	ldr	r3, [r3, #4]
 80107e6:	687a      	ldr	r2, [r7, #4]
 80107e8:	6892      	ldr	r2, [r2, #8]
 80107ea:	4610      	mov	r0, r2
 80107ec:	4798      	blx	r3
      break;
 80107ee:	e006      	b.n	80107fe <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80107f0:	4b05      	ldr	r3, [pc, #20]	; (8010808 <tcpip_thread_handle_msg+0x84>)
 80107f2:	22cf      	movs	r2, #207	; 0xcf
 80107f4:	4905      	ldr	r1, [pc, #20]	; (801080c <tcpip_thread_handle_msg+0x88>)
 80107f6:	4806      	ldr	r0, [pc, #24]	; (8010810 <tcpip_thread_handle_msg+0x8c>)
 80107f8:	f00b f8cc 	bl	801b994 <iprintf>
      break;
 80107fc:	bf00      	nop
  }
}
 80107fe:	bf00      	nop
 8010800:	3708      	adds	r7, #8
 8010802:	46bd      	mov	sp, r7
 8010804:	bd80      	pop	{r7, pc}
 8010806:	bf00      	nop
 8010808:	0801db3c 	.word	0x0801db3c
 801080c:	0801db6c 	.word	0x0801db6c
 8010810:	0801db8c 	.word	0x0801db8c

08010814 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b086      	sub	sp, #24
 8010818:	af00      	add	r7, sp, #0
 801081a:	60f8      	str	r0, [r7, #12]
 801081c:	60b9      	str	r1, [r7, #8]
 801081e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010820:	481a      	ldr	r0, [pc, #104]	; (801088c <tcpip_inpkt+0x78>)
 8010822:	f00a ff45 	bl	801b6b0 <sys_mbox_valid>
 8010826:	4603      	mov	r3, r0
 8010828:	2b00      	cmp	r3, #0
 801082a:	d105      	bne.n	8010838 <tcpip_inpkt+0x24>
 801082c:	4b18      	ldr	r3, [pc, #96]	; (8010890 <tcpip_inpkt+0x7c>)
 801082e:	22fc      	movs	r2, #252	; 0xfc
 8010830:	4918      	ldr	r1, [pc, #96]	; (8010894 <tcpip_inpkt+0x80>)
 8010832:	4819      	ldr	r0, [pc, #100]	; (8010898 <tcpip_inpkt+0x84>)
 8010834:	f00b f8ae 	bl	801b994 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8010838:	2009      	movs	r0, #9
 801083a:	f000 fdc9 	bl	80113d0 <memp_malloc>
 801083e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8010840:	697b      	ldr	r3, [r7, #20]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d102      	bne.n	801084c <tcpip_inpkt+0x38>
    return ERR_MEM;
 8010846:	f04f 33ff 	mov.w	r3, #4294967295
 801084a:	e01a      	b.n	8010882 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 801084c:	697b      	ldr	r3, [r7, #20]
 801084e:	2200      	movs	r2, #0
 8010850:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8010852:	697b      	ldr	r3, [r7, #20]
 8010854:	68fa      	ldr	r2, [r7, #12]
 8010856:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8010858:	697b      	ldr	r3, [r7, #20]
 801085a:	68ba      	ldr	r2, [r7, #8]
 801085c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	687a      	ldr	r2, [r7, #4]
 8010862:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010864:	6979      	ldr	r1, [r7, #20]
 8010866:	4809      	ldr	r0, [pc, #36]	; (801088c <tcpip_inpkt+0x78>)
 8010868:	f00a fec0 	bl	801b5ec <sys_mbox_trypost>
 801086c:	4603      	mov	r3, r0
 801086e:	2b00      	cmp	r3, #0
 8010870:	d006      	beq.n	8010880 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8010872:	6979      	ldr	r1, [r7, #20]
 8010874:	2009      	movs	r0, #9
 8010876:	f000 fe21 	bl	80114bc <memp_free>
    return ERR_MEM;
 801087a:	f04f 33ff 	mov.w	r3, #4294967295
 801087e:	e000      	b.n	8010882 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8010880:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8010882:	4618      	mov	r0, r3
 8010884:	3718      	adds	r7, #24
 8010886:	46bd      	mov	sp, r7
 8010888:	bd80      	pop	{r7, pc}
 801088a:	bf00      	nop
 801088c:	2000d930 	.word	0x2000d930
 8010890:	0801db3c 	.word	0x0801db3c
 8010894:	0801dbb4 	.word	0x0801dbb4
 8010898:	0801db8c 	.word	0x0801db8c

0801089c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b082      	sub	sp, #8
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
 80108a4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80108a6:	683b      	ldr	r3, [r7, #0]
 80108a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80108ac:	f003 0318 	and.w	r3, r3, #24
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d006      	beq.n	80108c2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80108b4:	4a08      	ldr	r2, [pc, #32]	; (80108d8 <tcpip_input+0x3c>)
 80108b6:	6839      	ldr	r1, [r7, #0]
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f7ff ffab 	bl	8010814 <tcpip_inpkt>
 80108be:	4603      	mov	r3, r0
 80108c0:	e005      	b.n	80108ce <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80108c2:	4a06      	ldr	r2, [pc, #24]	; (80108dc <tcpip_input+0x40>)
 80108c4:	6839      	ldr	r1, [r7, #0]
 80108c6:	6878      	ldr	r0, [r7, #4]
 80108c8:	f7ff ffa4 	bl	8010814 <tcpip_inpkt>
 80108cc:	4603      	mov	r3, r0
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	3708      	adds	r7, #8
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}
 80108d6:	bf00      	nop
 80108d8:	0801b3e9 	.word	0x0801b3e9
 80108dc:	0801a2f1 	.word	0x0801a2f1

080108e0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b084      	sub	sp, #16
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80108ea:	4819      	ldr	r0, [pc, #100]	; (8010950 <tcpip_try_callback+0x70>)
 80108ec:	f00a fee0 	bl	801b6b0 <sys_mbox_valid>
 80108f0:	4603      	mov	r3, r0
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d106      	bne.n	8010904 <tcpip_try_callback+0x24>
 80108f6:	4b17      	ldr	r3, [pc, #92]	; (8010954 <tcpip_try_callback+0x74>)
 80108f8:	f240 125d 	movw	r2, #349	; 0x15d
 80108fc:	4916      	ldr	r1, [pc, #88]	; (8010958 <tcpip_try_callback+0x78>)
 80108fe:	4817      	ldr	r0, [pc, #92]	; (801095c <tcpip_try_callback+0x7c>)
 8010900:	f00b f848 	bl	801b994 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8010904:	2008      	movs	r0, #8
 8010906:	f000 fd63 	bl	80113d0 <memp_malloc>
 801090a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d102      	bne.n	8010918 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8010912:	f04f 33ff 	mov.w	r3, #4294967295
 8010916:	e017      	b.n	8010948 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	2201      	movs	r2, #1
 801091c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	687a      	ldr	r2, [r7, #4]
 8010922:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	683a      	ldr	r2, [r7, #0]
 8010928:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801092a:	68f9      	ldr	r1, [r7, #12]
 801092c:	4808      	ldr	r0, [pc, #32]	; (8010950 <tcpip_try_callback+0x70>)
 801092e:	f00a fe5d 	bl	801b5ec <sys_mbox_trypost>
 8010932:	4603      	mov	r3, r0
 8010934:	2b00      	cmp	r3, #0
 8010936:	d006      	beq.n	8010946 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8010938:	68f9      	ldr	r1, [r7, #12]
 801093a:	2008      	movs	r0, #8
 801093c:	f000 fdbe 	bl	80114bc <memp_free>
    return ERR_MEM;
 8010940:	f04f 33ff 	mov.w	r3, #4294967295
 8010944:	e000      	b.n	8010948 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8010946:	2300      	movs	r3, #0
}
 8010948:	4618      	mov	r0, r3
 801094a:	3710      	adds	r7, #16
 801094c:	46bd      	mov	sp, r7
 801094e:	bd80      	pop	{r7, pc}
 8010950:	2000d930 	.word	0x2000d930
 8010954:	0801db3c 	.word	0x0801db3c
 8010958:	0801dbb4 	.word	0x0801dbb4
 801095c:	0801db8c 	.word	0x0801db8c

08010960 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b084      	sub	sp, #16
 8010964:	af00      	add	r7, sp, #0
 8010966:	60f8      	str	r0, [r7, #12]
 8010968:	60b9      	str	r1, [r7, #8]
 801096a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 801096c:	4806      	ldr	r0, [pc, #24]	; (8010988 <tcpip_send_msg_wait_sem+0x28>)
 801096e:	f00a ff6d 	bl	801b84c <sys_mutex_lock>
  fn(apimsg);
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	68b8      	ldr	r0, [r7, #8]
 8010976:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8010978:	4803      	ldr	r0, [pc, #12]	; (8010988 <tcpip_send_msg_wait_sem+0x28>)
 801097a:	f00a ff76 	bl	801b86a <sys_mutex_unlock>
  return ERR_OK;
 801097e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8010980:	4618      	mov	r0, r3
 8010982:	3710      	adds	r7, #16
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}
 8010988:	2000d934 	.word	0x2000d934

0801098c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b084      	sub	sp, #16
 8010990:	af02      	add	r7, sp, #8
 8010992:	6078      	str	r0, [r7, #4]
 8010994:	6039      	str	r1, [r7, #0]
  lwip_init();
 8010996:	f000 f871 	bl	8010a7c <lwip_init>

  tcpip_init_done = initfunc;
 801099a:	4a17      	ldr	r2, [pc, #92]	; (80109f8 <tcpip_init+0x6c>)
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80109a0:	4a16      	ldr	r2, [pc, #88]	; (80109fc <tcpip_init+0x70>)
 80109a2:	683b      	ldr	r3, [r7, #0]
 80109a4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80109a6:	2106      	movs	r1, #6
 80109a8:	4815      	ldr	r0, [pc, #84]	; (8010a00 <tcpip_init+0x74>)
 80109aa:	f00a fdf3 	bl	801b594 <sys_mbox_new>
 80109ae:	4603      	mov	r3, r0
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d006      	beq.n	80109c2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80109b4:	4b13      	ldr	r3, [pc, #76]	; (8010a04 <tcpip_init+0x78>)
 80109b6:	f240 2261 	movw	r2, #609	; 0x261
 80109ba:	4913      	ldr	r1, [pc, #76]	; (8010a08 <tcpip_init+0x7c>)
 80109bc:	4813      	ldr	r0, [pc, #76]	; (8010a0c <tcpip_init+0x80>)
 80109be:	f00a ffe9 	bl	801b994 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80109c2:	4813      	ldr	r0, [pc, #76]	; (8010a10 <tcpip_init+0x84>)
 80109c4:	f00a ff2c 	bl	801b820 <sys_mutex_new>
 80109c8:	4603      	mov	r3, r0
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d006      	beq.n	80109dc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80109ce:	4b0d      	ldr	r3, [pc, #52]	; (8010a04 <tcpip_init+0x78>)
 80109d0:	f240 2265 	movw	r2, #613	; 0x265
 80109d4:	490f      	ldr	r1, [pc, #60]	; (8010a14 <tcpip_init+0x88>)
 80109d6:	480d      	ldr	r0, [pc, #52]	; (8010a0c <tcpip_init+0x80>)
 80109d8:	f00a ffdc 	bl	801b994 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80109dc:	2318      	movs	r3, #24
 80109de:	9300      	str	r3, [sp, #0]
 80109e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109e4:	2200      	movs	r2, #0
 80109e6:	490c      	ldr	r1, [pc, #48]	; (8010a18 <tcpip_init+0x8c>)
 80109e8:	480c      	ldr	r0, [pc, #48]	; (8010a1c <tcpip_init+0x90>)
 80109ea:	f00a ff4b 	bl	801b884 <sys_thread_new>
}
 80109ee:	bf00      	nop
 80109f0:	3708      	adds	r7, #8
 80109f2:	46bd      	mov	sp, r7
 80109f4:	bd80      	pop	{r7, pc}
 80109f6:	bf00      	nop
 80109f8:	2000d928 	.word	0x2000d928
 80109fc:	2000d92c 	.word	0x2000d92c
 8010a00:	2000d930 	.word	0x2000d930
 8010a04:	0801db3c 	.word	0x0801db3c
 8010a08:	0801dbc4 	.word	0x0801dbc4
 8010a0c:	0801db8c 	.word	0x0801db8c
 8010a10:	2000d934 	.word	0x2000d934
 8010a14:	0801dbe8 	.word	0x0801dbe8
 8010a18:	0801071d 	.word	0x0801071d
 8010a1c:	0801dc0c 	.word	0x0801dc0c

08010a20 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8010a20:	b480      	push	{r7}
 8010a22:	b083      	sub	sp, #12
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	4603      	mov	r3, r0
 8010a28:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8010a2a:	88fb      	ldrh	r3, [r7, #6]
 8010a2c:	021b      	lsls	r3, r3, #8
 8010a2e:	b21a      	sxth	r2, r3
 8010a30:	88fb      	ldrh	r3, [r7, #6]
 8010a32:	0a1b      	lsrs	r3, r3, #8
 8010a34:	b29b      	uxth	r3, r3
 8010a36:	b21b      	sxth	r3, r3
 8010a38:	4313      	orrs	r3, r2
 8010a3a:	b21b      	sxth	r3, r3
 8010a3c:	b29b      	uxth	r3, r3
}
 8010a3e:	4618      	mov	r0, r3
 8010a40:	370c      	adds	r7, #12
 8010a42:	46bd      	mov	sp, r7
 8010a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a48:	4770      	bx	lr

08010a4a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8010a4a:	b480      	push	{r7}
 8010a4c:	b083      	sub	sp, #12
 8010a4e:	af00      	add	r7, sp, #0
 8010a50:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	061a      	lsls	r2, r3, #24
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	021b      	lsls	r3, r3, #8
 8010a5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010a5e:	431a      	orrs	r2, r3
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	0a1b      	lsrs	r3, r3, #8
 8010a64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010a68:	431a      	orrs	r2, r3
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	0e1b      	lsrs	r3, r3, #24
 8010a6e:	4313      	orrs	r3, r2
}
 8010a70:	4618      	mov	r0, r3
 8010a72:	370c      	adds	r7, #12
 8010a74:	46bd      	mov	sp, r7
 8010a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7a:	4770      	bx	lr

08010a7c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b082      	sub	sp, #8
 8010a80:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8010a82:	2300      	movs	r3, #0
 8010a84:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8010a86:	f00a febf 	bl	801b808 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8010a8a:	f000 f8d5 	bl	8010c38 <mem_init>
  memp_init();
 8010a8e:	f000 fc31 	bl	80112f4 <memp_init>
  pbuf_init();
  netif_init();
 8010a92:	f000 fd3d 	bl	8011510 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8010a96:	f007 ffb7 	bl	8018a08 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8010a9a:	f001 fe7f 	bl	801279c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8010a9e:	f007 fef9 	bl	8018894 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8010aa2:	bf00      	nop
 8010aa4:	3708      	adds	r7, #8
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}
	...

08010aac <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8010aac:	b480      	push	{r7}
 8010aae:	b083      	sub	sp, #12
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8010ab6:	4b05      	ldr	r3, [pc, #20]	; (8010acc <ptr_to_mem+0x20>)
 8010ab8:	681a      	ldr	r2, [r3, #0]
 8010aba:	88fb      	ldrh	r3, [r7, #6]
 8010abc:	4413      	add	r3, r2
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	370c      	adds	r7, #12
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac8:	4770      	bx	lr
 8010aca:	bf00      	nop
 8010acc:	2000dfa4 	.word	0x2000dfa4

08010ad0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8010ad0:	b480      	push	{r7}
 8010ad2:	b083      	sub	sp, #12
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8010ad8:	4b05      	ldr	r3, [pc, #20]	; (8010af0 <mem_to_ptr+0x20>)
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	687a      	ldr	r2, [r7, #4]
 8010ade:	1ad3      	subs	r3, r2, r3
 8010ae0:	b29b      	uxth	r3, r3
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	370c      	adds	r7, #12
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aec:	4770      	bx	lr
 8010aee:	bf00      	nop
 8010af0:	2000dfa4 	.word	0x2000dfa4

08010af4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8010af4:	b590      	push	{r4, r7, lr}
 8010af6:	b085      	sub	sp, #20
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8010afc:	4b45      	ldr	r3, [pc, #276]	; (8010c14 <plug_holes+0x120>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	687a      	ldr	r2, [r7, #4]
 8010b02:	429a      	cmp	r2, r3
 8010b04:	d206      	bcs.n	8010b14 <plug_holes+0x20>
 8010b06:	4b44      	ldr	r3, [pc, #272]	; (8010c18 <plug_holes+0x124>)
 8010b08:	f240 12df 	movw	r2, #479	; 0x1df
 8010b0c:	4943      	ldr	r1, [pc, #268]	; (8010c1c <plug_holes+0x128>)
 8010b0e:	4844      	ldr	r0, [pc, #272]	; (8010c20 <plug_holes+0x12c>)
 8010b10:	f00a ff40 	bl	801b994 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8010b14:	4b43      	ldr	r3, [pc, #268]	; (8010c24 <plug_holes+0x130>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	687a      	ldr	r2, [r7, #4]
 8010b1a:	429a      	cmp	r2, r3
 8010b1c:	d306      	bcc.n	8010b2c <plug_holes+0x38>
 8010b1e:	4b3e      	ldr	r3, [pc, #248]	; (8010c18 <plug_holes+0x124>)
 8010b20:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010b24:	4940      	ldr	r1, [pc, #256]	; (8010c28 <plug_holes+0x134>)
 8010b26:	483e      	ldr	r0, [pc, #248]	; (8010c20 <plug_holes+0x12c>)
 8010b28:	f00a ff34 	bl	801b994 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	791b      	ldrb	r3, [r3, #4]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d006      	beq.n	8010b42 <plug_holes+0x4e>
 8010b34:	4b38      	ldr	r3, [pc, #224]	; (8010c18 <plug_holes+0x124>)
 8010b36:	f240 12e1 	movw	r2, #481	; 0x1e1
 8010b3a:	493c      	ldr	r1, [pc, #240]	; (8010c2c <plug_holes+0x138>)
 8010b3c:	4838      	ldr	r0, [pc, #224]	; (8010c20 <plug_holes+0x12c>)
 8010b3e:	f00a ff29 	bl	801b994 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	881b      	ldrh	r3, [r3, #0]
 8010b46:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010b4a:	d906      	bls.n	8010b5a <plug_holes+0x66>
 8010b4c:	4b32      	ldr	r3, [pc, #200]	; (8010c18 <plug_holes+0x124>)
 8010b4e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8010b52:	4937      	ldr	r1, [pc, #220]	; (8010c30 <plug_holes+0x13c>)
 8010b54:	4832      	ldr	r0, [pc, #200]	; (8010c20 <plug_holes+0x12c>)
 8010b56:	f00a ff1d 	bl	801b994 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	881b      	ldrh	r3, [r3, #0]
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f7ff ffa4 	bl	8010aac <ptr_to_mem>
 8010b64:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8010b66:	687a      	ldr	r2, [r7, #4]
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	429a      	cmp	r2, r3
 8010b6c:	d024      	beq.n	8010bb8 <plug_holes+0xc4>
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	791b      	ldrb	r3, [r3, #4]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d120      	bne.n	8010bb8 <plug_holes+0xc4>
 8010b76:	4b2b      	ldr	r3, [pc, #172]	; (8010c24 <plug_holes+0x130>)
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	68fa      	ldr	r2, [r7, #12]
 8010b7c:	429a      	cmp	r2, r3
 8010b7e:	d01b      	beq.n	8010bb8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8010b80:	4b2c      	ldr	r3, [pc, #176]	; (8010c34 <plug_holes+0x140>)
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	68fa      	ldr	r2, [r7, #12]
 8010b86:	429a      	cmp	r2, r3
 8010b88:	d102      	bne.n	8010b90 <plug_holes+0x9c>
      lfree = mem;
 8010b8a:	4a2a      	ldr	r2, [pc, #168]	; (8010c34 <plug_holes+0x140>)
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	881a      	ldrh	r2, [r3, #0]
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	881b      	ldrh	r3, [r3, #0]
 8010b9c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010ba0:	d00a      	beq.n	8010bb8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	881b      	ldrh	r3, [r3, #0]
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f7ff ff80 	bl	8010aac <ptr_to_mem>
 8010bac:	4604      	mov	r4, r0
 8010bae:	6878      	ldr	r0, [r7, #4]
 8010bb0:	f7ff ff8e 	bl	8010ad0 <mem_to_ptr>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	885b      	ldrh	r3, [r3, #2]
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	f7ff ff75 	bl	8010aac <ptr_to_mem>
 8010bc2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010bc4:	68ba      	ldr	r2, [r7, #8]
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	429a      	cmp	r2, r3
 8010bca:	d01f      	beq.n	8010c0c <plug_holes+0x118>
 8010bcc:	68bb      	ldr	r3, [r7, #8]
 8010bce:	791b      	ldrb	r3, [r3, #4]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d11b      	bne.n	8010c0c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8010bd4:	4b17      	ldr	r3, [pc, #92]	; (8010c34 <plug_holes+0x140>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	687a      	ldr	r2, [r7, #4]
 8010bda:	429a      	cmp	r2, r3
 8010bdc:	d102      	bne.n	8010be4 <plug_holes+0xf0>
      lfree = pmem;
 8010bde:	4a15      	ldr	r2, [pc, #84]	; (8010c34 <plug_holes+0x140>)
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	881a      	ldrh	r2, [r3, #0]
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	881b      	ldrh	r3, [r3, #0]
 8010bf0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010bf4:	d00a      	beq.n	8010c0c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	881b      	ldrh	r3, [r3, #0]
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f7ff ff56 	bl	8010aac <ptr_to_mem>
 8010c00:	4604      	mov	r4, r0
 8010c02:	68b8      	ldr	r0, [r7, #8]
 8010c04:	f7ff ff64 	bl	8010ad0 <mem_to_ptr>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8010c0c:	bf00      	nop
 8010c0e:	3714      	adds	r7, #20
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bd90      	pop	{r4, r7, pc}
 8010c14:	2000dfa4 	.word	0x2000dfa4
 8010c18:	0801dc1c 	.word	0x0801dc1c
 8010c1c:	0801dc4c 	.word	0x0801dc4c
 8010c20:	0801dc64 	.word	0x0801dc64
 8010c24:	2000dfa8 	.word	0x2000dfa8
 8010c28:	0801dc8c 	.word	0x0801dc8c
 8010c2c:	0801dca8 	.word	0x0801dca8
 8010c30:	0801dcc4 	.word	0x0801dcc4
 8010c34:	2000dfb0 	.word	0x2000dfb0

08010c38 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b082      	sub	sp, #8
 8010c3c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8010c3e:	4b1f      	ldr	r3, [pc, #124]	; (8010cbc <mem_init+0x84>)
 8010c40:	3303      	adds	r3, #3
 8010c42:	f023 0303 	bic.w	r3, r3, #3
 8010c46:	461a      	mov	r2, r3
 8010c48:	4b1d      	ldr	r3, [pc, #116]	; (8010cc0 <mem_init+0x88>)
 8010c4a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8010c4c:	4b1c      	ldr	r3, [pc, #112]	; (8010cc0 <mem_init+0x88>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8010c58:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	2200      	movs	r2, #0
 8010c64:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8010c66:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8010c6a:	f7ff ff1f 	bl	8010aac <ptr_to_mem>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	4a14      	ldr	r2, [pc, #80]	; (8010cc4 <mem_init+0x8c>)
 8010c72:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8010c74:	4b13      	ldr	r3, [pc, #76]	; (8010cc4 <mem_init+0x8c>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	2201      	movs	r2, #1
 8010c7a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8010c7c:	4b11      	ldr	r3, [pc, #68]	; (8010cc4 <mem_init+0x8c>)
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8010c84:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8010c86:	4b0f      	ldr	r3, [pc, #60]	; (8010cc4 <mem_init+0x8c>)
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8010c8e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8010c90:	4b0b      	ldr	r3, [pc, #44]	; (8010cc0 <mem_init+0x88>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	4a0c      	ldr	r2, [pc, #48]	; (8010cc8 <mem_init+0x90>)
 8010c96:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8010c98:	480c      	ldr	r0, [pc, #48]	; (8010ccc <mem_init+0x94>)
 8010c9a:	f00a fdc1 	bl	801b820 <sys_mutex_new>
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d006      	beq.n	8010cb2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8010ca4:	4b0a      	ldr	r3, [pc, #40]	; (8010cd0 <mem_init+0x98>)
 8010ca6:	f240 221f 	movw	r2, #543	; 0x21f
 8010caa:	490a      	ldr	r1, [pc, #40]	; (8010cd4 <mem_init+0x9c>)
 8010cac:	480a      	ldr	r0, [pc, #40]	; (8010cd8 <mem_init+0xa0>)
 8010cae:	f00a fe71 	bl	801b994 <iprintf>
  }
}
 8010cb2:	bf00      	nop
 8010cb4:	3708      	adds	r7, #8
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}
 8010cba:	bf00      	nop
 8010cbc:	2000d950 	.word	0x2000d950
 8010cc0:	2000dfa4 	.word	0x2000dfa4
 8010cc4:	2000dfa8 	.word	0x2000dfa8
 8010cc8:	2000dfb0 	.word	0x2000dfb0
 8010ccc:	2000dfac 	.word	0x2000dfac
 8010cd0:	0801dc1c 	.word	0x0801dc1c
 8010cd4:	0801dcf0 	.word	0x0801dcf0
 8010cd8:	0801dc64 	.word	0x0801dc64

08010cdc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b086      	sub	sp, #24
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8010ce4:	6878      	ldr	r0, [r7, #4]
 8010ce6:	f7ff fef3 	bl	8010ad0 <mem_to_ptr>
 8010cea:	4603      	mov	r3, r0
 8010cec:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	881b      	ldrh	r3, [r3, #0]
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f7ff feda 	bl	8010aac <ptr_to_mem>
 8010cf8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	885b      	ldrh	r3, [r3, #2]
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f7ff fed4 	bl	8010aac <ptr_to_mem>
 8010d04:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	881b      	ldrh	r3, [r3, #0]
 8010d0a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010d0e:	d818      	bhi.n	8010d42 <mem_link_valid+0x66>
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	885b      	ldrh	r3, [r3, #2]
 8010d14:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010d18:	d813      	bhi.n	8010d42 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010d1e:	8afa      	ldrh	r2, [r7, #22]
 8010d20:	429a      	cmp	r2, r3
 8010d22:	d004      	beq.n	8010d2e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	881b      	ldrh	r3, [r3, #0]
 8010d28:	8afa      	ldrh	r2, [r7, #22]
 8010d2a:	429a      	cmp	r2, r3
 8010d2c:	d109      	bne.n	8010d42 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010d2e:	4b08      	ldr	r3, [pc, #32]	; (8010d50 <mem_link_valid+0x74>)
 8010d30:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010d32:	693a      	ldr	r2, [r7, #16]
 8010d34:	429a      	cmp	r2, r3
 8010d36:	d006      	beq.n	8010d46 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010d38:	693b      	ldr	r3, [r7, #16]
 8010d3a:	885b      	ldrh	r3, [r3, #2]
 8010d3c:	8afa      	ldrh	r2, [r7, #22]
 8010d3e:	429a      	cmp	r2, r3
 8010d40:	d001      	beq.n	8010d46 <mem_link_valid+0x6a>
    return 0;
 8010d42:	2300      	movs	r3, #0
 8010d44:	e000      	b.n	8010d48 <mem_link_valid+0x6c>
  }
  return 1;
 8010d46:	2301      	movs	r3, #1
}
 8010d48:	4618      	mov	r0, r3
 8010d4a:	3718      	adds	r7, #24
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd80      	pop	{r7, pc}
 8010d50:	2000dfa8 	.word	0x2000dfa8

08010d54 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b088      	sub	sp, #32
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d070      	beq.n	8010e44 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	f003 0303 	and.w	r3, r3, #3
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d00d      	beq.n	8010d88 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8010d6c:	4b37      	ldr	r3, [pc, #220]	; (8010e4c <mem_free+0xf8>)
 8010d6e:	f240 2273 	movw	r2, #627	; 0x273
 8010d72:	4937      	ldr	r1, [pc, #220]	; (8010e50 <mem_free+0xfc>)
 8010d74:	4837      	ldr	r0, [pc, #220]	; (8010e54 <mem_free+0x100>)
 8010d76:	f00a fe0d 	bl	801b994 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010d7a:	f00a fda3 	bl	801b8c4 <sys_arch_protect>
 8010d7e:	60f8      	str	r0, [r7, #12]
 8010d80:	68f8      	ldr	r0, [r7, #12]
 8010d82:	f00a fdad 	bl	801b8e0 <sys_arch_unprotect>
    return;
 8010d86:	e05e      	b.n	8010e46 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	3b08      	subs	r3, #8
 8010d8c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8010d8e:	4b32      	ldr	r3, [pc, #200]	; (8010e58 <mem_free+0x104>)
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	69fa      	ldr	r2, [r7, #28]
 8010d94:	429a      	cmp	r2, r3
 8010d96:	d306      	bcc.n	8010da6 <mem_free+0x52>
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	f103 020c 	add.w	r2, r3, #12
 8010d9e:	4b2f      	ldr	r3, [pc, #188]	; (8010e5c <mem_free+0x108>)
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	429a      	cmp	r2, r3
 8010da4:	d90d      	bls.n	8010dc2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8010da6:	4b29      	ldr	r3, [pc, #164]	; (8010e4c <mem_free+0xf8>)
 8010da8:	f240 227f 	movw	r2, #639	; 0x27f
 8010dac:	492c      	ldr	r1, [pc, #176]	; (8010e60 <mem_free+0x10c>)
 8010dae:	4829      	ldr	r0, [pc, #164]	; (8010e54 <mem_free+0x100>)
 8010db0:	f00a fdf0 	bl	801b994 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010db4:	f00a fd86 	bl	801b8c4 <sys_arch_protect>
 8010db8:	6138      	str	r0, [r7, #16]
 8010dba:	6938      	ldr	r0, [r7, #16]
 8010dbc:	f00a fd90 	bl	801b8e0 <sys_arch_unprotect>
    return;
 8010dc0:	e041      	b.n	8010e46 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010dc2:	4828      	ldr	r0, [pc, #160]	; (8010e64 <mem_free+0x110>)
 8010dc4:	f00a fd42 	bl	801b84c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8010dc8:	69fb      	ldr	r3, [r7, #28]
 8010dca:	791b      	ldrb	r3, [r3, #4]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d110      	bne.n	8010df2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8010dd0:	4b1e      	ldr	r3, [pc, #120]	; (8010e4c <mem_free+0xf8>)
 8010dd2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8010dd6:	4924      	ldr	r1, [pc, #144]	; (8010e68 <mem_free+0x114>)
 8010dd8:	481e      	ldr	r0, [pc, #120]	; (8010e54 <mem_free+0x100>)
 8010dda:	f00a fddb 	bl	801b994 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8010dde:	4821      	ldr	r0, [pc, #132]	; (8010e64 <mem_free+0x110>)
 8010de0:	f00a fd43 	bl	801b86a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010de4:	f00a fd6e 	bl	801b8c4 <sys_arch_protect>
 8010de8:	6178      	str	r0, [r7, #20]
 8010dea:	6978      	ldr	r0, [r7, #20]
 8010dec:	f00a fd78 	bl	801b8e0 <sys_arch_unprotect>
    return;
 8010df0:	e029      	b.n	8010e46 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8010df2:	69f8      	ldr	r0, [r7, #28]
 8010df4:	f7ff ff72 	bl	8010cdc <mem_link_valid>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d110      	bne.n	8010e20 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8010dfe:	4b13      	ldr	r3, [pc, #76]	; (8010e4c <mem_free+0xf8>)
 8010e00:	f240 2295 	movw	r2, #661	; 0x295
 8010e04:	4919      	ldr	r1, [pc, #100]	; (8010e6c <mem_free+0x118>)
 8010e06:	4813      	ldr	r0, [pc, #76]	; (8010e54 <mem_free+0x100>)
 8010e08:	f00a fdc4 	bl	801b994 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8010e0c:	4815      	ldr	r0, [pc, #84]	; (8010e64 <mem_free+0x110>)
 8010e0e:	f00a fd2c 	bl	801b86a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010e12:	f00a fd57 	bl	801b8c4 <sys_arch_protect>
 8010e16:	61b8      	str	r0, [r7, #24]
 8010e18:	69b8      	ldr	r0, [r7, #24]
 8010e1a:	f00a fd61 	bl	801b8e0 <sys_arch_unprotect>
    return;
 8010e1e:	e012      	b.n	8010e46 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8010e20:	69fb      	ldr	r3, [r7, #28]
 8010e22:	2200      	movs	r2, #0
 8010e24:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8010e26:	4b12      	ldr	r3, [pc, #72]	; (8010e70 <mem_free+0x11c>)
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	69fa      	ldr	r2, [r7, #28]
 8010e2c:	429a      	cmp	r2, r3
 8010e2e:	d202      	bcs.n	8010e36 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8010e30:	4a0f      	ldr	r2, [pc, #60]	; (8010e70 <mem_free+0x11c>)
 8010e32:	69fb      	ldr	r3, [r7, #28]
 8010e34:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8010e36:	69f8      	ldr	r0, [r7, #28]
 8010e38:	f7ff fe5c 	bl	8010af4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010e3c:	4809      	ldr	r0, [pc, #36]	; (8010e64 <mem_free+0x110>)
 8010e3e:	f00a fd14 	bl	801b86a <sys_mutex_unlock>
 8010e42:	e000      	b.n	8010e46 <mem_free+0xf2>
    return;
 8010e44:	bf00      	nop
}
 8010e46:	3720      	adds	r7, #32
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}
 8010e4c:	0801dc1c 	.word	0x0801dc1c
 8010e50:	0801dd0c 	.word	0x0801dd0c
 8010e54:	0801dc64 	.word	0x0801dc64
 8010e58:	2000dfa4 	.word	0x2000dfa4
 8010e5c:	2000dfa8 	.word	0x2000dfa8
 8010e60:	0801dd30 	.word	0x0801dd30
 8010e64:	2000dfac 	.word	0x2000dfac
 8010e68:	0801dd4c 	.word	0x0801dd4c
 8010e6c:	0801dd74 	.word	0x0801dd74
 8010e70:	2000dfb0 	.word	0x2000dfb0

08010e74 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b088      	sub	sp, #32
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
 8010e7c:	460b      	mov	r3, r1
 8010e7e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8010e80:	887b      	ldrh	r3, [r7, #2]
 8010e82:	3303      	adds	r3, #3
 8010e84:	b29b      	uxth	r3, r3
 8010e86:	f023 0303 	bic.w	r3, r3, #3
 8010e8a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8010e8c:	8bfb      	ldrh	r3, [r7, #30]
 8010e8e:	2b0b      	cmp	r3, #11
 8010e90:	d801      	bhi.n	8010e96 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8010e92:	230c      	movs	r3, #12
 8010e94:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8010e96:	8bfb      	ldrh	r3, [r7, #30]
 8010e98:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010e9c:	d803      	bhi.n	8010ea6 <mem_trim+0x32>
 8010e9e:	8bfa      	ldrh	r2, [r7, #30]
 8010ea0:	887b      	ldrh	r3, [r7, #2]
 8010ea2:	429a      	cmp	r2, r3
 8010ea4:	d201      	bcs.n	8010eaa <mem_trim+0x36>
    return NULL;
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	e0d8      	b.n	801105c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8010eaa:	4b6e      	ldr	r3, [pc, #440]	; (8011064 <mem_trim+0x1f0>)
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	687a      	ldr	r2, [r7, #4]
 8010eb0:	429a      	cmp	r2, r3
 8010eb2:	d304      	bcc.n	8010ebe <mem_trim+0x4a>
 8010eb4:	4b6c      	ldr	r3, [pc, #432]	; (8011068 <mem_trim+0x1f4>)
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	687a      	ldr	r2, [r7, #4]
 8010eba:	429a      	cmp	r2, r3
 8010ebc:	d306      	bcc.n	8010ecc <mem_trim+0x58>
 8010ebe:	4b6b      	ldr	r3, [pc, #428]	; (801106c <mem_trim+0x1f8>)
 8010ec0:	f240 22d1 	movw	r2, #721	; 0x2d1
 8010ec4:	496a      	ldr	r1, [pc, #424]	; (8011070 <mem_trim+0x1fc>)
 8010ec6:	486b      	ldr	r0, [pc, #428]	; (8011074 <mem_trim+0x200>)
 8010ec8:	f00a fd64 	bl	801b994 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8010ecc:	4b65      	ldr	r3, [pc, #404]	; (8011064 <mem_trim+0x1f0>)
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	687a      	ldr	r2, [r7, #4]
 8010ed2:	429a      	cmp	r2, r3
 8010ed4:	d304      	bcc.n	8010ee0 <mem_trim+0x6c>
 8010ed6:	4b64      	ldr	r3, [pc, #400]	; (8011068 <mem_trim+0x1f4>)
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	687a      	ldr	r2, [r7, #4]
 8010edc:	429a      	cmp	r2, r3
 8010ede:	d307      	bcc.n	8010ef0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010ee0:	f00a fcf0 	bl	801b8c4 <sys_arch_protect>
 8010ee4:	60b8      	str	r0, [r7, #8]
 8010ee6:	68b8      	ldr	r0, [r7, #8]
 8010ee8:	f00a fcfa 	bl	801b8e0 <sys_arch_unprotect>
    return rmem;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	e0b5      	b.n	801105c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	3b08      	subs	r3, #8
 8010ef4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8010ef6:	69b8      	ldr	r0, [r7, #24]
 8010ef8:	f7ff fdea 	bl	8010ad0 <mem_to_ptr>
 8010efc:	4603      	mov	r3, r0
 8010efe:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8010f00:	69bb      	ldr	r3, [r7, #24]
 8010f02:	881a      	ldrh	r2, [r3, #0]
 8010f04:	8afb      	ldrh	r3, [r7, #22]
 8010f06:	1ad3      	subs	r3, r2, r3
 8010f08:	b29b      	uxth	r3, r3
 8010f0a:	3b08      	subs	r3, #8
 8010f0c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8010f0e:	8bfa      	ldrh	r2, [r7, #30]
 8010f10:	8abb      	ldrh	r3, [r7, #20]
 8010f12:	429a      	cmp	r2, r3
 8010f14:	d906      	bls.n	8010f24 <mem_trim+0xb0>
 8010f16:	4b55      	ldr	r3, [pc, #340]	; (801106c <mem_trim+0x1f8>)
 8010f18:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8010f1c:	4956      	ldr	r1, [pc, #344]	; (8011078 <mem_trim+0x204>)
 8010f1e:	4855      	ldr	r0, [pc, #340]	; (8011074 <mem_trim+0x200>)
 8010f20:	f00a fd38 	bl	801b994 <iprintf>
  if (newsize > size) {
 8010f24:	8bfa      	ldrh	r2, [r7, #30]
 8010f26:	8abb      	ldrh	r3, [r7, #20]
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	d901      	bls.n	8010f30 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	e095      	b.n	801105c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8010f30:	8bfa      	ldrh	r2, [r7, #30]
 8010f32:	8abb      	ldrh	r3, [r7, #20]
 8010f34:	429a      	cmp	r2, r3
 8010f36:	d101      	bne.n	8010f3c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	e08f      	b.n	801105c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010f3c:	484f      	ldr	r0, [pc, #316]	; (801107c <mem_trim+0x208>)
 8010f3e:	f00a fc85 	bl	801b84c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8010f42:	69bb      	ldr	r3, [r7, #24]
 8010f44:	881b      	ldrh	r3, [r3, #0]
 8010f46:	4618      	mov	r0, r3
 8010f48:	f7ff fdb0 	bl	8010aac <ptr_to_mem>
 8010f4c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8010f4e:	693b      	ldr	r3, [r7, #16]
 8010f50:	791b      	ldrb	r3, [r3, #4]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d13f      	bne.n	8010fd6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010f56:	69bb      	ldr	r3, [r7, #24]
 8010f58:	881b      	ldrh	r3, [r3, #0]
 8010f5a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010f5e:	d106      	bne.n	8010f6e <mem_trim+0xfa>
 8010f60:	4b42      	ldr	r3, [pc, #264]	; (801106c <mem_trim+0x1f8>)
 8010f62:	f240 22f5 	movw	r2, #757	; 0x2f5
 8010f66:	4946      	ldr	r1, [pc, #280]	; (8011080 <mem_trim+0x20c>)
 8010f68:	4842      	ldr	r0, [pc, #264]	; (8011074 <mem_trim+0x200>)
 8010f6a:	f00a fd13 	bl	801b994 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8010f6e:	693b      	ldr	r3, [r7, #16]
 8010f70:	881b      	ldrh	r3, [r3, #0]
 8010f72:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010f74:	8afa      	ldrh	r2, [r7, #22]
 8010f76:	8bfb      	ldrh	r3, [r7, #30]
 8010f78:	4413      	add	r3, r2
 8010f7a:	b29b      	uxth	r3, r3
 8010f7c:	3308      	adds	r3, #8
 8010f7e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8010f80:	4b40      	ldr	r3, [pc, #256]	; (8011084 <mem_trim+0x210>)
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	693a      	ldr	r2, [r7, #16]
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d106      	bne.n	8010f98 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8010f8a:	89fb      	ldrh	r3, [r7, #14]
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f7ff fd8d 	bl	8010aac <ptr_to_mem>
 8010f92:	4603      	mov	r3, r0
 8010f94:	4a3b      	ldr	r2, [pc, #236]	; (8011084 <mem_trim+0x210>)
 8010f96:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8010f98:	89fb      	ldrh	r3, [r7, #14]
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	f7ff fd86 	bl	8010aac <ptr_to_mem>
 8010fa0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8010fa2:	693b      	ldr	r3, [r7, #16]
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8010fa8:	693b      	ldr	r3, [r7, #16]
 8010faa:	89ba      	ldrh	r2, [r7, #12]
 8010fac:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8010fae:	693b      	ldr	r3, [r7, #16]
 8010fb0:	8afa      	ldrh	r2, [r7, #22]
 8010fb2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8010fb4:	69bb      	ldr	r3, [r7, #24]
 8010fb6:	89fa      	ldrh	r2, [r7, #14]
 8010fb8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	881b      	ldrh	r3, [r3, #0]
 8010fbe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010fc2:	d047      	beq.n	8011054 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010fc4:	693b      	ldr	r3, [r7, #16]
 8010fc6:	881b      	ldrh	r3, [r3, #0]
 8010fc8:	4618      	mov	r0, r3
 8010fca:	f7ff fd6f 	bl	8010aac <ptr_to_mem>
 8010fce:	4602      	mov	r2, r0
 8010fd0:	89fb      	ldrh	r3, [r7, #14]
 8010fd2:	8053      	strh	r3, [r2, #2]
 8010fd4:	e03e      	b.n	8011054 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8010fd6:	8bfb      	ldrh	r3, [r7, #30]
 8010fd8:	f103 0214 	add.w	r2, r3, #20
 8010fdc:	8abb      	ldrh	r3, [r7, #20]
 8010fde:	429a      	cmp	r2, r3
 8010fe0:	d838      	bhi.n	8011054 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010fe2:	8afa      	ldrh	r2, [r7, #22]
 8010fe4:	8bfb      	ldrh	r3, [r7, #30]
 8010fe6:	4413      	add	r3, r2
 8010fe8:	b29b      	uxth	r3, r3
 8010fea:	3308      	adds	r3, #8
 8010fec:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010fee:	69bb      	ldr	r3, [r7, #24]
 8010ff0:	881b      	ldrh	r3, [r3, #0]
 8010ff2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010ff6:	d106      	bne.n	8011006 <mem_trim+0x192>
 8010ff8:	4b1c      	ldr	r3, [pc, #112]	; (801106c <mem_trim+0x1f8>)
 8010ffa:	f240 3216 	movw	r2, #790	; 0x316
 8010ffe:	4920      	ldr	r1, [pc, #128]	; (8011080 <mem_trim+0x20c>)
 8011000:	481c      	ldr	r0, [pc, #112]	; (8011074 <mem_trim+0x200>)
 8011002:	f00a fcc7 	bl	801b994 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8011006:	89fb      	ldrh	r3, [r7, #14]
 8011008:	4618      	mov	r0, r3
 801100a:	f7ff fd4f 	bl	8010aac <ptr_to_mem>
 801100e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8011010:	4b1c      	ldr	r3, [pc, #112]	; (8011084 <mem_trim+0x210>)
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	693a      	ldr	r2, [r7, #16]
 8011016:	429a      	cmp	r2, r3
 8011018:	d202      	bcs.n	8011020 <mem_trim+0x1ac>
      lfree = mem2;
 801101a:	4a1a      	ldr	r2, [pc, #104]	; (8011084 <mem_trim+0x210>)
 801101c:	693b      	ldr	r3, [r7, #16]
 801101e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8011020:	693b      	ldr	r3, [r7, #16]
 8011022:	2200      	movs	r2, #0
 8011024:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8011026:	69bb      	ldr	r3, [r7, #24]
 8011028:	881a      	ldrh	r2, [r3, #0]
 801102a:	693b      	ldr	r3, [r7, #16]
 801102c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801102e:	693b      	ldr	r3, [r7, #16]
 8011030:	8afa      	ldrh	r2, [r7, #22]
 8011032:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8011034:	69bb      	ldr	r3, [r7, #24]
 8011036:	89fa      	ldrh	r2, [r7, #14]
 8011038:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801103a:	693b      	ldr	r3, [r7, #16]
 801103c:	881b      	ldrh	r3, [r3, #0]
 801103e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011042:	d007      	beq.n	8011054 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011044:	693b      	ldr	r3, [r7, #16]
 8011046:	881b      	ldrh	r3, [r3, #0]
 8011048:	4618      	mov	r0, r3
 801104a:	f7ff fd2f 	bl	8010aac <ptr_to_mem>
 801104e:	4602      	mov	r2, r0
 8011050:	89fb      	ldrh	r3, [r7, #14]
 8011052:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011054:	4809      	ldr	r0, [pc, #36]	; (801107c <mem_trim+0x208>)
 8011056:	f00a fc08 	bl	801b86a <sys_mutex_unlock>
  return rmem;
 801105a:	687b      	ldr	r3, [r7, #4]
}
 801105c:	4618      	mov	r0, r3
 801105e:	3720      	adds	r7, #32
 8011060:	46bd      	mov	sp, r7
 8011062:	bd80      	pop	{r7, pc}
 8011064:	2000dfa4 	.word	0x2000dfa4
 8011068:	2000dfa8 	.word	0x2000dfa8
 801106c:	0801dc1c 	.word	0x0801dc1c
 8011070:	0801dda8 	.word	0x0801dda8
 8011074:	0801dc64 	.word	0x0801dc64
 8011078:	0801ddc0 	.word	0x0801ddc0
 801107c:	2000dfac 	.word	0x2000dfac
 8011080:	0801dde0 	.word	0x0801dde0
 8011084:	2000dfb0 	.word	0x2000dfb0

08011088 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b088      	sub	sp, #32
 801108c:	af00      	add	r7, sp, #0
 801108e:	4603      	mov	r3, r0
 8011090:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8011092:	88fb      	ldrh	r3, [r7, #6]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d101      	bne.n	801109c <mem_malloc+0x14>
    return NULL;
 8011098:	2300      	movs	r3, #0
 801109a:	e0e2      	b.n	8011262 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801109c:	88fb      	ldrh	r3, [r7, #6]
 801109e:	3303      	adds	r3, #3
 80110a0:	b29b      	uxth	r3, r3
 80110a2:	f023 0303 	bic.w	r3, r3, #3
 80110a6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80110a8:	8bbb      	ldrh	r3, [r7, #28]
 80110aa:	2b0b      	cmp	r3, #11
 80110ac:	d801      	bhi.n	80110b2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80110ae:	230c      	movs	r3, #12
 80110b0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80110b2:	8bbb      	ldrh	r3, [r7, #28]
 80110b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80110b8:	d803      	bhi.n	80110c2 <mem_malloc+0x3a>
 80110ba:	8bba      	ldrh	r2, [r7, #28]
 80110bc:	88fb      	ldrh	r3, [r7, #6]
 80110be:	429a      	cmp	r2, r3
 80110c0:	d201      	bcs.n	80110c6 <mem_malloc+0x3e>
    return NULL;
 80110c2:	2300      	movs	r3, #0
 80110c4:	e0cd      	b.n	8011262 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80110c6:	4869      	ldr	r0, [pc, #420]	; (801126c <mem_malloc+0x1e4>)
 80110c8:	f00a fbc0 	bl	801b84c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80110cc:	4b68      	ldr	r3, [pc, #416]	; (8011270 <mem_malloc+0x1e8>)
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	4618      	mov	r0, r3
 80110d2:	f7ff fcfd 	bl	8010ad0 <mem_to_ptr>
 80110d6:	4603      	mov	r3, r0
 80110d8:	83fb      	strh	r3, [r7, #30]
 80110da:	e0b7      	b.n	801124c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80110dc:	8bfb      	ldrh	r3, [r7, #30]
 80110de:	4618      	mov	r0, r3
 80110e0:	f7ff fce4 	bl	8010aac <ptr_to_mem>
 80110e4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80110e6:	697b      	ldr	r3, [r7, #20]
 80110e8:	791b      	ldrb	r3, [r3, #4]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	f040 80a7 	bne.w	801123e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80110f0:	697b      	ldr	r3, [r7, #20]
 80110f2:	881b      	ldrh	r3, [r3, #0]
 80110f4:	461a      	mov	r2, r3
 80110f6:	8bfb      	ldrh	r3, [r7, #30]
 80110f8:	1ad3      	subs	r3, r2, r3
 80110fa:	f1a3 0208 	sub.w	r2, r3, #8
 80110fe:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8011100:	429a      	cmp	r2, r3
 8011102:	f0c0 809c 	bcc.w	801123e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8011106:	697b      	ldr	r3, [r7, #20]
 8011108:	881b      	ldrh	r3, [r3, #0]
 801110a:	461a      	mov	r2, r3
 801110c:	8bfb      	ldrh	r3, [r7, #30]
 801110e:	1ad3      	subs	r3, r2, r3
 8011110:	f1a3 0208 	sub.w	r2, r3, #8
 8011114:	8bbb      	ldrh	r3, [r7, #28]
 8011116:	3314      	adds	r3, #20
 8011118:	429a      	cmp	r2, r3
 801111a:	d333      	bcc.n	8011184 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801111c:	8bfa      	ldrh	r2, [r7, #30]
 801111e:	8bbb      	ldrh	r3, [r7, #28]
 8011120:	4413      	add	r3, r2
 8011122:	b29b      	uxth	r3, r3
 8011124:	3308      	adds	r3, #8
 8011126:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8011128:	8a7b      	ldrh	r3, [r7, #18]
 801112a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801112e:	d106      	bne.n	801113e <mem_malloc+0xb6>
 8011130:	4b50      	ldr	r3, [pc, #320]	; (8011274 <mem_malloc+0x1ec>)
 8011132:	f240 3287 	movw	r2, #903	; 0x387
 8011136:	4950      	ldr	r1, [pc, #320]	; (8011278 <mem_malloc+0x1f0>)
 8011138:	4850      	ldr	r0, [pc, #320]	; (801127c <mem_malloc+0x1f4>)
 801113a:	f00a fc2b 	bl	801b994 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801113e:	8a7b      	ldrh	r3, [r7, #18]
 8011140:	4618      	mov	r0, r3
 8011142:	f7ff fcb3 	bl	8010aac <ptr_to_mem>
 8011146:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	2200      	movs	r2, #0
 801114c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801114e:	697b      	ldr	r3, [r7, #20]
 8011150:	881a      	ldrh	r2, [r3, #0]
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	8bfa      	ldrh	r2, [r7, #30]
 801115a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801115c:	697b      	ldr	r3, [r7, #20]
 801115e:	8a7a      	ldrh	r2, [r7, #18]
 8011160:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8011162:	697b      	ldr	r3, [r7, #20]
 8011164:	2201      	movs	r2, #1
 8011166:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	881b      	ldrh	r3, [r3, #0]
 801116c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011170:	d00b      	beq.n	801118a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	881b      	ldrh	r3, [r3, #0]
 8011176:	4618      	mov	r0, r3
 8011178:	f7ff fc98 	bl	8010aac <ptr_to_mem>
 801117c:	4602      	mov	r2, r0
 801117e:	8a7b      	ldrh	r3, [r7, #18]
 8011180:	8053      	strh	r3, [r2, #2]
 8011182:	e002      	b.n	801118a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8011184:	697b      	ldr	r3, [r7, #20]
 8011186:	2201      	movs	r2, #1
 8011188:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801118a:	4b39      	ldr	r3, [pc, #228]	; (8011270 <mem_malloc+0x1e8>)
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	697a      	ldr	r2, [r7, #20]
 8011190:	429a      	cmp	r2, r3
 8011192:	d127      	bne.n	80111e4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8011194:	4b36      	ldr	r3, [pc, #216]	; (8011270 <mem_malloc+0x1e8>)
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801119a:	e005      	b.n	80111a8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801119c:	69bb      	ldr	r3, [r7, #24]
 801119e:	881b      	ldrh	r3, [r3, #0]
 80111a0:	4618      	mov	r0, r3
 80111a2:	f7ff fc83 	bl	8010aac <ptr_to_mem>
 80111a6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80111a8:	69bb      	ldr	r3, [r7, #24]
 80111aa:	791b      	ldrb	r3, [r3, #4]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d004      	beq.n	80111ba <mem_malloc+0x132>
 80111b0:	4b33      	ldr	r3, [pc, #204]	; (8011280 <mem_malloc+0x1f8>)
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	69ba      	ldr	r2, [r7, #24]
 80111b6:	429a      	cmp	r2, r3
 80111b8:	d1f0      	bne.n	801119c <mem_malloc+0x114>
          }
          lfree = cur;
 80111ba:	4a2d      	ldr	r2, [pc, #180]	; (8011270 <mem_malloc+0x1e8>)
 80111bc:	69bb      	ldr	r3, [r7, #24]
 80111be:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80111c0:	4b2b      	ldr	r3, [pc, #172]	; (8011270 <mem_malloc+0x1e8>)
 80111c2:	681a      	ldr	r2, [r3, #0]
 80111c4:	4b2e      	ldr	r3, [pc, #184]	; (8011280 <mem_malloc+0x1f8>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	429a      	cmp	r2, r3
 80111ca:	d00b      	beq.n	80111e4 <mem_malloc+0x15c>
 80111cc:	4b28      	ldr	r3, [pc, #160]	; (8011270 <mem_malloc+0x1e8>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	791b      	ldrb	r3, [r3, #4]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d006      	beq.n	80111e4 <mem_malloc+0x15c>
 80111d6:	4b27      	ldr	r3, [pc, #156]	; (8011274 <mem_malloc+0x1ec>)
 80111d8:	f240 32b5 	movw	r2, #949	; 0x3b5
 80111dc:	4929      	ldr	r1, [pc, #164]	; (8011284 <mem_malloc+0x1fc>)
 80111de:	4827      	ldr	r0, [pc, #156]	; (801127c <mem_malloc+0x1f4>)
 80111e0:	f00a fbd8 	bl	801b994 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80111e4:	4821      	ldr	r0, [pc, #132]	; (801126c <mem_malloc+0x1e4>)
 80111e6:	f00a fb40 	bl	801b86a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80111ea:	8bba      	ldrh	r2, [r7, #28]
 80111ec:	697b      	ldr	r3, [r7, #20]
 80111ee:	4413      	add	r3, r2
 80111f0:	3308      	adds	r3, #8
 80111f2:	4a23      	ldr	r2, [pc, #140]	; (8011280 <mem_malloc+0x1f8>)
 80111f4:	6812      	ldr	r2, [r2, #0]
 80111f6:	4293      	cmp	r3, r2
 80111f8:	d906      	bls.n	8011208 <mem_malloc+0x180>
 80111fa:	4b1e      	ldr	r3, [pc, #120]	; (8011274 <mem_malloc+0x1ec>)
 80111fc:	f240 32b9 	movw	r2, #953	; 0x3b9
 8011200:	4921      	ldr	r1, [pc, #132]	; (8011288 <mem_malloc+0x200>)
 8011202:	481e      	ldr	r0, [pc, #120]	; (801127c <mem_malloc+0x1f4>)
 8011204:	f00a fbc6 	bl	801b994 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8011208:	697b      	ldr	r3, [r7, #20]
 801120a:	f003 0303 	and.w	r3, r3, #3
 801120e:	2b00      	cmp	r3, #0
 8011210:	d006      	beq.n	8011220 <mem_malloc+0x198>
 8011212:	4b18      	ldr	r3, [pc, #96]	; (8011274 <mem_malloc+0x1ec>)
 8011214:	f240 32bb 	movw	r2, #955	; 0x3bb
 8011218:	491c      	ldr	r1, [pc, #112]	; (801128c <mem_malloc+0x204>)
 801121a:	4818      	ldr	r0, [pc, #96]	; (801127c <mem_malloc+0x1f4>)
 801121c:	f00a fbba 	bl	801b994 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8011220:	697b      	ldr	r3, [r7, #20]
 8011222:	f003 0303 	and.w	r3, r3, #3
 8011226:	2b00      	cmp	r3, #0
 8011228:	d006      	beq.n	8011238 <mem_malloc+0x1b0>
 801122a:	4b12      	ldr	r3, [pc, #72]	; (8011274 <mem_malloc+0x1ec>)
 801122c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8011230:	4917      	ldr	r1, [pc, #92]	; (8011290 <mem_malloc+0x208>)
 8011232:	4812      	ldr	r0, [pc, #72]	; (801127c <mem_malloc+0x1f4>)
 8011234:	f00a fbae 	bl	801b994 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8011238:	697b      	ldr	r3, [r7, #20]
 801123a:	3308      	adds	r3, #8
 801123c:	e011      	b.n	8011262 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801123e:	8bfb      	ldrh	r3, [r7, #30]
 8011240:	4618      	mov	r0, r3
 8011242:	f7ff fc33 	bl	8010aac <ptr_to_mem>
 8011246:	4603      	mov	r3, r0
 8011248:	881b      	ldrh	r3, [r3, #0]
 801124a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801124c:	8bfa      	ldrh	r2, [r7, #30]
 801124e:	8bbb      	ldrh	r3, [r7, #28]
 8011250:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8011254:	429a      	cmp	r2, r3
 8011256:	f4ff af41 	bcc.w	80110dc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801125a:	4804      	ldr	r0, [pc, #16]	; (801126c <mem_malloc+0x1e4>)
 801125c:	f00a fb05 	bl	801b86a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8011260:	2300      	movs	r3, #0
}
 8011262:	4618      	mov	r0, r3
 8011264:	3720      	adds	r7, #32
 8011266:	46bd      	mov	sp, r7
 8011268:	bd80      	pop	{r7, pc}
 801126a:	bf00      	nop
 801126c:	2000dfac 	.word	0x2000dfac
 8011270:	2000dfb0 	.word	0x2000dfb0
 8011274:	0801dc1c 	.word	0x0801dc1c
 8011278:	0801dde0 	.word	0x0801dde0
 801127c:	0801dc64 	.word	0x0801dc64
 8011280:	2000dfa8 	.word	0x2000dfa8
 8011284:	0801ddf4 	.word	0x0801ddf4
 8011288:	0801de10 	.word	0x0801de10
 801128c:	0801de40 	.word	0x0801de40
 8011290:	0801de70 	.word	0x0801de70

08011294 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011294:	b480      	push	{r7}
 8011296:	b085      	sub	sp, #20
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	689b      	ldr	r3, [r3, #8]
 80112a0:	2200      	movs	r2, #0
 80112a2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	685b      	ldr	r3, [r3, #4]
 80112a8:	3303      	adds	r3, #3
 80112aa:	f023 0303 	bic.w	r3, r3, #3
 80112ae:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80112b0:	2300      	movs	r3, #0
 80112b2:	60fb      	str	r3, [r7, #12]
 80112b4:	e011      	b.n	80112da <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	689b      	ldr	r3, [r3, #8]
 80112ba:	681a      	ldr	r2, [r3, #0]
 80112bc:	68bb      	ldr	r3, [r7, #8]
 80112be:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	689b      	ldr	r3, [r3, #8]
 80112c4:	68ba      	ldr	r2, [r7, #8]
 80112c6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	881b      	ldrh	r3, [r3, #0]
 80112cc:	461a      	mov	r2, r3
 80112ce:	68bb      	ldr	r3, [r7, #8]
 80112d0:	4413      	add	r3, r2
 80112d2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	3301      	adds	r3, #1
 80112d8:	60fb      	str	r3, [r7, #12]
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	885b      	ldrh	r3, [r3, #2]
 80112de:	461a      	mov	r2, r3
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	4293      	cmp	r3, r2
 80112e4:	dbe7      	blt.n	80112b6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80112e6:	bf00      	nop
 80112e8:	bf00      	nop
 80112ea:	3714      	adds	r7, #20
 80112ec:	46bd      	mov	sp, r7
 80112ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f2:	4770      	bx	lr

080112f4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b082      	sub	sp, #8
 80112f8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80112fa:	2300      	movs	r3, #0
 80112fc:	80fb      	strh	r3, [r7, #6]
 80112fe:	e009      	b.n	8011314 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8011300:	88fb      	ldrh	r3, [r7, #6]
 8011302:	4a08      	ldr	r2, [pc, #32]	; (8011324 <memp_init+0x30>)
 8011304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011308:	4618      	mov	r0, r3
 801130a:	f7ff ffc3 	bl	8011294 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801130e:	88fb      	ldrh	r3, [r7, #6]
 8011310:	3301      	adds	r3, #1
 8011312:	80fb      	strh	r3, [r7, #6]
 8011314:	88fb      	ldrh	r3, [r7, #6]
 8011316:	2b0c      	cmp	r3, #12
 8011318:	d9f2      	bls.n	8011300 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801131a:	bf00      	nop
 801131c:	bf00      	nop
 801131e:	3708      	adds	r7, #8
 8011320:	46bd      	mov	sp, r7
 8011322:	bd80      	pop	{r7, pc}
 8011324:	08020740 	.word	0x08020740

08011328 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b084      	sub	sp, #16
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8011330:	f00a fac8 	bl	801b8c4 <sys_arch_protect>
 8011334:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	689b      	ldr	r3, [r3, #8]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801133e:	68bb      	ldr	r3, [r7, #8]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d015      	beq.n	8011370 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	689b      	ldr	r3, [r3, #8]
 8011348:	68ba      	ldr	r2, [r7, #8]
 801134a:	6812      	ldr	r2, [r2, #0]
 801134c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801134e:	68bb      	ldr	r3, [r7, #8]
 8011350:	f003 0303 	and.w	r3, r3, #3
 8011354:	2b00      	cmp	r3, #0
 8011356:	d006      	beq.n	8011366 <do_memp_malloc_pool+0x3e>
 8011358:	4b09      	ldr	r3, [pc, #36]	; (8011380 <do_memp_malloc_pool+0x58>)
 801135a:	f44f 728c 	mov.w	r2, #280	; 0x118
 801135e:	4909      	ldr	r1, [pc, #36]	; (8011384 <do_memp_malloc_pool+0x5c>)
 8011360:	4809      	ldr	r0, [pc, #36]	; (8011388 <do_memp_malloc_pool+0x60>)
 8011362:	f00a fb17 	bl	801b994 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011366:	68f8      	ldr	r0, [r7, #12]
 8011368:	f00a faba 	bl	801b8e0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801136c:	68bb      	ldr	r3, [r7, #8]
 801136e:	e003      	b.n	8011378 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011370:	68f8      	ldr	r0, [r7, #12]
 8011372:	f00a fab5 	bl	801b8e0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8011376:	2300      	movs	r3, #0
}
 8011378:	4618      	mov	r0, r3
 801137a:	3710      	adds	r7, #16
 801137c:	46bd      	mov	sp, r7
 801137e:	bd80      	pop	{r7, pc}
 8011380:	0801de94 	.word	0x0801de94
 8011384:	0801dec4 	.word	0x0801dec4
 8011388:	0801dee8 	.word	0x0801dee8

0801138c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b082      	sub	sp, #8
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d106      	bne.n	80113a8 <memp_malloc_pool+0x1c>
 801139a:	4b0a      	ldr	r3, [pc, #40]	; (80113c4 <memp_malloc_pool+0x38>)
 801139c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80113a0:	4909      	ldr	r1, [pc, #36]	; (80113c8 <memp_malloc_pool+0x3c>)
 80113a2:	480a      	ldr	r0, [pc, #40]	; (80113cc <memp_malloc_pool+0x40>)
 80113a4:	f00a faf6 	bl	801b994 <iprintf>
  if (desc == NULL) {
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d101      	bne.n	80113b2 <memp_malloc_pool+0x26>
    return NULL;
 80113ae:	2300      	movs	r3, #0
 80113b0:	e003      	b.n	80113ba <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80113b2:	6878      	ldr	r0, [r7, #4]
 80113b4:	f7ff ffb8 	bl	8011328 <do_memp_malloc_pool>
 80113b8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80113ba:	4618      	mov	r0, r3
 80113bc:	3708      	adds	r7, #8
 80113be:	46bd      	mov	sp, r7
 80113c0:	bd80      	pop	{r7, pc}
 80113c2:	bf00      	nop
 80113c4:	0801de94 	.word	0x0801de94
 80113c8:	0801df10 	.word	0x0801df10
 80113cc:	0801dee8 	.word	0x0801dee8

080113d0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b084      	sub	sp, #16
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	4603      	mov	r3, r0
 80113d8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80113da:	79fb      	ldrb	r3, [r7, #7]
 80113dc:	2b0c      	cmp	r3, #12
 80113de:	d908      	bls.n	80113f2 <memp_malloc+0x22>
 80113e0:	4b0a      	ldr	r3, [pc, #40]	; (801140c <memp_malloc+0x3c>)
 80113e2:	f240 1257 	movw	r2, #343	; 0x157
 80113e6:	490a      	ldr	r1, [pc, #40]	; (8011410 <memp_malloc+0x40>)
 80113e8:	480a      	ldr	r0, [pc, #40]	; (8011414 <memp_malloc+0x44>)
 80113ea:	f00a fad3 	bl	801b994 <iprintf>
 80113ee:	2300      	movs	r3, #0
 80113f0:	e008      	b.n	8011404 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80113f2:	79fb      	ldrb	r3, [r7, #7]
 80113f4:	4a08      	ldr	r2, [pc, #32]	; (8011418 <memp_malloc+0x48>)
 80113f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80113fa:	4618      	mov	r0, r3
 80113fc:	f7ff ff94 	bl	8011328 <do_memp_malloc_pool>
 8011400:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8011402:	68fb      	ldr	r3, [r7, #12]
}
 8011404:	4618      	mov	r0, r3
 8011406:	3710      	adds	r7, #16
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}
 801140c:	0801de94 	.word	0x0801de94
 8011410:	0801df24 	.word	0x0801df24
 8011414:	0801dee8 	.word	0x0801dee8
 8011418:	08020740 	.word	0x08020740

0801141c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b084      	sub	sp, #16
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
 8011424:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8011426:	683b      	ldr	r3, [r7, #0]
 8011428:	f003 0303 	and.w	r3, r3, #3
 801142c:	2b00      	cmp	r3, #0
 801142e:	d006      	beq.n	801143e <do_memp_free_pool+0x22>
 8011430:	4b0d      	ldr	r3, [pc, #52]	; (8011468 <do_memp_free_pool+0x4c>)
 8011432:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8011436:	490d      	ldr	r1, [pc, #52]	; (801146c <do_memp_free_pool+0x50>)
 8011438:	480d      	ldr	r0, [pc, #52]	; (8011470 <do_memp_free_pool+0x54>)
 801143a:	f00a faab 	bl	801b994 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8011442:	f00a fa3f 	bl	801b8c4 <sys_arch_protect>
 8011446:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	689b      	ldr	r3, [r3, #8]
 801144c:	681a      	ldr	r2, [r3, #0]
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	689b      	ldr	r3, [r3, #8]
 8011456:	68fa      	ldr	r2, [r7, #12]
 8011458:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801145a:	68b8      	ldr	r0, [r7, #8]
 801145c:	f00a fa40 	bl	801b8e0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8011460:	bf00      	nop
 8011462:	3710      	adds	r7, #16
 8011464:	46bd      	mov	sp, r7
 8011466:	bd80      	pop	{r7, pc}
 8011468:	0801de94 	.word	0x0801de94
 801146c:	0801df44 	.word	0x0801df44
 8011470:	0801dee8 	.word	0x0801dee8

08011474 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b082      	sub	sp, #8
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
 801147c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d106      	bne.n	8011492 <memp_free_pool+0x1e>
 8011484:	4b0a      	ldr	r3, [pc, #40]	; (80114b0 <memp_free_pool+0x3c>)
 8011486:	f240 1295 	movw	r2, #405	; 0x195
 801148a:	490a      	ldr	r1, [pc, #40]	; (80114b4 <memp_free_pool+0x40>)
 801148c:	480a      	ldr	r0, [pc, #40]	; (80114b8 <memp_free_pool+0x44>)
 801148e:	f00a fa81 	bl	801b994 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d007      	beq.n	80114a8 <memp_free_pool+0x34>
 8011498:	683b      	ldr	r3, [r7, #0]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d004      	beq.n	80114a8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801149e:	6839      	ldr	r1, [r7, #0]
 80114a0:	6878      	ldr	r0, [r7, #4]
 80114a2:	f7ff ffbb 	bl	801141c <do_memp_free_pool>
 80114a6:	e000      	b.n	80114aa <memp_free_pool+0x36>
    return;
 80114a8:	bf00      	nop
}
 80114aa:	3708      	adds	r7, #8
 80114ac:	46bd      	mov	sp, r7
 80114ae:	bd80      	pop	{r7, pc}
 80114b0:	0801de94 	.word	0x0801de94
 80114b4:	0801df10 	.word	0x0801df10
 80114b8:	0801dee8 	.word	0x0801dee8

080114bc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b082      	sub	sp, #8
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	4603      	mov	r3, r0
 80114c4:	6039      	str	r1, [r7, #0]
 80114c6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80114c8:	79fb      	ldrb	r3, [r7, #7]
 80114ca:	2b0c      	cmp	r3, #12
 80114cc:	d907      	bls.n	80114de <memp_free+0x22>
 80114ce:	4b0c      	ldr	r3, [pc, #48]	; (8011500 <memp_free+0x44>)
 80114d0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80114d4:	490b      	ldr	r1, [pc, #44]	; (8011504 <memp_free+0x48>)
 80114d6:	480c      	ldr	r0, [pc, #48]	; (8011508 <memp_free+0x4c>)
 80114d8:	f00a fa5c 	bl	801b994 <iprintf>
 80114dc:	e00c      	b.n	80114f8 <memp_free+0x3c>

  if (mem == NULL) {
 80114de:	683b      	ldr	r3, [r7, #0]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d008      	beq.n	80114f6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80114e4:	79fb      	ldrb	r3, [r7, #7]
 80114e6:	4a09      	ldr	r2, [pc, #36]	; (801150c <memp_free+0x50>)
 80114e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80114ec:	6839      	ldr	r1, [r7, #0]
 80114ee:	4618      	mov	r0, r3
 80114f0:	f7ff ff94 	bl	801141c <do_memp_free_pool>
 80114f4:	e000      	b.n	80114f8 <memp_free+0x3c>
    return;
 80114f6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80114f8:	3708      	adds	r7, #8
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
 80114fe:	bf00      	nop
 8011500:	0801de94 	.word	0x0801de94
 8011504:	0801df64 	.word	0x0801df64
 8011508:	0801dee8 	.word	0x0801dee8
 801150c:	08020740 	.word	0x08020740

08011510 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8011510:	b480      	push	{r7}
 8011512:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8011514:	bf00      	nop
 8011516:	46bd      	mov	sp, r7
 8011518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151c:	4770      	bx	lr
	...

08011520 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b086      	sub	sp, #24
 8011524:	af00      	add	r7, sp, #0
 8011526:	60f8      	str	r0, [r7, #12]
 8011528:	60b9      	str	r1, [r7, #8]
 801152a:	607a      	str	r2, [r7, #4]
 801152c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d108      	bne.n	8011546 <netif_add+0x26>
 8011534:	4b57      	ldr	r3, [pc, #348]	; (8011694 <netif_add+0x174>)
 8011536:	f240 1227 	movw	r2, #295	; 0x127
 801153a:	4957      	ldr	r1, [pc, #348]	; (8011698 <netif_add+0x178>)
 801153c:	4857      	ldr	r0, [pc, #348]	; (801169c <netif_add+0x17c>)
 801153e:	f00a fa29 	bl	801b994 <iprintf>
 8011542:	2300      	movs	r3, #0
 8011544:	e0a2      	b.n	801168c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8011546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011548:	2b00      	cmp	r3, #0
 801154a:	d108      	bne.n	801155e <netif_add+0x3e>
 801154c:	4b51      	ldr	r3, [pc, #324]	; (8011694 <netif_add+0x174>)
 801154e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8011552:	4953      	ldr	r1, [pc, #332]	; (80116a0 <netif_add+0x180>)
 8011554:	4851      	ldr	r0, [pc, #324]	; (801169c <netif_add+0x17c>)
 8011556:	f00a fa1d 	bl	801b994 <iprintf>
 801155a:	2300      	movs	r3, #0
 801155c:	e096      	b.n	801168c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801155e:	68bb      	ldr	r3, [r7, #8]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d101      	bne.n	8011568 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8011564:	4b4f      	ldr	r3, [pc, #316]	; (80116a4 <netif_add+0x184>)
 8011566:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d101      	bne.n	8011572 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801156e:	4b4d      	ldr	r3, [pc, #308]	; (80116a4 <netif_add+0x184>)
 8011570:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011572:	683b      	ldr	r3, [r7, #0]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d101      	bne.n	801157c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8011578:	4b4a      	ldr	r3, [pc, #296]	; (80116a4 <netif_add+0x184>)
 801157a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	2200      	movs	r2, #0
 8011580:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	2200      	movs	r2, #0
 8011586:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	2200      	movs	r2, #0
 801158c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	4a45      	ldr	r2, [pc, #276]	; (80116a8 <netif_add+0x188>)
 8011592:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	2200      	movs	r2, #0
 8011598:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	2200      	movs	r2, #0
 801159e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	2200      	movs	r2, #0
 80115a6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	6a3a      	ldr	r2, [r7, #32]
 80115ac:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80115ae:	4b3f      	ldr	r3, [pc, #252]	; (80116ac <netif_add+0x18c>)
 80115b0:	781a      	ldrb	r2, [r3, #0]
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115bc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	687a      	ldr	r2, [r7, #4]
 80115c2:	68b9      	ldr	r1, [r7, #8]
 80115c4:	68f8      	ldr	r0, [r7, #12]
 80115c6:	f000 f913 	bl	80117f0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80115ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115cc:	68f8      	ldr	r0, [r7, #12]
 80115ce:	4798      	blx	r3
 80115d0:	4603      	mov	r3, r0
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d001      	beq.n	80115da <netif_add+0xba>
    return NULL;
 80115d6:	2300      	movs	r3, #0
 80115d8:	e058      	b.n	801168c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80115e0:	2bff      	cmp	r3, #255	; 0xff
 80115e2:	d103      	bne.n	80115ec <netif_add+0xcc>
        netif->num = 0;
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	2200      	movs	r2, #0
 80115e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80115ec:	2300      	movs	r3, #0
 80115ee:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80115f0:	4b2f      	ldr	r3, [pc, #188]	; (80116b0 <netif_add+0x190>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	617b      	str	r3, [r7, #20]
 80115f6:	e02b      	b.n	8011650 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80115f8:	697a      	ldr	r2, [r7, #20]
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	429a      	cmp	r2, r3
 80115fe:	d106      	bne.n	801160e <netif_add+0xee>
 8011600:	4b24      	ldr	r3, [pc, #144]	; (8011694 <netif_add+0x174>)
 8011602:	f240 128b 	movw	r2, #395	; 0x18b
 8011606:	492b      	ldr	r1, [pc, #172]	; (80116b4 <netif_add+0x194>)
 8011608:	4824      	ldr	r0, [pc, #144]	; (801169c <netif_add+0x17c>)
 801160a:	f00a f9c3 	bl	801b994 <iprintf>
        num_netifs++;
 801160e:	693b      	ldr	r3, [r7, #16]
 8011610:	3301      	adds	r3, #1
 8011612:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8011614:	693b      	ldr	r3, [r7, #16]
 8011616:	2bff      	cmp	r3, #255	; 0xff
 8011618:	dd06      	ble.n	8011628 <netif_add+0x108>
 801161a:	4b1e      	ldr	r3, [pc, #120]	; (8011694 <netif_add+0x174>)
 801161c:	f240 128d 	movw	r2, #397	; 0x18d
 8011620:	4925      	ldr	r1, [pc, #148]	; (80116b8 <netif_add+0x198>)
 8011622:	481e      	ldr	r0, [pc, #120]	; (801169c <netif_add+0x17c>)
 8011624:	f00a f9b6 	bl	801b994 <iprintf>
        if (netif2->num == netif->num) {
 8011628:	697b      	ldr	r3, [r7, #20]
 801162a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011634:	429a      	cmp	r2, r3
 8011636:	d108      	bne.n	801164a <netif_add+0x12a>
          netif->num++;
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801163e:	3301      	adds	r3, #1
 8011640:	b2da      	uxtb	r2, r3
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8011648:	e005      	b.n	8011656 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801164a:	697b      	ldr	r3, [r7, #20]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	617b      	str	r3, [r7, #20]
 8011650:	697b      	ldr	r3, [r7, #20]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d1d0      	bne.n	80115f8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8011656:	697b      	ldr	r3, [r7, #20]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d1be      	bne.n	80115da <netif_add+0xba>
  }
  if (netif->num == 254) {
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011662:	2bfe      	cmp	r3, #254	; 0xfe
 8011664:	d103      	bne.n	801166e <netif_add+0x14e>
    netif_num = 0;
 8011666:	4b11      	ldr	r3, [pc, #68]	; (80116ac <netif_add+0x18c>)
 8011668:	2200      	movs	r2, #0
 801166a:	701a      	strb	r2, [r3, #0]
 801166c:	e006      	b.n	801167c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011674:	3301      	adds	r3, #1
 8011676:	b2da      	uxtb	r2, r3
 8011678:	4b0c      	ldr	r3, [pc, #48]	; (80116ac <netif_add+0x18c>)
 801167a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801167c:	4b0c      	ldr	r3, [pc, #48]	; (80116b0 <netif_add+0x190>)
 801167e:	681a      	ldr	r2, [r3, #0]
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8011684:	4a0a      	ldr	r2, [pc, #40]	; (80116b0 <netif_add+0x190>)
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801168a:	68fb      	ldr	r3, [r7, #12]
}
 801168c:	4618      	mov	r0, r3
 801168e:	3718      	adds	r7, #24
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}
 8011694:	0801df80 	.word	0x0801df80
 8011698:	0801e014 	.word	0x0801e014
 801169c:	0801dfd0 	.word	0x0801dfd0
 80116a0:	0801e030 	.word	0x0801e030
 80116a4:	080207b4 	.word	0x080207b4
 80116a8:	08011acb 	.word	0x08011acb
 80116ac:	20011088 	.word	0x20011088
 80116b0:	20011080 	.word	0x20011080
 80116b4:	0801e054 	.word	0x0801e054
 80116b8:	0801e068 	.word	0x0801e068

080116bc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b082      	sub	sp, #8
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
 80116c4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80116c6:	6839      	ldr	r1, [r7, #0]
 80116c8:	6878      	ldr	r0, [r7, #4]
 80116ca:	f002 fdb7 	bl	801423c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80116ce:	6839      	ldr	r1, [r7, #0]
 80116d0:	6878      	ldr	r0, [r7, #4]
 80116d2:	f007 fc69 	bl	8018fa8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80116d6:	bf00      	nop
 80116d8:	3708      	adds	r7, #8
 80116da:	46bd      	mov	sp, r7
 80116dc:	bd80      	pop	{r7, pc}
	...

080116e0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b086      	sub	sp, #24
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	60f8      	str	r0, [r7, #12]
 80116e8:	60b9      	str	r1, [r7, #8]
 80116ea:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80116ec:	68bb      	ldr	r3, [r7, #8]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d106      	bne.n	8011700 <netif_do_set_ipaddr+0x20>
 80116f2:	4b1d      	ldr	r3, [pc, #116]	; (8011768 <netif_do_set_ipaddr+0x88>)
 80116f4:	f240 12cb 	movw	r2, #459	; 0x1cb
 80116f8:	491c      	ldr	r1, [pc, #112]	; (801176c <netif_do_set_ipaddr+0x8c>)
 80116fa:	481d      	ldr	r0, [pc, #116]	; (8011770 <netif_do_set_ipaddr+0x90>)
 80116fc:	f00a f94a 	bl	801b994 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d106      	bne.n	8011714 <netif_do_set_ipaddr+0x34>
 8011706:	4b18      	ldr	r3, [pc, #96]	; (8011768 <netif_do_set_ipaddr+0x88>)
 8011708:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801170c:	4917      	ldr	r1, [pc, #92]	; (801176c <netif_do_set_ipaddr+0x8c>)
 801170e:	4818      	ldr	r0, [pc, #96]	; (8011770 <netif_do_set_ipaddr+0x90>)
 8011710:	f00a f940 	bl	801b994 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8011714:	68bb      	ldr	r3, [r7, #8]
 8011716:	681a      	ldr	r2, [r3, #0]
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	3304      	adds	r3, #4
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	429a      	cmp	r2, r3
 8011720:	d01c      	beq.n	801175c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8011722:	68bb      	ldr	r3, [r7, #8]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	3304      	adds	r3, #4
 801172c:	681a      	ldr	r2, [r3, #0]
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8011732:	f107 0314 	add.w	r3, r7, #20
 8011736:	4619      	mov	r1, r3
 8011738:	6878      	ldr	r0, [r7, #4]
 801173a:	f7ff ffbf 	bl	80116bc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801173e:	68bb      	ldr	r3, [r7, #8]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d002      	beq.n	801174a <netif_do_set_ipaddr+0x6a>
 8011744:	68bb      	ldr	r3, [r7, #8]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	e000      	b.n	801174c <netif_do_set_ipaddr+0x6c>
 801174a:	2300      	movs	r3, #0
 801174c:	68fa      	ldr	r2, [r7, #12]
 801174e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8011750:	2101      	movs	r1, #1
 8011752:	68f8      	ldr	r0, [r7, #12]
 8011754:	f000 f8d2 	bl	80118fc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8011758:	2301      	movs	r3, #1
 801175a:	e000      	b.n	801175e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801175c:	2300      	movs	r3, #0
}
 801175e:	4618      	mov	r0, r3
 8011760:	3718      	adds	r7, #24
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}
 8011766:	bf00      	nop
 8011768:	0801df80 	.word	0x0801df80
 801176c:	0801e098 	.word	0x0801e098
 8011770:	0801dfd0 	.word	0x0801dfd0

08011774 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8011774:	b480      	push	{r7}
 8011776:	b085      	sub	sp, #20
 8011778:	af00      	add	r7, sp, #0
 801177a:	60f8      	str	r0, [r7, #12]
 801177c:	60b9      	str	r1, [r7, #8]
 801177e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8011780:	68bb      	ldr	r3, [r7, #8]
 8011782:	681a      	ldr	r2, [r3, #0]
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	3308      	adds	r3, #8
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	429a      	cmp	r2, r3
 801178c:	d00a      	beq.n	80117a4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801178e:	68bb      	ldr	r3, [r7, #8]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d002      	beq.n	801179a <netif_do_set_netmask+0x26>
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	e000      	b.n	801179c <netif_do_set_netmask+0x28>
 801179a:	2300      	movs	r3, #0
 801179c:	68fa      	ldr	r2, [r7, #12]
 801179e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80117a0:	2301      	movs	r3, #1
 80117a2:	e000      	b.n	80117a6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80117a4:	2300      	movs	r3, #0
}
 80117a6:	4618      	mov	r0, r3
 80117a8:	3714      	adds	r7, #20
 80117aa:	46bd      	mov	sp, r7
 80117ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b0:	4770      	bx	lr

080117b2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80117b2:	b480      	push	{r7}
 80117b4:	b085      	sub	sp, #20
 80117b6:	af00      	add	r7, sp, #0
 80117b8:	60f8      	str	r0, [r7, #12]
 80117ba:	60b9      	str	r1, [r7, #8]
 80117bc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80117be:	68bb      	ldr	r3, [r7, #8]
 80117c0:	681a      	ldr	r2, [r3, #0]
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	330c      	adds	r3, #12
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	429a      	cmp	r2, r3
 80117ca:	d00a      	beq.n	80117e2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80117cc:	68bb      	ldr	r3, [r7, #8]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d002      	beq.n	80117d8 <netif_do_set_gw+0x26>
 80117d2:	68bb      	ldr	r3, [r7, #8]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	e000      	b.n	80117da <netif_do_set_gw+0x28>
 80117d8:	2300      	movs	r3, #0
 80117da:	68fa      	ldr	r2, [r7, #12]
 80117dc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80117de:	2301      	movs	r3, #1
 80117e0:	e000      	b.n	80117e4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80117e2:	2300      	movs	r3, #0
}
 80117e4:	4618      	mov	r0, r3
 80117e6:	3714      	adds	r7, #20
 80117e8:	46bd      	mov	sp, r7
 80117ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ee:	4770      	bx	lr

080117f0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b088      	sub	sp, #32
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	60f8      	str	r0, [r7, #12]
 80117f8:	60b9      	str	r1, [r7, #8]
 80117fa:	607a      	str	r2, [r7, #4]
 80117fc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80117fe:	2300      	movs	r3, #0
 8011800:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8011802:	2300      	movs	r3, #0
 8011804:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011806:	68bb      	ldr	r3, [r7, #8]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d101      	bne.n	8011810 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801180c:	4b1c      	ldr	r3, [pc, #112]	; (8011880 <netif_set_addr+0x90>)
 801180e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d101      	bne.n	801181a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8011816:	4b1a      	ldr	r3, [pc, #104]	; (8011880 <netif_set_addr+0x90>)
 8011818:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d101      	bne.n	8011824 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8011820:	4b17      	ldr	r3, [pc, #92]	; (8011880 <netif_set_addr+0x90>)
 8011822:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8011824:	68bb      	ldr	r3, [r7, #8]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d003      	beq.n	8011832 <netif_set_addr+0x42>
 801182a:	68bb      	ldr	r3, [r7, #8]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d101      	bne.n	8011836 <netif_set_addr+0x46>
 8011832:	2301      	movs	r3, #1
 8011834:	e000      	b.n	8011838 <netif_set_addr+0x48>
 8011836:	2300      	movs	r3, #0
 8011838:	617b      	str	r3, [r7, #20]
  if (remove) {
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d006      	beq.n	801184e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011840:	f107 0310 	add.w	r3, r7, #16
 8011844:	461a      	mov	r2, r3
 8011846:	68b9      	ldr	r1, [r7, #8]
 8011848:	68f8      	ldr	r0, [r7, #12]
 801184a:	f7ff ff49 	bl	80116e0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801184e:	69fa      	ldr	r2, [r7, #28]
 8011850:	6879      	ldr	r1, [r7, #4]
 8011852:	68f8      	ldr	r0, [r7, #12]
 8011854:	f7ff ff8e 	bl	8011774 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8011858:	69ba      	ldr	r2, [r7, #24]
 801185a:	6839      	ldr	r1, [r7, #0]
 801185c:	68f8      	ldr	r0, [r7, #12]
 801185e:	f7ff ffa8 	bl	80117b2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8011862:	697b      	ldr	r3, [r7, #20]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d106      	bne.n	8011876 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011868:	f107 0310 	add.w	r3, r7, #16
 801186c:	461a      	mov	r2, r3
 801186e:	68b9      	ldr	r1, [r7, #8]
 8011870:	68f8      	ldr	r0, [r7, #12]
 8011872:	f7ff ff35 	bl	80116e0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8011876:	bf00      	nop
 8011878:	3720      	adds	r7, #32
 801187a:	46bd      	mov	sp, r7
 801187c:	bd80      	pop	{r7, pc}
 801187e:	bf00      	nop
 8011880:	080207b4 	.word	0x080207b4

08011884 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8011884:	b480      	push	{r7}
 8011886:	b083      	sub	sp, #12
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801188c:	4a04      	ldr	r2, [pc, #16]	; (80118a0 <netif_set_default+0x1c>)
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8011892:	bf00      	nop
 8011894:	370c      	adds	r7, #12
 8011896:	46bd      	mov	sp, r7
 8011898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189c:	4770      	bx	lr
 801189e:	bf00      	nop
 80118a0:	20011084 	.word	0x20011084

080118a4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b082      	sub	sp, #8
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d107      	bne.n	80118c2 <netif_set_up+0x1e>
 80118b2:	4b0f      	ldr	r3, [pc, #60]	; (80118f0 <netif_set_up+0x4c>)
 80118b4:	f44f 7254 	mov.w	r2, #848	; 0x350
 80118b8:	490e      	ldr	r1, [pc, #56]	; (80118f4 <netif_set_up+0x50>)
 80118ba:	480f      	ldr	r0, [pc, #60]	; (80118f8 <netif_set_up+0x54>)
 80118bc:	f00a f86a 	bl	801b994 <iprintf>
 80118c0:	e013      	b.n	80118ea <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80118c8:	f003 0301 	and.w	r3, r3, #1
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d10c      	bne.n	80118ea <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80118d6:	f043 0301 	orr.w	r3, r3, #1
 80118da:	b2da      	uxtb	r2, r3
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80118e2:	2103      	movs	r1, #3
 80118e4:	6878      	ldr	r0, [r7, #4]
 80118e6:	f000 f809 	bl	80118fc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80118ea:	3708      	adds	r7, #8
 80118ec:	46bd      	mov	sp, r7
 80118ee:	bd80      	pop	{r7, pc}
 80118f0:	0801df80 	.word	0x0801df80
 80118f4:	0801e108 	.word	0x0801e108
 80118f8:	0801dfd0 	.word	0x0801dfd0

080118fc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b082      	sub	sp, #8
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
 8011904:	460b      	mov	r3, r1
 8011906:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d106      	bne.n	801191c <netif_issue_reports+0x20>
 801190e:	4b18      	ldr	r3, [pc, #96]	; (8011970 <netif_issue_reports+0x74>)
 8011910:	f240 326d 	movw	r2, #877	; 0x36d
 8011914:	4917      	ldr	r1, [pc, #92]	; (8011974 <netif_issue_reports+0x78>)
 8011916:	4818      	ldr	r0, [pc, #96]	; (8011978 <netif_issue_reports+0x7c>)
 8011918:	f00a f83c 	bl	801b994 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011922:	f003 0304 	and.w	r3, r3, #4
 8011926:	2b00      	cmp	r3, #0
 8011928:	d01e      	beq.n	8011968 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011930:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011934:	2b00      	cmp	r3, #0
 8011936:	d017      	beq.n	8011968 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011938:	78fb      	ldrb	r3, [r7, #3]
 801193a:	f003 0301 	and.w	r3, r3, #1
 801193e:	2b00      	cmp	r3, #0
 8011940:	d013      	beq.n	801196a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	3304      	adds	r3, #4
 8011946:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011948:	2b00      	cmp	r3, #0
 801194a:	d00e      	beq.n	801196a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011952:	f003 0308 	and.w	r3, r3, #8
 8011956:	2b00      	cmp	r3, #0
 8011958:	d007      	beq.n	801196a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	3304      	adds	r3, #4
 801195e:	4619      	mov	r1, r3
 8011960:	6878      	ldr	r0, [r7, #4]
 8011962:	f008 fa8b 	bl	8019e7c <etharp_request>
 8011966:	e000      	b.n	801196a <netif_issue_reports+0x6e>
    return;
 8011968:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801196a:	3708      	adds	r7, #8
 801196c:	46bd      	mov	sp, r7
 801196e:	bd80      	pop	{r7, pc}
 8011970:	0801df80 	.word	0x0801df80
 8011974:	0801e124 	.word	0x0801e124
 8011978:	0801dfd0 	.word	0x0801dfd0

0801197c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b082      	sub	sp, #8
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d107      	bne.n	801199a <netif_set_down+0x1e>
 801198a:	4b12      	ldr	r3, [pc, #72]	; (80119d4 <netif_set_down+0x58>)
 801198c:	f240 329b 	movw	r2, #923	; 0x39b
 8011990:	4911      	ldr	r1, [pc, #68]	; (80119d8 <netif_set_down+0x5c>)
 8011992:	4812      	ldr	r0, [pc, #72]	; (80119dc <netif_set_down+0x60>)
 8011994:	f009 fffe 	bl	801b994 <iprintf>
 8011998:	e019      	b.n	80119ce <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80119a0:	f003 0301 	and.w	r3, r3, #1
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d012      	beq.n	80119ce <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80119ae:	f023 0301 	bic.w	r3, r3, #1
 80119b2:	b2da      	uxtb	r2, r3
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80119c0:	f003 0308 	and.w	r3, r3, #8
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d002      	beq.n	80119ce <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80119c8:	6878      	ldr	r0, [r7, #4]
 80119ca:	f007 fe15 	bl	80195f8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80119ce:	3708      	adds	r7, #8
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}
 80119d4:	0801df80 	.word	0x0801df80
 80119d8:	0801e148 	.word	0x0801e148
 80119dc:	0801dfd0 	.word	0x0801dfd0

080119e0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b082      	sub	sp, #8
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d107      	bne.n	80119fe <netif_set_link_up+0x1e>
 80119ee:	4b13      	ldr	r3, [pc, #76]	; (8011a3c <netif_set_link_up+0x5c>)
 80119f0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80119f4:	4912      	ldr	r1, [pc, #72]	; (8011a40 <netif_set_link_up+0x60>)
 80119f6:	4813      	ldr	r0, [pc, #76]	; (8011a44 <netif_set_link_up+0x64>)
 80119f8:	f009 ffcc 	bl	801b994 <iprintf>
 80119fc:	e01b      	b.n	8011a36 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011a04:	f003 0304 	and.w	r3, r3, #4
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d114      	bne.n	8011a36 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011a12:	f043 0304 	orr.w	r3, r3, #4
 8011a16:	b2da      	uxtb	r2, r3
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011a1e:	2103      	movs	r1, #3
 8011a20:	6878      	ldr	r0, [r7, #4]
 8011a22:	f7ff ff6b 	bl	80118fc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	69db      	ldr	r3, [r3, #28]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d003      	beq.n	8011a36 <netif_set_link_up+0x56>
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	69db      	ldr	r3, [r3, #28]
 8011a32:	6878      	ldr	r0, [r7, #4]
 8011a34:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011a36:	3708      	adds	r7, #8
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	bd80      	pop	{r7, pc}
 8011a3c:	0801df80 	.word	0x0801df80
 8011a40:	0801e168 	.word	0x0801e168
 8011a44:	0801dfd0 	.word	0x0801dfd0

08011a48 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b082      	sub	sp, #8
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d107      	bne.n	8011a66 <netif_set_link_down+0x1e>
 8011a56:	4b11      	ldr	r3, [pc, #68]	; (8011a9c <netif_set_link_down+0x54>)
 8011a58:	f240 4206 	movw	r2, #1030	; 0x406
 8011a5c:	4910      	ldr	r1, [pc, #64]	; (8011aa0 <netif_set_link_down+0x58>)
 8011a5e:	4811      	ldr	r0, [pc, #68]	; (8011aa4 <netif_set_link_down+0x5c>)
 8011a60:	f009 ff98 	bl	801b994 <iprintf>
 8011a64:	e017      	b.n	8011a96 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011a6c:	f003 0304 	and.w	r3, r3, #4
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d010      	beq.n	8011a96 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011a7a:	f023 0304 	bic.w	r3, r3, #4
 8011a7e:	b2da      	uxtb	r2, r3
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	69db      	ldr	r3, [r3, #28]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d003      	beq.n	8011a96 <netif_set_link_down+0x4e>
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	69db      	ldr	r3, [r3, #28]
 8011a92:	6878      	ldr	r0, [r7, #4]
 8011a94:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011a96:	3708      	adds	r7, #8
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	bd80      	pop	{r7, pc}
 8011a9c:	0801df80 	.word	0x0801df80
 8011aa0:	0801e18c 	.word	0x0801e18c
 8011aa4:	0801dfd0 	.word	0x0801dfd0

08011aa8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8011aa8:	b480      	push	{r7}
 8011aaa:	b083      	sub	sp, #12
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
 8011ab0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d002      	beq.n	8011abe <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	683a      	ldr	r2, [r7, #0]
 8011abc:	61da      	str	r2, [r3, #28]
  }
}
 8011abe:	bf00      	nop
 8011ac0:	370c      	adds	r7, #12
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac8:	4770      	bx	lr

08011aca <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8011aca:	b480      	push	{r7}
 8011acc:	b085      	sub	sp, #20
 8011ace:	af00      	add	r7, sp, #0
 8011ad0:	60f8      	str	r0, [r7, #12]
 8011ad2:	60b9      	str	r1, [r7, #8]
 8011ad4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8011ad6:	f06f 030b 	mvn.w	r3, #11
}
 8011ada:	4618      	mov	r0, r3
 8011adc:	3714      	adds	r7, #20
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae4:	4770      	bx	lr
	...

08011ae8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8011ae8:	b480      	push	{r7}
 8011aea:	b085      	sub	sp, #20
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	4603      	mov	r3, r0
 8011af0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8011af2:	79fb      	ldrb	r3, [r7, #7]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d013      	beq.n	8011b20 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8011af8:	4b0d      	ldr	r3, [pc, #52]	; (8011b30 <netif_get_by_index+0x48>)
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	60fb      	str	r3, [r7, #12]
 8011afe:	e00c      	b.n	8011b1a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011b06:	3301      	adds	r3, #1
 8011b08:	b2db      	uxtb	r3, r3
 8011b0a:	79fa      	ldrb	r2, [r7, #7]
 8011b0c:	429a      	cmp	r2, r3
 8011b0e:	d101      	bne.n	8011b14 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	e006      	b.n	8011b22 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	60fb      	str	r3, [r7, #12]
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d1ef      	bne.n	8011b00 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8011b20:	2300      	movs	r3, #0
}
 8011b22:	4618      	mov	r0, r3
 8011b24:	3714      	adds	r7, #20
 8011b26:	46bd      	mov	sp, r7
 8011b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2c:	4770      	bx	lr
 8011b2e:	bf00      	nop
 8011b30:	20011080 	.word	0x20011080

08011b34 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b082      	sub	sp, #8
 8011b38:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8011b3a:	f009 fec3 	bl	801b8c4 <sys_arch_protect>
 8011b3e:	6038      	str	r0, [r7, #0]
 8011b40:	4b0d      	ldr	r3, [pc, #52]	; (8011b78 <pbuf_free_ooseq+0x44>)
 8011b42:	2200      	movs	r2, #0
 8011b44:	701a      	strb	r2, [r3, #0]
 8011b46:	6838      	ldr	r0, [r7, #0]
 8011b48:	f009 feca 	bl	801b8e0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011b4c:	4b0b      	ldr	r3, [pc, #44]	; (8011b7c <pbuf_free_ooseq+0x48>)
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	607b      	str	r3, [r7, #4]
 8011b52:	e00a      	b.n	8011b6a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d003      	beq.n	8011b64 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8011b5c:	6878      	ldr	r0, [r7, #4]
 8011b5e:	f002 fbab 	bl	80142b8 <tcp_free_ooseq>
      return;
 8011b62:	e005      	b.n	8011b70 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	68db      	ldr	r3, [r3, #12]
 8011b68:	607b      	str	r3, [r7, #4]
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d1f1      	bne.n	8011b54 <pbuf_free_ooseq+0x20>
    }
  }
}
 8011b70:	3708      	adds	r7, #8
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd80      	pop	{r7, pc}
 8011b76:	bf00      	nop
 8011b78:	20011089 	.word	0x20011089
 8011b7c:	20011098 	.word	0x20011098

08011b80 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b082      	sub	sp, #8
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8011b88:	f7ff ffd4 	bl	8011b34 <pbuf_free_ooseq>
}
 8011b8c:	bf00      	nop
 8011b8e:	3708      	adds	r7, #8
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bd80      	pop	{r7, pc}

08011b94 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b082      	sub	sp, #8
 8011b98:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8011b9a:	f009 fe93 	bl	801b8c4 <sys_arch_protect>
 8011b9e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8011ba0:	4b0f      	ldr	r3, [pc, #60]	; (8011be0 <pbuf_pool_is_empty+0x4c>)
 8011ba2:	781b      	ldrb	r3, [r3, #0]
 8011ba4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8011ba6:	4b0e      	ldr	r3, [pc, #56]	; (8011be0 <pbuf_pool_is_empty+0x4c>)
 8011ba8:	2201      	movs	r2, #1
 8011baa:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8011bac:	6878      	ldr	r0, [r7, #4]
 8011bae:	f009 fe97 	bl	801b8e0 <sys_arch_unprotect>

  if (!queued) {
 8011bb2:	78fb      	ldrb	r3, [r7, #3]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d10f      	bne.n	8011bd8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8011bb8:	2100      	movs	r1, #0
 8011bba:	480a      	ldr	r0, [pc, #40]	; (8011be4 <pbuf_pool_is_empty+0x50>)
 8011bbc:	f7fe fe90 	bl	80108e0 <tcpip_try_callback>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d008      	beq.n	8011bd8 <pbuf_pool_is_empty+0x44>
 8011bc6:	f009 fe7d 	bl	801b8c4 <sys_arch_protect>
 8011bca:	6078      	str	r0, [r7, #4]
 8011bcc:	4b04      	ldr	r3, [pc, #16]	; (8011be0 <pbuf_pool_is_empty+0x4c>)
 8011bce:	2200      	movs	r2, #0
 8011bd0:	701a      	strb	r2, [r3, #0]
 8011bd2:	6878      	ldr	r0, [r7, #4]
 8011bd4:	f009 fe84 	bl	801b8e0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8011bd8:	bf00      	nop
 8011bda:	3708      	adds	r7, #8
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	bd80      	pop	{r7, pc}
 8011be0:	20011089 	.word	0x20011089
 8011be4:	08011b81 	.word	0x08011b81

08011be8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8011be8:	b480      	push	{r7}
 8011bea:	b085      	sub	sp, #20
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	60f8      	str	r0, [r7, #12]
 8011bf0:	60b9      	str	r1, [r7, #8]
 8011bf2:	4611      	mov	r1, r2
 8011bf4:	461a      	mov	r2, r3
 8011bf6:	460b      	mov	r3, r1
 8011bf8:	80fb      	strh	r3, [r7, #6]
 8011bfa:	4613      	mov	r3, r2
 8011bfc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	2200      	movs	r2, #0
 8011c02:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	68ba      	ldr	r2, [r7, #8]
 8011c08:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	88fa      	ldrh	r2, [r7, #6]
 8011c0e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	88ba      	ldrh	r2, [r7, #4]
 8011c14:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8011c16:	8b3b      	ldrh	r3, [r7, #24]
 8011c18:	b2da      	uxtb	r2, r3
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	7f3a      	ldrb	r2, [r7, #28]
 8011c22:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	2201      	movs	r2, #1
 8011c28:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	73da      	strb	r2, [r3, #15]
}
 8011c30:	bf00      	nop
 8011c32:	3714      	adds	r7, #20
 8011c34:	46bd      	mov	sp, r7
 8011c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3a:	4770      	bx	lr

08011c3c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b08c      	sub	sp, #48	; 0x30
 8011c40:	af02      	add	r7, sp, #8
 8011c42:	4603      	mov	r3, r0
 8011c44:	71fb      	strb	r3, [r7, #7]
 8011c46:	460b      	mov	r3, r1
 8011c48:	80bb      	strh	r3, [r7, #4]
 8011c4a:	4613      	mov	r3, r2
 8011c4c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8011c4e:	79fb      	ldrb	r3, [r7, #7]
 8011c50:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8011c52:	887b      	ldrh	r3, [r7, #2]
 8011c54:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8011c58:	d07f      	beq.n	8011d5a <pbuf_alloc+0x11e>
 8011c5a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8011c5e:	f300 80c8 	bgt.w	8011df2 <pbuf_alloc+0x1b6>
 8011c62:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8011c66:	d010      	beq.n	8011c8a <pbuf_alloc+0x4e>
 8011c68:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8011c6c:	f300 80c1 	bgt.w	8011df2 <pbuf_alloc+0x1b6>
 8011c70:	2b01      	cmp	r3, #1
 8011c72:	d002      	beq.n	8011c7a <pbuf_alloc+0x3e>
 8011c74:	2b41      	cmp	r3, #65	; 0x41
 8011c76:	f040 80bc 	bne.w	8011df2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8011c7a:	887a      	ldrh	r2, [r7, #2]
 8011c7c:	88bb      	ldrh	r3, [r7, #4]
 8011c7e:	4619      	mov	r1, r3
 8011c80:	2000      	movs	r0, #0
 8011c82:	f000 f8d1 	bl	8011e28 <pbuf_alloc_reference>
 8011c86:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8011c88:	e0bd      	b.n	8011e06 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8011c8e:	2300      	movs	r3, #0
 8011c90:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8011c92:	88bb      	ldrh	r3, [r7, #4]
 8011c94:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8011c96:	200c      	movs	r0, #12
 8011c98:	f7ff fb9a 	bl	80113d0 <memp_malloc>
 8011c9c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8011c9e:	693b      	ldr	r3, [r7, #16]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d109      	bne.n	8011cb8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8011ca4:	f7ff ff76 	bl	8011b94 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8011ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d002      	beq.n	8011cb4 <pbuf_alloc+0x78>
            pbuf_free(p);
 8011cae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011cb0:	f000 fada 	bl	8012268 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	e0a7      	b.n	8011e08 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8011cb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011cba:	3303      	adds	r3, #3
 8011cbc:	b29b      	uxth	r3, r3
 8011cbe:	f023 0303 	bic.w	r3, r3, #3
 8011cc2:	b29b      	uxth	r3, r3
 8011cc4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8011cc8:	b29b      	uxth	r3, r3
 8011cca:	8b7a      	ldrh	r2, [r7, #26]
 8011ccc:	4293      	cmp	r3, r2
 8011cce:	bf28      	it	cs
 8011cd0:	4613      	movcs	r3, r2
 8011cd2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8011cd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011cd6:	3310      	adds	r3, #16
 8011cd8:	693a      	ldr	r2, [r7, #16]
 8011cda:	4413      	add	r3, r2
 8011cdc:	3303      	adds	r3, #3
 8011cde:	f023 0303 	bic.w	r3, r3, #3
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	89f9      	ldrh	r1, [r7, #14]
 8011ce6:	8b7a      	ldrh	r2, [r7, #26]
 8011ce8:	2300      	movs	r3, #0
 8011cea:	9301      	str	r3, [sp, #4]
 8011cec:	887b      	ldrh	r3, [r7, #2]
 8011cee:	9300      	str	r3, [sp, #0]
 8011cf0:	460b      	mov	r3, r1
 8011cf2:	4601      	mov	r1, r0
 8011cf4:	6938      	ldr	r0, [r7, #16]
 8011cf6:	f7ff ff77 	bl	8011be8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8011cfa:	693b      	ldr	r3, [r7, #16]
 8011cfc:	685b      	ldr	r3, [r3, #4]
 8011cfe:	f003 0303 	and.w	r3, r3, #3
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d006      	beq.n	8011d14 <pbuf_alloc+0xd8>
 8011d06:	4b42      	ldr	r3, [pc, #264]	; (8011e10 <pbuf_alloc+0x1d4>)
 8011d08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011d0c:	4941      	ldr	r1, [pc, #260]	; (8011e14 <pbuf_alloc+0x1d8>)
 8011d0e:	4842      	ldr	r0, [pc, #264]	; (8011e18 <pbuf_alloc+0x1dc>)
 8011d10:	f009 fe40 	bl	801b994 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8011d14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d16:	3303      	adds	r3, #3
 8011d18:	f023 0303 	bic.w	r3, r3, #3
 8011d1c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8011d20:	d106      	bne.n	8011d30 <pbuf_alloc+0xf4>
 8011d22:	4b3b      	ldr	r3, [pc, #236]	; (8011e10 <pbuf_alloc+0x1d4>)
 8011d24:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011d28:	493c      	ldr	r1, [pc, #240]	; (8011e1c <pbuf_alloc+0x1e0>)
 8011d2a:	483b      	ldr	r0, [pc, #236]	; (8011e18 <pbuf_alloc+0x1dc>)
 8011d2c:	f009 fe32 	bl	801b994 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8011d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d102      	bne.n	8011d3c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8011d36:	693b      	ldr	r3, [r7, #16]
 8011d38:	627b      	str	r3, [r7, #36]	; 0x24
 8011d3a:	e002      	b.n	8011d42 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8011d3c:	69fb      	ldr	r3, [r7, #28]
 8011d3e:	693a      	ldr	r2, [r7, #16]
 8011d40:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8011d42:	693b      	ldr	r3, [r7, #16]
 8011d44:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8011d46:	8b7a      	ldrh	r2, [r7, #26]
 8011d48:	89fb      	ldrh	r3, [r7, #14]
 8011d4a:	1ad3      	subs	r3, r2, r3
 8011d4c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8011d4e:	2300      	movs	r3, #0
 8011d50:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8011d52:	8b7b      	ldrh	r3, [r7, #26]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d19e      	bne.n	8011c96 <pbuf_alloc+0x5a>
      break;
 8011d58:	e055      	b.n	8011e06 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8011d5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d5c:	3303      	adds	r3, #3
 8011d5e:	b29b      	uxth	r3, r3
 8011d60:	f023 0303 	bic.w	r3, r3, #3
 8011d64:	b29a      	uxth	r2, r3
 8011d66:	88bb      	ldrh	r3, [r7, #4]
 8011d68:	3303      	adds	r3, #3
 8011d6a:	b29b      	uxth	r3, r3
 8011d6c:	f023 0303 	bic.w	r3, r3, #3
 8011d70:	b29b      	uxth	r3, r3
 8011d72:	4413      	add	r3, r2
 8011d74:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8011d76:	8b3b      	ldrh	r3, [r7, #24]
 8011d78:	3310      	adds	r3, #16
 8011d7a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011d7c:	8b3a      	ldrh	r2, [r7, #24]
 8011d7e:	88bb      	ldrh	r3, [r7, #4]
 8011d80:	3303      	adds	r3, #3
 8011d82:	f023 0303 	bic.w	r3, r3, #3
 8011d86:	429a      	cmp	r2, r3
 8011d88:	d306      	bcc.n	8011d98 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8011d8a:	8afa      	ldrh	r2, [r7, #22]
 8011d8c:	88bb      	ldrh	r3, [r7, #4]
 8011d8e:	3303      	adds	r3, #3
 8011d90:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011d94:	429a      	cmp	r2, r3
 8011d96:	d201      	bcs.n	8011d9c <pbuf_alloc+0x160>
        return NULL;
 8011d98:	2300      	movs	r3, #0
 8011d9a:	e035      	b.n	8011e08 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8011d9c:	8afb      	ldrh	r3, [r7, #22]
 8011d9e:	4618      	mov	r0, r3
 8011da0:	f7ff f972 	bl	8011088 <mem_malloc>
 8011da4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8011da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d101      	bne.n	8011db0 <pbuf_alloc+0x174>
        return NULL;
 8011dac:	2300      	movs	r3, #0
 8011dae:	e02b      	b.n	8011e08 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8011db0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011db2:	3310      	adds	r3, #16
 8011db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011db6:	4413      	add	r3, r2
 8011db8:	3303      	adds	r3, #3
 8011dba:	f023 0303 	bic.w	r3, r3, #3
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	88b9      	ldrh	r1, [r7, #4]
 8011dc2:	88ba      	ldrh	r2, [r7, #4]
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	9301      	str	r3, [sp, #4]
 8011dc8:	887b      	ldrh	r3, [r7, #2]
 8011dca:	9300      	str	r3, [sp, #0]
 8011dcc:	460b      	mov	r3, r1
 8011dce:	4601      	mov	r1, r0
 8011dd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011dd2:	f7ff ff09 	bl	8011be8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8011dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd8:	685b      	ldr	r3, [r3, #4]
 8011dda:	f003 0303 	and.w	r3, r3, #3
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d010      	beq.n	8011e04 <pbuf_alloc+0x1c8>
 8011de2:	4b0b      	ldr	r3, [pc, #44]	; (8011e10 <pbuf_alloc+0x1d4>)
 8011de4:	f44f 7291 	mov.w	r2, #290	; 0x122
 8011de8:	490d      	ldr	r1, [pc, #52]	; (8011e20 <pbuf_alloc+0x1e4>)
 8011dea:	480b      	ldr	r0, [pc, #44]	; (8011e18 <pbuf_alloc+0x1dc>)
 8011dec:	f009 fdd2 	bl	801b994 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8011df0:	e008      	b.n	8011e04 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8011df2:	4b07      	ldr	r3, [pc, #28]	; (8011e10 <pbuf_alloc+0x1d4>)
 8011df4:	f240 1227 	movw	r2, #295	; 0x127
 8011df8:	490a      	ldr	r1, [pc, #40]	; (8011e24 <pbuf_alloc+0x1e8>)
 8011dfa:	4807      	ldr	r0, [pc, #28]	; (8011e18 <pbuf_alloc+0x1dc>)
 8011dfc:	f009 fdca 	bl	801b994 <iprintf>
      return NULL;
 8011e00:	2300      	movs	r3, #0
 8011e02:	e001      	b.n	8011e08 <pbuf_alloc+0x1cc>
      break;
 8011e04:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8011e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011e08:	4618      	mov	r0, r3
 8011e0a:	3728      	adds	r7, #40	; 0x28
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bd80      	pop	{r7, pc}
 8011e10:	0801e1b0 	.word	0x0801e1b0
 8011e14:	0801e1e0 	.word	0x0801e1e0
 8011e18:	0801e210 	.word	0x0801e210
 8011e1c:	0801e238 	.word	0x0801e238
 8011e20:	0801e26c 	.word	0x0801e26c
 8011e24:	0801e298 	.word	0x0801e298

08011e28 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b086      	sub	sp, #24
 8011e2c:	af02      	add	r7, sp, #8
 8011e2e:	6078      	str	r0, [r7, #4]
 8011e30:	460b      	mov	r3, r1
 8011e32:	807b      	strh	r3, [r7, #2]
 8011e34:	4613      	mov	r3, r2
 8011e36:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8011e38:	883b      	ldrh	r3, [r7, #0]
 8011e3a:	2b41      	cmp	r3, #65	; 0x41
 8011e3c:	d009      	beq.n	8011e52 <pbuf_alloc_reference+0x2a>
 8011e3e:	883b      	ldrh	r3, [r7, #0]
 8011e40:	2b01      	cmp	r3, #1
 8011e42:	d006      	beq.n	8011e52 <pbuf_alloc_reference+0x2a>
 8011e44:	4b0f      	ldr	r3, [pc, #60]	; (8011e84 <pbuf_alloc_reference+0x5c>)
 8011e46:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8011e4a:	490f      	ldr	r1, [pc, #60]	; (8011e88 <pbuf_alloc_reference+0x60>)
 8011e4c:	480f      	ldr	r0, [pc, #60]	; (8011e8c <pbuf_alloc_reference+0x64>)
 8011e4e:	f009 fda1 	bl	801b994 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8011e52:	200b      	movs	r0, #11
 8011e54:	f7ff fabc 	bl	80113d0 <memp_malloc>
 8011e58:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d101      	bne.n	8011e64 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8011e60:	2300      	movs	r3, #0
 8011e62:	e00b      	b.n	8011e7c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8011e64:	8879      	ldrh	r1, [r7, #2]
 8011e66:	887a      	ldrh	r2, [r7, #2]
 8011e68:	2300      	movs	r3, #0
 8011e6a:	9301      	str	r3, [sp, #4]
 8011e6c:	883b      	ldrh	r3, [r7, #0]
 8011e6e:	9300      	str	r3, [sp, #0]
 8011e70:	460b      	mov	r3, r1
 8011e72:	6879      	ldr	r1, [r7, #4]
 8011e74:	68f8      	ldr	r0, [r7, #12]
 8011e76:	f7ff feb7 	bl	8011be8 <pbuf_init_alloced_pbuf>
  return p;
 8011e7a:	68fb      	ldr	r3, [r7, #12]
}
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	3710      	adds	r7, #16
 8011e80:	46bd      	mov	sp, r7
 8011e82:	bd80      	pop	{r7, pc}
 8011e84:	0801e1b0 	.word	0x0801e1b0
 8011e88:	0801e2b4 	.word	0x0801e2b4
 8011e8c:	0801e210 	.word	0x0801e210

08011e90 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b088      	sub	sp, #32
 8011e94:	af02      	add	r7, sp, #8
 8011e96:	607b      	str	r3, [r7, #4]
 8011e98:	4603      	mov	r3, r0
 8011e9a:	73fb      	strb	r3, [r7, #15]
 8011e9c:	460b      	mov	r3, r1
 8011e9e:	81bb      	strh	r3, [r7, #12]
 8011ea0:	4613      	mov	r3, r2
 8011ea2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8011ea4:	7bfb      	ldrb	r3, [r7, #15]
 8011ea6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8011ea8:	8a7b      	ldrh	r3, [r7, #18]
 8011eaa:	3303      	adds	r3, #3
 8011eac:	f023 0203 	bic.w	r2, r3, #3
 8011eb0:	89bb      	ldrh	r3, [r7, #12]
 8011eb2:	441a      	add	r2, r3
 8011eb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011eb6:	429a      	cmp	r2, r3
 8011eb8:	d901      	bls.n	8011ebe <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8011eba:	2300      	movs	r3, #0
 8011ebc:	e018      	b.n	8011ef0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8011ebe:	6a3b      	ldr	r3, [r7, #32]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d007      	beq.n	8011ed4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8011ec4:	8a7b      	ldrh	r3, [r7, #18]
 8011ec6:	3303      	adds	r3, #3
 8011ec8:	f023 0303 	bic.w	r3, r3, #3
 8011ecc:	6a3a      	ldr	r2, [r7, #32]
 8011ece:	4413      	add	r3, r2
 8011ed0:	617b      	str	r3, [r7, #20]
 8011ed2:	e001      	b.n	8011ed8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8011ed8:	6878      	ldr	r0, [r7, #4]
 8011eda:	89b9      	ldrh	r1, [r7, #12]
 8011edc:	89ba      	ldrh	r2, [r7, #12]
 8011ede:	2302      	movs	r3, #2
 8011ee0:	9301      	str	r3, [sp, #4]
 8011ee2:	897b      	ldrh	r3, [r7, #10]
 8011ee4:	9300      	str	r3, [sp, #0]
 8011ee6:	460b      	mov	r3, r1
 8011ee8:	6979      	ldr	r1, [r7, #20]
 8011eea:	f7ff fe7d 	bl	8011be8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8011eee:	687b      	ldr	r3, [r7, #4]
}
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	3718      	adds	r7, #24
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd80      	pop	{r7, pc}

08011ef8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b084      	sub	sp, #16
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
 8011f00:	460b      	mov	r3, r1
 8011f02:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d106      	bne.n	8011f18 <pbuf_realloc+0x20>
 8011f0a:	4b3a      	ldr	r3, [pc, #232]	; (8011ff4 <pbuf_realloc+0xfc>)
 8011f0c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8011f10:	4939      	ldr	r1, [pc, #228]	; (8011ff8 <pbuf_realloc+0x100>)
 8011f12:	483a      	ldr	r0, [pc, #232]	; (8011ffc <pbuf_realloc+0x104>)
 8011f14:	f009 fd3e 	bl	801b994 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	891b      	ldrh	r3, [r3, #8]
 8011f1c:	887a      	ldrh	r2, [r7, #2]
 8011f1e:	429a      	cmp	r2, r3
 8011f20:	d263      	bcs.n	8011fea <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	891a      	ldrh	r2, [r3, #8]
 8011f26:	887b      	ldrh	r3, [r7, #2]
 8011f28:	1ad3      	subs	r3, r2, r3
 8011f2a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8011f2c:	887b      	ldrh	r3, [r7, #2]
 8011f2e:	817b      	strh	r3, [r7, #10]
  q = p;
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8011f34:	e018      	b.n	8011f68 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	895b      	ldrh	r3, [r3, #10]
 8011f3a:	897a      	ldrh	r2, [r7, #10]
 8011f3c:	1ad3      	subs	r3, r2, r3
 8011f3e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	891a      	ldrh	r2, [r3, #8]
 8011f44:	893b      	ldrh	r3, [r7, #8]
 8011f46:	1ad3      	subs	r3, r2, r3
 8011f48:	b29a      	uxth	r2, r3
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d106      	bne.n	8011f68 <pbuf_realloc+0x70>
 8011f5a:	4b26      	ldr	r3, [pc, #152]	; (8011ff4 <pbuf_realloc+0xfc>)
 8011f5c:	f240 12af 	movw	r2, #431	; 0x1af
 8011f60:	4927      	ldr	r1, [pc, #156]	; (8012000 <pbuf_realloc+0x108>)
 8011f62:	4826      	ldr	r0, [pc, #152]	; (8011ffc <pbuf_realloc+0x104>)
 8011f64:	f009 fd16 	bl	801b994 <iprintf>
  while (rem_len > q->len) {
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	895b      	ldrh	r3, [r3, #10]
 8011f6c:	897a      	ldrh	r2, [r7, #10]
 8011f6e:	429a      	cmp	r2, r3
 8011f70:	d8e1      	bhi.n	8011f36 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	7b1b      	ldrb	r3, [r3, #12]
 8011f76:	f003 030f 	and.w	r3, r3, #15
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d121      	bne.n	8011fc2 <pbuf_realloc+0xca>
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	895b      	ldrh	r3, [r3, #10]
 8011f82:	897a      	ldrh	r2, [r7, #10]
 8011f84:	429a      	cmp	r2, r3
 8011f86:	d01c      	beq.n	8011fc2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	7b5b      	ldrb	r3, [r3, #13]
 8011f8c:	f003 0302 	and.w	r3, r3, #2
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d116      	bne.n	8011fc2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	685a      	ldr	r2, [r3, #4]
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	1ad3      	subs	r3, r2, r3
 8011f9c:	b29a      	uxth	r2, r3
 8011f9e:	897b      	ldrh	r3, [r7, #10]
 8011fa0:	4413      	add	r3, r2
 8011fa2:	b29b      	uxth	r3, r3
 8011fa4:	4619      	mov	r1, r3
 8011fa6:	68f8      	ldr	r0, [r7, #12]
 8011fa8:	f7fe ff64 	bl	8010e74 <mem_trim>
 8011fac:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d106      	bne.n	8011fc2 <pbuf_realloc+0xca>
 8011fb4:	4b0f      	ldr	r3, [pc, #60]	; (8011ff4 <pbuf_realloc+0xfc>)
 8011fb6:	f240 12bd 	movw	r2, #445	; 0x1bd
 8011fba:	4912      	ldr	r1, [pc, #72]	; (8012004 <pbuf_realloc+0x10c>)
 8011fbc:	480f      	ldr	r0, [pc, #60]	; (8011ffc <pbuf_realloc+0x104>)
 8011fbe:	f009 fce9 	bl	801b994 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	897a      	ldrh	r2, [r7, #10]
 8011fc6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	895a      	ldrh	r2, [r3, #10]
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d004      	beq.n	8011fe2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f000 f943 	bl	8012268 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	601a      	str	r2, [r3, #0]
 8011fe8:	e000      	b.n	8011fec <pbuf_realloc+0xf4>
    return;
 8011fea:	bf00      	nop

}
 8011fec:	3710      	adds	r7, #16
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bd80      	pop	{r7, pc}
 8011ff2:	bf00      	nop
 8011ff4:	0801e1b0 	.word	0x0801e1b0
 8011ff8:	0801e2c8 	.word	0x0801e2c8
 8011ffc:	0801e210 	.word	0x0801e210
 8012000:	0801e2e0 	.word	0x0801e2e0
 8012004:	0801e2f8 	.word	0x0801e2f8

08012008 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b086      	sub	sp, #24
 801200c:	af00      	add	r7, sp, #0
 801200e:	60f8      	str	r0, [r7, #12]
 8012010:	60b9      	str	r1, [r7, #8]
 8012012:	4613      	mov	r3, r2
 8012014:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d106      	bne.n	801202a <pbuf_add_header_impl+0x22>
 801201c:	4b2b      	ldr	r3, [pc, #172]	; (80120cc <pbuf_add_header_impl+0xc4>)
 801201e:	f240 12df 	movw	r2, #479	; 0x1df
 8012022:	492b      	ldr	r1, [pc, #172]	; (80120d0 <pbuf_add_header_impl+0xc8>)
 8012024:	482b      	ldr	r0, [pc, #172]	; (80120d4 <pbuf_add_header_impl+0xcc>)
 8012026:	f009 fcb5 	bl	801b994 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d003      	beq.n	8012038 <pbuf_add_header_impl+0x30>
 8012030:	68bb      	ldr	r3, [r7, #8]
 8012032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012036:	d301      	bcc.n	801203c <pbuf_add_header_impl+0x34>
    return 1;
 8012038:	2301      	movs	r3, #1
 801203a:	e043      	b.n	80120c4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d101      	bne.n	8012046 <pbuf_add_header_impl+0x3e>
    return 0;
 8012042:	2300      	movs	r3, #0
 8012044:	e03e      	b.n	80120c4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	891a      	ldrh	r2, [r3, #8]
 801204e:	8a7b      	ldrh	r3, [r7, #18]
 8012050:	4413      	add	r3, r2
 8012052:	b29b      	uxth	r3, r3
 8012054:	8a7a      	ldrh	r2, [r7, #18]
 8012056:	429a      	cmp	r2, r3
 8012058:	d901      	bls.n	801205e <pbuf_add_header_impl+0x56>
    return 1;
 801205a:	2301      	movs	r3, #1
 801205c:	e032      	b.n	80120c4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	7b1b      	ldrb	r3, [r3, #12]
 8012062:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8012064:	8a3b      	ldrh	r3, [r7, #16]
 8012066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801206a:	2b00      	cmp	r3, #0
 801206c:	d00c      	beq.n	8012088 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	685a      	ldr	r2, [r3, #4]
 8012072:	68bb      	ldr	r3, [r7, #8]
 8012074:	425b      	negs	r3, r3
 8012076:	4413      	add	r3, r2
 8012078:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	3310      	adds	r3, #16
 801207e:	697a      	ldr	r2, [r7, #20]
 8012080:	429a      	cmp	r2, r3
 8012082:	d20d      	bcs.n	80120a0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8012084:	2301      	movs	r3, #1
 8012086:	e01d      	b.n	80120c4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8012088:	79fb      	ldrb	r3, [r7, #7]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d006      	beq.n	801209c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	685a      	ldr	r2, [r3, #4]
 8012092:	68bb      	ldr	r3, [r7, #8]
 8012094:	425b      	negs	r3, r3
 8012096:	4413      	add	r3, r2
 8012098:	617b      	str	r3, [r7, #20]
 801209a:	e001      	b.n	80120a0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801209c:	2301      	movs	r3, #1
 801209e:	e011      	b.n	80120c4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	697a      	ldr	r2, [r7, #20]
 80120a4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	895a      	ldrh	r2, [r3, #10]
 80120aa:	8a7b      	ldrh	r3, [r7, #18]
 80120ac:	4413      	add	r3, r2
 80120ae:	b29a      	uxth	r2, r3
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	891a      	ldrh	r2, [r3, #8]
 80120b8:	8a7b      	ldrh	r3, [r7, #18]
 80120ba:	4413      	add	r3, r2
 80120bc:	b29a      	uxth	r2, r3
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	811a      	strh	r2, [r3, #8]


  return 0;
 80120c2:	2300      	movs	r3, #0
}
 80120c4:	4618      	mov	r0, r3
 80120c6:	3718      	adds	r7, #24
 80120c8:	46bd      	mov	sp, r7
 80120ca:	bd80      	pop	{r7, pc}
 80120cc:	0801e1b0 	.word	0x0801e1b0
 80120d0:	0801e314 	.word	0x0801e314
 80120d4:	0801e210 	.word	0x0801e210

080120d8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b082      	sub	sp, #8
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
 80120e0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80120e2:	2200      	movs	r2, #0
 80120e4:	6839      	ldr	r1, [r7, #0]
 80120e6:	6878      	ldr	r0, [r7, #4]
 80120e8:	f7ff ff8e 	bl	8012008 <pbuf_add_header_impl>
 80120ec:	4603      	mov	r3, r0
}
 80120ee:	4618      	mov	r0, r3
 80120f0:	3708      	adds	r7, #8
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd80      	pop	{r7, pc}
	...

080120f8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b084      	sub	sp, #16
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
 8012100:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d106      	bne.n	8012116 <pbuf_remove_header+0x1e>
 8012108:	4b20      	ldr	r3, [pc, #128]	; (801218c <pbuf_remove_header+0x94>)
 801210a:	f240 224b 	movw	r2, #587	; 0x24b
 801210e:	4920      	ldr	r1, [pc, #128]	; (8012190 <pbuf_remove_header+0x98>)
 8012110:	4820      	ldr	r0, [pc, #128]	; (8012194 <pbuf_remove_header+0x9c>)
 8012112:	f009 fc3f 	bl	801b994 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d003      	beq.n	8012124 <pbuf_remove_header+0x2c>
 801211c:	683b      	ldr	r3, [r7, #0]
 801211e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012122:	d301      	bcc.n	8012128 <pbuf_remove_header+0x30>
    return 1;
 8012124:	2301      	movs	r3, #1
 8012126:	e02c      	b.n	8012182 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8012128:	683b      	ldr	r3, [r7, #0]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d101      	bne.n	8012132 <pbuf_remove_header+0x3a>
    return 0;
 801212e:	2300      	movs	r3, #0
 8012130:	e027      	b.n	8012182 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8012132:	683b      	ldr	r3, [r7, #0]
 8012134:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	895b      	ldrh	r3, [r3, #10]
 801213a:	89fa      	ldrh	r2, [r7, #14]
 801213c:	429a      	cmp	r2, r3
 801213e:	d908      	bls.n	8012152 <pbuf_remove_header+0x5a>
 8012140:	4b12      	ldr	r3, [pc, #72]	; (801218c <pbuf_remove_header+0x94>)
 8012142:	f240 2255 	movw	r2, #597	; 0x255
 8012146:	4914      	ldr	r1, [pc, #80]	; (8012198 <pbuf_remove_header+0xa0>)
 8012148:	4812      	ldr	r0, [pc, #72]	; (8012194 <pbuf_remove_header+0x9c>)
 801214a:	f009 fc23 	bl	801b994 <iprintf>
 801214e:	2301      	movs	r3, #1
 8012150:	e017      	b.n	8012182 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	685b      	ldr	r3, [r3, #4]
 8012156:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	685a      	ldr	r2, [r3, #4]
 801215c:	683b      	ldr	r3, [r7, #0]
 801215e:	441a      	add	r2, r3
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	895a      	ldrh	r2, [r3, #10]
 8012168:	89fb      	ldrh	r3, [r7, #14]
 801216a:	1ad3      	subs	r3, r2, r3
 801216c:	b29a      	uxth	r2, r3
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	891a      	ldrh	r2, [r3, #8]
 8012176:	89fb      	ldrh	r3, [r7, #14]
 8012178:	1ad3      	subs	r3, r2, r3
 801217a:	b29a      	uxth	r2, r3
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8012180:	2300      	movs	r3, #0
}
 8012182:	4618      	mov	r0, r3
 8012184:	3710      	adds	r7, #16
 8012186:	46bd      	mov	sp, r7
 8012188:	bd80      	pop	{r7, pc}
 801218a:	bf00      	nop
 801218c:	0801e1b0 	.word	0x0801e1b0
 8012190:	0801e314 	.word	0x0801e314
 8012194:	0801e210 	.word	0x0801e210
 8012198:	0801e320 	.word	0x0801e320

0801219c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b082      	sub	sp, #8
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
 80121a4:	460b      	mov	r3, r1
 80121a6:	807b      	strh	r3, [r7, #2]
 80121a8:	4613      	mov	r3, r2
 80121aa:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80121ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	da08      	bge.n	80121c6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80121b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80121b8:	425b      	negs	r3, r3
 80121ba:	4619      	mov	r1, r3
 80121bc:	6878      	ldr	r0, [r7, #4]
 80121be:	f7ff ff9b 	bl	80120f8 <pbuf_remove_header>
 80121c2:	4603      	mov	r3, r0
 80121c4:	e007      	b.n	80121d6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80121c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80121ca:	787a      	ldrb	r2, [r7, #1]
 80121cc:	4619      	mov	r1, r3
 80121ce:	6878      	ldr	r0, [r7, #4]
 80121d0:	f7ff ff1a 	bl	8012008 <pbuf_add_header_impl>
 80121d4:	4603      	mov	r3, r0
  }
}
 80121d6:	4618      	mov	r0, r3
 80121d8:	3708      	adds	r7, #8
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}

080121de <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80121de:	b580      	push	{r7, lr}
 80121e0:	b082      	sub	sp, #8
 80121e2:	af00      	add	r7, sp, #0
 80121e4:	6078      	str	r0, [r7, #4]
 80121e6:	460b      	mov	r3, r1
 80121e8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80121ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80121ee:	2201      	movs	r2, #1
 80121f0:	4619      	mov	r1, r3
 80121f2:	6878      	ldr	r0, [r7, #4]
 80121f4:	f7ff ffd2 	bl	801219c <pbuf_header_impl>
 80121f8:	4603      	mov	r3, r0
}
 80121fa:	4618      	mov	r0, r3
 80121fc:	3708      	adds	r7, #8
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd80      	pop	{r7, pc}

08012202 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 8012202:	b580      	push	{r7, lr}
 8012204:	b086      	sub	sp, #24
 8012206:	af00      	add	r7, sp, #0
 8012208:	6078      	str	r0, [r7, #4]
 801220a:	460b      	mov	r3, r1
 801220c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 8012212:	887b      	ldrh	r3, [r7, #2]
 8012214:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8012216:	e01c      	b.n	8012252 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 8012218:	697b      	ldr	r3, [r7, #20]
 801221a:	895b      	ldrh	r3, [r3, #10]
 801221c:	8a7a      	ldrh	r2, [r7, #18]
 801221e:	429a      	cmp	r2, r3
 8012220:	d310      	bcc.n	8012244 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 8012222:	697b      	ldr	r3, [r7, #20]
 8012224:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 8012226:	697b      	ldr	r3, [r7, #20]
 8012228:	895b      	ldrh	r3, [r3, #10]
 801222a:	8a7a      	ldrh	r2, [r7, #18]
 801222c:	1ad3      	subs	r3, r2, r3
 801222e:	827b      	strh	r3, [r7, #18]
      p = p->next;
 8012230:	697b      	ldr	r3, [r7, #20]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	617b      	str	r3, [r7, #20]
      f->next = 0;
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	2200      	movs	r2, #0
 801223a:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 801223c:	68f8      	ldr	r0, [r7, #12]
 801223e:	f000 f813 	bl	8012268 <pbuf_free>
 8012242:	e006      	b.n	8012252 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 8012244:	8a7b      	ldrh	r3, [r7, #18]
 8012246:	4619      	mov	r1, r3
 8012248:	6978      	ldr	r0, [r7, #20]
 801224a:	f7ff ff55 	bl	80120f8 <pbuf_remove_header>
      free_left = 0;
 801224e:	2300      	movs	r3, #0
 8012250:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8012252:	8a7b      	ldrh	r3, [r7, #18]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d002      	beq.n	801225e <pbuf_free_header+0x5c>
 8012258:	697b      	ldr	r3, [r7, #20]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d1dc      	bne.n	8012218 <pbuf_free_header+0x16>
    }
  }
  return p;
 801225e:	697b      	ldr	r3, [r7, #20]
}
 8012260:	4618      	mov	r0, r3
 8012262:	3718      	adds	r7, #24
 8012264:	46bd      	mov	sp, r7
 8012266:	bd80      	pop	{r7, pc}

08012268 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b088      	sub	sp, #32
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d10b      	bne.n	801228e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d106      	bne.n	801228a <pbuf_free+0x22>
 801227c:	4b3b      	ldr	r3, [pc, #236]	; (801236c <pbuf_free+0x104>)
 801227e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8012282:	493b      	ldr	r1, [pc, #236]	; (8012370 <pbuf_free+0x108>)
 8012284:	483b      	ldr	r0, [pc, #236]	; (8012374 <pbuf_free+0x10c>)
 8012286:	f009 fb85 	bl	801b994 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801228a:	2300      	movs	r3, #0
 801228c:	e069      	b.n	8012362 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801228e:	2300      	movs	r3, #0
 8012290:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8012292:	e062      	b.n	801235a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8012294:	f009 fb16 	bl	801b8c4 <sys_arch_protect>
 8012298:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	7b9b      	ldrb	r3, [r3, #14]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d106      	bne.n	80122b0 <pbuf_free+0x48>
 80122a2:	4b32      	ldr	r3, [pc, #200]	; (801236c <pbuf_free+0x104>)
 80122a4:	f240 22f1 	movw	r2, #753	; 0x2f1
 80122a8:	4933      	ldr	r1, [pc, #204]	; (8012378 <pbuf_free+0x110>)
 80122aa:	4832      	ldr	r0, [pc, #200]	; (8012374 <pbuf_free+0x10c>)
 80122ac:	f009 fb72 	bl	801b994 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	7b9b      	ldrb	r3, [r3, #14]
 80122b4:	3b01      	subs	r3, #1
 80122b6:	b2da      	uxtb	r2, r3
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	739a      	strb	r2, [r3, #14]
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	7b9b      	ldrb	r3, [r3, #14]
 80122c0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80122c2:	69b8      	ldr	r0, [r7, #24]
 80122c4:	f009 fb0c 	bl	801b8e0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80122c8:	7dfb      	ldrb	r3, [r7, #23]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d143      	bne.n	8012356 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	7b1b      	ldrb	r3, [r3, #12]
 80122d8:	f003 030f 	and.w	r3, r3, #15
 80122dc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	7b5b      	ldrb	r3, [r3, #13]
 80122e2:	f003 0302 	and.w	r3, r3, #2
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d011      	beq.n	801230e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80122ee:	68bb      	ldr	r3, [r7, #8]
 80122f0:	691b      	ldr	r3, [r3, #16]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d106      	bne.n	8012304 <pbuf_free+0x9c>
 80122f6:	4b1d      	ldr	r3, [pc, #116]	; (801236c <pbuf_free+0x104>)
 80122f8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80122fc:	491f      	ldr	r1, [pc, #124]	; (801237c <pbuf_free+0x114>)
 80122fe:	481d      	ldr	r0, [pc, #116]	; (8012374 <pbuf_free+0x10c>)
 8012300:	f009 fb48 	bl	801b994 <iprintf>
        pc->custom_free_function(p);
 8012304:	68bb      	ldr	r3, [r7, #8]
 8012306:	691b      	ldr	r3, [r3, #16]
 8012308:	6878      	ldr	r0, [r7, #4]
 801230a:	4798      	blx	r3
 801230c:	e01d      	b.n	801234a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801230e:	7bfb      	ldrb	r3, [r7, #15]
 8012310:	2b02      	cmp	r3, #2
 8012312:	d104      	bne.n	801231e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8012314:	6879      	ldr	r1, [r7, #4]
 8012316:	200c      	movs	r0, #12
 8012318:	f7ff f8d0 	bl	80114bc <memp_free>
 801231c:	e015      	b.n	801234a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801231e:	7bfb      	ldrb	r3, [r7, #15]
 8012320:	2b01      	cmp	r3, #1
 8012322:	d104      	bne.n	801232e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8012324:	6879      	ldr	r1, [r7, #4]
 8012326:	200b      	movs	r0, #11
 8012328:	f7ff f8c8 	bl	80114bc <memp_free>
 801232c:	e00d      	b.n	801234a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801232e:	7bfb      	ldrb	r3, [r7, #15]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d103      	bne.n	801233c <pbuf_free+0xd4>
          mem_free(p);
 8012334:	6878      	ldr	r0, [r7, #4]
 8012336:	f7fe fd0d 	bl	8010d54 <mem_free>
 801233a:	e006      	b.n	801234a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801233c:	4b0b      	ldr	r3, [pc, #44]	; (801236c <pbuf_free+0x104>)
 801233e:	f240 320f 	movw	r2, #783	; 0x30f
 8012342:	490f      	ldr	r1, [pc, #60]	; (8012380 <pbuf_free+0x118>)
 8012344:	480b      	ldr	r0, [pc, #44]	; (8012374 <pbuf_free+0x10c>)
 8012346:	f009 fb25 	bl	801b994 <iprintf>
        }
      }
      count++;
 801234a:	7ffb      	ldrb	r3, [r7, #31]
 801234c:	3301      	adds	r3, #1
 801234e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8012350:	693b      	ldr	r3, [r7, #16]
 8012352:	607b      	str	r3, [r7, #4]
 8012354:	e001      	b.n	801235a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8012356:	2300      	movs	r3, #0
 8012358:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d199      	bne.n	8012294 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8012360:	7ffb      	ldrb	r3, [r7, #31]
}
 8012362:	4618      	mov	r0, r3
 8012364:	3720      	adds	r7, #32
 8012366:	46bd      	mov	sp, r7
 8012368:	bd80      	pop	{r7, pc}
 801236a:	bf00      	nop
 801236c:	0801e1b0 	.word	0x0801e1b0
 8012370:	0801e314 	.word	0x0801e314
 8012374:	0801e210 	.word	0x0801e210
 8012378:	0801e340 	.word	0x0801e340
 801237c:	0801e358 	.word	0x0801e358
 8012380:	0801e37c 	.word	0x0801e37c

08012384 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8012384:	b480      	push	{r7}
 8012386:	b085      	sub	sp, #20
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801238c:	2300      	movs	r3, #0
 801238e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8012390:	e005      	b.n	801239e <pbuf_clen+0x1a>
    ++len;
 8012392:	89fb      	ldrh	r3, [r7, #14]
 8012394:	3301      	adds	r3, #1
 8012396:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d1f6      	bne.n	8012392 <pbuf_clen+0xe>
  }
  return len;
 80123a4:	89fb      	ldrh	r3, [r7, #14]
}
 80123a6:	4618      	mov	r0, r3
 80123a8:	3714      	adds	r7, #20
 80123aa:	46bd      	mov	sp, r7
 80123ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b0:	4770      	bx	lr
	...

080123b4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b084      	sub	sp, #16
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d016      	beq.n	80123f0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80123c2:	f009 fa7f 	bl	801b8c4 <sys_arch_protect>
 80123c6:	60f8      	str	r0, [r7, #12]
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	7b9b      	ldrb	r3, [r3, #14]
 80123cc:	3301      	adds	r3, #1
 80123ce:	b2da      	uxtb	r2, r3
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	739a      	strb	r2, [r3, #14]
 80123d4:	68f8      	ldr	r0, [r7, #12]
 80123d6:	f009 fa83 	bl	801b8e0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	7b9b      	ldrb	r3, [r3, #14]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d106      	bne.n	80123f0 <pbuf_ref+0x3c>
 80123e2:	4b05      	ldr	r3, [pc, #20]	; (80123f8 <pbuf_ref+0x44>)
 80123e4:	f240 3242 	movw	r2, #834	; 0x342
 80123e8:	4904      	ldr	r1, [pc, #16]	; (80123fc <pbuf_ref+0x48>)
 80123ea:	4805      	ldr	r0, [pc, #20]	; (8012400 <pbuf_ref+0x4c>)
 80123ec:	f009 fad2 	bl	801b994 <iprintf>
  }
}
 80123f0:	bf00      	nop
 80123f2:	3710      	adds	r7, #16
 80123f4:	46bd      	mov	sp, r7
 80123f6:	bd80      	pop	{r7, pc}
 80123f8:	0801e1b0 	.word	0x0801e1b0
 80123fc:	0801e390 	.word	0x0801e390
 8012400:	0801e210 	.word	0x0801e210

08012404 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b084      	sub	sp, #16
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
 801240c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d002      	beq.n	801241a <pbuf_cat+0x16>
 8012414:	683b      	ldr	r3, [r7, #0]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d107      	bne.n	801242a <pbuf_cat+0x26>
 801241a:	4b20      	ldr	r3, [pc, #128]	; (801249c <pbuf_cat+0x98>)
 801241c:	f240 3259 	movw	r2, #857	; 0x359
 8012420:	491f      	ldr	r1, [pc, #124]	; (80124a0 <pbuf_cat+0x9c>)
 8012422:	4820      	ldr	r0, [pc, #128]	; (80124a4 <pbuf_cat+0xa0>)
 8012424:	f009 fab6 	bl	801b994 <iprintf>
 8012428:	e034      	b.n	8012494 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	60fb      	str	r3, [r7, #12]
 801242e:	e00a      	b.n	8012446 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	891a      	ldrh	r2, [r3, #8]
 8012434:	683b      	ldr	r3, [r7, #0]
 8012436:	891b      	ldrh	r3, [r3, #8]
 8012438:	4413      	add	r3, r2
 801243a:	b29a      	uxth	r2, r3
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	60fb      	str	r3, [r7, #12]
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d1f0      	bne.n	8012430 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	891a      	ldrh	r2, [r3, #8]
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	895b      	ldrh	r3, [r3, #10]
 8012456:	429a      	cmp	r2, r3
 8012458:	d006      	beq.n	8012468 <pbuf_cat+0x64>
 801245a:	4b10      	ldr	r3, [pc, #64]	; (801249c <pbuf_cat+0x98>)
 801245c:	f240 3262 	movw	r2, #866	; 0x362
 8012460:	4911      	ldr	r1, [pc, #68]	; (80124a8 <pbuf_cat+0xa4>)
 8012462:	4810      	ldr	r0, [pc, #64]	; (80124a4 <pbuf_cat+0xa0>)
 8012464:	f009 fa96 	bl	801b994 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d006      	beq.n	801247e <pbuf_cat+0x7a>
 8012470:	4b0a      	ldr	r3, [pc, #40]	; (801249c <pbuf_cat+0x98>)
 8012472:	f240 3263 	movw	r2, #867	; 0x363
 8012476:	490d      	ldr	r1, [pc, #52]	; (80124ac <pbuf_cat+0xa8>)
 8012478:	480a      	ldr	r0, [pc, #40]	; (80124a4 <pbuf_cat+0xa0>)
 801247a:	f009 fa8b 	bl	801b994 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	891a      	ldrh	r2, [r3, #8]
 8012482:	683b      	ldr	r3, [r7, #0]
 8012484:	891b      	ldrh	r3, [r3, #8]
 8012486:	4413      	add	r3, r2
 8012488:	b29a      	uxth	r2, r3
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	683a      	ldr	r2, [r7, #0]
 8012492:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8012494:	3710      	adds	r7, #16
 8012496:	46bd      	mov	sp, r7
 8012498:	bd80      	pop	{r7, pc}
 801249a:	bf00      	nop
 801249c:	0801e1b0 	.word	0x0801e1b0
 80124a0:	0801e3a4 	.word	0x0801e3a4
 80124a4:	0801e210 	.word	0x0801e210
 80124a8:	0801e3dc 	.word	0x0801e3dc
 80124ac:	0801e40c 	.word	0x0801e40c

080124b0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b086      	sub	sp, #24
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
 80124b8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80124ba:	2300      	movs	r3, #0
 80124bc:	617b      	str	r3, [r7, #20]
 80124be:	2300      	movs	r3, #0
 80124c0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d008      	beq.n	80124da <pbuf_copy+0x2a>
 80124c8:	683b      	ldr	r3, [r7, #0]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d005      	beq.n	80124da <pbuf_copy+0x2a>
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	891a      	ldrh	r2, [r3, #8]
 80124d2:	683b      	ldr	r3, [r7, #0]
 80124d4:	891b      	ldrh	r3, [r3, #8]
 80124d6:	429a      	cmp	r2, r3
 80124d8:	d209      	bcs.n	80124ee <pbuf_copy+0x3e>
 80124da:	4b57      	ldr	r3, [pc, #348]	; (8012638 <pbuf_copy+0x188>)
 80124dc:	f240 32c9 	movw	r2, #969	; 0x3c9
 80124e0:	4956      	ldr	r1, [pc, #344]	; (801263c <pbuf_copy+0x18c>)
 80124e2:	4857      	ldr	r0, [pc, #348]	; (8012640 <pbuf_copy+0x190>)
 80124e4:	f009 fa56 	bl	801b994 <iprintf>
 80124e8:	f06f 030f 	mvn.w	r3, #15
 80124ec:	e09f      	b.n	801262e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	895b      	ldrh	r3, [r3, #10]
 80124f2:	461a      	mov	r2, r3
 80124f4:	697b      	ldr	r3, [r7, #20]
 80124f6:	1ad2      	subs	r2, r2, r3
 80124f8:	683b      	ldr	r3, [r7, #0]
 80124fa:	895b      	ldrh	r3, [r3, #10]
 80124fc:	4619      	mov	r1, r3
 80124fe:	693b      	ldr	r3, [r7, #16]
 8012500:	1acb      	subs	r3, r1, r3
 8012502:	429a      	cmp	r2, r3
 8012504:	d306      	bcc.n	8012514 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8012506:	683b      	ldr	r3, [r7, #0]
 8012508:	895b      	ldrh	r3, [r3, #10]
 801250a:	461a      	mov	r2, r3
 801250c:	693b      	ldr	r3, [r7, #16]
 801250e:	1ad3      	subs	r3, r2, r3
 8012510:	60fb      	str	r3, [r7, #12]
 8012512:	e005      	b.n	8012520 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	895b      	ldrh	r3, [r3, #10]
 8012518:	461a      	mov	r2, r3
 801251a:	697b      	ldr	r3, [r7, #20]
 801251c:	1ad3      	subs	r3, r2, r3
 801251e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	685a      	ldr	r2, [r3, #4]
 8012524:	697b      	ldr	r3, [r7, #20]
 8012526:	18d0      	adds	r0, r2, r3
 8012528:	683b      	ldr	r3, [r7, #0]
 801252a:	685a      	ldr	r2, [r3, #4]
 801252c:	693b      	ldr	r3, [r7, #16]
 801252e:	4413      	add	r3, r2
 8012530:	68fa      	ldr	r2, [r7, #12]
 8012532:	4619      	mov	r1, r3
 8012534:	f009 fa18 	bl	801b968 <memcpy>
    offset_to += len;
 8012538:	697a      	ldr	r2, [r7, #20]
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	4413      	add	r3, r2
 801253e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8012540:	693a      	ldr	r2, [r7, #16]
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	4413      	add	r3, r2
 8012546:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	895b      	ldrh	r3, [r3, #10]
 801254c:	461a      	mov	r2, r3
 801254e:	697b      	ldr	r3, [r7, #20]
 8012550:	4293      	cmp	r3, r2
 8012552:	d906      	bls.n	8012562 <pbuf_copy+0xb2>
 8012554:	4b38      	ldr	r3, [pc, #224]	; (8012638 <pbuf_copy+0x188>)
 8012556:	f240 32d9 	movw	r2, #985	; 0x3d9
 801255a:	493a      	ldr	r1, [pc, #232]	; (8012644 <pbuf_copy+0x194>)
 801255c:	4838      	ldr	r0, [pc, #224]	; (8012640 <pbuf_copy+0x190>)
 801255e:	f009 fa19 	bl	801b994 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8012562:	683b      	ldr	r3, [r7, #0]
 8012564:	895b      	ldrh	r3, [r3, #10]
 8012566:	461a      	mov	r2, r3
 8012568:	693b      	ldr	r3, [r7, #16]
 801256a:	4293      	cmp	r3, r2
 801256c:	d906      	bls.n	801257c <pbuf_copy+0xcc>
 801256e:	4b32      	ldr	r3, [pc, #200]	; (8012638 <pbuf_copy+0x188>)
 8012570:	f240 32da 	movw	r2, #986	; 0x3da
 8012574:	4934      	ldr	r1, [pc, #208]	; (8012648 <pbuf_copy+0x198>)
 8012576:	4832      	ldr	r0, [pc, #200]	; (8012640 <pbuf_copy+0x190>)
 8012578:	f009 fa0c 	bl	801b994 <iprintf>
    if (offset_from >= p_from->len) {
 801257c:	683b      	ldr	r3, [r7, #0]
 801257e:	895b      	ldrh	r3, [r3, #10]
 8012580:	461a      	mov	r2, r3
 8012582:	693b      	ldr	r3, [r7, #16]
 8012584:	4293      	cmp	r3, r2
 8012586:	d304      	bcc.n	8012592 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8012588:	2300      	movs	r3, #0
 801258a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	895b      	ldrh	r3, [r3, #10]
 8012596:	461a      	mov	r2, r3
 8012598:	697b      	ldr	r3, [r7, #20]
 801259a:	4293      	cmp	r3, r2
 801259c:	d114      	bne.n	80125c8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801259e:	2300      	movs	r3, #0
 80125a0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d10c      	bne.n	80125c8 <pbuf_copy+0x118>
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d009      	beq.n	80125c8 <pbuf_copy+0x118>
 80125b4:	4b20      	ldr	r3, [pc, #128]	; (8012638 <pbuf_copy+0x188>)
 80125b6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80125ba:	4924      	ldr	r1, [pc, #144]	; (801264c <pbuf_copy+0x19c>)
 80125bc:	4820      	ldr	r0, [pc, #128]	; (8012640 <pbuf_copy+0x190>)
 80125be:	f009 f9e9 	bl	801b994 <iprintf>
 80125c2:	f06f 030f 	mvn.w	r3, #15
 80125c6:	e032      	b.n	801262e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80125c8:	683b      	ldr	r3, [r7, #0]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d013      	beq.n	80125f6 <pbuf_copy+0x146>
 80125ce:	683b      	ldr	r3, [r7, #0]
 80125d0:	895a      	ldrh	r2, [r3, #10]
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	891b      	ldrh	r3, [r3, #8]
 80125d6:	429a      	cmp	r2, r3
 80125d8:	d10d      	bne.n	80125f6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80125da:	683b      	ldr	r3, [r7, #0]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d009      	beq.n	80125f6 <pbuf_copy+0x146>
 80125e2:	4b15      	ldr	r3, [pc, #84]	; (8012638 <pbuf_copy+0x188>)
 80125e4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80125e8:	4919      	ldr	r1, [pc, #100]	; (8012650 <pbuf_copy+0x1a0>)
 80125ea:	4815      	ldr	r0, [pc, #84]	; (8012640 <pbuf_copy+0x190>)
 80125ec:	f009 f9d2 	bl	801b994 <iprintf>
 80125f0:	f06f 0305 	mvn.w	r3, #5
 80125f4:	e01b      	b.n	801262e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d013      	beq.n	8012624 <pbuf_copy+0x174>
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	895a      	ldrh	r2, [r3, #10]
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	891b      	ldrh	r3, [r3, #8]
 8012604:	429a      	cmp	r2, r3
 8012606:	d10d      	bne.n	8012624 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d009      	beq.n	8012624 <pbuf_copy+0x174>
 8012610:	4b09      	ldr	r3, [pc, #36]	; (8012638 <pbuf_copy+0x188>)
 8012612:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8012616:	490e      	ldr	r1, [pc, #56]	; (8012650 <pbuf_copy+0x1a0>)
 8012618:	4809      	ldr	r0, [pc, #36]	; (8012640 <pbuf_copy+0x190>)
 801261a:	f009 f9bb 	bl	801b994 <iprintf>
 801261e:	f06f 0305 	mvn.w	r3, #5
 8012622:	e004      	b.n	801262e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8012624:	683b      	ldr	r3, [r7, #0]
 8012626:	2b00      	cmp	r3, #0
 8012628:	f47f af61 	bne.w	80124ee <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801262c:	2300      	movs	r3, #0
}
 801262e:	4618      	mov	r0, r3
 8012630:	3718      	adds	r7, #24
 8012632:	46bd      	mov	sp, r7
 8012634:	bd80      	pop	{r7, pc}
 8012636:	bf00      	nop
 8012638:	0801e1b0 	.word	0x0801e1b0
 801263c:	0801e458 	.word	0x0801e458
 8012640:	0801e210 	.word	0x0801e210
 8012644:	0801e488 	.word	0x0801e488
 8012648:	0801e4a0 	.word	0x0801e4a0
 801264c:	0801e4bc 	.word	0x0801e4bc
 8012650:	0801e4cc 	.word	0x0801e4cc

08012654 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b088      	sub	sp, #32
 8012658:	af00      	add	r7, sp, #0
 801265a:	60f8      	str	r0, [r7, #12]
 801265c:	60b9      	str	r1, [r7, #8]
 801265e:	4611      	mov	r1, r2
 8012660:	461a      	mov	r2, r3
 8012662:	460b      	mov	r3, r1
 8012664:	80fb      	strh	r3, [r7, #6]
 8012666:	4613      	mov	r3, r2
 8012668:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801266a:	2300      	movs	r3, #0
 801266c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801266e:	2300      	movs	r3, #0
 8012670:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d108      	bne.n	801268a <pbuf_copy_partial+0x36>
 8012678:	4b2b      	ldr	r3, [pc, #172]	; (8012728 <pbuf_copy_partial+0xd4>)
 801267a:	f240 420a 	movw	r2, #1034	; 0x40a
 801267e:	492b      	ldr	r1, [pc, #172]	; (801272c <pbuf_copy_partial+0xd8>)
 8012680:	482b      	ldr	r0, [pc, #172]	; (8012730 <pbuf_copy_partial+0xdc>)
 8012682:	f009 f987 	bl	801b994 <iprintf>
 8012686:	2300      	movs	r3, #0
 8012688:	e04a      	b.n	8012720 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801268a:	68bb      	ldr	r3, [r7, #8]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d108      	bne.n	80126a2 <pbuf_copy_partial+0x4e>
 8012690:	4b25      	ldr	r3, [pc, #148]	; (8012728 <pbuf_copy_partial+0xd4>)
 8012692:	f240 420b 	movw	r2, #1035	; 0x40b
 8012696:	4927      	ldr	r1, [pc, #156]	; (8012734 <pbuf_copy_partial+0xe0>)
 8012698:	4825      	ldr	r0, [pc, #148]	; (8012730 <pbuf_copy_partial+0xdc>)
 801269a:	f009 f97b 	bl	801b994 <iprintf>
 801269e:	2300      	movs	r3, #0
 80126a0:	e03e      	b.n	8012720 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	61fb      	str	r3, [r7, #28]
 80126a6:	e034      	b.n	8012712 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80126a8:	88bb      	ldrh	r3, [r7, #4]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d00a      	beq.n	80126c4 <pbuf_copy_partial+0x70>
 80126ae:	69fb      	ldr	r3, [r7, #28]
 80126b0:	895b      	ldrh	r3, [r3, #10]
 80126b2:	88ba      	ldrh	r2, [r7, #4]
 80126b4:	429a      	cmp	r2, r3
 80126b6:	d305      	bcc.n	80126c4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80126b8:	69fb      	ldr	r3, [r7, #28]
 80126ba:	895b      	ldrh	r3, [r3, #10]
 80126bc:	88ba      	ldrh	r2, [r7, #4]
 80126be:	1ad3      	subs	r3, r2, r3
 80126c0:	80bb      	strh	r3, [r7, #4]
 80126c2:	e023      	b.n	801270c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80126c4:	69fb      	ldr	r3, [r7, #28]
 80126c6:	895a      	ldrh	r2, [r3, #10]
 80126c8:	88bb      	ldrh	r3, [r7, #4]
 80126ca:	1ad3      	subs	r3, r2, r3
 80126cc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80126ce:	8b3a      	ldrh	r2, [r7, #24]
 80126d0:	88fb      	ldrh	r3, [r7, #6]
 80126d2:	429a      	cmp	r2, r3
 80126d4:	d901      	bls.n	80126da <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80126d6:	88fb      	ldrh	r3, [r7, #6]
 80126d8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80126da:	8b7b      	ldrh	r3, [r7, #26]
 80126dc:	68ba      	ldr	r2, [r7, #8]
 80126de:	18d0      	adds	r0, r2, r3
 80126e0:	69fb      	ldr	r3, [r7, #28]
 80126e2:	685a      	ldr	r2, [r3, #4]
 80126e4:	88bb      	ldrh	r3, [r7, #4]
 80126e6:	4413      	add	r3, r2
 80126e8:	8b3a      	ldrh	r2, [r7, #24]
 80126ea:	4619      	mov	r1, r3
 80126ec:	f009 f93c 	bl	801b968 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80126f0:	8afa      	ldrh	r2, [r7, #22]
 80126f2:	8b3b      	ldrh	r3, [r7, #24]
 80126f4:	4413      	add	r3, r2
 80126f6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80126f8:	8b7a      	ldrh	r2, [r7, #26]
 80126fa:	8b3b      	ldrh	r3, [r7, #24]
 80126fc:	4413      	add	r3, r2
 80126fe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8012700:	88fa      	ldrh	r2, [r7, #6]
 8012702:	8b3b      	ldrh	r3, [r7, #24]
 8012704:	1ad3      	subs	r3, r2, r3
 8012706:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8012708:	2300      	movs	r3, #0
 801270a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801270c:	69fb      	ldr	r3, [r7, #28]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	61fb      	str	r3, [r7, #28]
 8012712:	88fb      	ldrh	r3, [r7, #6]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d002      	beq.n	801271e <pbuf_copy_partial+0xca>
 8012718:	69fb      	ldr	r3, [r7, #28]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d1c4      	bne.n	80126a8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801271e:	8afb      	ldrh	r3, [r7, #22]
}
 8012720:	4618      	mov	r0, r3
 8012722:	3720      	adds	r7, #32
 8012724:	46bd      	mov	sp, r7
 8012726:	bd80      	pop	{r7, pc}
 8012728:	0801e1b0 	.word	0x0801e1b0
 801272c:	0801e4f8 	.word	0x0801e4f8
 8012730:	0801e210 	.word	0x0801e210
 8012734:	0801e518 	.word	0x0801e518

08012738 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b084      	sub	sp, #16
 801273c:	af00      	add	r7, sp, #0
 801273e:	4603      	mov	r3, r0
 8012740:	603a      	str	r2, [r7, #0]
 8012742:	71fb      	strb	r3, [r7, #7]
 8012744:	460b      	mov	r3, r1
 8012746:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	8919      	ldrh	r1, [r3, #8]
 801274c:	88ba      	ldrh	r2, [r7, #4]
 801274e:	79fb      	ldrb	r3, [r7, #7]
 8012750:	4618      	mov	r0, r3
 8012752:	f7ff fa73 	bl	8011c3c <pbuf_alloc>
 8012756:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d101      	bne.n	8012762 <pbuf_clone+0x2a>
    return NULL;
 801275e:	2300      	movs	r3, #0
 8012760:	e011      	b.n	8012786 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8012762:	6839      	ldr	r1, [r7, #0]
 8012764:	68f8      	ldr	r0, [r7, #12]
 8012766:	f7ff fea3 	bl	80124b0 <pbuf_copy>
 801276a:	4603      	mov	r3, r0
 801276c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801276e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d006      	beq.n	8012784 <pbuf_clone+0x4c>
 8012776:	4b06      	ldr	r3, [pc, #24]	; (8012790 <pbuf_clone+0x58>)
 8012778:	f240 5224 	movw	r2, #1316	; 0x524
 801277c:	4905      	ldr	r1, [pc, #20]	; (8012794 <pbuf_clone+0x5c>)
 801277e:	4806      	ldr	r0, [pc, #24]	; (8012798 <pbuf_clone+0x60>)
 8012780:	f009 f908 	bl	801b994 <iprintf>
  return q;
 8012784:	68fb      	ldr	r3, [r7, #12]
}
 8012786:	4618      	mov	r0, r3
 8012788:	3710      	adds	r7, #16
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}
 801278e:	bf00      	nop
 8012790:	0801e1b0 	.word	0x0801e1b0
 8012794:	0801e624 	.word	0x0801e624
 8012798:	0801e210 	.word	0x0801e210

0801279c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801279c:	b580      	push	{r7, lr}
 801279e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80127a0:	f009 f99c 	bl	801badc <rand>
 80127a4:	4603      	mov	r3, r0
 80127a6:	b29b      	uxth	r3, r3
 80127a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80127ac:	b29b      	uxth	r3, r3
 80127ae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80127b2:	b29a      	uxth	r2, r3
 80127b4:	4b01      	ldr	r3, [pc, #4]	; (80127bc <tcp_init+0x20>)
 80127b6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80127b8:	bf00      	nop
 80127ba:	bd80      	pop	{r7, pc}
 80127bc:	20000024 	.word	0x20000024

080127c0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b082      	sub	sp, #8
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	7d1b      	ldrb	r3, [r3, #20]
 80127cc:	2b01      	cmp	r3, #1
 80127ce:	d105      	bne.n	80127dc <tcp_free+0x1c>
 80127d0:	4b06      	ldr	r3, [pc, #24]	; (80127ec <tcp_free+0x2c>)
 80127d2:	22d4      	movs	r2, #212	; 0xd4
 80127d4:	4906      	ldr	r1, [pc, #24]	; (80127f0 <tcp_free+0x30>)
 80127d6:	4807      	ldr	r0, [pc, #28]	; (80127f4 <tcp_free+0x34>)
 80127d8:	f009 f8dc 	bl	801b994 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80127dc:	6879      	ldr	r1, [r7, #4]
 80127de:	2001      	movs	r0, #1
 80127e0:	f7fe fe6c 	bl	80114bc <memp_free>
}
 80127e4:	bf00      	nop
 80127e6:	3708      	adds	r7, #8
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd80      	pop	{r7, pc}
 80127ec:	0801e6b0 	.word	0x0801e6b0
 80127f0:	0801e6e0 	.word	0x0801e6e0
 80127f4:	0801e6f4 	.word	0x0801e6f4

080127f8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b082      	sub	sp, #8
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	7d1b      	ldrb	r3, [r3, #20]
 8012804:	2b01      	cmp	r3, #1
 8012806:	d105      	bne.n	8012814 <tcp_free_listen+0x1c>
 8012808:	4b06      	ldr	r3, [pc, #24]	; (8012824 <tcp_free_listen+0x2c>)
 801280a:	22df      	movs	r2, #223	; 0xdf
 801280c:	4906      	ldr	r1, [pc, #24]	; (8012828 <tcp_free_listen+0x30>)
 801280e:	4807      	ldr	r0, [pc, #28]	; (801282c <tcp_free_listen+0x34>)
 8012810:	f009 f8c0 	bl	801b994 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8012814:	6879      	ldr	r1, [r7, #4]
 8012816:	2002      	movs	r0, #2
 8012818:	f7fe fe50 	bl	80114bc <memp_free>
}
 801281c:	bf00      	nop
 801281e:	3708      	adds	r7, #8
 8012820:	46bd      	mov	sp, r7
 8012822:	bd80      	pop	{r7, pc}
 8012824:	0801e6b0 	.word	0x0801e6b0
 8012828:	0801e71c 	.word	0x0801e71c
 801282c:	0801e6f4 	.word	0x0801e6f4

08012830 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8012830:	b580      	push	{r7, lr}
 8012832:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8012834:	f000 ffdc 	bl	80137f0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8012838:	4b07      	ldr	r3, [pc, #28]	; (8012858 <tcp_tmr+0x28>)
 801283a:	781b      	ldrb	r3, [r3, #0]
 801283c:	3301      	adds	r3, #1
 801283e:	b2da      	uxtb	r2, r3
 8012840:	4b05      	ldr	r3, [pc, #20]	; (8012858 <tcp_tmr+0x28>)
 8012842:	701a      	strb	r2, [r3, #0]
 8012844:	4b04      	ldr	r3, [pc, #16]	; (8012858 <tcp_tmr+0x28>)
 8012846:	781b      	ldrb	r3, [r3, #0]
 8012848:	f003 0301 	and.w	r3, r3, #1
 801284c:	2b00      	cmp	r3, #0
 801284e:	d001      	beq.n	8012854 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8012850:	f000 fc8e 	bl	8013170 <tcp_slowtmr>
  }
}
 8012854:	bf00      	nop
 8012856:	bd80      	pop	{r7, pc}
 8012858:	200110a1 	.word	0x200110a1

0801285c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b084      	sub	sp, #16
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
 8012864:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8012866:	683b      	ldr	r3, [r7, #0]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d105      	bne.n	8012878 <tcp_remove_listener+0x1c>
 801286c:	4b0d      	ldr	r3, [pc, #52]	; (80128a4 <tcp_remove_listener+0x48>)
 801286e:	22ff      	movs	r2, #255	; 0xff
 8012870:	490d      	ldr	r1, [pc, #52]	; (80128a8 <tcp_remove_listener+0x4c>)
 8012872:	480e      	ldr	r0, [pc, #56]	; (80128ac <tcp_remove_listener+0x50>)
 8012874:	f009 f88e 	bl	801b994 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	60fb      	str	r3, [r7, #12]
 801287c:	e00a      	b.n	8012894 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012882:	683a      	ldr	r2, [r7, #0]
 8012884:	429a      	cmp	r2, r3
 8012886:	d102      	bne.n	801288e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	2200      	movs	r2, #0
 801288c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	68db      	ldr	r3, [r3, #12]
 8012892:	60fb      	str	r3, [r7, #12]
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d1f1      	bne.n	801287e <tcp_remove_listener+0x22>
    }
  }
}
 801289a:	bf00      	nop
 801289c:	bf00      	nop
 801289e:	3710      	adds	r7, #16
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bd80      	pop	{r7, pc}
 80128a4:	0801e6b0 	.word	0x0801e6b0
 80128a8:	0801e738 	.word	0x0801e738
 80128ac:	0801e6f4 	.word	0x0801e6f4

080128b0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b084      	sub	sp, #16
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d106      	bne.n	80128cc <tcp_listen_closed+0x1c>
 80128be:	4b14      	ldr	r3, [pc, #80]	; (8012910 <tcp_listen_closed+0x60>)
 80128c0:	f240 1211 	movw	r2, #273	; 0x111
 80128c4:	4913      	ldr	r1, [pc, #76]	; (8012914 <tcp_listen_closed+0x64>)
 80128c6:	4814      	ldr	r0, [pc, #80]	; (8012918 <tcp_listen_closed+0x68>)
 80128c8:	f009 f864 	bl	801b994 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	7d1b      	ldrb	r3, [r3, #20]
 80128d0:	2b01      	cmp	r3, #1
 80128d2:	d006      	beq.n	80128e2 <tcp_listen_closed+0x32>
 80128d4:	4b0e      	ldr	r3, [pc, #56]	; (8012910 <tcp_listen_closed+0x60>)
 80128d6:	f44f 7289 	mov.w	r2, #274	; 0x112
 80128da:	4910      	ldr	r1, [pc, #64]	; (801291c <tcp_listen_closed+0x6c>)
 80128dc:	480e      	ldr	r0, [pc, #56]	; (8012918 <tcp_listen_closed+0x68>)
 80128de:	f009 f859 	bl	801b994 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80128e2:	2301      	movs	r3, #1
 80128e4:	60fb      	str	r3, [r7, #12]
 80128e6:	e00b      	b.n	8012900 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80128e8:	4a0d      	ldr	r2, [pc, #52]	; (8012920 <tcp_listen_closed+0x70>)
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	6879      	ldr	r1, [r7, #4]
 80128f4:	4618      	mov	r0, r3
 80128f6:	f7ff ffb1 	bl	801285c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	3301      	adds	r3, #1
 80128fe:	60fb      	str	r3, [r7, #12]
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	2b03      	cmp	r3, #3
 8012904:	d9f0      	bls.n	80128e8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8012906:	bf00      	nop
 8012908:	bf00      	nop
 801290a:	3710      	adds	r7, #16
 801290c:	46bd      	mov	sp, r7
 801290e:	bd80      	pop	{r7, pc}
 8012910:	0801e6b0 	.word	0x0801e6b0
 8012914:	0801e760 	.word	0x0801e760
 8012918:	0801e6f4 	.word	0x0801e6f4
 801291c:	0801e76c 	.word	0x0801e76c
 8012920:	0802078c 	.word	0x0802078c

08012924 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8012924:	b5b0      	push	{r4, r5, r7, lr}
 8012926:	b088      	sub	sp, #32
 8012928:	af04      	add	r7, sp, #16
 801292a:	6078      	str	r0, [r7, #4]
 801292c:	460b      	mov	r3, r1
 801292e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d106      	bne.n	8012944 <tcp_close_shutdown+0x20>
 8012936:	4b63      	ldr	r3, [pc, #396]	; (8012ac4 <tcp_close_shutdown+0x1a0>)
 8012938:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801293c:	4962      	ldr	r1, [pc, #392]	; (8012ac8 <tcp_close_shutdown+0x1a4>)
 801293e:	4863      	ldr	r0, [pc, #396]	; (8012acc <tcp_close_shutdown+0x1a8>)
 8012940:	f009 f828 	bl	801b994 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8012944:	78fb      	ldrb	r3, [r7, #3]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d066      	beq.n	8012a18 <tcp_close_shutdown+0xf4>
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	7d1b      	ldrb	r3, [r3, #20]
 801294e:	2b04      	cmp	r3, #4
 8012950:	d003      	beq.n	801295a <tcp_close_shutdown+0x36>
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	7d1b      	ldrb	r3, [r3, #20]
 8012956:	2b07      	cmp	r3, #7
 8012958:	d15e      	bne.n	8012a18 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801295e:	2b00      	cmp	r3, #0
 8012960:	d104      	bne.n	801296c <tcp_close_shutdown+0x48>
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012966:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801296a:	d055      	beq.n	8012a18 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	8b5b      	ldrh	r3, [r3, #26]
 8012970:	f003 0310 	and.w	r3, r3, #16
 8012974:	2b00      	cmp	r3, #0
 8012976:	d106      	bne.n	8012986 <tcp_close_shutdown+0x62>
 8012978:	4b52      	ldr	r3, [pc, #328]	; (8012ac4 <tcp_close_shutdown+0x1a0>)
 801297a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801297e:	4954      	ldr	r1, [pc, #336]	; (8012ad0 <tcp_close_shutdown+0x1ac>)
 8012980:	4852      	ldr	r0, [pc, #328]	; (8012acc <tcp_close_shutdown+0x1a8>)
 8012982:	f009 f807 	bl	801b994 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801298e:	687d      	ldr	r5, [r7, #4]
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	3304      	adds	r3, #4
 8012994:	687a      	ldr	r2, [r7, #4]
 8012996:	8ad2      	ldrh	r2, [r2, #22]
 8012998:	6879      	ldr	r1, [r7, #4]
 801299a:	8b09      	ldrh	r1, [r1, #24]
 801299c:	9102      	str	r1, [sp, #8]
 801299e:	9201      	str	r2, [sp, #4]
 80129a0:	9300      	str	r3, [sp, #0]
 80129a2:	462b      	mov	r3, r5
 80129a4:	4622      	mov	r2, r4
 80129a6:	4601      	mov	r1, r0
 80129a8:	6878      	ldr	r0, [r7, #4]
 80129aa:	f005 fcf1 	bl	8018390 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80129ae:	6878      	ldr	r0, [r7, #4]
 80129b0:	f001 face 	bl	8013f50 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80129b4:	4b47      	ldr	r3, [pc, #284]	; (8012ad4 <tcp_close_shutdown+0x1b0>)
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	687a      	ldr	r2, [r7, #4]
 80129ba:	429a      	cmp	r2, r3
 80129bc:	d105      	bne.n	80129ca <tcp_close_shutdown+0xa6>
 80129be:	4b45      	ldr	r3, [pc, #276]	; (8012ad4 <tcp_close_shutdown+0x1b0>)
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	68db      	ldr	r3, [r3, #12]
 80129c4:	4a43      	ldr	r2, [pc, #268]	; (8012ad4 <tcp_close_shutdown+0x1b0>)
 80129c6:	6013      	str	r3, [r2, #0]
 80129c8:	e013      	b.n	80129f2 <tcp_close_shutdown+0xce>
 80129ca:	4b42      	ldr	r3, [pc, #264]	; (8012ad4 <tcp_close_shutdown+0x1b0>)
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	60fb      	str	r3, [r7, #12]
 80129d0:	e00c      	b.n	80129ec <tcp_close_shutdown+0xc8>
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	68db      	ldr	r3, [r3, #12]
 80129d6:	687a      	ldr	r2, [r7, #4]
 80129d8:	429a      	cmp	r2, r3
 80129da:	d104      	bne.n	80129e6 <tcp_close_shutdown+0xc2>
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	68da      	ldr	r2, [r3, #12]
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	60da      	str	r2, [r3, #12]
 80129e4:	e005      	b.n	80129f2 <tcp_close_shutdown+0xce>
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	68db      	ldr	r3, [r3, #12]
 80129ea:	60fb      	str	r3, [r7, #12]
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d1ef      	bne.n	80129d2 <tcp_close_shutdown+0xae>
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	2200      	movs	r2, #0
 80129f6:	60da      	str	r2, [r3, #12]
 80129f8:	4b37      	ldr	r3, [pc, #220]	; (8012ad8 <tcp_close_shutdown+0x1b4>)
 80129fa:	2201      	movs	r2, #1
 80129fc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80129fe:	4b37      	ldr	r3, [pc, #220]	; (8012adc <tcp_close_shutdown+0x1b8>)
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	687a      	ldr	r2, [r7, #4]
 8012a04:	429a      	cmp	r2, r3
 8012a06:	d102      	bne.n	8012a0e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8012a08:	f003 ff66 	bl	80168d8 <tcp_trigger_input_pcb_close>
 8012a0c:	e002      	b.n	8012a14 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8012a0e:	6878      	ldr	r0, [r7, #4]
 8012a10:	f7ff fed6 	bl	80127c0 <tcp_free>
      }
      return ERR_OK;
 8012a14:	2300      	movs	r3, #0
 8012a16:	e050      	b.n	8012aba <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	7d1b      	ldrb	r3, [r3, #20]
 8012a1c:	2b02      	cmp	r3, #2
 8012a1e:	d03b      	beq.n	8012a98 <tcp_close_shutdown+0x174>
 8012a20:	2b02      	cmp	r3, #2
 8012a22:	dc44      	bgt.n	8012aae <tcp_close_shutdown+0x18a>
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d002      	beq.n	8012a2e <tcp_close_shutdown+0x10a>
 8012a28:	2b01      	cmp	r3, #1
 8012a2a:	d02a      	beq.n	8012a82 <tcp_close_shutdown+0x15e>
 8012a2c:	e03f      	b.n	8012aae <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	8adb      	ldrh	r3, [r3, #22]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d021      	beq.n	8012a7a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012a36:	4b2a      	ldr	r3, [pc, #168]	; (8012ae0 <tcp_close_shutdown+0x1bc>)
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	687a      	ldr	r2, [r7, #4]
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d105      	bne.n	8012a4c <tcp_close_shutdown+0x128>
 8012a40:	4b27      	ldr	r3, [pc, #156]	; (8012ae0 <tcp_close_shutdown+0x1bc>)
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	68db      	ldr	r3, [r3, #12]
 8012a46:	4a26      	ldr	r2, [pc, #152]	; (8012ae0 <tcp_close_shutdown+0x1bc>)
 8012a48:	6013      	str	r3, [r2, #0]
 8012a4a:	e013      	b.n	8012a74 <tcp_close_shutdown+0x150>
 8012a4c:	4b24      	ldr	r3, [pc, #144]	; (8012ae0 <tcp_close_shutdown+0x1bc>)
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	60bb      	str	r3, [r7, #8]
 8012a52:	e00c      	b.n	8012a6e <tcp_close_shutdown+0x14a>
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	68db      	ldr	r3, [r3, #12]
 8012a58:	687a      	ldr	r2, [r7, #4]
 8012a5a:	429a      	cmp	r2, r3
 8012a5c:	d104      	bne.n	8012a68 <tcp_close_shutdown+0x144>
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	68da      	ldr	r2, [r3, #12]
 8012a62:	68bb      	ldr	r3, [r7, #8]
 8012a64:	60da      	str	r2, [r3, #12]
 8012a66:	e005      	b.n	8012a74 <tcp_close_shutdown+0x150>
 8012a68:	68bb      	ldr	r3, [r7, #8]
 8012a6a:	68db      	ldr	r3, [r3, #12]
 8012a6c:	60bb      	str	r3, [r7, #8]
 8012a6e:	68bb      	ldr	r3, [r7, #8]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d1ef      	bne.n	8012a54 <tcp_close_shutdown+0x130>
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	2200      	movs	r2, #0
 8012a78:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8012a7a:	6878      	ldr	r0, [r7, #4]
 8012a7c:	f7ff fea0 	bl	80127c0 <tcp_free>
      break;
 8012a80:	e01a      	b.n	8012ab8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8012a82:	6878      	ldr	r0, [r7, #4]
 8012a84:	f7ff ff14 	bl	80128b0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8012a88:	6879      	ldr	r1, [r7, #4]
 8012a8a:	4816      	ldr	r0, [pc, #88]	; (8012ae4 <tcp_close_shutdown+0x1c0>)
 8012a8c:	f001 fab0 	bl	8013ff0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	f7ff feb1 	bl	80127f8 <tcp_free_listen>
      break;
 8012a96:	e00f      	b.n	8012ab8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012a98:	6879      	ldr	r1, [r7, #4]
 8012a9a:	480e      	ldr	r0, [pc, #56]	; (8012ad4 <tcp_close_shutdown+0x1b0>)
 8012a9c:	f001 faa8 	bl	8013ff0 <tcp_pcb_remove>
 8012aa0:	4b0d      	ldr	r3, [pc, #52]	; (8012ad8 <tcp_close_shutdown+0x1b4>)
 8012aa2:	2201      	movs	r2, #1
 8012aa4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8012aa6:	6878      	ldr	r0, [r7, #4]
 8012aa8:	f7ff fe8a 	bl	80127c0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8012aac:	e004      	b.n	8012ab8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8012aae:	6878      	ldr	r0, [r7, #4]
 8012ab0:	f000 f81a 	bl	8012ae8 <tcp_close_shutdown_fin>
 8012ab4:	4603      	mov	r3, r0
 8012ab6:	e000      	b.n	8012aba <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8012ab8:	2300      	movs	r3, #0
}
 8012aba:	4618      	mov	r0, r3
 8012abc:	3710      	adds	r7, #16
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	bdb0      	pop	{r4, r5, r7, pc}
 8012ac2:	bf00      	nop
 8012ac4:	0801e6b0 	.word	0x0801e6b0
 8012ac8:	0801e784 	.word	0x0801e784
 8012acc:	0801e6f4 	.word	0x0801e6f4
 8012ad0:	0801e7a4 	.word	0x0801e7a4
 8012ad4:	20011098 	.word	0x20011098
 8012ad8:	200110a0 	.word	0x200110a0
 8012adc:	200110d8 	.word	0x200110d8
 8012ae0:	20011090 	.word	0x20011090
 8012ae4:	20011094 	.word	0x20011094

08012ae8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b084      	sub	sp, #16
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d106      	bne.n	8012b04 <tcp_close_shutdown_fin+0x1c>
 8012af6:	4b2e      	ldr	r3, [pc, #184]	; (8012bb0 <tcp_close_shutdown_fin+0xc8>)
 8012af8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8012afc:	492d      	ldr	r1, [pc, #180]	; (8012bb4 <tcp_close_shutdown_fin+0xcc>)
 8012afe:	482e      	ldr	r0, [pc, #184]	; (8012bb8 <tcp_close_shutdown_fin+0xd0>)
 8012b00:	f008 ff48 	bl	801b994 <iprintf>

  switch (pcb->state) {
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	7d1b      	ldrb	r3, [r3, #20]
 8012b08:	2b07      	cmp	r3, #7
 8012b0a:	d020      	beq.n	8012b4e <tcp_close_shutdown_fin+0x66>
 8012b0c:	2b07      	cmp	r3, #7
 8012b0e:	dc2b      	bgt.n	8012b68 <tcp_close_shutdown_fin+0x80>
 8012b10:	2b03      	cmp	r3, #3
 8012b12:	d002      	beq.n	8012b1a <tcp_close_shutdown_fin+0x32>
 8012b14:	2b04      	cmp	r3, #4
 8012b16:	d00d      	beq.n	8012b34 <tcp_close_shutdown_fin+0x4c>
 8012b18:	e026      	b.n	8012b68 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8012b1a:	6878      	ldr	r0, [r7, #4]
 8012b1c:	f004 fd46 	bl	80175ac <tcp_send_fin>
 8012b20:	4603      	mov	r3, r0
 8012b22:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d11f      	bne.n	8012b6c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	2205      	movs	r2, #5
 8012b30:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012b32:	e01b      	b.n	8012b6c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8012b34:	6878      	ldr	r0, [r7, #4]
 8012b36:	f004 fd39 	bl	80175ac <tcp_send_fin>
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d114      	bne.n	8012b70 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	2205      	movs	r2, #5
 8012b4a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012b4c:	e010      	b.n	8012b70 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8012b4e:	6878      	ldr	r0, [r7, #4]
 8012b50:	f004 fd2c 	bl	80175ac <tcp_send_fin>
 8012b54:	4603      	mov	r3, r0
 8012b56:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d109      	bne.n	8012b74 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	2209      	movs	r2, #9
 8012b64:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012b66:	e005      	b.n	8012b74 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8012b68:	2300      	movs	r3, #0
 8012b6a:	e01c      	b.n	8012ba6 <tcp_close_shutdown_fin+0xbe>
      break;
 8012b6c:	bf00      	nop
 8012b6e:	e002      	b.n	8012b76 <tcp_close_shutdown_fin+0x8e>
      break;
 8012b70:	bf00      	nop
 8012b72:	e000      	b.n	8012b76 <tcp_close_shutdown_fin+0x8e>
      break;
 8012b74:	bf00      	nop
  }

  if (err == ERR_OK) {
 8012b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d103      	bne.n	8012b86 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8012b7e:	6878      	ldr	r0, [r7, #4]
 8012b80:	f004 fe52 	bl	8017828 <tcp_output>
 8012b84:	e00d      	b.n	8012ba2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8012b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b8e:	d108      	bne.n	8012ba2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	8b5b      	ldrh	r3, [r3, #26]
 8012b94:	f043 0308 	orr.w	r3, r3, #8
 8012b98:	b29a      	uxth	r2, r3
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	e001      	b.n	8012ba6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8012ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	3710      	adds	r7, #16
 8012baa:	46bd      	mov	sp, r7
 8012bac:	bd80      	pop	{r7, pc}
 8012bae:	bf00      	nop
 8012bb0:	0801e6b0 	.word	0x0801e6b0
 8012bb4:	0801e760 	.word	0x0801e760
 8012bb8:	0801e6f4 	.word	0x0801e6f4

08012bbc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b082      	sub	sp, #8
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d109      	bne.n	8012bde <tcp_close+0x22>
 8012bca:	4b0f      	ldr	r3, [pc, #60]	; (8012c08 <tcp_close+0x4c>)
 8012bcc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8012bd0:	490e      	ldr	r1, [pc, #56]	; (8012c0c <tcp_close+0x50>)
 8012bd2:	480f      	ldr	r0, [pc, #60]	; (8012c10 <tcp_close+0x54>)
 8012bd4:	f008 fede 	bl	801b994 <iprintf>
 8012bd8:	f06f 030f 	mvn.w	r3, #15
 8012bdc:	e00f      	b.n	8012bfe <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	7d1b      	ldrb	r3, [r3, #20]
 8012be2:	2b01      	cmp	r3, #1
 8012be4:	d006      	beq.n	8012bf4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	8b5b      	ldrh	r3, [r3, #26]
 8012bea:	f043 0310 	orr.w	r3, r3, #16
 8012bee:	b29a      	uxth	r2, r3
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8012bf4:	2101      	movs	r1, #1
 8012bf6:	6878      	ldr	r0, [r7, #4]
 8012bf8:	f7ff fe94 	bl	8012924 <tcp_close_shutdown>
 8012bfc:	4603      	mov	r3, r0
}
 8012bfe:	4618      	mov	r0, r3
 8012c00:	3708      	adds	r7, #8
 8012c02:	46bd      	mov	sp, r7
 8012c04:	bd80      	pop	{r7, pc}
 8012c06:	bf00      	nop
 8012c08:	0801e6b0 	.word	0x0801e6b0
 8012c0c:	0801e7c0 	.word	0x0801e7c0
 8012c10:	0801e6f4 	.word	0x0801e6f4

08012c14 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b084      	sub	sp, #16
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	60f8      	str	r0, [r7, #12]
 8012c1c:	60b9      	str	r1, [r7, #8]
 8012c1e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d109      	bne.n	8012c3a <tcp_shutdown+0x26>
 8012c26:	4b26      	ldr	r3, [pc, #152]	; (8012cc0 <tcp_shutdown+0xac>)
 8012c28:	f240 2207 	movw	r2, #519	; 0x207
 8012c2c:	4925      	ldr	r1, [pc, #148]	; (8012cc4 <tcp_shutdown+0xb0>)
 8012c2e:	4826      	ldr	r0, [pc, #152]	; (8012cc8 <tcp_shutdown+0xb4>)
 8012c30:	f008 feb0 	bl	801b994 <iprintf>
 8012c34:	f06f 030f 	mvn.w	r3, #15
 8012c38:	e03d      	b.n	8012cb6 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	7d1b      	ldrb	r3, [r3, #20]
 8012c3e:	2b01      	cmp	r3, #1
 8012c40:	d102      	bne.n	8012c48 <tcp_shutdown+0x34>
    return ERR_CONN;
 8012c42:	f06f 030a 	mvn.w	r3, #10
 8012c46:	e036      	b.n	8012cb6 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8012c48:	68bb      	ldr	r3, [r7, #8]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d01b      	beq.n	8012c86 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	8b5b      	ldrh	r3, [r3, #26]
 8012c52:	f043 0310 	orr.w	r3, r3, #16
 8012c56:	b29a      	uxth	r2, r3
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d005      	beq.n	8012c6e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8012c62:	2101      	movs	r1, #1
 8012c64:	68f8      	ldr	r0, [r7, #12]
 8012c66:	f7ff fe5d 	bl	8012924 <tcp_close_shutdown>
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	e023      	b.n	8012cb6 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d007      	beq.n	8012c86 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	f7ff faf4 	bl	8012268 <pbuf_free>
      pcb->refused_data = NULL;
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	2200      	movs	r2, #0
 8012c84:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d013      	beq.n	8012cb4 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	7d1b      	ldrb	r3, [r3, #20]
 8012c90:	2b04      	cmp	r3, #4
 8012c92:	dc02      	bgt.n	8012c9a <tcp_shutdown+0x86>
 8012c94:	2b03      	cmp	r3, #3
 8012c96:	da02      	bge.n	8012c9e <tcp_shutdown+0x8a>
 8012c98:	e009      	b.n	8012cae <tcp_shutdown+0x9a>
 8012c9a:	2b07      	cmp	r3, #7
 8012c9c:	d107      	bne.n	8012cae <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8012c9e:	68bb      	ldr	r3, [r7, #8]
 8012ca0:	b2db      	uxtb	r3, r3
 8012ca2:	4619      	mov	r1, r3
 8012ca4:	68f8      	ldr	r0, [r7, #12]
 8012ca6:	f7ff fe3d 	bl	8012924 <tcp_close_shutdown>
 8012caa:	4603      	mov	r3, r0
 8012cac:	e003      	b.n	8012cb6 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8012cae:	f06f 030a 	mvn.w	r3, #10
 8012cb2:	e000      	b.n	8012cb6 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8012cb4:	2300      	movs	r3, #0
}
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	3710      	adds	r7, #16
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	bd80      	pop	{r7, pc}
 8012cbe:	bf00      	nop
 8012cc0:	0801e6b0 	.word	0x0801e6b0
 8012cc4:	0801e7d8 	.word	0x0801e7d8
 8012cc8:	0801e6f4 	.word	0x0801e6f4

08012ccc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b08e      	sub	sp, #56	; 0x38
 8012cd0:	af04      	add	r7, sp, #16
 8012cd2:	6078      	str	r0, [r7, #4]
 8012cd4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d107      	bne.n	8012cec <tcp_abandon+0x20>
 8012cdc:	4b52      	ldr	r3, [pc, #328]	; (8012e28 <tcp_abandon+0x15c>)
 8012cde:	f240 223d 	movw	r2, #573	; 0x23d
 8012ce2:	4952      	ldr	r1, [pc, #328]	; (8012e2c <tcp_abandon+0x160>)
 8012ce4:	4852      	ldr	r0, [pc, #328]	; (8012e30 <tcp_abandon+0x164>)
 8012ce6:	f008 fe55 	bl	801b994 <iprintf>
 8012cea:	e099      	b.n	8012e20 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	7d1b      	ldrb	r3, [r3, #20]
 8012cf0:	2b01      	cmp	r3, #1
 8012cf2:	d106      	bne.n	8012d02 <tcp_abandon+0x36>
 8012cf4:	4b4c      	ldr	r3, [pc, #304]	; (8012e28 <tcp_abandon+0x15c>)
 8012cf6:	f44f 7210 	mov.w	r2, #576	; 0x240
 8012cfa:	494e      	ldr	r1, [pc, #312]	; (8012e34 <tcp_abandon+0x168>)
 8012cfc:	484c      	ldr	r0, [pc, #304]	; (8012e30 <tcp_abandon+0x164>)
 8012cfe:	f008 fe49 	bl	801b994 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	7d1b      	ldrb	r3, [r3, #20]
 8012d06:	2b0a      	cmp	r3, #10
 8012d08:	d107      	bne.n	8012d1a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8012d0a:	6879      	ldr	r1, [r7, #4]
 8012d0c:	484a      	ldr	r0, [pc, #296]	; (8012e38 <tcp_abandon+0x16c>)
 8012d0e:	f001 f96f 	bl	8013ff0 <tcp_pcb_remove>
    tcp_free(pcb);
 8012d12:	6878      	ldr	r0, [r7, #4]
 8012d14:	f7ff fd54 	bl	80127c0 <tcp_free>
 8012d18:	e082      	b.n	8012e20 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8012d1e:	2300      	movs	r3, #0
 8012d20:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d26:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d2c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012d34:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	691b      	ldr	r3, [r3, #16]
 8012d3a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	7d1b      	ldrb	r3, [r3, #20]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d126      	bne.n	8012d92 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	8adb      	ldrh	r3, [r3, #22]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d02e      	beq.n	8012daa <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012d4c:	4b3b      	ldr	r3, [pc, #236]	; (8012e3c <tcp_abandon+0x170>)
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	687a      	ldr	r2, [r7, #4]
 8012d52:	429a      	cmp	r2, r3
 8012d54:	d105      	bne.n	8012d62 <tcp_abandon+0x96>
 8012d56:	4b39      	ldr	r3, [pc, #228]	; (8012e3c <tcp_abandon+0x170>)
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	68db      	ldr	r3, [r3, #12]
 8012d5c:	4a37      	ldr	r2, [pc, #220]	; (8012e3c <tcp_abandon+0x170>)
 8012d5e:	6013      	str	r3, [r2, #0]
 8012d60:	e013      	b.n	8012d8a <tcp_abandon+0xbe>
 8012d62:	4b36      	ldr	r3, [pc, #216]	; (8012e3c <tcp_abandon+0x170>)
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	61fb      	str	r3, [r7, #28]
 8012d68:	e00c      	b.n	8012d84 <tcp_abandon+0xb8>
 8012d6a:	69fb      	ldr	r3, [r7, #28]
 8012d6c:	68db      	ldr	r3, [r3, #12]
 8012d6e:	687a      	ldr	r2, [r7, #4]
 8012d70:	429a      	cmp	r2, r3
 8012d72:	d104      	bne.n	8012d7e <tcp_abandon+0xb2>
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	68da      	ldr	r2, [r3, #12]
 8012d78:	69fb      	ldr	r3, [r7, #28]
 8012d7a:	60da      	str	r2, [r3, #12]
 8012d7c:	e005      	b.n	8012d8a <tcp_abandon+0xbe>
 8012d7e:	69fb      	ldr	r3, [r7, #28]
 8012d80:	68db      	ldr	r3, [r3, #12]
 8012d82:	61fb      	str	r3, [r7, #28]
 8012d84:	69fb      	ldr	r3, [r7, #28]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d1ef      	bne.n	8012d6a <tcp_abandon+0x9e>
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	60da      	str	r2, [r3, #12]
 8012d90:	e00b      	b.n	8012daa <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8012d92:	683b      	ldr	r3, [r7, #0]
 8012d94:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	8adb      	ldrh	r3, [r3, #22]
 8012d9a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012d9c:	6879      	ldr	r1, [r7, #4]
 8012d9e:	4828      	ldr	r0, [pc, #160]	; (8012e40 <tcp_abandon+0x174>)
 8012da0:	f001 f926 	bl	8013ff0 <tcp_pcb_remove>
 8012da4:	4b27      	ldr	r3, [pc, #156]	; (8012e44 <tcp_abandon+0x178>)
 8012da6:	2201      	movs	r2, #1
 8012da8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d004      	beq.n	8012dbc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012db6:	4618      	mov	r0, r3
 8012db8:	f000 fdfa 	bl	80139b0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d004      	beq.n	8012dce <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dc8:	4618      	mov	r0, r3
 8012dca:	f000 fdf1 	bl	80139b0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d004      	beq.n	8012de0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012dda:	4618      	mov	r0, r3
 8012ddc:	f000 fde8 	bl	80139b0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d00e      	beq.n	8012e04 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8012de6:	6879      	ldr	r1, [r7, #4]
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	3304      	adds	r3, #4
 8012dec:	687a      	ldr	r2, [r7, #4]
 8012dee:	8b12      	ldrh	r2, [r2, #24]
 8012df0:	9202      	str	r2, [sp, #8]
 8012df2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012df4:	9201      	str	r2, [sp, #4]
 8012df6:	9300      	str	r3, [sp, #0]
 8012df8:	460b      	mov	r3, r1
 8012dfa:	697a      	ldr	r2, [r7, #20]
 8012dfc:	69b9      	ldr	r1, [r7, #24]
 8012dfe:	6878      	ldr	r0, [r7, #4]
 8012e00:	f005 fac6 	bl	8018390 <tcp_rst>
    }
    last_state = pcb->state;
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	7d1b      	ldrb	r3, [r3, #20]
 8012e08:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8012e0a:	6878      	ldr	r0, [r7, #4]
 8012e0c:	f7ff fcd8 	bl	80127c0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012e10:	693b      	ldr	r3, [r7, #16]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d004      	beq.n	8012e20 <tcp_abandon+0x154>
 8012e16:	693b      	ldr	r3, [r7, #16]
 8012e18:	f06f 010c 	mvn.w	r1, #12
 8012e1c:	68f8      	ldr	r0, [r7, #12]
 8012e1e:	4798      	blx	r3
  }
}
 8012e20:	3728      	adds	r7, #40	; 0x28
 8012e22:	46bd      	mov	sp, r7
 8012e24:	bd80      	pop	{r7, pc}
 8012e26:	bf00      	nop
 8012e28:	0801e6b0 	.word	0x0801e6b0
 8012e2c:	0801e7f4 	.word	0x0801e7f4
 8012e30:	0801e6f4 	.word	0x0801e6f4
 8012e34:	0801e810 	.word	0x0801e810
 8012e38:	2001109c 	.word	0x2001109c
 8012e3c:	20011090 	.word	0x20011090
 8012e40:	20011098 	.word	0x20011098
 8012e44:	200110a0 	.word	0x200110a0

08012e48 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	b082      	sub	sp, #8
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012e50:	2101      	movs	r1, #1
 8012e52:	6878      	ldr	r0, [r7, #4]
 8012e54:	f7ff ff3a 	bl	8012ccc <tcp_abandon>
}
 8012e58:	bf00      	nop
 8012e5a:	3708      	adds	r7, #8
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	bd80      	pop	{r7, pc}

08012e60 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b088      	sub	sp, #32
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	60f8      	str	r0, [r7, #12]
 8012e68:	60b9      	str	r1, [r7, #8]
 8012e6a:	4613      	mov	r3, r2
 8012e6c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8012e6e:	2304      	movs	r3, #4
 8012e70:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012e72:	68bb      	ldr	r3, [r7, #8]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d101      	bne.n	8012e7c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8012e78:	4b3e      	ldr	r3, [pc, #248]	; (8012f74 <tcp_bind+0x114>)
 8012e7a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d109      	bne.n	8012e96 <tcp_bind+0x36>
 8012e82:	4b3d      	ldr	r3, [pc, #244]	; (8012f78 <tcp_bind+0x118>)
 8012e84:	f240 22a9 	movw	r2, #681	; 0x2a9
 8012e88:	493c      	ldr	r1, [pc, #240]	; (8012f7c <tcp_bind+0x11c>)
 8012e8a:	483d      	ldr	r0, [pc, #244]	; (8012f80 <tcp_bind+0x120>)
 8012e8c:	f008 fd82 	bl	801b994 <iprintf>
 8012e90:	f06f 030f 	mvn.w	r3, #15
 8012e94:	e06a      	b.n	8012f6c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	7d1b      	ldrb	r3, [r3, #20]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d009      	beq.n	8012eb2 <tcp_bind+0x52>
 8012e9e:	4b36      	ldr	r3, [pc, #216]	; (8012f78 <tcp_bind+0x118>)
 8012ea0:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012ea4:	4937      	ldr	r1, [pc, #220]	; (8012f84 <tcp_bind+0x124>)
 8012ea6:	4836      	ldr	r0, [pc, #216]	; (8012f80 <tcp_bind+0x120>)
 8012ea8:	f008 fd74 	bl	801b994 <iprintf>
 8012eac:	f06f 0305 	mvn.w	r3, #5
 8012eb0:	e05c      	b.n	8012f6c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8012eb2:	88fb      	ldrh	r3, [r7, #6]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d109      	bne.n	8012ecc <tcp_bind+0x6c>
    port = tcp_new_port();
 8012eb8:	f000 f914 	bl	80130e4 <tcp_new_port>
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012ec0:	88fb      	ldrh	r3, [r7, #6]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d135      	bne.n	8012f32 <tcp_bind+0xd2>
      return ERR_BUF;
 8012ec6:	f06f 0301 	mvn.w	r3, #1
 8012eca:	e04f      	b.n	8012f6c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8012ecc:	2300      	movs	r3, #0
 8012ece:	61fb      	str	r3, [r7, #28]
 8012ed0:	e02b      	b.n	8012f2a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8012ed2:	4a2d      	ldr	r2, [pc, #180]	; (8012f88 <tcp_bind+0x128>)
 8012ed4:	69fb      	ldr	r3, [r7, #28]
 8012ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	61bb      	str	r3, [r7, #24]
 8012ede:	e01e      	b.n	8012f1e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8012ee0:	69bb      	ldr	r3, [r7, #24]
 8012ee2:	8adb      	ldrh	r3, [r3, #22]
 8012ee4:	88fa      	ldrh	r2, [r7, #6]
 8012ee6:	429a      	cmp	r2, r3
 8012ee8:	d116      	bne.n	8012f18 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8012eea:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d010      	beq.n	8012f12 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8012ef0:	69bb      	ldr	r3, [r7, #24]
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d00c      	beq.n	8012f12 <tcp_bind+0xb2>
 8012ef8:	68bb      	ldr	r3, [r7, #8]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d009      	beq.n	8012f12 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8012efe:	68bb      	ldr	r3, [r7, #8]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d005      	beq.n	8012f12 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8012f06:	69bb      	ldr	r3, [r7, #24]
 8012f08:	681a      	ldr	r2, [r3, #0]
 8012f0a:	68bb      	ldr	r3, [r7, #8]
 8012f0c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8012f0e:	429a      	cmp	r2, r3
 8012f10:	d102      	bne.n	8012f18 <tcp_bind+0xb8>
              return ERR_USE;
 8012f12:	f06f 0307 	mvn.w	r3, #7
 8012f16:	e029      	b.n	8012f6c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8012f18:	69bb      	ldr	r3, [r7, #24]
 8012f1a:	68db      	ldr	r3, [r3, #12]
 8012f1c:	61bb      	str	r3, [r7, #24]
 8012f1e:	69bb      	ldr	r3, [r7, #24]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d1dd      	bne.n	8012ee0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8012f24:	69fb      	ldr	r3, [r7, #28]
 8012f26:	3301      	adds	r3, #1
 8012f28:	61fb      	str	r3, [r7, #28]
 8012f2a:	69fa      	ldr	r2, [r7, #28]
 8012f2c:	697b      	ldr	r3, [r7, #20]
 8012f2e:	429a      	cmp	r2, r3
 8012f30:	dbcf      	blt.n	8012ed2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8012f32:	68bb      	ldr	r3, [r7, #8]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d00c      	beq.n	8012f52 <tcp_bind+0xf2>
 8012f38:	68bb      	ldr	r3, [r7, #8]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d008      	beq.n	8012f52 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8012f40:	68bb      	ldr	r3, [r7, #8]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d002      	beq.n	8012f4c <tcp_bind+0xec>
 8012f46:	68bb      	ldr	r3, [r7, #8]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	e000      	b.n	8012f4e <tcp_bind+0xee>
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	68fa      	ldr	r2, [r7, #12]
 8012f50:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	88fa      	ldrh	r2, [r7, #6]
 8012f56:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8012f58:	4b0c      	ldr	r3, [pc, #48]	; (8012f8c <tcp_bind+0x12c>)
 8012f5a:	681a      	ldr	r2, [r3, #0]
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	60da      	str	r2, [r3, #12]
 8012f60:	4a0a      	ldr	r2, [pc, #40]	; (8012f8c <tcp_bind+0x12c>)
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	6013      	str	r3, [r2, #0]
 8012f66:	f005 fbd5 	bl	8018714 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8012f6a:	2300      	movs	r3, #0
}
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	3720      	adds	r7, #32
 8012f70:	46bd      	mov	sp, r7
 8012f72:	bd80      	pop	{r7, pc}
 8012f74:	080207b4 	.word	0x080207b4
 8012f78:	0801e6b0 	.word	0x0801e6b0
 8012f7c:	0801e844 	.word	0x0801e844
 8012f80:	0801e6f4 	.word	0x0801e6f4
 8012f84:	0801e85c 	.word	0x0801e85c
 8012f88:	0802078c 	.word	0x0802078c
 8012f8c:	20011090 	.word	0x20011090

08012f90 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b084      	sub	sp, #16
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d106      	bne.n	8012fac <tcp_update_rcv_ann_wnd+0x1c>
 8012f9e:	4b25      	ldr	r3, [pc, #148]	; (8013034 <tcp_update_rcv_ann_wnd+0xa4>)
 8012fa0:	f240 32a6 	movw	r2, #934	; 0x3a6
 8012fa4:	4924      	ldr	r1, [pc, #144]	; (8013038 <tcp_update_rcv_ann_wnd+0xa8>)
 8012fa6:	4825      	ldr	r0, [pc, #148]	; (801303c <tcp_update_rcv_ann_wnd+0xac>)
 8012fa8:	f008 fcf4 	bl	801b994 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fb0:	687a      	ldr	r2, [r7, #4]
 8012fb2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8012fb4:	4413      	add	r3, r2
 8012fb6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fbc:	687a      	ldr	r2, [r7, #4]
 8012fbe:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8012fc0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8012fc4:	bf28      	it	cs
 8012fc6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8012fca:	b292      	uxth	r2, r2
 8012fcc:	4413      	add	r3, r2
 8012fce:	68fa      	ldr	r2, [r7, #12]
 8012fd0:	1ad3      	subs	r3, r2, r3
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	db08      	blt.n	8012fe8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fe2:	68fa      	ldr	r2, [r7, #12]
 8012fe4:	1ad3      	subs	r3, r2, r3
 8012fe6:	e020      	b.n	801302a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ff0:	1ad3      	subs	r3, r2, r3
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	dd03      	ble.n	8012ffe <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	2200      	movs	r2, #0
 8012ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012ffc:	e014      	b.n	8013028 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013006:	1ad3      	subs	r3, r2, r3
 8013008:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801300a:	68bb      	ldr	r3, [r7, #8]
 801300c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013010:	d306      	bcc.n	8013020 <tcp_update_rcv_ann_wnd+0x90>
 8013012:	4b08      	ldr	r3, [pc, #32]	; (8013034 <tcp_update_rcv_ann_wnd+0xa4>)
 8013014:	f240 32b6 	movw	r2, #950	; 0x3b6
 8013018:	4909      	ldr	r1, [pc, #36]	; (8013040 <tcp_update_rcv_ann_wnd+0xb0>)
 801301a:	4808      	ldr	r0, [pc, #32]	; (801303c <tcp_update_rcv_ann_wnd+0xac>)
 801301c:	f008 fcba 	bl	801b994 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8013020:	68bb      	ldr	r3, [r7, #8]
 8013022:	b29a      	uxth	r2, r3
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8013028:	2300      	movs	r3, #0
  }
}
 801302a:	4618      	mov	r0, r3
 801302c:	3710      	adds	r7, #16
 801302e:	46bd      	mov	sp, r7
 8013030:	bd80      	pop	{r7, pc}
 8013032:	bf00      	nop
 8013034:	0801e6b0 	.word	0x0801e6b0
 8013038:	0801e90c 	.word	0x0801e90c
 801303c:	0801e6f4 	.word	0x0801e6f4
 8013040:	0801e930 	.word	0x0801e930

08013044 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b084      	sub	sp, #16
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
 801304c:	460b      	mov	r3, r1
 801304e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d107      	bne.n	8013066 <tcp_recved+0x22>
 8013056:	4b1f      	ldr	r3, [pc, #124]	; (80130d4 <tcp_recved+0x90>)
 8013058:	f240 32cf 	movw	r2, #975	; 0x3cf
 801305c:	491e      	ldr	r1, [pc, #120]	; (80130d8 <tcp_recved+0x94>)
 801305e:	481f      	ldr	r0, [pc, #124]	; (80130dc <tcp_recved+0x98>)
 8013060:	f008 fc98 	bl	801b994 <iprintf>
 8013064:	e032      	b.n	80130cc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	7d1b      	ldrb	r3, [r3, #20]
 801306a:	2b01      	cmp	r3, #1
 801306c:	d106      	bne.n	801307c <tcp_recved+0x38>
 801306e:	4b19      	ldr	r3, [pc, #100]	; (80130d4 <tcp_recved+0x90>)
 8013070:	f240 32d2 	movw	r2, #978	; 0x3d2
 8013074:	491a      	ldr	r1, [pc, #104]	; (80130e0 <tcp_recved+0x9c>)
 8013076:	4819      	ldr	r0, [pc, #100]	; (80130dc <tcp_recved+0x98>)
 8013078:	f008 fc8c 	bl	801b994 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013080:	887b      	ldrh	r3, [r7, #2]
 8013082:	4413      	add	r3, r2
 8013084:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8013086:	89fb      	ldrh	r3, [r7, #14]
 8013088:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801308c:	d804      	bhi.n	8013098 <tcp_recved+0x54>
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013092:	89fa      	ldrh	r2, [r7, #14]
 8013094:	429a      	cmp	r2, r3
 8013096:	d204      	bcs.n	80130a2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801309e:	851a      	strh	r2, [r3, #40]	; 0x28
 80130a0:	e002      	b.n	80130a8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	89fa      	ldrh	r2, [r7, #14]
 80130a6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80130a8:	6878      	ldr	r0, [r7, #4]
 80130aa:	f7ff ff71 	bl	8012f90 <tcp_update_rcv_ann_wnd>
 80130ae:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80130b0:	68bb      	ldr	r3, [r7, #8]
 80130b2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80130b6:	d309      	bcc.n	80130cc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	8b5b      	ldrh	r3, [r3, #26]
 80130bc:	f043 0302 	orr.w	r3, r3, #2
 80130c0:	b29a      	uxth	r2, r3
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80130c6:	6878      	ldr	r0, [r7, #4]
 80130c8:	f004 fbae 	bl	8017828 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80130cc:	3710      	adds	r7, #16
 80130ce:	46bd      	mov	sp, r7
 80130d0:	bd80      	pop	{r7, pc}
 80130d2:	bf00      	nop
 80130d4:	0801e6b0 	.word	0x0801e6b0
 80130d8:	0801e94c 	.word	0x0801e94c
 80130dc:	0801e6f4 	.word	0x0801e6f4
 80130e0:	0801e964 	.word	0x0801e964

080130e4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80130e4:	b480      	push	{r7}
 80130e6:	b083      	sub	sp, #12
 80130e8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80130ea:	2300      	movs	r3, #0
 80130ec:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80130ee:	4b1e      	ldr	r3, [pc, #120]	; (8013168 <tcp_new_port+0x84>)
 80130f0:	881b      	ldrh	r3, [r3, #0]
 80130f2:	3301      	adds	r3, #1
 80130f4:	b29a      	uxth	r2, r3
 80130f6:	4b1c      	ldr	r3, [pc, #112]	; (8013168 <tcp_new_port+0x84>)
 80130f8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80130fa:	4b1b      	ldr	r3, [pc, #108]	; (8013168 <tcp_new_port+0x84>)
 80130fc:	881b      	ldrh	r3, [r3, #0]
 80130fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013102:	4293      	cmp	r3, r2
 8013104:	d103      	bne.n	801310e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8013106:	4b18      	ldr	r3, [pc, #96]	; (8013168 <tcp_new_port+0x84>)
 8013108:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801310c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801310e:	2300      	movs	r3, #0
 8013110:	71fb      	strb	r3, [r7, #7]
 8013112:	e01e      	b.n	8013152 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013114:	79fb      	ldrb	r3, [r7, #7]
 8013116:	4a15      	ldr	r2, [pc, #84]	; (801316c <tcp_new_port+0x88>)
 8013118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	603b      	str	r3, [r7, #0]
 8013120:	e011      	b.n	8013146 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8013122:	683b      	ldr	r3, [r7, #0]
 8013124:	8ada      	ldrh	r2, [r3, #22]
 8013126:	4b10      	ldr	r3, [pc, #64]	; (8013168 <tcp_new_port+0x84>)
 8013128:	881b      	ldrh	r3, [r3, #0]
 801312a:	429a      	cmp	r2, r3
 801312c:	d108      	bne.n	8013140 <tcp_new_port+0x5c>
        n++;
 801312e:	88bb      	ldrh	r3, [r7, #4]
 8013130:	3301      	adds	r3, #1
 8013132:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8013134:	88bb      	ldrh	r3, [r7, #4]
 8013136:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801313a:	d3d8      	bcc.n	80130ee <tcp_new_port+0xa>
          return 0;
 801313c:	2300      	movs	r3, #0
 801313e:	e00d      	b.n	801315c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013140:	683b      	ldr	r3, [r7, #0]
 8013142:	68db      	ldr	r3, [r3, #12]
 8013144:	603b      	str	r3, [r7, #0]
 8013146:	683b      	ldr	r3, [r7, #0]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d1ea      	bne.n	8013122 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801314c:	79fb      	ldrb	r3, [r7, #7]
 801314e:	3301      	adds	r3, #1
 8013150:	71fb      	strb	r3, [r7, #7]
 8013152:	79fb      	ldrb	r3, [r7, #7]
 8013154:	2b03      	cmp	r3, #3
 8013156:	d9dd      	bls.n	8013114 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8013158:	4b03      	ldr	r3, [pc, #12]	; (8013168 <tcp_new_port+0x84>)
 801315a:	881b      	ldrh	r3, [r3, #0]
}
 801315c:	4618      	mov	r0, r3
 801315e:	370c      	adds	r7, #12
 8013160:	46bd      	mov	sp, r7
 8013162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013166:	4770      	bx	lr
 8013168:	20000024 	.word	0x20000024
 801316c:	0802078c 	.word	0x0802078c

08013170 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8013170:	b5b0      	push	{r4, r5, r7, lr}
 8013172:	b090      	sub	sp, #64	; 0x40
 8013174:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8013176:	2300      	movs	r3, #0
 8013178:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801317c:	4b94      	ldr	r3, [pc, #592]	; (80133d0 <tcp_slowtmr+0x260>)
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	3301      	adds	r3, #1
 8013182:	4a93      	ldr	r2, [pc, #588]	; (80133d0 <tcp_slowtmr+0x260>)
 8013184:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8013186:	4b93      	ldr	r3, [pc, #588]	; (80133d4 <tcp_slowtmr+0x264>)
 8013188:	781b      	ldrb	r3, [r3, #0]
 801318a:	3301      	adds	r3, #1
 801318c:	b2da      	uxtb	r2, r3
 801318e:	4b91      	ldr	r3, [pc, #580]	; (80133d4 <tcp_slowtmr+0x264>)
 8013190:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8013192:	2300      	movs	r3, #0
 8013194:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8013196:	4b90      	ldr	r3, [pc, #576]	; (80133d8 <tcp_slowtmr+0x268>)
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801319c:	e29d      	b.n	80136da <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801319e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131a0:	7d1b      	ldrb	r3, [r3, #20]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d106      	bne.n	80131b4 <tcp_slowtmr+0x44>
 80131a6:	4b8d      	ldr	r3, [pc, #564]	; (80133dc <tcp_slowtmr+0x26c>)
 80131a8:	f240 42be 	movw	r2, #1214	; 0x4be
 80131ac:	498c      	ldr	r1, [pc, #560]	; (80133e0 <tcp_slowtmr+0x270>)
 80131ae:	488d      	ldr	r0, [pc, #564]	; (80133e4 <tcp_slowtmr+0x274>)
 80131b0:	f008 fbf0 	bl	801b994 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80131b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131b6:	7d1b      	ldrb	r3, [r3, #20]
 80131b8:	2b01      	cmp	r3, #1
 80131ba:	d106      	bne.n	80131ca <tcp_slowtmr+0x5a>
 80131bc:	4b87      	ldr	r3, [pc, #540]	; (80133dc <tcp_slowtmr+0x26c>)
 80131be:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80131c2:	4989      	ldr	r1, [pc, #548]	; (80133e8 <tcp_slowtmr+0x278>)
 80131c4:	4887      	ldr	r0, [pc, #540]	; (80133e4 <tcp_slowtmr+0x274>)
 80131c6:	f008 fbe5 	bl	801b994 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80131ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131cc:	7d1b      	ldrb	r3, [r3, #20]
 80131ce:	2b0a      	cmp	r3, #10
 80131d0:	d106      	bne.n	80131e0 <tcp_slowtmr+0x70>
 80131d2:	4b82      	ldr	r3, [pc, #520]	; (80133dc <tcp_slowtmr+0x26c>)
 80131d4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80131d8:	4984      	ldr	r1, [pc, #528]	; (80133ec <tcp_slowtmr+0x27c>)
 80131da:	4882      	ldr	r0, [pc, #520]	; (80133e4 <tcp_slowtmr+0x274>)
 80131dc:	f008 fbda 	bl	801b994 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80131e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131e2:	7f9a      	ldrb	r2, [r3, #30]
 80131e4:	4b7b      	ldr	r3, [pc, #492]	; (80133d4 <tcp_slowtmr+0x264>)
 80131e6:	781b      	ldrb	r3, [r3, #0]
 80131e8:	429a      	cmp	r2, r3
 80131ea:	d105      	bne.n	80131f8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80131ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80131f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131f2:	68db      	ldr	r3, [r3, #12]
 80131f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80131f6:	e270      	b.n	80136da <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80131f8:	4b76      	ldr	r3, [pc, #472]	; (80133d4 <tcp_slowtmr+0x264>)
 80131fa:	781a      	ldrb	r2, [r3, #0]
 80131fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131fe:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8013200:	2300      	movs	r3, #0
 8013202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8013206:	2300      	movs	r3, #0
 8013208:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801320e:	7d1b      	ldrb	r3, [r3, #20]
 8013210:	2b02      	cmp	r3, #2
 8013212:	d10a      	bne.n	801322a <tcp_slowtmr+0xba>
 8013214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013216:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801321a:	2b05      	cmp	r3, #5
 801321c:	d905      	bls.n	801322a <tcp_slowtmr+0xba>
      ++pcb_remove;
 801321e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013222:	3301      	adds	r3, #1
 8013224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013228:	e11e      	b.n	8013468 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801322a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801322c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013230:	2b0b      	cmp	r3, #11
 8013232:	d905      	bls.n	8013240 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8013234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013238:	3301      	adds	r3, #1
 801323a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801323e:	e113      	b.n	8013468 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8013240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013242:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013246:	2b00      	cmp	r3, #0
 8013248:	d075      	beq.n	8013336 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801324a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801324c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801324e:	2b00      	cmp	r3, #0
 8013250:	d006      	beq.n	8013260 <tcp_slowtmr+0xf0>
 8013252:	4b62      	ldr	r3, [pc, #392]	; (80133dc <tcp_slowtmr+0x26c>)
 8013254:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8013258:	4965      	ldr	r1, [pc, #404]	; (80133f0 <tcp_slowtmr+0x280>)
 801325a:	4862      	ldr	r0, [pc, #392]	; (80133e4 <tcp_slowtmr+0x274>)
 801325c:	f008 fb9a 	bl	801b994 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8013260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013264:	2b00      	cmp	r3, #0
 8013266:	d106      	bne.n	8013276 <tcp_slowtmr+0x106>
 8013268:	4b5c      	ldr	r3, [pc, #368]	; (80133dc <tcp_slowtmr+0x26c>)
 801326a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801326e:	4961      	ldr	r1, [pc, #388]	; (80133f4 <tcp_slowtmr+0x284>)
 8013270:	485c      	ldr	r0, [pc, #368]	; (80133e4 <tcp_slowtmr+0x274>)
 8013272:	f008 fb8f 	bl	801b994 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8013276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013278:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801327c:	2b0b      	cmp	r3, #11
 801327e:	d905      	bls.n	801328c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8013280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013284:	3301      	adds	r3, #1
 8013286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801328a:	e0ed      	b.n	8013468 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801328c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801328e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013292:	3b01      	subs	r3, #1
 8013294:	4a58      	ldr	r2, [pc, #352]	; (80133f8 <tcp_slowtmr+0x288>)
 8013296:	5cd3      	ldrb	r3, [r2, r3]
 8013298:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801329a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801329c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80132a0:	7c7a      	ldrb	r2, [r7, #17]
 80132a2:	429a      	cmp	r2, r3
 80132a4:	d907      	bls.n	80132b6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80132a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80132ac:	3301      	adds	r3, #1
 80132ae:	b2da      	uxtb	r2, r3
 80132b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132b2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80132b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132b8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80132bc:	7c7a      	ldrb	r2, [r7, #17]
 80132be:	429a      	cmp	r2, r3
 80132c0:	f200 80d2 	bhi.w	8013468 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80132c4:	2301      	movs	r3, #1
 80132c6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80132c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d108      	bne.n	80132e4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80132d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80132d4:	f005 f950 	bl	8018578 <tcp_zero_window_probe>
 80132d8:	4603      	mov	r3, r0
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d014      	beq.n	8013308 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80132de:	2300      	movs	r3, #0
 80132e0:	623b      	str	r3, [r7, #32]
 80132e2:	e011      	b.n	8013308 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80132e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80132ea:	4619      	mov	r1, r3
 80132ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80132ee:	f004 f815 	bl	801731c <tcp_split_unsent_seg>
 80132f2:	4603      	mov	r3, r0
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d107      	bne.n	8013308 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80132f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80132fa:	f004 fa95 	bl	8017828 <tcp_output>
 80132fe:	4603      	mov	r3, r0
 8013300:	2b00      	cmp	r3, #0
 8013302:	d101      	bne.n	8013308 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8013304:	2300      	movs	r3, #0
 8013306:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8013308:	6a3b      	ldr	r3, [r7, #32]
 801330a:	2b00      	cmp	r3, #0
 801330c:	f000 80ac 	beq.w	8013468 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8013310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013312:	2200      	movs	r2, #0
 8013314:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8013318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801331a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801331e:	2b06      	cmp	r3, #6
 8013320:	f200 80a2 	bhi.w	8013468 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8013324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013326:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801332a:	3301      	adds	r3, #1
 801332c:	b2da      	uxtb	r2, r3
 801332e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013330:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8013334:	e098      	b.n	8013468 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8013336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013338:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801333c:	2b00      	cmp	r3, #0
 801333e:	db0f      	blt.n	8013360 <tcp_slowtmr+0x1f0>
 8013340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013342:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013346:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801334a:	4293      	cmp	r3, r2
 801334c:	d008      	beq.n	8013360 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013350:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013354:	b29b      	uxth	r3, r3
 8013356:	3301      	adds	r3, #1
 8013358:	b29b      	uxth	r3, r3
 801335a:	b21a      	sxth	r2, r3
 801335c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801335e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8013360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013362:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8013366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013368:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801336c:	429a      	cmp	r2, r3
 801336e:	db7b      	blt.n	8013468 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8013370:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013372:	f004 fd4b 	bl	8017e0c <tcp_rexmit_rto_prepare>
 8013376:	4603      	mov	r3, r0
 8013378:	2b00      	cmp	r3, #0
 801337a:	d007      	beq.n	801338c <tcp_slowtmr+0x21c>
 801337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801337e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013380:	2b00      	cmp	r3, #0
 8013382:	d171      	bne.n	8013468 <tcp_slowtmr+0x2f8>
 8013384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013388:	2b00      	cmp	r3, #0
 801338a:	d06d      	beq.n	8013468 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801338e:	7d1b      	ldrb	r3, [r3, #20]
 8013390:	2b02      	cmp	r3, #2
 8013392:	d03a      	beq.n	801340a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8013394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013396:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801339a:	2b0c      	cmp	r3, #12
 801339c:	bf28      	it	cs
 801339e:	230c      	movcs	r3, #12
 80133a0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80133a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80133a8:	10db      	asrs	r3, r3, #3
 80133aa:	b21b      	sxth	r3, r3
 80133ac:	461a      	mov	r2, r3
 80133ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133b0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80133b4:	4413      	add	r3, r2
 80133b6:	7efa      	ldrb	r2, [r7, #27]
 80133b8:	4910      	ldr	r1, [pc, #64]	; (80133fc <tcp_slowtmr+0x28c>)
 80133ba:	5c8a      	ldrb	r2, [r1, r2]
 80133bc:	4093      	lsls	r3, r2
 80133be:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80133c0:	697b      	ldr	r3, [r7, #20]
 80133c2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80133c6:	4293      	cmp	r3, r2
 80133c8:	dc1a      	bgt.n	8013400 <tcp_slowtmr+0x290>
 80133ca:	697b      	ldr	r3, [r7, #20]
 80133cc:	b21a      	sxth	r2, r3
 80133ce:	e019      	b.n	8013404 <tcp_slowtmr+0x294>
 80133d0:	2001108c 	.word	0x2001108c
 80133d4:	200110a2 	.word	0x200110a2
 80133d8:	20011098 	.word	0x20011098
 80133dc:	0801e6b0 	.word	0x0801e6b0
 80133e0:	0801e9f4 	.word	0x0801e9f4
 80133e4:	0801e6f4 	.word	0x0801e6f4
 80133e8:	0801ea20 	.word	0x0801ea20
 80133ec:	0801ea4c 	.word	0x0801ea4c
 80133f0:	0801ea7c 	.word	0x0801ea7c
 80133f4:	0801eab0 	.word	0x0801eab0
 80133f8:	08020784 	.word	0x08020784
 80133fc:	08020774 	.word	0x08020774
 8013400:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013406:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801340c:	2200      	movs	r2, #0
 801340e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8013410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013412:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013418:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801341c:	4293      	cmp	r3, r2
 801341e:	bf28      	it	cs
 8013420:	4613      	movcs	r3, r2
 8013422:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8013424:	8a7b      	ldrh	r3, [r7, #18]
 8013426:	085b      	lsrs	r3, r3, #1
 8013428:	b29a      	uxth	r2, r3
 801342a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801342c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8013430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013432:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013438:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801343a:	005b      	lsls	r3, r3, #1
 801343c:	b29b      	uxth	r3, r3
 801343e:	429a      	cmp	r2, r3
 8013440:	d206      	bcs.n	8013450 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8013442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013444:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013446:	005b      	lsls	r3, r3, #1
 8013448:	b29a      	uxth	r2, r3
 801344a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801344c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8013450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013452:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8013454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013456:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801345a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801345c:	2200      	movs	r2, #0
 801345e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8013462:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013464:	f004 fd42 	bl	8017eec <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8013468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801346a:	7d1b      	ldrb	r3, [r3, #20]
 801346c:	2b06      	cmp	r3, #6
 801346e:	d111      	bne.n	8013494 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8013470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013472:	8b5b      	ldrh	r3, [r3, #26]
 8013474:	f003 0310 	and.w	r3, r3, #16
 8013478:	2b00      	cmp	r3, #0
 801347a:	d00b      	beq.n	8013494 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801347c:	4b9c      	ldr	r3, [pc, #624]	; (80136f0 <tcp_slowtmr+0x580>)
 801347e:	681a      	ldr	r2, [r3, #0]
 8013480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013482:	6a1b      	ldr	r3, [r3, #32]
 8013484:	1ad3      	subs	r3, r2, r3
 8013486:	2b28      	cmp	r3, #40	; 0x28
 8013488:	d904      	bls.n	8013494 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801348a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801348e:	3301      	adds	r3, #1
 8013490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013496:	7a5b      	ldrb	r3, [r3, #9]
 8013498:	f003 0308 	and.w	r3, r3, #8
 801349c:	2b00      	cmp	r3, #0
 801349e:	d04a      	beq.n	8013536 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80134a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134a2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80134a4:	2b04      	cmp	r3, #4
 80134a6:	d003      	beq.n	80134b0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80134a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134aa:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80134ac:	2b07      	cmp	r3, #7
 80134ae:	d142      	bne.n	8013536 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80134b0:	4b8f      	ldr	r3, [pc, #572]	; (80136f0 <tcp_slowtmr+0x580>)
 80134b2:	681a      	ldr	r2, [r3, #0]
 80134b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134b6:	6a1b      	ldr	r3, [r3, #32]
 80134b8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80134ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134bc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80134c0:	4b8c      	ldr	r3, [pc, #560]	; (80136f4 <tcp_slowtmr+0x584>)
 80134c2:	440b      	add	r3, r1
 80134c4:	498c      	ldr	r1, [pc, #560]	; (80136f8 <tcp_slowtmr+0x588>)
 80134c6:	fba1 1303 	umull	r1, r3, r1, r3
 80134ca:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80134cc:	429a      	cmp	r2, r3
 80134ce:	d90a      	bls.n	80134e6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80134d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134d4:	3301      	adds	r3, #1
 80134d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80134da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80134de:	3301      	adds	r3, #1
 80134e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80134e4:	e027      	b.n	8013536 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80134e6:	4b82      	ldr	r3, [pc, #520]	; (80136f0 <tcp_slowtmr+0x580>)
 80134e8:	681a      	ldr	r2, [r3, #0]
 80134ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ec:	6a1b      	ldr	r3, [r3, #32]
 80134ee:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80134f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134f2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80134f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134f8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80134fc:	4618      	mov	r0, r3
 80134fe:	4b7f      	ldr	r3, [pc, #508]	; (80136fc <tcp_slowtmr+0x58c>)
 8013500:	fb00 f303 	mul.w	r3, r0, r3
 8013504:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8013506:	497c      	ldr	r1, [pc, #496]	; (80136f8 <tcp_slowtmr+0x588>)
 8013508:	fba1 1303 	umull	r1, r3, r1, r3
 801350c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801350e:	429a      	cmp	r2, r3
 8013510:	d911      	bls.n	8013536 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8013512:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013514:	f004 fff0 	bl	80184f8 <tcp_keepalive>
 8013518:	4603      	mov	r3, r0
 801351a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801351e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8013522:	2b00      	cmp	r3, #0
 8013524:	d107      	bne.n	8013536 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8013526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013528:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801352c:	3301      	adds	r3, #1
 801352e:	b2da      	uxtb	r2, r3
 8013530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013532:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8013536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801353a:	2b00      	cmp	r3, #0
 801353c:	d011      	beq.n	8013562 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801353e:	4b6c      	ldr	r3, [pc, #432]	; (80136f0 <tcp_slowtmr+0x580>)
 8013540:	681a      	ldr	r2, [r3, #0]
 8013542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013544:	6a1b      	ldr	r3, [r3, #32]
 8013546:	1ad2      	subs	r2, r2, r3
 8013548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801354a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801354e:	4619      	mov	r1, r3
 8013550:	460b      	mov	r3, r1
 8013552:	005b      	lsls	r3, r3, #1
 8013554:	440b      	add	r3, r1
 8013556:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8013558:	429a      	cmp	r2, r3
 801355a:	d302      	bcc.n	8013562 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801355c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801355e:	f000 feab 	bl	80142b8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8013562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013564:	7d1b      	ldrb	r3, [r3, #20]
 8013566:	2b03      	cmp	r3, #3
 8013568:	d10b      	bne.n	8013582 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801356a:	4b61      	ldr	r3, [pc, #388]	; (80136f0 <tcp_slowtmr+0x580>)
 801356c:	681a      	ldr	r2, [r3, #0]
 801356e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013570:	6a1b      	ldr	r3, [r3, #32]
 8013572:	1ad3      	subs	r3, r2, r3
 8013574:	2b28      	cmp	r3, #40	; 0x28
 8013576:	d904      	bls.n	8013582 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8013578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801357c:	3301      	adds	r3, #1
 801357e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8013582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013584:	7d1b      	ldrb	r3, [r3, #20]
 8013586:	2b09      	cmp	r3, #9
 8013588:	d10b      	bne.n	80135a2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801358a:	4b59      	ldr	r3, [pc, #356]	; (80136f0 <tcp_slowtmr+0x580>)
 801358c:	681a      	ldr	r2, [r3, #0]
 801358e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013590:	6a1b      	ldr	r3, [r3, #32]
 8013592:	1ad3      	subs	r3, r2, r3
 8013594:	2bf0      	cmp	r3, #240	; 0xf0
 8013596:	d904      	bls.n	80135a2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8013598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801359c:	3301      	adds	r3, #1
 801359e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80135a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d060      	beq.n	801366c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80135aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80135b0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80135b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80135b4:	f000 fccc 	bl	8013f50 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80135b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d010      	beq.n	80135e0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80135be:	4b50      	ldr	r3, [pc, #320]	; (8013700 <tcp_slowtmr+0x590>)
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135c4:	429a      	cmp	r2, r3
 80135c6:	d106      	bne.n	80135d6 <tcp_slowtmr+0x466>
 80135c8:	4b4e      	ldr	r3, [pc, #312]	; (8013704 <tcp_slowtmr+0x594>)
 80135ca:	f240 526d 	movw	r2, #1389	; 0x56d
 80135ce:	494e      	ldr	r1, [pc, #312]	; (8013708 <tcp_slowtmr+0x598>)
 80135d0:	484e      	ldr	r0, [pc, #312]	; (801370c <tcp_slowtmr+0x59c>)
 80135d2:	f008 f9df 	bl	801b994 <iprintf>
        prev->next = pcb->next;
 80135d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135d8:	68da      	ldr	r2, [r3, #12]
 80135da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135dc:	60da      	str	r2, [r3, #12]
 80135de:	e00f      	b.n	8013600 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80135e0:	4b47      	ldr	r3, [pc, #284]	; (8013700 <tcp_slowtmr+0x590>)
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135e6:	429a      	cmp	r2, r3
 80135e8:	d006      	beq.n	80135f8 <tcp_slowtmr+0x488>
 80135ea:	4b46      	ldr	r3, [pc, #280]	; (8013704 <tcp_slowtmr+0x594>)
 80135ec:	f240 5271 	movw	r2, #1393	; 0x571
 80135f0:	4947      	ldr	r1, [pc, #284]	; (8013710 <tcp_slowtmr+0x5a0>)
 80135f2:	4846      	ldr	r0, [pc, #280]	; (801370c <tcp_slowtmr+0x59c>)
 80135f4:	f008 f9ce 	bl	801b994 <iprintf>
        tcp_active_pcbs = pcb->next;
 80135f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135fa:	68db      	ldr	r3, [r3, #12]
 80135fc:	4a40      	ldr	r2, [pc, #256]	; (8013700 <tcp_slowtmr+0x590>)
 80135fe:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8013600:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013604:	2b00      	cmp	r3, #0
 8013606:	d013      	beq.n	8013630 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801360a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801360c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801360e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8013610:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8013612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013614:	3304      	adds	r3, #4
 8013616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013618:	8ad2      	ldrh	r2, [r2, #22]
 801361a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801361c:	8b09      	ldrh	r1, [r1, #24]
 801361e:	9102      	str	r1, [sp, #8]
 8013620:	9201      	str	r2, [sp, #4]
 8013622:	9300      	str	r3, [sp, #0]
 8013624:	462b      	mov	r3, r5
 8013626:	4622      	mov	r2, r4
 8013628:	4601      	mov	r1, r0
 801362a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801362c:	f004 feb0 	bl	8018390 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8013630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013632:	691b      	ldr	r3, [r3, #16]
 8013634:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8013636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013638:	7d1b      	ldrb	r3, [r3, #20]
 801363a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801363c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801363e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8013640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013642:	68db      	ldr	r3, [r3, #12]
 8013644:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8013646:	6838      	ldr	r0, [r7, #0]
 8013648:	f7ff f8ba 	bl	80127c0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801364c:	4b31      	ldr	r3, [pc, #196]	; (8013714 <tcp_slowtmr+0x5a4>)
 801364e:	2200      	movs	r2, #0
 8013650:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d004      	beq.n	8013662 <tcp_slowtmr+0x4f2>
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	f06f 010c 	mvn.w	r1, #12
 801365e:	68b8      	ldr	r0, [r7, #8]
 8013660:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8013662:	4b2c      	ldr	r3, [pc, #176]	; (8013714 <tcp_slowtmr+0x5a4>)
 8013664:	781b      	ldrb	r3, [r3, #0]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d037      	beq.n	80136da <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801366a:	e592      	b.n	8013192 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801366c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801366e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013672:	68db      	ldr	r3, [r3, #12]
 8013674:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8013676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013678:	7f1b      	ldrb	r3, [r3, #28]
 801367a:	3301      	adds	r3, #1
 801367c:	b2da      	uxtb	r2, r3
 801367e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013680:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8013682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013684:	7f1a      	ldrb	r2, [r3, #28]
 8013686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013688:	7f5b      	ldrb	r3, [r3, #29]
 801368a:	429a      	cmp	r2, r3
 801368c:	d325      	bcc.n	80136da <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801368e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013690:	2200      	movs	r2, #0
 8013692:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8013694:	4b1f      	ldr	r3, [pc, #124]	; (8013714 <tcp_slowtmr+0x5a4>)
 8013696:	2200      	movs	r2, #0
 8013698:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801369a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801369c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d00b      	beq.n	80136bc <tcp_slowtmr+0x54c>
 80136a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80136aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136ac:	6912      	ldr	r2, [r2, #16]
 80136ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80136b0:	4610      	mov	r0, r2
 80136b2:	4798      	blx	r3
 80136b4:	4603      	mov	r3, r0
 80136b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80136ba:	e002      	b.n	80136c2 <tcp_slowtmr+0x552>
 80136bc:	2300      	movs	r3, #0
 80136be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80136c2:	4b14      	ldr	r3, [pc, #80]	; (8013714 <tcp_slowtmr+0x5a4>)
 80136c4:	781b      	ldrb	r3, [r3, #0]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d000      	beq.n	80136cc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80136ca:	e562      	b.n	8013192 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80136cc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d102      	bne.n	80136da <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80136d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80136d6:	f004 f8a7 	bl	8017828 <tcp_output>
  while (pcb != NULL) {
 80136da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136dc:	2b00      	cmp	r3, #0
 80136de:	f47f ad5e 	bne.w	801319e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80136e2:	2300      	movs	r3, #0
 80136e4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80136e6:	4b0c      	ldr	r3, [pc, #48]	; (8013718 <tcp_slowtmr+0x5a8>)
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80136ec:	e069      	b.n	80137c2 <tcp_slowtmr+0x652>
 80136ee:	bf00      	nop
 80136f0:	2001108c 	.word	0x2001108c
 80136f4:	000a4cb8 	.word	0x000a4cb8
 80136f8:	10624dd3 	.word	0x10624dd3
 80136fc:	000124f8 	.word	0x000124f8
 8013700:	20011098 	.word	0x20011098
 8013704:	0801e6b0 	.word	0x0801e6b0
 8013708:	0801eae8 	.word	0x0801eae8
 801370c:	0801e6f4 	.word	0x0801e6f4
 8013710:	0801eb14 	.word	0x0801eb14
 8013714:	200110a0 	.word	0x200110a0
 8013718:	2001109c 	.word	0x2001109c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801371c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801371e:	7d1b      	ldrb	r3, [r3, #20]
 8013720:	2b0a      	cmp	r3, #10
 8013722:	d006      	beq.n	8013732 <tcp_slowtmr+0x5c2>
 8013724:	4b2b      	ldr	r3, [pc, #172]	; (80137d4 <tcp_slowtmr+0x664>)
 8013726:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801372a:	492b      	ldr	r1, [pc, #172]	; (80137d8 <tcp_slowtmr+0x668>)
 801372c:	482b      	ldr	r0, [pc, #172]	; (80137dc <tcp_slowtmr+0x66c>)
 801372e:	f008 f931 	bl	801b994 <iprintf>
    pcb_remove = 0;
 8013732:	2300      	movs	r3, #0
 8013734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013738:	4b29      	ldr	r3, [pc, #164]	; (80137e0 <tcp_slowtmr+0x670>)
 801373a:	681a      	ldr	r2, [r3, #0]
 801373c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801373e:	6a1b      	ldr	r3, [r3, #32]
 8013740:	1ad3      	subs	r3, r2, r3
 8013742:	2bf0      	cmp	r3, #240	; 0xf0
 8013744:	d904      	bls.n	8013750 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8013746:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801374a:	3301      	adds	r3, #1
 801374c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013754:	2b00      	cmp	r3, #0
 8013756:	d02f      	beq.n	80137b8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8013758:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801375a:	f000 fbf9 	bl	8013f50 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801375e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013760:	2b00      	cmp	r3, #0
 8013762:	d010      	beq.n	8013786 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8013764:	4b1f      	ldr	r3, [pc, #124]	; (80137e4 <tcp_slowtmr+0x674>)
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801376a:	429a      	cmp	r2, r3
 801376c:	d106      	bne.n	801377c <tcp_slowtmr+0x60c>
 801376e:	4b19      	ldr	r3, [pc, #100]	; (80137d4 <tcp_slowtmr+0x664>)
 8013770:	f240 52af 	movw	r2, #1455	; 0x5af
 8013774:	491c      	ldr	r1, [pc, #112]	; (80137e8 <tcp_slowtmr+0x678>)
 8013776:	4819      	ldr	r0, [pc, #100]	; (80137dc <tcp_slowtmr+0x66c>)
 8013778:	f008 f90c 	bl	801b994 <iprintf>
        prev->next = pcb->next;
 801377c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801377e:	68da      	ldr	r2, [r3, #12]
 8013780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013782:	60da      	str	r2, [r3, #12]
 8013784:	e00f      	b.n	80137a6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8013786:	4b17      	ldr	r3, [pc, #92]	; (80137e4 <tcp_slowtmr+0x674>)
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801378c:	429a      	cmp	r2, r3
 801378e:	d006      	beq.n	801379e <tcp_slowtmr+0x62e>
 8013790:	4b10      	ldr	r3, [pc, #64]	; (80137d4 <tcp_slowtmr+0x664>)
 8013792:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8013796:	4915      	ldr	r1, [pc, #84]	; (80137ec <tcp_slowtmr+0x67c>)
 8013798:	4810      	ldr	r0, [pc, #64]	; (80137dc <tcp_slowtmr+0x66c>)
 801379a:	f008 f8fb 	bl	801b994 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801379e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137a0:	68db      	ldr	r3, [r3, #12]
 80137a2:	4a10      	ldr	r2, [pc, #64]	; (80137e4 <tcp_slowtmr+0x674>)
 80137a4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80137a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137a8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80137aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ac:	68db      	ldr	r3, [r3, #12]
 80137ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80137b0:	69f8      	ldr	r0, [r7, #28]
 80137b2:	f7ff f805 	bl	80127c0 <tcp_free>
 80137b6:	e004      	b.n	80137c2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80137b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80137bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137be:	68db      	ldr	r3, [r3, #12]
 80137c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80137c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d1a9      	bne.n	801371c <tcp_slowtmr+0x5ac>
    }
  }
}
 80137c8:	bf00      	nop
 80137ca:	bf00      	nop
 80137cc:	3730      	adds	r7, #48	; 0x30
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bdb0      	pop	{r4, r5, r7, pc}
 80137d2:	bf00      	nop
 80137d4:	0801e6b0 	.word	0x0801e6b0
 80137d8:	0801eb40 	.word	0x0801eb40
 80137dc:	0801e6f4 	.word	0x0801e6f4
 80137e0:	2001108c 	.word	0x2001108c
 80137e4:	2001109c 	.word	0x2001109c
 80137e8:	0801eb70 	.word	0x0801eb70
 80137ec:	0801eb98 	.word	0x0801eb98

080137f0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b082      	sub	sp, #8
 80137f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80137f6:	4b2d      	ldr	r3, [pc, #180]	; (80138ac <tcp_fasttmr+0xbc>)
 80137f8:	781b      	ldrb	r3, [r3, #0]
 80137fa:	3301      	adds	r3, #1
 80137fc:	b2da      	uxtb	r2, r3
 80137fe:	4b2b      	ldr	r3, [pc, #172]	; (80138ac <tcp_fasttmr+0xbc>)
 8013800:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8013802:	4b2b      	ldr	r3, [pc, #172]	; (80138b0 <tcp_fasttmr+0xc0>)
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013808:	e048      	b.n	801389c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	7f9a      	ldrb	r2, [r3, #30]
 801380e:	4b27      	ldr	r3, [pc, #156]	; (80138ac <tcp_fasttmr+0xbc>)
 8013810:	781b      	ldrb	r3, [r3, #0]
 8013812:	429a      	cmp	r2, r3
 8013814:	d03f      	beq.n	8013896 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8013816:	4b25      	ldr	r3, [pc, #148]	; (80138ac <tcp_fasttmr+0xbc>)
 8013818:	781a      	ldrb	r2, [r3, #0]
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	8b5b      	ldrh	r3, [r3, #26]
 8013822:	f003 0301 	and.w	r3, r3, #1
 8013826:	2b00      	cmp	r3, #0
 8013828:	d010      	beq.n	801384c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	8b5b      	ldrh	r3, [r3, #26]
 801382e:	f043 0302 	orr.w	r3, r3, #2
 8013832:	b29a      	uxth	r2, r3
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8013838:	6878      	ldr	r0, [r7, #4]
 801383a:	f003 fff5 	bl	8017828 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	8b5b      	ldrh	r3, [r3, #26]
 8013842:	f023 0303 	bic.w	r3, r3, #3
 8013846:	b29a      	uxth	r2, r3
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	8b5b      	ldrh	r3, [r3, #26]
 8013850:	f003 0308 	and.w	r3, r3, #8
 8013854:	2b00      	cmp	r3, #0
 8013856:	d009      	beq.n	801386c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	8b5b      	ldrh	r3, [r3, #26]
 801385c:	f023 0308 	bic.w	r3, r3, #8
 8013860:	b29a      	uxth	r2, r3
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8013866:	6878      	ldr	r0, [r7, #4]
 8013868:	f7ff f93e 	bl	8012ae8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	68db      	ldr	r3, [r3, #12]
 8013870:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013876:	2b00      	cmp	r3, #0
 8013878:	d00a      	beq.n	8013890 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801387a:	4b0e      	ldr	r3, [pc, #56]	; (80138b4 <tcp_fasttmr+0xc4>)
 801387c:	2200      	movs	r2, #0
 801387e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8013880:	6878      	ldr	r0, [r7, #4]
 8013882:	f000 f819 	bl	80138b8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8013886:	4b0b      	ldr	r3, [pc, #44]	; (80138b4 <tcp_fasttmr+0xc4>)
 8013888:	781b      	ldrb	r3, [r3, #0]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d000      	beq.n	8013890 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801388e:	e7b8      	b.n	8013802 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8013890:	683b      	ldr	r3, [r7, #0]
 8013892:	607b      	str	r3, [r7, #4]
 8013894:	e002      	b.n	801389c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	68db      	ldr	r3, [r3, #12]
 801389a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d1b3      	bne.n	801380a <tcp_fasttmr+0x1a>
    }
  }
}
 80138a2:	bf00      	nop
 80138a4:	bf00      	nop
 80138a6:	3708      	adds	r7, #8
 80138a8:	46bd      	mov	sp, r7
 80138aa:	bd80      	pop	{r7, pc}
 80138ac:	200110a2 	.word	0x200110a2
 80138b0:	20011098 	.word	0x20011098
 80138b4:	200110a0 	.word	0x200110a0

080138b8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80138b8:	b590      	push	{r4, r7, lr}
 80138ba:	b085      	sub	sp, #20
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d109      	bne.n	80138da <tcp_process_refused_data+0x22>
 80138c6:	4b37      	ldr	r3, [pc, #220]	; (80139a4 <tcp_process_refused_data+0xec>)
 80138c8:	f240 6209 	movw	r2, #1545	; 0x609
 80138cc:	4936      	ldr	r1, [pc, #216]	; (80139a8 <tcp_process_refused_data+0xf0>)
 80138ce:	4837      	ldr	r0, [pc, #220]	; (80139ac <tcp_process_refused_data+0xf4>)
 80138d0:	f008 f860 	bl	801b994 <iprintf>
 80138d4:	f06f 030f 	mvn.w	r3, #15
 80138d8:	e060      	b.n	801399c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80138de:	7b5b      	ldrb	r3, [r3, #13]
 80138e0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80138e6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	2200      	movs	r2, #0
 80138ec:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d00b      	beq.n	8013910 <tcp_process_refused_data+0x58>
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	6918      	ldr	r0, [r3, #16]
 8013902:	2300      	movs	r3, #0
 8013904:	68ba      	ldr	r2, [r7, #8]
 8013906:	6879      	ldr	r1, [r7, #4]
 8013908:	47a0      	blx	r4
 801390a:	4603      	mov	r3, r0
 801390c:	73fb      	strb	r3, [r7, #15]
 801390e:	e007      	b.n	8013920 <tcp_process_refused_data+0x68>
 8013910:	2300      	movs	r3, #0
 8013912:	68ba      	ldr	r2, [r7, #8]
 8013914:	6879      	ldr	r1, [r7, #4]
 8013916:	2000      	movs	r0, #0
 8013918:	f000 f8a4 	bl	8013a64 <tcp_recv_null>
 801391c:	4603      	mov	r3, r0
 801391e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8013920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d12a      	bne.n	801397e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8013928:	7bbb      	ldrb	r3, [r7, #14]
 801392a:	f003 0320 	and.w	r3, r3, #32
 801392e:	2b00      	cmp	r3, #0
 8013930:	d033      	beq.n	801399a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013936:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801393a:	d005      	beq.n	8013948 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013940:	3301      	adds	r3, #1
 8013942:	b29a      	uxth	r2, r3
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801394e:	2b00      	cmp	r3, #0
 8013950:	d00b      	beq.n	801396a <tcp_process_refused_data+0xb2>
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	6918      	ldr	r0, [r3, #16]
 801395c:	2300      	movs	r3, #0
 801395e:	2200      	movs	r2, #0
 8013960:	6879      	ldr	r1, [r7, #4]
 8013962:	47a0      	blx	r4
 8013964:	4603      	mov	r3, r0
 8013966:	73fb      	strb	r3, [r7, #15]
 8013968:	e001      	b.n	801396e <tcp_process_refused_data+0xb6>
 801396a:	2300      	movs	r3, #0
 801396c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801396e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013972:	f113 0f0d 	cmn.w	r3, #13
 8013976:	d110      	bne.n	801399a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8013978:	f06f 030c 	mvn.w	r3, #12
 801397c:	e00e      	b.n	801399c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801397e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013982:	f113 0f0d 	cmn.w	r3, #13
 8013986:	d102      	bne.n	801398e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8013988:	f06f 030c 	mvn.w	r3, #12
 801398c:	e006      	b.n	801399c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	68ba      	ldr	r2, [r7, #8]
 8013992:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8013994:	f06f 0304 	mvn.w	r3, #4
 8013998:	e000      	b.n	801399c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801399a:	2300      	movs	r3, #0
}
 801399c:	4618      	mov	r0, r3
 801399e:	3714      	adds	r7, #20
 80139a0:	46bd      	mov	sp, r7
 80139a2:	bd90      	pop	{r4, r7, pc}
 80139a4:	0801e6b0 	.word	0x0801e6b0
 80139a8:	0801ebc0 	.word	0x0801ebc0
 80139ac:	0801e6f4 	.word	0x0801e6f4

080139b0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b084      	sub	sp, #16
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80139b8:	e007      	b.n	80139ca <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80139c0:	6878      	ldr	r0, [r7, #4]
 80139c2:	f000 f80a 	bl	80139da <tcp_seg_free>
    seg = next;
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d1f4      	bne.n	80139ba <tcp_segs_free+0xa>
  }
}
 80139d0:	bf00      	nop
 80139d2:	bf00      	nop
 80139d4:	3710      	adds	r7, #16
 80139d6:	46bd      	mov	sp, r7
 80139d8:	bd80      	pop	{r7, pc}

080139da <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80139da:	b580      	push	{r7, lr}
 80139dc:	b082      	sub	sp, #8
 80139de:	af00      	add	r7, sp, #0
 80139e0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d00c      	beq.n	8013a02 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	685b      	ldr	r3, [r3, #4]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d004      	beq.n	80139fa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	685b      	ldr	r3, [r3, #4]
 80139f4:	4618      	mov	r0, r3
 80139f6:	f7fe fc37 	bl	8012268 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80139fa:	6879      	ldr	r1, [r7, #4]
 80139fc:	2003      	movs	r0, #3
 80139fe:	f7fd fd5d 	bl	80114bc <memp_free>
  }
}
 8013a02:	bf00      	nop
 8013a04:	3708      	adds	r7, #8
 8013a06:	46bd      	mov	sp, r7
 8013a08:	bd80      	pop	{r7, pc}
	...

08013a0c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8013a0c:	b580      	push	{r7, lr}
 8013a0e:	b084      	sub	sp, #16
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d106      	bne.n	8013a28 <tcp_seg_copy+0x1c>
 8013a1a:	4b0f      	ldr	r3, [pc, #60]	; (8013a58 <tcp_seg_copy+0x4c>)
 8013a1c:	f240 6282 	movw	r2, #1666	; 0x682
 8013a20:	490e      	ldr	r1, [pc, #56]	; (8013a5c <tcp_seg_copy+0x50>)
 8013a22:	480f      	ldr	r0, [pc, #60]	; (8013a60 <tcp_seg_copy+0x54>)
 8013a24:	f007 ffb6 	bl	801b994 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8013a28:	2003      	movs	r0, #3
 8013a2a:	f7fd fcd1 	bl	80113d0 <memp_malloc>
 8013a2e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d101      	bne.n	8013a3a <tcp_seg_copy+0x2e>
    return NULL;
 8013a36:	2300      	movs	r3, #0
 8013a38:	e00a      	b.n	8013a50 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8013a3a:	2210      	movs	r2, #16
 8013a3c:	6879      	ldr	r1, [r7, #4]
 8013a3e:	68f8      	ldr	r0, [r7, #12]
 8013a40:	f007 ff92 	bl	801b968 <memcpy>
  pbuf_ref(cseg->p);
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	685b      	ldr	r3, [r3, #4]
 8013a48:	4618      	mov	r0, r3
 8013a4a:	f7fe fcb3 	bl	80123b4 <pbuf_ref>
  return cseg;
 8013a4e:	68fb      	ldr	r3, [r7, #12]
}
 8013a50:	4618      	mov	r0, r3
 8013a52:	3710      	adds	r7, #16
 8013a54:	46bd      	mov	sp, r7
 8013a56:	bd80      	pop	{r7, pc}
 8013a58:	0801e6b0 	.word	0x0801e6b0
 8013a5c:	0801ec04 	.word	0x0801ec04
 8013a60:	0801e6f4 	.word	0x0801e6f4

08013a64 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8013a64:	b580      	push	{r7, lr}
 8013a66:	b084      	sub	sp, #16
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	60f8      	str	r0, [r7, #12]
 8013a6c:	60b9      	str	r1, [r7, #8]
 8013a6e:	607a      	str	r2, [r7, #4]
 8013a70:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8013a72:	68bb      	ldr	r3, [r7, #8]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d109      	bne.n	8013a8c <tcp_recv_null+0x28>
 8013a78:	4b12      	ldr	r3, [pc, #72]	; (8013ac4 <tcp_recv_null+0x60>)
 8013a7a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013a7e:	4912      	ldr	r1, [pc, #72]	; (8013ac8 <tcp_recv_null+0x64>)
 8013a80:	4812      	ldr	r0, [pc, #72]	; (8013acc <tcp_recv_null+0x68>)
 8013a82:	f007 ff87 	bl	801b994 <iprintf>
 8013a86:	f06f 030f 	mvn.w	r3, #15
 8013a8a:	e016      	b.n	8013aba <tcp_recv_null+0x56>

  if (p != NULL) {
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d009      	beq.n	8013aa6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	891b      	ldrh	r3, [r3, #8]
 8013a96:	4619      	mov	r1, r3
 8013a98:	68b8      	ldr	r0, [r7, #8]
 8013a9a:	f7ff fad3 	bl	8013044 <tcp_recved>
    pbuf_free(p);
 8013a9e:	6878      	ldr	r0, [r7, #4]
 8013aa0:	f7fe fbe2 	bl	8012268 <pbuf_free>
 8013aa4:	e008      	b.n	8013ab8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8013aa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d104      	bne.n	8013ab8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8013aae:	68b8      	ldr	r0, [r7, #8]
 8013ab0:	f7ff f884 	bl	8012bbc <tcp_close>
 8013ab4:	4603      	mov	r3, r0
 8013ab6:	e000      	b.n	8013aba <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8013ab8:	2300      	movs	r3, #0
}
 8013aba:	4618      	mov	r0, r3
 8013abc:	3710      	adds	r7, #16
 8013abe:	46bd      	mov	sp, r7
 8013ac0:	bd80      	pop	{r7, pc}
 8013ac2:	bf00      	nop
 8013ac4:	0801e6b0 	.word	0x0801e6b0
 8013ac8:	0801ec20 	.word	0x0801ec20
 8013acc:	0801e6f4 	.word	0x0801e6f4

08013ad0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b086      	sub	sp, #24
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	4603      	mov	r3, r0
 8013ad8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8013ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	db01      	blt.n	8013ae6 <tcp_kill_prio+0x16>
 8013ae2:	79fb      	ldrb	r3, [r7, #7]
 8013ae4:	e000      	b.n	8013ae8 <tcp_kill_prio+0x18>
 8013ae6:	237f      	movs	r3, #127	; 0x7f
 8013ae8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8013aea:	7afb      	ldrb	r3, [r7, #11]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d034      	beq.n	8013b5a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013af0:	7afb      	ldrb	r3, [r7, #11]
 8013af2:	3b01      	subs	r3, #1
 8013af4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8013af6:	2300      	movs	r3, #0
 8013af8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013afa:	2300      	movs	r3, #0
 8013afc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013afe:	4b19      	ldr	r3, [pc, #100]	; (8013b64 <tcp_kill_prio+0x94>)
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	617b      	str	r3, [r7, #20]
 8013b04:	e01f      	b.n	8013b46 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8013b06:	697b      	ldr	r3, [r7, #20]
 8013b08:	7d5b      	ldrb	r3, [r3, #21]
 8013b0a:	7afa      	ldrb	r2, [r7, #11]
 8013b0c:	429a      	cmp	r2, r3
 8013b0e:	d80c      	bhi.n	8013b2a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013b10:	697b      	ldr	r3, [r7, #20]
 8013b12:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8013b14:	7afa      	ldrb	r2, [r7, #11]
 8013b16:	429a      	cmp	r2, r3
 8013b18:	d112      	bne.n	8013b40 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013b1a:	4b13      	ldr	r3, [pc, #76]	; (8013b68 <tcp_kill_prio+0x98>)
 8013b1c:	681a      	ldr	r2, [r3, #0]
 8013b1e:	697b      	ldr	r3, [r7, #20]
 8013b20:	6a1b      	ldr	r3, [r3, #32]
 8013b22:	1ad3      	subs	r3, r2, r3
 8013b24:	68fa      	ldr	r2, [r7, #12]
 8013b26:	429a      	cmp	r2, r3
 8013b28:	d80a      	bhi.n	8013b40 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8013b2a:	4b0f      	ldr	r3, [pc, #60]	; (8013b68 <tcp_kill_prio+0x98>)
 8013b2c:	681a      	ldr	r2, [r3, #0]
 8013b2e:	697b      	ldr	r3, [r7, #20]
 8013b30:	6a1b      	ldr	r3, [r3, #32]
 8013b32:	1ad3      	subs	r3, r2, r3
 8013b34:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8013b36:	697b      	ldr	r3, [r7, #20]
 8013b38:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8013b3a:	697b      	ldr	r3, [r7, #20]
 8013b3c:	7d5b      	ldrb	r3, [r3, #21]
 8013b3e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b40:	697b      	ldr	r3, [r7, #20]
 8013b42:	68db      	ldr	r3, [r3, #12]
 8013b44:	617b      	str	r3, [r7, #20]
 8013b46:	697b      	ldr	r3, [r7, #20]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d1dc      	bne.n	8013b06 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8013b4c:	693b      	ldr	r3, [r7, #16]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d004      	beq.n	8013b5c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013b52:	6938      	ldr	r0, [r7, #16]
 8013b54:	f7ff f978 	bl	8012e48 <tcp_abort>
 8013b58:	e000      	b.n	8013b5c <tcp_kill_prio+0x8c>
    return;
 8013b5a:	bf00      	nop
  }
}
 8013b5c:	3718      	adds	r7, #24
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	bd80      	pop	{r7, pc}
 8013b62:	bf00      	nop
 8013b64:	20011098 	.word	0x20011098
 8013b68:	2001108c 	.word	0x2001108c

08013b6c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	b086      	sub	sp, #24
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	4603      	mov	r3, r0
 8013b74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8013b76:	79fb      	ldrb	r3, [r7, #7]
 8013b78:	2b08      	cmp	r3, #8
 8013b7a:	d009      	beq.n	8013b90 <tcp_kill_state+0x24>
 8013b7c:	79fb      	ldrb	r3, [r7, #7]
 8013b7e:	2b09      	cmp	r3, #9
 8013b80:	d006      	beq.n	8013b90 <tcp_kill_state+0x24>
 8013b82:	4b1a      	ldr	r3, [pc, #104]	; (8013bec <tcp_kill_state+0x80>)
 8013b84:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8013b88:	4919      	ldr	r1, [pc, #100]	; (8013bf0 <tcp_kill_state+0x84>)
 8013b8a:	481a      	ldr	r0, [pc, #104]	; (8013bf4 <tcp_kill_state+0x88>)
 8013b8c:	f007 ff02 	bl	801b994 <iprintf>

  inactivity = 0;
 8013b90:	2300      	movs	r3, #0
 8013b92:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013b94:	2300      	movs	r3, #0
 8013b96:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b98:	4b17      	ldr	r3, [pc, #92]	; (8013bf8 <tcp_kill_state+0x8c>)
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	617b      	str	r3, [r7, #20]
 8013b9e:	e017      	b.n	8013bd0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8013ba0:	697b      	ldr	r3, [r7, #20]
 8013ba2:	7d1b      	ldrb	r3, [r3, #20]
 8013ba4:	79fa      	ldrb	r2, [r7, #7]
 8013ba6:	429a      	cmp	r2, r3
 8013ba8:	d10f      	bne.n	8013bca <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013baa:	4b14      	ldr	r3, [pc, #80]	; (8013bfc <tcp_kill_state+0x90>)
 8013bac:	681a      	ldr	r2, [r3, #0]
 8013bae:	697b      	ldr	r3, [r7, #20]
 8013bb0:	6a1b      	ldr	r3, [r3, #32]
 8013bb2:	1ad3      	subs	r3, r2, r3
 8013bb4:	68fa      	ldr	r2, [r7, #12]
 8013bb6:	429a      	cmp	r2, r3
 8013bb8:	d807      	bhi.n	8013bca <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8013bba:	4b10      	ldr	r3, [pc, #64]	; (8013bfc <tcp_kill_state+0x90>)
 8013bbc:	681a      	ldr	r2, [r3, #0]
 8013bbe:	697b      	ldr	r3, [r7, #20]
 8013bc0:	6a1b      	ldr	r3, [r3, #32]
 8013bc2:	1ad3      	subs	r3, r2, r3
 8013bc4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8013bc6:	697b      	ldr	r3, [r7, #20]
 8013bc8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013bca:	697b      	ldr	r3, [r7, #20]
 8013bcc:	68db      	ldr	r3, [r3, #12]
 8013bce:	617b      	str	r3, [r7, #20]
 8013bd0:	697b      	ldr	r3, [r7, #20]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d1e4      	bne.n	8013ba0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8013bd6:	693b      	ldr	r3, [r7, #16]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d003      	beq.n	8013be4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8013bdc:	2100      	movs	r1, #0
 8013bde:	6938      	ldr	r0, [r7, #16]
 8013be0:	f7ff f874 	bl	8012ccc <tcp_abandon>
  }
}
 8013be4:	bf00      	nop
 8013be6:	3718      	adds	r7, #24
 8013be8:	46bd      	mov	sp, r7
 8013bea:	bd80      	pop	{r7, pc}
 8013bec:	0801e6b0 	.word	0x0801e6b0
 8013bf0:	0801ec3c 	.word	0x0801ec3c
 8013bf4:	0801e6f4 	.word	0x0801e6f4
 8013bf8:	20011098 	.word	0x20011098
 8013bfc:	2001108c 	.word	0x2001108c

08013c00 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b084      	sub	sp, #16
 8013c04:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8013c06:	2300      	movs	r3, #0
 8013c08:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013c0e:	4b12      	ldr	r3, [pc, #72]	; (8013c58 <tcp_kill_timewait+0x58>)
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	60fb      	str	r3, [r7, #12]
 8013c14:	e012      	b.n	8013c3c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013c16:	4b11      	ldr	r3, [pc, #68]	; (8013c5c <tcp_kill_timewait+0x5c>)
 8013c18:	681a      	ldr	r2, [r3, #0]
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	6a1b      	ldr	r3, [r3, #32]
 8013c1e:	1ad3      	subs	r3, r2, r3
 8013c20:	687a      	ldr	r2, [r7, #4]
 8013c22:	429a      	cmp	r2, r3
 8013c24:	d807      	bhi.n	8013c36 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8013c26:	4b0d      	ldr	r3, [pc, #52]	; (8013c5c <tcp_kill_timewait+0x5c>)
 8013c28:	681a      	ldr	r2, [r3, #0]
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	6a1b      	ldr	r3, [r3, #32]
 8013c2e:	1ad3      	subs	r3, r2, r3
 8013c30:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	68db      	ldr	r3, [r3, #12]
 8013c3a:	60fb      	str	r3, [r7, #12]
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d1e9      	bne.n	8013c16 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8013c42:	68bb      	ldr	r3, [r7, #8]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d002      	beq.n	8013c4e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013c48:	68b8      	ldr	r0, [r7, #8]
 8013c4a:	f7ff f8fd 	bl	8012e48 <tcp_abort>
  }
}
 8013c4e:	bf00      	nop
 8013c50:	3710      	adds	r7, #16
 8013c52:	46bd      	mov	sp, r7
 8013c54:	bd80      	pop	{r7, pc}
 8013c56:	bf00      	nop
 8013c58:	2001109c 	.word	0x2001109c
 8013c5c:	2001108c 	.word	0x2001108c

08013c60 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8013c60:	b580      	push	{r7, lr}
 8013c62:	b082      	sub	sp, #8
 8013c64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8013c66:	4b10      	ldr	r3, [pc, #64]	; (8013ca8 <tcp_handle_closepend+0x48>)
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013c6c:	e014      	b.n	8013c98 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	68db      	ldr	r3, [r3, #12]
 8013c72:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	8b5b      	ldrh	r3, [r3, #26]
 8013c78:	f003 0308 	and.w	r3, r3, #8
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d009      	beq.n	8013c94 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	8b5b      	ldrh	r3, [r3, #26]
 8013c84:	f023 0308 	bic.w	r3, r3, #8
 8013c88:	b29a      	uxth	r2, r3
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8013c8e:	6878      	ldr	r0, [r7, #4]
 8013c90:	f7fe ff2a 	bl	8012ae8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8013c94:	683b      	ldr	r3, [r7, #0]
 8013c96:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d1e7      	bne.n	8013c6e <tcp_handle_closepend+0xe>
  }
}
 8013c9e:	bf00      	nop
 8013ca0:	bf00      	nop
 8013ca2:	3708      	adds	r7, #8
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	bd80      	pop	{r7, pc}
 8013ca8:	20011098 	.word	0x20011098

08013cac <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b084      	sub	sp, #16
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	4603      	mov	r3, r0
 8013cb4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013cb6:	2001      	movs	r0, #1
 8013cb8:	f7fd fb8a 	bl	80113d0 <memp_malloc>
 8013cbc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d126      	bne.n	8013d12 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8013cc4:	f7ff ffcc 	bl	8013c60 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013cc8:	f7ff ff9a 	bl	8013c00 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013ccc:	2001      	movs	r0, #1
 8013cce:	f7fd fb7f 	bl	80113d0 <memp_malloc>
 8013cd2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d11b      	bne.n	8013d12 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013cda:	2009      	movs	r0, #9
 8013cdc:	f7ff ff46 	bl	8013b6c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013ce0:	2001      	movs	r0, #1
 8013ce2:	f7fd fb75 	bl	80113d0 <memp_malloc>
 8013ce6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d111      	bne.n	8013d12 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013cee:	2008      	movs	r0, #8
 8013cf0:	f7ff ff3c 	bl	8013b6c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013cf4:	2001      	movs	r0, #1
 8013cf6:	f7fd fb6b 	bl	80113d0 <memp_malloc>
 8013cfa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d107      	bne.n	8013d12 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8013d02:	79fb      	ldrb	r3, [r7, #7]
 8013d04:	4618      	mov	r0, r3
 8013d06:	f7ff fee3 	bl	8013ad0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013d0a:	2001      	movs	r0, #1
 8013d0c:	f7fd fb60 	bl	80113d0 <memp_malloc>
 8013d10:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d03f      	beq.n	8013d98 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013d18:	229c      	movs	r2, #156	; 0x9c
 8013d1a:	2100      	movs	r1, #0
 8013d1c:	68f8      	ldr	r0, [r7, #12]
 8013d1e:	f007 fe31 	bl	801b984 <memset>
    pcb->prio = prio;
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	79fa      	ldrb	r2, [r7, #7]
 8013d26:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013d2e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8013d38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	22ff      	movs	r2, #255	; 0xff
 8013d46:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013d4e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	2206      	movs	r2, #6
 8013d54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	2206      	movs	r2, #6
 8013d5c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d64:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	2201      	movs	r2, #1
 8013d6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8013d6e:	4b0d      	ldr	r3, [pc, #52]	; (8013da4 <tcp_alloc+0xf8>)
 8013d70:	681a      	ldr	r2, [r3, #0]
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8013d76:	4b0c      	ldr	r3, [pc, #48]	; (8013da8 <tcp_alloc+0xfc>)
 8013d78:	781a      	ldrb	r2, [r3, #0]
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013d84:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	4a08      	ldr	r2, [pc, #32]	; (8013dac <tcp_alloc+0x100>)
 8013d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	4a07      	ldr	r2, [pc, #28]	; (8013db0 <tcp_alloc+0x104>)
 8013d94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8013d98:	68fb      	ldr	r3, [r7, #12]
}
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	3710      	adds	r7, #16
 8013d9e:	46bd      	mov	sp, r7
 8013da0:	bd80      	pop	{r7, pc}
 8013da2:	bf00      	nop
 8013da4:	2001108c 	.word	0x2001108c
 8013da8:	200110a2 	.word	0x200110a2
 8013dac:	08013a65 	.word	0x08013a65
 8013db0:	006ddd00 	.word	0x006ddd00

08013db4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b084      	sub	sp, #16
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	4603      	mov	r3, r0
 8013dbc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8013dbe:	2040      	movs	r0, #64	; 0x40
 8013dc0:	f7ff ff74 	bl	8013cac <tcp_alloc>
 8013dc4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8013dc6:	68fb      	ldr	r3, [r7, #12]
}
 8013dc8:	4618      	mov	r0, r3
 8013dca:	3710      	adds	r7, #16
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	bd80      	pop	{r7, pc}

08013dd0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8013dd0:	b480      	push	{r7}
 8013dd2:	b083      	sub	sp, #12
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
 8013dd8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d002      	beq.n	8013de6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	683a      	ldr	r2, [r7, #0]
 8013de4:	611a      	str	r2, [r3, #16]
  }
}
 8013de6:	bf00      	nop
 8013de8:	370c      	adds	r7, #12
 8013dea:	46bd      	mov	sp, r7
 8013dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df0:	4770      	bx	lr
	...

08013df4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b082      	sub	sp, #8
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
 8013dfc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d00e      	beq.n	8013e22 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	7d1b      	ldrb	r3, [r3, #20]
 8013e08:	2b01      	cmp	r3, #1
 8013e0a:	d106      	bne.n	8013e1a <tcp_recv+0x26>
 8013e0c:	4b07      	ldr	r3, [pc, #28]	; (8013e2c <tcp_recv+0x38>)
 8013e0e:	f240 72df 	movw	r2, #2015	; 0x7df
 8013e12:	4907      	ldr	r1, [pc, #28]	; (8013e30 <tcp_recv+0x3c>)
 8013e14:	4807      	ldr	r0, [pc, #28]	; (8013e34 <tcp_recv+0x40>)
 8013e16:	f007 fdbd 	bl	801b994 <iprintf>
    pcb->recv = recv;
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	683a      	ldr	r2, [r7, #0]
 8013e1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8013e22:	bf00      	nop
 8013e24:	3708      	adds	r7, #8
 8013e26:	46bd      	mov	sp, r7
 8013e28:	bd80      	pop	{r7, pc}
 8013e2a:	bf00      	nop
 8013e2c:	0801e6b0 	.word	0x0801e6b0
 8013e30:	0801ec4c 	.word	0x0801ec4c
 8013e34:	0801e6f4 	.word	0x0801e6f4

08013e38 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b082      	sub	sp, #8
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
 8013e40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d00e      	beq.n	8013e66 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	7d1b      	ldrb	r3, [r3, #20]
 8013e4c:	2b01      	cmp	r3, #1
 8013e4e:	d106      	bne.n	8013e5e <tcp_sent+0x26>
 8013e50:	4b07      	ldr	r3, [pc, #28]	; (8013e70 <tcp_sent+0x38>)
 8013e52:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8013e56:	4907      	ldr	r1, [pc, #28]	; (8013e74 <tcp_sent+0x3c>)
 8013e58:	4807      	ldr	r0, [pc, #28]	; (8013e78 <tcp_sent+0x40>)
 8013e5a:	f007 fd9b 	bl	801b994 <iprintf>
    pcb->sent = sent;
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	683a      	ldr	r2, [r7, #0]
 8013e62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8013e66:	bf00      	nop
 8013e68:	3708      	adds	r7, #8
 8013e6a:	46bd      	mov	sp, r7
 8013e6c:	bd80      	pop	{r7, pc}
 8013e6e:	bf00      	nop
 8013e70:	0801e6b0 	.word	0x0801e6b0
 8013e74:	0801ec74 	.word	0x0801ec74
 8013e78:	0801e6f4 	.word	0x0801e6f4

08013e7c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b082      	sub	sp, #8
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
 8013e84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d00e      	beq.n	8013eaa <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	7d1b      	ldrb	r3, [r3, #20]
 8013e90:	2b01      	cmp	r3, #1
 8013e92:	d106      	bne.n	8013ea2 <tcp_err+0x26>
 8013e94:	4b07      	ldr	r3, [pc, #28]	; (8013eb4 <tcp_err+0x38>)
 8013e96:	f640 020d 	movw	r2, #2061	; 0x80d
 8013e9a:	4907      	ldr	r1, [pc, #28]	; (8013eb8 <tcp_err+0x3c>)
 8013e9c:	4807      	ldr	r0, [pc, #28]	; (8013ebc <tcp_err+0x40>)
 8013e9e:	f007 fd79 	bl	801b994 <iprintf>
    pcb->errf = err;
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	683a      	ldr	r2, [r7, #0]
 8013ea6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8013eaa:	bf00      	nop
 8013eac:	3708      	adds	r7, #8
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	bd80      	pop	{r7, pc}
 8013eb2:	bf00      	nop
 8013eb4:	0801e6b0 	.word	0x0801e6b0
 8013eb8:	0801ec9c 	.word	0x0801ec9c
 8013ebc:	0801e6f4 	.word	0x0801e6f4

08013ec0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8013ec0:	b480      	push	{r7}
 8013ec2:	b085      	sub	sp, #20
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	6078      	str	r0, [r7, #4]
 8013ec8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d008      	beq.n	8013ee2 <tcp_accept+0x22>
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	7d1b      	ldrb	r3, [r3, #20]
 8013ed4:	2b01      	cmp	r3, #1
 8013ed6:	d104      	bne.n	8013ee2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	683a      	ldr	r2, [r7, #0]
 8013ee0:	619a      	str	r2, [r3, #24]
  }
}
 8013ee2:	bf00      	nop
 8013ee4:	3714      	adds	r7, #20
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eec:	4770      	bx	lr
	...

08013ef0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b084      	sub	sp, #16
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	60f8      	str	r0, [r7, #12]
 8013ef8:	60b9      	str	r1, [r7, #8]
 8013efa:	4613      	mov	r3, r2
 8013efc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d107      	bne.n	8013f14 <tcp_poll+0x24>
 8013f04:	4b0e      	ldr	r3, [pc, #56]	; (8013f40 <tcp_poll+0x50>)
 8013f06:	f640 023d 	movw	r2, #2109	; 0x83d
 8013f0a:	490e      	ldr	r1, [pc, #56]	; (8013f44 <tcp_poll+0x54>)
 8013f0c:	480e      	ldr	r0, [pc, #56]	; (8013f48 <tcp_poll+0x58>)
 8013f0e:	f007 fd41 	bl	801b994 <iprintf>
 8013f12:	e011      	b.n	8013f38 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	7d1b      	ldrb	r3, [r3, #20]
 8013f18:	2b01      	cmp	r3, #1
 8013f1a:	d106      	bne.n	8013f2a <tcp_poll+0x3a>
 8013f1c:	4b08      	ldr	r3, [pc, #32]	; (8013f40 <tcp_poll+0x50>)
 8013f1e:	f640 023e 	movw	r2, #2110	; 0x83e
 8013f22:	490a      	ldr	r1, [pc, #40]	; (8013f4c <tcp_poll+0x5c>)
 8013f24:	4808      	ldr	r0, [pc, #32]	; (8013f48 <tcp_poll+0x58>)
 8013f26:	f007 fd35 	bl	801b994 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	68ba      	ldr	r2, [r7, #8]
 8013f2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	79fa      	ldrb	r2, [r7, #7]
 8013f36:	775a      	strb	r2, [r3, #29]
}
 8013f38:	3710      	adds	r7, #16
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	bd80      	pop	{r7, pc}
 8013f3e:	bf00      	nop
 8013f40:	0801e6b0 	.word	0x0801e6b0
 8013f44:	0801ecc4 	.word	0x0801ecc4
 8013f48:	0801e6f4 	.word	0x0801e6f4
 8013f4c:	0801ecdc 	.word	0x0801ecdc

08013f50 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b082      	sub	sp, #8
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d107      	bne.n	8013f6e <tcp_pcb_purge+0x1e>
 8013f5e:	4b21      	ldr	r3, [pc, #132]	; (8013fe4 <tcp_pcb_purge+0x94>)
 8013f60:	f640 0251 	movw	r2, #2129	; 0x851
 8013f64:	4920      	ldr	r1, [pc, #128]	; (8013fe8 <tcp_pcb_purge+0x98>)
 8013f66:	4821      	ldr	r0, [pc, #132]	; (8013fec <tcp_pcb_purge+0x9c>)
 8013f68:	f007 fd14 	bl	801b994 <iprintf>
 8013f6c:	e037      	b.n	8013fde <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	7d1b      	ldrb	r3, [r3, #20]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d033      	beq.n	8013fde <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013f7a:	2b0a      	cmp	r3, #10
 8013f7c:	d02f      	beq.n	8013fde <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8013f82:	2b01      	cmp	r3, #1
 8013f84:	d02b      	beq.n	8013fde <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d007      	beq.n	8013f9e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013f92:	4618      	mov	r0, r3
 8013f94:	f7fe f968 	bl	8012268 <pbuf_free>
      pcb->refused_data = NULL;
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d002      	beq.n	8013fac <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8013fa6:	6878      	ldr	r0, [r7, #4]
 8013fa8:	f000 f986 	bl	80142b8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013fb2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fb8:	4618      	mov	r0, r3
 8013fba:	f7ff fcf9 	bl	80139b0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	f7ff fcf4 	bl	80139b0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	2200      	movs	r2, #0
 8013fcc:	66da      	str	r2, [r3, #108]	; 0x6c
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	2200      	movs	r2, #0
 8013fda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8013fde:	3708      	adds	r7, #8
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd80      	pop	{r7, pc}
 8013fe4:	0801e6b0 	.word	0x0801e6b0
 8013fe8:	0801ecfc 	.word	0x0801ecfc
 8013fec:	0801e6f4 	.word	0x0801e6f4

08013ff0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b084      	sub	sp, #16
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	6078      	str	r0, [r7, #4]
 8013ff8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013ffa:	683b      	ldr	r3, [r7, #0]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d106      	bne.n	801400e <tcp_pcb_remove+0x1e>
 8014000:	4b3e      	ldr	r3, [pc, #248]	; (80140fc <tcp_pcb_remove+0x10c>)
 8014002:	f640 0283 	movw	r2, #2179	; 0x883
 8014006:	493e      	ldr	r1, [pc, #248]	; (8014100 <tcp_pcb_remove+0x110>)
 8014008:	483e      	ldr	r0, [pc, #248]	; (8014104 <tcp_pcb_remove+0x114>)
 801400a:	f007 fcc3 	bl	801b994 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	2b00      	cmp	r3, #0
 8014012:	d106      	bne.n	8014022 <tcp_pcb_remove+0x32>
 8014014:	4b39      	ldr	r3, [pc, #228]	; (80140fc <tcp_pcb_remove+0x10c>)
 8014016:	f640 0284 	movw	r2, #2180	; 0x884
 801401a:	493b      	ldr	r1, [pc, #236]	; (8014108 <tcp_pcb_remove+0x118>)
 801401c:	4839      	ldr	r0, [pc, #228]	; (8014104 <tcp_pcb_remove+0x114>)
 801401e:	f007 fcb9 	bl	801b994 <iprintf>

  TCP_RMV(pcblist, pcb);
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	683a      	ldr	r2, [r7, #0]
 8014028:	429a      	cmp	r2, r3
 801402a:	d105      	bne.n	8014038 <tcp_pcb_remove+0x48>
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	68da      	ldr	r2, [r3, #12]
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	601a      	str	r2, [r3, #0]
 8014036:	e013      	b.n	8014060 <tcp_pcb_remove+0x70>
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	60fb      	str	r3, [r7, #12]
 801403e:	e00c      	b.n	801405a <tcp_pcb_remove+0x6a>
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	68db      	ldr	r3, [r3, #12]
 8014044:	683a      	ldr	r2, [r7, #0]
 8014046:	429a      	cmp	r2, r3
 8014048:	d104      	bne.n	8014054 <tcp_pcb_remove+0x64>
 801404a:	683b      	ldr	r3, [r7, #0]
 801404c:	68da      	ldr	r2, [r3, #12]
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	60da      	str	r2, [r3, #12]
 8014052:	e005      	b.n	8014060 <tcp_pcb_remove+0x70>
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	68db      	ldr	r3, [r3, #12]
 8014058:	60fb      	str	r3, [r7, #12]
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d1ef      	bne.n	8014040 <tcp_pcb_remove+0x50>
 8014060:	683b      	ldr	r3, [r7, #0]
 8014062:	2200      	movs	r2, #0
 8014064:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8014066:	6838      	ldr	r0, [r7, #0]
 8014068:	f7ff ff72 	bl	8013f50 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801406c:	683b      	ldr	r3, [r7, #0]
 801406e:	7d1b      	ldrb	r3, [r3, #20]
 8014070:	2b0a      	cmp	r3, #10
 8014072:	d013      	beq.n	801409c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8014074:	683b      	ldr	r3, [r7, #0]
 8014076:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8014078:	2b01      	cmp	r3, #1
 801407a:	d00f      	beq.n	801409c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801407c:	683b      	ldr	r3, [r7, #0]
 801407e:	8b5b      	ldrh	r3, [r3, #26]
 8014080:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8014084:	2b00      	cmp	r3, #0
 8014086:	d009      	beq.n	801409c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8014088:	683b      	ldr	r3, [r7, #0]
 801408a:	8b5b      	ldrh	r3, [r3, #26]
 801408c:	f043 0302 	orr.w	r3, r3, #2
 8014090:	b29a      	uxth	r2, r3
 8014092:	683b      	ldr	r3, [r7, #0]
 8014094:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014096:	6838      	ldr	r0, [r7, #0]
 8014098:	f003 fbc6 	bl	8017828 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801409c:	683b      	ldr	r3, [r7, #0]
 801409e:	7d1b      	ldrb	r3, [r3, #20]
 80140a0:	2b01      	cmp	r3, #1
 80140a2:	d020      	beq.n	80140e6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80140a4:	683b      	ldr	r3, [r7, #0]
 80140a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d006      	beq.n	80140ba <tcp_pcb_remove+0xca>
 80140ac:	4b13      	ldr	r3, [pc, #76]	; (80140fc <tcp_pcb_remove+0x10c>)
 80140ae:	f640 0293 	movw	r2, #2195	; 0x893
 80140b2:	4916      	ldr	r1, [pc, #88]	; (801410c <tcp_pcb_remove+0x11c>)
 80140b4:	4813      	ldr	r0, [pc, #76]	; (8014104 <tcp_pcb_remove+0x114>)
 80140b6:	f007 fc6d 	bl	801b994 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80140ba:	683b      	ldr	r3, [r7, #0]
 80140bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d006      	beq.n	80140d0 <tcp_pcb_remove+0xe0>
 80140c2:	4b0e      	ldr	r3, [pc, #56]	; (80140fc <tcp_pcb_remove+0x10c>)
 80140c4:	f640 0294 	movw	r2, #2196	; 0x894
 80140c8:	4911      	ldr	r1, [pc, #68]	; (8014110 <tcp_pcb_remove+0x120>)
 80140ca:	480e      	ldr	r0, [pc, #56]	; (8014104 <tcp_pcb_remove+0x114>)
 80140cc:	f007 fc62 	bl	801b994 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80140d0:	683b      	ldr	r3, [r7, #0]
 80140d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d006      	beq.n	80140e6 <tcp_pcb_remove+0xf6>
 80140d8:	4b08      	ldr	r3, [pc, #32]	; (80140fc <tcp_pcb_remove+0x10c>)
 80140da:	f640 0296 	movw	r2, #2198	; 0x896
 80140de:	490d      	ldr	r1, [pc, #52]	; (8014114 <tcp_pcb_remove+0x124>)
 80140e0:	4808      	ldr	r0, [pc, #32]	; (8014104 <tcp_pcb_remove+0x114>)
 80140e2:	f007 fc57 	bl	801b994 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80140e6:	683b      	ldr	r3, [r7, #0]
 80140e8:	2200      	movs	r2, #0
 80140ea:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80140ec:	683b      	ldr	r3, [r7, #0]
 80140ee:	2200      	movs	r2, #0
 80140f0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80140f2:	bf00      	nop
 80140f4:	3710      	adds	r7, #16
 80140f6:	46bd      	mov	sp, r7
 80140f8:	bd80      	pop	{r7, pc}
 80140fa:	bf00      	nop
 80140fc:	0801e6b0 	.word	0x0801e6b0
 8014100:	0801ed18 	.word	0x0801ed18
 8014104:	0801e6f4 	.word	0x0801e6f4
 8014108:	0801ed34 	.word	0x0801ed34
 801410c:	0801ed54 	.word	0x0801ed54
 8014110:	0801ed6c 	.word	0x0801ed6c
 8014114:	0801ed88 	.word	0x0801ed88

08014118 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8014118:	b580      	push	{r7, lr}
 801411a:	b082      	sub	sp, #8
 801411c:	af00      	add	r7, sp, #0
 801411e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	2b00      	cmp	r3, #0
 8014124:	d106      	bne.n	8014134 <tcp_next_iss+0x1c>
 8014126:	4b0a      	ldr	r3, [pc, #40]	; (8014150 <tcp_next_iss+0x38>)
 8014128:	f640 02af 	movw	r2, #2223	; 0x8af
 801412c:	4909      	ldr	r1, [pc, #36]	; (8014154 <tcp_next_iss+0x3c>)
 801412e:	480a      	ldr	r0, [pc, #40]	; (8014158 <tcp_next_iss+0x40>)
 8014130:	f007 fc30 	bl	801b994 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8014134:	4b09      	ldr	r3, [pc, #36]	; (801415c <tcp_next_iss+0x44>)
 8014136:	681a      	ldr	r2, [r3, #0]
 8014138:	4b09      	ldr	r3, [pc, #36]	; (8014160 <tcp_next_iss+0x48>)
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	4413      	add	r3, r2
 801413e:	4a07      	ldr	r2, [pc, #28]	; (801415c <tcp_next_iss+0x44>)
 8014140:	6013      	str	r3, [r2, #0]
  return iss;
 8014142:	4b06      	ldr	r3, [pc, #24]	; (801415c <tcp_next_iss+0x44>)
 8014144:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8014146:	4618      	mov	r0, r3
 8014148:	3708      	adds	r7, #8
 801414a:	46bd      	mov	sp, r7
 801414c:	bd80      	pop	{r7, pc}
 801414e:	bf00      	nop
 8014150:	0801e6b0 	.word	0x0801e6b0
 8014154:	0801eda0 	.word	0x0801eda0
 8014158:	0801e6f4 	.word	0x0801e6f4
 801415c:	20000028 	.word	0x20000028
 8014160:	2001108c 	.word	0x2001108c

08014164 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8014164:	b580      	push	{r7, lr}
 8014166:	b086      	sub	sp, #24
 8014168:	af00      	add	r7, sp, #0
 801416a:	4603      	mov	r3, r0
 801416c:	60b9      	str	r1, [r7, #8]
 801416e:	607a      	str	r2, [r7, #4]
 8014170:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d106      	bne.n	8014186 <tcp_eff_send_mss_netif+0x22>
 8014178:	4b14      	ldr	r3, [pc, #80]	; (80141cc <tcp_eff_send_mss_netif+0x68>)
 801417a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801417e:	4914      	ldr	r1, [pc, #80]	; (80141d0 <tcp_eff_send_mss_netif+0x6c>)
 8014180:	4814      	ldr	r0, [pc, #80]	; (80141d4 <tcp_eff_send_mss_netif+0x70>)
 8014182:	f007 fc07 	bl	801b994 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8014186:	68bb      	ldr	r3, [r7, #8]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d101      	bne.n	8014190 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801418c:	89fb      	ldrh	r3, [r7, #14]
 801418e:	e019      	b.n	80141c4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8014190:	68bb      	ldr	r3, [r7, #8]
 8014192:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014194:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8014196:	8afb      	ldrh	r3, [r7, #22]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d012      	beq.n	80141c2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801419c:	2328      	movs	r3, #40	; 0x28
 801419e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80141a0:	8afa      	ldrh	r2, [r7, #22]
 80141a2:	8abb      	ldrh	r3, [r7, #20]
 80141a4:	429a      	cmp	r2, r3
 80141a6:	d904      	bls.n	80141b2 <tcp_eff_send_mss_netif+0x4e>
 80141a8:	8afa      	ldrh	r2, [r7, #22]
 80141aa:	8abb      	ldrh	r3, [r7, #20]
 80141ac:	1ad3      	subs	r3, r2, r3
 80141ae:	b29b      	uxth	r3, r3
 80141b0:	e000      	b.n	80141b4 <tcp_eff_send_mss_netif+0x50>
 80141b2:	2300      	movs	r3, #0
 80141b4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80141b6:	8a7a      	ldrh	r2, [r7, #18]
 80141b8:	89fb      	ldrh	r3, [r7, #14]
 80141ba:	4293      	cmp	r3, r2
 80141bc:	bf28      	it	cs
 80141be:	4613      	movcs	r3, r2
 80141c0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80141c2:	89fb      	ldrh	r3, [r7, #14]
}
 80141c4:	4618      	mov	r0, r3
 80141c6:	3718      	adds	r7, #24
 80141c8:	46bd      	mov	sp, r7
 80141ca:	bd80      	pop	{r7, pc}
 80141cc:	0801e6b0 	.word	0x0801e6b0
 80141d0:	0801edbc 	.word	0x0801edbc
 80141d4:	0801e6f4 	.word	0x0801e6f4

080141d8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b084      	sub	sp, #16
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
 80141e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80141e2:	683b      	ldr	r3, [r7, #0]
 80141e4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d119      	bne.n	8014220 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80141ec:	4b10      	ldr	r3, [pc, #64]	; (8014230 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80141ee:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80141f2:	4910      	ldr	r1, [pc, #64]	; (8014234 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80141f4:	4810      	ldr	r0, [pc, #64]	; (8014238 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80141f6:	f007 fbcd 	bl	801b994 <iprintf>

  while (pcb != NULL) {
 80141fa:	e011      	b.n	8014220 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	681a      	ldr	r2, [r3, #0]
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	429a      	cmp	r2, r3
 8014206:	d108      	bne.n	801421a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	68db      	ldr	r3, [r3, #12]
 801420c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801420e:	68f8      	ldr	r0, [r7, #12]
 8014210:	f7fe fe1a 	bl	8012e48 <tcp_abort>
      pcb = next;
 8014214:	68bb      	ldr	r3, [r7, #8]
 8014216:	60fb      	str	r3, [r7, #12]
 8014218:	e002      	b.n	8014220 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	68db      	ldr	r3, [r3, #12]
 801421e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	2b00      	cmp	r3, #0
 8014224:	d1ea      	bne.n	80141fc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8014226:	bf00      	nop
 8014228:	bf00      	nop
 801422a:	3710      	adds	r7, #16
 801422c:	46bd      	mov	sp, r7
 801422e:	bd80      	pop	{r7, pc}
 8014230:	0801e6b0 	.word	0x0801e6b0
 8014234:	0801ede4 	.word	0x0801ede4
 8014238:	0801e6f4 	.word	0x0801e6f4

0801423c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801423c:	b580      	push	{r7, lr}
 801423e:	b084      	sub	sp, #16
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
 8014244:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	2b00      	cmp	r3, #0
 801424a:	d02a      	beq.n	80142a2 <tcp_netif_ip_addr_changed+0x66>
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d026      	beq.n	80142a2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8014254:	4b15      	ldr	r3, [pc, #84]	; (80142ac <tcp_netif_ip_addr_changed+0x70>)
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	4619      	mov	r1, r3
 801425a:	6878      	ldr	r0, [r7, #4]
 801425c:	f7ff ffbc 	bl	80141d8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8014260:	4b13      	ldr	r3, [pc, #76]	; (80142b0 <tcp_netif_ip_addr_changed+0x74>)
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	4619      	mov	r1, r3
 8014266:	6878      	ldr	r0, [r7, #4]
 8014268:	f7ff ffb6 	bl	80141d8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801426c:	683b      	ldr	r3, [r7, #0]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d017      	beq.n	80142a2 <tcp_netif_ip_addr_changed+0x66>
 8014272:	683b      	ldr	r3, [r7, #0]
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d013      	beq.n	80142a2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801427a:	4b0e      	ldr	r3, [pc, #56]	; (80142b4 <tcp_netif_ip_addr_changed+0x78>)
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	60fb      	str	r3, [r7, #12]
 8014280:	e00c      	b.n	801429c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	681a      	ldr	r2, [r3, #0]
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	429a      	cmp	r2, r3
 801428c:	d103      	bne.n	8014296 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801428e:	683b      	ldr	r3, [r7, #0]
 8014290:	681a      	ldr	r2, [r3, #0]
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	68db      	ldr	r3, [r3, #12]
 801429a:	60fb      	str	r3, [r7, #12]
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d1ef      	bne.n	8014282 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80142a2:	bf00      	nop
 80142a4:	3710      	adds	r7, #16
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bd80      	pop	{r7, pc}
 80142aa:	bf00      	nop
 80142ac:	20011098 	.word	0x20011098
 80142b0:	20011090 	.word	0x20011090
 80142b4:	20011094 	.word	0x20011094

080142b8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80142b8:	b580      	push	{r7, lr}
 80142ba:	b082      	sub	sp, #8
 80142bc:	af00      	add	r7, sp, #0
 80142be:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d007      	beq.n	80142d8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80142cc:	4618      	mov	r0, r3
 80142ce:	f7ff fb6f 	bl	80139b0 <tcp_segs_free>
    pcb->ooseq = NULL;
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	2200      	movs	r2, #0
 80142d6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80142d8:	bf00      	nop
 80142da:	3708      	adds	r7, #8
 80142dc:	46bd      	mov	sp, r7
 80142de:	bd80      	pop	{r7, pc}

080142e0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80142e0:	b590      	push	{r4, r7, lr}
 80142e2:	b08d      	sub	sp, #52	; 0x34
 80142e4:	af04      	add	r7, sp, #16
 80142e6:	6078      	str	r0, [r7, #4]
 80142e8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d105      	bne.n	80142fc <tcp_input+0x1c>
 80142f0:	4b9b      	ldr	r3, [pc, #620]	; (8014560 <tcp_input+0x280>)
 80142f2:	2283      	movs	r2, #131	; 0x83
 80142f4:	499b      	ldr	r1, [pc, #620]	; (8014564 <tcp_input+0x284>)
 80142f6:	489c      	ldr	r0, [pc, #624]	; (8014568 <tcp_input+0x288>)
 80142f8:	f007 fb4c 	bl	801b994 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	685b      	ldr	r3, [r3, #4]
 8014300:	4a9a      	ldr	r2, [pc, #616]	; (801456c <tcp_input+0x28c>)
 8014302:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	895b      	ldrh	r3, [r3, #10]
 8014308:	2b13      	cmp	r3, #19
 801430a:	f240 83d1 	bls.w	8014ab0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801430e:	4b98      	ldr	r3, [pc, #608]	; (8014570 <tcp_input+0x290>)
 8014310:	695b      	ldr	r3, [r3, #20]
 8014312:	4a97      	ldr	r2, [pc, #604]	; (8014570 <tcp_input+0x290>)
 8014314:	6812      	ldr	r2, [r2, #0]
 8014316:	4611      	mov	r1, r2
 8014318:	4618      	mov	r0, r3
 801431a:	f006 f9e5 	bl	801a6e8 <ip4_addr_isbroadcast_u32>
 801431e:	4603      	mov	r3, r0
 8014320:	2b00      	cmp	r3, #0
 8014322:	f040 83c7 	bne.w	8014ab4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8014326:	4b92      	ldr	r3, [pc, #584]	; (8014570 <tcp_input+0x290>)
 8014328:	695b      	ldr	r3, [r3, #20]
 801432a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801432e:	2be0      	cmp	r3, #224	; 0xe0
 8014330:	f000 83c0 	beq.w	8014ab4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8014334:	4b8d      	ldr	r3, [pc, #564]	; (801456c <tcp_input+0x28c>)
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	899b      	ldrh	r3, [r3, #12]
 801433a:	b29b      	uxth	r3, r3
 801433c:	4618      	mov	r0, r3
 801433e:	f7fc fb6f 	bl	8010a20 <lwip_htons>
 8014342:	4603      	mov	r3, r0
 8014344:	0b1b      	lsrs	r3, r3, #12
 8014346:	b29b      	uxth	r3, r3
 8014348:	b2db      	uxtb	r3, r3
 801434a:	009b      	lsls	r3, r3, #2
 801434c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801434e:	7cbb      	ldrb	r3, [r7, #18]
 8014350:	2b13      	cmp	r3, #19
 8014352:	f240 83b1 	bls.w	8014ab8 <tcp_input+0x7d8>
 8014356:	7cbb      	ldrb	r3, [r7, #18]
 8014358:	b29a      	uxth	r2, r3
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	891b      	ldrh	r3, [r3, #8]
 801435e:	429a      	cmp	r2, r3
 8014360:	f200 83aa 	bhi.w	8014ab8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8014364:	7cbb      	ldrb	r3, [r7, #18]
 8014366:	b29b      	uxth	r3, r3
 8014368:	3b14      	subs	r3, #20
 801436a:	b29a      	uxth	r2, r3
 801436c:	4b81      	ldr	r3, [pc, #516]	; (8014574 <tcp_input+0x294>)
 801436e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8014370:	4b81      	ldr	r3, [pc, #516]	; (8014578 <tcp_input+0x298>)
 8014372:	2200      	movs	r2, #0
 8014374:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	895a      	ldrh	r2, [r3, #10]
 801437a:	7cbb      	ldrb	r3, [r7, #18]
 801437c:	b29b      	uxth	r3, r3
 801437e:	429a      	cmp	r2, r3
 8014380:	d309      	bcc.n	8014396 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8014382:	4b7c      	ldr	r3, [pc, #496]	; (8014574 <tcp_input+0x294>)
 8014384:	881a      	ldrh	r2, [r3, #0]
 8014386:	4b7d      	ldr	r3, [pc, #500]	; (801457c <tcp_input+0x29c>)
 8014388:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801438a:	7cbb      	ldrb	r3, [r7, #18]
 801438c:	4619      	mov	r1, r3
 801438e:	6878      	ldr	r0, [r7, #4]
 8014390:	f7fd feb2 	bl	80120f8 <pbuf_remove_header>
 8014394:	e04e      	b.n	8014434 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d105      	bne.n	80143aa <tcp_input+0xca>
 801439e:	4b70      	ldr	r3, [pc, #448]	; (8014560 <tcp_input+0x280>)
 80143a0:	22c2      	movs	r2, #194	; 0xc2
 80143a2:	4977      	ldr	r1, [pc, #476]	; (8014580 <tcp_input+0x2a0>)
 80143a4:	4870      	ldr	r0, [pc, #448]	; (8014568 <tcp_input+0x288>)
 80143a6:	f007 faf5 	bl	801b994 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80143aa:	2114      	movs	r1, #20
 80143ac:	6878      	ldr	r0, [r7, #4]
 80143ae:	f7fd fea3 	bl	80120f8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	895a      	ldrh	r2, [r3, #10]
 80143b6:	4b71      	ldr	r3, [pc, #452]	; (801457c <tcp_input+0x29c>)
 80143b8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80143ba:	4b6e      	ldr	r3, [pc, #440]	; (8014574 <tcp_input+0x294>)
 80143bc:	881a      	ldrh	r2, [r3, #0]
 80143be:	4b6f      	ldr	r3, [pc, #444]	; (801457c <tcp_input+0x29c>)
 80143c0:	881b      	ldrh	r3, [r3, #0]
 80143c2:	1ad3      	subs	r3, r2, r3
 80143c4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80143c6:	4b6d      	ldr	r3, [pc, #436]	; (801457c <tcp_input+0x29c>)
 80143c8:	881b      	ldrh	r3, [r3, #0]
 80143ca:	4619      	mov	r1, r3
 80143cc:	6878      	ldr	r0, [r7, #4]
 80143ce:	f7fd fe93 	bl	80120f8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	895b      	ldrh	r3, [r3, #10]
 80143d8:	8a3a      	ldrh	r2, [r7, #16]
 80143da:	429a      	cmp	r2, r3
 80143dc:	f200 836e 	bhi.w	8014abc <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	685b      	ldr	r3, [r3, #4]
 80143e6:	4a64      	ldr	r2, [pc, #400]	; (8014578 <tcp_input+0x298>)
 80143e8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	8a3a      	ldrh	r2, [r7, #16]
 80143f0:	4611      	mov	r1, r2
 80143f2:	4618      	mov	r0, r3
 80143f4:	f7fd fe80 	bl	80120f8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	891a      	ldrh	r2, [r3, #8]
 80143fc:	8a3b      	ldrh	r3, [r7, #16]
 80143fe:	1ad3      	subs	r3, r2, r3
 8014400:	b29a      	uxth	r2, r3
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	895b      	ldrh	r3, [r3, #10]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d005      	beq.n	801441a <tcp_input+0x13a>
 801440e:	4b54      	ldr	r3, [pc, #336]	; (8014560 <tcp_input+0x280>)
 8014410:	22df      	movs	r2, #223	; 0xdf
 8014412:	495c      	ldr	r1, [pc, #368]	; (8014584 <tcp_input+0x2a4>)
 8014414:	4854      	ldr	r0, [pc, #336]	; (8014568 <tcp_input+0x288>)
 8014416:	f007 fabd 	bl	801b994 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	891a      	ldrh	r2, [r3, #8]
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	891b      	ldrh	r3, [r3, #8]
 8014424:	429a      	cmp	r2, r3
 8014426:	d005      	beq.n	8014434 <tcp_input+0x154>
 8014428:	4b4d      	ldr	r3, [pc, #308]	; (8014560 <tcp_input+0x280>)
 801442a:	22e0      	movs	r2, #224	; 0xe0
 801442c:	4956      	ldr	r1, [pc, #344]	; (8014588 <tcp_input+0x2a8>)
 801442e:	484e      	ldr	r0, [pc, #312]	; (8014568 <tcp_input+0x288>)
 8014430:	f007 fab0 	bl	801b994 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8014434:	4b4d      	ldr	r3, [pc, #308]	; (801456c <tcp_input+0x28c>)
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	881b      	ldrh	r3, [r3, #0]
 801443a:	b29b      	uxth	r3, r3
 801443c:	4a4b      	ldr	r2, [pc, #300]	; (801456c <tcp_input+0x28c>)
 801443e:	6814      	ldr	r4, [r2, #0]
 8014440:	4618      	mov	r0, r3
 8014442:	f7fc faed 	bl	8010a20 <lwip_htons>
 8014446:	4603      	mov	r3, r0
 8014448:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801444a:	4b48      	ldr	r3, [pc, #288]	; (801456c <tcp_input+0x28c>)
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	885b      	ldrh	r3, [r3, #2]
 8014450:	b29b      	uxth	r3, r3
 8014452:	4a46      	ldr	r2, [pc, #280]	; (801456c <tcp_input+0x28c>)
 8014454:	6814      	ldr	r4, [r2, #0]
 8014456:	4618      	mov	r0, r3
 8014458:	f7fc fae2 	bl	8010a20 <lwip_htons>
 801445c:	4603      	mov	r3, r0
 801445e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8014460:	4b42      	ldr	r3, [pc, #264]	; (801456c <tcp_input+0x28c>)
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	685b      	ldr	r3, [r3, #4]
 8014466:	4a41      	ldr	r2, [pc, #260]	; (801456c <tcp_input+0x28c>)
 8014468:	6814      	ldr	r4, [r2, #0]
 801446a:	4618      	mov	r0, r3
 801446c:	f7fc faed 	bl	8010a4a <lwip_htonl>
 8014470:	4603      	mov	r3, r0
 8014472:	6063      	str	r3, [r4, #4]
 8014474:	6863      	ldr	r3, [r4, #4]
 8014476:	4a45      	ldr	r2, [pc, #276]	; (801458c <tcp_input+0x2ac>)
 8014478:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801447a:	4b3c      	ldr	r3, [pc, #240]	; (801456c <tcp_input+0x28c>)
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	689b      	ldr	r3, [r3, #8]
 8014480:	4a3a      	ldr	r2, [pc, #232]	; (801456c <tcp_input+0x28c>)
 8014482:	6814      	ldr	r4, [r2, #0]
 8014484:	4618      	mov	r0, r3
 8014486:	f7fc fae0 	bl	8010a4a <lwip_htonl>
 801448a:	4603      	mov	r3, r0
 801448c:	60a3      	str	r3, [r4, #8]
 801448e:	68a3      	ldr	r3, [r4, #8]
 8014490:	4a3f      	ldr	r2, [pc, #252]	; (8014590 <tcp_input+0x2b0>)
 8014492:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8014494:	4b35      	ldr	r3, [pc, #212]	; (801456c <tcp_input+0x28c>)
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	89db      	ldrh	r3, [r3, #14]
 801449a:	b29b      	uxth	r3, r3
 801449c:	4a33      	ldr	r2, [pc, #204]	; (801456c <tcp_input+0x28c>)
 801449e:	6814      	ldr	r4, [r2, #0]
 80144a0:	4618      	mov	r0, r3
 80144a2:	f7fc fabd 	bl	8010a20 <lwip_htons>
 80144a6:	4603      	mov	r3, r0
 80144a8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80144aa:	4b30      	ldr	r3, [pc, #192]	; (801456c <tcp_input+0x28c>)
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	899b      	ldrh	r3, [r3, #12]
 80144b0:	b29b      	uxth	r3, r3
 80144b2:	4618      	mov	r0, r3
 80144b4:	f7fc fab4 	bl	8010a20 <lwip_htons>
 80144b8:	4603      	mov	r3, r0
 80144ba:	b2db      	uxtb	r3, r3
 80144bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80144c0:	b2da      	uxtb	r2, r3
 80144c2:	4b34      	ldr	r3, [pc, #208]	; (8014594 <tcp_input+0x2b4>)
 80144c4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	891a      	ldrh	r2, [r3, #8]
 80144ca:	4b33      	ldr	r3, [pc, #204]	; (8014598 <tcp_input+0x2b8>)
 80144cc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80144ce:	4b31      	ldr	r3, [pc, #196]	; (8014594 <tcp_input+0x2b4>)
 80144d0:	781b      	ldrb	r3, [r3, #0]
 80144d2:	f003 0303 	and.w	r3, r3, #3
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d00c      	beq.n	80144f4 <tcp_input+0x214>
    tcplen++;
 80144da:	4b2f      	ldr	r3, [pc, #188]	; (8014598 <tcp_input+0x2b8>)
 80144dc:	881b      	ldrh	r3, [r3, #0]
 80144de:	3301      	adds	r3, #1
 80144e0:	b29a      	uxth	r2, r3
 80144e2:	4b2d      	ldr	r3, [pc, #180]	; (8014598 <tcp_input+0x2b8>)
 80144e4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	891a      	ldrh	r2, [r3, #8]
 80144ea:	4b2b      	ldr	r3, [pc, #172]	; (8014598 <tcp_input+0x2b8>)
 80144ec:	881b      	ldrh	r3, [r3, #0]
 80144ee:	429a      	cmp	r2, r3
 80144f0:	f200 82e6 	bhi.w	8014ac0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80144f4:	2300      	movs	r3, #0
 80144f6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80144f8:	4b28      	ldr	r3, [pc, #160]	; (801459c <tcp_input+0x2bc>)
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	61fb      	str	r3, [r7, #28]
 80144fe:	e09d      	b.n	801463c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8014500:	69fb      	ldr	r3, [r7, #28]
 8014502:	7d1b      	ldrb	r3, [r3, #20]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d105      	bne.n	8014514 <tcp_input+0x234>
 8014508:	4b15      	ldr	r3, [pc, #84]	; (8014560 <tcp_input+0x280>)
 801450a:	22fb      	movs	r2, #251	; 0xfb
 801450c:	4924      	ldr	r1, [pc, #144]	; (80145a0 <tcp_input+0x2c0>)
 801450e:	4816      	ldr	r0, [pc, #88]	; (8014568 <tcp_input+0x288>)
 8014510:	f007 fa40 	bl	801b994 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8014514:	69fb      	ldr	r3, [r7, #28]
 8014516:	7d1b      	ldrb	r3, [r3, #20]
 8014518:	2b0a      	cmp	r3, #10
 801451a:	d105      	bne.n	8014528 <tcp_input+0x248>
 801451c:	4b10      	ldr	r3, [pc, #64]	; (8014560 <tcp_input+0x280>)
 801451e:	22fc      	movs	r2, #252	; 0xfc
 8014520:	4920      	ldr	r1, [pc, #128]	; (80145a4 <tcp_input+0x2c4>)
 8014522:	4811      	ldr	r0, [pc, #68]	; (8014568 <tcp_input+0x288>)
 8014524:	f007 fa36 	bl	801b994 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8014528:	69fb      	ldr	r3, [r7, #28]
 801452a:	7d1b      	ldrb	r3, [r3, #20]
 801452c:	2b01      	cmp	r3, #1
 801452e:	d105      	bne.n	801453c <tcp_input+0x25c>
 8014530:	4b0b      	ldr	r3, [pc, #44]	; (8014560 <tcp_input+0x280>)
 8014532:	22fd      	movs	r2, #253	; 0xfd
 8014534:	491c      	ldr	r1, [pc, #112]	; (80145a8 <tcp_input+0x2c8>)
 8014536:	480c      	ldr	r0, [pc, #48]	; (8014568 <tcp_input+0x288>)
 8014538:	f007 fa2c 	bl	801b994 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801453c:	69fb      	ldr	r3, [r7, #28]
 801453e:	7a1b      	ldrb	r3, [r3, #8]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d033      	beq.n	80145ac <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014544:	69fb      	ldr	r3, [r7, #28]
 8014546:	7a1a      	ldrb	r2, [r3, #8]
 8014548:	4b09      	ldr	r3, [pc, #36]	; (8014570 <tcp_input+0x290>)
 801454a:	685b      	ldr	r3, [r3, #4]
 801454c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014550:	3301      	adds	r3, #1
 8014552:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014554:	429a      	cmp	r2, r3
 8014556:	d029      	beq.n	80145ac <tcp_input+0x2cc>
      prev = pcb;
 8014558:	69fb      	ldr	r3, [r7, #28]
 801455a:	61bb      	str	r3, [r7, #24]
      continue;
 801455c:	e06b      	b.n	8014636 <tcp_input+0x356>
 801455e:	bf00      	nop
 8014560:	0801ee18 	.word	0x0801ee18
 8014564:	0801ee4c 	.word	0x0801ee4c
 8014568:	0801ee64 	.word	0x0801ee64
 801456c:	200110b4 	.word	0x200110b4
 8014570:	2000d938 	.word	0x2000d938
 8014574:	200110b8 	.word	0x200110b8
 8014578:	200110bc 	.word	0x200110bc
 801457c:	200110ba 	.word	0x200110ba
 8014580:	0801ee8c 	.word	0x0801ee8c
 8014584:	0801ee9c 	.word	0x0801ee9c
 8014588:	0801eea8 	.word	0x0801eea8
 801458c:	200110c4 	.word	0x200110c4
 8014590:	200110c8 	.word	0x200110c8
 8014594:	200110d0 	.word	0x200110d0
 8014598:	200110ce 	.word	0x200110ce
 801459c:	20011098 	.word	0x20011098
 80145a0:	0801eec8 	.word	0x0801eec8
 80145a4:	0801eef0 	.word	0x0801eef0
 80145a8:	0801ef1c 	.word	0x0801ef1c
    }

    if (pcb->remote_port == tcphdr->src &&
 80145ac:	69fb      	ldr	r3, [r7, #28]
 80145ae:	8b1a      	ldrh	r2, [r3, #24]
 80145b0:	4b72      	ldr	r3, [pc, #456]	; (801477c <tcp_input+0x49c>)
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	881b      	ldrh	r3, [r3, #0]
 80145b6:	b29b      	uxth	r3, r3
 80145b8:	429a      	cmp	r2, r3
 80145ba:	d13a      	bne.n	8014632 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80145bc:	69fb      	ldr	r3, [r7, #28]
 80145be:	8ada      	ldrh	r2, [r3, #22]
 80145c0:	4b6e      	ldr	r3, [pc, #440]	; (801477c <tcp_input+0x49c>)
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	885b      	ldrh	r3, [r3, #2]
 80145c6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80145c8:	429a      	cmp	r2, r3
 80145ca:	d132      	bne.n	8014632 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80145cc:	69fb      	ldr	r3, [r7, #28]
 80145ce:	685a      	ldr	r2, [r3, #4]
 80145d0:	4b6b      	ldr	r3, [pc, #428]	; (8014780 <tcp_input+0x4a0>)
 80145d2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80145d4:	429a      	cmp	r2, r3
 80145d6:	d12c      	bne.n	8014632 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80145d8:	69fb      	ldr	r3, [r7, #28]
 80145da:	681a      	ldr	r2, [r3, #0]
 80145dc:	4b68      	ldr	r3, [pc, #416]	; (8014780 <tcp_input+0x4a0>)
 80145de:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80145e0:	429a      	cmp	r2, r3
 80145e2:	d126      	bne.n	8014632 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80145e4:	69fb      	ldr	r3, [r7, #28]
 80145e6:	68db      	ldr	r3, [r3, #12]
 80145e8:	69fa      	ldr	r2, [r7, #28]
 80145ea:	429a      	cmp	r2, r3
 80145ec:	d106      	bne.n	80145fc <tcp_input+0x31c>
 80145ee:	4b65      	ldr	r3, [pc, #404]	; (8014784 <tcp_input+0x4a4>)
 80145f0:	f240 120d 	movw	r2, #269	; 0x10d
 80145f4:	4964      	ldr	r1, [pc, #400]	; (8014788 <tcp_input+0x4a8>)
 80145f6:	4865      	ldr	r0, [pc, #404]	; (801478c <tcp_input+0x4ac>)
 80145f8:	f007 f9cc 	bl	801b994 <iprintf>
      if (prev != NULL) {
 80145fc:	69bb      	ldr	r3, [r7, #24]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d00a      	beq.n	8014618 <tcp_input+0x338>
        prev->next = pcb->next;
 8014602:	69fb      	ldr	r3, [r7, #28]
 8014604:	68da      	ldr	r2, [r3, #12]
 8014606:	69bb      	ldr	r3, [r7, #24]
 8014608:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801460a:	4b61      	ldr	r3, [pc, #388]	; (8014790 <tcp_input+0x4b0>)
 801460c:	681a      	ldr	r2, [r3, #0]
 801460e:	69fb      	ldr	r3, [r7, #28]
 8014610:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8014612:	4a5f      	ldr	r2, [pc, #380]	; (8014790 <tcp_input+0x4b0>)
 8014614:	69fb      	ldr	r3, [r7, #28]
 8014616:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8014618:	69fb      	ldr	r3, [r7, #28]
 801461a:	68db      	ldr	r3, [r3, #12]
 801461c:	69fa      	ldr	r2, [r7, #28]
 801461e:	429a      	cmp	r2, r3
 8014620:	d111      	bne.n	8014646 <tcp_input+0x366>
 8014622:	4b58      	ldr	r3, [pc, #352]	; (8014784 <tcp_input+0x4a4>)
 8014624:	f240 1215 	movw	r2, #277	; 0x115
 8014628:	495a      	ldr	r1, [pc, #360]	; (8014794 <tcp_input+0x4b4>)
 801462a:	4858      	ldr	r0, [pc, #352]	; (801478c <tcp_input+0x4ac>)
 801462c:	f007 f9b2 	bl	801b994 <iprintf>
      break;
 8014630:	e009      	b.n	8014646 <tcp_input+0x366>
    }
    prev = pcb;
 8014632:	69fb      	ldr	r3, [r7, #28]
 8014634:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014636:	69fb      	ldr	r3, [r7, #28]
 8014638:	68db      	ldr	r3, [r3, #12]
 801463a:	61fb      	str	r3, [r7, #28]
 801463c:	69fb      	ldr	r3, [r7, #28]
 801463e:	2b00      	cmp	r3, #0
 8014640:	f47f af5e 	bne.w	8014500 <tcp_input+0x220>
 8014644:	e000      	b.n	8014648 <tcp_input+0x368>
      break;
 8014646:	bf00      	nop
  }

  if (pcb == NULL) {
 8014648:	69fb      	ldr	r3, [r7, #28]
 801464a:	2b00      	cmp	r3, #0
 801464c:	f040 80aa 	bne.w	80147a4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014650:	4b51      	ldr	r3, [pc, #324]	; (8014798 <tcp_input+0x4b8>)
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	61fb      	str	r3, [r7, #28]
 8014656:	e03f      	b.n	80146d8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014658:	69fb      	ldr	r3, [r7, #28]
 801465a:	7d1b      	ldrb	r3, [r3, #20]
 801465c:	2b0a      	cmp	r3, #10
 801465e:	d006      	beq.n	801466e <tcp_input+0x38e>
 8014660:	4b48      	ldr	r3, [pc, #288]	; (8014784 <tcp_input+0x4a4>)
 8014662:	f240 121f 	movw	r2, #287	; 0x11f
 8014666:	494d      	ldr	r1, [pc, #308]	; (801479c <tcp_input+0x4bc>)
 8014668:	4848      	ldr	r0, [pc, #288]	; (801478c <tcp_input+0x4ac>)
 801466a:	f007 f993 	bl	801b994 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801466e:	69fb      	ldr	r3, [r7, #28]
 8014670:	7a1b      	ldrb	r3, [r3, #8]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d009      	beq.n	801468a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014676:	69fb      	ldr	r3, [r7, #28]
 8014678:	7a1a      	ldrb	r2, [r3, #8]
 801467a:	4b41      	ldr	r3, [pc, #260]	; (8014780 <tcp_input+0x4a0>)
 801467c:	685b      	ldr	r3, [r3, #4]
 801467e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014682:	3301      	adds	r3, #1
 8014684:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014686:	429a      	cmp	r2, r3
 8014688:	d122      	bne.n	80146d0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801468a:	69fb      	ldr	r3, [r7, #28]
 801468c:	8b1a      	ldrh	r2, [r3, #24]
 801468e:	4b3b      	ldr	r3, [pc, #236]	; (801477c <tcp_input+0x49c>)
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	881b      	ldrh	r3, [r3, #0]
 8014694:	b29b      	uxth	r3, r3
 8014696:	429a      	cmp	r2, r3
 8014698:	d11b      	bne.n	80146d2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801469a:	69fb      	ldr	r3, [r7, #28]
 801469c:	8ada      	ldrh	r2, [r3, #22]
 801469e:	4b37      	ldr	r3, [pc, #220]	; (801477c <tcp_input+0x49c>)
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	885b      	ldrh	r3, [r3, #2]
 80146a4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80146a6:	429a      	cmp	r2, r3
 80146a8:	d113      	bne.n	80146d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80146aa:	69fb      	ldr	r3, [r7, #28]
 80146ac:	685a      	ldr	r2, [r3, #4]
 80146ae:	4b34      	ldr	r3, [pc, #208]	; (8014780 <tcp_input+0x4a0>)
 80146b0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80146b2:	429a      	cmp	r2, r3
 80146b4:	d10d      	bne.n	80146d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80146b6:	69fb      	ldr	r3, [r7, #28]
 80146b8:	681a      	ldr	r2, [r3, #0]
 80146ba:	4b31      	ldr	r3, [pc, #196]	; (8014780 <tcp_input+0x4a0>)
 80146bc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80146be:	429a      	cmp	r2, r3
 80146c0:	d107      	bne.n	80146d2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80146c2:	69f8      	ldr	r0, [r7, #28]
 80146c4:	f000 fb56 	bl	8014d74 <tcp_timewait_input>
        }
        pbuf_free(p);
 80146c8:	6878      	ldr	r0, [r7, #4]
 80146ca:	f7fd fdcd 	bl	8012268 <pbuf_free>
        return;
 80146ce:	e1fd      	b.n	8014acc <tcp_input+0x7ec>
        continue;
 80146d0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80146d2:	69fb      	ldr	r3, [r7, #28]
 80146d4:	68db      	ldr	r3, [r3, #12]
 80146d6:	61fb      	str	r3, [r7, #28]
 80146d8:	69fb      	ldr	r3, [r7, #28]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d1bc      	bne.n	8014658 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80146de:	2300      	movs	r3, #0
 80146e0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80146e2:	4b2f      	ldr	r3, [pc, #188]	; (80147a0 <tcp_input+0x4c0>)
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	617b      	str	r3, [r7, #20]
 80146e8:	e02a      	b.n	8014740 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80146ea:	697b      	ldr	r3, [r7, #20]
 80146ec:	7a1b      	ldrb	r3, [r3, #8]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d00c      	beq.n	801470c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80146f2:	697b      	ldr	r3, [r7, #20]
 80146f4:	7a1a      	ldrb	r2, [r3, #8]
 80146f6:	4b22      	ldr	r3, [pc, #136]	; (8014780 <tcp_input+0x4a0>)
 80146f8:	685b      	ldr	r3, [r3, #4]
 80146fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80146fe:	3301      	adds	r3, #1
 8014700:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8014702:	429a      	cmp	r2, r3
 8014704:	d002      	beq.n	801470c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8014706:	697b      	ldr	r3, [r7, #20]
 8014708:	61bb      	str	r3, [r7, #24]
        continue;
 801470a:	e016      	b.n	801473a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801470c:	697b      	ldr	r3, [r7, #20]
 801470e:	8ada      	ldrh	r2, [r3, #22]
 8014710:	4b1a      	ldr	r3, [pc, #104]	; (801477c <tcp_input+0x49c>)
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	885b      	ldrh	r3, [r3, #2]
 8014716:	b29b      	uxth	r3, r3
 8014718:	429a      	cmp	r2, r3
 801471a:	d10c      	bne.n	8014736 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801471c:	697b      	ldr	r3, [r7, #20]
 801471e:	681a      	ldr	r2, [r3, #0]
 8014720:	4b17      	ldr	r3, [pc, #92]	; (8014780 <tcp_input+0x4a0>)
 8014722:	695b      	ldr	r3, [r3, #20]
 8014724:	429a      	cmp	r2, r3
 8014726:	d00f      	beq.n	8014748 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8014728:	697b      	ldr	r3, [r7, #20]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d00d      	beq.n	801474a <tcp_input+0x46a>
 801472e:	697b      	ldr	r3, [r7, #20]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d009      	beq.n	801474a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8014736:	697b      	ldr	r3, [r7, #20]
 8014738:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801473a:	697b      	ldr	r3, [r7, #20]
 801473c:	68db      	ldr	r3, [r3, #12]
 801473e:	617b      	str	r3, [r7, #20]
 8014740:	697b      	ldr	r3, [r7, #20]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d1d1      	bne.n	80146ea <tcp_input+0x40a>
 8014746:	e000      	b.n	801474a <tcp_input+0x46a>
            break;
 8014748:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801474a:	697b      	ldr	r3, [r7, #20]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d029      	beq.n	80147a4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8014750:	69bb      	ldr	r3, [r7, #24]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d00a      	beq.n	801476c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8014756:	697b      	ldr	r3, [r7, #20]
 8014758:	68da      	ldr	r2, [r3, #12]
 801475a:	69bb      	ldr	r3, [r7, #24]
 801475c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801475e:	4b10      	ldr	r3, [pc, #64]	; (80147a0 <tcp_input+0x4c0>)
 8014760:	681a      	ldr	r2, [r3, #0]
 8014762:	697b      	ldr	r3, [r7, #20]
 8014764:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8014766:	4a0e      	ldr	r2, [pc, #56]	; (80147a0 <tcp_input+0x4c0>)
 8014768:	697b      	ldr	r3, [r7, #20]
 801476a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801476c:	6978      	ldr	r0, [r7, #20]
 801476e:	f000 fa03 	bl	8014b78 <tcp_listen_input>
      }
      pbuf_free(p);
 8014772:	6878      	ldr	r0, [r7, #4]
 8014774:	f7fd fd78 	bl	8012268 <pbuf_free>
      return;
 8014778:	e1a8      	b.n	8014acc <tcp_input+0x7ec>
 801477a:	bf00      	nop
 801477c:	200110b4 	.word	0x200110b4
 8014780:	2000d938 	.word	0x2000d938
 8014784:	0801ee18 	.word	0x0801ee18
 8014788:	0801ef44 	.word	0x0801ef44
 801478c:	0801ee64 	.word	0x0801ee64
 8014790:	20011098 	.word	0x20011098
 8014794:	0801ef70 	.word	0x0801ef70
 8014798:	2001109c 	.word	0x2001109c
 801479c:	0801ef9c 	.word	0x0801ef9c
 80147a0:	20011094 	.word	0x20011094
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80147a4:	69fb      	ldr	r3, [r7, #28]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	f000 8158 	beq.w	8014a5c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80147ac:	4b95      	ldr	r3, [pc, #596]	; (8014a04 <tcp_input+0x724>)
 80147ae:	2200      	movs	r2, #0
 80147b0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	891a      	ldrh	r2, [r3, #8]
 80147b6:	4b93      	ldr	r3, [pc, #588]	; (8014a04 <tcp_input+0x724>)
 80147b8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80147ba:	4a92      	ldr	r2, [pc, #584]	; (8014a04 <tcp_input+0x724>)
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80147c0:	4b91      	ldr	r3, [pc, #580]	; (8014a08 <tcp_input+0x728>)
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	4a8f      	ldr	r2, [pc, #572]	; (8014a04 <tcp_input+0x724>)
 80147c6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80147c8:	4b90      	ldr	r3, [pc, #576]	; (8014a0c <tcp_input+0x72c>)
 80147ca:	2200      	movs	r2, #0
 80147cc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80147ce:	4b90      	ldr	r3, [pc, #576]	; (8014a10 <tcp_input+0x730>)
 80147d0:	2200      	movs	r2, #0
 80147d2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80147d4:	4b8f      	ldr	r3, [pc, #572]	; (8014a14 <tcp_input+0x734>)
 80147d6:	2200      	movs	r2, #0
 80147d8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80147da:	4b8f      	ldr	r3, [pc, #572]	; (8014a18 <tcp_input+0x738>)
 80147dc:	781b      	ldrb	r3, [r3, #0]
 80147de:	f003 0308 	and.w	r3, r3, #8
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d006      	beq.n	80147f4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	7b5b      	ldrb	r3, [r3, #13]
 80147ea:	f043 0301 	orr.w	r3, r3, #1
 80147ee:	b2da      	uxtb	r2, r3
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80147f4:	69fb      	ldr	r3, [r7, #28]
 80147f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d017      	beq.n	801482c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80147fc:	69f8      	ldr	r0, [r7, #28]
 80147fe:	f7ff f85b 	bl	80138b8 <tcp_process_refused_data>
 8014802:	4603      	mov	r3, r0
 8014804:	f113 0f0d 	cmn.w	r3, #13
 8014808:	d007      	beq.n	801481a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801480a:	69fb      	ldr	r3, [r7, #28]
 801480c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801480e:	2b00      	cmp	r3, #0
 8014810:	d00c      	beq.n	801482c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014812:	4b82      	ldr	r3, [pc, #520]	; (8014a1c <tcp_input+0x73c>)
 8014814:	881b      	ldrh	r3, [r3, #0]
 8014816:	2b00      	cmp	r3, #0
 8014818:	d008      	beq.n	801482c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801481a:	69fb      	ldr	r3, [r7, #28]
 801481c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801481e:	2b00      	cmp	r3, #0
 8014820:	f040 80e3 	bne.w	80149ea <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8014824:	69f8      	ldr	r0, [r7, #28]
 8014826:	f003 fe05 	bl	8018434 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801482a:	e0de      	b.n	80149ea <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 801482c:	4a7c      	ldr	r2, [pc, #496]	; (8014a20 <tcp_input+0x740>)
 801482e:	69fb      	ldr	r3, [r7, #28]
 8014830:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8014832:	69f8      	ldr	r0, [r7, #28]
 8014834:	f000 fb18 	bl	8014e68 <tcp_process>
 8014838:	4603      	mov	r3, r0
 801483a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801483c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014840:	f113 0f0d 	cmn.w	r3, #13
 8014844:	f000 80d3 	beq.w	80149ee <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8014848:	4b71      	ldr	r3, [pc, #452]	; (8014a10 <tcp_input+0x730>)
 801484a:	781b      	ldrb	r3, [r3, #0]
 801484c:	f003 0308 	and.w	r3, r3, #8
 8014850:	2b00      	cmp	r3, #0
 8014852:	d015      	beq.n	8014880 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8014854:	69fb      	ldr	r3, [r7, #28]
 8014856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801485a:	2b00      	cmp	r3, #0
 801485c:	d008      	beq.n	8014870 <tcp_input+0x590>
 801485e:	69fb      	ldr	r3, [r7, #28]
 8014860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014864:	69fa      	ldr	r2, [r7, #28]
 8014866:	6912      	ldr	r2, [r2, #16]
 8014868:	f06f 010d 	mvn.w	r1, #13
 801486c:	4610      	mov	r0, r2
 801486e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014870:	69f9      	ldr	r1, [r7, #28]
 8014872:	486c      	ldr	r0, [pc, #432]	; (8014a24 <tcp_input+0x744>)
 8014874:	f7ff fbbc 	bl	8013ff0 <tcp_pcb_remove>
        tcp_free(pcb);
 8014878:	69f8      	ldr	r0, [r7, #28]
 801487a:	f7fd ffa1 	bl	80127c0 <tcp_free>
 801487e:	e0da      	b.n	8014a36 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8014880:	2300      	movs	r3, #0
 8014882:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8014884:	4b63      	ldr	r3, [pc, #396]	; (8014a14 <tcp_input+0x734>)
 8014886:	881b      	ldrh	r3, [r3, #0]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d01d      	beq.n	80148c8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801488c:	4b61      	ldr	r3, [pc, #388]	; (8014a14 <tcp_input+0x734>)
 801488e:	881b      	ldrh	r3, [r3, #0]
 8014890:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8014892:	69fb      	ldr	r3, [r7, #28]
 8014894:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014898:	2b00      	cmp	r3, #0
 801489a:	d00a      	beq.n	80148b2 <tcp_input+0x5d2>
 801489c:	69fb      	ldr	r3, [r7, #28]
 801489e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80148a2:	69fa      	ldr	r2, [r7, #28]
 80148a4:	6910      	ldr	r0, [r2, #16]
 80148a6:	89fa      	ldrh	r2, [r7, #14]
 80148a8:	69f9      	ldr	r1, [r7, #28]
 80148aa:	4798      	blx	r3
 80148ac:	4603      	mov	r3, r0
 80148ae:	74fb      	strb	r3, [r7, #19]
 80148b0:	e001      	b.n	80148b6 <tcp_input+0x5d6>
 80148b2:	2300      	movs	r3, #0
 80148b4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80148b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80148ba:	f113 0f0d 	cmn.w	r3, #13
 80148be:	f000 8098 	beq.w	80149f2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80148c2:	4b54      	ldr	r3, [pc, #336]	; (8014a14 <tcp_input+0x734>)
 80148c4:	2200      	movs	r2, #0
 80148c6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80148c8:	69f8      	ldr	r0, [r7, #28]
 80148ca:	f000 f915 	bl	8014af8 <tcp_input_delayed_close>
 80148ce:	4603      	mov	r3, r0
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	f040 8090 	bne.w	80149f6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80148d6:	4b4d      	ldr	r3, [pc, #308]	; (8014a0c <tcp_input+0x72c>)
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d041      	beq.n	8014962 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80148de:	69fb      	ldr	r3, [r7, #28]
 80148e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d006      	beq.n	80148f4 <tcp_input+0x614>
 80148e6:	4b50      	ldr	r3, [pc, #320]	; (8014a28 <tcp_input+0x748>)
 80148e8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80148ec:	494f      	ldr	r1, [pc, #316]	; (8014a2c <tcp_input+0x74c>)
 80148ee:	4850      	ldr	r0, [pc, #320]	; (8014a30 <tcp_input+0x750>)
 80148f0:	f007 f850 	bl	801b994 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80148f4:	69fb      	ldr	r3, [r7, #28]
 80148f6:	8b5b      	ldrh	r3, [r3, #26]
 80148f8:	f003 0310 	and.w	r3, r3, #16
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d008      	beq.n	8014912 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8014900:	4b42      	ldr	r3, [pc, #264]	; (8014a0c <tcp_input+0x72c>)
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	4618      	mov	r0, r3
 8014906:	f7fd fcaf 	bl	8012268 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801490a:	69f8      	ldr	r0, [r7, #28]
 801490c:	f7fe fa9c 	bl	8012e48 <tcp_abort>
            goto aborted;
 8014910:	e091      	b.n	8014a36 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8014912:	69fb      	ldr	r3, [r7, #28]
 8014914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014918:	2b00      	cmp	r3, #0
 801491a:	d00c      	beq.n	8014936 <tcp_input+0x656>
 801491c:	69fb      	ldr	r3, [r7, #28]
 801491e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014922:	69fb      	ldr	r3, [r7, #28]
 8014924:	6918      	ldr	r0, [r3, #16]
 8014926:	4b39      	ldr	r3, [pc, #228]	; (8014a0c <tcp_input+0x72c>)
 8014928:	681a      	ldr	r2, [r3, #0]
 801492a:	2300      	movs	r3, #0
 801492c:	69f9      	ldr	r1, [r7, #28]
 801492e:	47a0      	blx	r4
 8014930:	4603      	mov	r3, r0
 8014932:	74fb      	strb	r3, [r7, #19]
 8014934:	e008      	b.n	8014948 <tcp_input+0x668>
 8014936:	4b35      	ldr	r3, [pc, #212]	; (8014a0c <tcp_input+0x72c>)
 8014938:	681a      	ldr	r2, [r3, #0]
 801493a:	2300      	movs	r3, #0
 801493c:	69f9      	ldr	r1, [r7, #28]
 801493e:	2000      	movs	r0, #0
 8014940:	f7ff f890 	bl	8013a64 <tcp_recv_null>
 8014944:	4603      	mov	r3, r0
 8014946:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8014948:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801494c:	f113 0f0d 	cmn.w	r3, #13
 8014950:	d053      	beq.n	80149fa <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8014952:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d003      	beq.n	8014962 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801495a:	4b2c      	ldr	r3, [pc, #176]	; (8014a0c <tcp_input+0x72c>)
 801495c:	681a      	ldr	r2, [r3, #0]
 801495e:	69fb      	ldr	r3, [r7, #28]
 8014960:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8014962:	4b2b      	ldr	r3, [pc, #172]	; (8014a10 <tcp_input+0x730>)
 8014964:	781b      	ldrb	r3, [r3, #0]
 8014966:	f003 0320 	and.w	r3, r3, #32
 801496a:	2b00      	cmp	r3, #0
 801496c:	d030      	beq.n	80149d0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801496e:	69fb      	ldr	r3, [r7, #28]
 8014970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014972:	2b00      	cmp	r3, #0
 8014974:	d009      	beq.n	801498a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8014976:	69fb      	ldr	r3, [r7, #28]
 8014978:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801497a:	7b5a      	ldrb	r2, [r3, #13]
 801497c:	69fb      	ldr	r3, [r7, #28]
 801497e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014980:	f042 0220 	orr.w	r2, r2, #32
 8014984:	b2d2      	uxtb	r2, r2
 8014986:	735a      	strb	r2, [r3, #13]
 8014988:	e022      	b.n	80149d0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801498a:	69fb      	ldr	r3, [r7, #28]
 801498c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801498e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8014992:	d005      	beq.n	80149a0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8014994:	69fb      	ldr	r3, [r7, #28]
 8014996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014998:	3301      	adds	r3, #1
 801499a:	b29a      	uxth	r2, r3
 801499c:	69fb      	ldr	r3, [r7, #28]
 801499e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80149a0:	69fb      	ldr	r3, [r7, #28]
 80149a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d00b      	beq.n	80149c2 <tcp_input+0x6e2>
 80149aa:	69fb      	ldr	r3, [r7, #28]
 80149ac:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80149b0:	69fb      	ldr	r3, [r7, #28]
 80149b2:	6918      	ldr	r0, [r3, #16]
 80149b4:	2300      	movs	r3, #0
 80149b6:	2200      	movs	r2, #0
 80149b8:	69f9      	ldr	r1, [r7, #28]
 80149ba:	47a0      	blx	r4
 80149bc:	4603      	mov	r3, r0
 80149be:	74fb      	strb	r3, [r7, #19]
 80149c0:	e001      	b.n	80149c6 <tcp_input+0x6e6>
 80149c2:	2300      	movs	r3, #0
 80149c4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80149c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80149ca:	f113 0f0d 	cmn.w	r3, #13
 80149ce:	d016      	beq.n	80149fe <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80149d0:	4b13      	ldr	r3, [pc, #76]	; (8014a20 <tcp_input+0x740>)
 80149d2:	2200      	movs	r2, #0
 80149d4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80149d6:	69f8      	ldr	r0, [r7, #28]
 80149d8:	f000 f88e 	bl	8014af8 <tcp_input_delayed_close>
 80149dc:	4603      	mov	r3, r0
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d128      	bne.n	8014a34 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80149e2:	69f8      	ldr	r0, [r7, #28]
 80149e4:	f002 ff20 	bl	8017828 <tcp_output>
 80149e8:	e025      	b.n	8014a36 <tcp_input+0x756>
        goto aborted;
 80149ea:	bf00      	nop
 80149ec:	e023      	b.n	8014a36 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80149ee:	bf00      	nop
 80149f0:	e021      	b.n	8014a36 <tcp_input+0x756>
              goto aborted;
 80149f2:	bf00      	nop
 80149f4:	e01f      	b.n	8014a36 <tcp_input+0x756>
          goto aborted;
 80149f6:	bf00      	nop
 80149f8:	e01d      	b.n	8014a36 <tcp_input+0x756>
            goto aborted;
 80149fa:	bf00      	nop
 80149fc:	e01b      	b.n	8014a36 <tcp_input+0x756>
              goto aborted;
 80149fe:	bf00      	nop
 8014a00:	e019      	b.n	8014a36 <tcp_input+0x756>
 8014a02:	bf00      	nop
 8014a04:	200110a4 	.word	0x200110a4
 8014a08:	200110b4 	.word	0x200110b4
 8014a0c:	200110d4 	.word	0x200110d4
 8014a10:	200110d1 	.word	0x200110d1
 8014a14:	200110cc 	.word	0x200110cc
 8014a18:	200110d0 	.word	0x200110d0
 8014a1c:	200110ce 	.word	0x200110ce
 8014a20:	200110d8 	.word	0x200110d8
 8014a24:	20011098 	.word	0x20011098
 8014a28:	0801ee18 	.word	0x0801ee18
 8014a2c:	0801efcc 	.word	0x0801efcc
 8014a30:	0801ee64 	.word	0x0801ee64
          goto aborted;
 8014a34:	bf00      	nop
    tcp_input_pcb = NULL;
 8014a36:	4b27      	ldr	r3, [pc, #156]	; (8014ad4 <tcp_input+0x7f4>)
 8014a38:	2200      	movs	r2, #0
 8014a3a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8014a3c:	4b26      	ldr	r3, [pc, #152]	; (8014ad8 <tcp_input+0x7f8>)
 8014a3e:	2200      	movs	r2, #0
 8014a40:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8014a42:	4b26      	ldr	r3, [pc, #152]	; (8014adc <tcp_input+0x7fc>)
 8014a44:	685b      	ldr	r3, [r3, #4]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d03f      	beq.n	8014aca <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8014a4a:	4b24      	ldr	r3, [pc, #144]	; (8014adc <tcp_input+0x7fc>)
 8014a4c:	685b      	ldr	r3, [r3, #4]
 8014a4e:	4618      	mov	r0, r3
 8014a50:	f7fd fc0a 	bl	8012268 <pbuf_free>
      inseg.p = NULL;
 8014a54:	4b21      	ldr	r3, [pc, #132]	; (8014adc <tcp_input+0x7fc>)
 8014a56:	2200      	movs	r2, #0
 8014a58:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8014a5a:	e036      	b.n	8014aca <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8014a5c:	4b20      	ldr	r3, [pc, #128]	; (8014ae0 <tcp_input+0x800>)
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	899b      	ldrh	r3, [r3, #12]
 8014a62:	b29b      	uxth	r3, r3
 8014a64:	4618      	mov	r0, r3
 8014a66:	f7fb ffdb 	bl	8010a20 <lwip_htons>
 8014a6a:	4603      	mov	r3, r0
 8014a6c:	b2db      	uxtb	r3, r3
 8014a6e:	f003 0304 	and.w	r3, r3, #4
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d118      	bne.n	8014aa8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014a76:	4b1b      	ldr	r3, [pc, #108]	; (8014ae4 <tcp_input+0x804>)
 8014a78:	6819      	ldr	r1, [r3, #0]
 8014a7a:	4b1b      	ldr	r3, [pc, #108]	; (8014ae8 <tcp_input+0x808>)
 8014a7c:	881b      	ldrh	r3, [r3, #0]
 8014a7e:	461a      	mov	r2, r3
 8014a80:	4b1a      	ldr	r3, [pc, #104]	; (8014aec <tcp_input+0x80c>)
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014a86:	4b16      	ldr	r3, [pc, #88]	; (8014ae0 <tcp_input+0x800>)
 8014a88:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014a8a:	885b      	ldrh	r3, [r3, #2]
 8014a8c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014a8e:	4a14      	ldr	r2, [pc, #80]	; (8014ae0 <tcp_input+0x800>)
 8014a90:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014a92:	8812      	ldrh	r2, [r2, #0]
 8014a94:	b292      	uxth	r2, r2
 8014a96:	9202      	str	r2, [sp, #8]
 8014a98:	9301      	str	r3, [sp, #4]
 8014a9a:	4b15      	ldr	r3, [pc, #84]	; (8014af0 <tcp_input+0x810>)
 8014a9c:	9300      	str	r3, [sp, #0]
 8014a9e:	4b15      	ldr	r3, [pc, #84]	; (8014af4 <tcp_input+0x814>)
 8014aa0:	4602      	mov	r2, r0
 8014aa2:	2000      	movs	r0, #0
 8014aa4:	f003 fc74 	bl	8018390 <tcp_rst>
    pbuf_free(p);
 8014aa8:	6878      	ldr	r0, [r7, #4]
 8014aaa:	f7fd fbdd 	bl	8012268 <pbuf_free>
  return;
 8014aae:	e00c      	b.n	8014aca <tcp_input+0x7ea>
    goto dropped;
 8014ab0:	bf00      	nop
 8014ab2:	e006      	b.n	8014ac2 <tcp_input+0x7e2>
    goto dropped;
 8014ab4:	bf00      	nop
 8014ab6:	e004      	b.n	8014ac2 <tcp_input+0x7e2>
    goto dropped;
 8014ab8:	bf00      	nop
 8014aba:	e002      	b.n	8014ac2 <tcp_input+0x7e2>
      goto dropped;
 8014abc:	bf00      	nop
 8014abe:	e000      	b.n	8014ac2 <tcp_input+0x7e2>
      goto dropped;
 8014ac0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8014ac2:	6878      	ldr	r0, [r7, #4]
 8014ac4:	f7fd fbd0 	bl	8012268 <pbuf_free>
 8014ac8:	e000      	b.n	8014acc <tcp_input+0x7ec>
  return;
 8014aca:	bf00      	nop
}
 8014acc:	3724      	adds	r7, #36	; 0x24
 8014ace:	46bd      	mov	sp, r7
 8014ad0:	bd90      	pop	{r4, r7, pc}
 8014ad2:	bf00      	nop
 8014ad4:	200110d8 	.word	0x200110d8
 8014ad8:	200110d4 	.word	0x200110d4
 8014adc:	200110a4 	.word	0x200110a4
 8014ae0:	200110b4 	.word	0x200110b4
 8014ae4:	200110c8 	.word	0x200110c8
 8014ae8:	200110ce 	.word	0x200110ce
 8014aec:	200110c4 	.word	0x200110c4
 8014af0:	2000d948 	.word	0x2000d948
 8014af4:	2000d94c 	.word	0x2000d94c

08014af8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b082      	sub	sp, #8
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d106      	bne.n	8014b14 <tcp_input_delayed_close+0x1c>
 8014b06:	4b17      	ldr	r3, [pc, #92]	; (8014b64 <tcp_input_delayed_close+0x6c>)
 8014b08:	f240 225a 	movw	r2, #602	; 0x25a
 8014b0c:	4916      	ldr	r1, [pc, #88]	; (8014b68 <tcp_input_delayed_close+0x70>)
 8014b0e:	4817      	ldr	r0, [pc, #92]	; (8014b6c <tcp_input_delayed_close+0x74>)
 8014b10:	f006 ff40 	bl	801b994 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8014b14:	4b16      	ldr	r3, [pc, #88]	; (8014b70 <tcp_input_delayed_close+0x78>)
 8014b16:	781b      	ldrb	r3, [r3, #0]
 8014b18:	f003 0310 	and.w	r3, r3, #16
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d01c      	beq.n	8014b5a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	8b5b      	ldrh	r3, [r3, #26]
 8014b24:	f003 0310 	and.w	r3, r3, #16
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d10d      	bne.n	8014b48 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d008      	beq.n	8014b48 <tcp_input_delayed_close+0x50>
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014b3c:	687a      	ldr	r2, [r7, #4]
 8014b3e:	6912      	ldr	r2, [r2, #16]
 8014b40:	f06f 010e 	mvn.w	r1, #14
 8014b44:	4610      	mov	r0, r2
 8014b46:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014b48:	6879      	ldr	r1, [r7, #4]
 8014b4a:	480a      	ldr	r0, [pc, #40]	; (8014b74 <tcp_input_delayed_close+0x7c>)
 8014b4c:	f7ff fa50 	bl	8013ff0 <tcp_pcb_remove>
    tcp_free(pcb);
 8014b50:	6878      	ldr	r0, [r7, #4]
 8014b52:	f7fd fe35 	bl	80127c0 <tcp_free>
    return 1;
 8014b56:	2301      	movs	r3, #1
 8014b58:	e000      	b.n	8014b5c <tcp_input_delayed_close+0x64>
  }
  return 0;
 8014b5a:	2300      	movs	r3, #0
}
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	3708      	adds	r7, #8
 8014b60:	46bd      	mov	sp, r7
 8014b62:	bd80      	pop	{r7, pc}
 8014b64:	0801ee18 	.word	0x0801ee18
 8014b68:	0801efe8 	.word	0x0801efe8
 8014b6c:	0801ee64 	.word	0x0801ee64
 8014b70:	200110d1 	.word	0x200110d1
 8014b74:	20011098 	.word	0x20011098

08014b78 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8014b78:	b590      	push	{r4, r7, lr}
 8014b7a:	b08b      	sub	sp, #44	; 0x2c
 8014b7c:	af04      	add	r7, sp, #16
 8014b7e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8014b80:	4b6f      	ldr	r3, [pc, #444]	; (8014d40 <tcp_listen_input+0x1c8>)
 8014b82:	781b      	ldrb	r3, [r3, #0]
 8014b84:	f003 0304 	and.w	r3, r3, #4
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	f040 80d2 	bne.w	8014d32 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d106      	bne.n	8014ba2 <tcp_listen_input+0x2a>
 8014b94:	4b6b      	ldr	r3, [pc, #428]	; (8014d44 <tcp_listen_input+0x1cc>)
 8014b96:	f240 2281 	movw	r2, #641	; 0x281
 8014b9a:	496b      	ldr	r1, [pc, #428]	; (8014d48 <tcp_listen_input+0x1d0>)
 8014b9c:	486b      	ldr	r0, [pc, #428]	; (8014d4c <tcp_listen_input+0x1d4>)
 8014b9e:	f006 fef9 	bl	801b994 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8014ba2:	4b67      	ldr	r3, [pc, #412]	; (8014d40 <tcp_listen_input+0x1c8>)
 8014ba4:	781b      	ldrb	r3, [r3, #0]
 8014ba6:	f003 0310 	and.w	r3, r3, #16
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d019      	beq.n	8014be2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014bae:	4b68      	ldr	r3, [pc, #416]	; (8014d50 <tcp_listen_input+0x1d8>)
 8014bb0:	6819      	ldr	r1, [r3, #0]
 8014bb2:	4b68      	ldr	r3, [pc, #416]	; (8014d54 <tcp_listen_input+0x1dc>)
 8014bb4:	881b      	ldrh	r3, [r3, #0]
 8014bb6:	461a      	mov	r2, r3
 8014bb8:	4b67      	ldr	r3, [pc, #412]	; (8014d58 <tcp_listen_input+0x1e0>)
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014bbe:	4b67      	ldr	r3, [pc, #412]	; (8014d5c <tcp_listen_input+0x1e4>)
 8014bc0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014bc2:	885b      	ldrh	r3, [r3, #2]
 8014bc4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014bc6:	4a65      	ldr	r2, [pc, #404]	; (8014d5c <tcp_listen_input+0x1e4>)
 8014bc8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014bca:	8812      	ldrh	r2, [r2, #0]
 8014bcc:	b292      	uxth	r2, r2
 8014bce:	9202      	str	r2, [sp, #8]
 8014bd0:	9301      	str	r3, [sp, #4]
 8014bd2:	4b63      	ldr	r3, [pc, #396]	; (8014d60 <tcp_listen_input+0x1e8>)
 8014bd4:	9300      	str	r3, [sp, #0]
 8014bd6:	4b63      	ldr	r3, [pc, #396]	; (8014d64 <tcp_listen_input+0x1ec>)
 8014bd8:	4602      	mov	r2, r0
 8014bda:	6878      	ldr	r0, [r7, #4]
 8014bdc:	f003 fbd8 	bl	8018390 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8014be0:	e0a9      	b.n	8014d36 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8014be2:	4b57      	ldr	r3, [pc, #348]	; (8014d40 <tcp_listen_input+0x1c8>)
 8014be4:	781b      	ldrb	r3, [r3, #0]
 8014be6:	f003 0302 	and.w	r3, r3, #2
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	f000 80a3 	beq.w	8014d36 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	7d5b      	ldrb	r3, [r3, #21]
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	f7ff f859 	bl	8013cac <tcp_alloc>
 8014bfa:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8014bfc:	697b      	ldr	r3, [r7, #20]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d111      	bne.n	8014c26 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	699b      	ldr	r3, [r3, #24]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d00a      	beq.n	8014c20 <tcp_listen_input+0xa8>
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	699b      	ldr	r3, [r3, #24]
 8014c0e:	687a      	ldr	r2, [r7, #4]
 8014c10:	6910      	ldr	r0, [r2, #16]
 8014c12:	f04f 32ff 	mov.w	r2, #4294967295
 8014c16:	2100      	movs	r1, #0
 8014c18:	4798      	blx	r3
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	73bb      	strb	r3, [r7, #14]
      return;
 8014c1e:	e08b      	b.n	8014d38 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014c20:	23f0      	movs	r3, #240	; 0xf0
 8014c22:	73bb      	strb	r3, [r7, #14]
      return;
 8014c24:	e088      	b.n	8014d38 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8014c26:	4b50      	ldr	r3, [pc, #320]	; (8014d68 <tcp_listen_input+0x1f0>)
 8014c28:	695a      	ldr	r2, [r3, #20]
 8014c2a:	697b      	ldr	r3, [r7, #20]
 8014c2c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8014c2e:	4b4e      	ldr	r3, [pc, #312]	; (8014d68 <tcp_listen_input+0x1f0>)
 8014c30:	691a      	ldr	r2, [r3, #16]
 8014c32:	697b      	ldr	r3, [r7, #20]
 8014c34:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	8ada      	ldrh	r2, [r3, #22]
 8014c3a:	697b      	ldr	r3, [r7, #20]
 8014c3c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8014c3e:	4b47      	ldr	r3, [pc, #284]	; (8014d5c <tcp_listen_input+0x1e4>)
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	881b      	ldrh	r3, [r3, #0]
 8014c44:	b29a      	uxth	r2, r3
 8014c46:	697b      	ldr	r3, [r7, #20]
 8014c48:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8014c4a:	697b      	ldr	r3, [r7, #20]
 8014c4c:	2203      	movs	r2, #3
 8014c4e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8014c50:	4b41      	ldr	r3, [pc, #260]	; (8014d58 <tcp_listen_input+0x1e0>)
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	1c5a      	adds	r2, r3, #1
 8014c56:	697b      	ldr	r3, [r7, #20]
 8014c58:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8014c5a:	697b      	ldr	r3, [r7, #20]
 8014c5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014c5e:	697b      	ldr	r3, [r7, #20]
 8014c60:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8014c62:	6978      	ldr	r0, [r7, #20]
 8014c64:	f7ff fa58 	bl	8014118 <tcp_next_iss>
 8014c68:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8014c6a:	697b      	ldr	r3, [r7, #20]
 8014c6c:	693a      	ldr	r2, [r7, #16]
 8014c6e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8014c70:	697b      	ldr	r3, [r7, #20]
 8014c72:	693a      	ldr	r2, [r7, #16]
 8014c74:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8014c76:	697b      	ldr	r3, [r7, #20]
 8014c78:	693a      	ldr	r2, [r7, #16]
 8014c7a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8014c7c:	697b      	ldr	r3, [r7, #20]
 8014c7e:	693a      	ldr	r2, [r7, #16]
 8014c80:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8014c82:	4b35      	ldr	r3, [pc, #212]	; (8014d58 <tcp_listen_input+0x1e0>)
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	1e5a      	subs	r2, r3, #1
 8014c88:	697b      	ldr	r3, [r7, #20]
 8014c8a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	691a      	ldr	r2, [r3, #16]
 8014c90:	697b      	ldr	r3, [r7, #20]
 8014c92:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014c94:	697b      	ldr	r3, [r7, #20]
 8014c96:	687a      	ldr	r2, [r7, #4]
 8014c98:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	7a5b      	ldrb	r3, [r3, #9]
 8014c9e:	f003 030c 	and.w	r3, r3, #12
 8014ca2:	b2da      	uxtb	r2, r3
 8014ca4:	697b      	ldr	r3, [r7, #20]
 8014ca6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	7a1a      	ldrb	r2, [r3, #8]
 8014cac:	697b      	ldr	r3, [r7, #20]
 8014cae:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8014cb0:	4b2e      	ldr	r3, [pc, #184]	; (8014d6c <tcp_listen_input+0x1f4>)
 8014cb2:	681a      	ldr	r2, [r3, #0]
 8014cb4:	697b      	ldr	r3, [r7, #20]
 8014cb6:	60da      	str	r2, [r3, #12]
 8014cb8:	4a2c      	ldr	r2, [pc, #176]	; (8014d6c <tcp_listen_input+0x1f4>)
 8014cba:	697b      	ldr	r3, [r7, #20]
 8014cbc:	6013      	str	r3, [r2, #0]
 8014cbe:	f003 fd29 	bl	8018714 <tcp_timer_needed>
 8014cc2:	4b2b      	ldr	r3, [pc, #172]	; (8014d70 <tcp_listen_input+0x1f8>)
 8014cc4:	2201      	movs	r2, #1
 8014cc6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014cc8:	6978      	ldr	r0, [r7, #20]
 8014cca:	f001 fd8f 	bl	80167ec <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8014cce:	4b23      	ldr	r3, [pc, #140]	; (8014d5c <tcp_listen_input+0x1e4>)
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	89db      	ldrh	r3, [r3, #14]
 8014cd4:	b29a      	uxth	r2, r3
 8014cd6:	697b      	ldr	r3, [r7, #20]
 8014cd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014cdc:	697b      	ldr	r3, [r7, #20]
 8014cde:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014ce2:	697b      	ldr	r3, [r7, #20]
 8014ce4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014ce8:	697b      	ldr	r3, [r7, #20]
 8014cea:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014cec:	697b      	ldr	r3, [r7, #20]
 8014cee:	3304      	adds	r3, #4
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	f005 fa63 	bl	801a1bc <ip4_route>
 8014cf6:	4601      	mov	r1, r0
 8014cf8:	697b      	ldr	r3, [r7, #20]
 8014cfa:	3304      	adds	r3, #4
 8014cfc:	461a      	mov	r2, r3
 8014cfe:	4620      	mov	r0, r4
 8014d00:	f7ff fa30 	bl	8014164 <tcp_eff_send_mss_netif>
 8014d04:	4603      	mov	r3, r0
 8014d06:	461a      	mov	r2, r3
 8014d08:	697b      	ldr	r3, [r7, #20]
 8014d0a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8014d0c:	2112      	movs	r1, #18
 8014d0e:	6978      	ldr	r0, [r7, #20]
 8014d10:	f002 fc9c 	bl	801764c <tcp_enqueue_flags>
 8014d14:	4603      	mov	r3, r0
 8014d16:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8014d18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d004      	beq.n	8014d2a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014d20:	2100      	movs	r1, #0
 8014d22:	6978      	ldr	r0, [r7, #20]
 8014d24:	f7fd ffd2 	bl	8012ccc <tcp_abandon>
      return;
 8014d28:	e006      	b.n	8014d38 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8014d2a:	6978      	ldr	r0, [r7, #20]
 8014d2c:	f002 fd7c 	bl	8017828 <tcp_output>
  return;
 8014d30:	e001      	b.n	8014d36 <tcp_listen_input+0x1be>
    return;
 8014d32:	bf00      	nop
 8014d34:	e000      	b.n	8014d38 <tcp_listen_input+0x1c0>
  return;
 8014d36:	bf00      	nop
}
 8014d38:	371c      	adds	r7, #28
 8014d3a:	46bd      	mov	sp, r7
 8014d3c:	bd90      	pop	{r4, r7, pc}
 8014d3e:	bf00      	nop
 8014d40:	200110d0 	.word	0x200110d0
 8014d44:	0801ee18 	.word	0x0801ee18
 8014d48:	0801f010 	.word	0x0801f010
 8014d4c:	0801ee64 	.word	0x0801ee64
 8014d50:	200110c8 	.word	0x200110c8
 8014d54:	200110ce 	.word	0x200110ce
 8014d58:	200110c4 	.word	0x200110c4
 8014d5c:	200110b4 	.word	0x200110b4
 8014d60:	2000d948 	.word	0x2000d948
 8014d64:	2000d94c 	.word	0x2000d94c
 8014d68:	2000d938 	.word	0x2000d938
 8014d6c:	20011098 	.word	0x20011098
 8014d70:	200110a0 	.word	0x200110a0

08014d74 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b086      	sub	sp, #24
 8014d78:	af04      	add	r7, sp, #16
 8014d7a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014d7c:	4b2f      	ldr	r3, [pc, #188]	; (8014e3c <tcp_timewait_input+0xc8>)
 8014d7e:	781b      	ldrb	r3, [r3, #0]
 8014d80:	f003 0304 	and.w	r3, r3, #4
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d153      	bne.n	8014e30 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d106      	bne.n	8014d9c <tcp_timewait_input+0x28>
 8014d8e:	4b2c      	ldr	r3, [pc, #176]	; (8014e40 <tcp_timewait_input+0xcc>)
 8014d90:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014d94:	492b      	ldr	r1, [pc, #172]	; (8014e44 <tcp_timewait_input+0xd0>)
 8014d96:	482c      	ldr	r0, [pc, #176]	; (8014e48 <tcp_timewait_input+0xd4>)
 8014d98:	f006 fdfc 	bl	801b994 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014d9c:	4b27      	ldr	r3, [pc, #156]	; (8014e3c <tcp_timewait_input+0xc8>)
 8014d9e:	781b      	ldrb	r3, [r3, #0]
 8014da0:	f003 0302 	and.w	r3, r3, #2
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d02a      	beq.n	8014dfe <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014da8:	4b28      	ldr	r3, [pc, #160]	; (8014e4c <tcp_timewait_input+0xd8>)
 8014daa:	681a      	ldr	r2, [r3, #0]
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014db0:	1ad3      	subs	r3, r2, r3
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	db2d      	blt.n	8014e12 <tcp_timewait_input+0x9e>
 8014db6:	4b25      	ldr	r3, [pc, #148]	; (8014e4c <tcp_timewait_input+0xd8>)
 8014db8:	681a      	ldr	r2, [r3, #0]
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dbe:	6879      	ldr	r1, [r7, #4]
 8014dc0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014dc2:	440b      	add	r3, r1
 8014dc4:	1ad3      	subs	r3, r2, r3
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	dc23      	bgt.n	8014e12 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014dca:	4b21      	ldr	r3, [pc, #132]	; (8014e50 <tcp_timewait_input+0xdc>)
 8014dcc:	6819      	ldr	r1, [r3, #0]
 8014dce:	4b21      	ldr	r3, [pc, #132]	; (8014e54 <tcp_timewait_input+0xe0>)
 8014dd0:	881b      	ldrh	r3, [r3, #0]
 8014dd2:	461a      	mov	r2, r3
 8014dd4:	4b1d      	ldr	r3, [pc, #116]	; (8014e4c <tcp_timewait_input+0xd8>)
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014dda:	4b1f      	ldr	r3, [pc, #124]	; (8014e58 <tcp_timewait_input+0xe4>)
 8014ddc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014dde:	885b      	ldrh	r3, [r3, #2]
 8014de0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014de2:	4a1d      	ldr	r2, [pc, #116]	; (8014e58 <tcp_timewait_input+0xe4>)
 8014de4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014de6:	8812      	ldrh	r2, [r2, #0]
 8014de8:	b292      	uxth	r2, r2
 8014dea:	9202      	str	r2, [sp, #8]
 8014dec:	9301      	str	r3, [sp, #4]
 8014dee:	4b1b      	ldr	r3, [pc, #108]	; (8014e5c <tcp_timewait_input+0xe8>)
 8014df0:	9300      	str	r3, [sp, #0]
 8014df2:	4b1b      	ldr	r3, [pc, #108]	; (8014e60 <tcp_timewait_input+0xec>)
 8014df4:	4602      	mov	r2, r0
 8014df6:	6878      	ldr	r0, [r7, #4]
 8014df8:	f003 faca 	bl	8018390 <tcp_rst>
      return;
 8014dfc:	e01b      	b.n	8014e36 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8014dfe:	4b0f      	ldr	r3, [pc, #60]	; (8014e3c <tcp_timewait_input+0xc8>)
 8014e00:	781b      	ldrb	r3, [r3, #0]
 8014e02:	f003 0301 	and.w	r3, r3, #1
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d003      	beq.n	8014e12 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8014e0a:	4b16      	ldr	r3, [pc, #88]	; (8014e64 <tcp_timewait_input+0xf0>)
 8014e0c:	681a      	ldr	r2, [r3, #0]
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8014e12:	4b10      	ldr	r3, [pc, #64]	; (8014e54 <tcp_timewait_input+0xe0>)
 8014e14:	881b      	ldrh	r3, [r3, #0]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d00c      	beq.n	8014e34 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	8b5b      	ldrh	r3, [r3, #26]
 8014e1e:	f043 0302 	orr.w	r3, r3, #2
 8014e22:	b29a      	uxth	r2, r3
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014e28:	6878      	ldr	r0, [r7, #4]
 8014e2a:	f002 fcfd 	bl	8017828 <tcp_output>
  }
  return;
 8014e2e:	e001      	b.n	8014e34 <tcp_timewait_input+0xc0>
    return;
 8014e30:	bf00      	nop
 8014e32:	e000      	b.n	8014e36 <tcp_timewait_input+0xc2>
  return;
 8014e34:	bf00      	nop
}
 8014e36:	3708      	adds	r7, #8
 8014e38:	46bd      	mov	sp, r7
 8014e3a:	bd80      	pop	{r7, pc}
 8014e3c:	200110d0 	.word	0x200110d0
 8014e40:	0801ee18 	.word	0x0801ee18
 8014e44:	0801f030 	.word	0x0801f030
 8014e48:	0801ee64 	.word	0x0801ee64
 8014e4c:	200110c4 	.word	0x200110c4
 8014e50:	200110c8 	.word	0x200110c8
 8014e54:	200110ce 	.word	0x200110ce
 8014e58:	200110b4 	.word	0x200110b4
 8014e5c:	2000d948 	.word	0x2000d948
 8014e60:	2000d94c 	.word	0x2000d94c
 8014e64:	2001108c 	.word	0x2001108c

08014e68 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014e68:	b590      	push	{r4, r7, lr}
 8014e6a:	b08d      	sub	sp, #52	; 0x34
 8014e6c:	af04      	add	r7, sp, #16
 8014e6e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014e70:	2300      	movs	r3, #0
 8014e72:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8014e74:	2300      	movs	r3, #0
 8014e76:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d106      	bne.n	8014e8c <tcp_process+0x24>
 8014e7e:	4b9d      	ldr	r3, [pc, #628]	; (80150f4 <tcp_process+0x28c>)
 8014e80:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8014e84:	499c      	ldr	r1, [pc, #624]	; (80150f8 <tcp_process+0x290>)
 8014e86:	489d      	ldr	r0, [pc, #628]	; (80150fc <tcp_process+0x294>)
 8014e88:	f006 fd84 	bl	801b994 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014e8c:	4b9c      	ldr	r3, [pc, #624]	; (8015100 <tcp_process+0x298>)
 8014e8e:	781b      	ldrb	r3, [r3, #0]
 8014e90:	f003 0304 	and.w	r3, r3, #4
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d04e      	beq.n	8014f36 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	7d1b      	ldrb	r3, [r3, #20]
 8014e9c:	2b02      	cmp	r3, #2
 8014e9e:	d108      	bne.n	8014eb2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014ea4:	4b97      	ldr	r3, [pc, #604]	; (8015104 <tcp_process+0x29c>)
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	429a      	cmp	r2, r3
 8014eaa:	d123      	bne.n	8014ef4 <tcp_process+0x8c>
        acceptable = 1;
 8014eac:	2301      	movs	r3, #1
 8014eae:	76fb      	strb	r3, [r7, #27]
 8014eb0:	e020      	b.n	8014ef4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014eb6:	4b94      	ldr	r3, [pc, #592]	; (8015108 <tcp_process+0x2a0>)
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	429a      	cmp	r2, r3
 8014ebc:	d102      	bne.n	8014ec4 <tcp_process+0x5c>
        acceptable = 1;
 8014ebe:	2301      	movs	r3, #1
 8014ec0:	76fb      	strb	r3, [r7, #27]
 8014ec2:	e017      	b.n	8014ef4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014ec4:	4b90      	ldr	r3, [pc, #576]	; (8015108 <tcp_process+0x2a0>)
 8014ec6:	681a      	ldr	r2, [r3, #0]
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ecc:	1ad3      	subs	r3, r2, r3
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	db10      	blt.n	8014ef4 <tcp_process+0x8c>
 8014ed2:	4b8d      	ldr	r3, [pc, #564]	; (8015108 <tcp_process+0x2a0>)
 8014ed4:	681a      	ldr	r2, [r3, #0]
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014eda:	6879      	ldr	r1, [r7, #4]
 8014edc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014ede:	440b      	add	r3, r1
 8014ee0:	1ad3      	subs	r3, r2, r3
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	dc06      	bgt.n	8014ef4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	8b5b      	ldrh	r3, [r3, #26]
 8014eea:	f043 0302 	orr.w	r3, r3, #2
 8014eee:	b29a      	uxth	r2, r3
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8014ef4:	7efb      	ldrb	r3, [r7, #27]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d01b      	beq.n	8014f32 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	7d1b      	ldrb	r3, [r3, #20]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d106      	bne.n	8014f10 <tcp_process+0xa8>
 8014f02:	4b7c      	ldr	r3, [pc, #496]	; (80150f4 <tcp_process+0x28c>)
 8014f04:	f44f 724e 	mov.w	r2, #824	; 0x338
 8014f08:	4980      	ldr	r1, [pc, #512]	; (801510c <tcp_process+0x2a4>)
 8014f0a:	487c      	ldr	r0, [pc, #496]	; (80150fc <tcp_process+0x294>)
 8014f0c:	f006 fd42 	bl	801b994 <iprintf>
      recv_flags |= TF_RESET;
 8014f10:	4b7f      	ldr	r3, [pc, #508]	; (8015110 <tcp_process+0x2a8>)
 8014f12:	781b      	ldrb	r3, [r3, #0]
 8014f14:	f043 0308 	orr.w	r3, r3, #8
 8014f18:	b2da      	uxtb	r2, r3
 8014f1a:	4b7d      	ldr	r3, [pc, #500]	; (8015110 <tcp_process+0x2a8>)
 8014f1c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	8b5b      	ldrh	r3, [r3, #26]
 8014f22:	f023 0301 	bic.w	r3, r3, #1
 8014f26:	b29a      	uxth	r2, r3
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014f2c:	f06f 030d 	mvn.w	r3, #13
 8014f30:	e37a      	b.n	8015628 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8014f32:	2300      	movs	r3, #0
 8014f34:	e378      	b.n	8015628 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8014f36:	4b72      	ldr	r3, [pc, #456]	; (8015100 <tcp_process+0x298>)
 8014f38:	781b      	ldrb	r3, [r3, #0]
 8014f3a:	f003 0302 	and.w	r3, r3, #2
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d010      	beq.n	8014f64 <tcp_process+0xfc>
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	7d1b      	ldrb	r3, [r3, #20]
 8014f46:	2b02      	cmp	r3, #2
 8014f48:	d00c      	beq.n	8014f64 <tcp_process+0xfc>
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	7d1b      	ldrb	r3, [r3, #20]
 8014f4e:	2b03      	cmp	r3, #3
 8014f50:	d008      	beq.n	8014f64 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	8b5b      	ldrh	r3, [r3, #26]
 8014f56:	f043 0302 	orr.w	r3, r3, #2
 8014f5a:	b29a      	uxth	r2, r3
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014f60:	2300      	movs	r3, #0
 8014f62:	e361      	b.n	8015628 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	8b5b      	ldrh	r3, [r3, #26]
 8014f68:	f003 0310 	and.w	r3, r3, #16
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d103      	bne.n	8014f78 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014f70:	4b68      	ldr	r3, [pc, #416]	; (8015114 <tcp_process+0x2ac>)
 8014f72:	681a      	ldr	r2, [r3, #0]
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	2200      	movs	r2, #0
 8014f7c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	2200      	movs	r2, #0
 8014f84:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8014f88:	6878      	ldr	r0, [r7, #4]
 8014f8a:	f001 fc2f 	bl	80167ec <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	7d1b      	ldrb	r3, [r3, #20]
 8014f92:	3b02      	subs	r3, #2
 8014f94:	2b07      	cmp	r3, #7
 8014f96:	f200 8337 	bhi.w	8015608 <tcp_process+0x7a0>
 8014f9a:	a201      	add	r2, pc, #4	; (adr r2, 8014fa0 <tcp_process+0x138>)
 8014f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fa0:	08014fc1 	.word	0x08014fc1
 8014fa4:	080151f1 	.word	0x080151f1
 8014fa8:	08015369 	.word	0x08015369
 8014fac:	08015393 	.word	0x08015393
 8014fb0:	080154b7 	.word	0x080154b7
 8014fb4:	08015369 	.word	0x08015369
 8014fb8:	08015543 	.word	0x08015543
 8014fbc:	080155d3 	.word	0x080155d3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014fc0:	4b4f      	ldr	r3, [pc, #316]	; (8015100 <tcp_process+0x298>)
 8014fc2:	781b      	ldrb	r3, [r3, #0]
 8014fc4:	f003 0310 	and.w	r3, r3, #16
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	f000 80e4 	beq.w	8015196 <tcp_process+0x32e>
 8014fce:	4b4c      	ldr	r3, [pc, #304]	; (8015100 <tcp_process+0x298>)
 8014fd0:	781b      	ldrb	r3, [r3, #0]
 8014fd2:	f003 0302 	and.w	r3, r3, #2
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	f000 80dd 	beq.w	8015196 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014fe0:	1c5a      	adds	r2, r3, #1
 8014fe2:	4b48      	ldr	r3, [pc, #288]	; (8015104 <tcp_process+0x29c>)
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	429a      	cmp	r2, r3
 8014fe8:	f040 80d5 	bne.w	8015196 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014fec:	4b46      	ldr	r3, [pc, #280]	; (8015108 <tcp_process+0x2a0>)
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	1c5a      	adds	r2, r3, #1
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8014ffe:	4b41      	ldr	r3, [pc, #260]	; (8015104 <tcp_process+0x29c>)
 8015000:	681a      	ldr	r2, [r3, #0]
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8015006:	4b44      	ldr	r3, [pc, #272]	; (8015118 <tcp_process+0x2b0>)
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	89db      	ldrh	r3, [r3, #14]
 801500c:	b29a      	uxth	r2, r3
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8015020:	4b39      	ldr	r3, [pc, #228]	; (8015108 <tcp_process+0x2a0>)
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	1e5a      	subs	r2, r3, #1
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	2204      	movs	r2, #4
 801502e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	3304      	adds	r3, #4
 8015038:	4618      	mov	r0, r3
 801503a:	f005 f8bf 	bl	801a1bc <ip4_route>
 801503e:	4601      	mov	r1, r0
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	3304      	adds	r3, #4
 8015044:	461a      	mov	r2, r3
 8015046:	4620      	mov	r0, r4
 8015048:	f7ff f88c 	bl	8014164 <tcp_eff_send_mss_netif>
 801504c:	4603      	mov	r3, r0
 801504e:	461a      	mov	r2, r3
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015058:	009a      	lsls	r2, r3, #2
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801505e:	005b      	lsls	r3, r3, #1
 8015060:	f241 111c 	movw	r1, #4380	; 0x111c
 8015064:	428b      	cmp	r3, r1
 8015066:	bf38      	it	cc
 8015068:	460b      	movcc	r3, r1
 801506a:	429a      	cmp	r2, r3
 801506c:	d204      	bcs.n	8015078 <tcp_process+0x210>
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015072:	009b      	lsls	r3, r3, #2
 8015074:	b29b      	uxth	r3, r3
 8015076:	e00d      	b.n	8015094 <tcp_process+0x22c>
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801507c:	005b      	lsls	r3, r3, #1
 801507e:	f241 121c 	movw	r2, #4380	; 0x111c
 8015082:	4293      	cmp	r3, r2
 8015084:	d904      	bls.n	8015090 <tcp_process+0x228>
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801508a:	005b      	lsls	r3, r3, #1
 801508c:	b29b      	uxth	r3, r3
 801508e:	e001      	b.n	8015094 <tcp_process+0x22c>
 8015090:	f241 131c 	movw	r3, #4380	; 0x111c
 8015094:	687a      	ldr	r2, [r7, #4]
 8015096:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d106      	bne.n	80150b2 <tcp_process+0x24a>
 80150a4:	4b13      	ldr	r3, [pc, #76]	; (80150f4 <tcp_process+0x28c>)
 80150a6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80150aa:	491c      	ldr	r1, [pc, #112]	; (801511c <tcp_process+0x2b4>)
 80150ac:	4813      	ldr	r0, [pc, #76]	; (80150fc <tcp_process+0x294>)
 80150ae:	f006 fc71 	bl	801b994 <iprintf>
        --pcb->snd_queuelen;
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80150b8:	3b01      	subs	r3, #1
 80150ba:	b29a      	uxth	r2, r3
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80150c6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80150c8:	69fb      	ldr	r3, [r7, #28]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d12a      	bne.n	8015124 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150d2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80150d4:	69fb      	ldr	r3, [r7, #28]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d106      	bne.n	80150e8 <tcp_process+0x280>
 80150da:	4b06      	ldr	r3, [pc, #24]	; (80150f4 <tcp_process+0x28c>)
 80150dc:	f44f 725d 	mov.w	r2, #884	; 0x374
 80150e0:	490f      	ldr	r1, [pc, #60]	; (8015120 <tcp_process+0x2b8>)
 80150e2:	4806      	ldr	r0, [pc, #24]	; (80150fc <tcp_process+0x294>)
 80150e4:	f006 fc56 	bl	801b994 <iprintf>
          pcb->unsent = rseg->next;
 80150e8:	69fb      	ldr	r3, [r7, #28]
 80150ea:	681a      	ldr	r2, [r3, #0]
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	66da      	str	r2, [r3, #108]	; 0x6c
 80150f0:	e01c      	b.n	801512c <tcp_process+0x2c4>
 80150f2:	bf00      	nop
 80150f4:	0801ee18 	.word	0x0801ee18
 80150f8:	0801f050 	.word	0x0801f050
 80150fc:	0801ee64 	.word	0x0801ee64
 8015100:	200110d0 	.word	0x200110d0
 8015104:	200110c8 	.word	0x200110c8
 8015108:	200110c4 	.word	0x200110c4
 801510c:	0801f06c 	.word	0x0801f06c
 8015110:	200110d1 	.word	0x200110d1
 8015114:	2001108c 	.word	0x2001108c
 8015118:	200110b4 	.word	0x200110b4
 801511c:	0801f08c 	.word	0x0801f08c
 8015120:	0801f0a4 	.word	0x0801f0a4
        } else {
          pcb->unacked = rseg->next;
 8015124:	69fb      	ldr	r3, [r7, #28]
 8015126:	681a      	ldr	r2, [r3, #0]
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801512c:	69f8      	ldr	r0, [r7, #28]
 801512e:	f7fe fc54 	bl	80139da <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015136:	2b00      	cmp	r3, #0
 8015138:	d104      	bne.n	8015144 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015140:	861a      	strh	r2, [r3, #48]	; 0x30
 8015142:	e006      	b.n	8015152 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	2200      	movs	r2, #0
 8015148:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	2200      	movs	r2, #0
 801514e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015158:	2b00      	cmp	r3, #0
 801515a:	d00a      	beq.n	8015172 <tcp_process+0x30a>
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015162:	687a      	ldr	r2, [r7, #4]
 8015164:	6910      	ldr	r0, [r2, #16]
 8015166:	2200      	movs	r2, #0
 8015168:	6879      	ldr	r1, [r7, #4]
 801516a:	4798      	blx	r3
 801516c:	4603      	mov	r3, r0
 801516e:	76bb      	strb	r3, [r7, #26]
 8015170:	e001      	b.n	8015176 <tcp_process+0x30e>
 8015172:	2300      	movs	r3, #0
 8015174:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8015176:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801517a:	f113 0f0d 	cmn.w	r3, #13
 801517e:	d102      	bne.n	8015186 <tcp_process+0x31e>
          return ERR_ABRT;
 8015180:	f06f 030c 	mvn.w	r3, #12
 8015184:	e250      	b.n	8015628 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	8b5b      	ldrh	r3, [r3, #26]
 801518a:	f043 0302 	orr.w	r3, r3, #2
 801518e:	b29a      	uxth	r2, r3
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8015194:	e23a      	b.n	801560c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8015196:	4b98      	ldr	r3, [pc, #608]	; (80153f8 <tcp_process+0x590>)
 8015198:	781b      	ldrb	r3, [r3, #0]
 801519a:	f003 0310 	and.w	r3, r3, #16
 801519e:	2b00      	cmp	r3, #0
 80151a0:	f000 8234 	beq.w	801560c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80151a4:	4b95      	ldr	r3, [pc, #596]	; (80153fc <tcp_process+0x594>)
 80151a6:	6819      	ldr	r1, [r3, #0]
 80151a8:	4b95      	ldr	r3, [pc, #596]	; (8015400 <tcp_process+0x598>)
 80151aa:	881b      	ldrh	r3, [r3, #0]
 80151ac:	461a      	mov	r2, r3
 80151ae:	4b95      	ldr	r3, [pc, #596]	; (8015404 <tcp_process+0x59c>)
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80151b4:	4b94      	ldr	r3, [pc, #592]	; (8015408 <tcp_process+0x5a0>)
 80151b6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80151b8:	885b      	ldrh	r3, [r3, #2]
 80151ba:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80151bc:	4a92      	ldr	r2, [pc, #584]	; (8015408 <tcp_process+0x5a0>)
 80151be:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80151c0:	8812      	ldrh	r2, [r2, #0]
 80151c2:	b292      	uxth	r2, r2
 80151c4:	9202      	str	r2, [sp, #8]
 80151c6:	9301      	str	r3, [sp, #4]
 80151c8:	4b90      	ldr	r3, [pc, #576]	; (801540c <tcp_process+0x5a4>)
 80151ca:	9300      	str	r3, [sp, #0]
 80151cc:	4b90      	ldr	r3, [pc, #576]	; (8015410 <tcp_process+0x5a8>)
 80151ce:	4602      	mov	r2, r0
 80151d0:	6878      	ldr	r0, [r7, #4]
 80151d2:	f003 f8dd 	bl	8018390 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80151dc:	2b05      	cmp	r3, #5
 80151de:	f200 8215 	bhi.w	801560c <tcp_process+0x7a4>
          pcb->rtime = 0;
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	2200      	movs	r2, #0
 80151e6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80151e8:	6878      	ldr	r0, [r7, #4]
 80151ea:	f002 fea7 	bl	8017f3c <tcp_rexmit_rto>
      break;
 80151ee:	e20d      	b.n	801560c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80151f0:	4b81      	ldr	r3, [pc, #516]	; (80153f8 <tcp_process+0x590>)
 80151f2:	781b      	ldrb	r3, [r3, #0]
 80151f4:	f003 0310 	and.w	r3, r3, #16
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	f000 80a1 	beq.w	8015340 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80151fe:	4b7f      	ldr	r3, [pc, #508]	; (80153fc <tcp_process+0x594>)
 8015200:	681a      	ldr	r2, [r3, #0]
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015206:	1ad3      	subs	r3, r2, r3
 8015208:	3b01      	subs	r3, #1
 801520a:	2b00      	cmp	r3, #0
 801520c:	db7e      	blt.n	801530c <tcp_process+0x4a4>
 801520e:	4b7b      	ldr	r3, [pc, #492]	; (80153fc <tcp_process+0x594>)
 8015210:	681a      	ldr	r2, [r3, #0]
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015216:	1ad3      	subs	r3, r2, r3
 8015218:	2b00      	cmp	r3, #0
 801521a:	dc77      	bgt.n	801530c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	2204      	movs	r2, #4
 8015220:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015226:	2b00      	cmp	r3, #0
 8015228:	d102      	bne.n	8015230 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801522a:	23fa      	movs	r3, #250	; 0xfa
 801522c:	76bb      	strb	r3, [r7, #26]
 801522e:	e01d      	b.n	801526c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015234:	699b      	ldr	r3, [r3, #24]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d106      	bne.n	8015248 <tcp_process+0x3e0>
 801523a:	4b76      	ldr	r3, [pc, #472]	; (8015414 <tcp_process+0x5ac>)
 801523c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8015240:	4975      	ldr	r1, [pc, #468]	; (8015418 <tcp_process+0x5b0>)
 8015242:	4876      	ldr	r0, [pc, #472]	; (801541c <tcp_process+0x5b4>)
 8015244:	f006 fba6 	bl	801b994 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801524c:	699b      	ldr	r3, [r3, #24]
 801524e:	2b00      	cmp	r3, #0
 8015250:	d00a      	beq.n	8015268 <tcp_process+0x400>
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015256:	699b      	ldr	r3, [r3, #24]
 8015258:	687a      	ldr	r2, [r7, #4]
 801525a:	6910      	ldr	r0, [r2, #16]
 801525c:	2200      	movs	r2, #0
 801525e:	6879      	ldr	r1, [r7, #4]
 8015260:	4798      	blx	r3
 8015262:	4603      	mov	r3, r0
 8015264:	76bb      	strb	r3, [r7, #26]
 8015266:	e001      	b.n	801526c <tcp_process+0x404>
 8015268:	23f0      	movs	r3, #240	; 0xf0
 801526a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801526c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d00a      	beq.n	801528a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8015274:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015278:	f113 0f0d 	cmn.w	r3, #13
 801527c:	d002      	beq.n	8015284 <tcp_process+0x41c>
              tcp_abort(pcb);
 801527e:	6878      	ldr	r0, [r7, #4]
 8015280:	f7fd fde2 	bl	8012e48 <tcp_abort>
            }
            return ERR_ABRT;
 8015284:	f06f 030c 	mvn.w	r3, #12
 8015288:	e1ce      	b.n	8015628 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801528a:	6878      	ldr	r0, [r7, #4]
 801528c:	f000 fae0 	bl	8015850 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8015290:	4b63      	ldr	r3, [pc, #396]	; (8015420 <tcp_process+0x5b8>)
 8015292:	881b      	ldrh	r3, [r3, #0]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d005      	beq.n	80152a4 <tcp_process+0x43c>
            recv_acked--;
 8015298:	4b61      	ldr	r3, [pc, #388]	; (8015420 <tcp_process+0x5b8>)
 801529a:	881b      	ldrh	r3, [r3, #0]
 801529c:	3b01      	subs	r3, #1
 801529e:	b29a      	uxth	r2, r3
 80152a0:	4b5f      	ldr	r3, [pc, #380]	; (8015420 <tcp_process+0x5b8>)
 80152a2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80152a8:	009a      	lsls	r2, r3, #2
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80152ae:	005b      	lsls	r3, r3, #1
 80152b0:	f241 111c 	movw	r1, #4380	; 0x111c
 80152b4:	428b      	cmp	r3, r1
 80152b6:	bf38      	it	cc
 80152b8:	460b      	movcc	r3, r1
 80152ba:	429a      	cmp	r2, r3
 80152bc:	d204      	bcs.n	80152c8 <tcp_process+0x460>
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80152c2:	009b      	lsls	r3, r3, #2
 80152c4:	b29b      	uxth	r3, r3
 80152c6:	e00d      	b.n	80152e4 <tcp_process+0x47c>
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80152cc:	005b      	lsls	r3, r3, #1
 80152ce:	f241 121c 	movw	r2, #4380	; 0x111c
 80152d2:	4293      	cmp	r3, r2
 80152d4:	d904      	bls.n	80152e0 <tcp_process+0x478>
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80152da:	005b      	lsls	r3, r3, #1
 80152dc:	b29b      	uxth	r3, r3
 80152de:	e001      	b.n	80152e4 <tcp_process+0x47c>
 80152e0:	f241 131c 	movw	r3, #4380	; 0x111c
 80152e4:	687a      	ldr	r2, [r7, #4]
 80152e6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80152ea:	4b4e      	ldr	r3, [pc, #312]	; (8015424 <tcp_process+0x5bc>)
 80152ec:	781b      	ldrb	r3, [r3, #0]
 80152ee:	f003 0320 	and.w	r3, r3, #32
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d037      	beq.n	8015366 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	8b5b      	ldrh	r3, [r3, #26]
 80152fa:	f043 0302 	orr.w	r3, r3, #2
 80152fe:	b29a      	uxth	r2, r3
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	2207      	movs	r2, #7
 8015308:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801530a:	e02c      	b.n	8015366 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801530c:	4b3b      	ldr	r3, [pc, #236]	; (80153fc <tcp_process+0x594>)
 801530e:	6819      	ldr	r1, [r3, #0]
 8015310:	4b3b      	ldr	r3, [pc, #236]	; (8015400 <tcp_process+0x598>)
 8015312:	881b      	ldrh	r3, [r3, #0]
 8015314:	461a      	mov	r2, r3
 8015316:	4b3b      	ldr	r3, [pc, #236]	; (8015404 <tcp_process+0x59c>)
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801531c:	4b3a      	ldr	r3, [pc, #232]	; (8015408 <tcp_process+0x5a0>)
 801531e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015320:	885b      	ldrh	r3, [r3, #2]
 8015322:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015324:	4a38      	ldr	r2, [pc, #224]	; (8015408 <tcp_process+0x5a0>)
 8015326:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015328:	8812      	ldrh	r2, [r2, #0]
 801532a:	b292      	uxth	r2, r2
 801532c:	9202      	str	r2, [sp, #8]
 801532e:	9301      	str	r3, [sp, #4]
 8015330:	4b36      	ldr	r3, [pc, #216]	; (801540c <tcp_process+0x5a4>)
 8015332:	9300      	str	r3, [sp, #0]
 8015334:	4b36      	ldr	r3, [pc, #216]	; (8015410 <tcp_process+0x5a8>)
 8015336:	4602      	mov	r2, r0
 8015338:	6878      	ldr	r0, [r7, #4]
 801533a:	f003 f829 	bl	8018390 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801533e:	e167      	b.n	8015610 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8015340:	4b2d      	ldr	r3, [pc, #180]	; (80153f8 <tcp_process+0x590>)
 8015342:	781b      	ldrb	r3, [r3, #0]
 8015344:	f003 0302 	and.w	r3, r3, #2
 8015348:	2b00      	cmp	r3, #0
 801534a:	f000 8161 	beq.w	8015610 <tcp_process+0x7a8>
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015352:	1e5a      	subs	r2, r3, #1
 8015354:	4b2b      	ldr	r3, [pc, #172]	; (8015404 <tcp_process+0x59c>)
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	429a      	cmp	r2, r3
 801535a:	f040 8159 	bne.w	8015610 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801535e:	6878      	ldr	r0, [r7, #4]
 8015360:	f002 fe0e 	bl	8017f80 <tcp_rexmit>
      break;
 8015364:	e154      	b.n	8015610 <tcp_process+0x7a8>
 8015366:	e153      	b.n	8015610 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8015368:	6878      	ldr	r0, [r7, #4]
 801536a:	f000 fa71 	bl	8015850 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801536e:	4b2d      	ldr	r3, [pc, #180]	; (8015424 <tcp_process+0x5bc>)
 8015370:	781b      	ldrb	r3, [r3, #0]
 8015372:	f003 0320 	and.w	r3, r3, #32
 8015376:	2b00      	cmp	r3, #0
 8015378:	f000 814c 	beq.w	8015614 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	8b5b      	ldrh	r3, [r3, #26]
 8015380:	f043 0302 	orr.w	r3, r3, #2
 8015384:	b29a      	uxth	r2, r3
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	2207      	movs	r2, #7
 801538e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015390:	e140      	b.n	8015614 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8015392:	6878      	ldr	r0, [r7, #4]
 8015394:	f000 fa5c 	bl	8015850 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015398:	4b22      	ldr	r3, [pc, #136]	; (8015424 <tcp_process+0x5bc>)
 801539a:	781b      	ldrb	r3, [r3, #0]
 801539c:	f003 0320 	and.w	r3, r3, #32
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d071      	beq.n	8015488 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80153a4:	4b14      	ldr	r3, [pc, #80]	; (80153f8 <tcp_process+0x590>)
 80153a6:	781b      	ldrb	r3, [r3, #0]
 80153a8:	f003 0310 	and.w	r3, r3, #16
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d060      	beq.n	8015472 <tcp_process+0x60a>
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80153b4:	4b11      	ldr	r3, [pc, #68]	; (80153fc <tcp_process+0x594>)
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	429a      	cmp	r2, r3
 80153ba:	d15a      	bne.n	8015472 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d156      	bne.n	8015472 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	8b5b      	ldrh	r3, [r3, #26]
 80153c8:	f043 0302 	orr.w	r3, r3, #2
 80153cc:	b29a      	uxth	r2, r3
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80153d2:	6878      	ldr	r0, [r7, #4]
 80153d4:	f7fe fdbc 	bl	8013f50 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80153d8:	4b13      	ldr	r3, [pc, #76]	; (8015428 <tcp_process+0x5c0>)
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	687a      	ldr	r2, [r7, #4]
 80153de:	429a      	cmp	r2, r3
 80153e0:	d105      	bne.n	80153ee <tcp_process+0x586>
 80153e2:	4b11      	ldr	r3, [pc, #68]	; (8015428 <tcp_process+0x5c0>)
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	68db      	ldr	r3, [r3, #12]
 80153e8:	4a0f      	ldr	r2, [pc, #60]	; (8015428 <tcp_process+0x5c0>)
 80153ea:	6013      	str	r3, [r2, #0]
 80153ec:	e02e      	b.n	801544c <tcp_process+0x5e4>
 80153ee:	4b0e      	ldr	r3, [pc, #56]	; (8015428 <tcp_process+0x5c0>)
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	617b      	str	r3, [r7, #20]
 80153f4:	e027      	b.n	8015446 <tcp_process+0x5de>
 80153f6:	bf00      	nop
 80153f8:	200110d0 	.word	0x200110d0
 80153fc:	200110c8 	.word	0x200110c8
 8015400:	200110ce 	.word	0x200110ce
 8015404:	200110c4 	.word	0x200110c4
 8015408:	200110b4 	.word	0x200110b4
 801540c:	2000d948 	.word	0x2000d948
 8015410:	2000d94c 	.word	0x2000d94c
 8015414:	0801ee18 	.word	0x0801ee18
 8015418:	0801f0b8 	.word	0x0801f0b8
 801541c:	0801ee64 	.word	0x0801ee64
 8015420:	200110cc 	.word	0x200110cc
 8015424:	200110d1 	.word	0x200110d1
 8015428:	20011098 	.word	0x20011098
 801542c:	697b      	ldr	r3, [r7, #20]
 801542e:	68db      	ldr	r3, [r3, #12]
 8015430:	687a      	ldr	r2, [r7, #4]
 8015432:	429a      	cmp	r2, r3
 8015434:	d104      	bne.n	8015440 <tcp_process+0x5d8>
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	68da      	ldr	r2, [r3, #12]
 801543a:	697b      	ldr	r3, [r7, #20]
 801543c:	60da      	str	r2, [r3, #12]
 801543e:	e005      	b.n	801544c <tcp_process+0x5e4>
 8015440:	697b      	ldr	r3, [r7, #20]
 8015442:	68db      	ldr	r3, [r3, #12]
 8015444:	617b      	str	r3, [r7, #20]
 8015446:	697b      	ldr	r3, [r7, #20]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d1ef      	bne.n	801542c <tcp_process+0x5c4>
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	2200      	movs	r2, #0
 8015450:	60da      	str	r2, [r3, #12]
 8015452:	4b77      	ldr	r3, [pc, #476]	; (8015630 <tcp_process+0x7c8>)
 8015454:	2201      	movs	r2, #1
 8015456:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	220a      	movs	r2, #10
 801545c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801545e:	4b75      	ldr	r3, [pc, #468]	; (8015634 <tcp_process+0x7cc>)
 8015460:	681a      	ldr	r2, [r3, #0]
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	60da      	str	r2, [r3, #12]
 8015466:	4a73      	ldr	r2, [pc, #460]	; (8015634 <tcp_process+0x7cc>)
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	6013      	str	r3, [r2, #0]
 801546c:	f003 f952 	bl	8018714 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8015470:	e0d2      	b.n	8015618 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	8b5b      	ldrh	r3, [r3, #26]
 8015476:	f043 0302 	orr.w	r3, r3, #2
 801547a:	b29a      	uxth	r2, r3
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	2208      	movs	r2, #8
 8015484:	751a      	strb	r2, [r3, #20]
      break;
 8015486:	e0c7      	b.n	8015618 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015488:	4b6b      	ldr	r3, [pc, #428]	; (8015638 <tcp_process+0x7d0>)
 801548a:	781b      	ldrb	r3, [r3, #0]
 801548c:	f003 0310 	and.w	r3, r3, #16
 8015490:	2b00      	cmp	r3, #0
 8015492:	f000 80c1 	beq.w	8015618 <tcp_process+0x7b0>
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801549a:	4b68      	ldr	r3, [pc, #416]	; (801563c <tcp_process+0x7d4>)
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	429a      	cmp	r2, r3
 80154a0:	f040 80ba 	bne.w	8015618 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	f040 80b5 	bne.w	8015618 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	2206      	movs	r2, #6
 80154b2:	751a      	strb	r2, [r3, #20]
      break;
 80154b4:	e0b0      	b.n	8015618 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80154b6:	6878      	ldr	r0, [r7, #4]
 80154b8:	f000 f9ca 	bl	8015850 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80154bc:	4b60      	ldr	r3, [pc, #384]	; (8015640 <tcp_process+0x7d8>)
 80154be:	781b      	ldrb	r3, [r3, #0]
 80154c0:	f003 0320 	and.w	r3, r3, #32
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	f000 80a9 	beq.w	801561c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	8b5b      	ldrh	r3, [r3, #26]
 80154ce:	f043 0302 	orr.w	r3, r3, #2
 80154d2:	b29a      	uxth	r2, r3
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80154d8:	6878      	ldr	r0, [r7, #4]
 80154da:	f7fe fd39 	bl	8013f50 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80154de:	4b59      	ldr	r3, [pc, #356]	; (8015644 <tcp_process+0x7dc>)
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	687a      	ldr	r2, [r7, #4]
 80154e4:	429a      	cmp	r2, r3
 80154e6:	d105      	bne.n	80154f4 <tcp_process+0x68c>
 80154e8:	4b56      	ldr	r3, [pc, #344]	; (8015644 <tcp_process+0x7dc>)
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	68db      	ldr	r3, [r3, #12]
 80154ee:	4a55      	ldr	r2, [pc, #340]	; (8015644 <tcp_process+0x7dc>)
 80154f0:	6013      	str	r3, [r2, #0]
 80154f2:	e013      	b.n	801551c <tcp_process+0x6b4>
 80154f4:	4b53      	ldr	r3, [pc, #332]	; (8015644 <tcp_process+0x7dc>)
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	613b      	str	r3, [r7, #16]
 80154fa:	e00c      	b.n	8015516 <tcp_process+0x6ae>
 80154fc:	693b      	ldr	r3, [r7, #16]
 80154fe:	68db      	ldr	r3, [r3, #12]
 8015500:	687a      	ldr	r2, [r7, #4]
 8015502:	429a      	cmp	r2, r3
 8015504:	d104      	bne.n	8015510 <tcp_process+0x6a8>
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	68da      	ldr	r2, [r3, #12]
 801550a:	693b      	ldr	r3, [r7, #16]
 801550c:	60da      	str	r2, [r3, #12]
 801550e:	e005      	b.n	801551c <tcp_process+0x6b4>
 8015510:	693b      	ldr	r3, [r7, #16]
 8015512:	68db      	ldr	r3, [r3, #12]
 8015514:	613b      	str	r3, [r7, #16]
 8015516:	693b      	ldr	r3, [r7, #16]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d1ef      	bne.n	80154fc <tcp_process+0x694>
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	2200      	movs	r2, #0
 8015520:	60da      	str	r2, [r3, #12]
 8015522:	4b43      	ldr	r3, [pc, #268]	; (8015630 <tcp_process+0x7c8>)
 8015524:	2201      	movs	r2, #1
 8015526:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	220a      	movs	r2, #10
 801552c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801552e:	4b41      	ldr	r3, [pc, #260]	; (8015634 <tcp_process+0x7cc>)
 8015530:	681a      	ldr	r2, [r3, #0]
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	60da      	str	r2, [r3, #12]
 8015536:	4a3f      	ldr	r2, [pc, #252]	; (8015634 <tcp_process+0x7cc>)
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	6013      	str	r3, [r2, #0]
 801553c:	f003 f8ea 	bl	8018714 <tcp_timer_needed>
      }
      break;
 8015540:	e06c      	b.n	801561c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8015542:	6878      	ldr	r0, [r7, #4]
 8015544:	f000 f984 	bl	8015850 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015548:	4b3b      	ldr	r3, [pc, #236]	; (8015638 <tcp_process+0x7d0>)
 801554a:	781b      	ldrb	r3, [r3, #0]
 801554c:	f003 0310 	and.w	r3, r3, #16
 8015550:	2b00      	cmp	r3, #0
 8015552:	d065      	beq.n	8015620 <tcp_process+0x7b8>
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015558:	4b38      	ldr	r3, [pc, #224]	; (801563c <tcp_process+0x7d4>)
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	429a      	cmp	r2, r3
 801555e:	d15f      	bne.n	8015620 <tcp_process+0x7b8>
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015564:	2b00      	cmp	r3, #0
 8015566:	d15b      	bne.n	8015620 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8015568:	6878      	ldr	r0, [r7, #4]
 801556a:	f7fe fcf1 	bl	8013f50 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801556e:	4b35      	ldr	r3, [pc, #212]	; (8015644 <tcp_process+0x7dc>)
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	687a      	ldr	r2, [r7, #4]
 8015574:	429a      	cmp	r2, r3
 8015576:	d105      	bne.n	8015584 <tcp_process+0x71c>
 8015578:	4b32      	ldr	r3, [pc, #200]	; (8015644 <tcp_process+0x7dc>)
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	68db      	ldr	r3, [r3, #12]
 801557e:	4a31      	ldr	r2, [pc, #196]	; (8015644 <tcp_process+0x7dc>)
 8015580:	6013      	str	r3, [r2, #0]
 8015582:	e013      	b.n	80155ac <tcp_process+0x744>
 8015584:	4b2f      	ldr	r3, [pc, #188]	; (8015644 <tcp_process+0x7dc>)
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	60fb      	str	r3, [r7, #12]
 801558a:	e00c      	b.n	80155a6 <tcp_process+0x73e>
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	68db      	ldr	r3, [r3, #12]
 8015590:	687a      	ldr	r2, [r7, #4]
 8015592:	429a      	cmp	r2, r3
 8015594:	d104      	bne.n	80155a0 <tcp_process+0x738>
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	68da      	ldr	r2, [r3, #12]
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	60da      	str	r2, [r3, #12]
 801559e:	e005      	b.n	80155ac <tcp_process+0x744>
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	68db      	ldr	r3, [r3, #12]
 80155a4:	60fb      	str	r3, [r7, #12]
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d1ef      	bne.n	801558c <tcp_process+0x724>
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	2200      	movs	r2, #0
 80155b0:	60da      	str	r2, [r3, #12]
 80155b2:	4b1f      	ldr	r3, [pc, #124]	; (8015630 <tcp_process+0x7c8>)
 80155b4:	2201      	movs	r2, #1
 80155b6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	220a      	movs	r2, #10
 80155bc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80155be:	4b1d      	ldr	r3, [pc, #116]	; (8015634 <tcp_process+0x7cc>)
 80155c0:	681a      	ldr	r2, [r3, #0]
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	60da      	str	r2, [r3, #12]
 80155c6:	4a1b      	ldr	r2, [pc, #108]	; (8015634 <tcp_process+0x7cc>)
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	6013      	str	r3, [r2, #0]
 80155cc:	f003 f8a2 	bl	8018714 <tcp_timer_needed>
      }
      break;
 80155d0:	e026      	b.n	8015620 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80155d2:	6878      	ldr	r0, [r7, #4]
 80155d4:	f000 f93c 	bl	8015850 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80155d8:	4b17      	ldr	r3, [pc, #92]	; (8015638 <tcp_process+0x7d0>)
 80155da:	781b      	ldrb	r3, [r3, #0]
 80155dc:	f003 0310 	and.w	r3, r3, #16
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d01f      	beq.n	8015624 <tcp_process+0x7bc>
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80155e8:	4b14      	ldr	r3, [pc, #80]	; (801563c <tcp_process+0x7d4>)
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	429a      	cmp	r2, r3
 80155ee:	d119      	bne.n	8015624 <tcp_process+0x7bc>
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d115      	bne.n	8015624 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80155f8:	4b11      	ldr	r3, [pc, #68]	; (8015640 <tcp_process+0x7d8>)
 80155fa:	781b      	ldrb	r3, [r3, #0]
 80155fc:	f043 0310 	orr.w	r3, r3, #16
 8015600:	b2da      	uxtb	r2, r3
 8015602:	4b0f      	ldr	r3, [pc, #60]	; (8015640 <tcp_process+0x7d8>)
 8015604:	701a      	strb	r2, [r3, #0]
      }
      break;
 8015606:	e00d      	b.n	8015624 <tcp_process+0x7bc>
    default:
      break;
 8015608:	bf00      	nop
 801560a:	e00c      	b.n	8015626 <tcp_process+0x7be>
      break;
 801560c:	bf00      	nop
 801560e:	e00a      	b.n	8015626 <tcp_process+0x7be>
      break;
 8015610:	bf00      	nop
 8015612:	e008      	b.n	8015626 <tcp_process+0x7be>
      break;
 8015614:	bf00      	nop
 8015616:	e006      	b.n	8015626 <tcp_process+0x7be>
      break;
 8015618:	bf00      	nop
 801561a:	e004      	b.n	8015626 <tcp_process+0x7be>
      break;
 801561c:	bf00      	nop
 801561e:	e002      	b.n	8015626 <tcp_process+0x7be>
      break;
 8015620:	bf00      	nop
 8015622:	e000      	b.n	8015626 <tcp_process+0x7be>
      break;
 8015624:	bf00      	nop
  }
  return ERR_OK;
 8015626:	2300      	movs	r3, #0
}
 8015628:	4618      	mov	r0, r3
 801562a:	3724      	adds	r7, #36	; 0x24
 801562c:	46bd      	mov	sp, r7
 801562e:	bd90      	pop	{r4, r7, pc}
 8015630:	200110a0 	.word	0x200110a0
 8015634:	2001109c 	.word	0x2001109c
 8015638:	200110d0 	.word	0x200110d0
 801563c:	200110c8 	.word	0x200110c8
 8015640:	200110d1 	.word	0x200110d1
 8015644:	20011098 	.word	0x20011098

08015648 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8015648:	b590      	push	{r4, r7, lr}
 801564a:	b085      	sub	sp, #20
 801564c:	af00      	add	r7, sp, #0
 801564e:	6078      	str	r0, [r7, #4]
 8015650:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	2b00      	cmp	r3, #0
 8015656:	d106      	bne.n	8015666 <tcp_oos_insert_segment+0x1e>
 8015658:	4b3b      	ldr	r3, [pc, #236]	; (8015748 <tcp_oos_insert_segment+0x100>)
 801565a:	f240 421f 	movw	r2, #1055	; 0x41f
 801565e:	493b      	ldr	r1, [pc, #236]	; (801574c <tcp_oos_insert_segment+0x104>)
 8015660:	483b      	ldr	r0, [pc, #236]	; (8015750 <tcp_oos_insert_segment+0x108>)
 8015662:	f006 f997 	bl	801b994 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	68db      	ldr	r3, [r3, #12]
 801566a:	899b      	ldrh	r3, [r3, #12]
 801566c:	b29b      	uxth	r3, r3
 801566e:	4618      	mov	r0, r3
 8015670:	f7fb f9d6 	bl	8010a20 <lwip_htons>
 8015674:	4603      	mov	r3, r0
 8015676:	b2db      	uxtb	r3, r3
 8015678:	f003 0301 	and.w	r3, r3, #1
 801567c:	2b00      	cmp	r3, #0
 801567e:	d028      	beq.n	80156d2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8015680:	6838      	ldr	r0, [r7, #0]
 8015682:	f7fe f995 	bl	80139b0 <tcp_segs_free>
    next = NULL;
 8015686:	2300      	movs	r3, #0
 8015688:	603b      	str	r3, [r7, #0]
 801568a:	e056      	b.n	801573a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801568c:	683b      	ldr	r3, [r7, #0]
 801568e:	68db      	ldr	r3, [r3, #12]
 8015690:	899b      	ldrh	r3, [r3, #12]
 8015692:	b29b      	uxth	r3, r3
 8015694:	4618      	mov	r0, r3
 8015696:	f7fb f9c3 	bl	8010a20 <lwip_htons>
 801569a:	4603      	mov	r3, r0
 801569c:	b2db      	uxtb	r3, r3
 801569e:	f003 0301 	and.w	r3, r3, #1
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d00d      	beq.n	80156c2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	68db      	ldr	r3, [r3, #12]
 80156aa:	899b      	ldrh	r3, [r3, #12]
 80156ac:	b29c      	uxth	r4, r3
 80156ae:	2001      	movs	r0, #1
 80156b0:	f7fb f9b6 	bl	8010a20 <lwip_htons>
 80156b4:	4603      	mov	r3, r0
 80156b6:	461a      	mov	r2, r3
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	68db      	ldr	r3, [r3, #12]
 80156bc:	4322      	orrs	r2, r4
 80156be:	b292      	uxth	r2, r2
 80156c0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80156c2:	683b      	ldr	r3, [r7, #0]
 80156c4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80156c6:	683b      	ldr	r3, [r7, #0]
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80156cc:	68f8      	ldr	r0, [r7, #12]
 80156ce:	f7fe f984 	bl	80139da <tcp_seg_free>
    while (next &&
 80156d2:	683b      	ldr	r3, [r7, #0]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d00e      	beq.n	80156f6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	891b      	ldrh	r3, [r3, #8]
 80156dc:	461a      	mov	r2, r3
 80156de:	4b1d      	ldr	r3, [pc, #116]	; (8015754 <tcp_oos_insert_segment+0x10c>)
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	441a      	add	r2, r3
 80156e4:	683b      	ldr	r3, [r7, #0]
 80156e6:	68db      	ldr	r3, [r3, #12]
 80156e8:	685b      	ldr	r3, [r3, #4]
 80156ea:	6839      	ldr	r1, [r7, #0]
 80156ec:	8909      	ldrh	r1, [r1, #8]
 80156ee:	440b      	add	r3, r1
 80156f0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	daca      	bge.n	801568c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80156f6:	683b      	ldr	r3, [r7, #0]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d01e      	beq.n	801573a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	891b      	ldrh	r3, [r3, #8]
 8015700:	461a      	mov	r2, r3
 8015702:	4b14      	ldr	r3, [pc, #80]	; (8015754 <tcp_oos_insert_segment+0x10c>)
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	441a      	add	r2, r3
 8015708:	683b      	ldr	r3, [r7, #0]
 801570a:	68db      	ldr	r3, [r3, #12]
 801570c:	685b      	ldr	r3, [r3, #4]
 801570e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8015710:	2b00      	cmp	r3, #0
 8015712:	dd12      	ble.n	801573a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8015714:	683b      	ldr	r3, [r7, #0]
 8015716:	68db      	ldr	r3, [r3, #12]
 8015718:	685b      	ldr	r3, [r3, #4]
 801571a:	b29a      	uxth	r2, r3
 801571c:	4b0d      	ldr	r3, [pc, #52]	; (8015754 <tcp_oos_insert_segment+0x10c>)
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	b29b      	uxth	r3, r3
 8015722:	1ad3      	subs	r3, r2, r3
 8015724:	b29a      	uxth	r2, r3
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	685a      	ldr	r2, [r3, #4]
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	891b      	ldrh	r3, [r3, #8]
 8015732:	4619      	mov	r1, r3
 8015734:	4610      	mov	r0, r2
 8015736:	f7fc fbdf 	bl	8011ef8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	683a      	ldr	r2, [r7, #0]
 801573e:	601a      	str	r2, [r3, #0]
}
 8015740:	bf00      	nop
 8015742:	3714      	adds	r7, #20
 8015744:	46bd      	mov	sp, r7
 8015746:	bd90      	pop	{r4, r7, pc}
 8015748:	0801ee18 	.word	0x0801ee18
 801574c:	0801f0d8 	.word	0x0801f0d8
 8015750:	0801ee64 	.word	0x0801ee64
 8015754:	200110c4 	.word	0x200110c4

08015758 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8015758:	b5b0      	push	{r4, r5, r7, lr}
 801575a:	b086      	sub	sp, #24
 801575c:	af00      	add	r7, sp, #0
 801575e:	60f8      	str	r0, [r7, #12]
 8015760:	60b9      	str	r1, [r7, #8]
 8015762:	607a      	str	r2, [r7, #4]
 8015764:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8015766:	e03e      	b.n	80157e6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8015768:	68bb      	ldr	r3, [r7, #8]
 801576a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801576c:	68bb      	ldr	r3, [r7, #8]
 801576e:	681b      	ldr	r3, [r3, #0]
 8015770:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8015772:	697b      	ldr	r3, [r7, #20]
 8015774:	685b      	ldr	r3, [r3, #4]
 8015776:	4618      	mov	r0, r3
 8015778:	f7fc fe04 	bl	8012384 <pbuf_clen>
 801577c:	4603      	mov	r3, r0
 801577e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015786:	8a7a      	ldrh	r2, [r7, #18]
 8015788:	429a      	cmp	r2, r3
 801578a:	d906      	bls.n	801579a <tcp_free_acked_segments+0x42>
 801578c:	4b2a      	ldr	r3, [pc, #168]	; (8015838 <tcp_free_acked_segments+0xe0>)
 801578e:	f240 4257 	movw	r2, #1111	; 0x457
 8015792:	492a      	ldr	r1, [pc, #168]	; (801583c <tcp_free_acked_segments+0xe4>)
 8015794:	482a      	ldr	r0, [pc, #168]	; (8015840 <tcp_free_acked_segments+0xe8>)
 8015796:	f006 f8fd 	bl	801b994 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80157a0:	8a7b      	ldrh	r3, [r7, #18]
 80157a2:	1ad3      	subs	r3, r2, r3
 80157a4:	b29a      	uxth	r2, r3
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80157ac:	697b      	ldr	r3, [r7, #20]
 80157ae:	891a      	ldrh	r2, [r3, #8]
 80157b0:	4b24      	ldr	r3, [pc, #144]	; (8015844 <tcp_free_acked_segments+0xec>)
 80157b2:	881b      	ldrh	r3, [r3, #0]
 80157b4:	4413      	add	r3, r2
 80157b6:	b29a      	uxth	r2, r3
 80157b8:	4b22      	ldr	r3, [pc, #136]	; (8015844 <tcp_free_acked_segments+0xec>)
 80157ba:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80157bc:	6978      	ldr	r0, [r7, #20]
 80157be:	f7fe f90c 	bl	80139da <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d00c      	beq.n	80157e6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80157cc:	68bb      	ldr	r3, [r7, #8]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d109      	bne.n	80157e6 <tcp_free_acked_segments+0x8e>
 80157d2:	683b      	ldr	r3, [r7, #0]
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d106      	bne.n	80157e6 <tcp_free_acked_segments+0x8e>
 80157d8:	4b17      	ldr	r3, [pc, #92]	; (8015838 <tcp_free_acked_segments+0xe0>)
 80157da:	f240 4261 	movw	r2, #1121	; 0x461
 80157de:	491a      	ldr	r1, [pc, #104]	; (8015848 <tcp_free_acked_segments+0xf0>)
 80157e0:	4817      	ldr	r0, [pc, #92]	; (8015840 <tcp_free_acked_segments+0xe8>)
 80157e2:	f006 f8d7 	bl	801b994 <iprintf>
  while (seg_list != NULL &&
 80157e6:	68bb      	ldr	r3, [r7, #8]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d020      	beq.n	801582e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80157ec:	68bb      	ldr	r3, [r7, #8]
 80157ee:	68db      	ldr	r3, [r3, #12]
 80157f0:	685b      	ldr	r3, [r3, #4]
 80157f2:	4618      	mov	r0, r3
 80157f4:	f7fb f929 	bl	8010a4a <lwip_htonl>
 80157f8:	4604      	mov	r4, r0
 80157fa:	68bb      	ldr	r3, [r7, #8]
 80157fc:	891b      	ldrh	r3, [r3, #8]
 80157fe:	461d      	mov	r5, r3
 8015800:	68bb      	ldr	r3, [r7, #8]
 8015802:	68db      	ldr	r3, [r3, #12]
 8015804:	899b      	ldrh	r3, [r3, #12]
 8015806:	b29b      	uxth	r3, r3
 8015808:	4618      	mov	r0, r3
 801580a:	f7fb f909 	bl	8010a20 <lwip_htons>
 801580e:	4603      	mov	r3, r0
 8015810:	b2db      	uxtb	r3, r3
 8015812:	f003 0303 	and.w	r3, r3, #3
 8015816:	2b00      	cmp	r3, #0
 8015818:	d001      	beq.n	801581e <tcp_free_acked_segments+0xc6>
 801581a:	2301      	movs	r3, #1
 801581c:	e000      	b.n	8015820 <tcp_free_acked_segments+0xc8>
 801581e:	2300      	movs	r3, #0
 8015820:	442b      	add	r3, r5
 8015822:	18e2      	adds	r2, r4, r3
 8015824:	4b09      	ldr	r3, [pc, #36]	; (801584c <tcp_free_acked_segments+0xf4>)
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801582a:	2b00      	cmp	r3, #0
 801582c:	dd9c      	ble.n	8015768 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801582e:	68bb      	ldr	r3, [r7, #8]
}
 8015830:	4618      	mov	r0, r3
 8015832:	3718      	adds	r7, #24
 8015834:	46bd      	mov	sp, r7
 8015836:	bdb0      	pop	{r4, r5, r7, pc}
 8015838:	0801ee18 	.word	0x0801ee18
 801583c:	0801f100 	.word	0x0801f100
 8015840:	0801ee64 	.word	0x0801ee64
 8015844:	200110cc 	.word	0x200110cc
 8015848:	0801f128 	.word	0x0801f128
 801584c:	200110c8 	.word	0x200110c8

08015850 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8015850:	b5b0      	push	{r4, r5, r7, lr}
 8015852:	b094      	sub	sp, #80	; 0x50
 8015854:	af00      	add	r7, sp, #0
 8015856:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8015858:	2300      	movs	r3, #0
 801585a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d106      	bne.n	8015870 <tcp_receive+0x20>
 8015862:	4b91      	ldr	r3, [pc, #580]	; (8015aa8 <tcp_receive+0x258>)
 8015864:	f240 427b 	movw	r2, #1147	; 0x47b
 8015868:	4990      	ldr	r1, [pc, #576]	; (8015aac <tcp_receive+0x25c>)
 801586a:	4891      	ldr	r0, [pc, #580]	; (8015ab0 <tcp_receive+0x260>)
 801586c:	f006 f892 	bl	801b994 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	7d1b      	ldrb	r3, [r3, #20]
 8015874:	2b03      	cmp	r3, #3
 8015876:	d806      	bhi.n	8015886 <tcp_receive+0x36>
 8015878:	4b8b      	ldr	r3, [pc, #556]	; (8015aa8 <tcp_receive+0x258>)
 801587a:	f240 427c 	movw	r2, #1148	; 0x47c
 801587e:	498d      	ldr	r1, [pc, #564]	; (8015ab4 <tcp_receive+0x264>)
 8015880:	488b      	ldr	r0, [pc, #556]	; (8015ab0 <tcp_receive+0x260>)
 8015882:	f006 f887 	bl	801b994 <iprintf>

  if (flags & TCP_ACK) {
 8015886:	4b8c      	ldr	r3, [pc, #560]	; (8015ab8 <tcp_receive+0x268>)
 8015888:	781b      	ldrb	r3, [r3, #0]
 801588a:	f003 0310 	and.w	r3, r3, #16
 801588e:	2b00      	cmp	r3, #0
 8015890:	f000 8264 	beq.w	8015d5c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801589a:	461a      	mov	r2, r3
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80158a0:	4413      	add	r3, r2
 80158a2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80158a8:	4b84      	ldr	r3, [pc, #528]	; (8015abc <tcp_receive+0x26c>)
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	1ad3      	subs	r3, r2, r3
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	db1b      	blt.n	80158ea <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80158b6:	4b81      	ldr	r3, [pc, #516]	; (8015abc <tcp_receive+0x26c>)
 80158b8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80158ba:	429a      	cmp	r2, r3
 80158bc:	d106      	bne.n	80158cc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80158c2:	4b7f      	ldr	r3, [pc, #508]	; (8015ac0 <tcp_receive+0x270>)
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	1ad3      	subs	r3, r2, r3
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	db0e      	blt.n	80158ea <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80158d0:	4b7b      	ldr	r3, [pc, #492]	; (8015ac0 <tcp_receive+0x270>)
 80158d2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80158d4:	429a      	cmp	r2, r3
 80158d6:	d125      	bne.n	8015924 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80158d8:	4b7a      	ldr	r3, [pc, #488]	; (8015ac4 <tcp_receive+0x274>)
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	89db      	ldrh	r3, [r3, #14]
 80158de:	b29a      	uxth	r2, r3
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80158e6:	429a      	cmp	r2, r3
 80158e8:	d91c      	bls.n	8015924 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80158ea:	4b76      	ldr	r3, [pc, #472]	; (8015ac4 <tcp_receive+0x274>)
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	89db      	ldrh	r3, [r3, #14]
 80158f0:	b29a      	uxth	r2, r3
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015904:	429a      	cmp	r2, r3
 8015906:	d205      	bcs.n	8015914 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8015914:	4b69      	ldr	r3, [pc, #420]	; (8015abc <tcp_receive+0x26c>)
 8015916:	681a      	ldr	r2, [r3, #0]
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801591c:	4b68      	ldr	r3, [pc, #416]	; (8015ac0 <tcp_receive+0x270>)
 801591e:	681a      	ldr	r2, [r3, #0]
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8015924:	4b66      	ldr	r3, [pc, #408]	; (8015ac0 <tcp_receive+0x270>)
 8015926:	681a      	ldr	r2, [r3, #0]
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801592c:	1ad3      	subs	r3, r2, r3
 801592e:	2b00      	cmp	r3, #0
 8015930:	dc58      	bgt.n	80159e4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8015932:	4b65      	ldr	r3, [pc, #404]	; (8015ac8 <tcp_receive+0x278>)
 8015934:	881b      	ldrh	r3, [r3, #0]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d14b      	bne.n	80159d2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801593e:	687a      	ldr	r2, [r7, #4]
 8015940:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8015944:	4413      	add	r3, r2
 8015946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015948:	429a      	cmp	r2, r3
 801594a:	d142      	bne.n	80159d2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015952:	2b00      	cmp	r3, #0
 8015954:	db3d      	blt.n	80159d2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801595a:	4b59      	ldr	r3, [pc, #356]	; (8015ac0 <tcp_receive+0x270>)
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	429a      	cmp	r2, r3
 8015960:	d137      	bne.n	80159d2 <tcp_receive+0x182>
              found_dupack = 1;
 8015962:	2301      	movs	r3, #1
 8015964:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801596c:	2bff      	cmp	r3, #255	; 0xff
 801596e:	d007      	beq.n	8015980 <tcp_receive+0x130>
                ++pcb->dupacks;
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015976:	3301      	adds	r3, #1
 8015978:	b2da      	uxtb	r2, r3
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015986:	2b03      	cmp	r3, #3
 8015988:	d91b      	bls.n	80159c2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015994:	4413      	add	r3, r2
 8015996:	b29a      	uxth	r2, r3
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801599e:	429a      	cmp	r2, r3
 80159a0:	d30a      	bcc.n	80159b8 <tcp_receive+0x168>
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80159ac:	4413      	add	r3, r2
 80159ae:	b29a      	uxth	r2, r3
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80159b6:	e004      	b.n	80159c2 <tcp_receive+0x172>
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80159be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80159c8:	2b02      	cmp	r3, #2
 80159ca:	d902      	bls.n	80159d2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80159cc:	6878      	ldr	r0, [r7, #4]
 80159ce:	f002 fb43 	bl	8018058 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80159d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	f040 8161 	bne.w	8015c9c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	2200      	movs	r2, #0
 80159de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80159e2:	e15b      	b.n	8015c9c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80159e4:	4b36      	ldr	r3, [pc, #216]	; (8015ac0 <tcp_receive+0x270>)
 80159e6:	681a      	ldr	r2, [r3, #0]
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80159ec:	1ad3      	subs	r3, r2, r3
 80159ee:	3b01      	subs	r3, #1
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	f2c0 814e 	blt.w	8015c92 <tcp_receive+0x442>
 80159f6:	4b32      	ldr	r3, [pc, #200]	; (8015ac0 <tcp_receive+0x270>)
 80159f8:	681a      	ldr	r2, [r3, #0]
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80159fe:	1ad3      	subs	r3, r2, r3
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	f300 8146 	bgt.w	8015c92 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	8b5b      	ldrh	r3, [r3, #26]
 8015a0a:	f003 0304 	and.w	r3, r3, #4
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d010      	beq.n	8015a34 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	8b5b      	ldrh	r3, [r3, #26]
 8015a16:	f023 0304 	bic.w	r3, r3, #4
 8015a1a:	b29a      	uxth	r2, r3
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	2200      	movs	r2, #0
 8015a30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	2200      	movs	r2, #0
 8015a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015a42:	10db      	asrs	r3, r3, #3
 8015a44:	b21b      	sxth	r3, r3
 8015a46:	b29a      	uxth	r2, r3
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015a4e:	b29b      	uxth	r3, r3
 8015a50:	4413      	add	r3, r2
 8015a52:	b29b      	uxth	r3, r3
 8015a54:	b21a      	sxth	r2, r3
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8015a5c:	4b18      	ldr	r3, [pc, #96]	; (8015ac0 <tcp_receive+0x270>)
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	b29a      	uxth	r2, r3
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a66:	b29b      	uxth	r3, r3
 8015a68:	1ad3      	subs	r3, r2, r3
 8015a6a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	2200      	movs	r2, #0
 8015a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8015a74:	4b12      	ldr	r3, [pc, #72]	; (8015ac0 <tcp_receive+0x270>)
 8015a76:	681a      	ldr	r2, [r3, #0]
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	7d1b      	ldrb	r3, [r3, #20]
 8015a80:	2b03      	cmp	r3, #3
 8015a82:	f240 8097 	bls.w	8015bb4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015a92:	429a      	cmp	r2, r3
 8015a94:	d245      	bcs.n	8015b22 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	8b5b      	ldrh	r3, [r3, #26]
 8015a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d014      	beq.n	8015acc <tcp_receive+0x27c>
 8015aa2:	2301      	movs	r3, #1
 8015aa4:	e013      	b.n	8015ace <tcp_receive+0x27e>
 8015aa6:	bf00      	nop
 8015aa8:	0801ee18 	.word	0x0801ee18
 8015aac:	0801f148 	.word	0x0801f148
 8015ab0:	0801ee64 	.word	0x0801ee64
 8015ab4:	0801f164 	.word	0x0801f164
 8015ab8:	200110d0 	.word	0x200110d0
 8015abc:	200110c4 	.word	0x200110c4
 8015ac0:	200110c8 	.word	0x200110c8
 8015ac4:	200110b4 	.word	0x200110b4
 8015ac8:	200110ce 	.word	0x200110ce
 8015acc:	2302      	movs	r3, #2
 8015ace:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8015ad2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8015ad6:	b29a      	uxth	r2, r3
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015adc:	fb12 f303 	smulbb	r3, r2, r3
 8015ae0:	b29b      	uxth	r3, r3
 8015ae2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015ae4:	4293      	cmp	r3, r2
 8015ae6:	bf28      	it	cs
 8015ae8:	4613      	movcs	r3, r2
 8015aea:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015af2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015af4:	4413      	add	r3, r2
 8015af6:	b29a      	uxth	r2, r3
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015afe:	429a      	cmp	r2, r3
 8015b00:	d309      	bcc.n	8015b16 <tcp_receive+0x2c6>
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015b08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015b0a:	4413      	add	r3, r2
 8015b0c:	b29a      	uxth	r2, r3
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015b14:	e04e      	b.n	8015bb4 <tcp_receive+0x364>
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015b1c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015b20:	e048      	b.n	8015bb4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015b28:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015b2a:	4413      	add	r3, r2
 8015b2c:	b29a      	uxth	r2, r3
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8015b34:	429a      	cmp	r2, r3
 8015b36:	d309      	bcc.n	8015b4c <tcp_receive+0x2fc>
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015b3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015b40:	4413      	add	r3, r2
 8015b42:	b29a      	uxth	r2, r3
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8015b4a:	e004      	b.n	8015b56 <tcp_receive+0x306>
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015b52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015b62:	429a      	cmp	r2, r3
 8015b64:	d326      	bcc.n	8015bb4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015b72:	1ad3      	subs	r3, r2, r3
 8015b74:	b29a      	uxth	r2, r3
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015b86:	4413      	add	r3, r2
 8015b88:	b29a      	uxth	r2, r3
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015b90:	429a      	cmp	r2, r3
 8015b92:	d30a      	bcc.n	8015baa <tcp_receive+0x35a>
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015b9e:	4413      	add	r3, r2
 8015ba0:	b29a      	uxth	r2, r3
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015ba8:	e004      	b.n	8015bb4 <tcp_receive+0x364>
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015bb0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015bbc:	4a98      	ldr	r2, [pc, #608]	; (8015e20 <tcp_receive+0x5d0>)
 8015bbe:	6878      	ldr	r0, [r7, #4]
 8015bc0:	f7ff fdca 	bl	8015758 <tcp_free_acked_segments>
 8015bc4:	4602      	mov	r2, r0
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015bd2:	4a94      	ldr	r2, [pc, #592]	; (8015e24 <tcp_receive+0x5d4>)
 8015bd4:	6878      	ldr	r0, [r7, #4]
 8015bd6:	f7ff fdbf 	bl	8015758 <tcp_free_acked_segments>
 8015bda:	4602      	mov	r2, r0
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d104      	bne.n	8015bf2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015bee:	861a      	strh	r2, [r3, #48]	; 0x30
 8015bf0:	e002      	b.n	8015bf8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	2200      	movs	r2, #0
 8015bf6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	2200      	movs	r2, #0
 8015bfc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d103      	bne.n	8015c0e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	2200      	movs	r2, #0
 8015c0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8015c14:	4b84      	ldr	r3, [pc, #528]	; (8015e28 <tcp_receive+0x5d8>)
 8015c16:	881b      	ldrh	r3, [r3, #0]
 8015c18:	4413      	add	r3, r2
 8015c1a:	b29a      	uxth	r2, r3
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	8b5b      	ldrh	r3, [r3, #26]
 8015c26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d035      	beq.n	8015c9a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d118      	bne.n	8015c68 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d00c      	beq.n	8015c58 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c46:	68db      	ldr	r3, [r3, #12]
 8015c48:	685b      	ldr	r3, [r3, #4]
 8015c4a:	4618      	mov	r0, r3
 8015c4c:	f7fa fefd 	bl	8010a4a <lwip_htonl>
 8015c50:	4603      	mov	r3, r0
 8015c52:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	dc20      	bgt.n	8015c9a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	8b5b      	ldrh	r3, [r3, #26]
 8015c5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015c60:	b29a      	uxth	r2, r3
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015c66:	e018      	b.n	8015c9a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c70:	68db      	ldr	r3, [r3, #12]
 8015c72:	685b      	ldr	r3, [r3, #4]
 8015c74:	4618      	mov	r0, r3
 8015c76:	f7fa fee8 	bl	8010a4a <lwip_htonl>
 8015c7a:	4603      	mov	r3, r0
 8015c7c:	1ae3      	subs	r3, r4, r3
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	dc0b      	bgt.n	8015c9a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	8b5b      	ldrh	r3, [r3, #26]
 8015c86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015c8a:	b29a      	uxth	r2, r3
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015c90:	e003      	b.n	8015c9a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8015c92:	6878      	ldr	r0, [r7, #4]
 8015c94:	f002 fbce 	bl	8018434 <tcp_send_empty_ack>
 8015c98:	e000      	b.n	8015c9c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015c9a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d05b      	beq.n	8015d5c <tcp_receive+0x50c>
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015ca8:	4b60      	ldr	r3, [pc, #384]	; (8015e2c <tcp_receive+0x5dc>)
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	1ad3      	subs	r3, r2, r3
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	da54      	bge.n	8015d5c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8015cb2:	4b5f      	ldr	r3, [pc, #380]	; (8015e30 <tcp_receive+0x5e0>)
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	b29a      	uxth	r2, r3
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015cbc:	b29b      	uxth	r3, r3
 8015cbe:	1ad3      	subs	r3, r2, r3
 8015cc0:	b29b      	uxth	r3, r3
 8015cc2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8015cc6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015cd0:	10db      	asrs	r3, r3, #3
 8015cd2:	b21b      	sxth	r3, r3
 8015cd4:	b29b      	uxth	r3, r3
 8015cd6:	1ad3      	subs	r3, r2, r3
 8015cd8:	b29b      	uxth	r3, r3
 8015cda:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015ce4:	b29a      	uxth	r2, r3
 8015ce6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015cea:	4413      	add	r3, r2
 8015cec:	b29b      	uxth	r3, r3
 8015cee:	b21a      	sxth	r2, r3
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8015cf4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	da05      	bge.n	8015d08 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8015cfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015d00:	425b      	negs	r3, r3
 8015d02:	b29b      	uxth	r3, r3
 8015d04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8015d08:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015d12:	109b      	asrs	r3, r3, #2
 8015d14:	b21b      	sxth	r3, r3
 8015d16:	b29b      	uxth	r3, r3
 8015d18:	1ad3      	subs	r3, r2, r3
 8015d1a:	b29b      	uxth	r3, r3
 8015d1c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015d26:	b29a      	uxth	r2, r3
 8015d28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015d2c:	4413      	add	r3, r2
 8015d2e:	b29b      	uxth	r3, r3
 8015d30:	b21a      	sxth	r2, r3
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015d3c:	10db      	asrs	r3, r3, #3
 8015d3e:	b21b      	sxth	r3, r3
 8015d40:	b29a      	uxth	r2, r3
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015d48:	b29b      	uxth	r3, r3
 8015d4a:	4413      	add	r3, r2
 8015d4c:	b29b      	uxth	r3, r3
 8015d4e:	b21a      	sxth	r2, r3
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	2200      	movs	r2, #0
 8015d5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8015d5c:	4b35      	ldr	r3, [pc, #212]	; (8015e34 <tcp_receive+0x5e4>)
 8015d5e:	881b      	ldrh	r3, [r3, #0]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	f000 84e2 	beq.w	801672a <tcp_receive+0xeda>
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	7d1b      	ldrb	r3, [r3, #20]
 8015d6a:	2b06      	cmp	r3, #6
 8015d6c:	f200 84dd 	bhi.w	801672a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015d74:	4b30      	ldr	r3, [pc, #192]	; (8015e38 <tcp_receive+0x5e8>)
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	1ad3      	subs	r3, r2, r3
 8015d7a:	3b01      	subs	r3, #1
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	f2c0 808f 	blt.w	8015ea0 <tcp_receive+0x650>
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015d86:	4b2b      	ldr	r3, [pc, #172]	; (8015e34 <tcp_receive+0x5e4>)
 8015d88:	881b      	ldrh	r3, [r3, #0]
 8015d8a:	4619      	mov	r1, r3
 8015d8c:	4b2a      	ldr	r3, [pc, #168]	; (8015e38 <tcp_receive+0x5e8>)
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	440b      	add	r3, r1
 8015d92:	1ad3      	subs	r3, r2, r3
 8015d94:	3301      	adds	r3, #1
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	f300 8082 	bgt.w	8015ea0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015d9c:	4b27      	ldr	r3, [pc, #156]	; (8015e3c <tcp_receive+0x5ec>)
 8015d9e:	685b      	ldr	r3, [r3, #4]
 8015da0:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015da6:	4b24      	ldr	r3, [pc, #144]	; (8015e38 <tcp_receive+0x5e8>)
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	1ad3      	subs	r3, r2, r3
 8015dac:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8015dae:	4b23      	ldr	r3, [pc, #140]	; (8015e3c <tcp_receive+0x5ec>)
 8015db0:	685b      	ldr	r3, [r3, #4]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d106      	bne.n	8015dc4 <tcp_receive+0x574>
 8015db6:	4b22      	ldr	r3, [pc, #136]	; (8015e40 <tcp_receive+0x5f0>)
 8015db8:	f240 5294 	movw	r2, #1428	; 0x594
 8015dbc:	4921      	ldr	r1, [pc, #132]	; (8015e44 <tcp_receive+0x5f4>)
 8015dbe:	4822      	ldr	r0, [pc, #136]	; (8015e48 <tcp_receive+0x5f8>)
 8015dc0:	f005 fde8 	bl	801b994 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dc6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015dca:	4293      	cmp	r3, r2
 8015dcc:	d906      	bls.n	8015ddc <tcp_receive+0x58c>
 8015dce:	4b1c      	ldr	r3, [pc, #112]	; (8015e40 <tcp_receive+0x5f0>)
 8015dd0:	f240 5295 	movw	r2, #1429	; 0x595
 8015dd4:	491d      	ldr	r1, [pc, #116]	; (8015e4c <tcp_receive+0x5fc>)
 8015dd6:	481c      	ldr	r0, [pc, #112]	; (8015e48 <tcp_receive+0x5f8>)
 8015dd8:	f005 fddc 	bl	801b994 <iprintf>
      off = (u16_t)off32;
 8015ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dde:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8015de2:	4b16      	ldr	r3, [pc, #88]	; (8015e3c <tcp_receive+0x5ec>)
 8015de4:	685b      	ldr	r3, [r3, #4]
 8015de6:	891b      	ldrh	r3, [r3, #8]
 8015de8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015dec:	429a      	cmp	r2, r3
 8015dee:	d906      	bls.n	8015dfe <tcp_receive+0x5ae>
 8015df0:	4b13      	ldr	r3, [pc, #76]	; (8015e40 <tcp_receive+0x5f0>)
 8015df2:	f240 5297 	movw	r2, #1431	; 0x597
 8015df6:	4916      	ldr	r1, [pc, #88]	; (8015e50 <tcp_receive+0x600>)
 8015df8:	4813      	ldr	r0, [pc, #76]	; (8015e48 <tcp_receive+0x5f8>)
 8015dfa:	f005 fdcb 	bl	801b994 <iprintf>
      inseg.len -= off;
 8015dfe:	4b0f      	ldr	r3, [pc, #60]	; (8015e3c <tcp_receive+0x5ec>)
 8015e00:	891a      	ldrh	r2, [r3, #8]
 8015e02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015e06:	1ad3      	subs	r3, r2, r3
 8015e08:	b29a      	uxth	r2, r3
 8015e0a:	4b0c      	ldr	r3, [pc, #48]	; (8015e3c <tcp_receive+0x5ec>)
 8015e0c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8015e0e:	4b0b      	ldr	r3, [pc, #44]	; (8015e3c <tcp_receive+0x5ec>)
 8015e10:	685b      	ldr	r3, [r3, #4]
 8015e12:	891a      	ldrh	r2, [r3, #8]
 8015e14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015e18:	1ad3      	subs	r3, r2, r3
 8015e1a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8015e1c:	e02a      	b.n	8015e74 <tcp_receive+0x624>
 8015e1e:	bf00      	nop
 8015e20:	0801f180 	.word	0x0801f180
 8015e24:	0801f188 	.word	0x0801f188
 8015e28:	200110cc 	.word	0x200110cc
 8015e2c:	200110c8 	.word	0x200110c8
 8015e30:	2001108c 	.word	0x2001108c
 8015e34:	200110ce 	.word	0x200110ce
 8015e38:	200110c4 	.word	0x200110c4
 8015e3c:	200110a4 	.word	0x200110a4
 8015e40:	0801ee18 	.word	0x0801ee18
 8015e44:	0801f190 	.word	0x0801f190
 8015e48:	0801ee64 	.word	0x0801ee64
 8015e4c:	0801f1a0 	.word	0x0801f1a0
 8015e50:	0801f1b0 	.word	0x0801f1b0
        off -= p->len;
 8015e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e56:	895b      	ldrh	r3, [r3, #10]
 8015e58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015e5c:	1ad3      	subs	r3, r2, r3
 8015e5e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8015e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e64:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015e66:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e6a:	2200      	movs	r2, #0
 8015e6c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8015e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8015e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e76:	895b      	ldrh	r3, [r3, #10]
 8015e78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015e7c:	429a      	cmp	r2, r3
 8015e7e:	d8e9      	bhi.n	8015e54 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8015e80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015e84:	4619      	mov	r1, r3
 8015e86:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015e88:	f7fc f936 	bl	80120f8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e90:	4a91      	ldr	r2, [pc, #580]	; (80160d8 <tcp_receive+0x888>)
 8015e92:	6013      	str	r3, [r2, #0]
 8015e94:	4b91      	ldr	r3, [pc, #580]	; (80160dc <tcp_receive+0x88c>)
 8015e96:	68db      	ldr	r3, [r3, #12]
 8015e98:	4a8f      	ldr	r2, [pc, #572]	; (80160d8 <tcp_receive+0x888>)
 8015e9a:	6812      	ldr	r2, [r2, #0]
 8015e9c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015e9e:	e00d      	b.n	8015ebc <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015ea0:	4b8d      	ldr	r3, [pc, #564]	; (80160d8 <tcp_receive+0x888>)
 8015ea2:	681a      	ldr	r2, [r3, #0]
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ea8:	1ad3      	subs	r3, r2, r3
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	da06      	bge.n	8015ebc <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	8b5b      	ldrh	r3, [r3, #26]
 8015eb2:	f043 0302 	orr.w	r3, r3, #2
 8015eb6:	b29a      	uxth	r2, r3
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015ebc:	4b86      	ldr	r3, [pc, #536]	; (80160d8 <tcp_receive+0x888>)
 8015ebe:	681a      	ldr	r2, [r3, #0]
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ec4:	1ad3      	subs	r3, r2, r3
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	f2c0 842a 	blt.w	8016720 <tcp_receive+0xed0>
 8015ecc:	4b82      	ldr	r3, [pc, #520]	; (80160d8 <tcp_receive+0x888>)
 8015ece:	681a      	ldr	r2, [r3, #0]
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ed4:	6879      	ldr	r1, [r7, #4]
 8015ed6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015ed8:	440b      	add	r3, r1
 8015eda:	1ad3      	subs	r3, r2, r3
 8015edc:	3301      	adds	r3, #1
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	f300 841e 	bgt.w	8016720 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015ee8:	4b7b      	ldr	r3, [pc, #492]	; (80160d8 <tcp_receive+0x888>)
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	429a      	cmp	r2, r3
 8015eee:	f040 829a 	bne.w	8016426 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8015ef2:	4b7a      	ldr	r3, [pc, #488]	; (80160dc <tcp_receive+0x88c>)
 8015ef4:	891c      	ldrh	r4, [r3, #8]
 8015ef6:	4b79      	ldr	r3, [pc, #484]	; (80160dc <tcp_receive+0x88c>)
 8015ef8:	68db      	ldr	r3, [r3, #12]
 8015efa:	899b      	ldrh	r3, [r3, #12]
 8015efc:	b29b      	uxth	r3, r3
 8015efe:	4618      	mov	r0, r3
 8015f00:	f7fa fd8e 	bl	8010a20 <lwip_htons>
 8015f04:	4603      	mov	r3, r0
 8015f06:	b2db      	uxtb	r3, r3
 8015f08:	f003 0303 	and.w	r3, r3, #3
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d001      	beq.n	8015f14 <tcp_receive+0x6c4>
 8015f10:	2301      	movs	r3, #1
 8015f12:	e000      	b.n	8015f16 <tcp_receive+0x6c6>
 8015f14:	2300      	movs	r3, #0
 8015f16:	4423      	add	r3, r4
 8015f18:	b29a      	uxth	r2, r3
 8015f1a:	4b71      	ldr	r3, [pc, #452]	; (80160e0 <tcp_receive+0x890>)
 8015f1c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015f22:	4b6f      	ldr	r3, [pc, #444]	; (80160e0 <tcp_receive+0x890>)
 8015f24:	881b      	ldrh	r3, [r3, #0]
 8015f26:	429a      	cmp	r2, r3
 8015f28:	d275      	bcs.n	8016016 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015f2a:	4b6c      	ldr	r3, [pc, #432]	; (80160dc <tcp_receive+0x88c>)
 8015f2c:	68db      	ldr	r3, [r3, #12]
 8015f2e:	899b      	ldrh	r3, [r3, #12]
 8015f30:	b29b      	uxth	r3, r3
 8015f32:	4618      	mov	r0, r3
 8015f34:	f7fa fd74 	bl	8010a20 <lwip_htons>
 8015f38:	4603      	mov	r3, r0
 8015f3a:	b2db      	uxtb	r3, r3
 8015f3c:	f003 0301 	and.w	r3, r3, #1
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d01f      	beq.n	8015f84 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015f44:	4b65      	ldr	r3, [pc, #404]	; (80160dc <tcp_receive+0x88c>)
 8015f46:	68db      	ldr	r3, [r3, #12]
 8015f48:	899b      	ldrh	r3, [r3, #12]
 8015f4a:	b29b      	uxth	r3, r3
 8015f4c:	b21b      	sxth	r3, r3
 8015f4e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015f52:	b21c      	sxth	r4, r3
 8015f54:	4b61      	ldr	r3, [pc, #388]	; (80160dc <tcp_receive+0x88c>)
 8015f56:	68db      	ldr	r3, [r3, #12]
 8015f58:	899b      	ldrh	r3, [r3, #12]
 8015f5a:	b29b      	uxth	r3, r3
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	f7fa fd5f 	bl	8010a20 <lwip_htons>
 8015f62:	4603      	mov	r3, r0
 8015f64:	b2db      	uxtb	r3, r3
 8015f66:	b29b      	uxth	r3, r3
 8015f68:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015f6c:	b29b      	uxth	r3, r3
 8015f6e:	4618      	mov	r0, r3
 8015f70:	f7fa fd56 	bl	8010a20 <lwip_htons>
 8015f74:	4603      	mov	r3, r0
 8015f76:	b21b      	sxth	r3, r3
 8015f78:	4323      	orrs	r3, r4
 8015f7a:	b21a      	sxth	r2, r3
 8015f7c:	4b57      	ldr	r3, [pc, #348]	; (80160dc <tcp_receive+0x88c>)
 8015f7e:	68db      	ldr	r3, [r3, #12]
 8015f80:	b292      	uxth	r2, r2
 8015f82:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015f88:	4b54      	ldr	r3, [pc, #336]	; (80160dc <tcp_receive+0x88c>)
 8015f8a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015f8c:	4b53      	ldr	r3, [pc, #332]	; (80160dc <tcp_receive+0x88c>)
 8015f8e:	68db      	ldr	r3, [r3, #12]
 8015f90:	899b      	ldrh	r3, [r3, #12]
 8015f92:	b29b      	uxth	r3, r3
 8015f94:	4618      	mov	r0, r3
 8015f96:	f7fa fd43 	bl	8010a20 <lwip_htons>
 8015f9a:	4603      	mov	r3, r0
 8015f9c:	b2db      	uxtb	r3, r3
 8015f9e:	f003 0302 	and.w	r3, r3, #2
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d005      	beq.n	8015fb2 <tcp_receive+0x762>
            inseg.len -= 1;
 8015fa6:	4b4d      	ldr	r3, [pc, #308]	; (80160dc <tcp_receive+0x88c>)
 8015fa8:	891b      	ldrh	r3, [r3, #8]
 8015faa:	3b01      	subs	r3, #1
 8015fac:	b29a      	uxth	r2, r3
 8015fae:	4b4b      	ldr	r3, [pc, #300]	; (80160dc <tcp_receive+0x88c>)
 8015fb0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8015fb2:	4b4a      	ldr	r3, [pc, #296]	; (80160dc <tcp_receive+0x88c>)
 8015fb4:	685b      	ldr	r3, [r3, #4]
 8015fb6:	4a49      	ldr	r2, [pc, #292]	; (80160dc <tcp_receive+0x88c>)
 8015fb8:	8912      	ldrh	r2, [r2, #8]
 8015fba:	4611      	mov	r1, r2
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	f7fb ff9b 	bl	8011ef8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015fc2:	4b46      	ldr	r3, [pc, #280]	; (80160dc <tcp_receive+0x88c>)
 8015fc4:	891c      	ldrh	r4, [r3, #8]
 8015fc6:	4b45      	ldr	r3, [pc, #276]	; (80160dc <tcp_receive+0x88c>)
 8015fc8:	68db      	ldr	r3, [r3, #12]
 8015fca:	899b      	ldrh	r3, [r3, #12]
 8015fcc:	b29b      	uxth	r3, r3
 8015fce:	4618      	mov	r0, r3
 8015fd0:	f7fa fd26 	bl	8010a20 <lwip_htons>
 8015fd4:	4603      	mov	r3, r0
 8015fd6:	b2db      	uxtb	r3, r3
 8015fd8:	f003 0303 	and.w	r3, r3, #3
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d001      	beq.n	8015fe4 <tcp_receive+0x794>
 8015fe0:	2301      	movs	r3, #1
 8015fe2:	e000      	b.n	8015fe6 <tcp_receive+0x796>
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	4423      	add	r3, r4
 8015fe8:	b29a      	uxth	r2, r3
 8015fea:	4b3d      	ldr	r3, [pc, #244]	; (80160e0 <tcp_receive+0x890>)
 8015fec:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015fee:	4b3c      	ldr	r3, [pc, #240]	; (80160e0 <tcp_receive+0x890>)
 8015ff0:	881b      	ldrh	r3, [r3, #0]
 8015ff2:	461a      	mov	r2, r3
 8015ff4:	4b38      	ldr	r3, [pc, #224]	; (80160d8 <tcp_receive+0x888>)
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	441a      	add	r2, r3
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ffe:	6879      	ldr	r1, [r7, #4]
 8016000:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016002:	440b      	add	r3, r1
 8016004:	429a      	cmp	r2, r3
 8016006:	d006      	beq.n	8016016 <tcp_receive+0x7c6>
 8016008:	4b36      	ldr	r3, [pc, #216]	; (80160e4 <tcp_receive+0x894>)
 801600a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801600e:	4936      	ldr	r1, [pc, #216]	; (80160e8 <tcp_receive+0x898>)
 8016010:	4836      	ldr	r0, [pc, #216]	; (80160ec <tcp_receive+0x89c>)
 8016012:	f005 fcbf 	bl	801b994 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801601a:	2b00      	cmp	r3, #0
 801601c:	f000 80e7 	beq.w	80161ee <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016020:	4b2e      	ldr	r3, [pc, #184]	; (80160dc <tcp_receive+0x88c>)
 8016022:	68db      	ldr	r3, [r3, #12]
 8016024:	899b      	ldrh	r3, [r3, #12]
 8016026:	b29b      	uxth	r3, r3
 8016028:	4618      	mov	r0, r3
 801602a:	f7fa fcf9 	bl	8010a20 <lwip_htons>
 801602e:	4603      	mov	r3, r0
 8016030:	b2db      	uxtb	r3, r3
 8016032:	f003 0301 	and.w	r3, r3, #1
 8016036:	2b00      	cmp	r3, #0
 8016038:	d010      	beq.n	801605c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801603a:	e00a      	b.n	8016052 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016040:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016046:	681a      	ldr	r2, [r3, #0]
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801604c:	68f8      	ldr	r0, [r7, #12]
 801604e:	f7fd fcc4 	bl	80139da <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016056:	2b00      	cmp	r3, #0
 8016058:	d1f0      	bne.n	801603c <tcp_receive+0x7ec>
 801605a:	e0c8      	b.n	80161ee <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016060:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8016062:	e052      	b.n	801610a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016066:	68db      	ldr	r3, [r3, #12]
 8016068:	899b      	ldrh	r3, [r3, #12]
 801606a:	b29b      	uxth	r3, r3
 801606c:	4618      	mov	r0, r3
 801606e:	f7fa fcd7 	bl	8010a20 <lwip_htons>
 8016072:	4603      	mov	r3, r0
 8016074:	b2db      	uxtb	r3, r3
 8016076:	f003 0301 	and.w	r3, r3, #1
 801607a:	2b00      	cmp	r3, #0
 801607c:	d03d      	beq.n	80160fa <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801607e:	4b17      	ldr	r3, [pc, #92]	; (80160dc <tcp_receive+0x88c>)
 8016080:	68db      	ldr	r3, [r3, #12]
 8016082:	899b      	ldrh	r3, [r3, #12]
 8016084:	b29b      	uxth	r3, r3
 8016086:	4618      	mov	r0, r3
 8016088:	f7fa fcca 	bl	8010a20 <lwip_htons>
 801608c:	4603      	mov	r3, r0
 801608e:	b2db      	uxtb	r3, r3
 8016090:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016094:	2b00      	cmp	r3, #0
 8016096:	d130      	bne.n	80160fa <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8016098:	4b10      	ldr	r3, [pc, #64]	; (80160dc <tcp_receive+0x88c>)
 801609a:	68db      	ldr	r3, [r3, #12]
 801609c:	899b      	ldrh	r3, [r3, #12]
 801609e:	b29c      	uxth	r4, r3
 80160a0:	2001      	movs	r0, #1
 80160a2:	f7fa fcbd 	bl	8010a20 <lwip_htons>
 80160a6:	4603      	mov	r3, r0
 80160a8:	461a      	mov	r2, r3
 80160aa:	4b0c      	ldr	r3, [pc, #48]	; (80160dc <tcp_receive+0x88c>)
 80160ac:	68db      	ldr	r3, [r3, #12]
 80160ae:	4322      	orrs	r2, r4
 80160b0:	b292      	uxth	r2, r2
 80160b2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80160b4:	4b09      	ldr	r3, [pc, #36]	; (80160dc <tcp_receive+0x88c>)
 80160b6:	891c      	ldrh	r4, [r3, #8]
 80160b8:	4b08      	ldr	r3, [pc, #32]	; (80160dc <tcp_receive+0x88c>)
 80160ba:	68db      	ldr	r3, [r3, #12]
 80160bc:	899b      	ldrh	r3, [r3, #12]
 80160be:	b29b      	uxth	r3, r3
 80160c0:	4618      	mov	r0, r3
 80160c2:	f7fa fcad 	bl	8010a20 <lwip_htons>
 80160c6:	4603      	mov	r3, r0
 80160c8:	b2db      	uxtb	r3, r3
 80160ca:	f003 0303 	and.w	r3, r3, #3
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d00e      	beq.n	80160f0 <tcp_receive+0x8a0>
 80160d2:	2301      	movs	r3, #1
 80160d4:	e00d      	b.n	80160f2 <tcp_receive+0x8a2>
 80160d6:	bf00      	nop
 80160d8:	200110c4 	.word	0x200110c4
 80160dc:	200110a4 	.word	0x200110a4
 80160e0:	200110ce 	.word	0x200110ce
 80160e4:	0801ee18 	.word	0x0801ee18
 80160e8:	0801f1c0 	.word	0x0801f1c0
 80160ec:	0801ee64 	.word	0x0801ee64
 80160f0:	2300      	movs	r3, #0
 80160f2:	4423      	add	r3, r4
 80160f4:	b29a      	uxth	r2, r3
 80160f6:	4b98      	ldr	r3, [pc, #608]	; (8016358 <tcp_receive+0xb08>)
 80160f8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80160fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80160fc:	613b      	str	r3, [r7, #16]
              next = next->next;
 80160fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8016104:	6938      	ldr	r0, [r7, #16]
 8016106:	f7fd fc68 	bl	80139da <tcp_seg_free>
            while (next &&
 801610a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801610c:	2b00      	cmp	r3, #0
 801610e:	d00e      	beq.n	801612e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016110:	4b91      	ldr	r3, [pc, #580]	; (8016358 <tcp_receive+0xb08>)
 8016112:	881b      	ldrh	r3, [r3, #0]
 8016114:	461a      	mov	r2, r3
 8016116:	4b91      	ldr	r3, [pc, #580]	; (801635c <tcp_receive+0xb0c>)
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	441a      	add	r2, r3
 801611c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801611e:	68db      	ldr	r3, [r3, #12]
 8016120:	685b      	ldr	r3, [r3, #4]
 8016122:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016124:	8909      	ldrh	r1, [r1, #8]
 8016126:	440b      	add	r3, r1
 8016128:	1ad3      	subs	r3, r2, r3
            while (next &&
 801612a:	2b00      	cmp	r3, #0
 801612c:	da9a      	bge.n	8016064 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801612e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016130:	2b00      	cmp	r3, #0
 8016132:	d059      	beq.n	80161e8 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8016134:	4b88      	ldr	r3, [pc, #544]	; (8016358 <tcp_receive+0xb08>)
 8016136:	881b      	ldrh	r3, [r3, #0]
 8016138:	461a      	mov	r2, r3
 801613a:	4b88      	ldr	r3, [pc, #544]	; (801635c <tcp_receive+0xb0c>)
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	441a      	add	r2, r3
 8016140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016142:	68db      	ldr	r3, [r3, #12]
 8016144:	685b      	ldr	r3, [r3, #4]
 8016146:	1ad3      	subs	r3, r2, r3
            if (next &&
 8016148:	2b00      	cmp	r3, #0
 801614a:	dd4d      	ble.n	80161e8 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801614c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801614e:	68db      	ldr	r3, [r3, #12]
 8016150:	685b      	ldr	r3, [r3, #4]
 8016152:	b29a      	uxth	r2, r3
 8016154:	4b81      	ldr	r3, [pc, #516]	; (801635c <tcp_receive+0xb0c>)
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	b29b      	uxth	r3, r3
 801615a:	1ad3      	subs	r3, r2, r3
 801615c:	b29a      	uxth	r2, r3
 801615e:	4b80      	ldr	r3, [pc, #512]	; (8016360 <tcp_receive+0xb10>)
 8016160:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016162:	4b7f      	ldr	r3, [pc, #508]	; (8016360 <tcp_receive+0xb10>)
 8016164:	68db      	ldr	r3, [r3, #12]
 8016166:	899b      	ldrh	r3, [r3, #12]
 8016168:	b29b      	uxth	r3, r3
 801616a:	4618      	mov	r0, r3
 801616c:	f7fa fc58 	bl	8010a20 <lwip_htons>
 8016170:	4603      	mov	r3, r0
 8016172:	b2db      	uxtb	r3, r3
 8016174:	f003 0302 	and.w	r3, r3, #2
 8016178:	2b00      	cmp	r3, #0
 801617a:	d005      	beq.n	8016188 <tcp_receive+0x938>
                inseg.len -= 1;
 801617c:	4b78      	ldr	r3, [pc, #480]	; (8016360 <tcp_receive+0xb10>)
 801617e:	891b      	ldrh	r3, [r3, #8]
 8016180:	3b01      	subs	r3, #1
 8016182:	b29a      	uxth	r2, r3
 8016184:	4b76      	ldr	r3, [pc, #472]	; (8016360 <tcp_receive+0xb10>)
 8016186:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8016188:	4b75      	ldr	r3, [pc, #468]	; (8016360 <tcp_receive+0xb10>)
 801618a:	685b      	ldr	r3, [r3, #4]
 801618c:	4a74      	ldr	r2, [pc, #464]	; (8016360 <tcp_receive+0xb10>)
 801618e:	8912      	ldrh	r2, [r2, #8]
 8016190:	4611      	mov	r1, r2
 8016192:	4618      	mov	r0, r3
 8016194:	f7fb feb0 	bl	8011ef8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8016198:	4b71      	ldr	r3, [pc, #452]	; (8016360 <tcp_receive+0xb10>)
 801619a:	891c      	ldrh	r4, [r3, #8]
 801619c:	4b70      	ldr	r3, [pc, #448]	; (8016360 <tcp_receive+0xb10>)
 801619e:	68db      	ldr	r3, [r3, #12]
 80161a0:	899b      	ldrh	r3, [r3, #12]
 80161a2:	b29b      	uxth	r3, r3
 80161a4:	4618      	mov	r0, r3
 80161a6:	f7fa fc3b 	bl	8010a20 <lwip_htons>
 80161aa:	4603      	mov	r3, r0
 80161ac:	b2db      	uxtb	r3, r3
 80161ae:	f003 0303 	and.w	r3, r3, #3
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d001      	beq.n	80161ba <tcp_receive+0x96a>
 80161b6:	2301      	movs	r3, #1
 80161b8:	e000      	b.n	80161bc <tcp_receive+0x96c>
 80161ba:	2300      	movs	r3, #0
 80161bc:	4423      	add	r3, r4
 80161be:	b29a      	uxth	r2, r3
 80161c0:	4b65      	ldr	r3, [pc, #404]	; (8016358 <tcp_receive+0xb08>)
 80161c2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80161c4:	4b64      	ldr	r3, [pc, #400]	; (8016358 <tcp_receive+0xb08>)
 80161c6:	881b      	ldrh	r3, [r3, #0]
 80161c8:	461a      	mov	r2, r3
 80161ca:	4b64      	ldr	r3, [pc, #400]	; (801635c <tcp_receive+0xb0c>)
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	441a      	add	r2, r3
 80161d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80161d2:	68db      	ldr	r3, [r3, #12]
 80161d4:	685b      	ldr	r3, [r3, #4]
 80161d6:	429a      	cmp	r2, r3
 80161d8:	d006      	beq.n	80161e8 <tcp_receive+0x998>
 80161da:	4b62      	ldr	r3, [pc, #392]	; (8016364 <tcp_receive+0xb14>)
 80161dc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80161e0:	4961      	ldr	r1, [pc, #388]	; (8016368 <tcp_receive+0xb18>)
 80161e2:	4862      	ldr	r0, [pc, #392]	; (801636c <tcp_receive+0xb1c>)
 80161e4:	f005 fbd6 	bl	801b994 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80161ec:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80161ee:	4b5a      	ldr	r3, [pc, #360]	; (8016358 <tcp_receive+0xb08>)
 80161f0:	881b      	ldrh	r3, [r3, #0]
 80161f2:	461a      	mov	r2, r3
 80161f4:	4b59      	ldr	r3, [pc, #356]	; (801635c <tcp_receive+0xb0c>)
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	441a      	add	r2, r3
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016202:	4b55      	ldr	r3, [pc, #340]	; (8016358 <tcp_receive+0xb08>)
 8016204:	881b      	ldrh	r3, [r3, #0]
 8016206:	429a      	cmp	r2, r3
 8016208:	d206      	bcs.n	8016218 <tcp_receive+0x9c8>
 801620a:	4b56      	ldr	r3, [pc, #344]	; (8016364 <tcp_receive+0xb14>)
 801620c:	f240 6207 	movw	r2, #1543	; 0x607
 8016210:	4957      	ldr	r1, [pc, #348]	; (8016370 <tcp_receive+0xb20>)
 8016212:	4856      	ldr	r0, [pc, #344]	; (801636c <tcp_receive+0xb1c>)
 8016214:	f005 fbbe 	bl	801b994 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801621c:	4b4e      	ldr	r3, [pc, #312]	; (8016358 <tcp_receive+0xb08>)
 801621e:	881b      	ldrh	r3, [r3, #0]
 8016220:	1ad3      	subs	r3, r2, r3
 8016222:	b29a      	uxth	r2, r3
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8016228:	6878      	ldr	r0, [r7, #4]
 801622a:	f7fc feb1 	bl	8012f90 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801622e:	4b4c      	ldr	r3, [pc, #304]	; (8016360 <tcp_receive+0xb10>)
 8016230:	685b      	ldr	r3, [r3, #4]
 8016232:	891b      	ldrh	r3, [r3, #8]
 8016234:	2b00      	cmp	r3, #0
 8016236:	d006      	beq.n	8016246 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8016238:	4b49      	ldr	r3, [pc, #292]	; (8016360 <tcp_receive+0xb10>)
 801623a:	685b      	ldr	r3, [r3, #4]
 801623c:	4a4d      	ldr	r2, [pc, #308]	; (8016374 <tcp_receive+0xb24>)
 801623e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8016240:	4b47      	ldr	r3, [pc, #284]	; (8016360 <tcp_receive+0xb10>)
 8016242:	2200      	movs	r2, #0
 8016244:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016246:	4b46      	ldr	r3, [pc, #280]	; (8016360 <tcp_receive+0xb10>)
 8016248:	68db      	ldr	r3, [r3, #12]
 801624a:	899b      	ldrh	r3, [r3, #12]
 801624c:	b29b      	uxth	r3, r3
 801624e:	4618      	mov	r0, r3
 8016250:	f7fa fbe6 	bl	8010a20 <lwip_htons>
 8016254:	4603      	mov	r3, r0
 8016256:	b2db      	uxtb	r3, r3
 8016258:	f003 0301 	and.w	r3, r3, #1
 801625c:	2b00      	cmp	r3, #0
 801625e:	f000 80b8 	beq.w	80163d2 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8016262:	4b45      	ldr	r3, [pc, #276]	; (8016378 <tcp_receive+0xb28>)
 8016264:	781b      	ldrb	r3, [r3, #0]
 8016266:	f043 0320 	orr.w	r3, r3, #32
 801626a:	b2da      	uxtb	r2, r3
 801626c:	4b42      	ldr	r3, [pc, #264]	; (8016378 <tcp_receive+0xb28>)
 801626e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8016270:	e0af      	b.n	80163d2 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016276:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801627c:	68db      	ldr	r3, [r3, #12]
 801627e:	685b      	ldr	r3, [r3, #4]
 8016280:	4a36      	ldr	r2, [pc, #216]	; (801635c <tcp_receive+0xb0c>)
 8016282:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016284:	68bb      	ldr	r3, [r7, #8]
 8016286:	891b      	ldrh	r3, [r3, #8]
 8016288:	461c      	mov	r4, r3
 801628a:	68bb      	ldr	r3, [r7, #8]
 801628c:	68db      	ldr	r3, [r3, #12]
 801628e:	899b      	ldrh	r3, [r3, #12]
 8016290:	b29b      	uxth	r3, r3
 8016292:	4618      	mov	r0, r3
 8016294:	f7fa fbc4 	bl	8010a20 <lwip_htons>
 8016298:	4603      	mov	r3, r0
 801629a:	b2db      	uxtb	r3, r3
 801629c:	f003 0303 	and.w	r3, r3, #3
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d001      	beq.n	80162a8 <tcp_receive+0xa58>
 80162a4:	2301      	movs	r3, #1
 80162a6:	e000      	b.n	80162aa <tcp_receive+0xa5a>
 80162a8:	2300      	movs	r3, #0
 80162aa:	191a      	adds	r2, r3, r4
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162b0:	441a      	add	r2, r3
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80162ba:	461c      	mov	r4, r3
 80162bc:	68bb      	ldr	r3, [r7, #8]
 80162be:	891b      	ldrh	r3, [r3, #8]
 80162c0:	461d      	mov	r5, r3
 80162c2:	68bb      	ldr	r3, [r7, #8]
 80162c4:	68db      	ldr	r3, [r3, #12]
 80162c6:	899b      	ldrh	r3, [r3, #12]
 80162c8:	b29b      	uxth	r3, r3
 80162ca:	4618      	mov	r0, r3
 80162cc:	f7fa fba8 	bl	8010a20 <lwip_htons>
 80162d0:	4603      	mov	r3, r0
 80162d2:	b2db      	uxtb	r3, r3
 80162d4:	f003 0303 	and.w	r3, r3, #3
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d001      	beq.n	80162e0 <tcp_receive+0xa90>
 80162dc:	2301      	movs	r3, #1
 80162de:	e000      	b.n	80162e2 <tcp_receive+0xa92>
 80162e0:	2300      	movs	r3, #0
 80162e2:	442b      	add	r3, r5
 80162e4:	429c      	cmp	r4, r3
 80162e6:	d206      	bcs.n	80162f6 <tcp_receive+0xaa6>
 80162e8:	4b1e      	ldr	r3, [pc, #120]	; (8016364 <tcp_receive+0xb14>)
 80162ea:	f240 622b 	movw	r2, #1579	; 0x62b
 80162ee:	4923      	ldr	r1, [pc, #140]	; (801637c <tcp_receive+0xb2c>)
 80162f0:	481e      	ldr	r0, [pc, #120]	; (801636c <tcp_receive+0xb1c>)
 80162f2:	f005 fb4f 	bl	801b994 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80162f6:	68bb      	ldr	r3, [r7, #8]
 80162f8:	891b      	ldrh	r3, [r3, #8]
 80162fa:	461c      	mov	r4, r3
 80162fc:	68bb      	ldr	r3, [r7, #8]
 80162fe:	68db      	ldr	r3, [r3, #12]
 8016300:	899b      	ldrh	r3, [r3, #12]
 8016302:	b29b      	uxth	r3, r3
 8016304:	4618      	mov	r0, r3
 8016306:	f7fa fb8b 	bl	8010a20 <lwip_htons>
 801630a:	4603      	mov	r3, r0
 801630c:	b2db      	uxtb	r3, r3
 801630e:	f003 0303 	and.w	r3, r3, #3
 8016312:	2b00      	cmp	r3, #0
 8016314:	d001      	beq.n	801631a <tcp_receive+0xaca>
 8016316:	2301      	movs	r3, #1
 8016318:	e000      	b.n	801631c <tcp_receive+0xacc>
 801631a:	2300      	movs	r3, #0
 801631c:	1919      	adds	r1, r3, r4
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016322:	b28b      	uxth	r3, r1
 8016324:	1ad3      	subs	r3, r2, r3
 8016326:	b29a      	uxth	r2, r3
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801632c:	6878      	ldr	r0, [r7, #4]
 801632e:	f7fc fe2f 	bl	8012f90 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8016332:	68bb      	ldr	r3, [r7, #8]
 8016334:	685b      	ldr	r3, [r3, #4]
 8016336:	891b      	ldrh	r3, [r3, #8]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d028      	beq.n	801638e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801633c:	4b0d      	ldr	r3, [pc, #52]	; (8016374 <tcp_receive+0xb24>)
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d01d      	beq.n	8016380 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8016344:	4b0b      	ldr	r3, [pc, #44]	; (8016374 <tcp_receive+0xb24>)
 8016346:	681a      	ldr	r2, [r3, #0]
 8016348:	68bb      	ldr	r3, [r7, #8]
 801634a:	685b      	ldr	r3, [r3, #4]
 801634c:	4619      	mov	r1, r3
 801634e:	4610      	mov	r0, r2
 8016350:	f7fc f858 	bl	8012404 <pbuf_cat>
 8016354:	e018      	b.n	8016388 <tcp_receive+0xb38>
 8016356:	bf00      	nop
 8016358:	200110ce 	.word	0x200110ce
 801635c:	200110c4 	.word	0x200110c4
 8016360:	200110a4 	.word	0x200110a4
 8016364:	0801ee18 	.word	0x0801ee18
 8016368:	0801f1f8 	.word	0x0801f1f8
 801636c:	0801ee64 	.word	0x0801ee64
 8016370:	0801f234 	.word	0x0801f234
 8016374:	200110d4 	.word	0x200110d4
 8016378:	200110d1 	.word	0x200110d1
 801637c:	0801f254 	.word	0x0801f254
            } else {
              recv_data = cseg->p;
 8016380:	68bb      	ldr	r3, [r7, #8]
 8016382:	685b      	ldr	r3, [r3, #4]
 8016384:	4a70      	ldr	r2, [pc, #448]	; (8016548 <tcp_receive+0xcf8>)
 8016386:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8016388:	68bb      	ldr	r3, [r7, #8]
 801638a:	2200      	movs	r2, #0
 801638c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801638e:	68bb      	ldr	r3, [r7, #8]
 8016390:	68db      	ldr	r3, [r3, #12]
 8016392:	899b      	ldrh	r3, [r3, #12]
 8016394:	b29b      	uxth	r3, r3
 8016396:	4618      	mov	r0, r3
 8016398:	f7fa fb42 	bl	8010a20 <lwip_htons>
 801639c:	4603      	mov	r3, r0
 801639e:	b2db      	uxtb	r3, r3
 80163a0:	f003 0301 	and.w	r3, r3, #1
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d00d      	beq.n	80163c4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80163a8:	4b68      	ldr	r3, [pc, #416]	; (801654c <tcp_receive+0xcfc>)
 80163aa:	781b      	ldrb	r3, [r3, #0]
 80163ac:	f043 0320 	orr.w	r3, r3, #32
 80163b0:	b2da      	uxtb	r2, r3
 80163b2:	4b66      	ldr	r3, [pc, #408]	; (801654c <tcp_receive+0xcfc>)
 80163b4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	7d1b      	ldrb	r3, [r3, #20]
 80163ba:	2b04      	cmp	r3, #4
 80163bc:	d102      	bne.n	80163c4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	2207      	movs	r2, #7
 80163c2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80163c4:	68bb      	ldr	r3, [r7, #8]
 80163c6:	681a      	ldr	r2, [r3, #0]
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80163cc:	68b8      	ldr	r0, [r7, #8]
 80163ce:	f7fd fb04 	bl	80139da <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d008      	beq.n	80163ec <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80163de:	68db      	ldr	r3, [r3, #12]
 80163e0:	685a      	ldr	r2, [r3, #4]
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80163e6:	429a      	cmp	r2, r3
 80163e8:	f43f af43 	beq.w	8016272 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	8b5b      	ldrh	r3, [r3, #26]
 80163f0:	f003 0301 	and.w	r3, r3, #1
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d00e      	beq.n	8016416 <tcp_receive+0xbc6>
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	8b5b      	ldrh	r3, [r3, #26]
 80163fc:	f023 0301 	bic.w	r3, r3, #1
 8016400:	b29a      	uxth	r2, r3
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	835a      	strh	r2, [r3, #26]
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	8b5b      	ldrh	r3, [r3, #26]
 801640a:	f043 0302 	orr.w	r3, r3, #2
 801640e:	b29a      	uxth	r2, r3
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016414:	e188      	b.n	8016728 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	8b5b      	ldrh	r3, [r3, #26]
 801641a:	f043 0301 	orr.w	r3, r3, #1
 801641e:	b29a      	uxth	r2, r3
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016424:	e180      	b.n	8016728 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801642a:	2b00      	cmp	r3, #0
 801642c:	d106      	bne.n	801643c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801642e:	4848      	ldr	r0, [pc, #288]	; (8016550 <tcp_receive+0xd00>)
 8016430:	f7fd faec 	bl	8013a0c <tcp_seg_copy>
 8016434:	4602      	mov	r2, r0
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	675a      	str	r2, [r3, #116]	; 0x74
 801643a:	e16d      	b.n	8016718 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801643c:	2300      	movs	r3, #0
 801643e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016444:	63bb      	str	r3, [r7, #56]	; 0x38
 8016446:	e157      	b.n	80166f8 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8016448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801644a:	68db      	ldr	r3, [r3, #12]
 801644c:	685a      	ldr	r2, [r3, #4]
 801644e:	4b41      	ldr	r3, [pc, #260]	; (8016554 <tcp_receive+0xd04>)
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	429a      	cmp	r2, r3
 8016454:	d11d      	bne.n	8016492 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8016456:	4b3e      	ldr	r3, [pc, #248]	; (8016550 <tcp_receive+0xd00>)
 8016458:	891a      	ldrh	r2, [r3, #8]
 801645a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801645c:	891b      	ldrh	r3, [r3, #8]
 801645e:	429a      	cmp	r2, r3
 8016460:	f240 814f 	bls.w	8016702 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016464:	483a      	ldr	r0, [pc, #232]	; (8016550 <tcp_receive+0xd00>)
 8016466:	f7fd fad1 	bl	8013a0c <tcp_seg_copy>
 801646a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801646c:	697b      	ldr	r3, [r7, #20]
 801646e:	2b00      	cmp	r3, #0
 8016470:	f000 8149 	beq.w	8016706 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8016474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016476:	2b00      	cmp	r3, #0
 8016478:	d003      	beq.n	8016482 <tcp_receive+0xc32>
                    prev->next = cseg;
 801647a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801647c:	697a      	ldr	r2, [r7, #20]
 801647e:	601a      	str	r2, [r3, #0]
 8016480:	e002      	b.n	8016488 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	697a      	ldr	r2, [r7, #20]
 8016486:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8016488:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801648a:	6978      	ldr	r0, [r7, #20]
 801648c:	f7ff f8dc 	bl	8015648 <tcp_oos_insert_segment>
                }
                break;
 8016490:	e139      	b.n	8016706 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8016492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016494:	2b00      	cmp	r3, #0
 8016496:	d117      	bne.n	80164c8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8016498:	4b2e      	ldr	r3, [pc, #184]	; (8016554 <tcp_receive+0xd04>)
 801649a:	681a      	ldr	r2, [r3, #0]
 801649c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801649e:	68db      	ldr	r3, [r3, #12]
 80164a0:	685b      	ldr	r3, [r3, #4]
 80164a2:	1ad3      	subs	r3, r2, r3
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	da57      	bge.n	8016558 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80164a8:	4829      	ldr	r0, [pc, #164]	; (8016550 <tcp_receive+0xd00>)
 80164aa:	f7fd faaf 	bl	8013a0c <tcp_seg_copy>
 80164ae:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80164b0:	69bb      	ldr	r3, [r7, #24]
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	f000 8129 	beq.w	801670a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	69ba      	ldr	r2, [r7, #24]
 80164bc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80164be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80164c0:	69b8      	ldr	r0, [r7, #24]
 80164c2:	f7ff f8c1 	bl	8015648 <tcp_oos_insert_segment>
                  }
                  break;
 80164c6:	e120      	b.n	801670a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80164c8:	4b22      	ldr	r3, [pc, #136]	; (8016554 <tcp_receive+0xd04>)
 80164ca:	681a      	ldr	r2, [r3, #0]
 80164cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164ce:	68db      	ldr	r3, [r3, #12]
 80164d0:	685b      	ldr	r3, [r3, #4]
 80164d2:	1ad3      	subs	r3, r2, r3
 80164d4:	3b01      	subs	r3, #1
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	db3e      	blt.n	8016558 <tcp_receive+0xd08>
 80164da:	4b1e      	ldr	r3, [pc, #120]	; (8016554 <tcp_receive+0xd04>)
 80164dc:	681a      	ldr	r2, [r3, #0]
 80164de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164e0:	68db      	ldr	r3, [r3, #12]
 80164e2:	685b      	ldr	r3, [r3, #4]
 80164e4:	1ad3      	subs	r3, r2, r3
 80164e6:	3301      	adds	r3, #1
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	dc35      	bgt.n	8016558 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80164ec:	4818      	ldr	r0, [pc, #96]	; (8016550 <tcp_receive+0xd00>)
 80164ee:	f7fd fa8d 	bl	8013a0c <tcp_seg_copy>
 80164f2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80164f4:	69fb      	ldr	r3, [r7, #28]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	f000 8109 	beq.w	801670e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80164fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164fe:	68db      	ldr	r3, [r3, #12]
 8016500:	685b      	ldr	r3, [r3, #4]
 8016502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016504:	8912      	ldrh	r2, [r2, #8]
 8016506:	441a      	add	r2, r3
 8016508:	4b12      	ldr	r3, [pc, #72]	; (8016554 <tcp_receive+0xd04>)
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	1ad3      	subs	r3, r2, r3
 801650e:	2b00      	cmp	r3, #0
 8016510:	dd12      	ble.n	8016538 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8016512:	4b10      	ldr	r3, [pc, #64]	; (8016554 <tcp_receive+0xd04>)
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	b29a      	uxth	r2, r3
 8016518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801651a:	68db      	ldr	r3, [r3, #12]
 801651c:	685b      	ldr	r3, [r3, #4]
 801651e:	b29b      	uxth	r3, r3
 8016520:	1ad3      	subs	r3, r2, r3
 8016522:	b29a      	uxth	r2, r3
 8016524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016526:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8016528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801652a:	685a      	ldr	r2, [r3, #4]
 801652c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801652e:	891b      	ldrh	r3, [r3, #8]
 8016530:	4619      	mov	r1, r3
 8016532:	4610      	mov	r0, r2
 8016534:	f7fb fce0 	bl	8011ef8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8016538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801653a:	69fa      	ldr	r2, [r7, #28]
 801653c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801653e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016540:	69f8      	ldr	r0, [r7, #28]
 8016542:	f7ff f881 	bl	8015648 <tcp_oos_insert_segment>
                  }
                  break;
 8016546:	e0e2      	b.n	801670e <tcp_receive+0xebe>
 8016548:	200110d4 	.word	0x200110d4
 801654c:	200110d1 	.word	0x200110d1
 8016550:	200110a4 	.word	0x200110a4
 8016554:	200110c4 	.word	0x200110c4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8016558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801655a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801655c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	2b00      	cmp	r3, #0
 8016562:	f040 80c6 	bne.w	80166f2 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8016566:	4b80      	ldr	r3, [pc, #512]	; (8016768 <tcp_receive+0xf18>)
 8016568:	681a      	ldr	r2, [r3, #0]
 801656a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801656c:	68db      	ldr	r3, [r3, #12]
 801656e:	685b      	ldr	r3, [r3, #4]
 8016570:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8016572:	2b00      	cmp	r3, #0
 8016574:	f340 80bd 	ble.w	80166f2 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801657a:	68db      	ldr	r3, [r3, #12]
 801657c:	899b      	ldrh	r3, [r3, #12]
 801657e:	b29b      	uxth	r3, r3
 8016580:	4618      	mov	r0, r3
 8016582:	f7fa fa4d 	bl	8010a20 <lwip_htons>
 8016586:	4603      	mov	r3, r0
 8016588:	b2db      	uxtb	r3, r3
 801658a:	f003 0301 	and.w	r3, r3, #1
 801658e:	2b00      	cmp	r3, #0
 8016590:	f040 80bf 	bne.w	8016712 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8016594:	4875      	ldr	r0, [pc, #468]	; (801676c <tcp_receive+0xf1c>)
 8016596:	f7fd fa39 	bl	8013a0c <tcp_seg_copy>
 801659a:	4602      	mov	r2, r0
 801659c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801659e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80165a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	f000 80b6 	beq.w	8016716 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80165aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165ac:	68db      	ldr	r3, [r3, #12]
 80165ae:	685b      	ldr	r3, [r3, #4]
 80165b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80165b2:	8912      	ldrh	r2, [r2, #8]
 80165b4:	441a      	add	r2, r3
 80165b6:	4b6c      	ldr	r3, [pc, #432]	; (8016768 <tcp_receive+0xf18>)
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	1ad3      	subs	r3, r2, r3
 80165bc:	2b00      	cmp	r3, #0
 80165be:	dd12      	ble.n	80165e6 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80165c0:	4b69      	ldr	r3, [pc, #420]	; (8016768 <tcp_receive+0xf18>)
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	b29a      	uxth	r2, r3
 80165c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165c8:	68db      	ldr	r3, [r3, #12]
 80165ca:	685b      	ldr	r3, [r3, #4]
 80165cc:	b29b      	uxth	r3, r3
 80165ce:	1ad3      	subs	r3, r2, r3
 80165d0:	b29a      	uxth	r2, r3
 80165d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165d4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80165d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165d8:	685a      	ldr	r2, [r3, #4]
 80165da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165dc:	891b      	ldrh	r3, [r3, #8]
 80165de:	4619      	mov	r1, r3
 80165e0:	4610      	mov	r0, r2
 80165e2:	f7fb fc89 	bl	8011ef8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80165e6:	4b62      	ldr	r3, [pc, #392]	; (8016770 <tcp_receive+0xf20>)
 80165e8:	881b      	ldrh	r3, [r3, #0]
 80165ea:	461a      	mov	r2, r3
 80165ec:	4b5e      	ldr	r3, [pc, #376]	; (8016768 <tcp_receive+0xf18>)
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	441a      	add	r2, r3
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165f6:	6879      	ldr	r1, [r7, #4]
 80165f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80165fa:	440b      	add	r3, r1
 80165fc:	1ad3      	subs	r3, r2, r3
 80165fe:	2b00      	cmp	r3, #0
 8016600:	f340 8089 	ble.w	8016716 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8016604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	68db      	ldr	r3, [r3, #12]
 801660a:	899b      	ldrh	r3, [r3, #12]
 801660c:	b29b      	uxth	r3, r3
 801660e:	4618      	mov	r0, r3
 8016610:	f7fa fa06 	bl	8010a20 <lwip_htons>
 8016614:	4603      	mov	r3, r0
 8016616:	b2db      	uxtb	r3, r3
 8016618:	f003 0301 	and.w	r3, r3, #1
 801661c:	2b00      	cmp	r3, #0
 801661e:	d022      	beq.n	8016666 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8016620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	68db      	ldr	r3, [r3, #12]
 8016626:	899b      	ldrh	r3, [r3, #12]
 8016628:	b29b      	uxth	r3, r3
 801662a:	b21b      	sxth	r3, r3
 801662c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016630:	b21c      	sxth	r4, r3
 8016632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016634:	681b      	ldr	r3, [r3, #0]
 8016636:	68db      	ldr	r3, [r3, #12]
 8016638:	899b      	ldrh	r3, [r3, #12]
 801663a:	b29b      	uxth	r3, r3
 801663c:	4618      	mov	r0, r3
 801663e:	f7fa f9ef 	bl	8010a20 <lwip_htons>
 8016642:	4603      	mov	r3, r0
 8016644:	b2db      	uxtb	r3, r3
 8016646:	b29b      	uxth	r3, r3
 8016648:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801664c:	b29b      	uxth	r3, r3
 801664e:	4618      	mov	r0, r3
 8016650:	f7fa f9e6 	bl	8010a20 <lwip_htons>
 8016654:	4603      	mov	r3, r0
 8016656:	b21b      	sxth	r3, r3
 8016658:	4323      	orrs	r3, r4
 801665a:	b21a      	sxth	r2, r3
 801665c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	68db      	ldr	r3, [r3, #12]
 8016662:	b292      	uxth	r2, r2
 8016664:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801666a:	b29a      	uxth	r2, r3
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016670:	4413      	add	r3, r2
 8016672:	b299      	uxth	r1, r3
 8016674:	4b3c      	ldr	r3, [pc, #240]	; (8016768 <tcp_receive+0xf18>)
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	b29a      	uxth	r2, r3
 801667a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	1a8a      	subs	r2, r1, r2
 8016680:	b292      	uxth	r2, r2
 8016682:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8016684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	685a      	ldr	r2, [r3, #4]
 801668a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801668c:	681b      	ldr	r3, [r3, #0]
 801668e:	891b      	ldrh	r3, [r3, #8]
 8016690:	4619      	mov	r1, r3
 8016692:	4610      	mov	r0, r2
 8016694:	f7fb fc30 	bl	8011ef8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8016698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801669a:	681b      	ldr	r3, [r3, #0]
 801669c:	891c      	ldrh	r4, [r3, #8]
 801669e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	68db      	ldr	r3, [r3, #12]
 80166a4:	899b      	ldrh	r3, [r3, #12]
 80166a6:	b29b      	uxth	r3, r3
 80166a8:	4618      	mov	r0, r3
 80166aa:	f7fa f9b9 	bl	8010a20 <lwip_htons>
 80166ae:	4603      	mov	r3, r0
 80166b0:	b2db      	uxtb	r3, r3
 80166b2:	f003 0303 	and.w	r3, r3, #3
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d001      	beq.n	80166be <tcp_receive+0xe6e>
 80166ba:	2301      	movs	r3, #1
 80166bc:	e000      	b.n	80166c0 <tcp_receive+0xe70>
 80166be:	2300      	movs	r3, #0
 80166c0:	4423      	add	r3, r4
 80166c2:	b29a      	uxth	r2, r3
 80166c4:	4b2a      	ldr	r3, [pc, #168]	; (8016770 <tcp_receive+0xf20>)
 80166c6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80166c8:	4b29      	ldr	r3, [pc, #164]	; (8016770 <tcp_receive+0xf20>)
 80166ca:	881b      	ldrh	r3, [r3, #0]
 80166cc:	461a      	mov	r2, r3
 80166ce:	4b26      	ldr	r3, [pc, #152]	; (8016768 <tcp_receive+0xf18>)
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	441a      	add	r2, r3
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166d8:	6879      	ldr	r1, [r7, #4]
 80166da:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80166dc:	440b      	add	r3, r1
 80166de:	429a      	cmp	r2, r3
 80166e0:	d019      	beq.n	8016716 <tcp_receive+0xec6>
 80166e2:	4b24      	ldr	r3, [pc, #144]	; (8016774 <tcp_receive+0xf24>)
 80166e4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80166e8:	4923      	ldr	r1, [pc, #140]	; (8016778 <tcp_receive+0xf28>)
 80166ea:	4824      	ldr	r0, [pc, #144]	; (801677c <tcp_receive+0xf2c>)
 80166ec:	f005 f952 	bl	801b994 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80166f0:	e011      	b.n	8016716 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80166f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80166f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	f47f aea4 	bne.w	8016448 <tcp_receive+0xbf8>
 8016700:	e00a      	b.n	8016718 <tcp_receive+0xec8>
                break;
 8016702:	bf00      	nop
 8016704:	e008      	b.n	8016718 <tcp_receive+0xec8>
                break;
 8016706:	bf00      	nop
 8016708:	e006      	b.n	8016718 <tcp_receive+0xec8>
                  break;
 801670a:	bf00      	nop
 801670c:	e004      	b.n	8016718 <tcp_receive+0xec8>
                  break;
 801670e:	bf00      	nop
 8016710:	e002      	b.n	8016718 <tcp_receive+0xec8>
                  break;
 8016712:	bf00      	nop
 8016714:	e000      	b.n	8016718 <tcp_receive+0xec8>
                break;
 8016716:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8016718:	6878      	ldr	r0, [r7, #4]
 801671a:	f001 fe8b 	bl	8018434 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801671e:	e003      	b.n	8016728 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8016720:	6878      	ldr	r0, [r7, #4]
 8016722:	f001 fe87 	bl	8018434 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016726:	e01a      	b.n	801675e <tcp_receive+0xf0e>
 8016728:	e019      	b.n	801675e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801672a:	4b0f      	ldr	r3, [pc, #60]	; (8016768 <tcp_receive+0xf18>)
 801672c:	681a      	ldr	r2, [r3, #0]
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016732:	1ad3      	subs	r3, r2, r3
 8016734:	2b00      	cmp	r3, #0
 8016736:	db0a      	blt.n	801674e <tcp_receive+0xefe>
 8016738:	4b0b      	ldr	r3, [pc, #44]	; (8016768 <tcp_receive+0xf18>)
 801673a:	681a      	ldr	r2, [r3, #0]
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016740:	6879      	ldr	r1, [r7, #4]
 8016742:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016744:	440b      	add	r3, r1
 8016746:	1ad3      	subs	r3, r2, r3
 8016748:	3301      	adds	r3, #1
 801674a:	2b00      	cmp	r3, #0
 801674c:	dd07      	ble.n	801675e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	8b5b      	ldrh	r3, [r3, #26]
 8016752:	f043 0302 	orr.w	r3, r3, #2
 8016756:	b29a      	uxth	r2, r3
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801675c:	e7ff      	b.n	801675e <tcp_receive+0xf0e>
 801675e:	bf00      	nop
 8016760:	3750      	adds	r7, #80	; 0x50
 8016762:	46bd      	mov	sp, r7
 8016764:	bdb0      	pop	{r4, r5, r7, pc}
 8016766:	bf00      	nop
 8016768:	200110c4 	.word	0x200110c4
 801676c:	200110a4 	.word	0x200110a4
 8016770:	200110ce 	.word	0x200110ce
 8016774:	0801ee18 	.word	0x0801ee18
 8016778:	0801f1c0 	.word	0x0801f1c0
 801677c:	0801ee64 	.word	0x0801ee64

08016780 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8016780:	b480      	push	{r7}
 8016782:	b083      	sub	sp, #12
 8016784:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8016786:	4b15      	ldr	r3, [pc, #84]	; (80167dc <tcp_get_next_optbyte+0x5c>)
 8016788:	881b      	ldrh	r3, [r3, #0]
 801678a:	1c5a      	adds	r2, r3, #1
 801678c:	b291      	uxth	r1, r2
 801678e:	4a13      	ldr	r2, [pc, #76]	; (80167dc <tcp_get_next_optbyte+0x5c>)
 8016790:	8011      	strh	r1, [r2, #0]
 8016792:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8016794:	4b12      	ldr	r3, [pc, #72]	; (80167e0 <tcp_get_next_optbyte+0x60>)
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	2b00      	cmp	r3, #0
 801679a:	d004      	beq.n	80167a6 <tcp_get_next_optbyte+0x26>
 801679c:	4b11      	ldr	r3, [pc, #68]	; (80167e4 <tcp_get_next_optbyte+0x64>)
 801679e:	881b      	ldrh	r3, [r3, #0]
 80167a0:	88fa      	ldrh	r2, [r7, #6]
 80167a2:	429a      	cmp	r2, r3
 80167a4:	d208      	bcs.n	80167b8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80167a6:	4b10      	ldr	r3, [pc, #64]	; (80167e8 <tcp_get_next_optbyte+0x68>)
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	3314      	adds	r3, #20
 80167ac:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80167ae:	88fb      	ldrh	r3, [r7, #6]
 80167b0:	683a      	ldr	r2, [r7, #0]
 80167b2:	4413      	add	r3, r2
 80167b4:	781b      	ldrb	r3, [r3, #0]
 80167b6:	e00b      	b.n	80167d0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80167b8:	88fb      	ldrh	r3, [r7, #6]
 80167ba:	b2da      	uxtb	r2, r3
 80167bc:	4b09      	ldr	r3, [pc, #36]	; (80167e4 <tcp_get_next_optbyte+0x64>)
 80167be:	881b      	ldrh	r3, [r3, #0]
 80167c0:	b2db      	uxtb	r3, r3
 80167c2:	1ad3      	subs	r3, r2, r3
 80167c4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80167c6:	4b06      	ldr	r3, [pc, #24]	; (80167e0 <tcp_get_next_optbyte+0x60>)
 80167c8:	681a      	ldr	r2, [r3, #0]
 80167ca:	797b      	ldrb	r3, [r7, #5]
 80167cc:	4413      	add	r3, r2
 80167ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80167d0:	4618      	mov	r0, r3
 80167d2:	370c      	adds	r7, #12
 80167d4:	46bd      	mov	sp, r7
 80167d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167da:	4770      	bx	lr
 80167dc:	200110c0 	.word	0x200110c0
 80167e0:	200110bc 	.word	0x200110bc
 80167e4:	200110ba 	.word	0x200110ba
 80167e8:	200110b4 	.word	0x200110b4

080167ec <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80167ec:	b580      	push	{r7, lr}
 80167ee:	b084      	sub	sp, #16
 80167f0:	af00      	add	r7, sp, #0
 80167f2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d106      	bne.n	8016808 <tcp_parseopt+0x1c>
 80167fa:	4b32      	ldr	r3, [pc, #200]	; (80168c4 <tcp_parseopt+0xd8>)
 80167fc:	f240 727d 	movw	r2, #1917	; 0x77d
 8016800:	4931      	ldr	r1, [pc, #196]	; (80168c8 <tcp_parseopt+0xdc>)
 8016802:	4832      	ldr	r0, [pc, #200]	; (80168cc <tcp_parseopt+0xe0>)
 8016804:	f005 f8c6 	bl	801b994 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8016808:	4b31      	ldr	r3, [pc, #196]	; (80168d0 <tcp_parseopt+0xe4>)
 801680a:	881b      	ldrh	r3, [r3, #0]
 801680c:	2b00      	cmp	r3, #0
 801680e:	d055      	beq.n	80168bc <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016810:	4b30      	ldr	r3, [pc, #192]	; (80168d4 <tcp_parseopt+0xe8>)
 8016812:	2200      	movs	r2, #0
 8016814:	801a      	strh	r2, [r3, #0]
 8016816:	e045      	b.n	80168a4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8016818:	f7ff ffb2 	bl	8016780 <tcp_get_next_optbyte>
 801681c:	4603      	mov	r3, r0
 801681e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8016820:	7bfb      	ldrb	r3, [r7, #15]
 8016822:	2b02      	cmp	r3, #2
 8016824:	d006      	beq.n	8016834 <tcp_parseopt+0x48>
 8016826:	2b02      	cmp	r3, #2
 8016828:	dc2b      	bgt.n	8016882 <tcp_parseopt+0x96>
 801682a:	2b00      	cmp	r3, #0
 801682c:	d041      	beq.n	80168b2 <tcp_parseopt+0xc6>
 801682e:	2b01      	cmp	r3, #1
 8016830:	d127      	bne.n	8016882 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8016832:	e037      	b.n	80168a4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8016834:	f7ff ffa4 	bl	8016780 <tcp_get_next_optbyte>
 8016838:	4603      	mov	r3, r0
 801683a:	2b04      	cmp	r3, #4
 801683c:	d13b      	bne.n	80168b6 <tcp_parseopt+0xca>
 801683e:	4b25      	ldr	r3, [pc, #148]	; (80168d4 <tcp_parseopt+0xe8>)
 8016840:	881b      	ldrh	r3, [r3, #0]
 8016842:	3301      	adds	r3, #1
 8016844:	4a22      	ldr	r2, [pc, #136]	; (80168d0 <tcp_parseopt+0xe4>)
 8016846:	8812      	ldrh	r2, [r2, #0]
 8016848:	4293      	cmp	r3, r2
 801684a:	da34      	bge.n	80168b6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801684c:	f7ff ff98 	bl	8016780 <tcp_get_next_optbyte>
 8016850:	4603      	mov	r3, r0
 8016852:	b29b      	uxth	r3, r3
 8016854:	021b      	lsls	r3, r3, #8
 8016856:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8016858:	f7ff ff92 	bl	8016780 <tcp_get_next_optbyte>
 801685c:	4603      	mov	r3, r0
 801685e:	b29a      	uxth	r2, r3
 8016860:	89bb      	ldrh	r3, [r7, #12]
 8016862:	4313      	orrs	r3, r2
 8016864:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8016866:	89bb      	ldrh	r3, [r7, #12]
 8016868:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801686c:	d804      	bhi.n	8016878 <tcp_parseopt+0x8c>
 801686e:	89bb      	ldrh	r3, [r7, #12]
 8016870:	2b00      	cmp	r3, #0
 8016872:	d001      	beq.n	8016878 <tcp_parseopt+0x8c>
 8016874:	89ba      	ldrh	r2, [r7, #12]
 8016876:	e001      	b.n	801687c <tcp_parseopt+0x90>
 8016878:	f44f 7206 	mov.w	r2, #536	; 0x218
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8016880:	e010      	b.n	80168a4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8016882:	f7ff ff7d 	bl	8016780 <tcp_get_next_optbyte>
 8016886:	4603      	mov	r3, r0
 8016888:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801688a:	7afb      	ldrb	r3, [r7, #11]
 801688c:	2b01      	cmp	r3, #1
 801688e:	d914      	bls.n	80168ba <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8016890:	7afb      	ldrb	r3, [r7, #11]
 8016892:	b29a      	uxth	r2, r3
 8016894:	4b0f      	ldr	r3, [pc, #60]	; (80168d4 <tcp_parseopt+0xe8>)
 8016896:	881b      	ldrh	r3, [r3, #0]
 8016898:	4413      	add	r3, r2
 801689a:	b29b      	uxth	r3, r3
 801689c:	3b02      	subs	r3, #2
 801689e:	b29a      	uxth	r2, r3
 80168a0:	4b0c      	ldr	r3, [pc, #48]	; (80168d4 <tcp_parseopt+0xe8>)
 80168a2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80168a4:	4b0b      	ldr	r3, [pc, #44]	; (80168d4 <tcp_parseopt+0xe8>)
 80168a6:	881a      	ldrh	r2, [r3, #0]
 80168a8:	4b09      	ldr	r3, [pc, #36]	; (80168d0 <tcp_parseopt+0xe4>)
 80168aa:	881b      	ldrh	r3, [r3, #0]
 80168ac:	429a      	cmp	r2, r3
 80168ae:	d3b3      	bcc.n	8016818 <tcp_parseopt+0x2c>
 80168b0:	e004      	b.n	80168bc <tcp_parseopt+0xd0>
          return;
 80168b2:	bf00      	nop
 80168b4:	e002      	b.n	80168bc <tcp_parseopt+0xd0>
            return;
 80168b6:	bf00      	nop
 80168b8:	e000      	b.n	80168bc <tcp_parseopt+0xd0>
            return;
 80168ba:	bf00      	nop
      }
    }
  }
}
 80168bc:	3710      	adds	r7, #16
 80168be:	46bd      	mov	sp, r7
 80168c0:	bd80      	pop	{r7, pc}
 80168c2:	bf00      	nop
 80168c4:	0801ee18 	.word	0x0801ee18
 80168c8:	0801f27c 	.word	0x0801f27c
 80168cc:	0801ee64 	.word	0x0801ee64
 80168d0:	200110b8 	.word	0x200110b8
 80168d4:	200110c0 	.word	0x200110c0

080168d8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80168d8:	b480      	push	{r7}
 80168da:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80168dc:	4b05      	ldr	r3, [pc, #20]	; (80168f4 <tcp_trigger_input_pcb_close+0x1c>)
 80168de:	781b      	ldrb	r3, [r3, #0]
 80168e0:	f043 0310 	orr.w	r3, r3, #16
 80168e4:	b2da      	uxtb	r2, r3
 80168e6:	4b03      	ldr	r3, [pc, #12]	; (80168f4 <tcp_trigger_input_pcb_close+0x1c>)
 80168e8:	701a      	strb	r2, [r3, #0]
}
 80168ea:	bf00      	nop
 80168ec:	46bd      	mov	sp, r7
 80168ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f2:	4770      	bx	lr
 80168f4:	200110d1 	.word	0x200110d1

080168f8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b084      	sub	sp, #16
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	60f8      	str	r0, [r7, #12]
 8016900:	60b9      	str	r1, [r7, #8]
 8016902:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	2b00      	cmp	r3, #0
 8016908:	d00a      	beq.n	8016920 <tcp_route+0x28>
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	7a1b      	ldrb	r3, [r3, #8]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d006      	beq.n	8016920 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	7a1b      	ldrb	r3, [r3, #8]
 8016916:	4618      	mov	r0, r3
 8016918:	f7fb f8e6 	bl	8011ae8 <netif_get_by_index>
 801691c:	4603      	mov	r3, r0
 801691e:	e003      	b.n	8016928 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8016920:	6878      	ldr	r0, [r7, #4]
 8016922:	f003 fc4b 	bl	801a1bc <ip4_route>
 8016926:	4603      	mov	r3, r0
  }
}
 8016928:	4618      	mov	r0, r3
 801692a:	3710      	adds	r7, #16
 801692c:	46bd      	mov	sp, r7
 801692e:	bd80      	pop	{r7, pc}

08016930 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8016930:	b590      	push	{r4, r7, lr}
 8016932:	b087      	sub	sp, #28
 8016934:	af00      	add	r7, sp, #0
 8016936:	60f8      	str	r0, [r7, #12]
 8016938:	60b9      	str	r1, [r7, #8]
 801693a:	603b      	str	r3, [r7, #0]
 801693c:	4613      	mov	r3, r2
 801693e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d105      	bne.n	8016952 <tcp_create_segment+0x22>
 8016946:	4b44      	ldr	r3, [pc, #272]	; (8016a58 <tcp_create_segment+0x128>)
 8016948:	22a3      	movs	r2, #163	; 0xa3
 801694a:	4944      	ldr	r1, [pc, #272]	; (8016a5c <tcp_create_segment+0x12c>)
 801694c:	4844      	ldr	r0, [pc, #272]	; (8016a60 <tcp_create_segment+0x130>)
 801694e:	f005 f821 	bl	801b994 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8016952:	68bb      	ldr	r3, [r7, #8]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d105      	bne.n	8016964 <tcp_create_segment+0x34>
 8016958:	4b3f      	ldr	r3, [pc, #252]	; (8016a58 <tcp_create_segment+0x128>)
 801695a:	22a4      	movs	r2, #164	; 0xa4
 801695c:	4941      	ldr	r1, [pc, #260]	; (8016a64 <tcp_create_segment+0x134>)
 801695e:	4840      	ldr	r0, [pc, #256]	; (8016a60 <tcp_create_segment+0x130>)
 8016960:	f005 f818 	bl	801b994 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016964:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016968:	009b      	lsls	r3, r3, #2
 801696a:	b2db      	uxtb	r3, r3
 801696c:	f003 0304 	and.w	r3, r3, #4
 8016970:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8016972:	2003      	movs	r0, #3
 8016974:	f7fa fd2c 	bl	80113d0 <memp_malloc>
 8016978:	6138      	str	r0, [r7, #16]
 801697a:	693b      	ldr	r3, [r7, #16]
 801697c:	2b00      	cmp	r3, #0
 801697e:	d104      	bne.n	801698a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8016980:	68b8      	ldr	r0, [r7, #8]
 8016982:	f7fb fc71 	bl	8012268 <pbuf_free>
    return NULL;
 8016986:	2300      	movs	r3, #0
 8016988:	e061      	b.n	8016a4e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801698a:	693b      	ldr	r3, [r7, #16]
 801698c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016990:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8016992:	693b      	ldr	r3, [r7, #16]
 8016994:	2200      	movs	r2, #0
 8016996:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8016998:	693b      	ldr	r3, [r7, #16]
 801699a:	68ba      	ldr	r2, [r7, #8]
 801699c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801699e:	68bb      	ldr	r3, [r7, #8]
 80169a0:	891a      	ldrh	r2, [r3, #8]
 80169a2:	7dfb      	ldrb	r3, [r7, #23]
 80169a4:	b29b      	uxth	r3, r3
 80169a6:	429a      	cmp	r2, r3
 80169a8:	d205      	bcs.n	80169b6 <tcp_create_segment+0x86>
 80169aa:	4b2b      	ldr	r3, [pc, #172]	; (8016a58 <tcp_create_segment+0x128>)
 80169ac:	22b0      	movs	r2, #176	; 0xb0
 80169ae:	492e      	ldr	r1, [pc, #184]	; (8016a68 <tcp_create_segment+0x138>)
 80169b0:	482b      	ldr	r0, [pc, #172]	; (8016a60 <tcp_create_segment+0x130>)
 80169b2:	f004 ffef 	bl	801b994 <iprintf>
  seg->len = p->tot_len - optlen;
 80169b6:	68bb      	ldr	r3, [r7, #8]
 80169b8:	891a      	ldrh	r2, [r3, #8]
 80169ba:	7dfb      	ldrb	r3, [r7, #23]
 80169bc:	b29b      	uxth	r3, r3
 80169be:	1ad3      	subs	r3, r2, r3
 80169c0:	b29a      	uxth	r2, r3
 80169c2:	693b      	ldr	r3, [r7, #16]
 80169c4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80169c6:	2114      	movs	r1, #20
 80169c8:	68b8      	ldr	r0, [r7, #8]
 80169ca:	f7fb fb85 	bl	80120d8 <pbuf_add_header>
 80169ce:	4603      	mov	r3, r0
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d004      	beq.n	80169de <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80169d4:	6938      	ldr	r0, [r7, #16]
 80169d6:	f7fd f800 	bl	80139da <tcp_seg_free>
    return NULL;
 80169da:	2300      	movs	r3, #0
 80169dc:	e037      	b.n	8016a4e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80169de:	693b      	ldr	r3, [r7, #16]
 80169e0:	685b      	ldr	r3, [r3, #4]
 80169e2:	685a      	ldr	r2, [r3, #4]
 80169e4:	693b      	ldr	r3, [r7, #16]
 80169e6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	8ada      	ldrh	r2, [r3, #22]
 80169ec:	693b      	ldr	r3, [r7, #16]
 80169ee:	68dc      	ldr	r4, [r3, #12]
 80169f0:	4610      	mov	r0, r2
 80169f2:	f7fa f815 	bl	8010a20 <lwip_htons>
 80169f6:	4603      	mov	r3, r0
 80169f8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	8b1a      	ldrh	r2, [r3, #24]
 80169fe:	693b      	ldr	r3, [r7, #16]
 8016a00:	68dc      	ldr	r4, [r3, #12]
 8016a02:	4610      	mov	r0, r2
 8016a04:	f7fa f80c 	bl	8010a20 <lwip_htons>
 8016a08:	4603      	mov	r3, r0
 8016a0a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8016a0c:	693b      	ldr	r3, [r7, #16]
 8016a0e:	68dc      	ldr	r4, [r3, #12]
 8016a10:	6838      	ldr	r0, [r7, #0]
 8016a12:	f7fa f81a 	bl	8010a4a <lwip_htonl>
 8016a16:	4603      	mov	r3, r0
 8016a18:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8016a1a:	7dfb      	ldrb	r3, [r7, #23]
 8016a1c:	089b      	lsrs	r3, r3, #2
 8016a1e:	b2db      	uxtb	r3, r3
 8016a20:	b29b      	uxth	r3, r3
 8016a22:	3305      	adds	r3, #5
 8016a24:	b29b      	uxth	r3, r3
 8016a26:	031b      	lsls	r3, r3, #12
 8016a28:	b29a      	uxth	r2, r3
 8016a2a:	79fb      	ldrb	r3, [r7, #7]
 8016a2c:	b29b      	uxth	r3, r3
 8016a2e:	4313      	orrs	r3, r2
 8016a30:	b29a      	uxth	r2, r3
 8016a32:	693b      	ldr	r3, [r7, #16]
 8016a34:	68dc      	ldr	r4, [r3, #12]
 8016a36:	4610      	mov	r0, r2
 8016a38:	f7f9 fff2 	bl	8010a20 <lwip_htons>
 8016a3c:	4603      	mov	r3, r0
 8016a3e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8016a40:	693b      	ldr	r3, [r7, #16]
 8016a42:	68db      	ldr	r3, [r3, #12]
 8016a44:	2200      	movs	r2, #0
 8016a46:	749a      	strb	r2, [r3, #18]
 8016a48:	2200      	movs	r2, #0
 8016a4a:	74da      	strb	r2, [r3, #19]
  return seg;
 8016a4c:	693b      	ldr	r3, [r7, #16]
}
 8016a4e:	4618      	mov	r0, r3
 8016a50:	371c      	adds	r7, #28
 8016a52:	46bd      	mov	sp, r7
 8016a54:	bd90      	pop	{r4, r7, pc}
 8016a56:	bf00      	nop
 8016a58:	0801f298 	.word	0x0801f298
 8016a5c:	0801f2cc 	.word	0x0801f2cc
 8016a60:	0801f2ec 	.word	0x0801f2ec
 8016a64:	0801f314 	.word	0x0801f314
 8016a68:	0801f338 	.word	0x0801f338

08016a6c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8016a6c:	b580      	push	{r7, lr}
 8016a6e:	b086      	sub	sp, #24
 8016a70:	af00      	add	r7, sp, #0
 8016a72:	607b      	str	r3, [r7, #4]
 8016a74:	4603      	mov	r3, r0
 8016a76:	73fb      	strb	r3, [r7, #15]
 8016a78:	460b      	mov	r3, r1
 8016a7a:	81bb      	strh	r3, [r7, #12]
 8016a7c:	4613      	mov	r3, r2
 8016a7e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8016a80:	89bb      	ldrh	r3, [r7, #12]
 8016a82:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d105      	bne.n	8016a96 <tcp_pbuf_prealloc+0x2a>
 8016a8a:	4b30      	ldr	r3, [pc, #192]	; (8016b4c <tcp_pbuf_prealloc+0xe0>)
 8016a8c:	22e8      	movs	r2, #232	; 0xe8
 8016a8e:	4930      	ldr	r1, [pc, #192]	; (8016b50 <tcp_pbuf_prealloc+0xe4>)
 8016a90:	4830      	ldr	r0, [pc, #192]	; (8016b54 <tcp_pbuf_prealloc+0xe8>)
 8016a92:	f004 ff7f 	bl	801b994 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8016a96:	6a3b      	ldr	r3, [r7, #32]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d105      	bne.n	8016aa8 <tcp_pbuf_prealloc+0x3c>
 8016a9c:	4b2b      	ldr	r3, [pc, #172]	; (8016b4c <tcp_pbuf_prealloc+0xe0>)
 8016a9e:	22e9      	movs	r2, #233	; 0xe9
 8016aa0:	492d      	ldr	r1, [pc, #180]	; (8016b58 <tcp_pbuf_prealloc+0xec>)
 8016aa2:	482c      	ldr	r0, [pc, #176]	; (8016b54 <tcp_pbuf_prealloc+0xe8>)
 8016aa4:	f004 ff76 	bl	801b994 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8016aa8:	89ba      	ldrh	r2, [r7, #12]
 8016aaa:	897b      	ldrh	r3, [r7, #10]
 8016aac:	429a      	cmp	r2, r3
 8016aae:	d221      	bcs.n	8016af4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8016ab0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016ab4:	f003 0302 	and.w	r3, r3, #2
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d111      	bne.n	8016ae0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8016abc:	6a3b      	ldr	r3, [r7, #32]
 8016abe:	8b5b      	ldrh	r3, [r3, #26]
 8016ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d115      	bne.n	8016af4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8016ac8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d007      	beq.n	8016ae0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8016ad0:	6a3b      	ldr	r3, [r7, #32]
 8016ad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d103      	bne.n	8016ae0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8016ad8:	6a3b      	ldr	r3, [r7, #32]
 8016ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d009      	beq.n	8016af4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8016ae0:	89bb      	ldrh	r3, [r7, #12]
 8016ae2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8016ae6:	f023 0203 	bic.w	r2, r3, #3
 8016aea:	897b      	ldrh	r3, [r7, #10]
 8016aec:	4293      	cmp	r3, r2
 8016aee:	bf28      	it	cs
 8016af0:	4613      	movcs	r3, r2
 8016af2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8016af4:	8af9      	ldrh	r1, [r7, #22]
 8016af6:	7bfb      	ldrb	r3, [r7, #15]
 8016af8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016afc:	4618      	mov	r0, r3
 8016afe:	f7fb f89d 	bl	8011c3c <pbuf_alloc>
 8016b02:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016b04:	693b      	ldr	r3, [r7, #16]
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d101      	bne.n	8016b0e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8016b0a:	2300      	movs	r3, #0
 8016b0c:	e019      	b.n	8016b42 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8016b0e:	693b      	ldr	r3, [r7, #16]
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d006      	beq.n	8016b24 <tcp_pbuf_prealloc+0xb8>
 8016b16:	4b0d      	ldr	r3, [pc, #52]	; (8016b4c <tcp_pbuf_prealloc+0xe0>)
 8016b18:	f240 120b 	movw	r2, #267	; 0x10b
 8016b1c:	490f      	ldr	r1, [pc, #60]	; (8016b5c <tcp_pbuf_prealloc+0xf0>)
 8016b1e:	480d      	ldr	r0, [pc, #52]	; (8016b54 <tcp_pbuf_prealloc+0xe8>)
 8016b20:	f004 ff38 	bl	801b994 <iprintf>
  *oversize = p->len - length;
 8016b24:	693b      	ldr	r3, [r7, #16]
 8016b26:	895a      	ldrh	r2, [r3, #10]
 8016b28:	89bb      	ldrh	r3, [r7, #12]
 8016b2a:	1ad3      	subs	r3, r2, r3
 8016b2c:	b29a      	uxth	r2, r3
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8016b32:	693b      	ldr	r3, [r7, #16]
 8016b34:	89ba      	ldrh	r2, [r7, #12]
 8016b36:	811a      	strh	r2, [r3, #8]
 8016b38:	693b      	ldr	r3, [r7, #16]
 8016b3a:	891a      	ldrh	r2, [r3, #8]
 8016b3c:	693b      	ldr	r3, [r7, #16]
 8016b3e:	815a      	strh	r2, [r3, #10]
  return p;
 8016b40:	693b      	ldr	r3, [r7, #16]
}
 8016b42:	4618      	mov	r0, r3
 8016b44:	3718      	adds	r7, #24
 8016b46:	46bd      	mov	sp, r7
 8016b48:	bd80      	pop	{r7, pc}
 8016b4a:	bf00      	nop
 8016b4c:	0801f298 	.word	0x0801f298
 8016b50:	0801f350 	.word	0x0801f350
 8016b54:	0801f2ec 	.word	0x0801f2ec
 8016b58:	0801f374 	.word	0x0801f374
 8016b5c:	0801f394 	.word	0x0801f394

08016b60 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8016b60:	b580      	push	{r7, lr}
 8016b62:	b082      	sub	sp, #8
 8016b64:	af00      	add	r7, sp, #0
 8016b66:	6078      	str	r0, [r7, #4]
 8016b68:	460b      	mov	r3, r1
 8016b6a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d106      	bne.n	8016b80 <tcp_write_checks+0x20>
 8016b72:	4b33      	ldr	r3, [pc, #204]	; (8016c40 <tcp_write_checks+0xe0>)
 8016b74:	f240 1233 	movw	r2, #307	; 0x133
 8016b78:	4932      	ldr	r1, [pc, #200]	; (8016c44 <tcp_write_checks+0xe4>)
 8016b7a:	4833      	ldr	r0, [pc, #204]	; (8016c48 <tcp_write_checks+0xe8>)
 8016b7c:	f004 ff0a 	bl	801b994 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	7d1b      	ldrb	r3, [r3, #20]
 8016b84:	2b04      	cmp	r3, #4
 8016b86:	d00e      	beq.n	8016ba6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8016b8c:	2b07      	cmp	r3, #7
 8016b8e:	d00a      	beq.n	8016ba6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8016b94:	2b02      	cmp	r3, #2
 8016b96:	d006      	beq.n	8016ba6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8016b9c:	2b03      	cmp	r3, #3
 8016b9e:	d002      	beq.n	8016ba6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8016ba0:	f06f 030a 	mvn.w	r3, #10
 8016ba4:	e048      	b.n	8016c38 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8016ba6:	887b      	ldrh	r3, [r7, #2]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d101      	bne.n	8016bb0 <tcp_write_checks+0x50>
    return ERR_OK;
 8016bac:	2300      	movs	r3, #0
 8016bae:	e043      	b.n	8016c38 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016bb6:	887a      	ldrh	r2, [r7, #2]
 8016bb8:	429a      	cmp	r2, r3
 8016bba:	d909      	bls.n	8016bd0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	8b5b      	ldrh	r3, [r3, #26]
 8016bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016bc4:	b29a      	uxth	r2, r3
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8016bca:	f04f 33ff 	mov.w	r3, #4294967295
 8016bce:	e033      	b.n	8016c38 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016bd6:	2b08      	cmp	r3, #8
 8016bd8:	d909      	bls.n	8016bee <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	8b5b      	ldrh	r3, [r3, #26]
 8016bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016be2:	b29a      	uxth	r2, r3
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8016be8:	f04f 33ff 	mov.w	r3, #4294967295
 8016bec:	e024      	b.n	8016c38 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d00f      	beq.n	8016c18 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d11a      	bne.n	8016c36 <tcp_write_checks+0xd6>
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d116      	bne.n	8016c36 <tcp_write_checks+0xd6>
 8016c08:	4b0d      	ldr	r3, [pc, #52]	; (8016c40 <tcp_write_checks+0xe0>)
 8016c0a:	f240 1255 	movw	r2, #341	; 0x155
 8016c0e:	490f      	ldr	r1, [pc, #60]	; (8016c4c <tcp_write_checks+0xec>)
 8016c10:	480d      	ldr	r0, [pc, #52]	; (8016c48 <tcp_write_checks+0xe8>)
 8016c12:	f004 febf 	bl	801b994 <iprintf>
 8016c16:	e00e      	b.n	8016c36 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d103      	bne.n	8016c28 <tcp_write_checks+0xc8>
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d006      	beq.n	8016c36 <tcp_write_checks+0xd6>
 8016c28:	4b05      	ldr	r3, [pc, #20]	; (8016c40 <tcp_write_checks+0xe0>)
 8016c2a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8016c2e:	4908      	ldr	r1, [pc, #32]	; (8016c50 <tcp_write_checks+0xf0>)
 8016c30:	4805      	ldr	r0, [pc, #20]	; (8016c48 <tcp_write_checks+0xe8>)
 8016c32:	f004 feaf 	bl	801b994 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8016c36:	2300      	movs	r3, #0
}
 8016c38:	4618      	mov	r0, r3
 8016c3a:	3708      	adds	r7, #8
 8016c3c:	46bd      	mov	sp, r7
 8016c3e:	bd80      	pop	{r7, pc}
 8016c40:	0801f298 	.word	0x0801f298
 8016c44:	0801f3a8 	.word	0x0801f3a8
 8016c48:	0801f2ec 	.word	0x0801f2ec
 8016c4c:	0801f3c8 	.word	0x0801f3c8
 8016c50:	0801f404 	.word	0x0801f404

08016c54 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8016c54:	b590      	push	{r4, r7, lr}
 8016c56:	b09b      	sub	sp, #108	; 0x6c
 8016c58:	af04      	add	r7, sp, #16
 8016c5a:	60f8      	str	r0, [r7, #12]
 8016c5c:	60b9      	str	r1, [r7, #8]
 8016c5e:	4611      	mov	r1, r2
 8016c60:	461a      	mov	r2, r3
 8016c62:	460b      	mov	r3, r1
 8016c64:	80fb      	strh	r3, [r7, #6]
 8016c66:	4613      	mov	r3, r2
 8016c68:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8016c6e:	2300      	movs	r3, #0
 8016c70:	653b      	str	r3, [r7, #80]	; 0x50
 8016c72:	2300      	movs	r3, #0
 8016c74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016c76:	2300      	movs	r3, #0
 8016c78:	64bb      	str	r3, [r7, #72]	; 0x48
 8016c7a:	2300      	movs	r3, #0
 8016c7c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8016c7e:	2300      	movs	r3, #0
 8016c80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8016c84:	2300      	movs	r3, #0
 8016c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8016c8a:	2300      	movs	r3, #0
 8016c8c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8016c8e:	2300      	movs	r3, #0
 8016c90:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8016c92:	2300      	movs	r3, #0
 8016c94:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d109      	bne.n	8016cb0 <tcp_write+0x5c>
 8016c9c:	4ba4      	ldr	r3, [pc, #656]	; (8016f30 <tcp_write+0x2dc>)
 8016c9e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8016ca2:	49a4      	ldr	r1, [pc, #656]	; (8016f34 <tcp_write+0x2e0>)
 8016ca4:	48a4      	ldr	r0, [pc, #656]	; (8016f38 <tcp_write+0x2e4>)
 8016ca6:	f004 fe75 	bl	801b994 <iprintf>
 8016caa:	f06f 030f 	mvn.w	r3, #15
 8016cae:	e32a      	b.n	8017306 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8016cb0:	68fb      	ldr	r3, [r7, #12]
 8016cb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8016cb6:	085b      	lsrs	r3, r3, #1
 8016cb8:	b29a      	uxth	r2, r3
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016cbe:	4293      	cmp	r3, r2
 8016cc0:	bf28      	it	cs
 8016cc2:	4613      	movcs	r3, r2
 8016cc4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8016cc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d102      	bne.n	8016cd2 <tcp_write+0x7e>
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016cd0:	e000      	b.n	8016cd4 <tcp_write+0x80>
 8016cd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016cd4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8016cd6:	68bb      	ldr	r3, [r7, #8]
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d109      	bne.n	8016cf0 <tcp_write+0x9c>
 8016cdc:	4b94      	ldr	r3, [pc, #592]	; (8016f30 <tcp_write+0x2dc>)
 8016cde:	f240 12ad 	movw	r2, #429	; 0x1ad
 8016ce2:	4996      	ldr	r1, [pc, #600]	; (8016f3c <tcp_write+0x2e8>)
 8016ce4:	4894      	ldr	r0, [pc, #592]	; (8016f38 <tcp_write+0x2e4>)
 8016ce6:	f004 fe55 	bl	801b994 <iprintf>
 8016cea:	f06f 030f 	mvn.w	r3, #15
 8016cee:	e30a      	b.n	8017306 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8016cf0:	88fb      	ldrh	r3, [r7, #6]
 8016cf2:	4619      	mov	r1, r3
 8016cf4:	68f8      	ldr	r0, [r7, #12]
 8016cf6:	f7ff ff33 	bl	8016b60 <tcp_write_checks>
 8016cfa:	4603      	mov	r3, r0
 8016cfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8016d00:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d002      	beq.n	8016d0e <tcp_write+0xba>
    return err;
 8016d08:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8016d0c:	e2fb      	b.n	8017306 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8016d0e:	68fb      	ldr	r3, [r7, #12]
 8016d10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016d14:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016d18:	2300      	movs	r3, #0
 8016d1a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	f000 80f6 	beq.w	8016f14 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d2c:	653b      	str	r3, [r7, #80]	; 0x50
 8016d2e:	e002      	b.n	8016d36 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8016d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d1f8      	bne.n	8016d30 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8016d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016d40:	7a9b      	ldrb	r3, [r3, #10]
 8016d42:	009b      	lsls	r3, r3, #2
 8016d44:	b29b      	uxth	r3, r3
 8016d46:	f003 0304 	and.w	r3, r3, #4
 8016d4a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8016d4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016d50:	891b      	ldrh	r3, [r3, #8]
 8016d52:	4619      	mov	r1, r3
 8016d54:	8c3b      	ldrh	r3, [r7, #32]
 8016d56:	440b      	add	r3, r1
 8016d58:	429a      	cmp	r2, r3
 8016d5a:	da06      	bge.n	8016d6a <tcp_write+0x116>
 8016d5c:	4b74      	ldr	r3, [pc, #464]	; (8016f30 <tcp_write+0x2dc>)
 8016d5e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8016d62:	4977      	ldr	r1, [pc, #476]	; (8016f40 <tcp_write+0x2ec>)
 8016d64:	4874      	ldr	r0, [pc, #464]	; (8016f38 <tcp_write+0x2e4>)
 8016d66:	f004 fe15 	bl	801b994 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8016d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016d6c:	891a      	ldrh	r2, [r3, #8]
 8016d6e:	8c3b      	ldrh	r3, [r7, #32]
 8016d70:	4413      	add	r3, r2
 8016d72:	b29b      	uxth	r3, r3
 8016d74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016d76:	1ad3      	subs	r3, r2, r3
 8016d78:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016d80:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8016d82:	8a7b      	ldrh	r3, [r7, #18]
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d026      	beq.n	8016dd6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8016d88:	8a7b      	ldrh	r3, [r7, #18]
 8016d8a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016d8c:	429a      	cmp	r2, r3
 8016d8e:	d206      	bcs.n	8016d9e <tcp_write+0x14a>
 8016d90:	4b67      	ldr	r3, [pc, #412]	; (8016f30 <tcp_write+0x2dc>)
 8016d92:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8016d96:	496b      	ldr	r1, [pc, #428]	; (8016f44 <tcp_write+0x2f0>)
 8016d98:	4867      	ldr	r0, [pc, #412]	; (8016f38 <tcp_write+0x2e4>)
 8016d9a:	f004 fdfb 	bl	801b994 <iprintf>
      seg = last_unsent;
 8016d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016da0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8016da2:	8a7b      	ldrh	r3, [r7, #18]
 8016da4:	88fa      	ldrh	r2, [r7, #6]
 8016da6:	4293      	cmp	r3, r2
 8016da8:	bf28      	it	cs
 8016daa:	4613      	movcs	r3, r2
 8016dac:	b29b      	uxth	r3, r3
 8016dae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016db0:	4293      	cmp	r3, r2
 8016db2:	bf28      	it	cs
 8016db4:	4613      	movcs	r3, r2
 8016db6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8016db8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016dbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016dbe:	4413      	add	r3, r2
 8016dc0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8016dc4:	8a7a      	ldrh	r2, [r7, #18]
 8016dc6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016dc8:	1ad3      	subs	r3, r2, r3
 8016dca:	b29b      	uxth	r3, r3
 8016dcc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8016dce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016dd0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016dd2:	1ad3      	subs	r3, r2, r3
 8016dd4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8016dd6:	8a7b      	ldrh	r3, [r7, #18]
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d00b      	beq.n	8016df4 <tcp_write+0x1a0>
 8016ddc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016de0:	88fb      	ldrh	r3, [r7, #6]
 8016de2:	429a      	cmp	r2, r3
 8016de4:	d006      	beq.n	8016df4 <tcp_write+0x1a0>
 8016de6:	4b52      	ldr	r3, [pc, #328]	; (8016f30 <tcp_write+0x2dc>)
 8016de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016dec:	4956      	ldr	r1, [pc, #344]	; (8016f48 <tcp_write+0x2f4>)
 8016dee:	4852      	ldr	r0, [pc, #328]	; (8016f38 <tcp_write+0x2e4>)
 8016df0:	f004 fdd0 	bl	801b994 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8016df4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016df8:	88fb      	ldrh	r3, [r7, #6]
 8016dfa:	429a      	cmp	r2, r3
 8016dfc:	f080 8167 	bcs.w	80170ce <tcp_write+0x47a>
 8016e00:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	f000 8163 	beq.w	80170ce <tcp_write+0x47a>
 8016e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e0a:	891b      	ldrh	r3, [r3, #8]
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	f000 815e 	beq.w	80170ce <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8016e12:	88fa      	ldrh	r2, [r7, #6]
 8016e14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016e18:	1ad2      	subs	r2, r2, r3
 8016e1a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016e1c:	4293      	cmp	r3, r2
 8016e1e:	bfa8      	it	ge
 8016e20:	4613      	movge	r3, r2
 8016e22:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8016e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e26:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016e28:	797b      	ldrb	r3, [r7, #5]
 8016e2a:	f003 0301 	and.w	r3, r3, #1
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d027      	beq.n	8016e82 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8016e32:	f107 0012 	add.w	r0, r7, #18
 8016e36:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016e38:	8bf9      	ldrh	r1, [r7, #30]
 8016e3a:	2301      	movs	r3, #1
 8016e3c:	9302      	str	r3, [sp, #8]
 8016e3e:	797b      	ldrb	r3, [r7, #5]
 8016e40:	9301      	str	r3, [sp, #4]
 8016e42:	68fb      	ldr	r3, [r7, #12]
 8016e44:	9300      	str	r3, [sp, #0]
 8016e46:	4603      	mov	r3, r0
 8016e48:	2000      	movs	r0, #0
 8016e4a:	f7ff fe0f 	bl	8016a6c <tcp_pbuf_prealloc>
 8016e4e:	6578      	str	r0, [r7, #84]	; 0x54
 8016e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	f000 8225 	beq.w	80172a2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8016e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016e5a:	6858      	ldr	r0, [r3, #4]
 8016e5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016e60:	68ba      	ldr	r2, [r7, #8]
 8016e62:	4413      	add	r3, r2
 8016e64:	8bfa      	ldrh	r2, [r7, #30]
 8016e66:	4619      	mov	r1, r3
 8016e68:	f004 fd7e 	bl	801b968 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8016e6c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016e6e:	f7fb fa89 	bl	8012384 <pbuf_clen>
 8016e72:	4603      	mov	r3, r0
 8016e74:	461a      	mov	r2, r3
 8016e76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016e7a:	4413      	add	r3, r2
 8016e7c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8016e80:	e041      	b.n	8016f06 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8016e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e84:	685b      	ldr	r3, [r3, #4]
 8016e86:	637b      	str	r3, [r7, #52]	; 0x34
 8016e88:	e002      	b.n	8016e90 <tcp_write+0x23c>
 8016e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8016e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e92:	681b      	ldr	r3, [r3, #0]
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d1f8      	bne.n	8016e8a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e9a:	7b1b      	ldrb	r3, [r3, #12]
 8016e9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d115      	bne.n	8016ed0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8016ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ea6:	685b      	ldr	r3, [r3, #4]
 8016ea8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016eaa:	8952      	ldrh	r2, [r2, #10]
 8016eac:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016eae:	68ba      	ldr	r2, [r7, #8]
 8016eb0:	429a      	cmp	r2, r3
 8016eb2:	d10d      	bne.n	8016ed0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8016eb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	d006      	beq.n	8016eca <tcp_write+0x276>
 8016ebc:	4b1c      	ldr	r3, [pc, #112]	; (8016f30 <tcp_write+0x2dc>)
 8016ebe:	f240 2231 	movw	r2, #561	; 0x231
 8016ec2:	4922      	ldr	r1, [pc, #136]	; (8016f4c <tcp_write+0x2f8>)
 8016ec4:	481c      	ldr	r0, [pc, #112]	; (8016f38 <tcp_write+0x2e4>)
 8016ec6:	f004 fd65 	bl	801b994 <iprintf>
          extendlen = seglen;
 8016eca:	8bfb      	ldrh	r3, [r7, #30]
 8016ecc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8016ece:	e01a      	b.n	8016f06 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8016ed0:	8bfb      	ldrh	r3, [r7, #30]
 8016ed2:	2201      	movs	r2, #1
 8016ed4:	4619      	mov	r1, r3
 8016ed6:	2000      	movs	r0, #0
 8016ed8:	f7fa feb0 	bl	8011c3c <pbuf_alloc>
 8016edc:	6578      	str	r0, [r7, #84]	; 0x54
 8016ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	f000 81e0 	beq.w	80172a6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8016ee6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016eea:	68ba      	ldr	r2, [r7, #8]
 8016eec:	441a      	add	r2, r3
 8016eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016ef0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8016ef2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016ef4:	f7fb fa46 	bl	8012384 <pbuf_clen>
 8016ef8:	4603      	mov	r3, r0
 8016efa:	461a      	mov	r2, r3
 8016efc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016f00:	4413      	add	r3, r2
 8016f02:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8016f06:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016f0a:	8bfb      	ldrh	r3, [r7, #30]
 8016f0c:	4413      	add	r3, r2
 8016f0e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8016f12:	e0dc      	b.n	80170ce <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	f000 80d7 	beq.w	80170ce <tcp_write+0x47a>
 8016f20:	4b03      	ldr	r3, [pc, #12]	; (8016f30 <tcp_write+0x2dc>)
 8016f22:	f240 224a 	movw	r2, #586	; 0x24a
 8016f26:	490a      	ldr	r1, [pc, #40]	; (8016f50 <tcp_write+0x2fc>)
 8016f28:	4803      	ldr	r0, [pc, #12]	; (8016f38 <tcp_write+0x2e4>)
 8016f2a:	f004 fd33 	bl	801b994 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8016f2e:	e0ce      	b.n	80170ce <tcp_write+0x47a>
 8016f30:	0801f298 	.word	0x0801f298
 8016f34:	0801f438 	.word	0x0801f438
 8016f38:	0801f2ec 	.word	0x0801f2ec
 8016f3c:	0801f450 	.word	0x0801f450
 8016f40:	0801f484 	.word	0x0801f484
 8016f44:	0801f49c 	.word	0x0801f49c
 8016f48:	0801f4bc 	.word	0x0801f4bc
 8016f4c:	0801f4dc 	.word	0x0801f4dc
 8016f50:	0801f508 	.word	0x0801f508
    struct pbuf *p;
    u16_t left = len - pos;
 8016f54:	88fa      	ldrh	r2, [r7, #6]
 8016f56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016f5a:	1ad3      	subs	r3, r2, r3
 8016f5c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8016f5e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016f62:	b29b      	uxth	r3, r3
 8016f64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016f66:	1ad3      	subs	r3, r2, r3
 8016f68:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8016f6a:	8b7a      	ldrh	r2, [r7, #26]
 8016f6c:	8bbb      	ldrh	r3, [r7, #28]
 8016f6e:	4293      	cmp	r3, r2
 8016f70:	bf28      	it	cs
 8016f72:	4613      	movcs	r3, r2
 8016f74:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016f76:	797b      	ldrb	r3, [r7, #5]
 8016f78:	f003 0301 	and.w	r3, r3, #1
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d036      	beq.n	8016fee <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8016f80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016f84:	b29a      	uxth	r2, r3
 8016f86:	8b3b      	ldrh	r3, [r7, #24]
 8016f88:	4413      	add	r3, r2
 8016f8a:	b299      	uxth	r1, r3
 8016f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	bf0c      	ite	eq
 8016f92:	2301      	moveq	r3, #1
 8016f94:	2300      	movne	r3, #0
 8016f96:	b2db      	uxtb	r3, r3
 8016f98:	f107 0012 	add.w	r0, r7, #18
 8016f9c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016f9e:	9302      	str	r3, [sp, #8]
 8016fa0:	797b      	ldrb	r3, [r7, #5]
 8016fa2:	9301      	str	r3, [sp, #4]
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	9300      	str	r3, [sp, #0]
 8016fa8:	4603      	mov	r3, r0
 8016faa:	2036      	movs	r0, #54	; 0x36
 8016fac:	f7ff fd5e 	bl	8016a6c <tcp_pbuf_prealloc>
 8016fb0:	6338      	str	r0, [r7, #48]	; 0x30
 8016fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	f000 8178 	beq.w	80172aa <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8016fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fbc:	895b      	ldrh	r3, [r3, #10]
 8016fbe:	8b3a      	ldrh	r2, [r7, #24]
 8016fc0:	429a      	cmp	r2, r3
 8016fc2:	d906      	bls.n	8016fd2 <tcp_write+0x37e>
 8016fc4:	4b8c      	ldr	r3, [pc, #560]	; (80171f8 <tcp_write+0x5a4>)
 8016fc6:	f240 2266 	movw	r2, #614	; 0x266
 8016fca:	498c      	ldr	r1, [pc, #560]	; (80171fc <tcp_write+0x5a8>)
 8016fcc:	488c      	ldr	r0, [pc, #560]	; (8017200 <tcp_write+0x5ac>)
 8016fce:	f004 fce1 	bl	801b994 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8016fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fd4:	685a      	ldr	r2, [r3, #4]
 8016fd6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016fda:	18d0      	adds	r0, r2, r3
 8016fdc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016fe0:	68ba      	ldr	r2, [r7, #8]
 8016fe2:	4413      	add	r3, r2
 8016fe4:	8b3a      	ldrh	r2, [r7, #24]
 8016fe6:	4619      	mov	r1, r3
 8016fe8:	f004 fcbe 	bl	801b968 <memcpy>
 8016fec:	e02f      	b.n	801704e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8016fee:	8a7b      	ldrh	r3, [r7, #18]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d006      	beq.n	8017002 <tcp_write+0x3ae>
 8016ff4:	4b80      	ldr	r3, [pc, #512]	; (80171f8 <tcp_write+0x5a4>)
 8016ff6:	f240 2271 	movw	r2, #625	; 0x271
 8016ffa:	4982      	ldr	r1, [pc, #520]	; (8017204 <tcp_write+0x5b0>)
 8016ffc:	4880      	ldr	r0, [pc, #512]	; (8017200 <tcp_write+0x5ac>)
 8016ffe:	f004 fcc9 	bl	801b994 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8017002:	8b3b      	ldrh	r3, [r7, #24]
 8017004:	2201      	movs	r2, #1
 8017006:	4619      	mov	r1, r3
 8017008:	2036      	movs	r0, #54	; 0x36
 801700a:	f7fa fe17 	bl	8011c3c <pbuf_alloc>
 801700e:	6178      	str	r0, [r7, #20]
 8017010:	697b      	ldr	r3, [r7, #20]
 8017012:	2b00      	cmp	r3, #0
 8017014:	f000 814b 	beq.w	80172ae <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8017018:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801701c:	68ba      	ldr	r2, [r7, #8]
 801701e:	441a      	add	r2, r3
 8017020:	697b      	ldr	r3, [r7, #20]
 8017022:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017024:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017028:	b29b      	uxth	r3, r3
 801702a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801702e:	4619      	mov	r1, r3
 8017030:	2036      	movs	r0, #54	; 0x36
 8017032:	f7fa fe03 	bl	8011c3c <pbuf_alloc>
 8017036:	6338      	str	r0, [r7, #48]	; 0x30
 8017038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801703a:	2b00      	cmp	r3, #0
 801703c:	d103      	bne.n	8017046 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801703e:	6978      	ldr	r0, [r7, #20]
 8017040:	f7fb f912 	bl	8012268 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8017044:	e136      	b.n	80172b4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8017046:	6979      	ldr	r1, [r7, #20]
 8017048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801704a:	f7fb f9db 	bl	8012404 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801704e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017050:	f7fb f998 	bl	8012384 <pbuf_clen>
 8017054:	4603      	mov	r3, r0
 8017056:	461a      	mov	r2, r3
 8017058:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801705c:	4413      	add	r3, r2
 801705e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8017062:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017066:	2b09      	cmp	r3, #9
 8017068:	d903      	bls.n	8017072 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801706a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801706c:	f7fb f8fc 	bl	8012268 <pbuf_free>
      goto memerr;
 8017070:	e120      	b.n	80172b4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8017072:	68fb      	ldr	r3, [r7, #12]
 8017074:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8017076:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801707a:	441a      	add	r2, r3
 801707c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017080:	9300      	str	r3, [sp, #0]
 8017082:	4613      	mov	r3, r2
 8017084:	2200      	movs	r2, #0
 8017086:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017088:	68f8      	ldr	r0, [r7, #12]
 801708a:	f7ff fc51 	bl	8016930 <tcp_create_segment>
 801708e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8017090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017092:	2b00      	cmp	r3, #0
 8017094:	f000 810d 	beq.w	80172b2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8017098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801709a:	2b00      	cmp	r3, #0
 801709c:	d102      	bne.n	80170a4 <tcp_write+0x450>
      queue = seg;
 801709e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80170a0:	647b      	str	r3, [r7, #68]	; 0x44
 80170a2:	e00c      	b.n	80170be <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80170a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d106      	bne.n	80170b8 <tcp_write+0x464>
 80170aa:	4b53      	ldr	r3, [pc, #332]	; (80171f8 <tcp_write+0x5a4>)
 80170ac:	f240 22ab 	movw	r2, #683	; 0x2ab
 80170b0:	4955      	ldr	r1, [pc, #340]	; (8017208 <tcp_write+0x5b4>)
 80170b2:	4853      	ldr	r0, [pc, #332]	; (8017200 <tcp_write+0x5ac>)
 80170b4:	f004 fc6e 	bl	801b994 <iprintf>
      prev_seg->next = seg;
 80170b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80170ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80170bc:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80170be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80170c0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80170c2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80170c6:	8b3b      	ldrh	r3, [r7, #24]
 80170c8:	4413      	add	r3, r2
 80170ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80170ce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80170d2:	88fb      	ldrh	r3, [r7, #6]
 80170d4:	429a      	cmp	r2, r3
 80170d6:	f4ff af3d 	bcc.w	8016f54 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80170da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d02c      	beq.n	801713a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80170e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80170e2:	685b      	ldr	r3, [r3, #4]
 80170e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80170e6:	e01e      	b.n	8017126 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80170e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170ea:	891a      	ldrh	r2, [r3, #8]
 80170ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80170ee:	4413      	add	r3, r2
 80170f0:	b29a      	uxth	r2, r3
 80170f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170f4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80170f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170f8:	681b      	ldr	r3, [r3, #0]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d110      	bne.n	8017120 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80170fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017100:	685b      	ldr	r3, [r3, #4]
 8017102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017104:	8952      	ldrh	r2, [r2, #10]
 8017106:	4413      	add	r3, r2
 8017108:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801710a:	68b9      	ldr	r1, [r7, #8]
 801710c:	4618      	mov	r0, r3
 801710e:	f004 fc2b 	bl	801b968 <memcpy>
        p->len += oversize_used;
 8017112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017114:	895a      	ldrh	r2, [r3, #10]
 8017116:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017118:	4413      	add	r3, r2
 801711a:	b29a      	uxth	r2, r3
 801711c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801711e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8017120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017122:	681b      	ldr	r3, [r3, #0]
 8017124:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017128:	2b00      	cmp	r3, #0
 801712a:	d1dd      	bne.n	80170e8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801712c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801712e:	891a      	ldrh	r2, [r3, #8]
 8017130:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017132:	4413      	add	r3, r2
 8017134:	b29a      	uxth	r2, r3
 8017136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017138:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801713a:	8a7a      	ldrh	r2, [r7, #18]
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8017142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017144:	2b00      	cmp	r3, #0
 8017146:	d018      	beq.n	801717a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8017148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801714a:	2b00      	cmp	r3, #0
 801714c:	d106      	bne.n	801715c <tcp_write+0x508>
 801714e:	4b2a      	ldr	r3, [pc, #168]	; (80171f8 <tcp_write+0x5a4>)
 8017150:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8017154:	492d      	ldr	r1, [pc, #180]	; (801720c <tcp_write+0x5b8>)
 8017156:	482a      	ldr	r0, [pc, #168]	; (8017200 <tcp_write+0x5ac>)
 8017158:	f004 fc1c 	bl	801b994 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801715c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801715e:	685b      	ldr	r3, [r3, #4]
 8017160:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017162:	4618      	mov	r0, r3
 8017164:	f7fb f94e 	bl	8012404 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8017168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801716a:	891a      	ldrh	r2, [r3, #8]
 801716c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801716e:	891b      	ldrh	r3, [r3, #8]
 8017170:	4413      	add	r3, r2
 8017172:	b29a      	uxth	r2, r3
 8017174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017176:	811a      	strh	r2, [r3, #8]
 8017178:	e037      	b.n	80171ea <tcp_write+0x596>
  } else if (extendlen > 0) {
 801717a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801717c:	2b00      	cmp	r3, #0
 801717e:	d034      	beq.n	80171ea <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8017180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017182:	2b00      	cmp	r3, #0
 8017184:	d003      	beq.n	801718e <tcp_write+0x53a>
 8017186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017188:	685b      	ldr	r3, [r3, #4]
 801718a:	2b00      	cmp	r3, #0
 801718c:	d106      	bne.n	801719c <tcp_write+0x548>
 801718e:	4b1a      	ldr	r3, [pc, #104]	; (80171f8 <tcp_write+0x5a4>)
 8017190:	f240 22e6 	movw	r2, #742	; 0x2e6
 8017194:	491e      	ldr	r1, [pc, #120]	; (8017210 <tcp_write+0x5bc>)
 8017196:	481a      	ldr	r0, [pc, #104]	; (8017200 <tcp_write+0x5ac>)
 8017198:	f004 fbfc 	bl	801b994 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801719c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801719e:	685b      	ldr	r3, [r3, #4]
 80171a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80171a2:	e009      	b.n	80171b8 <tcp_write+0x564>
      p->tot_len += extendlen;
 80171a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171a6:	891a      	ldrh	r2, [r3, #8]
 80171a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80171aa:	4413      	add	r3, r2
 80171ac:	b29a      	uxth	r2, r3
 80171ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171b0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80171b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80171b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171ba:	681b      	ldr	r3, [r3, #0]
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d1f1      	bne.n	80171a4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80171c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171c2:	891a      	ldrh	r2, [r3, #8]
 80171c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80171c6:	4413      	add	r3, r2
 80171c8:	b29a      	uxth	r2, r3
 80171ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171cc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80171ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171d0:	895a      	ldrh	r2, [r3, #10]
 80171d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80171d4:	4413      	add	r3, r2
 80171d6:	b29a      	uxth	r2, r3
 80171d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171da:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80171dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80171de:	891a      	ldrh	r2, [r3, #8]
 80171e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80171e2:	4413      	add	r3, r2
 80171e4:	b29a      	uxth	r2, r3
 80171e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80171e8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80171ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d111      	bne.n	8017214 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80171f4:	66da      	str	r2, [r3, #108]	; 0x6c
 80171f6:	e010      	b.n	801721a <tcp_write+0x5c6>
 80171f8:	0801f298 	.word	0x0801f298
 80171fc:	0801f538 	.word	0x0801f538
 8017200:	0801f2ec 	.word	0x0801f2ec
 8017204:	0801f578 	.word	0x0801f578
 8017208:	0801f588 	.word	0x0801f588
 801720c:	0801f59c 	.word	0x0801f59c
 8017210:	0801f5d4 	.word	0x0801f5d4
  } else {
    last_unsent->next = queue;
 8017214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017216:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017218:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801721e:	88fb      	ldrh	r3, [r7, #6]
 8017220:	441a      	add	r2, r3
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8017226:	68fb      	ldr	r3, [r7, #12]
 8017228:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801722c:	88fb      	ldrh	r3, [r7, #6]
 801722e:	1ad3      	subs	r3, r2, r3
 8017230:	b29a      	uxth	r2, r3
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801723e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017242:	68fb      	ldr	r3, [r7, #12]
 8017244:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017248:	2b00      	cmp	r3, #0
 801724a:	d00e      	beq.n	801726a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801724c:	68fb      	ldr	r3, [r7, #12]
 801724e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017250:	2b00      	cmp	r3, #0
 8017252:	d10a      	bne.n	801726a <tcp_write+0x616>
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017258:	2b00      	cmp	r3, #0
 801725a:	d106      	bne.n	801726a <tcp_write+0x616>
 801725c:	4b2c      	ldr	r3, [pc, #176]	; (8017310 <tcp_write+0x6bc>)
 801725e:	f240 3212 	movw	r2, #786	; 0x312
 8017262:	492c      	ldr	r1, [pc, #176]	; (8017314 <tcp_write+0x6c0>)
 8017264:	482c      	ldr	r0, [pc, #176]	; (8017318 <tcp_write+0x6c4>)
 8017266:	f004 fb95 	bl	801b994 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801726a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801726c:	2b00      	cmp	r3, #0
 801726e:	d016      	beq.n	801729e <tcp_write+0x64a>
 8017270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017272:	68db      	ldr	r3, [r3, #12]
 8017274:	2b00      	cmp	r3, #0
 8017276:	d012      	beq.n	801729e <tcp_write+0x64a>
 8017278:	797b      	ldrb	r3, [r7, #5]
 801727a:	f003 0302 	and.w	r3, r3, #2
 801727e:	2b00      	cmp	r3, #0
 8017280:	d10d      	bne.n	801729e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8017282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017284:	68db      	ldr	r3, [r3, #12]
 8017286:	899b      	ldrh	r3, [r3, #12]
 8017288:	b29c      	uxth	r4, r3
 801728a:	2008      	movs	r0, #8
 801728c:	f7f9 fbc8 	bl	8010a20 <lwip_htons>
 8017290:	4603      	mov	r3, r0
 8017292:	461a      	mov	r2, r3
 8017294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017296:	68db      	ldr	r3, [r3, #12]
 8017298:	4322      	orrs	r2, r4
 801729a:	b292      	uxth	r2, r2
 801729c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801729e:	2300      	movs	r3, #0
 80172a0:	e031      	b.n	8017306 <tcp_write+0x6b2>
          goto memerr;
 80172a2:	bf00      	nop
 80172a4:	e006      	b.n	80172b4 <tcp_write+0x660>
            goto memerr;
 80172a6:	bf00      	nop
 80172a8:	e004      	b.n	80172b4 <tcp_write+0x660>
        goto memerr;
 80172aa:	bf00      	nop
 80172ac:	e002      	b.n	80172b4 <tcp_write+0x660>
        goto memerr;
 80172ae:	bf00      	nop
 80172b0:	e000      	b.n	80172b4 <tcp_write+0x660>
      goto memerr;
 80172b2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80172b4:	68fb      	ldr	r3, [r7, #12]
 80172b6:	8b5b      	ldrh	r3, [r3, #26]
 80172b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80172bc:	b29a      	uxth	r2, r3
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80172c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d002      	beq.n	80172ce <tcp_write+0x67a>
    pbuf_free(concat_p);
 80172c8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80172ca:	f7fa ffcd 	bl	8012268 <pbuf_free>
  }
  if (queue != NULL) {
 80172ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d002      	beq.n	80172da <tcp_write+0x686>
    tcp_segs_free(queue);
 80172d4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80172d6:	f7fc fb6b 	bl	80139b0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80172da:	68fb      	ldr	r3, [r7, #12]
 80172dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d00e      	beq.n	8017302 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d10a      	bne.n	8017302 <tcp_write+0x6ae>
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d106      	bne.n	8017302 <tcp_write+0x6ae>
 80172f4:	4b06      	ldr	r3, [pc, #24]	; (8017310 <tcp_write+0x6bc>)
 80172f6:	f240 3227 	movw	r2, #807	; 0x327
 80172fa:	4906      	ldr	r1, [pc, #24]	; (8017314 <tcp_write+0x6c0>)
 80172fc:	4806      	ldr	r0, [pc, #24]	; (8017318 <tcp_write+0x6c4>)
 80172fe:	f004 fb49 	bl	801b994 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8017302:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017306:	4618      	mov	r0, r3
 8017308:	375c      	adds	r7, #92	; 0x5c
 801730a:	46bd      	mov	sp, r7
 801730c:	bd90      	pop	{r4, r7, pc}
 801730e:	bf00      	nop
 8017310:	0801f298 	.word	0x0801f298
 8017314:	0801f60c 	.word	0x0801f60c
 8017318:	0801f2ec 	.word	0x0801f2ec

0801731c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801731c:	b590      	push	{r4, r7, lr}
 801731e:	b08b      	sub	sp, #44	; 0x2c
 8017320:	af02      	add	r7, sp, #8
 8017322:	6078      	str	r0, [r7, #4]
 8017324:	460b      	mov	r3, r1
 8017326:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8017328:	2300      	movs	r3, #0
 801732a:	61fb      	str	r3, [r7, #28]
 801732c:	2300      	movs	r3, #0
 801732e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8017330:	2300      	movs	r3, #0
 8017332:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	2b00      	cmp	r3, #0
 8017338:	d106      	bne.n	8017348 <tcp_split_unsent_seg+0x2c>
 801733a:	4b95      	ldr	r3, [pc, #596]	; (8017590 <tcp_split_unsent_seg+0x274>)
 801733c:	f240 324b 	movw	r2, #843	; 0x34b
 8017340:	4994      	ldr	r1, [pc, #592]	; (8017594 <tcp_split_unsent_seg+0x278>)
 8017342:	4895      	ldr	r0, [pc, #596]	; (8017598 <tcp_split_unsent_seg+0x27c>)
 8017344:	f004 fb26 	bl	801b994 <iprintf>

  useg = pcb->unsent;
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801734c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801734e:	697b      	ldr	r3, [r7, #20]
 8017350:	2b00      	cmp	r3, #0
 8017352:	d102      	bne.n	801735a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8017354:	f04f 33ff 	mov.w	r3, #4294967295
 8017358:	e116      	b.n	8017588 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801735a:	887b      	ldrh	r3, [r7, #2]
 801735c:	2b00      	cmp	r3, #0
 801735e:	d109      	bne.n	8017374 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8017360:	4b8b      	ldr	r3, [pc, #556]	; (8017590 <tcp_split_unsent_seg+0x274>)
 8017362:	f240 3253 	movw	r2, #851	; 0x353
 8017366:	498d      	ldr	r1, [pc, #564]	; (801759c <tcp_split_unsent_seg+0x280>)
 8017368:	488b      	ldr	r0, [pc, #556]	; (8017598 <tcp_split_unsent_seg+0x27c>)
 801736a:	f004 fb13 	bl	801b994 <iprintf>
    return ERR_VAL;
 801736e:	f06f 0305 	mvn.w	r3, #5
 8017372:	e109      	b.n	8017588 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8017374:	697b      	ldr	r3, [r7, #20]
 8017376:	891b      	ldrh	r3, [r3, #8]
 8017378:	887a      	ldrh	r2, [r7, #2]
 801737a:	429a      	cmp	r2, r3
 801737c:	d301      	bcc.n	8017382 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801737e:	2300      	movs	r3, #0
 8017380:	e102      	b.n	8017588 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017386:	887a      	ldrh	r2, [r7, #2]
 8017388:	429a      	cmp	r2, r3
 801738a:	d906      	bls.n	801739a <tcp_split_unsent_seg+0x7e>
 801738c:	4b80      	ldr	r3, [pc, #512]	; (8017590 <tcp_split_unsent_seg+0x274>)
 801738e:	f240 325b 	movw	r2, #859	; 0x35b
 8017392:	4983      	ldr	r1, [pc, #524]	; (80175a0 <tcp_split_unsent_seg+0x284>)
 8017394:	4880      	ldr	r0, [pc, #512]	; (8017598 <tcp_split_unsent_seg+0x27c>)
 8017396:	f004 fafd 	bl	801b994 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801739a:	697b      	ldr	r3, [r7, #20]
 801739c:	891b      	ldrh	r3, [r3, #8]
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d106      	bne.n	80173b0 <tcp_split_unsent_seg+0x94>
 80173a2:	4b7b      	ldr	r3, [pc, #492]	; (8017590 <tcp_split_unsent_seg+0x274>)
 80173a4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80173a8:	497e      	ldr	r1, [pc, #504]	; (80175a4 <tcp_split_unsent_seg+0x288>)
 80173aa:	487b      	ldr	r0, [pc, #492]	; (8017598 <tcp_split_unsent_seg+0x27c>)
 80173ac:	f004 faf2 	bl	801b994 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80173b0:	697b      	ldr	r3, [r7, #20]
 80173b2:	7a9b      	ldrb	r3, [r3, #10]
 80173b4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80173b6:	7bfb      	ldrb	r3, [r7, #15]
 80173b8:	009b      	lsls	r3, r3, #2
 80173ba:	b2db      	uxtb	r3, r3
 80173bc:	f003 0304 	and.w	r3, r3, #4
 80173c0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80173c2:	697b      	ldr	r3, [r7, #20]
 80173c4:	891a      	ldrh	r2, [r3, #8]
 80173c6:	887b      	ldrh	r3, [r7, #2]
 80173c8:	1ad3      	subs	r3, r2, r3
 80173ca:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80173cc:	7bbb      	ldrb	r3, [r7, #14]
 80173ce:	b29a      	uxth	r2, r3
 80173d0:	89bb      	ldrh	r3, [r7, #12]
 80173d2:	4413      	add	r3, r2
 80173d4:	b29b      	uxth	r3, r3
 80173d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80173da:	4619      	mov	r1, r3
 80173dc:	2036      	movs	r0, #54	; 0x36
 80173de:	f7fa fc2d 	bl	8011c3c <pbuf_alloc>
 80173e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80173e4:	693b      	ldr	r3, [r7, #16]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	f000 80b7 	beq.w	801755a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80173ec:	697b      	ldr	r3, [r7, #20]
 80173ee:	685b      	ldr	r3, [r3, #4]
 80173f0:	891a      	ldrh	r2, [r3, #8]
 80173f2:	697b      	ldr	r3, [r7, #20]
 80173f4:	891b      	ldrh	r3, [r3, #8]
 80173f6:	1ad3      	subs	r3, r2, r3
 80173f8:	b29a      	uxth	r2, r3
 80173fa:	887b      	ldrh	r3, [r7, #2]
 80173fc:	4413      	add	r3, r2
 80173fe:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8017400:	697b      	ldr	r3, [r7, #20]
 8017402:	6858      	ldr	r0, [r3, #4]
 8017404:	693b      	ldr	r3, [r7, #16]
 8017406:	685a      	ldr	r2, [r3, #4]
 8017408:	7bbb      	ldrb	r3, [r7, #14]
 801740a:	18d1      	adds	r1, r2, r3
 801740c:	897b      	ldrh	r3, [r7, #10]
 801740e:	89ba      	ldrh	r2, [r7, #12]
 8017410:	f7fb f920 	bl	8012654 <pbuf_copy_partial>
 8017414:	4603      	mov	r3, r0
 8017416:	461a      	mov	r2, r3
 8017418:	89bb      	ldrh	r3, [r7, #12]
 801741a:	4293      	cmp	r3, r2
 801741c:	f040 809f 	bne.w	801755e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8017420:	697b      	ldr	r3, [r7, #20]
 8017422:	68db      	ldr	r3, [r3, #12]
 8017424:	899b      	ldrh	r3, [r3, #12]
 8017426:	b29b      	uxth	r3, r3
 8017428:	4618      	mov	r0, r3
 801742a:	f7f9 faf9 	bl	8010a20 <lwip_htons>
 801742e:	4603      	mov	r3, r0
 8017430:	b2db      	uxtb	r3, r3
 8017432:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017436:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8017438:	2300      	movs	r3, #0
 801743a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801743c:	7efb      	ldrb	r3, [r7, #27]
 801743e:	f003 0308 	and.w	r3, r3, #8
 8017442:	2b00      	cmp	r3, #0
 8017444:	d007      	beq.n	8017456 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8017446:	7efb      	ldrb	r3, [r7, #27]
 8017448:	f023 0308 	bic.w	r3, r3, #8
 801744c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801744e:	7ebb      	ldrb	r3, [r7, #26]
 8017450:	f043 0308 	orr.w	r3, r3, #8
 8017454:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8017456:	7efb      	ldrb	r3, [r7, #27]
 8017458:	f003 0301 	and.w	r3, r3, #1
 801745c:	2b00      	cmp	r3, #0
 801745e:	d007      	beq.n	8017470 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8017460:	7efb      	ldrb	r3, [r7, #27]
 8017462:	f023 0301 	bic.w	r3, r3, #1
 8017466:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8017468:	7ebb      	ldrb	r3, [r7, #26]
 801746a:	f043 0301 	orr.w	r3, r3, #1
 801746e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8017470:	697b      	ldr	r3, [r7, #20]
 8017472:	68db      	ldr	r3, [r3, #12]
 8017474:	685b      	ldr	r3, [r3, #4]
 8017476:	4618      	mov	r0, r3
 8017478:	f7f9 fae7 	bl	8010a4a <lwip_htonl>
 801747c:	4602      	mov	r2, r0
 801747e:	887b      	ldrh	r3, [r7, #2]
 8017480:	18d1      	adds	r1, r2, r3
 8017482:	7eba      	ldrb	r2, [r7, #26]
 8017484:	7bfb      	ldrb	r3, [r7, #15]
 8017486:	9300      	str	r3, [sp, #0]
 8017488:	460b      	mov	r3, r1
 801748a:	6939      	ldr	r1, [r7, #16]
 801748c:	6878      	ldr	r0, [r7, #4]
 801748e:	f7ff fa4f 	bl	8016930 <tcp_create_segment>
 8017492:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8017494:	69fb      	ldr	r3, [r7, #28]
 8017496:	2b00      	cmp	r3, #0
 8017498:	d063      	beq.n	8017562 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801749a:	697b      	ldr	r3, [r7, #20]
 801749c:	685b      	ldr	r3, [r3, #4]
 801749e:	4618      	mov	r0, r3
 80174a0:	f7fa ff70 	bl	8012384 <pbuf_clen>
 80174a4:	4603      	mov	r3, r0
 80174a6:	461a      	mov	r2, r3
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80174ae:	1a9b      	subs	r3, r3, r2
 80174b0:	b29a      	uxth	r2, r3
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80174b8:	697b      	ldr	r3, [r7, #20]
 80174ba:	6858      	ldr	r0, [r3, #4]
 80174bc:	697b      	ldr	r3, [r7, #20]
 80174be:	685b      	ldr	r3, [r3, #4]
 80174c0:	891a      	ldrh	r2, [r3, #8]
 80174c2:	89bb      	ldrh	r3, [r7, #12]
 80174c4:	1ad3      	subs	r3, r2, r3
 80174c6:	b29b      	uxth	r3, r3
 80174c8:	4619      	mov	r1, r3
 80174ca:	f7fa fd15 	bl	8011ef8 <pbuf_realloc>
  useg->len -= remainder;
 80174ce:	697b      	ldr	r3, [r7, #20]
 80174d0:	891a      	ldrh	r2, [r3, #8]
 80174d2:	89bb      	ldrh	r3, [r7, #12]
 80174d4:	1ad3      	subs	r3, r2, r3
 80174d6:	b29a      	uxth	r2, r3
 80174d8:	697b      	ldr	r3, [r7, #20]
 80174da:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80174dc:	697b      	ldr	r3, [r7, #20]
 80174de:	68db      	ldr	r3, [r3, #12]
 80174e0:	899b      	ldrh	r3, [r3, #12]
 80174e2:	b29c      	uxth	r4, r3
 80174e4:	7efb      	ldrb	r3, [r7, #27]
 80174e6:	b29b      	uxth	r3, r3
 80174e8:	4618      	mov	r0, r3
 80174ea:	f7f9 fa99 	bl	8010a20 <lwip_htons>
 80174ee:	4603      	mov	r3, r0
 80174f0:	461a      	mov	r2, r3
 80174f2:	697b      	ldr	r3, [r7, #20]
 80174f4:	68db      	ldr	r3, [r3, #12]
 80174f6:	4322      	orrs	r2, r4
 80174f8:	b292      	uxth	r2, r2
 80174fa:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80174fc:	697b      	ldr	r3, [r7, #20]
 80174fe:	685b      	ldr	r3, [r3, #4]
 8017500:	4618      	mov	r0, r3
 8017502:	f7fa ff3f 	bl	8012384 <pbuf_clen>
 8017506:	4603      	mov	r3, r0
 8017508:	461a      	mov	r2, r3
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017510:	4413      	add	r3, r2
 8017512:	b29a      	uxth	r2, r3
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801751a:	69fb      	ldr	r3, [r7, #28]
 801751c:	685b      	ldr	r3, [r3, #4]
 801751e:	4618      	mov	r0, r3
 8017520:	f7fa ff30 	bl	8012384 <pbuf_clen>
 8017524:	4603      	mov	r3, r0
 8017526:	461a      	mov	r2, r3
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801752e:	4413      	add	r3, r2
 8017530:	b29a      	uxth	r2, r3
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8017538:	697b      	ldr	r3, [r7, #20]
 801753a:	681a      	ldr	r2, [r3, #0]
 801753c:	69fb      	ldr	r3, [r7, #28]
 801753e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8017540:	697b      	ldr	r3, [r7, #20]
 8017542:	69fa      	ldr	r2, [r7, #28]
 8017544:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8017546:	69fb      	ldr	r3, [r7, #28]
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	2b00      	cmp	r3, #0
 801754c:	d103      	bne.n	8017556 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	2200      	movs	r2, #0
 8017552:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8017556:	2300      	movs	r3, #0
 8017558:	e016      	b.n	8017588 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801755a:	bf00      	nop
 801755c:	e002      	b.n	8017564 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801755e:	bf00      	nop
 8017560:	e000      	b.n	8017564 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8017562:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8017564:	69fb      	ldr	r3, [r7, #28]
 8017566:	2b00      	cmp	r3, #0
 8017568:	d006      	beq.n	8017578 <tcp_split_unsent_seg+0x25c>
 801756a:	4b09      	ldr	r3, [pc, #36]	; (8017590 <tcp_split_unsent_seg+0x274>)
 801756c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8017570:	490d      	ldr	r1, [pc, #52]	; (80175a8 <tcp_split_unsent_seg+0x28c>)
 8017572:	4809      	ldr	r0, [pc, #36]	; (8017598 <tcp_split_unsent_seg+0x27c>)
 8017574:	f004 fa0e 	bl	801b994 <iprintf>
  if (p != NULL) {
 8017578:	693b      	ldr	r3, [r7, #16]
 801757a:	2b00      	cmp	r3, #0
 801757c:	d002      	beq.n	8017584 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801757e:	6938      	ldr	r0, [r7, #16]
 8017580:	f7fa fe72 	bl	8012268 <pbuf_free>
  }

  return ERR_MEM;
 8017584:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017588:	4618      	mov	r0, r3
 801758a:	3724      	adds	r7, #36	; 0x24
 801758c:	46bd      	mov	sp, r7
 801758e:	bd90      	pop	{r4, r7, pc}
 8017590:	0801f298 	.word	0x0801f298
 8017594:	0801f62c 	.word	0x0801f62c
 8017598:	0801f2ec 	.word	0x0801f2ec
 801759c:	0801f650 	.word	0x0801f650
 80175a0:	0801f674 	.word	0x0801f674
 80175a4:	0801f684 	.word	0x0801f684
 80175a8:	0801f694 	.word	0x0801f694

080175ac <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80175ac:	b590      	push	{r4, r7, lr}
 80175ae:	b085      	sub	sp, #20
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d106      	bne.n	80175c8 <tcp_send_fin+0x1c>
 80175ba:	4b21      	ldr	r3, [pc, #132]	; (8017640 <tcp_send_fin+0x94>)
 80175bc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80175c0:	4920      	ldr	r1, [pc, #128]	; (8017644 <tcp_send_fin+0x98>)
 80175c2:	4821      	ldr	r0, [pc, #132]	; (8017648 <tcp_send_fin+0x9c>)
 80175c4:	f004 f9e6 	bl	801b994 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d02e      	beq.n	801762e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80175d4:	60fb      	str	r3, [r7, #12]
 80175d6:	e002      	b.n	80175de <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80175d8:	68fb      	ldr	r3, [r7, #12]
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	681b      	ldr	r3, [r3, #0]
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d1f8      	bne.n	80175d8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80175e6:	68fb      	ldr	r3, [r7, #12]
 80175e8:	68db      	ldr	r3, [r3, #12]
 80175ea:	899b      	ldrh	r3, [r3, #12]
 80175ec:	b29b      	uxth	r3, r3
 80175ee:	4618      	mov	r0, r3
 80175f0:	f7f9 fa16 	bl	8010a20 <lwip_htons>
 80175f4:	4603      	mov	r3, r0
 80175f6:	b2db      	uxtb	r3, r3
 80175f8:	f003 0307 	and.w	r3, r3, #7
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d116      	bne.n	801762e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	68db      	ldr	r3, [r3, #12]
 8017604:	899b      	ldrh	r3, [r3, #12]
 8017606:	b29c      	uxth	r4, r3
 8017608:	2001      	movs	r0, #1
 801760a:	f7f9 fa09 	bl	8010a20 <lwip_htons>
 801760e:	4603      	mov	r3, r0
 8017610:	461a      	mov	r2, r3
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	68db      	ldr	r3, [r3, #12]
 8017616:	4322      	orrs	r2, r4
 8017618:	b292      	uxth	r2, r2
 801761a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	8b5b      	ldrh	r3, [r3, #26]
 8017620:	f043 0320 	orr.w	r3, r3, #32
 8017624:	b29a      	uxth	r2, r3
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801762a:	2300      	movs	r3, #0
 801762c:	e004      	b.n	8017638 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801762e:	2101      	movs	r1, #1
 8017630:	6878      	ldr	r0, [r7, #4]
 8017632:	f000 f80b 	bl	801764c <tcp_enqueue_flags>
 8017636:	4603      	mov	r3, r0
}
 8017638:	4618      	mov	r0, r3
 801763a:	3714      	adds	r7, #20
 801763c:	46bd      	mov	sp, r7
 801763e:	bd90      	pop	{r4, r7, pc}
 8017640:	0801f298 	.word	0x0801f298
 8017644:	0801f6a0 	.word	0x0801f6a0
 8017648:	0801f2ec 	.word	0x0801f2ec

0801764c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801764c:	b580      	push	{r7, lr}
 801764e:	b08a      	sub	sp, #40	; 0x28
 8017650:	af02      	add	r7, sp, #8
 8017652:	6078      	str	r0, [r7, #4]
 8017654:	460b      	mov	r3, r1
 8017656:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8017658:	2300      	movs	r3, #0
 801765a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801765c:	2300      	movs	r3, #0
 801765e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8017660:	78fb      	ldrb	r3, [r7, #3]
 8017662:	f003 0303 	and.w	r3, r3, #3
 8017666:	2b00      	cmp	r3, #0
 8017668:	d106      	bne.n	8017678 <tcp_enqueue_flags+0x2c>
 801766a:	4b67      	ldr	r3, [pc, #412]	; (8017808 <tcp_enqueue_flags+0x1bc>)
 801766c:	f240 4211 	movw	r2, #1041	; 0x411
 8017670:	4966      	ldr	r1, [pc, #408]	; (801780c <tcp_enqueue_flags+0x1c0>)
 8017672:	4867      	ldr	r0, [pc, #412]	; (8017810 <tcp_enqueue_flags+0x1c4>)
 8017674:	f004 f98e 	bl	801b994 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	2b00      	cmp	r3, #0
 801767c:	d106      	bne.n	801768c <tcp_enqueue_flags+0x40>
 801767e:	4b62      	ldr	r3, [pc, #392]	; (8017808 <tcp_enqueue_flags+0x1bc>)
 8017680:	f240 4213 	movw	r2, #1043	; 0x413
 8017684:	4963      	ldr	r1, [pc, #396]	; (8017814 <tcp_enqueue_flags+0x1c8>)
 8017686:	4862      	ldr	r0, [pc, #392]	; (8017810 <tcp_enqueue_flags+0x1c4>)
 8017688:	f004 f984 	bl	801b994 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801768c:	78fb      	ldrb	r3, [r7, #3]
 801768e:	f003 0302 	and.w	r3, r3, #2
 8017692:	2b00      	cmp	r3, #0
 8017694:	d001      	beq.n	801769a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8017696:	2301      	movs	r3, #1
 8017698:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801769a:	7ffb      	ldrb	r3, [r7, #31]
 801769c:	009b      	lsls	r3, r3, #2
 801769e:	b2db      	uxtb	r3, r3
 80176a0:	f003 0304 	and.w	r3, r3, #4
 80176a4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80176a6:	7dfb      	ldrb	r3, [r7, #23]
 80176a8:	b29b      	uxth	r3, r3
 80176aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80176ae:	4619      	mov	r1, r3
 80176b0:	2036      	movs	r0, #54	; 0x36
 80176b2:	f7fa fac3 	bl	8011c3c <pbuf_alloc>
 80176b6:	6138      	str	r0, [r7, #16]
 80176b8:	693b      	ldr	r3, [r7, #16]
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d109      	bne.n	80176d2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	8b5b      	ldrh	r3, [r3, #26]
 80176c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80176c6:	b29a      	uxth	r2, r3
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80176cc:	f04f 33ff 	mov.w	r3, #4294967295
 80176d0:	e095      	b.n	80177fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80176d2:	693b      	ldr	r3, [r7, #16]
 80176d4:	895a      	ldrh	r2, [r3, #10]
 80176d6:	7dfb      	ldrb	r3, [r7, #23]
 80176d8:	b29b      	uxth	r3, r3
 80176da:	429a      	cmp	r2, r3
 80176dc:	d206      	bcs.n	80176ec <tcp_enqueue_flags+0xa0>
 80176de:	4b4a      	ldr	r3, [pc, #296]	; (8017808 <tcp_enqueue_flags+0x1bc>)
 80176e0:	f240 4239 	movw	r2, #1081	; 0x439
 80176e4:	494c      	ldr	r1, [pc, #304]	; (8017818 <tcp_enqueue_flags+0x1cc>)
 80176e6:	484a      	ldr	r0, [pc, #296]	; (8017810 <tcp_enqueue_flags+0x1c4>)
 80176e8:	f004 f954 	bl	801b994 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80176f0:	78fa      	ldrb	r2, [r7, #3]
 80176f2:	7ffb      	ldrb	r3, [r7, #31]
 80176f4:	9300      	str	r3, [sp, #0]
 80176f6:	460b      	mov	r3, r1
 80176f8:	6939      	ldr	r1, [r7, #16]
 80176fa:	6878      	ldr	r0, [r7, #4]
 80176fc:	f7ff f918 	bl	8016930 <tcp_create_segment>
 8017700:	60f8      	str	r0, [r7, #12]
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	2b00      	cmp	r3, #0
 8017706:	d109      	bne.n	801771c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	8b5b      	ldrh	r3, [r3, #26]
 801770c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017710:	b29a      	uxth	r2, r3
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8017716:	f04f 33ff 	mov.w	r3, #4294967295
 801771a:	e070      	b.n	80177fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	68db      	ldr	r3, [r3, #12]
 8017720:	f003 0303 	and.w	r3, r3, #3
 8017724:	2b00      	cmp	r3, #0
 8017726:	d006      	beq.n	8017736 <tcp_enqueue_flags+0xea>
 8017728:	4b37      	ldr	r3, [pc, #220]	; (8017808 <tcp_enqueue_flags+0x1bc>)
 801772a:	f240 4242 	movw	r2, #1090	; 0x442
 801772e:	493b      	ldr	r1, [pc, #236]	; (801781c <tcp_enqueue_flags+0x1d0>)
 8017730:	4837      	ldr	r0, [pc, #220]	; (8017810 <tcp_enqueue_flags+0x1c4>)
 8017732:	f004 f92f 	bl	801b994 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8017736:	68fb      	ldr	r3, [r7, #12]
 8017738:	891b      	ldrh	r3, [r3, #8]
 801773a:	2b00      	cmp	r3, #0
 801773c:	d006      	beq.n	801774c <tcp_enqueue_flags+0x100>
 801773e:	4b32      	ldr	r3, [pc, #200]	; (8017808 <tcp_enqueue_flags+0x1bc>)
 8017740:	f240 4243 	movw	r2, #1091	; 0x443
 8017744:	4936      	ldr	r1, [pc, #216]	; (8017820 <tcp_enqueue_flags+0x1d4>)
 8017746:	4832      	ldr	r0, [pc, #200]	; (8017810 <tcp_enqueue_flags+0x1c4>)
 8017748:	f004 f924 	bl	801b994 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017750:	2b00      	cmp	r3, #0
 8017752:	d103      	bne.n	801775c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	68fa      	ldr	r2, [r7, #12]
 8017758:	66da      	str	r2, [r3, #108]	; 0x6c
 801775a:	e00d      	b.n	8017778 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017760:	61bb      	str	r3, [r7, #24]
 8017762:	e002      	b.n	801776a <tcp_enqueue_flags+0x11e>
 8017764:	69bb      	ldr	r3, [r7, #24]
 8017766:	681b      	ldr	r3, [r3, #0]
 8017768:	61bb      	str	r3, [r7, #24]
 801776a:	69bb      	ldr	r3, [r7, #24]
 801776c:	681b      	ldr	r3, [r3, #0]
 801776e:	2b00      	cmp	r3, #0
 8017770:	d1f8      	bne.n	8017764 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8017772:	69bb      	ldr	r3, [r7, #24]
 8017774:	68fa      	ldr	r2, [r7, #12]
 8017776:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	2200      	movs	r2, #0
 801777c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8017780:	78fb      	ldrb	r3, [r7, #3]
 8017782:	f003 0302 	and.w	r3, r3, #2
 8017786:	2b00      	cmp	r3, #0
 8017788:	d104      	bne.n	8017794 <tcp_enqueue_flags+0x148>
 801778a:	78fb      	ldrb	r3, [r7, #3]
 801778c:	f003 0301 	and.w	r3, r3, #1
 8017790:	2b00      	cmp	r3, #0
 8017792:	d004      	beq.n	801779e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017798:	1c5a      	adds	r2, r3, #1
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801779e:	78fb      	ldrb	r3, [r7, #3]
 80177a0:	f003 0301 	and.w	r3, r3, #1
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d006      	beq.n	80177b6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	8b5b      	ldrh	r3, [r3, #26]
 80177ac:	f043 0320 	orr.w	r3, r3, #32
 80177b0:	b29a      	uxth	r2, r3
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80177b6:	68fb      	ldr	r3, [r7, #12]
 80177b8:	685b      	ldr	r3, [r3, #4]
 80177ba:	4618      	mov	r0, r3
 80177bc:	f7fa fde2 	bl	8012384 <pbuf_clen>
 80177c0:	4603      	mov	r3, r0
 80177c2:	461a      	mov	r2, r3
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80177ca:	4413      	add	r3, r2
 80177cc:	b29a      	uxth	r2, r3
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d00e      	beq.n	80177fc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d10a      	bne.n	80177fc <tcp_enqueue_flags+0x1b0>
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d106      	bne.n	80177fc <tcp_enqueue_flags+0x1b0>
 80177ee:	4b06      	ldr	r3, [pc, #24]	; (8017808 <tcp_enqueue_flags+0x1bc>)
 80177f0:	f240 4265 	movw	r2, #1125	; 0x465
 80177f4:	490b      	ldr	r1, [pc, #44]	; (8017824 <tcp_enqueue_flags+0x1d8>)
 80177f6:	4806      	ldr	r0, [pc, #24]	; (8017810 <tcp_enqueue_flags+0x1c4>)
 80177f8:	f004 f8cc 	bl	801b994 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80177fc:	2300      	movs	r3, #0
}
 80177fe:	4618      	mov	r0, r3
 8017800:	3720      	adds	r7, #32
 8017802:	46bd      	mov	sp, r7
 8017804:	bd80      	pop	{r7, pc}
 8017806:	bf00      	nop
 8017808:	0801f298 	.word	0x0801f298
 801780c:	0801f6bc 	.word	0x0801f6bc
 8017810:	0801f2ec 	.word	0x0801f2ec
 8017814:	0801f714 	.word	0x0801f714
 8017818:	0801f734 	.word	0x0801f734
 801781c:	0801f770 	.word	0x0801f770
 8017820:	0801f788 	.word	0x0801f788
 8017824:	0801f7b4 	.word	0x0801f7b4

08017828 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8017828:	b5b0      	push	{r4, r5, r7, lr}
 801782a:	b08a      	sub	sp, #40	; 0x28
 801782c:	af00      	add	r7, sp, #0
 801782e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	2b00      	cmp	r3, #0
 8017834:	d106      	bne.n	8017844 <tcp_output+0x1c>
 8017836:	4b8a      	ldr	r3, [pc, #552]	; (8017a60 <tcp_output+0x238>)
 8017838:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801783c:	4989      	ldr	r1, [pc, #548]	; (8017a64 <tcp_output+0x23c>)
 801783e:	488a      	ldr	r0, [pc, #552]	; (8017a68 <tcp_output+0x240>)
 8017840:	f004 f8a8 	bl	801b994 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	7d1b      	ldrb	r3, [r3, #20]
 8017848:	2b01      	cmp	r3, #1
 801784a:	d106      	bne.n	801785a <tcp_output+0x32>
 801784c:	4b84      	ldr	r3, [pc, #528]	; (8017a60 <tcp_output+0x238>)
 801784e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8017852:	4986      	ldr	r1, [pc, #536]	; (8017a6c <tcp_output+0x244>)
 8017854:	4884      	ldr	r0, [pc, #528]	; (8017a68 <tcp_output+0x240>)
 8017856:	f004 f89d 	bl	801b994 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801785a:	4b85      	ldr	r3, [pc, #532]	; (8017a70 <tcp_output+0x248>)
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	687a      	ldr	r2, [r7, #4]
 8017860:	429a      	cmp	r2, r3
 8017862:	d101      	bne.n	8017868 <tcp_output+0x40>
    return ERR_OK;
 8017864:	2300      	movs	r3, #0
 8017866:	e1ce      	b.n	8017c06 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017874:	4293      	cmp	r3, r2
 8017876:	bf28      	it	cs
 8017878:	4613      	movcs	r3, r2
 801787a:	b29b      	uxth	r3, r3
 801787c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017882:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8017884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017886:	2b00      	cmp	r3, #0
 8017888:	d10b      	bne.n	80178a2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	8b5b      	ldrh	r3, [r3, #26]
 801788e:	f003 0302 	and.w	r3, r3, #2
 8017892:	2b00      	cmp	r3, #0
 8017894:	f000 81aa 	beq.w	8017bec <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8017898:	6878      	ldr	r0, [r7, #4]
 801789a:	f000 fdcb 	bl	8018434 <tcp_send_empty_ack>
 801789e:	4603      	mov	r3, r0
 80178a0:	e1b1      	b.n	8017c06 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80178a2:	6879      	ldr	r1, [r7, #4]
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	3304      	adds	r3, #4
 80178a8:	461a      	mov	r2, r3
 80178aa:	6878      	ldr	r0, [r7, #4]
 80178ac:	f7ff f824 	bl	80168f8 <tcp_route>
 80178b0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80178b2:	697b      	ldr	r3, [r7, #20]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d102      	bne.n	80178be <tcp_output+0x96>
    return ERR_RTE;
 80178b8:	f06f 0303 	mvn.w	r3, #3
 80178bc:	e1a3      	b.n	8017c06 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d003      	beq.n	80178cc <tcp_output+0xa4>
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	681b      	ldr	r3, [r3, #0]
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d111      	bne.n	80178f0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80178cc:	697b      	ldr	r3, [r7, #20]
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d002      	beq.n	80178d8 <tcp_output+0xb0>
 80178d2:	697b      	ldr	r3, [r7, #20]
 80178d4:	3304      	adds	r3, #4
 80178d6:	e000      	b.n	80178da <tcp_output+0xb2>
 80178d8:	2300      	movs	r3, #0
 80178da:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80178dc:	693b      	ldr	r3, [r7, #16]
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d102      	bne.n	80178e8 <tcp_output+0xc0>
      return ERR_RTE;
 80178e2:	f06f 0303 	mvn.w	r3, #3
 80178e6:	e18e      	b.n	8017c06 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80178e8:	693b      	ldr	r3, [r7, #16]
 80178ea:	681a      	ldr	r2, [r3, #0]
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80178f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178f2:	68db      	ldr	r3, [r3, #12]
 80178f4:	685b      	ldr	r3, [r3, #4]
 80178f6:	4618      	mov	r0, r3
 80178f8:	f7f9 f8a7 	bl	8010a4a <lwip_htonl>
 80178fc:	4602      	mov	r2, r0
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017902:	1ad3      	subs	r3, r2, r3
 8017904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017906:	8912      	ldrh	r2, [r2, #8]
 8017908:	4413      	add	r3, r2
 801790a:	69ba      	ldr	r2, [r7, #24]
 801790c:	429a      	cmp	r2, r3
 801790e:	d227      	bcs.n	8017960 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017916:	461a      	mov	r2, r3
 8017918:	69bb      	ldr	r3, [r7, #24]
 801791a:	4293      	cmp	r3, r2
 801791c:	d114      	bne.n	8017948 <tcp_output+0x120>
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017922:	2b00      	cmp	r3, #0
 8017924:	d110      	bne.n	8017948 <tcp_output+0x120>
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801792c:	2b00      	cmp	r3, #0
 801792e:	d10b      	bne.n	8017948 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	2200      	movs	r2, #0
 8017934:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	2201      	movs	r2, #1
 801793c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	2200      	movs	r2, #0
 8017944:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	8b5b      	ldrh	r3, [r3, #26]
 801794c:	f003 0302 	and.w	r3, r3, #2
 8017950:	2b00      	cmp	r3, #0
 8017952:	f000 814d 	beq.w	8017bf0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8017956:	6878      	ldr	r0, [r7, #4]
 8017958:	f000 fd6c 	bl	8018434 <tcp_send_empty_ack>
 801795c:	4603      	mov	r3, r0
 801795e:	e152      	b.n	8017c06 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	2200      	movs	r2, #0
 8017964:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801796c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801796e:	6a3b      	ldr	r3, [r7, #32]
 8017970:	2b00      	cmp	r3, #0
 8017972:	f000 811c 	beq.w	8017bae <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8017976:	e002      	b.n	801797e <tcp_output+0x156>
 8017978:	6a3b      	ldr	r3, [r7, #32]
 801797a:	681b      	ldr	r3, [r3, #0]
 801797c:	623b      	str	r3, [r7, #32]
 801797e:	6a3b      	ldr	r3, [r7, #32]
 8017980:	681b      	ldr	r3, [r3, #0]
 8017982:	2b00      	cmp	r3, #0
 8017984:	d1f8      	bne.n	8017978 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8017986:	e112      	b.n	8017bae <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8017988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801798a:	68db      	ldr	r3, [r3, #12]
 801798c:	899b      	ldrh	r3, [r3, #12]
 801798e:	b29b      	uxth	r3, r3
 8017990:	4618      	mov	r0, r3
 8017992:	f7f9 f845 	bl	8010a20 <lwip_htons>
 8017996:	4603      	mov	r3, r0
 8017998:	b2db      	uxtb	r3, r3
 801799a:	f003 0304 	and.w	r3, r3, #4
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d006      	beq.n	80179b0 <tcp_output+0x188>
 80179a2:	4b2f      	ldr	r3, [pc, #188]	; (8017a60 <tcp_output+0x238>)
 80179a4:	f240 5236 	movw	r2, #1334	; 0x536
 80179a8:	4932      	ldr	r1, [pc, #200]	; (8017a74 <tcp_output+0x24c>)
 80179aa:	482f      	ldr	r0, [pc, #188]	; (8017a68 <tcp_output+0x240>)
 80179ac:	f003 fff2 	bl	801b994 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d01f      	beq.n	80179f8 <tcp_output+0x1d0>
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	8b5b      	ldrh	r3, [r3, #26]
 80179bc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d119      	bne.n	80179f8 <tcp_output+0x1d0>
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d00b      	beq.n	80179e4 <tcp_output+0x1bc>
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d110      	bne.n	80179f8 <tcp_output+0x1d0>
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80179da:	891a      	ldrh	r2, [r3, #8]
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80179e0:	429a      	cmp	r2, r3
 80179e2:	d209      	bcs.n	80179f8 <tcp_output+0x1d0>
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d004      	beq.n	80179f8 <tcp_output+0x1d0>
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80179f4:	2b08      	cmp	r3, #8
 80179f6:	d901      	bls.n	80179fc <tcp_output+0x1d4>
 80179f8:	2301      	movs	r3, #1
 80179fa:	e000      	b.n	80179fe <tcp_output+0x1d6>
 80179fc:	2300      	movs	r3, #0
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d106      	bne.n	8017a10 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	8b5b      	ldrh	r3, [r3, #26]
 8017a06:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	f000 80e4 	beq.w	8017bd8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	7d1b      	ldrb	r3, [r3, #20]
 8017a14:	2b02      	cmp	r3, #2
 8017a16:	d00d      	beq.n	8017a34 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8017a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a1a:	68db      	ldr	r3, [r3, #12]
 8017a1c:	899b      	ldrh	r3, [r3, #12]
 8017a1e:	b29c      	uxth	r4, r3
 8017a20:	2010      	movs	r0, #16
 8017a22:	f7f8 fffd 	bl	8010a20 <lwip_htons>
 8017a26:	4603      	mov	r3, r0
 8017a28:	461a      	mov	r2, r3
 8017a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a2c:	68db      	ldr	r3, [r3, #12]
 8017a2e:	4322      	orrs	r2, r4
 8017a30:	b292      	uxth	r2, r2
 8017a32:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8017a34:	697a      	ldr	r2, [r7, #20]
 8017a36:	6879      	ldr	r1, [r7, #4]
 8017a38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017a3a:	f000 f909 	bl	8017c50 <tcp_output_segment>
 8017a3e:	4603      	mov	r3, r0
 8017a40:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8017a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d016      	beq.n	8017a78 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	8b5b      	ldrh	r3, [r3, #26]
 8017a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017a52:	b29a      	uxth	r2, r3
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	835a      	strh	r2, [r3, #26]
      return err;
 8017a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017a5c:	e0d3      	b.n	8017c06 <tcp_output+0x3de>
 8017a5e:	bf00      	nop
 8017a60:	0801f298 	.word	0x0801f298
 8017a64:	0801f7dc 	.word	0x0801f7dc
 8017a68:	0801f2ec 	.word	0x0801f2ec
 8017a6c:	0801f7f4 	.word	0x0801f7f4
 8017a70:	200110d8 	.word	0x200110d8
 8017a74:	0801f81c 	.word	0x0801f81c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8017a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a7a:	681a      	ldr	r2, [r3, #0]
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	7d1b      	ldrb	r3, [r3, #20]
 8017a84:	2b02      	cmp	r3, #2
 8017a86:	d006      	beq.n	8017a96 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	8b5b      	ldrh	r3, [r3, #26]
 8017a8c:	f023 0303 	bic.w	r3, r3, #3
 8017a90:	b29a      	uxth	r2, r3
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a98:	68db      	ldr	r3, [r3, #12]
 8017a9a:	685b      	ldr	r3, [r3, #4]
 8017a9c:	4618      	mov	r0, r3
 8017a9e:	f7f8 ffd4 	bl	8010a4a <lwip_htonl>
 8017aa2:	4604      	mov	r4, r0
 8017aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aa6:	891b      	ldrh	r3, [r3, #8]
 8017aa8:	461d      	mov	r5, r3
 8017aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aac:	68db      	ldr	r3, [r3, #12]
 8017aae:	899b      	ldrh	r3, [r3, #12]
 8017ab0:	b29b      	uxth	r3, r3
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	f7f8 ffb4 	bl	8010a20 <lwip_htons>
 8017ab8:	4603      	mov	r3, r0
 8017aba:	b2db      	uxtb	r3, r3
 8017abc:	f003 0303 	and.w	r3, r3, #3
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d001      	beq.n	8017ac8 <tcp_output+0x2a0>
 8017ac4:	2301      	movs	r3, #1
 8017ac6:	e000      	b.n	8017aca <tcp_output+0x2a2>
 8017ac8:	2300      	movs	r3, #0
 8017aca:	442b      	add	r3, r5
 8017acc:	4423      	add	r3, r4
 8017ace:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017ad4:	68bb      	ldr	r3, [r7, #8]
 8017ad6:	1ad3      	subs	r3, r2, r3
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	da02      	bge.n	8017ae2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	68ba      	ldr	r2, [r7, #8]
 8017ae0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8017ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ae4:	891b      	ldrh	r3, [r3, #8]
 8017ae6:	461c      	mov	r4, r3
 8017ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aea:	68db      	ldr	r3, [r3, #12]
 8017aec:	899b      	ldrh	r3, [r3, #12]
 8017aee:	b29b      	uxth	r3, r3
 8017af0:	4618      	mov	r0, r3
 8017af2:	f7f8 ff95 	bl	8010a20 <lwip_htons>
 8017af6:	4603      	mov	r3, r0
 8017af8:	b2db      	uxtb	r3, r3
 8017afa:	f003 0303 	and.w	r3, r3, #3
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d001      	beq.n	8017b06 <tcp_output+0x2de>
 8017b02:	2301      	movs	r3, #1
 8017b04:	e000      	b.n	8017b08 <tcp_output+0x2e0>
 8017b06:	2300      	movs	r3, #0
 8017b08:	4423      	add	r3, r4
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d049      	beq.n	8017ba2 <tcp_output+0x37a>
      seg->next = NULL;
 8017b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b10:	2200      	movs	r2, #0
 8017b12:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d105      	bne.n	8017b28 <tcp_output+0x300>
        pcb->unacked = seg;
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017b20:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8017b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b24:	623b      	str	r3, [r7, #32]
 8017b26:	e03f      	b.n	8017ba8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8017b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b2a:	68db      	ldr	r3, [r3, #12]
 8017b2c:	685b      	ldr	r3, [r3, #4]
 8017b2e:	4618      	mov	r0, r3
 8017b30:	f7f8 ff8b 	bl	8010a4a <lwip_htonl>
 8017b34:	4604      	mov	r4, r0
 8017b36:	6a3b      	ldr	r3, [r7, #32]
 8017b38:	68db      	ldr	r3, [r3, #12]
 8017b3a:	685b      	ldr	r3, [r3, #4]
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	f7f8 ff84 	bl	8010a4a <lwip_htonl>
 8017b42:	4603      	mov	r3, r0
 8017b44:	1ae3      	subs	r3, r4, r3
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	da24      	bge.n	8017b94 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	3370      	adds	r3, #112	; 0x70
 8017b4e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8017b50:	e002      	b.n	8017b58 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8017b52:	69fb      	ldr	r3, [r7, #28]
 8017b54:	681b      	ldr	r3, [r3, #0]
 8017b56:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8017b58:	69fb      	ldr	r3, [r7, #28]
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d011      	beq.n	8017b84 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017b60:	69fb      	ldr	r3, [r7, #28]
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	68db      	ldr	r3, [r3, #12]
 8017b66:	685b      	ldr	r3, [r3, #4]
 8017b68:	4618      	mov	r0, r3
 8017b6a:	f7f8 ff6e 	bl	8010a4a <lwip_htonl>
 8017b6e:	4604      	mov	r4, r0
 8017b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b72:	68db      	ldr	r3, [r3, #12]
 8017b74:	685b      	ldr	r3, [r3, #4]
 8017b76:	4618      	mov	r0, r3
 8017b78:	f7f8 ff67 	bl	8010a4a <lwip_htonl>
 8017b7c:	4603      	mov	r3, r0
 8017b7e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	dbe6      	blt.n	8017b52 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8017b84:	69fb      	ldr	r3, [r7, #28]
 8017b86:	681a      	ldr	r2, [r3, #0]
 8017b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b8a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8017b8c:	69fb      	ldr	r3, [r7, #28]
 8017b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017b90:	601a      	str	r2, [r3, #0]
 8017b92:	e009      	b.n	8017ba8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8017b94:	6a3b      	ldr	r3, [r7, #32]
 8017b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017b98:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8017b9a:	6a3b      	ldr	r3, [r7, #32]
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	623b      	str	r3, [r7, #32]
 8017ba0:	e002      	b.n	8017ba8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8017ba2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ba4:	f7fb ff19 	bl	80139da <tcp_seg_free>
    }
    seg = pcb->unsent;
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017bac:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8017bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d012      	beq.n	8017bda <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8017bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bb6:	68db      	ldr	r3, [r3, #12]
 8017bb8:	685b      	ldr	r3, [r3, #4]
 8017bba:	4618      	mov	r0, r3
 8017bbc:	f7f8 ff45 	bl	8010a4a <lwip_htonl>
 8017bc0:	4602      	mov	r2, r0
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017bc6:	1ad3      	subs	r3, r2, r3
 8017bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017bca:	8912      	ldrh	r2, [r2, #8]
 8017bcc:	4413      	add	r3, r2
  while (seg != NULL &&
 8017bce:	69ba      	ldr	r2, [r7, #24]
 8017bd0:	429a      	cmp	r2, r3
 8017bd2:	f4bf aed9 	bcs.w	8017988 <tcp_output+0x160>
 8017bd6:	e000      	b.n	8017bda <tcp_output+0x3b2>
      break;
 8017bd8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d108      	bne.n	8017bf4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017be2:	687b      	ldr	r3, [r7, #4]
 8017be4:	2200      	movs	r2, #0
 8017be6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8017bea:	e004      	b.n	8017bf6 <tcp_output+0x3ce>
    goto output_done;
 8017bec:	bf00      	nop
 8017bee:	e002      	b.n	8017bf6 <tcp_output+0x3ce>
    goto output_done;
 8017bf0:	bf00      	nop
 8017bf2:	e000      	b.n	8017bf6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8017bf4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	8b5b      	ldrh	r3, [r3, #26]
 8017bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017bfe:	b29a      	uxth	r2, r3
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8017c04:	2300      	movs	r3, #0
}
 8017c06:	4618      	mov	r0, r3
 8017c08:	3728      	adds	r7, #40	; 0x28
 8017c0a:	46bd      	mov	sp, r7
 8017c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8017c0e:	bf00      	nop

08017c10 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8017c10:	b580      	push	{r7, lr}
 8017c12:	b082      	sub	sp, #8
 8017c14:	af00      	add	r7, sp, #0
 8017c16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d106      	bne.n	8017c2c <tcp_output_segment_busy+0x1c>
 8017c1e:	4b09      	ldr	r3, [pc, #36]	; (8017c44 <tcp_output_segment_busy+0x34>)
 8017c20:	f240 529a 	movw	r2, #1434	; 0x59a
 8017c24:	4908      	ldr	r1, [pc, #32]	; (8017c48 <tcp_output_segment_busy+0x38>)
 8017c26:	4809      	ldr	r0, [pc, #36]	; (8017c4c <tcp_output_segment_busy+0x3c>)
 8017c28:	f003 feb4 	bl	801b994 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	685b      	ldr	r3, [r3, #4]
 8017c30:	7b9b      	ldrb	r3, [r3, #14]
 8017c32:	2b01      	cmp	r3, #1
 8017c34:	d001      	beq.n	8017c3a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8017c36:	2301      	movs	r3, #1
 8017c38:	e000      	b.n	8017c3c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8017c3a:	2300      	movs	r3, #0
}
 8017c3c:	4618      	mov	r0, r3
 8017c3e:	3708      	adds	r7, #8
 8017c40:	46bd      	mov	sp, r7
 8017c42:	bd80      	pop	{r7, pc}
 8017c44:	0801f298 	.word	0x0801f298
 8017c48:	0801f834 	.word	0x0801f834
 8017c4c:	0801f2ec 	.word	0x0801f2ec

08017c50 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8017c50:	b5b0      	push	{r4, r5, r7, lr}
 8017c52:	b08c      	sub	sp, #48	; 0x30
 8017c54:	af04      	add	r7, sp, #16
 8017c56:	60f8      	str	r0, [r7, #12]
 8017c58:	60b9      	str	r1, [r7, #8]
 8017c5a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8017c5c:	68fb      	ldr	r3, [r7, #12]
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d106      	bne.n	8017c70 <tcp_output_segment+0x20>
 8017c62:	4b63      	ldr	r3, [pc, #396]	; (8017df0 <tcp_output_segment+0x1a0>)
 8017c64:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8017c68:	4962      	ldr	r1, [pc, #392]	; (8017df4 <tcp_output_segment+0x1a4>)
 8017c6a:	4863      	ldr	r0, [pc, #396]	; (8017df8 <tcp_output_segment+0x1a8>)
 8017c6c:	f003 fe92 	bl	801b994 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8017c70:	68bb      	ldr	r3, [r7, #8]
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d106      	bne.n	8017c84 <tcp_output_segment+0x34>
 8017c76:	4b5e      	ldr	r3, [pc, #376]	; (8017df0 <tcp_output_segment+0x1a0>)
 8017c78:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8017c7c:	495f      	ldr	r1, [pc, #380]	; (8017dfc <tcp_output_segment+0x1ac>)
 8017c7e:	485e      	ldr	r0, [pc, #376]	; (8017df8 <tcp_output_segment+0x1a8>)
 8017c80:	f003 fe88 	bl	801b994 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d106      	bne.n	8017c98 <tcp_output_segment+0x48>
 8017c8a:	4b59      	ldr	r3, [pc, #356]	; (8017df0 <tcp_output_segment+0x1a0>)
 8017c8c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8017c90:	495b      	ldr	r1, [pc, #364]	; (8017e00 <tcp_output_segment+0x1b0>)
 8017c92:	4859      	ldr	r0, [pc, #356]	; (8017df8 <tcp_output_segment+0x1a8>)
 8017c94:	f003 fe7e 	bl	801b994 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8017c98:	68f8      	ldr	r0, [r7, #12]
 8017c9a:	f7ff ffb9 	bl	8017c10 <tcp_output_segment_busy>
 8017c9e:	4603      	mov	r3, r0
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d001      	beq.n	8017ca8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8017ca4:	2300      	movs	r3, #0
 8017ca6:	e09f      	b.n	8017de8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8017ca8:	68bb      	ldr	r3, [r7, #8]
 8017caa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017cac:	68fb      	ldr	r3, [r7, #12]
 8017cae:	68dc      	ldr	r4, [r3, #12]
 8017cb0:	4610      	mov	r0, r2
 8017cb2:	f7f8 feca 	bl	8010a4a <lwip_htonl>
 8017cb6:	4603      	mov	r3, r0
 8017cb8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8017cba:	68bb      	ldr	r3, [r7, #8]
 8017cbc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	68dc      	ldr	r4, [r3, #12]
 8017cc2:	4610      	mov	r0, r2
 8017cc4:	f7f8 feac 	bl	8010a20 <lwip_htons>
 8017cc8:	4603      	mov	r3, r0
 8017cca:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017ccc:	68bb      	ldr	r3, [r7, #8]
 8017cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cd0:	68ba      	ldr	r2, [r7, #8]
 8017cd2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8017cd4:	441a      	add	r2, r3
 8017cd6:	68bb      	ldr	r3, [r7, #8]
 8017cd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	68db      	ldr	r3, [r3, #12]
 8017cde:	3314      	adds	r3, #20
 8017ce0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8017ce2:	68fb      	ldr	r3, [r7, #12]
 8017ce4:	7a9b      	ldrb	r3, [r3, #10]
 8017ce6:	f003 0301 	and.w	r3, r3, #1
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	d015      	beq.n	8017d1a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8017cee:	68bb      	ldr	r3, [r7, #8]
 8017cf0:	3304      	adds	r3, #4
 8017cf2:	461a      	mov	r2, r3
 8017cf4:	6879      	ldr	r1, [r7, #4]
 8017cf6:	f44f 7006 	mov.w	r0, #536	; 0x218
 8017cfa:	f7fc fa33 	bl	8014164 <tcp_eff_send_mss_netif>
 8017cfe:	4603      	mov	r3, r0
 8017d00:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8017d02:	8b7b      	ldrh	r3, [r7, #26]
 8017d04:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8017d08:	4618      	mov	r0, r3
 8017d0a:	f7f8 fe9e 	bl	8010a4a <lwip_htonl>
 8017d0e:	4602      	mov	r2, r0
 8017d10:	69fb      	ldr	r3, [r7, #28]
 8017d12:	601a      	str	r2, [r3, #0]
    opts += 1;
 8017d14:	69fb      	ldr	r3, [r7, #28]
 8017d16:	3304      	adds	r3, #4
 8017d18:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8017d1a:	68bb      	ldr	r3, [r7, #8]
 8017d1c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	da02      	bge.n	8017d2a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8017d24:	68bb      	ldr	r3, [r7, #8]
 8017d26:	2200      	movs	r2, #0
 8017d28:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8017d2a:	68bb      	ldr	r3, [r7, #8]
 8017d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d10c      	bne.n	8017d4c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8017d32:	4b34      	ldr	r3, [pc, #208]	; (8017e04 <tcp_output_segment+0x1b4>)
 8017d34:	681a      	ldr	r2, [r3, #0]
 8017d36:	68bb      	ldr	r3, [r7, #8]
 8017d38:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8017d3a:	68fb      	ldr	r3, [r7, #12]
 8017d3c:	68db      	ldr	r3, [r3, #12]
 8017d3e:	685b      	ldr	r3, [r3, #4]
 8017d40:	4618      	mov	r0, r3
 8017d42:	f7f8 fe82 	bl	8010a4a <lwip_htonl>
 8017d46:	4602      	mov	r2, r0
 8017d48:	68bb      	ldr	r3, [r7, #8]
 8017d4a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8017d4c:	68fb      	ldr	r3, [r7, #12]
 8017d4e:	68da      	ldr	r2, [r3, #12]
 8017d50:	68fb      	ldr	r3, [r7, #12]
 8017d52:	685b      	ldr	r3, [r3, #4]
 8017d54:	685b      	ldr	r3, [r3, #4]
 8017d56:	1ad3      	subs	r3, r2, r3
 8017d58:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8017d5a:	68fb      	ldr	r3, [r7, #12]
 8017d5c:	685b      	ldr	r3, [r3, #4]
 8017d5e:	8959      	ldrh	r1, [r3, #10]
 8017d60:	68fb      	ldr	r3, [r7, #12]
 8017d62:	685b      	ldr	r3, [r3, #4]
 8017d64:	8b3a      	ldrh	r2, [r7, #24]
 8017d66:	1a8a      	subs	r2, r1, r2
 8017d68:	b292      	uxth	r2, r2
 8017d6a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8017d6c:	68fb      	ldr	r3, [r7, #12]
 8017d6e:	685b      	ldr	r3, [r3, #4]
 8017d70:	8919      	ldrh	r1, [r3, #8]
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	685b      	ldr	r3, [r3, #4]
 8017d76:	8b3a      	ldrh	r2, [r7, #24]
 8017d78:	1a8a      	subs	r2, r1, r2
 8017d7a:	b292      	uxth	r2, r2
 8017d7c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8017d7e:	68fb      	ldr	r3, [r7, #12]
 8017d80:	685b      	ldr	r3, [r3, #4]
 8017d82:	68fa      	ldr	r2, [r7, #12]
 8017d84:	68d2      	ldr	r2, [r2, #12]
 8017d86:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8017d88:	68fb      	ldr	r3, [r7, #12]
 8017d8a:	68db      	ldr	r3, [r3, #12]
 8017d8c:	2200      	movs	r2, #0
 8017d8e:	741a      	strb	r2, [r3, #16]
 8017d90:	2200      	movs	r2, #0
 8017d92:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	68db      	ldr	r3, [r3, #12]
 8017d98:	f103 0214 	add.w	r2, r3, #20
 8017d9c:	68fb      	ldr	r3, [r7, #12]
 8017d9e:	7a9b      	ldrb	r3, [r3, #10]
 8017da0:	009b      	lsls	r3, r3, #2
 8017da2:	f003 0304 	and.w	r3, r3, #4
 8017da6:	4413      	add	r3, r2
 8017da8:	69fa      	ldr	r2, [r7, #28]
 8017daa:	429a      	cmp	r2, r3
 8017dac:	d006      	beq.n	8017dbc <tcp_output_segment+0x16c>
 8017dae:	4b10      	ldr	r3, [pc, #64]	; (8017df0 <tcp_output_segment+0x1a0>)
 8017db0:	f240 621c 	movw	r2, #1564	; 0x61c
 8017db4:	4914      	ldr	r1, [pc, #80]	; (8017e08 <tcp_output_segment+0x1b8>)
 8017db6:	4810      	ldr	r0, [pc, #64]	; (8017df8 <tcp_output_segment+0x1a8>)
 8017db8:	f003 fdec 	bl	801b994 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	6858      	ldr	r0, [r3, #4]
 8017dc0:	68b9      	ldr	r1, [r7, #8]
 8017dc2:	68bb      	ldr	r3, [r7, #8]
 8017dc4:	1d1c      	adds	r4, r3, #4
 8017dc6:	68bb      	ldr	r3, [r7, #8]
 8017dc8:	7add      	ldrb	r5, [r3, #11]
 8017dca:	68bb      	ldr	r3, [r7, #8]
 8017dcc:	7a9b      	ldrb	r3, [r3, #10]
 8017dce:	687a      	ldr	r2, [r7, #4]
 8017dd0:	9202      	str	r2, [sp, #8]
 8017dd2:	2206      	movs	r2, #6
 8017dd4:	9201      	str	r2, [sp, #4]
 8017dd6:	9300      	str	r3, [sp, #0]
 8017dd8:	462b      	mov	r3, r5
 8017dda:	4622      	mov	r2, r4
 8017ddc:	f002 fbac 	bl	801a538 <ip4_output_if>
 8017de0:	4603      	mov	r3, r0
 8017de2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8017de4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017de8:	4618      	mov	r0, r3
 8017dea:	3720      	adds	r7, #32
 8017dec:	46bd      	mov	sp, r7
 8017dee:	bdb0      	pop	{r4, r5, r7, pc}
 8017df0:	0801f298 	.word	0x0801f298
 8017df4:	0801f85c 	.word	0x0801f85c
 8017df8:	0801f2ec 	.word	0x0801f2ec
 8017dfc:	0801f87c 	.word	0x0801f87c
 8017e00:	0801f89c 	.word	0x0801f89c
 8017e04:	2001108c 	.word	0x2001108c
 8017e08:	0801f8c0 	.word	0x0801f8c0

08017e0c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8017e0c:	b5b0      	push	{r4, r5, r7, lr}
 8017e0e:	b084      	sub	sp, #16
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d106      	bne.n	8017e28 <tcp_rexmit_rto_prepare+0x1c>
 8017e1a:	4b31      	ldr	r3, [pc, #196]	; (8017ee0 <tcp_rexmit_rto_prepare+0xd4>)
 8017e1c:	f240 6263 	movw	r2, #1635	; 0x663
 8017e20:	4930      	ldr	r1, [pc, #192]	; (8017ee4 <tcp_rexmit_rto_prepare+0xd8>)
 8017e22:	4831      	ldr	r0, [pc, #196]	; (8017ee8 <tcp_rexmit_rto_prepare+0xdc>)
 8017e24:	f003 fdb6 	bl	801b994 <iprintf>

  if (pcb->unacked == NULL) {
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d102      	bne.n	8017e36 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8017e30:	f06f 0305 	mvn.w	r3, #5
 8017e34:	e050      	b.n	8017ed8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017e3a:	60fb      	str	r3, [r7, #12]
 8017e3c:	e00b      	b.n	8017e56 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8017e3e:	68f8      	ldr	r0, [r7, #12]
 8017e40:	f7ff fee6 	bl	8017c10 <tcp_output_segment_busy>
 8017e44:	4603      	mov	r3, r0
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d002      	beq.n	8017e50 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8017e4a:	f06f 0305 	mvn.w	r3, #5
 8017e4e:	e043      	b.n	8017ed8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017e50:	68fb      	ldr	r3, [r7, #12]
 8017e52:	681b      	ldr	r3, [r3, #0]
 8017e54:	60fb      	str	r3, [r7, #12]
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	681b      	ldr	r3, [r3, #0]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d1ef      	bne.n	8017e3e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8017e5e:	68f8      	ldr	r0, [r7, #12]
 8017e60:	f7ff fed6 	bl	8017c10 <tcp_output_segment_busy>
 8017e64:	4603      	mov	r3, r0
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d002      	beq.n	8017e70 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8017e6a:	f06f 0305 	mvn.w	r3, #5
 8017e6e:	e033      	b.n	8017ed8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	2200      	movs	r2, #0
 8017e84:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	8b5b      	ldrh	r3, [r3, #26]
 8017e8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8017e8e:	b29a      	uxth	r2, r3
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	68db      	ldr	r3, [r3, #12]
 8017e98:	685b      	ldr	r3, [r3, #4]
 8017e9a:	4618      	mov	r0, r3
 8017e9c:	f7f8 fdd5 	bl	8010a4a <lwip_htonl>
 8017ea0:	4604      	mov	r4, r0
 8017ea2:	68fb      	ldr	r3, [r7, #12]
 8017ea4:	891b      	ldrh	r3, [r3, #8]
 8017ea6:	461d      	mov	r5, r3
 8017ea8:	68fb      	ldr	r3, [r7, #12]
 8017eaa:	68db      	ldr	r3, [r3, #12]
 8017eac:	899b      	ldrh	r3, [r3, #12]
 8017eae:	b29b      	uxth	r3, r3
 8017eb0:	4618      	mov	r0, r3
 8017eb2:	f7f8 fdb5 	bl	8010a20 <lwip_htons>
 8017eb6:	4603      	mov	r3, r0
 8017eb8:	b2db      	uxtb	r3, r3
 8017eba:	f003 0303 	and.w	r3, r3, #3
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d001      	beq.n	8017ec6 <tcp_rexmit_rto_prepare+0xba>
 8017ec2:	2301      	movs	r3, #1
 8017ec4:	e000      	b.n	8017ec8 <tcp_rexmit_rto_prepare+0xbc>
 8017ec6:	2300      	movs	r3, #0
 8017ec8:	442b      	add	r3, r5
 8017eca:	18e2      	adds	r2, r4, r3
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	2200      	movs	r2, #0
 8017ed4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8017ed6:	2300      	movs	r3, #0
}
 8017ed8:	4618      	mov	r0, r3
 8017eda:	3710      	adds	r7, #16
 8017edc:	46bd      	mov	sp, r7
 8017ede:	bdb0      	pop	{r4, r5, r7, pc}
 8017ee0:	0801f298 	.word	0x0801f298
 8017ee4:	0801f8d4 	.word	0x0801f8d4
 8017ee8:	0801f2ec 	.word	0x0801f2ec

08017eec <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8017eec:	b580      	push	{r7, lr}
 8017eee:	b082      	sub	sp, #8
 8017ef0:	af00      	add	r7, sp, #0
 8017ef2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d106      	bne.n	8017f08 <tcp_rexmit_rto_commit+0x1c>
 8017efa:	4b0d      	ldr	r3, [pc, #52]	; (8017f30 <tcp_rexmit_rto_commit+0x44>)
 8017efc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8017f00:	490c      	ldr	r1, [pc, #48]	; (8017f34 <tcp_rexmit_rto_commit+0x48>)
 8017f02:	480d      	ldr	r0, [pc, #52]	; (8017f38 <tcp_rexmit_rto_commit+0x4c>)
 8017f04:	f003 fd46 	bl	801b994 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017f0e:	2bff      	cmp	r3, #255	; 0xff
 8017f10:	d007      	beq.n	8017f22 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017f18:	3301      	adds	r3, #1
 8017f1a:	b2da      	uxtb	r2, r3
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8017f22:	6878      	ldr	r0, [r7, #4]
 8017f24:	f7ff fc80 	bl	8017828 <tcp_output>
}
 8017f28:	bf00      	nop
 8017f2a:	3708      	adds	r7, #8
 8017f2c:	46bd      	mov	sp, r7
 8017f2e:	bd80      	pop	{r7, pc}
 8017f30:	0801f298 	.word	0x0801f298
 8017f34:	0801f8f8 	.word	0x0801f8f8
 8017f38:	0801f2ec 	.word	0x0801f2ec

08017f3c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8017f3c:	b580      	push	{r7, lr}
 8017f3e:	b082      	sub	sp, #8
 8017f40:	af00      	add	r7, sp, #0
 8017f42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d106      	bne.n	8017f58 <tcp_rexmit_rto+0x1c>
 8017f4a:	4b0a      	ldr	r3, [pc, #40]	; (8017f74 <tcp_rexmit_rto+0x38>)
 8017f4c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8017f50:	4909      	ldr	r1, [pc, #36]	; (8017f78 <tcp_rexmit_rto+0x3c>)
 8017f52:	480a      	ldr	r0, [pc, #40]	; (8017f7c <tcp_rexmit_rto+0x40>)
 8017f54:	f003 fd1e 	bl	801b994 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8017f58:	6878      	ldr	r0, [r7, #4]
 8017f5a:	f7ff ff57 	bl	8017e0c <tcp_rexmit_rto_prepare>
 8017f5e:	4603      	mov	r3, r0
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d102      	bne.n	8017f6a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017f64:	6878      	ldr	r0, [r7, #4]
 8017f66:	f7ff ffc1 	bl	8017eec <tcp_rexmit_rto_commit>
  }
}
 8017f6a:	bf00      	nop
 8017f6c:	3708      	adds	r7, #8
 8017f6e:	46bd      	mov	sp, r7
 8017f70:	bd80      	pop	{r7, pc}
 8017f72:	bf00      	nop
 8017f74:	0801f298 	.word	0x0801f298
 8017f78:	0801f91c 	.word	0x0801f91c
 8017f7c:	0801f2ec 	.word	0x0801f2ec

08017f80 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8017f80:	b590      	push	{r4, r7, lr}
 8017f82:	b085      	sub	sp, #20
 8017f84:	af00      	add	r7, sp, #0
 8017f86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d106      	bne.n	8017f9c <tcp_rexmit+0x1c>
 8017f8e:	4b2f      	ldr	r3, [pc, #188]	; (801804c <tcp_rexmit+0xcc>)
 8017f90:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8017f94:	492e      	ldr	r1, [pc, #184]	; (8018050 <tcp_rexmit+0xd0>)
 8017f96:	482f      	ldr	r0, [pc, #188]	; (8018054 <tcp_rexmit+0xd4>)
 8017f98:	f003 fcfc 	bl	801b994 <iprintf>

  if (pcb->unacked == NULL) {
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d102      	bne.n	8017faa <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017fa4:	f06f 0305 	mvn.w	r3, #5
 8017fa8:	e04c      	b.n	8018044 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017fae:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8017fb0:	68b8      	ldr	r0, [r7, #8]
 8017fb2:	f7ff fe2d 	bl	8017c10 <tcp_output_segment_busy>
 8017fb6:	4603      	mov	r3, r0
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d002      	beq.n	8017fc2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8017fbc:	f06f 0305 	mvn.w	r3, #5
 8017fc0:	e040      	b.n	8018044 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8017fc2:	68bb      	ldr	r3, [r7, #8]
 8017fc4:	681a      	ldr	r2, [r3, #0]
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	336c      	adds	r3, #108	; 0x6c
 8017fce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017fd0:	e002      	b.n	8017fd8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8017fd2:	68fb      	ldr	r3, [r7, #12]
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017fd8:	68fb      	ldr	r3, [r7, #12]
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d011      	beq.n	8018004 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017fe0:	68fb      	ldr	r3, [r7, #12]
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	68db      	ldr	r3, [r3, #12]
 8017fe6:	685b      	ldr	r3, [r3, #4]
 8017fe8:	4618      	mov	r0, r3
 8017fea:	f7f8 fd2e 	bl	8010a4a <lwip_htonl>
 8017fee:	4604      	mov	r4, r0
 8017ff0:	68bb      	ldr	r3, [r7, #8]
 8017ff2:	68db      	ldr	r3, [r3, #12]
 8017ff4:	685b      	ldr	r3, [r3, #4]
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	f7f8 fd27 	bl	8010a4a <lwip_htonl>
 8017ffc:	4603      	mov	r3, r0
 8017ffe:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8018000:	2b00      	cmp	r3, #0
 8018002:	dbe6      	blt.n	8017fd2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8018004:	68fb      	ldr	r3, [r7, #12]
 8018006:	681a      	ldr	r2, [r3, #0]
 8018008:	68bb      	ldr	r3, [r7, #8]
 801800a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801800c:	68fb      	ldr	r3, [r7, #12]
 801800e:	68ba      	ldr	r2, [r7, #8]
 8018010:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8018012:	68bb      	ldr	r3, [r7, #8]
 8018014:	681b      	ldr	r3, [r3, #0]
 8018016:	2b00      	cmp	r3, #0
 8018018:	d103      	bne.n	8018022 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	2200      	movs	r2, #0
 801801e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018028:	2bff      	cmp	r3, #255	; 0xff
 801802a:	d007      	beq.n	801803c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018032:	3301      	adds	r3, #1
 8018034:	b2da      	uxtb	r2, r3
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	2200      	movs	r2, #0
 8018040:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8018042:	2300      	movs	r3, #0
}
 8018044:	4618      	mov	r0, r3
 8018046:	3714      	adds	r7, #20
 8018048:	46bd      	mov	sp, r7
 801804a:	bd90      	pop	{r4, r7, pc}
 801804c:	0801f298 	.word	0x0801f298
 8018050:	0801f938 	.word	0x0801f938
 8018054:	0801f2ec 	.word	0x0801f2ec

08018058 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8018058:	b580      	push	{r7, lr}
 801805a:	b082      	sub	sp, #8
 801805c:	af00      	add	r7, sp, #0
 801805e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	2b00      	cmp	r3, #0
 8018064:	d106      	bne.n	8018074 <tcp_rexmit_fast+0x1c>
 8018066:	4b2a      	ldr	r3, [pc, #168]	; (8018110 <tcp_rexmit_fast+0xb8>)
 8018068:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801806c:	4929      	ldr	r1, [pc, #164]	; (8018114 <tcp_rexmit_fast+0xbc>)
 801806e:	482a      	ldr	r0, [pc, #168]	; (8018118 <tcp_rexmit_fast+0xc0>)
 8018070:	f003 fc90 	bl	801b994 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018078:	2b00      	cmp	r3, #0
 801807a:	d045      	beq.n	8018108 <tcp_rexmit_fast+0xb0>
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	8b5b      	ldrh	r3, [r3, #26]
 8018080:	f003 0304 	and.w	r3, r3, #4
 8018084:	2b00      	cmp	r3, #0
 8018086:	d13f      	bne.n	8018108 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8018088:	6878      	ldr	r0, [r7, #4]
 801808a:	f7ff ff79 	bl	8017f80 <tcp_rexmit>
 801808e:	4603      	mov	r3, r0
 8018090:	2b00      	cmp	r3, #0
 8018092:	d139      	bne.n	8018108 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80180a0:	4293      	cmp	r3, r2
 80180a2:	bf28      	it	cs
 80180a4:	4613      	movcs	r3, r2
 80180a6:	b29b      	uxth	r3, r3
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	da00      	bge.n	80180ae <tcp_rexmit_fast+0x56>
 80180ac:	3301      	adds	r3, #1
 80180ae:	105b      	asrs	r3, r3, #1
 80180b0:	b29a      	uxth	r2, r3
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80180be:	461a      	mov	r2, r3
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80180c4:	005b      	lsls	r3, r3, #1
 80180c6:	429a      	cmp	r2, r3
 80180c8:	d206      	bcs.n	80180d8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80180ce:	005b      	lsls	r3, r3, #1
 80180d0:	b29a      	uxth	r2, r3
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80180e2:	4619      	mov	r1, r3
 80180e4:	0049      	lsls	r1, r1, #1
 80180e6:	440b      	add	r3, r1
 80180e8:	b29b      	uxth	r3, r3
 80180ea:	4413      	add	r3, r2
 80180ec:	b29a      	uxth	r2, r3
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	8b5b      	ldrh	r3, [r3, #26]
 80180f8:	f043 0304 	orr.w	r3, r3, #4
 80180fc:	b29a      	uxth	r2, r3
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	2200      	movs	r2, #0
 8018106:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8018108:	bf00      	nop
 801810a:	3708      	adds	r7, #8
 801810c:	46bd      	mov	sp, r7
 801810e:	bd80      	pop	{r7, pc}
 8018110:	0801f298 	.word	0x0801f298
 8018114:	0801f950 	.word	0x0801f950
 8018118:	0801f2ec 	.word	0x0801f2ec

0801811c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801811c:	b580      	push	{r7, lr}
 801811e:	b086      	sub	sp, #24
 8018120:	af00      	add	r7, sp, #0
 8018122:	60f8      	str	r0, [r7, #12]
 8018124:	607b      	str	r3, [r7, #4]
 8018126:	460b      	mov	r3, r1
 8018128:	817b      	strh	r3, [r7, #10]
 801812a:	4613      	mov	r3, r2
 801812c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801812e:	897a      	ldrh	r2, [r7, #10]
 8018130:	893b      	ldrh	r3, [r7, #8]
 8018132:	4413      	add	r3, r2
 8018134:	b29b      	uxth	r3, r3
 8018136:	3314      	adds	r3, #20
 8018138:	b29b      	uxth	r3, r3
 801813a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801813e:	4619      	mov	r1, r3
 8018140:	2022      	movs	r0, #34	; 0x22
 8018142:	f7f9 fd7b 	bl	8011c3c <pbuf_alloc>
 8018146:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8018148:	697b      	ldr	r3, [r7, #20]
 801814a:	2b00      	cmp	r3, #0
 801814c:	d04d      	beq.n	80181ea <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801814e:	897b      	ldrh	r3, [r7, #10]
 8018150:	3313      	adds	r3, #19
 8018152:	697a      	ldr	r2, [r7, #20]
 8018154:	8952      	ldrh	r2, [r2, #10]
 8018156:	4293      	cmp	r3, r2
 8018158:	db06      	blt.n	8018168 <tcp_output_alloc_header_common+0x4c>
 801815a:	4b26      	ldr	r3, [pc, #152]	; (80181f4 <tcp_output_alloc_header_common+0xd8>)
 801815c:	f240 7223 	movw	r2, #1827	; 0x723
 8018160:	4925      	ldr	r1, [pc, #148]	; (80181f8 <tcp_output_alloc_header_common+0xdc>)
 8018162:	4826      	ldr	r0, [pc, #152]	; (80181fc <tcp_output_alloc_header_common+0xe0>)
 8018164:	f003 fc16 	bl	801b994 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8018168:	697b      	ldr	r3, [r7, #20]
 801816a:	685b      	ldr	r3, [r3, #4]
 801816c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801816e:	8c3b      	ldrh	r3, [r7, #32]
 8018170:	4618      	mov	r0, r3
 8018172:	f7f8 fc55 	bl	8010a20 <lwip_htons>
 8018176:	4603      	mov	r3, r0
 8018178:	461a      	mov	r2, r3
 801817a:	693b      	ldr	r3, [r7, #16]
 801817c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801817e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018180:	4618      	mov	r0, r3
 8018182:	f7f8 fc4d 	bl	8010a20 <lwip_htons>
 8018186:	4603      	mov	r3, r0
 8018188:	461a      	mov	r2, r3
 801818a:	693b      	ldr	r3, [r7, #16]
 801818c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801818e:	693b      	ldr	r3, [r7, #16]
 8018190:	687a      	ldr	r2, [r7, #4]
 8018192:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8018194:	68f8      	ldr	r0, [r7, #12]
 8018196:	f7f8 fc58 	bl	8010a4a <lwip_htonl>
 801819a:	4602      	mov	r2, r0
 801819c:	693b      	ldr	r3, [r7, #16]
 801819e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80181a0:	897b      	ldrh	r3, [r7, #10]
 80181a2:	089b      	lsrs	r3, r3, #2
 80181a4:	b29b      	uxth	r3, r3
 80181a6:	3305      	adds	r3, #5
 80181a8:	b29b      	uxth	r3, r3
 80181aa:	031b      	lsls	r3, r3, #12
 80181ac:	b29a      	uxth	r2, r3
 80181ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80181b2:	b29b      	uxth	r3, r3
 80181b4:	4313      	orrs	r3, r2
 80181b6:	b29b      	uxth	r3, r3
 80181b8:	4618      	mov	r0, r3
 80181ba:	f7f8 fc31 	bl	8010a20 <lwip_htons>
 80181be:	4603      	mov	r3, r0
 80181c0:	461a      	mov	r2, r3
 80181c2:	693b      	ldr	r3, [r7, #16]
 80181c4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80181c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80181c8:	4618      	mov	r0, r3
 80181ca:	f7f8 fc29 	bl	8010a20 <lwip_htons>
 80181ce:	4603      	mov	r3, r0
 80181d0:	461a      	mov	r2, r3
 80181d2:	693b      	ldr	r3, [r7, #16]
 80181d4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80181d6:	693b      	ldr	r3, [r7, #16]
 80181d8:	2200      	movs	r2, #0
 80181da:	741a      	strb	r2, [r3, #16]
 80181dc:	2200      	movs	r2, #0
 80181de:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80181e0:	693b      	ldr	r3, [r7, #16]
 80181e2:	2200      	movs	r2, #0
 80181e4:	749a      	strb	r2, [r3, #18]
 80181e6:	2200      	movs	r2, #0
 80181e8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80181ea:	697b      	ldr	r3, [r7, #20]
}
 80181ec:	4618      	mov	r0, r3
 80181ee:	3718      	adds	r7, #24
 80181f0:	46bd      	mov	sp, r7
 80181f2:	bd80      	pop	{r7, pc}
 80181f4:	0801f298 	.word	0x0801f298
 80181f8:	0801f970 	.word	0x0801f970
 80181fc:	0801f2ec 	.word	0x0801f2ec

08018200 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8018200:	b5b0      	push	{r4, r5, r7, lr}
 8018202:	b08a      	sub	sp, #40	; 0x28
 8018204:	af04      	add	r7, sp, #16
 8018206:	60f8      	str	r0, [r7, #12]
 8018208:	607b      	str	r3, [r7, #4]
 801820a:	460b      	mov	r3, r1
 801820c:	817b      	strh	r3, [r7, #10]
 801820e:	4613      	mov	r3, r2
 8018210:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8018212:	68fb      	ldr	r3, [r7, #12]
 8018214:	2b00      	cmp	r3, #0
 8018216:	d106      	bne.n	8018226 <tcp_output_alloc_header+0x26>
 8018218:	4b15      	ldr	r3, [pc, #84]	; (8018270 <tcp_output_alloc_header+0x70>)
 801821a:	f240 7242 	movw	r2, #1858	; 0x742
 801821e:	4915      	ldr	r1, [pc, #84]	; (8018274 <tcp_output_alloc_header+0x74>)
 8018220:	4815      	ldr	r0, [pc, #84]	; (8018278 <tcp_output_alloc_header+0x78>)
 8018222:	f003 fbb7 	bl	801b994 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8018226:	68fb      	ldr	r3, [r7, #12]
 8018228:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801822a:	68fb      	ldr	r3, [r7, #12]
 801822c:	8adb      	ldrh	r3, [r3, #22]
 801822e:	68fa      	ldr	r2, [r7, #12]
 8018230:	8b12      	ldrh	r2, [r2, #24]
 8018232:	68f9      	ldr	r1, [r7, #12]
 8018234:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8018236:	893d      	ldrh	r5, [r7, #8]
 8018238:	897c      	ldrh	r4, [r7, #10]
 801823a:	9103      	str	r1, [sp, #12]
 801823c:	2110      	movs	r1, #16
 801823e:	9102      	str	r1, [sp, #8]
 8018240:	9201      	str	r2, [sp, #4]
 8018242:	9300      	str	r3, [sp, #0]
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	462a      	mov	r2, r5
 8018248:	4621      	mov	r1, r4
 801824a:	f7ff ff67 	bl	801811c <tcp_output_alloc_header_common>
 801824e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8018250:	697b      	ldr	r3, [r7, #20]
 8018252:	2b00      	cmp	r3, #0
 8018254:	d006      	beq.n	8018264 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018256:	68fb      	ldr	r3, [r7, #12]
 8018258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801825a:	68fa      	ldr	r2, [r7, #12]
 801825c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801825e:	441a      	add	r2, r3
 8018260:	68fb      	ldr	r3, [r7, #12]
 8018262:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8018264:	697b      	ldr	r3, [r7, #20]
}
 8018266:	4618      	mov	r0, r3
 8018268:	3718      	adds	r7, #24
 801826a:	46bd      	mov	sp, r7
 801826c:	bdb0      	pop	{r4, r5, r7, pc}
 801826e:	bf00      	nop
 8018270:	0801f298 	.word	0x0801f298
 8018274:	0801f9a0 	.word	0x0801f9a0
 8018278:	0801f2ec 	.word	0x0801f2ec

0801827c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801827c:	b580      	push	{r7, lr}
 801827e:	b088      	sub	sp, #32
 8018280:	af00      	add	r7, sp, #0
 8018282:	60f8      	str	r0, [r7, #12]
 8018284:	60b9      	str	r1, [r7, #8]
 8018286:	4611      	mov	r1, r2
 8018288:	461a      	mov	r2, r3
 801828a:	460b      	mov	r3, r1
 801828c:	71fb      	strb	r3, [r7, #7]
 801828e:	4613      	mov	r3, r2
 8018290:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8018292:	2300      	movs	r3, #0
 8018294:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8018296:	68bb      	ldr	r3, [r7, #8]
 8018298:	2b00      	cmp	r3, #0
 801829a:	d106      	bne.n	80182aa <tcp_output_fill_options+0x2e>
 801829c:	4b13      	ldr	r3, [pc, #76]	; (80182ec <tcp_output_fill_options+0x70>)
 801829e:	f240 7256 	movw	r2, #1878	; 0x756
 80182a2:	4913      	ldr	r1, [pc, #76]	; (80182f0 <tcp_output_fill_options+0x74>)
 80182a4:	4813      	ldr	r0, [pc, #76]	; (80182f4 <tcp_output_fill_options+0x78>)
 80182a6:	f003 fb75 	bl	801b994 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80182aa:	68bb      	ldr	r3, [r7, #8]
 80182ac:	685b      	ldr	r3, [r3, #4]
 80182ae:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80182b0:	69bb      	ldr	r3, [r7, #24]
 80182b2:	3314      	adds	r3, #20
 80182b4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80182b6:	69bb      	ldr	r3, [r7, #24]
 80182b8:	f103 0214 	add.w	r2, r3, #20
 80182bc:	8bfb      	ldrh	r3, [r7, #30]
 80182be:	009b      	lsls	r3, r3, #2
 80182c0:	4619      	mov	r1, r3
 80182c2:	79fb      	ldrb	r3, [r7, #7]
 80182c4:	009b      	lsls	r3, r3, #2
 80182c6:	f003 0304 	and.w	r3, r3, #4
 80182ca:	440b      	add	r3, r1
 80182cc:	4413      	add	r3, r2
 80182ce:	697a      	ldr	r2, [r7, #20]
 80182d0:	429a      	cmp	r2, r3
 80182d2:	d006      	beq.n	80182e2 <tcp_output_fill_options+0x66>
 80182d4:	4b05      	ldr	r3, [pc, #20]	; (80182ec <tcp_output_fill_options+0x70>)
 80182d6:	f240 7275 	movw	r2, #1909	; 0x775
 80182da:	4907      	ldr	r1, [pc, #28]	; (80182f8 <tcp_output_fill_options+0x7c>)
 80182dc:	4805      	ldr	r0, [pc, #20]	; (80182f4 <tcp_output_fill_options+0x78>)
 80182de:	f003 fb59 	bl	801b994 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80182e2:	bf00      	nop
 80182e4:	3720      	adds	r7, #32
 80182e6:	46bd      	mov	sp, r7
 80182e8:	bd80      	pop	{r7, pc}
 80182ea:	bf00      	nop
 80182ec:	0801f298 	.word	0x0801f298
 80182f0:	0801f9c8 	.word	0x0801f9c8
 80182f4:	0801f2ec 	.word	0x0801f2ec
 80182f8:	0801f8c0 	.word	0x0801f8c0

080182fc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80182fc:	b580      	push	{r7, lr}
 80182fe:	b08a      	sub	sp, #40	; 0x28
 8018300:	af04      	add	r7, sp, #16
 8018302:	60f8      	str	r0, [r7, #12]
 8018304:	60b9      	str	r1, [r7, #8]
 8018306:	607a      	str	r2, [r7, #4]
 8018308:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801830a:	68bb      	ldr	r3, [r7, #8]
 801830c:	2b00      	cmp	r3, #0
 801830e:	d106      	bne.n	801831e <tcp_output_control_segment+0x22>
 8018310:	4b1c      	ldr	r3, [pc, #112]	; (8018384 <tcp_output_control_segment+0x88>)
 8018312:	f240 7287 	movw	r2, #1927	; 0x787
 8018316:	491c      	ldr	r1, [pc, #112]	; (8018388 <tcp_output_control_segment+0x8c>)
 8018318:	481c      	ldr	r0, [pc, #112]	; (801838c <tcp_output_control_segment+0x90>)
 801831a:	f003 fb3b 	bl	801b994 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801831e:	683a      	ldr	r2, [r7, #0]
 8018320:	6879      	ldr	r1, [r7, #4]
 8018322:	68f8      	ldr	r0, [r7, #12]
 8018324:	f7fe fae8 	bl	80168f8 <tcp_route>
 8018328:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801832a:	693b      	ldr	r3, [r7, #16]
 801832c:	2b00      	cmp	r3, #0
 801832e:	d102      	bne.n	8018336 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8018330:	23fc      	movs	r3, #252	; 0xfc
 8018332:	75fb      	strb	r3, [r7, #23]
 8018334:	e01c      	b.n	8018370 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8018336:	68fb      	ldr	r3, [r7, #12]
 8018338:	2b00      	cmp	r3, #0
 801833a:	d006      	beq.n	801834a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801833c:	68fb      	ldr	r3, [r7, #12]
 801833e:	7adb      	ldrb	r3, [r3, #11]
 8018340:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8018342:	68fb      	ldr	r3, [r7, #12]
 8018344:	7a9b      	ldrb	r3, [r3, #10]
 8018346:	757b      	strb	r3, [r7, #21]
 8018348:	e003      	b.n	8018352 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801834a:	23ff      	movs	r3, #255	; 0xff
 801834c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801834e:	2300      	movs	r3, #0
 8018350:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8018352:	7dba      	ldrb	r2, [r7, #22]
 8018354:	693b      	ldr	r3, [r7, #16]
 8018356:	9302      	str	r3, [sp, #8]
 8018358:	2306      	movs	r3, #6
 801835a:	9301      	str	r3, [sp, #4]
 801835c:	7d7b      	ldrb	r3, [r7, #21]
 801835e:	9300      	str	r3, [sp, #0]
 8018360:	4613      	mov	r3, r2
 8018362:	683a      	ldr	r2, [r7, #0]
 8018364:	6879      	ldr	r1, [r7, #4]
 8018366:	68b8      	ldr	r0, [r7, #8]
 8018368:	f002 f8e6 	bl	801a538 <ip4_output_if>
 801836c:	4603      	mov	r3, r0
 801836e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8018370:	68b8      	ldr	r0, [r7, #8]
 8018372:	f7f9 ff79 	bl	8012268 <pbuf_free>
  return err;
 8018376:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801837a:	4618      	mov	r0, r3
 801837c:	3718      	adds	r7, #24
 801837e:	46bd      	mov	sp, r7
 8018380:	bd80      	pop	{r7, pc}
 8018382:	bf00      	nop
 8018384:	0801f298 	.word	0x0801f298
 8018388:	0801f9f0 	.word	0x0801f9f0
 801838c:	0801f2ec 	.word	0x0801f2ec

08018390 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8018390:	b590      	push	{r4, r7, lr}
 8018392:	b08b      	sub	sp, #44	; 0x2c
 8018394:	af04      	add	r7, sp, #16
 8018396:	60f8      	str	r0, [r7, #12]
 8018398:	60b9      	str	r1, [r7, #8]
 801839a:	607a      	str	r2, [r7, #4]
 801839c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801839e:	683b      	ldr	r3, [r7, #0]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d106      	bne.n	80183b2 <tcp_rst+0x22>
 80183a4:	4b1f      	ldr	r3, [pc, #124]	; (8018424 <tcp_rst+0x94>)
 80183a6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80183aa:	491f      	ldr	r1, [pc, #124]	; (8018428 <tcp_rst+0x98>)
 80183ac:	481f      	ldr	r0, [pc, #124]	; (801842c <tcp_rst+0x9c>)
 80183ae:	f003 faf1 	bl	801b994 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80183b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d106      	bne.n	80183c6 <tcp_rst+0x36>
 80183b8:	4b1a      	ldr	r3, [pc, #104]	; (8018424 <tcp_rst+0x94>)
 80183ba:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80183be:	491c      	ldr	r1, [pc, #112]	; (8018430 <tcp_rst+0xa0>)
 80183c0:	481a      	ldr	r0, [pc, #104]	; (801842c <tcp_rst+0x9c>)
 80183c2:	f003 fae7 	bl	801b994 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80183c6:	2300      	movs	r3, #0
 80183c8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80183ca:	f246 0308 	movw	r3, #24584	; 0x6008
 80183ce:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80183d0:	7dfb      	ldrb	r3, [r7, #23]
 80183d2:	b29c      	uxth	r4, r3
 80183d4:	68b8      	ldr	r0, [r7, #8]
 80183d6:	f7f8 fb38 	bl	8010a4a <lwip_htonl>
 80183da:	4602      	mov	r2, r0
 80183dc:	8abb      	ldrh	r3, [r7, #20]
 80183de:	9303      	str	r3, [sp, #12]
 80183e0:	2314      	movs	r3, #20
 80183e2:	9302      	str	r3, [sp, #8]
 80183e4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80183e6:	9301      	str	r3, [sp, #4]
 80183e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80183ea:	9300      	str	r3, [sp, #0]
 80183ec:	4613      	mov	r3, r2
 80183ee:	2200      	movs	r2, #0
 80183f0:	4621      	mov	r1, r4
 80183f2:	6878      	ldr	r0, [r7, #4]
 80183f4:	f7ff fe92 	bl	801811c <tcp_output_alloc_header_common>
 80183f8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80183fa:	693b      	ldr	r3, [r7, #16]
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d00c      	beq.n	801841a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018400:	7dfb      	ldrb	r3, [r7, #23]
 8018402:	2200      	movs	r2, #0
 8018404:	6939      	ldr	r1, [r7, #16]
 8018406:	68f8      	ldr	r0, [r7, #12]
 8018408:	f7ff ff38 	bl	801827c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801840c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801840e:	683a      	ldr	r2, [r7, #0]
 8018410:	6939      	ldr	r1, [r7, #16]
 8018412:	68f8      	ldr	r0, [r7, #12]
 8018414:	f7ff ff72 	bl	80182fc <tcp_output_control_segment>
 8018418:	e000      	b.n	801841c <tcp_rst+0x8c>
    return;
 801841a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801841c:	371c      	adds	r7, #28
 801841e:	46bd      	mov	sp, r7
 8018420:	bd90      	pop	{r4, r7, pc}
 8018422:	bf00      	nop
 8018424:	0801f298 	.word	0x0801f298
 8018428:	0801fa1c 	.word	0x0801fa1c
 801842c:	0801f2ec 	.word	0x0801f2ec
 8018430:	0801fa38 	.word	0x0801fa38

08018434 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8018434:	b590      	push	{r4, r7, lr}
 8018436:	b087      	sub	sp, #28
 8018438:	af00      	add	r7, sp, #0
 801843a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801843c:	2300      	movs	r3, #0
 801843e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8018440:	2300      	movs	r3, #0
 8018442:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	2b00      	cmp	r3, #0
 8018448:	d106      	bne.n	8018458 <tcp_send_empty_ack+0x24>
 801844a:	4b28      	ldr	r3, [pc, #160]	; (80184ec <tcp_send_empty_ack+0xb8>)
 801844c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8018450:	4927      	ldr	r1, [pc, #156]	; (80184f0 <tcp_send_empty_ack+0xbc>)
 8018452:	4828      	ldr	r0, [pc, #160]	; (80184f4 <tcp_send_empty_ack+0xc0>)
 8018454:	f003 fa9e 	bl	801b994 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018458:	7dfb      	ldrb	r3, [r7, #23]
 801845a:	009b      	lsls	r3, r3, #2
 801845c:	b2db      	uxtb	r3, r3
 801845e:	f003 0304 	and.w	r3, r3, #4
 8018462:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8018464:	7d7b      	ldrb	r3, [r7, #21]
 8018466:	b29c      	uxth	r4, r3
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801846c:	4618      	mov	r0, r3
 801846e:	f7f8 faec 	bl	8010a4a <lwip_htonl>
 8018472:	4603      	mov	r3, r0
 8018474:	2200      	movs	r2, #0
 8018476:	4621      	mov	r1, r4
 8018478:	6878      	ldr	r0, [r7, #4]
 801847a:	f7ff fec1 	bl	8018200 <tcp_output_alloc_header>
 801847e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018480:	693b      	ldr	r3, [r7, #16]
 8018482:	2b00      	cmp	r3, #0
 8018484:	d109      	bne.n	801849a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	8b5b      	ldrh	r3, [r3, #26]
 801848a:	f043 0303 	orr.w	r3, r3, #3
 801848e:	b29a      	uxth	r2, r3
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8018494:	f06f 0301 	mvn.w	r3, #1
 8018498:	e023      	b.n	80184e2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801849a:	7dbb      	ldrb	r3, [r7, #22]
 801849c:	7dfa      	ldrb	r2, [r7, #23]
 801849e:	6939      	ldr	r1, [r7, #16]
 80184a0:	6878      	ldr	r0, [r7, #4]
 80184a2:	f7ff feeb 	bl	801827c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80184a6:	687a      	ldr	r2, [r7, #4]
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	3304      	adds	r3, #4
 80184ac:	6939      	ldr	r1, [r7, #16]
 80184ae:	6878      	ldr	r0, [r7, #4]
 80184b0:	f7ff ff24 	bl	80182fc <tcp_output_control_segment>
 80184b4:	4603      	mov	r3, r0
 80184b6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80184b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d007      	beq.n	80184d0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	8b5b      	ldrh	r3, [r3, #26]
 80184c4:	f043 0303 	orr.w	r3, r3, #3
 80184c8:	b29a      	uxth	r2, r3
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	835a      	strh	r2, [r3, #26]
 80184ce:	e006      	b.n	80184de <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	8b5b      	ldrh	r3, [r3, #26]
 80184d4:	f023 0303 	bic.w	r3, r3, #3
 80184d8:	b29a      	uxth	r2, r3
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80184de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80184e2:	4618      	mov	r0, r3
 80184e4:	371c      	adds	r7, #28
 80184e6:	46bd      	mov	sp, r7
 80184e8:	bd90      	pop	{r4, r7, pc}
 80184ea:	bf00      	nop
 80184ec:	0801f298 	.word	0x0801f298
 80184f0:	0801fa54 	.word	0x0801fa54
 80184f4:	0801f2ec 	.word	0x0801f2ec

080184f8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80184f8:	b590      	push	{r4, r7, lr}
 80184fa:	b087      	sub	sp, #28
 80184fc:	af00      	add	r7, sp, #0
 80184fe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018500:	2300      	movs	r3, #0
 8018502:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	2b00      	cmp	r3, #0
 8018508:	d106      	bne.n	8018518 <tcp_keepalive+0x20>
 801850a:	4b18      	ldr	r3, [pc, #96]	; (801856c <tcp_keepalive+0x74>)
 801850c:	f640 0224 	movw	r2, #2084	; 0x824
 8018510:	4917      	ldr	r1, [pc, #92]	; (8018570 <tcp_keepalive+0x78>)
 8018512:	4818      	ldr	r0, [pc, #96]	; (8018574 <tcp_keepalive+0x7c>)
 8018514:	f003 fa3e 	bl	801b994 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8018518:	7dfb      	ldrb	r3, [r7, #23]
 801851a:	b29c      	uxth	r4, r3
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018520:	3b01      	subs	r3, #1
 8018522:	4618      	mov	r0, r3
 8018524:	f7f8 fa91 	bl	8010a4a <lwip_htonl>
 8018528:	4603      	mov	r3, r0
 801852a:	2200      	movs	r2, #0
 801852c:	4621      	mov	r1, r4
 801852e:	6878      	ldr	r0, [r7, #4]
 8018530:	f7ff fe66 	bl	8018200 <tcp_output_alloc_header>
 8018534:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018536:	693b      	ldr	r3, [r7, #16]
 8018538:	2b00      	cmp	r3, #0
 801853a:	d102      	bne.n	8018542 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801853c:	f04f 33ff 	mov.w	r3, #4294967295
 8018540:	e010      	b.n	8018564 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018542:	7dfb      	ldrb	r3, [r7, #23]
 8018544:	2200      	movs	r2, #0
 8018546:	6939      	ldr	r1, [r7, #16]
 8018548:	6878      	ldr	r0, [r7, #4]
 801854a:	f7ff fe97 	bl	801827c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801854e:	687a      	ldr	r2, [r7, #4]
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	3304      	adds	r3, #4
 8018554:	6939      	ldr	r1, [r7, #16]
 8018556:	6878      	ldr	r0, [r7, #4]
 8018558:	f7ff fed0 	bl	80182fc <tcp_output_control_segment>
 801855c:	4603      	mov	r3, r0
 801855e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018560:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018564:	4618      	mov	r0, r3
 8018566:	371c      	adds	r7, #28
 8018568:	46bd      	mov	sp, r7
 801856a:	bd90      	pop	{r4, r7, pc}
 801856c:	0801f298 	.word	0x0801f298
 8018570:	0801fa74 	.word	0x0801fa74
 8018574:	0801f2ec 	.word	0x0801f2ec

08018578 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8018578:	b590      	push	{r4, r7, lr}
 801857a:	b08b      	sub	sp, #44	; 0x2c
 801857c:	af00      	add	r7, sp, #0
 801857e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018580:	2300      	movs	r3, #0
 8018582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	2b00      	cmp	r3, #0
 801858a:	d106      	bne.n	801859a <tcp_zero_window_probe+0x22>
 801858c:	4b4c      	ldr	r3, [pc, #304]	; (80186c0 <tcp_zero_window_probe+0x148>)
 801858e:	f640 024f 	movw	r2, #2127	; 0x84f
 8018592:	494c      	ldr	r1, [pc, #304]	; (80186c4 <tcp_zero_window_probe+0x14c>)
 8018594:	484c      	ldr	r0, [pc, #304]	; (80186c8 <tcp_zero_window_probe+0x150>)
 8018596:	f003 f9fd 	bl	801b994 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801859e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80185a0:	6a3b      	ldr	r3, [r7, #32]
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d101      	bne.n	80185aa <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80185a6:	2300      	movs	r3, #0
 80185a8:	e086      	b.n	80186b8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80185b0:	2bff      	cmp	r3, #255	; 0xff
 80185b2:	d007      	beq.n	80185c4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80185ba:	3301      	adds	r3, #1
 80185bc:	b2da      	uxtb	r2, r3
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80185c4:	6a3b      	ldr	r3, [r7, #32]
 80185c6:	68db      	ldr	r3, [r3, #12]
 80185c8:	899b      	ldrh	r3, [r3, #12]
 80185ca:	b29b      	uxth	r3, r3
 80185cc:	4618      	mov	r0, r3
 80185ce:	f7f8 fa27 	bl	8010a20 <lwip_htons>
 80185d2:	4603      	mov	r3, r0
 80185d4:	b2db      	uxtb	r3, r3
 80185d6:	f003 0301 	and.w	r3, r3, #1
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d005      	beq.n	80185ea <tcp_zero_window_probe+0x72>
 80185de:	6a3b      	ldr	r3, [r7, #32]
 80185e0:	891b      	ldrh	r3, [r3, #8]
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d101      	bne.n	80185ea <tcp_zero_window_probe+0x72>
 80185e6:	2301      	movs	r3, #1
 80185e8:	e000      	b.n	80185ec <tcp_zero_window_probe+0x74>
 80185ea:	2300      	movs	r3, #0
 80185ec:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80185ee:	7ffb      	ldrb	r3, [r7, #31]
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	bf0c      	ite	eq
 80185f4:	2301      	moveq	r3, #1
 80185f6:	2300      	movne	r3, #0
 80185f8:	b2db      	uxtb	r3, r3
 80185fa:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80185fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018600:	b299      	uxth	r1, r3
 8018602:	6a3b      	ldr	r3, [r7, #32]
 8018604:	68db      	ldr	r3, [r3, #12]
 8018606:	685b      	ldr	r3, [r3, #4]
 8018608:	8bba      	ldrh	r2, [r7, #28]
 801860a:	6878      	ldr	r0, [r7, #4]
 801860c:	f7ff fdf8 	bl	8018200 <tcp_output_alloc_header>
 8018610:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8018612:	69bb      	ldr	r3, [r7, #24]
 8018614:	2b00      	cmp	r3, #0
 8018616:	d102      	bne.n	801861e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8018618:	f04f 33ff 	mov.w	r3, #4294967295
 801861c:	e04c      	b.n	80186b8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801861e:	69bb      	ldr	r3, [r7, #24]
 8018620:	685b      	ldr	r3, [r3, #4]
 8018622:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8018624:	7ffb      	ldrb	r3, [r7, #31]
 8018626:	2b00      	cmp	r3, #0
 8018628:	d011      	beq.n	801864e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801862a:	697b      	ldr	r3, [r7, #20]
 801862c:	899b      	ldrh	r3, [r3, #12]
 801862e:	b29b      	uxth	r3, r3
 8018630:	b21b      	sxth	r3, r3
 8018632:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018636:	b21c      	sxth	r4, r3
 8018638:	2011      	movs	r0, #17
 801863a:	f7f8 f9f1 	bl	8010a20 <lwip_htons>
 801863e:	4603      	mov	r3, r0
 8018640:	b21b      	sxth	r3, r3
 8018642:	4323      	orrs	r3, r4
 8018644:	b21b      	sxth	r3, r3
 8018646:	b29a      	uxth	r2, r3
 8018648:	697b      	ldr	r3, [r7, #20]
 801864a:	819a      	strh	r2, [r3, #12]
 801864c:	e010      	b.n	8018670 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801864e:	69bb      	ldr	r3, [r7, #24]
 8018650:	685b      	ldr	r3, [r3, #4]
 8018652:	3314      	adds	r3, #20
 8018654:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8018656:	6a3b      	ldr	r3, [r7, #32]
 8018658:	6858      	ldr	r0, [r3, #4]
 801865a:	6a3b      	ldr	r3, [r7, #32]
 801865c:	685b      	ldr	r3, [r3, #4]
 801865e:	891a      	ldrh	r2, [r3, #8]
 8018660:	6a3b      	ldr	r3, [r7, #32]
 8018662:	891b      	ldrh	r3, [r3, #8]
 8018664:	1ad3      	subs	r3, r2, r3
 8018666:	b29b      	uxth	r3, r3
 8018668:	2201      	movs	r2, #1
 801866a:	6939      	ldr	r1, [r7, #16]
 801866c:	f7f9 fff2 	bl	8012654 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8018670:	6a3b      	ldr	r3, [r7, #32]
 8018672:	68db      	ldr	r3, [r3, #12]
 8018674:	685b      	ldr	r3, [r3, #4]
 8018676:	4618      	mov	r0, r3
 8018678:	f7f8 f9e7 	bl	8010a4a <lwip_htonl>
 801867c:	4603      	mov	r3, r0
 801867e:	3301      	adds	r3, #1
 8018680:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	1ad3      	subs	r3, r2, r3
 801868a:	2b00      	cmp	r3, #0
 801868c:	da02      	bge.n	8018694 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	68fa      	ldr	r2, [r7, #12]
 8018692:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018698:	2200      	movs	r2, #0
 801869a:	69b9      	ldr	r1, [r7, #24]
 801869c:	6878      	ldr	r0, [r7, #4]
 801869e:	f7ff fded 	bl	801827c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80186a2:	687a      	ldr	r2, [r7, #4]
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	3304      	adds	r3, #4
 80186a8:	69b9      	ldr	r1, [r7, #24]
 80186aa:	6878      	ldr	r0, [r7, #4]
 80186ac:	f7ff fe26 	bl	80182fc <tcp_output_control_segment>
 80186b0:	4603      	mov	r3, r0
 80186b2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80186b4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80186b8:	4618      	mov	r0, r3
 80186ba:	372c      	adds	r7, #44	; 0x2c
 80186bc:	46bd      	mov	sp, r7
 80186be:	bd90      	pop	{r4, r7, pc}
 80186c0:	0801f298 	.word	0x0801f298
 80186c4:	0801fa90 	.word	0x0801fa90
 80186c8:	0801f2ec 	.word	0x0801f2ec

080186cc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80186cc:	b580      	push	{r7, lr}
 80186ce:	b082      	sub	sp, #8
 80186d0:	af00      	add	r7, sp, #0
 80186d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80186d4:	f7fa f8ac 	bl	8012830 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80186d8:	4b0a      	ldr	r3, [pc, #40]	; (8018704 <tcpip_tcp_timer+0x38>)
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	2b00      	cmp	r3, #0
 80186de:	d103      	bne.n	80186e8 <tcpip_tcp_timer+0x1c>
 80186e0:	4b09      	ldr	r3, [pc, #36]	; (8018708 <tcpip_tcp_timer+0x3c>)
 80186e2:	681b      	ldr	r3, [r3, #0]
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d005      	beq.n	80186f4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80186e8:	2200      	movs	r2, #0
 80186ea:	4908      	ldr	r1, [pc, #32]	; (801870c <tcpip_tcp_timer+0x40>)
 80186ec:	20fa      	movs	r0, #250	; 0xfa
 80186ee:	f000 f8f3 	bl	80188d8 <sys_timeout>
 80186f2:	e003      	b.n	80186fc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80186f4:	4b06      	ldr	r3, [pc, #24]	; (8018710 <tcpip_tcp_timer+0x44>)
 80186f6:	2200      	movs	r2, #0
 80186f8:	601a      	str	r2, [r3, #0]
  }
}
 80186fa:	bf00      	nop
 80186fc:	bf00      	nop
 80186fe:	3708      	adds	r7, #8
 8018700:	46bd      	mov	sp, r7
 8018702:	bd80      	pop	{r7, pc}
 8018704:	20011098 	.word	0x20011098
 8018708:	2001109c 	.word	0x2001109c
 801870c:	080186cd 	.word	0x080186cd
 8018710:	200110e4 	.word	0x200110e4

08018714 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8018714:	b580      	push	{r7, lr}
 8018716:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8018718:	4b0a      	ldr	r3, [pc, #40]	; (8018744 <tcp_timer_needed+0x30>)
 801871a:	681b      	ldr	r3, [r3, #0]
 801871c:	2b00      	cmp	r3, #0
 801871e:	d10f      	bne.n	8018740 <tcp_timer_needed+0x2c>
 8018720:	4b09      	ldr	r3, [pc, #36]	; (8018748 <tcp_timer_needed+0x34>)
 8018722:	681b      	ldr	r3, [r3, #0]
 8018724:	2b00      	cmp	r3, #0
 8018726:	d103      	bne.n	8018730 <tcp_timer_needed+0x1c>
 8018728:	4b08      	ldr	r3, [pc, #32]	; (801874c <tcp_timer_needed+0x38>)
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	2b00      	cmp	r3, #0
 801872e:	d007      	beq.n	8018740 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8018730:	4b04      	ldr	r3, [pc, #16]	; (8018744 <tcp_timer_needed+0x30>)
 8018732:	2201      	movs	r2, #1
 8018734:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018736:	2200      	movs	r2, #0
 8018738:	4905      	ldr	r1, [pc, #20]	; (8018750 <tcp_timer_needed+0x3c>)
 801873a:	20fa      	movs	r0, #250	; 0xfa
 801873c:	f000 f8cc 	bl	80188d8 <sys_timeout>
  }
}
 8018740:	bf00      	nop
 8018742:	bd80      	pop	{r7, pc}
 8018744:	200110e4 	.word	0x200110e4
 8018748:	20011098 	.word	0x20011098
 801874c:	2001109c 	.word	0x2001109c
 8018750:	080186cd 	.word	0x080186cd

08018754 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8018754:	b580      	push	{r7, lr}
 8018756:	b086      	sub	sp, #24
 8018758:	af00      	add	r7, sp, #0
 801875a:	60f8      	str	r0, [r7, #12]
 801875c:	60b9      	str	r1, [r7, #8]
 801875e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8018760:	200a      	movs	r0, #10
 8018762:	f7f8 fe35 	bl	80113d0 <memp_malloc>
 8018766:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8018768:	693b      	ldr	r3, [r7, #16]
 801876a:	2b00      	cmp	r3, #0
 801876c:	d109      	bne.n	8018782 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801876e:	693b      	ldr	r3, [r7, #16]
 8018770:	2b00      	cmp	r3, #0
 8018772:	d151      	bne.n	8018818 <sys_timeout_abs+0xc4>
 8018774:	4b2a      	ldr	r3, [pc, #168]	; (8018820 <sys_timeout_abs+0xcc>)
 8018776:	22be      	movs	r2, #190	; 0xbe
 8018778:	492a      	ldr	r1, [pc, #168]	; (8018824 <sys_timeout_abs+0xd0>)
 801877a:	482b      	ldr	r0, [pc, #172]	; (8018828 <sys_timeout_abs+0xd4>)
 801877c:	f003 f90a 	bl	801b994 <iprintf>
    return;
 8018780:	e04a      	b.n	8018818 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8018782:	693b      	ldr	r3, [r7, #16]
 8018784:	2200      	movs	r2, #0
 8018786:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8018788:	693b      	ldr	r3, [r7, #16]
 801878a:	68ba      	ldr	r2, [r7, #8]
 801878c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801878e:	693b      	ldr	r3, [r7, #16]
 8018790:	687a      	ldr	r2, [r7, #4]
 8018792:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8018794:	693b      	ldr	r3, [r7, #16]
 8018796:	68fa      	ldr	r2, [r7, #12]
 8018798:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801879a:	4b24      	ldr	r3, [pc, #144]	; (801882c <sys_timeout_abs+0xd8>)
 801879c:	681b      	ldr	r3, [r3, #0]
 801879e:	2b00      	cmp	r3, #0
 80187a0:	d103      	bne.n	80187aa <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80187a2:	4a22      	ldr	r2, [pc, #136]	; (801882c <sys_timeout_abs+0xd8>)
 80187a4:	693b      	ldr	r3, [r7, #16]
 80187a6:	6013      	str	r3, [r2, #0]
    return;
 80187a8:	e037      	b.n	801881a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80187aa:	693b      	ldr	r3, [r7, #16]
 80187ac:	685a      	ldr	r2, [r3, #4]
 80187ae:	4b1f      	ldr	r3, [pc, #124]	; (801882c <sys_timeout_abs+0xd8>)
 80187b0:	681b      	ldr	r3, [r3, #0]
 80187b2:	685b      	ldr	r3, [r3, #4]
 80187b4:	1ad3      	subs	r3, r2, r3
 80187b6:	0fdb      	lsrs	r3, r3, #31
 80187b8:	f003 0301 	and.w	r3, r3, #1
 80187bc:	b2db      	uxtb	r3, r3
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d007      	beq.n	80187d2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80187c2:	4b1a      	ldr	r3, [pc, #104]	; (801882c <sys_timeout_abs+0xd8>)
 80187c4:	681a      	ldr	r2, [r3, #0]
 80187c6:	693b      	ldr	r3, [r7, #16]
 80187c8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80187ca:	4a18      	ldr	r2, [pc, #96]	; (801882c <sys_timeout_abs+0xd8>)
 80187cc:	693b      	ldr	r3, [r7, #16]
 80187ce:	6013      	str	r3, [r2, #0]
 80187d0:	e023      	b.n	801881a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80187d2:	4b16      	ldr	r3, [pc, #88]	; (801882c <sys_timeout_abs+0xd8>)
 80187d4:	681b      	ldr	r3, [r3, #0]
 80187d6:	617b      	str	r3, [r7, #20]
 80187d8:	e01a      	b.n	8018810 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80187da:	697b      	ldr	r3, [r7, #20]
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d00b      	beq.n	80187fa <sys_timeout_abs+0xa6>
 80187e2:	693b      	ldr	r3, [r7, #16]
 80187e4:	685a      	ldr	r2, [r3, #4]
 80187e6:	697b      	ldr	r3, [r7, #20]
 80187e8:	681b      	ldr	r3, [r3, #0]
 80187ea:	685b      	ldr	r3, [r3, #4]
 80187ec:	1ad3      	subs	r3, r2, r3
 80187ee:	0fdb      	lsrs	r3, r3, #31
 80187f0:	f003 0301 	and.w	r3, r3, #1
 80187f4:	b2db      	uxtb	r3, r3
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d007      	beq.n	801880a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80187fa:	697b      	ldr	r3, [r7, #20]
 80187fc:	681a      	ldr	r2, [r3, #0]
 80187fe:	693b      	ldr	r3, [r7, #16]
 8018800:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8018802:	697b      	ldr	r3, [r7, #20]
 8018804:	693a      	ldr	r2, [r7, #16]
 8018806:	601a      	str	r2, [r3, #0]
        break;
 8018808:	e007      	b.n	801881a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801880a:	697b      	ldr	r3, [r7, #20]
 801880c:	681b      	ldr	r3, [r3, #0]
 801880e:	617b      	str	r3, [r7, #20]
 8018810:	697b      	ldr	r3, [r7, #20]
 8018812:	2b00      	cmp	r3, #0
 8018814:	d1e1      	bne.n	80187da <sys_timeout_abs+0x86>
 8018816:	e000      	b.n	801881a <sys_timeout_abs+0xc6>
    return;
 8018818:	bf00      	nop
      }
    }
  }
}
 801881a:	3718      	adds	r7, #24
 801881c:	46bd      	mov	sp, r7
 801881e:	bd80      	pop	{r7, pc}
 8018820:	0801fab4 	.word	0x0801fab4
 8018824:	0801fae8 	.word	0x0801fae8
 8018828:	0801fb28 	.word	0x0801fb28
 801882c:	200110dc 	.word	0x200110dc

08018830 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8018830:	b580      	push	{r7, lr}
 8018832:	b086      	sub	sp, #24
 8018834:	af00      	add	r7, sp, #0
 8018836:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801883c:	697b      	ldr	r3, [r7, #20]
 801883e:	685b      	ldr	r3, [r3, #4]
 8018840:	4798      	blx	r3

  now = sys_now();
 8018842:	f7f0 fb8b 	bl	8008f5c <sys_now>
 8018846:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8018848:	697b      	ldr	r3, [r7, #20]
 801884a:	681a      	ldr	r2, [r3, #0]
 801884c:	4b0f      	ldr	r3, [pc, #60]	; (801888c <lwip_cyclic_timer+0x5c>)
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	4413      	add	r3, r2
 8018852:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8018854:	68fa      	ldr	r2, [r7, #12]
 8018856:	693b      	ldr	r3, [r7, #16]
 8018858:	1ad3      	subs	r3, r2, r3
 801885a:	0fdb      	lsrs	r3, r3, #31
 801885c:	f003 0301 	and.w	r3, r3, #1
 8018860:	b2db      	uxtb	r3, r3
 8018862:	2b00      	cmp	r3, #0
 8018864:	d009      	beq.n	801887a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8018866:	697b      	ldr	r3, [r7, #20]
 8018868:	681a      	ldr	r2, [r3, #0]
 801886a:	693b      	ldr	r3, [r7, #16]
 801886c:	4413      	add	r3, r2
 801886e:	687a      	ldr	r2, [r7, #4]
 8018870:	4907      	ldr	r1, [pc, #28]	; (8018890 <lwip_cyclic_timer+0x60>)
 8018872:	4618      	mov	r0, r3
 8018874:	f7ff ff6e 	bl	8018754 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8018878:	e004      	b.n	8018884 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801887a:	687a      	ldr	r2, [r7, #4]
 801887c:	4904      	ldr	r1, [pc, #16]	; (8018890 <lwip_cyclic_timer+0x60>)
 801887e:	68f8      	ldr	r0, [r7, #12]
 8018880:	f7ff ff68 	bl	8018754 <sys_timeout_abs>
}
 8018884:	bf00      	nop
 8018886:	3718      	adds	r7, #24
 8018888:	46bd      	mov	sp, r7
 801888a:	bd80      	pop	{r7, pc}
 801888c:	200110e0 	.word	0x200110e0
 8018890:	08018831 	.word	0x08018831

08018894 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8018894:	b580      	push	{r7, lr}
 8018896:	b082      	sub	sp, #8
 8018898:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801889a:	2301      	movs	r3, #1
 801889c:	607b      	str	r3, [r7, #4]
 801889e:	e00e      	b.n	80188be <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80188a0:	4a0b      	ldr	r2, [pc, #44]	; (80188d0 <sys_timeouts_init+0x3c>)
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	00db      	lsls	r3, r3, #3
 80188ac:	4a08      	ldr	r2, [pc, #32]	; (80188d0 <sys_timeouts_init+0x3c>)
 80188ae:	4413      	add	r3, r2
 80188b0:	461a      	mov	r2, r3
 80188b2:	4908      	ldr	r1, [pc, #32]	; (80188d4 <sys_timeouts_init+0x40>)
 80188b4:	f000 f810 	bl	80188d8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	3301      	adds	r3, #1
 80188bc:	607b      	str	r3, [r7, #4]
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	2b02      	cmp	r3, #2
 80188c2:	d9ed      	bls.n	80188a0 <sys_timeouts_init+0xc>
  }
}
 80188c4:	bf00      	nop
 80188c6:	bf00      	nop
 80188c8:	3708      	adds	r7, #8
 80188ca:	46bd      	mov	sp, r7
 80188cc:	bd80      	pop	{r7, pc}
 80188ce:	bf00      	nop
 80188d0:	0802079c 	.word	0x0802079c
 80188d4:	08018831 	.word	0x08018831

080188d8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80188d8:	b580      	push	{r7, lr}
 80188da:	b086      	sub	sp, #24
 80188dc:	af00      	add	r7, sp, #0
 80188de:	60f8      	str	r0, [r7, #12]
 80188e0:	60b9      	str	r1, [r7, #8]
 80188e2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80188e4:	68fb      	ldr	r3, [r7, #12]
 80188e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80188ea:	d306      	bcc.n	80188fa <sys_timeout+0x22>
 80188ec:	4b0a      	ldr	r3, [pc, #40]	; (8018918 <sys_timeout+0x40>)
 80188ee:	f240 1229 	movw	r2, #297	; 0x129
 80188f2:	490a      	ldr	r1, [pc, #40]	; (801891c <sys_timeout+0x44>)
 80188f4:	480a      	ldr	r0, [pc, #40]	; (8018920 <sys_timeout+0x48>)
 80188f6:	f003 f84d 	bl	801b994 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80188fa:	f7f0 fb2f 	bl	8008f5c <sys_now>
 80188fe:	4602      	mov	r2, r0
 8018900:	68fb      	ldr	r3, [r7, #12]
 8018902:	4413      	add	r3, r2
 8018904:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8018906:	687a      	ldr	r2, [r7, #4]
 8018908:	68b9      	ldr	r1, [r7, #8]
 801890a:	6978      	ldr	r0, [r7, #20]
 801890c:	f7ff ff22 	bl	8018754 <sys_timeout_abs>
#endif
}
 8018910:	bf00      	nop
 8018912:	3718      	adds	r7, #24
 8018914:	46bd      	mov	sp, r7
 8018916:	bd80      	pop	{r7, pc}
 8018918:	0801fab4 	.word	0x0801fab4
 801891c:	0801fb50 	.word	0x0801fb50
 8018920:	0801fb28 	.word	0x0801fb28

08018924 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8018924:	b580      	push	{r7, lr}
 8018926:	b084      	sub	sp, #16
 8018928:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801892a:	f7f0 fb17 	bl	8008f5c <sys_now>
 801892e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8018930:	4b17      	ldr	r3, [pc, #92]	; (8018990 <sys_check_timeouts+0x6c>)
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8018936:	68bb      	ldr	r3, [r7, #8]
 8018938:	2b00      	cmp	r3, #0
 801893a:	d022      	beq.n	8018982 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801893c:	68bb      	ldr	r3, [r7, #8]
 801893e:	685b      	ldr	r3, [r3, #4]
 8018940:	68fa      	ldr	r2, [r7, #12]
 8018942:	1ad3      	subs	r3, r2, r3
 8018944:	0fdb      	lsrs	r3, r3, #31
 8018946:	f003 0301 	and.w	r3, r3, #1
 801894a:	b2db      	uxtb	r3, r3
 801894c:	2b00      	cmp	r3, #0
 801894e:	d11a      	bne.n	8018986 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8018950:	68bb      	ldr	r3, [r7, #8]
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	4a0e      	ldr	r2, [pc, #56]	; (8018990 <sys_check_timeouts+0x6c>)
 8018956:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8018958:	68bb      	ldr	r3, [r7, #8]
 801895a:	689b      	ldr	r3, [r3, #8]
 801895c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801895e:	68bb      	ldr	r3, [r7, #8]
 8018960:	68db      	ldr	r3, [r3, #12]
 8018962:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8018964:	68bb      	ldr	r3, [r7, #8]
 8018966:	685b      	ldr	r3, [r3, #4]
 8018968:	4a0a      	ldr	r2, [pc, #40]	; (8018994 <sys_check_timeouts+0x70>)
 801896a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801896c:	68b9      	ldr	r1, [r7, #8]
 801896e:	200a      	movs	r0, #10
 8018970:	f7f8 fda4 	bl	80114bc <memp_free>
    if (handler != NULL) {
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	2b00      	cmp	r3, #0
 8018978:	d0da      	beq.n	8018930 <sys_check_timeouts+0xc>
      handler(arg);
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	6838      	ldr	r0, [r7, #0]
 801897e:	4798      	blx	r3
  do {
 8018980:	e7d6      	b.n	8018930 <sys_check_timeouts+0xc>
      return;
 8018982:	bf00      	nop
 8018984:	e000      	b.n	8018988 <sys_check_timeouts+0x64>
      return;
 8018986:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8018988:	3710      	adds	r7, #16
 801898a:	46bd      	mov	sp, r7
 801898c:	bd80      	pop	{r7, pc}
 801898e:	bf00      	nop
 8018990:	200110dc 	.word	0x200110dc
 8018994:	200110e0 	.word	0x200110e0

08018998 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8018998:	b580      	push	{r7, lr}
 801899a:	b082      	sub	sp, #8
 801899c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801899e:	4b16      	ldr	r3, [pc, #88]	; (80189f8 <sys_timeouts_sleeptime+0x60>)
 80189a0:	681b      	ldr	r3, [r3, #0]
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d102      	bne.n	80189ac <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80189a6:	f04f 33ff 	mov.w	r3, #4294967295
 80189aa:	e020      	b.n	80189ee <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80189ac:	f7f0 fad6 	bl	8008f5c <sys_now>
 80189b0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80189b2:	4b11      	ldr	r3, [pc, #68]	; (80189f8 <sys_timeouts_sleeptime+0x60>)
 80189b4:	681b      	ldr	r3, [r3, #0]
 80189b6:	685a      	ldr	r2, [r3, #4]
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	1ad3      	subs	r3, r2, r3
 80189bc:	0fdb      	lsrs	r3, r3, #31
 80189be:	f003 0301 	and.w	r3, r3, #1
 80189c2:	b2db      	uxtb	r3, r3
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d001      	beq.n	80189cc <sys_timeouts_sleeptime+0x34>
    return 0;
 80189c8:	2300      	movs	r3, #0
 80189ca:	e010      	b.n	80189ee <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80189cc:	4b0a      	ldr	r3, [pc, #40]	; (80189f8 <sys_timeouts_sleeptime+0x60>)
 80189ce:	681b      	ldr	r3, [r3, #0]
 80189d0:	685a      	ldr	r2, [r3, #4]
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	1ad3      	subs	r3, r2, r3
 80189d6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80189d8:	683b      	ldr	r3, [r7, #0]
 80189da:	2b00      	cmp	r3, #0
 80189dc:	da06      	bge.n	80189ec <sys_timeouts_sleeptime+0x54>
 80189de:	4b07      	ldr	r3, [pc, #28]	; (80189fc <sys_timeouts_sleeptime+0x64>)
 80189e0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80189e4:	4906      	ldr	r1, [pc, #24]	; (8018a00 <sys_timeouts_sleeptime+0x68>)
 80189e6:	4807      	ldr	r0, [pc, #28]	; (8018a04 <sys_timeouts_sleeptime+0x6c>)
 80189e8:	f002 ffd4 	bl	801b994 <iprintf>
    return ret;
 80189ec:	683b      	ldr	r3, [r7, #0]
  }
}
 80189ee:	4618      	mov	r0, r3
 80189f0:	3708      	adds	r7, #8
 80189f2:	46bd      	mov	sp, r7
 80189f4:	bd80      	pop	{r7, pc}
 80189f6:	bf00      	nop
 80189f8:	200110dc 	.word	0x200110dc
 80189fc:	0801fab4 	.word	0x0801fab4
 8018a00:	0801fb88 	.word	0x0801fb88
 8018a04:	0801fb28 	.word	0x0801fb28

08018a08 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8018a08:	b580      	push	{r7, lr}
 8018a0a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8018a0c:	f003 f866 	bl	801badc <rand>
 8018a10:	4603      	mov	r3, r0
 8018a12:	b29b      	uxth	r3, r3
 8018a14:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8018a18:	b29b      	uxth	r3, r3
 8018a1a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8018a1e:	b29a      	uxth	r2, r3
 8018a20:	4b01      	ldr	r3, [pc, #4]	; (8018a28 <udp_init+0x20>)
 8018a22:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8018a24:	bf00      	nop
 8018a26:	bd80      	pop	{r7, pc}
 8018a28:	2000002c 	.word	0x2000002c

08018a2c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8018a2c:	b480      	push	{r7}
 8018a2e:	b083      	sub	sp, #12
 8018a30:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8018a32:	2300      	movs	r3, #0
 8018a34:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8018a36:	4b17      	ldr	r3, [pc, #92]	; (8018a94 <udp_new_port+0x68>)
 8018a38:	881b      	ldrh	r3, [r3, #0]
 8018a3a:	1c5a      	adds	r2, r3, #1
 8018a3c:	b291      	uxth	r1, r2
 8018a3e:	4a15      	ldr	r2, [pc, #84]	; (8018a94 <udp_new_port+0x68>)
 8018a40:	8011      	strh	r1, [r2, #0]
 8018a42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018a46:	4293      	cmp	r3, r2
 8018a48:	d103      	bne.n	8018a52 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8018a4a:	4b12      	ldr	r3, [pc, #72]	; (8018a94 <udp_new_port+0x68>)
 8018a4c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8018a50:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018a52:	4b11      	ldr	r3, [pc, #68]	; (8018a98 <udp_new_port+0x6c>)
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	603b      	str	r3, [r7, #0]
 8018a58:	e011      	b.n	8018a7e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8018a5a:	683b      	ldr	r3, [r7, #0]
 8018a5c:	8a5a      	ldrh	r2, [r3, #18]
 8018a5e:	4b0d      	ldr	r3, [pc, #52]	; (8018a94 <udp_new_port+0x68>)
 8018a60:	881b      	ldrh	r3, [r3, #0]
 8018a62:	429a      	cmp	r2, r3
 8018a64:	d108      	bne.n	8018a78 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8018a66:	88fb      	ldrh	r3, [r7, #6]
 8018a68:	3301      	adds	r3, #1
 8018a6a:	80fb      	strh	r3, [r7, #6]
 8018a6c:	88fb      	ldrh	r3, [r7, #6]
 8018a6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018a72:	d3e0      	bcc.n	8018a36 <udp_new_port+0xa>
        return 0;
 8018a74:	2300      	movs	r3, #0
 8018a76:	e007      	b.n	8018a88 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018a78:	683b      	ldr	r3, [r7, #0]
 8018a7a:	68db      	ldr	r3, [r3, #12]
 8018a7c:	603b      	str	r3, [r7, #0]
 8018a7e:	683b      	ldr	r3, [r7, #0]
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d1ea      	bne.n	8018a5a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8018a84:	4b03      	ldr	r3, [pc, #12]	; (8018a94 <udp_new_port+0x68>)
 8018a86:	881b      	ldrh	r3, [r3, #0]
}
 8018a88:	4618      	mov	r0, r3
 8018a8a:	370c      	adds	r7, #12
 8018a8c:	46bd      	mov	sp, r7
 8018a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a92:	4770      	bx	lr
 8018a94:	2000002c 	.word	0x2000002c
 8018a98:	200110e8 	.word	0x200110e8

08018a9c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8018a9c:	b580      	push	{r7, lr}
 8018a9e:	b084      	sub	sp, #16
 8018aa0:	af00      	add	r7, sp, #0
 8018aa2:	60f8      	str	r0, [r7, #12]
 8018aa4:	60b9      	str	r1, [r7, #8]
 8018aa6:	4613      	mov	r3, r2
 8018aa8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8018aaa:	68fb      	ldr	r3, [r7, #12]
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d105      	bne.n	8018abc <udp_input_local_match+0x20>
 8018ab0:	4b27      	ldr	r3, [pc, #156]	; (8018b50 <udp_input_local_match+0xb4>)
 8018ab2:	2287      	movs	r2, #135	; 0x87
 8018ab4:	4927      	ldr	r1, [pc, #156]	; (8018b54 <udp_input_local_match+0xb8>)
 8018ab6:	4828      	ldr	r0, [pc, #160]	; (8018b58 <udp_input_local_match+0xbc>)
 8018ab8:	f002 ff6c 	bl	801b994 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8018abc:	68bb      	ldr	r3, [r7, #8]
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d105      	bne.n	8018ace <udp_input_local_match+0x32>
 8018ac2:	4b23      	ldr	r3, [pc, #140]	; (8018b50 <udp_input_local_match+0xb4>)
 8018ac4:	2288      	movs	r2, #136	; 0x88
 8018ac6:	4925      	ldr	r1, [pc, #148]	; (8018b5c <udp_input_local_match+0xc0>)
 8018ac8:	4823      	ldr	r0, [pc, #140]	; (8018b58 <udp_input_local_match+0xbc>)
 8018aca:	f002 ff63 	bl	801b994 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018ace:	68fb      	ldr	r3, [r7, #12]
 8018ad0:	7a1b      	ldrb	r3, [r3, #8]
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d00b      	beq.n	8018aee <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018ad6:	68fb      	ldr	r3, [r7, #12]
 8018ad8:	7a1a      	ldrb	r2, [r3, #8]
 8018ada:	4b21      	ldr	r3, [pc, #132]	; (8018b60 <udp_input_local_match+0xc4>)
 8018adc:	685b      	ldr	r3, [r3, #4]
 8018ade:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018ae2:	3301      	adds	r3, #1
 8018ae4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018ae6:	429a      	cmp	r2, r3
 8018ae8:	d001      	beq.n	8018aee <udp_input_local_match+0x52>
    return 0;
 8018aea:	2300      	movs	r3, #0
 8018aec:	e02b      	b.n	8018b46 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8018aee:	79fb      	ldrb	r3, [r7, #7]
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d018      	beq.n	8018b26 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018af4:	68fb      	ldr	r3, [r7, #12]
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d013      	beq.n	8018b22 <udp_input_local_match+0x86>
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d00f      	beq.n	8018b22 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018b02:	4b17      	ldr	r3, [pc, #92]	; (8018b60 <udp_input_local_match+0xc4>)
 8018b04:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b0a:	d00a      	beq.n	8018b22 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8018b0c:	68fb      	ldr	r3, [r7, #12]
 8018b0e:	681a      	ldr	r2, [r3, #0]
 8018b10:	4b13      	ldr	r3, [pc, #76]	; (8018b60 <udp_input_local_match+0xc4>)
 8018b12:	695b      	ldr	r3, [r3, #20]
 8018b14:	405a      	eors	r2, r3
 8018b16:	68bb      	ldr	r3, [r7, #8]
 8018b18:	3308      	adds	r3, #8
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	d110      	bne.n	8018b44 <udp_input_local_match+0xa8>
          return 1;
 8018b22:	2301      	movs	r3, #1
 8018b24:	e00f      	b.n	8018b46 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018b26:	68fb      	ldr	r3, [r7, #12]
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	d009      	beq.n	8018b40 <udp_input_local_match+0xa4>
 8018b2c:	68fb      	ldr	r3, [r7, #12]
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	d005      	beq.n	8018b40 <udp_input_local_match+0xa4>
 8018b34:	68fb      	ldr	r3, [r7, #12]
 8018b36:	681a      	ldr	r2, [r3, #0]
 8018b38:	4b09      	ldr	r3, [pc, #36]	; (8018b60 <udp_input_local_match+0xc4>)
 8018b3a:	695b      	ldr	r3, [r3, #20]
 8018b3c:	429a      	cmp	r2, r3
 8018b3e:	d101      	bne.n	8018b44 <udp_input_local_match+0xa8>
        return 1;
 8018b40:	2301      	movs	r3, #1
 8018b42:	e000      	b.n	8018b46 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8018b44:	2300      	movs	r3, #0
}
 8018b46:	4618      	mov	r0, r3
 8018b48:	3710      	adds	r7, #16
 8018b4a:	46bd      	mov	sp, r7
 8018b4c:	bd80      	pop	{r7, pc}
 8018b4e:	bf00      	nop
 8018b50:	0801fb9c 	.word	0x0801fb9c
 8018b54:	0801fbcc 	.word	0x0801fbcc
 8018b58:	0801fbf0 	.word	0x0801fbf0
 8018b5c:	0801fc18 	.word	0x0801fc18
 8018b60:	2000d938 	.word	0x2000d938

08018b64 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8018b64:	b590      	push	{r4, r7, lr}
 8018b66:	b08d      	sub	sp, #52	; 0x34
 8018b68:	af02      	add	r7, sp, #8
 8018b6a:	6078      	str	r0, [r7, #4]
 8018b6c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8018b6e:	2300      	movs	r3, #0
 8018b70:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d105      	bne.n	8018b84 <udp_input+0x20>
 8018b78:	4b7c      	ldr	r3, [pc, #496]	; (8018d6c <udp_input+0x208>)
 8018b7a:	22cf      	movs	r2, #207	; 0xcf
 8018b7c:	497c      	ldr	r1, [pc, #496]	; (8018d70 <udp_input+0x20c>)
 8018b7e:	487d      	ldr	r0, [pc, #500]	; (8018d74 <udp_input+0x210>)
 8018b80:	f002 ff08 	bl	801b994 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8018b84:	683b      	ldr	r3, [r7, #0]
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d105      	bne.n	8018b96 <udp_input+0x32>
 8018b8a:	4b78      	ldr	r3, [pc, #480]	; (8018d6c <udp_input+0x208>)
 8018b8c:	22d0      	movs	r2, #208	; 0xd0
 8018b8e:	497a      	ldr	r1, [pc, #488]	; (8018d78 <udp_input+0x214>)
 8018b90:	4878      	ldr	r0, [pc, #480]	; (8018d74 <udp_input+0x210>)
 8018b92:	f002 feff 	bl	801b994 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	895b      	ldrh	r3, [r3, #10]
 8018b9a:	2b07      	cmp	r3, #7
 8018b9c:	d803      	bhi.n	8018ba6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8018b9e:	6878      	ldr	r0, [r7, #4]
 8018ba0:	f7f9 fb62 	bl	8012268 <pbuf_free>
    goto end;
 8018ba4:	e0de      	b.n	8018d64 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	685b      	ldr	r3, [r3, #4]
 8018baa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8018bac:	4b73      	ldr	r3, [pc, #460]	; (8018d7c <udp_input+0x218>)
 8018bae:	695b      	ldr	r3, [r3, #20]
 8018bb0:	4a72      	ldr	r2, [pc, #456]	; (8018d7c <udp_input+0x218>)
 8018bb2:	6812      	ldr	r2, [r2, #0]
 8018bb4:	4611      	mov	r1, r2
 8018bb6:	4618      	mov	r0, r3
 8018bb8:	f001 fd96 	bl	801a6e8 <ip4_addr_isbroadcast_u32>
 8018bbc:	4603      	mov	r3, r0
 8018bbe:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8018bc0:	697b      	ldr	r3, [r7, #20]
 8018bc2:	881b      	ldrh	r3, [r3, #0]
 8018bc4:	b29b      	uxth	r3, r3
 8018bc6:	4618      	mov	r0, r3
 8018bc8:	f7f7 ff2a 	bl	8010a20 <lwip_htons>
 8018bcc:	4603      	mov	r3, r0
 8018bce:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8018bd0:	697b      	ldr	r3, [r7, #20]
 8018bd2:	885b      	ldrh	r3, [r3, #2]
 8018bd4:	b29b      	uxth	r3, r3
 8018bd6:	4618      	mov	r0, r3
 8018bd8:	f7f7 ff22 	bl	8010a20 <lwip_htons>
 8018bdc:	4603      	mov	r3, r0
 8018bde:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8018be0:	2300      	movs	r3, #0
 8018be2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8018be4:	2300      	movs	r3, #0
 8018be6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8018be8:	2300      	movs	r3, #0
 8018bea:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018bec:	4b64      	ldr	r3, [pc, #400]	; (8018d80 <udp_input+0x21c>)
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8018bf2:	e054      	b.n	8018c9e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8018bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bf6:	8a5b      	ldrh	r3, [r3, #18]
 8018bf8:	89fa      	ldrh	r2, [r7, #14]
 8018bfa:	429a      	cmp	r2, r3
 8018bfc:	d14a      	bne.n	8018c94 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8018bfe:	7cfb      	ldrb	r3, [r7, #19]
 8018c00:	461a      	mov	r2, r3
 8018c02:	6839      	ldr	r1, [r7, #0]
 8018c04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018c06:	f7ff ff49 	bl	8018a9c <udp_input_local_match>
 8018c0a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d041      	beq.n	8018c94 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8018c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c12:	7c1b      	ldrb	r3, [r3, #16]
 8018c14:	f003 0304 	and.w	r3, r3, #4
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	d11d      	bne.n	8018c58 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8018c1c:	69fb      	ldr	r3, [r7, #28]
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d102      	bne.n	8018c28 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8018c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c24:	61fb      	str	r3, [r7, #28]
 8018c26:	e017      	b.n	8018c58 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8018c28:	7cfb      	ldrb	r3, [r7, #19]
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d014      	beq.n	8018c58 <udp_input+0xf4>
 8018c2e:	4b53      	ldr	r3, [pc, #332]	; (8018d7c <udp_input+0x218>)
 8018c30:	695b      	ldr	r3, [r3, #20]
 8018c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c36:	d10f      	bne.n	8018c58 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8018c38:	69fb      	ldr	r3, [r7, #28]
 8018c3a:	681a      	ldr	r2, [r3, #0]
 8018c3c:	683b      	ldr	r3, [r7, #0]
 8018c3e:	3304      	adds	r3, #4
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	429a      	cmp	r2, r3
 8018c44:	d008      	beq.n	8018c58 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8018c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c48:	681a      	ldr	r2, [r3, #0]
 8018c4a:	683b      	ldr	r3, [r7, #0]
 8018c4c:	3304      	adds	r3, #4
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	429a      	cmp	r2, r3
 8018c52:	d101      	bne.n	8018c58 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8018c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c56:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8018c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c5a:	8a9b      	ldrh	r3, [r3, #20]
 8018c5c:	8a3a      	ldrh	r2, [r7, #16]
 8018c5e:	429a      	cmp	r2, r3
 8018c60:	d118      	bne.n	8018c94 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8018c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c64:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d005      	beq.n	8018c76 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8018c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c6c:	685a      	ldr	r2, [r3, #4]
 8018c6e:	4b43      	ldr	r3, [pc, #268]	; (8018d7c <udp_input+0x218>)
 8018c70:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8018c72:	429a      	cmp	r2, r3
 8018c74:	d10e      	bne.n	8018c94 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8018c76:	6a3b      	ldr	r3, [r7, #32]
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d014      	beq.n	8018ca6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8018c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c7e:	68da      	ldr	r2, [r3, #12]
 8018c80:	6a3b      	ldr	r3, [r7, #32]
 8018c82:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8018c84:	4b3e      	ldr	r3, [pc, #248]	; (8018d80 <udp_input+0x21c>)
 8018c86:	681a      	ldr	r2, [r3, #0]
 8018c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c8a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8018c8c:	4a3c      	ldr	r2, [pc, #240]	; (8018d80 <udp_input+0x21c>)
 8018c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c90:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8018c92:	e008      	b.n	8018ca6 <udp_input+0x142>
      }
    }

    prev = pcb;
 8018c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c96:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c9a:	68db      	ldr	r3, [r3, #12]
 8018c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8018c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	d1a7      	bne.n	8018bf4 <udp_input+0x90>
 8018ca4:	e000      	b.n	8018ca8 <udp_input+0x144>
        break;
 8018ca6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8018ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d101      	bne.n	8018cb2 <udp_input+0x14e>
    pcb = uncon_pcb;
 8018cae:	69fb      	ldr	r3, [r7, #28]
 8018cb0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8018cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d002      	beq.n	8018cbe <udp_input+0x15a>
    for_us = 1;
 8018cb8:	2301      	movs	r3, #1
 8018cba:	76fb      	strb	r3, [r7, #27]
 8018cbc:	e00a      	b.n	8018cd4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8018cbe:	683b      	ldr	r3, [r7, #0]
 8018cc0:	3304      	adds	r3, #4
 8018cc2:	681a      	ldr	r2, [r3, #0]
 8018cc4:	4b2d      	ldr	r3, [pc, #180]	; (8018d7c <udp_input+0x218>)
 8018cc6:	695b      	ldr	r3, [r3, #20]
 8018cc8:	429a      	cmp	r2, r3
 8018cca:	bf0c      	ite	eq
 8018ccc:	2301      	moveq	r3, #1
 8018cce:	2300      	movne	r3, #0
 8018cd0:	b2db      	uxtb	r3, r3
 8018cd2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8018cd4:	7efb      	ldrb	r3, [r7, #27]
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d041      	beq.n	8018d5e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8018cda:	2108      	movs	r1, #8
 8018cdc:	6878      	ldr	r0, [r7, #4]
 8018cde:	f7f9 fa0b 	bl	80120f8 <pbuf_remove_header>
 8018ce2:	4603      	mov	r3, r0
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	d00a      	beq.n	8018cfe <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8018ce8:	4b20      	ldr	r3, [pc, #128]	; (8018d6c <udp_input+0x208>)
 8018cea:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8018cee:	4925      	ldr	r1, [pc, #148]	; (8018d84 <udp_input+0x220>)
 8018cf0:	4820      	ldr	r0, [pc, #128]	; (8018d74 <udp_input+0x210>)
 8018cf2:	f002 fe4f 	bl	801b994 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8018cf6:	6878      	ldr	r0, [r7, #4]
 8018cf8:	f7f9 fab6 	bl	8012268 <pbuf_free>
      goto end;
 8018cfc:	e032      	b.n	8018d64 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8018cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d012      	beq.n	8018d2a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8018d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d06:	699b      	ldr	r3, [r3, #24]
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d00a      	beq.n	8018d22 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8018d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d0e:	699c      	ldr	r4, [r3, #24]
 8018d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d12:	69d8      	ldr	r0, [r3, #28]
 8018d14:	8a3b      	ldrh	r3, [r7, #16]
 8018d16:	9300      	str	r3, [sp, #0]
 8018d18:	4b1b      	ldr	r3, [pc, #108]	; (8018d88 <udp_input+0x224>)
 8018d1a:	687a      	ldr	r2, [r7, #4]
 8018d1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018d1e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8018d20:	e021      	b.n	8018d66 <udp_input+0x202>
        pbuf_free(p);
 8018d22:	6878      	ldr	r0, [r7, #4]
 8018d24:	f7f9 faa0 	bl	8012268 <pbuf_free>
        goto end;
 8018d28:	e01c      	b.n	8018d64 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8018d2a:	7cfb      	ldrb	r3, [r7, #19]
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d112      	bne.n	8018d56 <udp_input+0x1f2>
 8018d30:	4b12      	ldr	r3, [pc, #72]	; (8018d7c <udp_input+0x218>)
 8018d32:	695b      	ldr	r3, [r3, #20]
 8018d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018d38:	2be0      	cmp	r3, #224	; 0xe0
 8018d3a:	d00c      	beq.n	8018d56 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8018d3c:	4b0f      	ldr	r3, [pc, #60]	; (8018d7c <udp_input+0x218>)
 8018d3e:	899b      	ldrh	r3, [r3, #12]
 8018d40:	3308      	adds	r3, #8
 8018d42:	b29b      	uxth	r3, r3
 8018d44:	b21b      	sxth	r3, r3
 8018d46:	4619      	mov	r1, r3
 8018d48:	6878      	ldr	r0, [r7, #4]
 8018d4a:	f7f9 fa48 	bl	80121de <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8018d4e:	2103      	movs	r1, #3
 8018d50:	6878      	ldr	r0, [r7, #4]
 8018d52:	f001 f9a9 	bl	801a0a8 <icmp_dest_unreach>
      pbuf_free(p);
 8018d56:	6878      	ldr	r0, [r7, #4]
 8018d58:	f7f9 fa86 	bl	8012268 <pbuf_free>
  return;
 8018d5c:	e003      	b.n	8018d66 <udp_input+0x202>
    pbuf_free(p);
 8018d5e:	6878      	ldr	r0, [r7, #4]
 8018d60:	f7f9 fa82 	bl	8012268 <pbuf_free>
  return;
 8018d64:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8018d66:	372c      	adds	r7, #44	; 0x2c
 8018d68:	46bd      	mov	sp, r7
 8018d6a:	bd90      	pop	{r4, r7, pc}
 8018d6c:	0801fb9c 	.word	0x0801fb9c
 8018d70:	0801fc40 	.word	0x0801fc40
 8018d74:	0801fbf0 	.word	0x0801fbf0
 8018d78:	0801fc58 	.word	0x0801fc58
 8018d7c:	2000d938 	.word	0x2000d938
 8018d80:	200110e8 	.word	0x200110e8
 8018d84:	0801fc74 	.word	0x0801fc74
 8018d88:	2000d948 	.word	0x2000d948

08018d8c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018d8c:	b580      	push	{r7, lr}
 8018d8e:	b086      	sub	sp, #24
 8018d90:	af00      	add	r7, sp, #0
 8018d92:	60f8      	str	r0, [r7, #12]
 8018d94:	60b9      	str	r1, [r7, #8]
 8018d96:	4613      	mov	r3, r2
 8018d98:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8018d9a:	68bb      	ldr	r3, [r7, #8]
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d101      	bne.n	8018da4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8018da0:	4b39      	ldr	r3, [pc, #228]	; (8018e88 <udp_bind+0xfc>)
 8018da2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8018da4:	68fb      	ldr	r3, [r7, #12]
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d109      	bne.n	8018dbe <udp_bind+0x32>
 8018daa:	4b38      	ldr	r3, [pc, #224]	; (8018e8c <udp_bind+0x100>)
 8018dac:	f240 32b7 	movw	r2, #951	; 0x3b7
 8018db0:	4937      	ldr	r1, [pc, #220]	; (8018e90 <udp_bind+0x104>)
 8018db2:	4838      	ldr	r0, [pc, #224]	; (8018e94 <udp_bind+0x108>)
 8018db4:	f002 fdee 	bl	801b994 <iprintf>
 8018db8:	f06f 030f 	mvn.w	r3, #15
 8018dbc:	e060      	b.n	8018e80 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8018dbe:	2300      	movs	r3, #0
 8018dc0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018dc2:	4b35      	ldr	r3, [pc, #212]	; (8018e98 <udp_bind+0x10c>)
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	617b      	str	r3, [r7, #20]
 8018dc8:	e009      	b.n	8018dde <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8018dca:	68fa      	ldr	r2, [r7, #12]
 8018dcc:	697b      	ldr	r3, [r7, #20]
 8018dce:	429a      	cmp	r2, r3
 8018dd0:	d102      	bne.n	8018dd8 <udp_bind+0x4c>
      rebind = 1;
 8018dd2:	2301      	movs	r3, #1
 8018dd4:	74fb      	strb	r3, [r7, #19]
      break;
 8018dd6:	e005      	b.n	8018de4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018dd8:	697b      	ldr	r3, [r7, #20]
 8018dda:	68db      	ldr	r3, [r3, #12]
 8018ddc:	617b      	str	r3, [r7, #20]
 8018dde:	697b      	ldr	r3, [r7, #20]
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	d1f2      	bne.n	8018dca <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8018de4:	88fb      	ldrh	r3, [r7, #6]
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	d109      	bne.n	8018dfe <udp_bind+0x72>
    port = udp_new_port();
 8018dea:	f7ff fe1f 	bl	8018a2c <udp_new_port>
 8018dee:	4603      	mov	r3, r0
 8018df0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8018df2:	88fb      	ldrh	r3, [r7, #6]
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	d12c      	bne.n	8018e52 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8018df8:	f06f 0307 	mvn.w	r3, #7
 8018dfc:	e040      	b.n	8018e80 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018dfe:	4b26      	ldr	r3, [pc, #152]	; (8018e98 <udp_bind+0x10c>)
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	617b      	str	r3, [r7, #20]
 8018e04:	e022      	b.n	8018e4c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8018e06:	68fa      	ldr	r2, [r7, #12]
 8018e08:	697b      	ldr	r3, [r7, #20]
 8018e0a:	429a      	cmp	r2, r3
 8018e0c:	d01b      	beq.n	8018e46 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8018e0e:	697b      	ldr	r3, [r7, #20]
 8018e10:	8a5b      	ldrh	r3, [r3, #18]
 8018e12:	88fa      	ldrh	r2, [r7, #6]
 8018e14:	429a      	cmp	r2, r3
 8018e16:	d116      	bne.n	8018e46 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018e18:	697b      	ldr	r3, [r7, #20]
 8018e1a:	681a      	ldr	r2, [r3, #0]
 8018e1c:	68bb      	ldr	r3, [r7, #8]
 8018e1e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8018e20:	429a      	cmp	r2, r3
 8018e22:	d00d      	beq.n	8018e40 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018e24:	68bb      	ldr	r3, [r7, #8]
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d00a      	beq.n	8018e40 <udp_bind+0xb4>
 8018e2a:	68bb      	ldr	r3, [r7, #8]
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d006      	beq.n	8018e40 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018e32:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	d003      	beq.n	8018e40 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018e38:	697b      	ldr	r3, [r7, #20]
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d102      	bne.n	8018e46 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8018e40:	f06f 0307 	mvn.w	r3, #7
 8018e44:	e01c      	b.n	8018e80 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018e46:	697b      	ldr	r3, [r7, #20]
 8018e48:	68db      	ldr	r3, [r3, #12]
 8018e4a:	617b      	str	r3, [r7, #20]
 8018e4c:	697b      	ldr	r3, [r7, #20]
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	d1d9      	bne.n	8018e06 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8018e52:	68bb      	ldr	r3, [r7, #8]
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	d002      	beq.n	8018e5e <udp_bind+0xd2>
 8018e58:	68bb      	ldr	r3, [r7, #8]
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	e000      	b.n	8018e60 <udp_bind+0xd4>
 8018e5e:	2300      	movs	r3, #0
 8018e60:	68fa      	ldr	r2, [r7, #12]
 8018e62:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8018e64:	68fb      	ldr	r3, [r7, #12]
 8018e66:	88fa      	ldrh	r2, [r7, #6]
 8018e68:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8018e6a:	7cfb      	ldrb	r3, [r7, #19]
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d106      	bne.n	8018e7e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8018e70:	4b09      	ldr	r3, [pc, #36]	; (8018e98 <udp_bind+0x10c>)
 8018e72:	681a      	ldr	r2, [r3, #0]
 8018e74:	68fb      	ldr	r3, [r7, #12]
 8018e76:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8018e78:	4a07      	ldr	r2, [pc, #28]	; (8018e98 <udp_bind+0x10c>)
 8018e7a:	68fb      	ldr	r3, [r7, #12]
 8018e7c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8018e7e:	2300      	movs	r3, #0
}
 8018e80:	4618      	mov	r0, r3
 8018e82:	3718      	adds	r7, #24
 8018e84:	46bd      	mov	sp, r7
 8018e86:	bd80      	pop	{r7, pc}
 8018e88:	080207b4 	.word	0x080207b4
 8018e8c:	0801fb9c 	.word	0x0801fb9c
 8018e90:	0801fe64 	.word	0x0801fe64
 8018e94:	0801fbf0 	.word	0x0801fbf0
 8018e98:	200110e8 	.word	0x200110e8

08018e9c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8018e9c:	b580      	push	{r7, lr}
 8018e9e:	b084      	sub	sp, #16
 8018ea0:	af00      	add	r7, sp, #0
 8018ea2:	60f8      	str	r0, [r7, #12]
 8018ea4:	60b9      	str	r1, [r7, #8]
 8018ea6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8018ea8:	68fb      	ldr	r3, [r7, #12]
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d107      	bne.n	8018ebe <udp_recv+0x22>
 8018eae:	4b08      	ldr	r3, [pc, #32]	; (8018ed0 <udp_recv+0x34>)
 8018eb0:	f240 428a 	movw	r2, #1162	; 0x48a
 8018eb4:	4907      	ldr	r1, [pc, #28]	; (8018ed4 <udp_recv+0x38>)
 8018eb6:	4808      	ldr	r0, [pc, #32]	; (8018ed8 <udp_recv+0x3c>)
 8018eb8:	f002 fd6c 	bl	801b994 <iprintf>
 8018ebc:	e005      	b.n	8018eca <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8018ebe:	68fb      	ldr	r3, [r7, #12]
 8018ec0:	68ba      	ldr	r2, [r7, #8]
 8018ec2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8018ec4:	68fb      	ldr	r3, [r7, #12]
 8018ec6:	687a      	ldr	r2, [r7, #4]
 8018ec8:	61da      	str	r2, [r3, #28]
}
 8018eca:	3710      	adds	r7, #16
 8018ecc:	46bd      	mov	sp, r7
 8018ece:	bd80      	pop	{r7, pc}
 8018ed0:	0801fb9c 	.word	0x0801fb9c
 8018ed4:	0801fed0 	.word	0x0801fed0
 8018ed8:	0801fbf0 	.word	0x0801fbf0

08018edc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8018edc:	b580      	push	{r7, lr}
 8018ede:	b084      	sub	sp, #16
 8018ee0:	af00      	add	r7, sp, #0
 8018ee2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d107      	bne.n	8018efa <udp_remove+0x1e>
 8018eea:	4b19      	ldr	r3, [pc, #100]	; (8018f50 <udp_remove+0x74>)
 8018eec:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8018ef0:	4918      	ldr	r1, [pc, #96]	; (8018f54 <udp_remove+0x78>)
 8018ef2:	4819      	ldr	r0, [pc, #100]	; (8018f58 <udp_remove+0x7c>)
 8018ef4:	f002 fd4e 	bl	801b994 <iprintf>
 8018ef8:	e026      	b.n	8018f48 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8018efa:	4b18      	ldr	r3, [pc, #96]	; (8018f5c <udp_remove+0x80>)
 8018efc:	681b      	ldr	r3, [r3, #0]
 8018efe:	687a      	ldr	r2, [r7, #4]
 8018f00:	429a      	cmp	r2, r3
 8018f02:	d105      	bne.n	8018f10 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8018f04:	4b15      	ldr	r3, [pc, #84]	; (8018f5c <udp_remove+0x80>)
 8018f06:	681b      	ldr	r3, [r3, #0]
 8018f08:	68db      	ldr	r3, [r3, #12]
 8018f0a:	4a14      	ldr	r2, [pc, #80]	; (8018f5c <udp_remove+0x80>)
 8018f0c:	6013      	str	r3, [r2, #0]
 8018f0e:	e017      	b.n	8018f40 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018f10:	4b12      	ldr	r3, [pc, #72]	; (8018f5c <udp_remove+0x80>)
 8018f12:	681b      	ldr	r3, [r3, #0]
 8018f14:	60fb      	str	r3, [r7, #12]
 8018f16:	e010      	b.n	8018f3a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8018f18:	68fb      	ldr	r3, [r7, #12]
 8018f1a:	68db      	ldr	r3, [r3, #12]
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d009      	beq.n	8018f34 <udp_remove+0x58>
 8018f20:	68fb      	ldr	r3, [r7, #12]
 8018f22:	68db      	ldr	r3, [r3, #12]
 8018f24:	687a      	ldr	r2, [r7, #4]
 8018f26:	429a      	cmp	r2, r3
 8018f28:	d104      	bne.n	8018f34 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	68da      	ldr	r2, [r3, #12]
 8018f2e:	68fb      	ldr	r3, [r7, #12]
 8018f30:	60da      	str	r2, [r3, #12]
        break;
 8018f32:	e005      	b.n	8018f40 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	68db      	ldr	r3, [r3, #12]
 8018f38:	60fb      	str	r3, [r7, #12]
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d1eb      	bne.n	8018f18 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8018f40:	6879      	ldr	r1, [r7, #4]
 8018f42:	2000      	movs	r0, #0
 8018f44:	f7f8 faba 	bl	80114bc <memp_free>
}
 8018f48:	3710      	adds	r7, #16
 8018f4a:	46bd      	mov	sp, r7
 8018f4c:	bd80      	pop	{r7, pc}
 8018f4e:	bf00      	nop
 8018f50:	0801fb9c 	.word	0x0801fb9c
 8018f54:	0801fee8 	.word	0x0801fee8
 8018f58:	0801fbf0 	.word	0x0801fbf0
 8018f5c:	200110e8 	.word	0x200110e8

08018f60 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8018f60:	b580      	push	{r7, lr}
 8018f62:	b082      	sub	sp, #8
 8018f64:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8018f66:	2000      	movs	r0, #0
 8018f68:	f7f8 fa32 	bl	80113d0 <memp_malloc>
 8018f6c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d007      	beq.n	8018f84 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8018f74:	2220      	movs	r2, #32
 8018f76:	2100      	movs	r1, #0
 8018f78:	6878      	ldr	r0, [r7, #4]
 8018f7a:	f002 fd03 	bl	801b984 <memset>
    pcb->ttl = UDP_TTL;
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	22ff      	movs	r2, #255	; 0xff
 8018f82:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8018f84:	687b      	ldr	r3, [r7, #4]
}
 8018f86:	4618      	mov	r0, r3
 8018f88:	3708      	adds	r7, #8
 8018f8a:	46bd      	mov	sp, r7
 8018f8c:	bd80      	pop	{r7, pc}

08018f8e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8018f8e:	b580      	push	{r7, lr}
 8018f90:	b084      	sub	sp, #16
 8018f92:	af00      	add	r7, sp, #0
 8018f94:	4603      	mov	r3, r0
 8018f96:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8018f98:	f7ff ffe2 	bl	8018f60 <udp_new>
 8018f9c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8018f9e:	68fb      	ldr	r3, [r7, #12]
}
 8018fa0:	4618      	mov	r0, r3
 8018fa2:	3710      	adds	r7, #16
 8018fa4:	46bd      	mov	sp, r7
 8018fa6:	bd80      	pop	{r7, pc}

08018fa8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018fa8:	b480      	push	{r7}
 8018faa:	b085      	sub	sp, #20
 8018fac:	af00      	add	r7, sp, #0
 8018fae:	6078      	str	r0, [r7, #4]
 8018fb0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	d01e      	beq.n	8018ff6 <udp_netif_ip_addr_changed+0x4e>
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d01a      	beq.n	8018ff6 <udp_netif_ip_addr_changed+0x4e>
 8018fc0:	683b      	ldr	r3, [r7, #0]
 8018fc2:	2b00      	cmp	r3, #0
 8018fc4:	d017      	beq.n	8018ff6 <udp_netif_ip_addr_changed+0x4e>
 8018fc6:	683b      	ldr	r3, [r7, #0]
 8018fc8:	681b      	ldr	r3, [r3, #0]
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d013      	beq.n	8018ff6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018fce:	4b0d      	ldr	r3, [pc, #52]	; (8019004 <udp_netif_ip_addr_changed+0x5c>)
 8018fd0:	681b      	ldr	r3, [r3, #0]
 8018fd2:	60fb      	str	r3, [r7, #12]
 8018fd4:	e00c      	b.n	8018ff0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018fd6:	68fb      	ldr	r3, [r7, #12]
 8018fd8:	681a      	ldr	r2, [r3, #0]
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	681b      	ldr	r3, [r3, #0]
 8018fde:	429a      	cmp	r2, r3
 8018fe0:	d103      	bne.n	8018fea <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8018fe2:	683b      	ldr	r3, [r7, #0]
 8018fe4:	681a      	ldr	r2, [r3, #0]
 8018fe6:	68fb      	ldr	r3, [r7, #12]
 8018fe8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018fea:	68fb      	ldr	r3, [r7, #12]
 8018fec:	68db      	ldr	r3, [r3, #12]
 8018fee:	60fb      	str	r3, [r7, #12]
 8018ff0:	68fb      	ldr	r3, [r7, #12]
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	d1ef      	bne.n	8018fd6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8018ff6:	bf00      	nop
 8018ff8:	3714      	adds	r7, #20
 8018ffa:	46bd      	mov	sp, r7
 8018ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019000:	4770      	bx	lr
 8019002:	bf00      	nop
 8019004:	200110e8 	.word	0x200110e8

08019008 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8019008:	b580      	push	{r7, lr}
 801900a:	b082      	sub	sp, #8
 801900c:	af00      	add	r7, sp, #0
 801900e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8019010:	4915      	ldr	r1, [pc, #84]	; (8019068 <etharp_free_entry+0x60>)
 8019012:	687a      	ldr	r2, [r7, #4]
 8019014:	4613      	mov	r3, r2
 8019016:	005b      	lsls	r3, r3, #1
 8019018:	4413      	add	r3, r2
 801901a:	00db      	lsls	r3, r3, #3
 801901c:	440b      	add	r3, r1
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	2b00      	cmp	r3, #0
 8019022:	d013      	beq.n	801904c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8019024:	4910      	ldr	r1, [pc, #64]	; (8019068 <etharp_free_entry+0x60>)
 8019026:	687a      	ldr	r2, [r7, #4]
 8019028:	4613      	mov	r3, r2
 801902a:	005b      	lsls	r3, r3, #1
 801902c:	4413      	add	r3, r2
 801902e:	00db      	lsls	r3, r3, #3
 8019030:	440b      	add	r3, r1
 8019032:	681b      	ldr	r3, [r3, #0]
 8019034:	4618      	mov	r0, r3
 8019036:	f7f9 f917 	bl	8012268 <pbuf_free>
    arp_table[i].q = NULL;
 801903a:	490b      	ldr	r1, [pc, #44]	; (8019068 <etharp_free_entry+0x60>)
 801903c:	687a      	ldr	r2, [r7, #4]
 801903e:	4613      	mov	r3, r2
 8019040:	005b      	lsls	r3, r3, #1
 8019042:	4413      	add	r3, r2
 8019044:	00db      	lsls	r3, r3, #3
 8019046:	440b      	add	r3, r1
 8019048:	2200      	movs	r2, #0
 801904a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801904c:	4906      	ldr	r1, [pc, #24]	; (8019068 <etharp_free_entry+0x60>)
 801904e:	687a      	ldr	r2, [r7, #4]
 8019050:	4613      	mov	r3, r2
 8019052:	005b      	lsls	r3, r3, #1
 8019054:	4413      	add	r3, r2
 8019056:	00db      	lsls	r3, r3, #3
 8019058:	440b      	add	r3, r1
 801905a:	3314      	adds	r3, #20
 801905c:	2200      	movs	r2, #0
 801905e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8019060:	bf00      	nop
 8019062:	3708      	adds	r7, #8
 8019064:	46bd      	mov	sp, r7
 8019066:	bd80      	pop	{r7, pc}
 8019068:	200110ec 	.word	0x200110ec

0801906c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801906c:	b580      	push	{r7, lr}
 801906e:	b082      	sub	sp, #8
 8019070:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019072:	2300      	movs	r3, #0
 8019074:	607b      	str	r3, [r7, #4]
 8019076:	e096      	b.n	80191a6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8019078:	494f      	ldr	r1, [pc, #316]	; (80191b8 <etharp_tmr+0x14c>)
 801907a:	687a      	ldr	r2, [r7, #4]
 801907c:	4613      	mov	r3, r2
 801907e:	005b      	lsls	r3, r3, #1
 8019080:	4413      	add	r3, r2
 8019082:	00db      	lsls	r3, r3, #3
 8019084:	440b      	add	r3, r1
 8019086:	3314      	adds	r3, #20
 8019088:	781b      	ldrb	r3, [r3, #0]
 801908a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801908c:	78fb      	ldrb	r3, [r7, #3]
 801908e:	2b00      	cmp	r3, #0
 8019090:	f000 8086 	beq.w	80191a0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8019094:	4948      	ldr	r1, [pc, #288]	; (80191b8 <etharp_tmr+0x14c>)
 8019096:	687a      	ldr	r2, [r7, #4]
 8019098:	4613      	mov	r3, r2
 801909a:	005b      	lsls	r3, r3, #1
 801909c:	4413      	add	r3, r2
 801909e:	00db      	lsls	r3, r3, #3
 80190a0:	440b      	add	r3, r1
 80190a2:	3312      	adds	r3, #18
 80190a4:	881b      	ldrh	r3, [r3, #0]
 80190a6:	3301      	adds	r3, #1
 80190a8:	b298      	uxth	r0, r3
 80190aa:	4943      	ldr	r1, [pc, #268]	; (80191b8 <etharp_tmr+0x14c>)
 80190ac:	687a      	ldr	r2, [r7, #4]
 80190ae:	4613      	mov	r3, r2
 80190b0:	005b      	lsls	r3, r3, #1
 80190b2:	4413      	add	r3, r2
 80190b4:	00db      	lsls	r3, r3, #3
 80190b6:	440b      	add	r3, r1
 80190b8:	3312      	adds	r3, #18
 80190ba:	4602      	mov	r2, r0
 80190bc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80190be:	493e      	ldr	r1, [pc, #248]	; (80191b8 <etharp_tmr+0x14c>)
 80190c0:	687a      	ldr	r2, [r7, #4]
 80190c2:	4613      	mov	r3, r2
 80190c4:	005b      	lsls	r3, r3, #1
 80190c6:	4413      	add	r3, r2
 80190c8:	00db      	lsls	r3, r3, #3
 80190ca:	440b      	add	r3, r1
 80190cc:	3312      	adds	r3, #18
 80190ce:	881b      	ldrh	r3, [r3, #0]
 80190d0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80190d4:	d215      	bcs.n	8019102 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80190d6:	4938      	ldr	r1, [pc, #224]	; (80191b8 <etharp_tmr+0x14c>)
 80190d8:	687a      	ldr	r2, [r7, #4]
 80190da:	4613      	mov	r3, r2
 80190dc:	005b      	lsls	r3, r3, #1
 80190de:	4413      	add	r3, r2
 80190e0:	00db      	lsls	r3, r3, #3
 80190e2:	440b      	add	r3, r1
 80190e4:	3314      	adds	r3, #20
 80190e6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80190e8:	2b01      	cmp	r3, #1
 80190ea:	d10e      	bne.n	801910a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80190ec:	4932      	ldr	r1, [pc, #200]	; (80191b8 <etharp_tmr+0x14c>)
 80190ee:	687a      	ldr	r2, [r7, #4]
 80190f0:	4613      	mov	r3, r2
 80190f2:	005b      	lsls	r3, r3, #1
 80190f4:	4413      	add	r3, r2
 80190f6:	00db      	lsls	r3, r3, #3
 80190f8:	440b      	add	r3, r1
 80190fa:	3312      	adds	r3, #18
 80190fc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80190fe:	2b04      	cmp	r3, #4
 8019100:	d903      	bls.n	801910a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8019102:	6878      	ldr	r0, [r7, #4]
 8019104:	f7ff ff80 	bl	8019008 <etharp_free_entry>
 8019108:	e04a      	b.n	80191a0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801910a:	492b      	ldr	r1, [pc, #172]	; (80191b8 <etharp_tmr+0x14c>)
 801910c:	687a      	ldr	r2, [r7, #4]
 801910e:	4613      	mov	r3, r2
 8019110:	005b      	lsls	r3, r3, #1
 8019112:	4413      	add	r3, r2
 8019114:	00db      	lsls	r3, r3, #3
 8019116:	440b      	add	r3, r1
 8019118:	3314      	adds	r3, #20
 801911a:	781b      	ldrb	r3, [r3, #0]
 801911c:	2b03      	cmp	r3, #3
 801911e:	d10a      	bne.n	8019136 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8019120:	4925      	ldr	r1, [pc, #148]	; (80191b8 <etharp_tmr+0x14c>)
 8019122:	687a      	ldr	r2, [r7, #4]
 8019124:	4613      	mov	r3, r2
 8019126:	005b      	lsls	r3, r3, #1
 8019128:	4413      	add	r3, r2
 801912a:	00db      	lsls	r3, r3, #3
 801912c:	440b      	add	r3, r1
 801912e:	3314      	adds	r3, #20
 8019130:	2204      	movs	r2, #4
 8019132:	701a      	strb	r2, [r3, #0]
 8019134:	e034      	b.n	80191a0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8019136:	4920      	ldr	r1, [pc, #128]	; (80191b8 <etharp_tmr+0x14c>)
 8019138:	687a      	ldr	r2, [r7, #4]
 801913a:	4613      	mov	r3, r2
 801913c:	005b      	lsls	r3, r3, #1
 801913e:	4413      	add	r3, r2
 8019140:	00db      	lsls	r3, r3, #3
 8019142:	440b      	add	r3, r1
 8019144:	3314      	adds	r3, #20
 8019146:	781b      	ldrb	r3, [r3, #0]
 8019148:	2b04      	cmp	r3, #4
 801914a:	d10a      	bne.n	8019162 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801914c:	491a      	ldr	r1, [pc, #104]	; (80191b8 <etharp_tmr+0x14c>)
 801914e:	687a      	ldr	r2, [r7, #4]
 8019150:	4613      	mov	r3, r2
 8019152:	005b      	lsls	r3, r3, #1
 8019154:	4413      	add	r3, r2
 8019156:	00db      	lsls	r3, r3, #3
 8019158:	440b      	add	r3, r1
 801915a:	3314      	adds	r3, #20
 801915c:	2202      	movs	r2, #2
 801915e:	701a      	strb	r2, [r3, #0]
 8019160:	e01e      	b.n	80191a0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019162:	4915      	ldr	r1, [pc, #84]	; (80191b8 <etharp_tmr+0x14c>)
 8019164:	687a      	ldr	r2, [r7, #4]
 8019166:	4613      	mov	r3, r2
 8019168:	005b      	lsls	r3, r3, #1
 801916a:	4413      	add	r3, r2
 801916c:	00db      	lsls	r3, r3, #3
 801916e:	440b      	add	r3, r1
 8019170:	3314      	adds	r3, #20
 8019172:	781b      	ldrb	r3, [r3, #0]
 8019174:	2b01      	cmp	r3, #1
 8019176:	d113      	bne.n	80191a0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8019178:	490f      	ldr	r1, [pc, #60]	; (80191b8 <etharp_tmr+0x14c>)
 801917a:	687a      	ldr	r2, [r7, #4]
 801917c:	4613      	mov	r3, r2
 801917e:	005b      	lsls	r3, r3, #1
 8019180:	4413      	add	r3, r2
 8019182:	00db      	lsls	r3, r3, #3
 8019184:	440b      	add	r3, r1
 8019186:	3308      	adds	r3, #8
 8019188:	6818      	ldr	r0, [r3, #0]
 801918a:	687a      	ldr	r2, [r7, #4]
 801918c:	4613      	mov	r3, r2
 801918e:	005b      	lsls	r3, r3, #1
 8019190:	4413      	add	r3, r2
 8019192:	00db      	lsls	r3, r3, #3
 8019194:	4a08      	ldr	r2, [pc, #32]	; (80191b8 <etharp_tmr+0x14c>)
 8019196:	4413      	add	r3, r2
 8019198:	3304      	adds	r3, #4
 801919a:	4619      	mov	r1, r3
 801919c:	f000 fe6e 	bl	8019e7c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	3301      	adds	r3, #1
 80191a4:	607b      	str	r3, [r7, #4]
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	2b09      	cmp	r3, #9
 80191aa:	f77f af65 	ble.w	8019078 <etharp_tmr+0xc>
      }
    }
  }
}
 80191ae:	bf00      	nop
 80191b0:	bf00      	nop
 80191b2:	3708      	adds	r7, #8
 80191b4:	46bd      	mov	sp, r7
 80191b6:	bd80      	pop	{r7, pc}
 80191b8:	200110ec 	.word	0x200110ec

080191bc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80191bc:	b580      	push	{r7, lr}
 80191be:	b08a      	sub	sp, #40	; 0x28
 80191c0:	af00      	add	r7, sp, #0
 80191c2:	60f8      	str	r0, [r7, #12]
 80191c4:	460b      	mov	r3, r1
 80191c6:	607a      	str	r2, [r7, #4]
 80191c8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80191ca:	230a      	movs	r3, #10
 80191cc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80191ce:	230a      	movs	r3, #10
 80191d0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80191d2:	230a      	movs	r3, #10
 80191d4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80191d6:	2300      	movs	r3, #0
 80191d8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80191da:	230a      	movs	r3, #10
 80191dc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80191de:	2300      	movs	r3, #0
 80191e0:	83bb      	strh	r3, [r7, #28]
 80191e2:	2300      	movs	r3, #0
 80191e4:	837b      	strh	r3, [r7, #26]
 80191e6:	2300      	movs	r3, #0
 80191e8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80191ea:	2300      	movs	r3, #0
 80191ec:	843b      	strh	r3, [r7, #32]
 80191ee:	e0ae      	b.n	801934e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80191f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80191f4:	49a6      	ldr	r1, [pc, #664]	; (8019490 <etharp_find_entry+0x2d4>)
 80191f6:	4613      	mov	r3, r2
 80191f8:	005b      	lsls	r3, r3, #1
 80191fa:	4413      	add	r3, r2
 80191fc:	00db      	lsls	r3, r3, #3
 80191fe:	440b      	add	r3, r1
 8019200:	3314      	adds	r3, #20
 8019202:	781b      	ldrb	r3, [r3, #0]
 8019204:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8019206:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801920a:	2b0a      	cmp	r3, #10
 801920c:	d105      	bne.n	801921a <etharp_find_entry+0x5e>
 801920e:	7dfb      	ldrb	r3, [r7, #23]
 8019210:	2b00      	cmp	r3, #0
 8019212:	d102      	bne.n	801921a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8019214:	8c3b      	ldrh	r3, [r7, #32]
 8019216:	847b      	strh	r3, [r7, #34]	; 0x22
 8019218:	e095      	b.n	8019346 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801921a:	7dfb      	ldrb	r3, [r7, #23]
 801921c:	2b00      	cmp	r3, #0
 801921e:	f000 8092 	beq.w	8019346 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8019222:	7dfb      	ldrb	r3, [r7, #23]
 8019224:	2b01      	cmp	r3, #1
 8019226:	d009      	beq.n	801923c <etharp_find_entry+0x80>
 8019228:	7dfb      	ldrb	r3, [r7, #23]
 801922a:	2b01      	cmp	r3, #1
 801922c:	d806      	bhi.n	801923c <etharp_find_entry+0x80>
 801922e:	4b99      	ldr	r3, [pc, #612]	; (8019494 <etharp_find_entry+0x2d8>)
 8019230:	f240 1223 	movw	r2, #291	; 0x123
 8019234:	4998      	ldr	r1, [pc, #608]	; (8019498 <etharp_find_entry+0x2dc>)
 8019236:	4899      	ldr	r0, [pc, #612]	; (801949c <etharp_find_entry+0x2e0>)
 8019238:	f002 fbac 	bl	801b994 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801923c:	68fb      	ldr	r3, [r7, #12]
 801923e:	2b00      	cmp	r3, #0
 8019240:	d020      	beq.n	8019284 <etharp_find_entry+0xc8>
 8019242:	68fb      	ldr	r3, [r7, #12]
 8019244:	6819      	ldr	r1, [r3, #0]
 8019246:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801924a:	4891      	ldr	r0, [pc, #580]	; (8019490 <etharp_find_entry+0x2d4>)
 801924c:	4613      	mov	r3, r2
 801924e:	005b      	lsls	r3, r3, #1
 8019250:	4413      	add	r3, r2
 8019252:	00db      	lsls	r3, r3, #3
 8019254:	4403      	add	r3, r0
 8019256:	3304      	adds	r3, #4
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	4299      	cmp	r1, r3
 801925c:	d112      	bne.n	8019284 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	2b00      	cmp	r3, #0
 8019262:	d00c      	beq.n	801927e <etharp_find_entry+0xc2>
 8019264:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019268:	4989      	ldr	r1, [pc, #548]	; (8019490 <etharp_find_entry+0x2d4>)
 801926a:	4613      	mov	r3, r2
 801926c:	005b      	lsls	r3, r3, #1
 801926e:	4413      	add	r3, r2
 8019270:	00db      	lsls	r3, r3, #3
 8019272:	440b      	add	r3, r1
 8019274:	3308      	adds	r3, #8
 8019276:	681b      	ldr	r3, [r3, #0]
 8019278:	687a      	ldr	r2, [r7, #4]
 801927a:	429a      	cmp	r2, r3
 801927c:	d102      	bne.n	8019284 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801927e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019282:	e100      	b.n	8019486 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8019284:	7dfb      	ldrb	r3, [r7, #23]
 8019286:	2b01      	cmp	r3, #1
 8019288:	d140      	bne.n	801930c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801928a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801928e:	4980      	ldr	r1, [pc, #512]	; (8019490 <etharp_find_entry+0x2d4>)
 8019290:	4613      	mov	r3, r2
 8019292:	005b      	lsls	r3, r3, #1
 8019294:	4413      	add	r3, r2
 8019296:	00db      	lsls	r3, r3, #3
 8019298:	440b      	add	r3, r1
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	2b00      	cmp	r3, #0
 801929e:	d01a      	beq.n	80192d6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80192a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80192a4:	497a      	ldr	r1, [pc, #488]	; (8019490 <etharp_find_entry+0x2d4>)
 80192a6:	4613      	mov	r3, r2
 80192a8:	005b      	lsls	r3, r3, #1
 80192aa:	4413      	add	r3, r2
 80192ac:	00db      	lsls	r3, r3, #3
 80192ae:	440b      	add	r3, r1
 80192b0:	3312      	adds	r3, #18
 80192b2:	881b      	ldrh	r3, [r3, #0]
 80192b4:	8bba      	ldrh	r2, [r7, #28]
 80192b6:	429a      	cmp	r2, r3
 80192b8:	d845      	bhi.n	8019346 <etharp_find_entry+0x18a>
            old_queue = i;
 80192ba:	8c3b      	ldrh	r3, [r7, #32]
 80192bc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80192be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80192c2:	4973      	ldr	r1, [pc, #460]	; (8019490 <etharp_find_entry+0x2d4>)
 80192c4:	4613      	mov	r3, r2
 80192c6:	005b      	lsls	r3, r3, #1
 80192c8:	4413      	add	r3, r2
 80192ca:	00db      	lsls	r3, r3, #3
 80192cc:	440b      	add	r3, r1
 80192ce:	3312      	adds	r3, #18
 80192d0:	881b      	ldrh	r3, [r3, #0]
 80192d2:	83bb      	strh	r3, [r7, #28]
 80192d4:	e037      	b.n	8019346 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80192d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80192da:	496d      	ldr	r1, [pc, #436]	; (8019490 <etharp_find_entry+0x2d4>)
 80192dc:	4613      	mov	r3, r2
 80192de:	005b      	lsls	r3, r3, #1
 80192e0:	4413      	add	r3, r2
 80192e2:	00db      	lsls	r3, r3, #3
 80192e4:	440b      	add	r3, r1
 80192e6:	3312      	adds	r3, #18
 80192e8:	881b      	ldrh	r3, [r3, #0]
 80192ea:	8b7a      	ldrh	r2, [r7, #26]
 80192ec:	429a      	cmp	r2, r3
 80192ee:	d82a      	bhi.n	8019346 <etharp_find_entry+0x18a>
            old_pending = i;
 80192f0:	8c3b      	ldrh	r3, [r7, #32]
 80192f2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80192f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80192f8:	4965      	ldr	r1, [pc, #404]	; (8019490 <etharp_find_entry+0x2d4>)
 80192fa:	4613      	mov	r3, r2
 80192fc:	005b      	lsls	r3, r3, #1
 80192fe:	4413      	add	r3, r2
 8019300:	00db      	lsls	r3, r3, #3
 8019302:	440b      	add	r3, r1
 8019304:	3312      	adds	r3, #18
 8019306:	881b      	ldrh	r3, [r3, #0]
 8019308:	837b      	strh	r3, [r7, #26]
 801930a:	e01c      	b.n	8019346 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801930c:	7dfb      	ldrb	r3, [r7, #23]
 801930e:	2b01      	cmp	r3, #1
 8019310:	d919      	bls.n	8019346 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8019312:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019316:	495e      	ldr	r1, [pc, #376]	; (8019490 <etharp_find_entry+0x2d4>)
 8019318:	4613      	mov	r3, r2
 801931a:	005b      	lsls	r3, r3, #1
 801931c:	4413      	add	r3, r2
 801931e:	00db      	lsls	r3, r3, #3
 8019320:	440b      	add	r3, r1
 8019322:	3312      	adds	r3, #18
 8019324:	881b      	ldrh	r3, [r3, #0]
 8019326:	8b3a      	ldrh	r2, [r7, #24]
 8019328:	429a      	cmp	r2, r3
 801932a:	d80c      	bhi.n	8019346 <etharp_find_entry+0x18a>
            old_stable = i;
 801932c:	8c3b      	ldrh	r3, [r7, #32]
 801932e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8019330:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019334:	4956      	ldr	r1, [pc, #344]	; (8019490 <etharp_find_entry+0x2d4>)
 8019336:	4613      	mov	r3, r2
 8019338:	005b      	lsls	r3, r3, #1
 801933a:	4413      	add	r3, r2
 801933c:	00db      	lsls	r3, r3, #3
 801933e:	440b      	add	r3, r1
 8019340:	3312      	adds	r3, #18
 8019342:	881b      	ldrh	r3, [r3, #0]
 8019344:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019346:	8c3b      	ldrh	r3, [r7, #32]
 8019348:	3301      	adds	r3, #1
 801934a:	b29b      	uxth	r3, r3
 801934c:	843b      	strh	r3, [r7, #32]
 801934e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019352:	2b09      	cmp	r3, #9
 8019354:	f77f af4c 	ble.w	80191f0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8019358:	7afb      	ldrb	r3, [r7, #11]
 801935a:	f003 0302 	and.w	r3, r3, #2
 801935e:	2b00      	cmp	r3, #0
 8019360:	d108      	bne.n	8019374 <etharp_find_entry+0x1b8>
 8019362:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8019366:	2b0a      	cmp	r3, #10
 8019368:	d107      	bne.n	801937a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801936a:	7afb      	ldrb	r3, [r7, #11]
 801936c:	f003 0301 	and.w	r3, r3, #1
 8019370:	2b00      	cmp	r3, #0
 8019372:	d102      	bne.n	801937a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8019374:	f04f 33ff 	mov.w	r3, #4294967295
 8019378:	e085      	b.n	8019486 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801937a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801937e:	2b09      	cmp	r3, #9
 8019380:	dc02      	bgt.n	8019388 <etharp_find_entry+0x1cc>
    i = empty;
 8019382:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019384:	843b      	strh	r3, [r7, #32]
 8019386:	e039      	b.n	80193fc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8019388:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801938c:	2b09      	cmp	r3, #9
 801938e:	dc14      	bgt.n	80193ba <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8019390:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019392:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8019394:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019398:	493d      	ldr	r1, [pc, #244]	; (8019490 <etharp_find_entry+0x2d4>)
 801939a:	4613      	mov	r3, r2
 801939c:	005b      	lsls	r3, r3, #1
 801939e:	4413      	add	r3, r2
 80193a0:	00db      	lsls	r3, r3, #3
 80193a2:	440b      	add	r3, r1
 80193a4:	681b      	ldr	r3, [r3, #0]
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d018      	beq.n	80193dc <etharp_find_entry+0x220>
 80193aa:	4b3a      	ldr	r3, [pc, #232]	; (8019494 <etharp_find_entry+0x2d8>)
 80193ac:	f240 126d 	movw	r2, #365	; 0x16d
 80193b0:	493b      	ldr	r1, [pc, #236]	; (80194a0 <etharp_find_entry+0x2e4>)
 80193b2:	483a      	ldr	r0, [pc, #232]	; (801949c <etharp_find_entry+0x2e0>)
 80193b4:	f002 faee 	bl	801b994 <iprintf>
 80193b8:	e010      	b.n	80193dc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80193ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80193be:	2b09      	cmp	r3, #9
 80193c0:	dc02      	bgt.n	80193c8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80193c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80193c4:	843b      	strh	r3, [r7, #32]
 80193c6:	e009      	b.n	80193dc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80193c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80193cc:	2b09      	cmp	r3, #9
 80193ce:	dc02      	bgt.n	80193d6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80193d0:	8bfb      	ldrh	r3, [r7, #30]
 80193d2:	843b      	strh	r3, [r7, #32]
 80193d4:	e002      	b.n	80193dc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80193d6:	f04f 33ff 	mov.w	r3, #4294967295
 80193da:	e054      	b.n	8019486 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80193dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80193e0:	2b09      	cmp	r3, #9
 80193e2:	dd06      	ble.n	80193f2 <etharp_find_entry+0x236>
 80193e4:	4b2b      	ldr	r3, [pc, #172]	; (8019494 <etharp_find_entry+0x2d8>)
 80193e6:	f240 127f 	movw	r2, #383	; 0x17f
 80193ea:	492e      	ldr	r1, [pc, #184]	; (80194a4 <etharp_find_entry+0x2e8>)
 80193ec:	482b      	ldr	r0, [pc, #172]	; (801949c <etharp_find_entry+0x2e0>)
 80193ee:	f002 fad1 	bl	801b994 <iprintf>
    etharp_free_entry(i);
 80193f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80193f6:	4618      	mov	r0, r3
 80193f8:	f7ff fe06 	bl	8019008 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80193fc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019400:	2b09      	cmp	r3, #9
 8019402:	dd06      	ble.n	8019412 <etharp_find_entry+0x256>
 8019404:	4b23      	ldr	r3, [pc, #140]	; (8019494 <etharp_find_entry+0x2d8>)
 8019406:	f240 1283 	movw	r2, #387	; 0x183
 801940a:	4926      	ldr	r1, [pc, #152]	; (80194a4 <etharp_find_entry+0x2e8>)
 801940c:	4823      	ldr	r0, [pc, #140]	; (801949c <etharp_find_entry+0x2e0>)
 801940e:	f002 fac1 	bl	801b994 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8019412:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019416:	491e      	ldr	r1, [pc, #120]	; (8019490 <etharp_find_entry+0x2d4>)
 8019418:	4613      	mov	r3, r2
 801941a:	005b      	lsls	r3, r3, #1
 801941c:	4413      	add	r3, r2
 801941e:	00db      	lsls	r3, r3, #3
 8019420:	440b      	add	r3, r1
 8019422:	3314      	adds	r3, #20
 8019424:	781b      	ldrb	r3, [r3, #0]
 8019426:	2b00      	cmp	r3, #0
 8019428:	d006      	beq.n	8019438 <etharp_find_entry+0x27c>
 801942a:	4b1a      	ldr	r3, [pc, #104]	; (8019494 <etharp_find_entry+0x2d8>)
 801942c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8019430:	491d      	ldr	r1, [pc, #116]	; (80194a8 <etharp_find_entry+0x2ec>)
 8019432:	481a      	ldr	r0, [pc, #104]	; (801949c <etharp_find_entry+0x2e0>)
 8019434:	f002 faae 	bl	801b994 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8019438:	68fb      	ldr	r3, [r7, #12]
 801943a:	2b00      	cmp	r3, #0
 801943c:	d00b      	beq.n	8019456 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801943e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	6819      	ldr	r1, [r3, #0]
 8019446:	4812      	ldr	r0, [pc, #72]	; (8019490 <etharp_find_entry+0x2d4>)
 8019448:	4613      	mov	r3, r2
 801944a:	005b      	lsls	r3, r3, #1
 801944c:	4413      	add	r3, r2
 801944e:	00db      	lsls	r3, r3, #3
 8019450:	4403      	add	r3, r0
 8019452:	3304      	adds	r3, #4
 8019454:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8019456:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801945a:	490d      	ldr	r1, [pc, #52]	; (8019490 <etharp_find_entry+0x2d4>)
 801945c:	4613      	mov	r3, r2
 801945e:	005b      	lsls	r3, r3, #1
 8019460:	4413      	add	r3, r2
 8019462:	00db      	lsls	r3, r3, #3
 8019464:	440b      	add	r3, r1
 8019466:	3312      	adds	r3, #18
 8019468:	2200      	movs	r2, #0
 801946a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801946c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019470:	4907      	ldr	r1, [pc, #28]	; (8019490 <etharp_find_entry+0x2d4>)
 8019472:	4613      	mov	r3, r2
 8019474:	005b      	lsls	r3, r3, #1
 8019476:	4413      	add	r3, r2
 8019478:	00db      	lsls	r3, r3, #3
 801947a:	440b      	add	r3, r1
 801947c:	3308      	adds	r3, #8
 801947e:	687a      	ldr	r2, [r7, #4]
 8019480:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8019482:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8019486:	4618      	mov	r0, r3
 8019488:	3728      	adds	r7, #40	; 0x28
 801948a:	46bd      	mov	sp, r7
 801948c:	bd80      	pop	{r7, pc}
 801948e:	bf00      	nop
 8019490:	200110ec 	.word	0x200110ec
 8019494:	0801ff00 	.word	0x0801ff00
 8019498:	0801ff38 	.word	0x0801ff38
 801949c:	0801ff78 	.word	0x0801ff78
 80194a0:	0801ffa0 	.word	0x0801ffa0
 80194a4:	0801ffb8 	.word	0x0801ffb8
 80194a8:	0801ffcc 	.word	0x0801ffcc

080194ac <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80194ac:	b580      	push	{r7, lr}
 80194ae:	b088      	sub	sp, #32
 80194b0:	af02      	add	r7, sp, #8
 80194b2:	60f8      	str	r0, [r7, #12]
 80194b4:	60b9      	str	r1, [r7, #8]
 80194b6:	607a      	str	r2, [r7, #4]
 80194b8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80194ba:	68fb      	ldr	r3, [r7, #12]
 80194bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80194c0:	2b06      	cmp	r3, #6
 80194c2:	d006      	beq.n	80194d2 <etharp_update_arp_entry+0x26>
 80194c4:	4b48      	ldr	r3, [pc, #288]	; (80195e8 <etharp_update_arp_entry+0x13c>)
 80194c6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80194ca:	4948      	ldr	r1, [pc, #288]	; (80195ec <etharp_update_arp_entry+0x140>)
 80194cc:	4848      	ldr	r0, [pc, #288]	; (80195f0 <etharp_update_arp_entry+0x144>)
 80194ce:	f002 fa61 	bl	801b994 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80194d2:	68bb      	ldr	r3, [r7, #8]
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d012      	beq.n	80194fe <etharp_update_arp_entry+0x52>
 80194d8:	68bb      	ldr	r3, [r7, #8]
 80194da:	681b      	ldr	r3, [r3, #0]
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d00e      	beq.n	80194fe <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80194e0:	68bb      	ldr	r3, [r7, #8]
 80194e2:	681b      	ldr	r3, [r3, #0]
 80194e4:	68f9      	ldr	r1, [r7, #12]
 80194e6:	4618      	mov	r0, r3
 80194e8:	f001 f8fe 	bl	801a6e8 <ip4_addr_isbroadcast_u32>
 80194ec:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d105      	bne.n	80194fe <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80194f2:	68bb      	ldr	r3, [r7, #8]
 80194f4:	681b      	ldr	r3, [r3, #0]
 80194f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80194fa:	2be0      	cmp	r3, #224	; 0xe0
 80194fc:	d102      	bne.n	8019504 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80194fe:	f06f 030f 	mvn.w	r3, #15
 8019502:	e06c      	b.n	80195de <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8019504:	78fb      	ldrb	r3, [r7, #3]
 8019506:	68fa      	ldr	r2, [r7, #12]
 8019508:	4619      	mov	r1, r3
 801950a:	68b8      	ldr	r0, [r7, #8]
 801950c:	f7ff fe56 	bl	80191bc <etharp_find_entry>
 8019510:	4603      	mov	r3, r0
 8019512:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8019514:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8019518:	2b00      	cmp	r3, #0
 801951a:	da02      	bge.n	8019522 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801951c:	8afb      	ldrh	r3, [r7, #22]
 801951e:	b25b      	sxtb	r3, r3
 8019520:	e05d      	b.n	80195de <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8019522:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019526:	4933      	ldr	r1, [pc, #204]	; (80195f4 <etharp_update_arp_entry+0x148>)
 8019528:	4613      	mov	r3, r2
 801952a:	005b      	lsls	r3, r3, #1
 801952c:	4413      	add	r3, r2
 801952e:	00db      	lsls	r3, r3, #3
 8019530:	440b      	add	r3, r1
 8019532:	3314      	adds	r3, #20
 8019534:	2202      	movs	r2, #2
 8019536:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8019538:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801953c:	492d      	ldr	r1, [pc, #180]	; (80195f4 <etharp_update_arp_entry+0x148>)
 801953e:	4613      	mov	r3, r2
 8019540:	005b      	lsls	r3, r3, #1
 8019542:	4413      	add	r3, r2
 8019544:	00db      	lsls	r3, r3, #3
 8019546:	440b      	add	r3, r1
 8019548:	3308      	adds	r3, #8
 801954a:	68fa      	ldr	r2, [r7, #12]
 801954c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801954e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019552:	4613      	mov	r3, r2
 8019554:	005b      	lsls	r3, r3, #1
 8019556:	4413      	add	r3, r2
 8019558:	00db      	lsls	r3, r3, #3
 801955a:	3308      	adds	r3, #8
 801955c:	4a25      	ldr	r2, [pc, #148]	; (80195f4 <etharp_update_arp_entry+0x148>)
 801955e:	4413      	add	r3, r2
 8019560:	3304      	adds	r3, #4
 8019562:	2206      	movs	r2, #6
 8019564:	6879      	ldr	r1, [r7, #4]
 8019566:	4618      	mov	r0, r3
 8019568:	f002 f9fe 	bl	801b968 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801956c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019570:	4920      	ldr	r1, [pc, #128]	; (80195f4 <etharp_update_arp_entry+0x148>)
 8019572:	4613      	mov	r3, r2
 8019574:	005b      	lsls	r3, r3, #1
 8019576:	4413      	add	r3, r2
 8019578:	00db      	lsls	r3, r3, #3
 801957a:	440b      	add	r3, r1
 801957c:	3312      	adds	r3, #18
 801957e:	2200      	movs	r2, #0
 8019580:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8019582:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019586:	491b      	ldr	r1, [pc, #108]	; (80195f4 <etharp_update_arp_entry+0x148>)
 8019588:	4613      	mov	r3, r2
 801958a:	005b      	lsls	r3, r3, #1
 801958c:	4413      	add	r3, r2
 801958e:	00db      	lsls	r3, r3, #3
 8019590:	440b      	add	r3, r1
 8019592:	681b      	ldr	r3, [r3, #0]
 8019594:	2b00      	cmp	r3, #0
 8019596:	d021      	beq.n	80195dc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8019598:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801959c:	4915      	ldr	r1, [pc, #84]	; (80195f4 <etharp_update_arp_entry+0x148>)
 801959e:	4613      	mov	r3, r2
 80195a0:	005b      	lsls	r3, r3, #1
 80195a2:	4413      	add	r3, r2
 80195a4:	00db      	lsls	r3, r3, #3
 80195a6:	440b      	add	r3, r1
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80195ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80195b0:	4910      	ldr	r1, [pc, #64]	; (80195f4 <etharp_update_arp_entry+0x148>)
 80195b2:	4613      	mov	r3, r2
 80195b4:	005b      	lsls	r3, r3, #1
 80195b6:	4413      	add	r3, r2
 80195b8:	00db      	lsls	r3, r3, #3
 80195ba:	440b      	add	r3, r1
 80195bc:	2200      	movs	r2, #0
 80195be:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80195c0:	68fb      	ldr	r3, [r7, #12]
 80195c2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80195c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80195ca:	9300      	str	r3, [sp, #0]
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	6939      	ldr	r1, [r7, #16]
 80195d0:	68f8      	ldr	r0, [r7, #12]
 80195d2:	f001 ff97 	bl	801b504 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80195d6:	6938      	ldr	r0, [r7, #16]
 80195d8:	f7f8 fe46 	bl	8012268 <pbuf_free>
  }
  return ERR_OK;
 80195dc:	2300      	movs	r3, #0
}
 80195de:	4618      	mov	r0, r3
 80195e0:	3718      	adds	r7, #24
 80195e2:	46bd      	mov	sp, r7
 80195e4:	bd80      	pop	{r7, pc}
 80195e6:	bf00      	nop
 80195e8:	0801ff00 	.word	0x0801ff00
 80195ec:	0801fff8 	.word	0x0801fff8
 80195f0:	0801ff78 	.word	0x0801ff78
 80195f4:	200110ec 	.word	0x200110ec

080195f8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80195f8:	b580      	push	{r7, lr}
 80195fa:	b084      	sub	sp, #16
 80195fc:	af00      	add	r7, sp, #0
 80195fe:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019600:	2300      	movs	r3, #0
 8019602:	60fb      	str	r3, [r7, #12]
 8019604:	e01e      	b.n	8019644 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8019606:	4913      	ldr	r1, [pc, #76]	; (8019654 <etharp_cleanup_netif+0x5c>)
 8019608:	68fa      	ldr	r2, [r7, #12]
 801960a:	4613      	mov	r3, r2
 801960c:	005b      	lsls	r3, r3, #1
 801960e:	4413      	add	r3, r2
 8019610:	00db      	lsls	r3, r3, #3
 8019612:	440b      	add	r3, r1
 8019614:	3314      	adds	r3, #20
 8019616:	781b      	ldrb	r3, [r3, #0]
 8019618:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801961a:	7afb      	ldrb	r3, [r7, #11]
 801961c:	2b00      	cmp	r3, #0
 801961e:	d00e      	beq.n	801963e <etharp_cleanup_netif+0x46>
 8019620:	490c      	ldr	r1, [pc, #48]	; (8019654 <etharp_cleanup_netif+0x5c>)
 8019622:	68fa      	ldr	r2, [r7, #12]
 8019624:	4613      	mov	r3, r2
 8019626:	005b      	lsls	r3, r3, #1
 8019628:	4413      	add	r3, r2
 801962a:	00db      	lsls	r3, r3, #3
 801962c:	440b      	add	r3, r1
 801962e:	3308      	adds	r3, #8
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	687a      	ldr	r2, [r7, #4]
 8019634:	429a      	cmp	r2, r3
 8019636:	d102      	bne.n	801963e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8019638:	68f8      	ldr	r0, [r7, #12]
 801963a:	f7ff fce5 	bl	8019008 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801963e:	68fb      	ldr	r3, [r7, #12]
 8019640:	3301      	adds	r3, #1
 8019642:	60fb      	str	r3, [r7, #12]
 8019644:	68fb      	ldr	r3, [r7, #12]
 8019646:	2b09      	cmp	r3, #9
 8019648:	dddd      	ble.n	8019606 <etharp_cleanup_netif+0xe>
    }
  }
}
 801964a:	bf00      	nop
 801964c:	bf00      	nop
 801964e:	3710      	adds	r7, #16
 8019650:	46bd      	mov	sp, r7
 8019652:	bd80      	pop	{r7, pc}
 8019654:	200110ec 	.word	0x200110ec

08019658 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8019658:	b5b0      	push	{r4, r5, r7, lr}
 801965a:	b08a      	sub	sp, #40	; 0x28
 801965c:	af04      	add	r7, sp, #16
 801965e:	6078      	str	r0, [r7, #4]
 8019660:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8019662:	683b      	ldr	r3, [r7, #0]
 8019664:	2b00      	cmp	r3, #0
 8019666:	d107      	bne.n	8019678 <etharp_input+0x20>
 8019668:	4b3d      	ldr	r3, [pc, #244]	; (8019760 <etharp_input+0x108>)
 801966a:	f240 228a 	movw	r2, #650	; 0x28a
 801966e:	493d      	ldr	r1, [pc, #244]	; (8019764 <etharp_input+0x10c>)
 8019670:	483d      	ldr	r0, [pc, #244]	; (8019768 <etharp_input+0x110>)
 8019672:	f002 f98f 	bl	801b994 <iprintf>
 8019676:	e06f      	b.n	8019758 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	685b      	ldr	r3, [r3, #4]
 801967c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801967e:	693b      	ldr	r3, [r7, #16]
 8019680:	881b      	ldrh	r3, [r3, #0]
 8019682:	b29b      	uxth	r3, r3
 8019684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019688:	d10c      	bne.n	80196a4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801968a:	693b      	ldr	r3, [r7, #16]
 801968c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801968e:	2b06      	cmp	r3, #6
 8019690:	d108      	bne.n	80196a4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8019692:	693b      	ldr	r3, [r7, #16]
 8019694:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8019696:	2b04      	cmp	r3, #4
 8019698:	d104      	bne.n	80196a4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801969a:	693b      	ldr	r3, [r7, #16]
 801969c:	885b      	ldrh	r3, [r3, #2]
 801969e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80196a0:	2b08      	cmp	r3, #8
 80196a2:	d003      	beq.n	80196ac <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80196a4:	6878      	ldr	r0, [r7, #4]
 80196a6:	f7f8 fddf 	bl	8012268 <pbuf_free>
    return;
 80196aa:	e055      	b.n	8019758 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80196ac:	693b      	ldr	r3, [r7, #16]
 80196ae:	330e      	adds	r3, #14
 80196b0:	681b      	ldr	r3, [r3, #0]
 80196b2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80196b4:	693b      	ldr	r3, [r7, #16]
 80196b6:	3318      	adds	r3, #24
 80196b8:	681b      	ldr	r3, [r3, #0]
 80196ba:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80196bc:	683b      	ldr	r3, [r7, #0]
 80196be:	3304      	adds	r3, #4
 80196c0:	681b      	ldr	r3, [r3, #0]
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d102      	bne.n	80196cc <etharp_input+0x74>
    for_us = 0;
 80196c6:	2300      	movs	r3, #0
 80196c8:	75fb      	strb	r3, [r7, #23]
 80196ca:	e009      	b.n	80196e0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80196cc:	68ba      	ldr	r2, [r7, #8]
 80196ce:	683b      	ldr	r3, [r7, #0]
 80196d0:	3304      	adds	r3, #4
 80196d2:	681b      	ldr	r3, [r3, #0]
 80196d4:	429a      	cmp	r2, r3
 80196d6:	bf0c      	ite	eq
 80196d8:	2301      	moveq	r3, #1
 80196da:	2300      	movne	r3, #0
 80196dc:	b2db      	uxtb	r3, r3
 80196de:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80196e0:	693b      	ldr	r3, [r7, #16]
 80196e2:	f103 0208 	add.w	r2, r3, #8
 80196e6:	7dfb      	ldrb	r3, [r7, #23]
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	d001      	beq.n	80196f0 <etharp_input+0x98>
 80196ec:	2301      	movs	r3, #1
 80196ee:	e000      	b.n	80196f2 <etharp_input+0x9a>
 80196f0:	2302      	movs	r3, #2
 80196f2:	f107 010c 	add.w	r1, r7, #12
 80196f6:	6838      	ldr	r0, [r7, #0]
 80196f8:	f7ff fed8 	bl	80194ac <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80196fc:	693b      	ldr	r3, [r7, #16]
 80196fe:	88db      	ldrh	r3, [r3, #6]
 8019700:	b29b      	uxth	r3, r3
 8019702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019706:	d003      	beq.n	8019710 <etharp_input+0xb8>
 8019708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801970c:	d01e      	beq.n	801974c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801970e:	e020      	b.n	8019752 <etharp_input+0xfa>
      if (for_us) {
 8019710:	7dfb      	ldrb	r3, [r7, #23]
 8019712:	2b00      	cmp	r3, #0
 8019714:	d01c      	beq.n	8019750 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8019716:	683b      	ldr	r3, [r7, #0]
 8019718:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801971c:	693b      	ldr	r3, [r7, #16]
 801971e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8019722:	683b      	ldr	r3, [r7, #0]
 8019724:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8019728:	683b      	ldr	r3, [r7, #0]
 801972a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801972c:	693a      	ldr	r2, [r7, #16]
 801972e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8019730:	2102      	movs	r1, #2
 8019732:	9103      	str	r1, [sp, #12]
 8019734:	f107 010c 	add.w	r1, r7, #12
 8019738:	9102      	str	r1, [sp, #8]
 801973a:	9201      	str	r2, [sp, #4]
 801973c:	9300      	str	r3, [sp, #0]
 801973e:	462b      	mov	r3, r5
 8019740:	4622      	mov	r2, r4
 8019742:	4601      	mov	r1, r0
 8019744:	6838      	ldr	r0, [r7, #0]
 8019746:	f000 faeb 	bl	8019d20 <etharp_raw>
      break;
 801974a:	e001      	b.n	8019750 <etharp_input+0xf8>
      break;
 801974c:	bf00      	nop
 801974e:	e000      	b.n	8019752 <etharp_input+0xfa>
      break;
 8019750:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8019752:	6878      	ldr	r0, [r7, #4]
 8019754:	f7f8 fd88 	bl	8012268 <pbuf_free>
}
 8019758:	3718      	adds	r7, #24
 801975a:	46bd      	mov	sp, r7
 801975c:	bdb0      	pop	{r4, r5, r7, pc}
 801975e:	bf00      	nop
 8019760:	0801ff00 	.word	0x0801ff00
 8019764:	08020050 	.word	0x08020050
 8019768:	0801ff78 	.word	0x0801ff78

0801976c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801976c:	b580      	push	{r7, lr}
 801976e:	b086      	sub	sp, #24
 8019770:	af02      	add	r7, sp, #8
 8019772:	60f8      	str	r0, [r7, #12]
 8019774:	60b9      	str	r1, [r7, #8]
 8019776:	4613      	mov	r3, r2
 8019778:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801977a:	79fa      	ldrb	r2, [r7, #7]
 801977c:	4944      	ldr	r1, [pc, #272]	; (8019890 <etharp_output_to_arp_index+0x124>)
 801977e:	4613      	mov	r3, r2
 8019780:	005b      	lsls	r3, r3, #1
 8019782:	4413      	add	r3, r2
 8019784:	00db      	lsls	r3, r3, #3
 8019786:	440b      	add	r3, r1
 8019788:	3314      	adds	r3, #20
 801978a:	781b      	ldrb	r3, [r3, #0]
 801978c:	2b01      	cmp	r3, #1
 801978e:	d806      	bhi.n	801979e <etharp_output_to_arp_index+0x32>
 8019790:	4b40      	ldr	r3, [pc, #256]	; (8019894 <etharp_output_to_arp_index+0x128>)
 8019792:	f240 22ee 	movw	r2, #750	; 0x2ee
 8019796:	4940      	ldr	r1, [pc, #256]	; (8019898 <etharp_output_to_arp_index+0x12c>)
 8019798:	4840      	ldr	r0, [pc, #256]	; (801989c <etharp_output_to_arp_index+0x130>)
 801979a:	f002 f8fb 	bl	801b994 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801979e:	79fa      	ldrb	r2, [r7, #7]
 80197a0:	493b      	ldr	r1, [pc, #236]	; (8019890 <etharp_output_to_arp_index+0x124>)
 80197a2:	4613      	mov	r3, r2
 80197a4:	005b      	lsls	r3, r3, #1
 80197a6:	4413      	add	r3, r2
 80197a8:	00db      	lsls	r3, r3, #3
 80197aa:	440b      	add	r3, r1
 80197ac:	3314      	adds	r3, #20
 80197ae:	781b      	ldrb	r3, [r3, #0]
 80197b0:	2b02      	cmp	r3, #2
 80197b2:	d153      	bne.n	801985c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80197b4:	79fa      	ldrb	r2, [r7, #7]
 80197b6:	4936      	ldr	r1, [pc, #216]	; (8019890 <etharp_output_to_arp_index+0x124>)
 80197b8:	4613      	mov	r3, r2
 80197ba:	005b      	lsls	r3, r3, #1
 80197bc:	4413      	add	r3, r2
 80197be:	00db      	lsls	r3, r3, #3
 80197c0:	440b      	add	r3, r1
 80197c2:	3312      	adds	r3, #18
 80197c4:	881b      	ldrh	r3, [r3, #0]
 80197c6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80197ca:	d919      	bls.n	8019800 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80197cc:	79fa      	ldrb	r2, [r7, #7]
 80197ce:	4613      	mov	r3, r2
 80197d0:	005b      	lsls	r3, r3, #1
 80197d2:	4413      	add	r3, r2
 80197d4:	00db      	lsls	r3, r3, #3
 80197d6:	4a2e      	ldr	r2, [pc, #184]	; (8019890 <etharp_output_to_arp_index+0x124>)
 80197d8:	4413      	add	r3, r2
 80197da:	3304      	adds	r3, #4
 80197dc:	4619      	mov	r1, r3
 80197de:	68f8      	ldr	r0, [r7, #12]
 80197e0:	f000 fb4c 	bl	8019e7c <etharp_request>
 80197e4:	4603      	mov	r3, r0
 80197e6:	2b00      	cmp	r3, #0
 80197e8:	d138      	bne.n	801985c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80197ea:	79fa      	ldrb	r2, [r7, #7]
 80197ec:	4928      	ldr	r1, [pc, #160]	; (8019890 <etharp_output_to_arp_index+0x124>)
 80197ee:	4613      	mov	r3, r2
 80197f0:	005b      	lsls	r3, r3, #1
 80197f2:	4413      	add	r3, r2
 80197f4:	00db      	lsls	r3, r3, #3
 80197f6:	440b      	add	r3, r1
 80197f8:	3314      	adds	r3, #20
 80197fa:	2203      	movs	r2, #3
 80197fc:	701a      	strb	r2, [r3, #0]
 80197fe:	e02d      	b.n	801985c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8019800:	79fa      	ldrb	r2, [r7, #7]
 8019802:	4923      	ldr	r1, [pc, #140]	; (8019890 <etharp_output_to_arp_index+0x124>)
 8019804:	4613      	mov	r3, r2
 8019806:	005b      	lsls	r3, r3, #1
 8019808:	4413      	add	r3, r2
 801980a:	00db      	lsls	r3, r3, #3
 801980c:	440b      	add	r3, r1
 801980e:	3312      	adds	r3, #18
 8019810:	881b      	ldrh	r3, [r3, #0]
 8019812:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8019816:	d321      	bcc.n	801985c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8019818:	79fa      	ldrb	r2, [r7, #7]
 801981a:	4613      	mov	r3, r2
 801981c:	005b      	lsls	r3, r3, #1
 801981e:	4413      	add	r3, r2
 8019820:	00db      	lsls	r3, r3, #3
 8019822:	4a1b      	ldr	r2, [pc, #108]	; (8019890 <etharp_output_to_arp_index+0x124>)
 8019824:	4413      	add	r3, r2
 8019826:	1d19      	adds	r1, r3, #4
 8019828:	79fa      	ldrb	r2, [r7, #7]
 801982a:	4613      	mov	r3, r2
 801982c:	005b      	lsls	r3, r3, #1
 801982e:	4413      	add	r3, r2
 8019830:	00db      	lsls	r3, r3, #3
 8019832:	3308      	adds	r3, #8
 8019834:	4a16      	ldr	r2, [pc, #88]	; (8019890 <etharp_output_to_arp_index+0x124>)
 8019836:	4413      	add	r3, r2
 8019838:	3304      	adds	r3, #4
 801983a:	461a      	mov	r2, r3
 801983c:	68f8      	ldr	r0, [r7, #12]
 801983e:	f000 fafb 	bl	8019e38 <etharp_request_dst>
 8019842:	4603      	mov	r3, r0
 8019844:	2b00      	cmp	r3, #0
 8019846:	d109      	bne.n	801985c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8019848:	79fa      	ldrb	r2, [r7, #7]
 801984a:	4911      	ldr	r1, [pc, #68]	; (8019890 <etharp_output_to_arp_index+0x124>)
 801984c:	4613      	mov	r3, r2
 801984e:	005b      	lsls	r3, r3, #1
 8019850:	4413      	add	r3, r2
 8019852:	00db      	lsls	r3, r3, #3
 8019854:	440b      	add	r3, r1
 8019856:	3314      	adds	r3, #20
 8019858:	2203      	movs	r2, #3
 801985a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801985c:	68fb      	ldr	r3, [r7, #12]
 801985e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8019862:	79fa      	ldrb	r2, [r7, #7]
 8019864:	4613      	mov	r3, r2
 8019866:	005b      	lsls	r3, r3, #1
 8019868:	4413      	add	r3, r2
 801986a:	00db      	lsls	r3, r3, #3
 801986c:	3308      	adds	r3, #8
 801986e:	4a08      	ldr	r2, [pc, #32]	; (8019890 <etharp_output_to_arp_index+0x124>)
 8019870:	4413      	add	r3, r2
 8019872:	3304      	adds	r3, #4
 8019874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019878:	9200      	str	r2, [sp, #0]
 801987a:	460a      	mov	r2, r1
 801987c:	68b9      	ldr	r1, [r7, #8]
 801987e:	68f8      	ldr	r0, [r7, #12]
 8019880:	f001 fe40 	bl	801b504 <ethernet_output>
 8019884:	4603      	mov	r3, r0
}
 8019886:	4618      	mov	r0, r3
 8019888:	3710      	adds	r7, #16
 801988a:	46bd      	mov	sp, r7
 801988c:	bd80      	pop	{r7, pc}
 801988e:	bf00      	nop
 8019890:	200110ec 	.word	0x200110ec
 8019894:	0801ff00 	.word	0x0801ff00
 8019898:	08020070 	.word	0x08020070
 801989c:	0801ff78 	.word	0x0801ff78

080198a0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80198a0:	b580      	push	{r7, lr}
 80198a2:	b08a      	sub	sp, #40	; 0x28
 80198a4:	af02      	add	r7, sp, #8
 80198a6:	60f8      	str	r0, [r7, #12]
 80198a8:	60b9      	str	r1, [r7, #8]
 80198aa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80198b0:	68fb      	ldr	r3, [r7, #12]
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	d106      	bne.n	80198c4 <etharp_output+0x24>
 80198b6:	4b73      	ldr	r3, [pc, #460]	; (8019a84 <etharp_output+0x1e4>)
 80198b8:	f240 321e 	movw	r2, #798	; 0x31e
 80198bc:	4972      	ldr	r1, [pc, #456]	; (8019a88 <etharp_output+0x1e8>)
 80198be:	4873      	ldr	r0, [pc, #460]	; (8019a8c <etharp_output+0x1ec>)
 80198c0:	f002 f868 	bl	801b994 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80198c4:	68bb      	ldr	r3, [r7, #8]
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d106      	bne.n	80198d8 <etharp_output+0x38>
 80198ca:	4b6e      	ldr	r3, [pc, #440]	; (8019a84 <etharp_output+0x1e4>)
 80198cc:	f240 321f 	movw	r2, #799	; 0x31f
 80198d0:	496f      	ldr	r1, [pc, #444]	; (8019a90 <etharp_output+0x1f0>)
 80198d2:	486e      	ldr	r0, [pc, #440]	; (8019a8c <etharp_output+0x1ec>)
 80198d4:	f002 f85e 	bl	801b994 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	2b00      	cmp	r3, #0
 80198dc:	d106      	bne.n	80198ec <etharp_output+0x4c>
 80198de:	4b69      	ldr	r3, [pc, #420]	; (8019a84 <etharp_output+0x1e4>)
 80198e0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80198e4:	496b      	ldr	r1, [pc, #428]	; (8019a94 <etharp_output+0x1f4>)
 80198e6:	4869      	ldr	r0, [pc, #420]	; (8019a8c <etharp_output+0x1ec>)
 80198e8:	f002 f854 	bl	801b994 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	681b      	ldr	r3, [r3, #0]
 80198f0:	68f9      	ldr	r1, [r7, #12]
 80198f2:	4618      	mov	r0, r3
 80198f4:	f000 fef8 	bl	801a6e8 <ip4_addr_isbroadcast_u32>
 80198f8:	4603      	mov	r3, r0
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	d002      	beq.n	8019904 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80198fe:	4b66      	ldr	r3, [pc, #408]	; (8019a98 <etharp_output+0x1f8>)
 8019900:	61fb      	str	r3, [r7, #28]
 8019902:	e0af      	b.n	8019a64 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	681b      	ldr	r3, [r3, #0]
 8019908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801990c:	2be0      	cmp	r3, #224	; 0xe0
 801990e:	d118      	bne.n	8019942 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8019910:	2301      	movs	r3, #1
 8019912:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8019914:	2300      	movs	r3, #0
 8019916:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8019918:	235e      	movs	r3, #94	; 0x5e
 801991a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	3301      	adds	r3, #1
 8019920:	781b      	ldrb	r3, [r3, #0]
 8019922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019926:	b2db      	uxtb	r3, r3
 8019928:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	3302      	adds	r3, #2
 801992e:	781b      	ldrb	r3, [r3, #0]
 8019930:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	3303      	adds	r3, #3
 8019936:	781b      	ldrb	r3, [r3, #0]
 8019938:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801993a:	f107 0310 	add.w	r3, r7, #16
 801993e:	61fb      	str	r3, [r7, #28]
 8019940:	e090      	b.n	8019a64 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	681a      	ldr	r2, [r3, #0]
 8019946:	68fb      	ldr	r3, [r7, #12]
 8019948:	3304      	adds	r3, #4
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	405a      	eors	r2, r3
 801994e:	68fb      	ldr	r3, [r7, #12]
 8019950:	3308      	adds	r3, #8
 8019952:	681b      	ldr	r3, [r3, #0]
 8019954:	4013      	ands	r3, r2
 8019956:	2b00      	cmp	r3, #0
 8019958:	d012      	beq.n	8019980 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	681b      	ldr	r3, [r3, #0]
 801995e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019960:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8019964:	4293      	cmp	r3, r2
 8019966:	d00b      	beq.n	8019980 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8019968:	68fb      	ldr	r3, [r7, #12]
 801996a:	330c      	adds	r3, #12
 801996c:	681b      	ldr	r3, [r3, #0]
 801996e:	2b00      	cmp	r3, #0
 8019970:	d003      	beq.n	801997a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8019972:	68fb      	ldr	r3, [r7, #12]
 8019974:	330c      	adds	r3, #12
 8019976:	61bb      	str	r3, [r7, #24]
 8019978:	e002      	b.n	8019980 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801997a:	f06f 0303 	mvn.w	r3, #3
 801997e:	e07d      	b.n	8019a7c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019980:	4b46      	ldr	r3, [pc, #280]	; (8019a9c <etharp_output+0x1fc>)
 8019982:	781b      	ldrb	r3, [r3, #0]
 8019984:	4619      	mov	r1, r3
 8019986:	4a46      	ldr	r2, [pc, #280]	; (8019aa0 <etharp_output+0x200>)
 8019988:	460b      	mov	r3, r1
 801998a:	005b      	lsls	r3, r3, #1
 801998c:	440b      	add	r3, r1
 801998e:	00db      	lsls	r3, r3, #3
 8019990:	4413      	add	r3, r2
 8019992:	3314      	adds	r3, #20
 8019994:	781b      	ldrb	r3, [r3, #0]
 8019996:	2b01      	cmp	r3, #1
 8019998:	d925      	bls.n	80199e6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801999a:	4b40      	ldr	r3, [pc, #256]	; (8019a9c <etharp_output+0x1fc>)
 801999c:	781b      	ldrb	r3, [r3, #0]
 801999e:	4619      	mov	r1, r3
 80199a0:	4a3f      	ldr	r2, [pc, #252]	; (8019aa0 <etharp_output+0x200>)
 80199a2:	460b      	mov	r3, r1
 80199a4:	005b      	lsls	r3, r3, #1
 80199a6:	440b      	add	r3, r1
 80199a8:	00db      	lsls	r3, r3, #3
 80199aa:	4413      	add	r3, r2
 80199ac:	3308      	adds	r3, #8
 80199ae:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80199b0:	68fa      	ldr	r2, [r7, #12]
 80199b2:	429a      	cmp	r2, r3
 80199b4:	d117      	bne.n	80199e6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80199b6:	69bb      	ldr	r3, [r7, #24]
 80199b8:	681a      	ldr	r2, [r3, #0]
 80199ba:	4b38      	ldr	r3, [pc, #224]	; (8019a9c <etharp_output+0x1fc>)
 80199bc:	781b      	ldrb	r3, [r3, #0]
 80199be:	4618      	mov	r0, r3
 80199c0:	4937      	ldr	r1, [pc, #220]	; (8019aa0 <etharp_output+0x200>)
 80199c2:	4603      	mov	r3, r0
 80199c4:	005b      	lsls	r3, r3, #1
 80199c6:	4403      	add	r3, r0
 80199c8:	00db      	lsls	r3, r3, #3
 80199ca:	440b      	add	r3, r1
 80199cc:	3304      	adds	r3, #4
 80199ce:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80199d0:	429a      	cmp	r2, r3
 80199d2:	d108      	bne.n	80199e6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80199d4:	4b31      	ldr	r3, [pc, #196]	; (8019a9c <etharp_output+0x1fc>)
 80199d6:	781b      	ldrb	r3, [r3, #0]
 80199d8:	461a      	mov	r2, r3
 80199da:	68b9      	ldr	r1, [r7, #8]
 80199dc:	68f8      	ldr	r0, [r7, #12]
 80199de:	f7ff fec5 	bl	801976c <etharp_output_to_arp_index>
 80199e2:	4603      	mov	r3, r0
 80199e4:	e04a      	b.n	8019a7c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80199e6:	2300      	movs	r3, #0
 80199e8:	75fb      	strb	r3, [r7, #23]
 80199ea:	e031      	b.n	8019a50 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80199ec:	7dfa      	ldrb	r2, [r7, #23]
 80199ee:	492c      	ldr	r1, [pc, #176]	; (8019aa0 <etharp_output+0x200>)
 80199f0:	4613      	mov	r3, r2
 80199f2:	005b      	lsls	r3, r3, #1
 80199f4:	4413      	add	r3, r2
 80199f6:	00db      	lsls	r3, r3, #3
 80199f8:	440b      	add	r3, r1
 80199fa:	3314      	adds	r3, #20
 80199fc:	781b      	ldrb	r3, [r3, #0]
 80199fe:	2b01      	cmp	r3, #1
 8019a00:	d923      	bls.n	8019a4a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8019a02:	7dfa      	ldrb	r2, [r7, #23]
 8019a04:	4926      	ldr	r1, [pc, #152]	; (8019aa0 <etharp_output+0x200>)
 8019a06:	4613      	mov	r3, r2
 8019a08:	005b      	lsls	r3, r3, #1
 8019a0a:	4413      	add	r3, r2
 8019a0c:	00db      	lsls	r3, r3, #3
 8019a0e:	440b      	add	r3, r1
 8019a10:	3308      	adds	r3, #8
 8019a12:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019a14:	68fa      	ldr	r2, [r7, #12]
 8019a16:	429a      	cmp	r2, r3
 8019a18:	d117      	bne.n	8019a4a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8019a1a:	69bb      	ldr	r3, [r7, #24]
 8019a1c:	6819      	ldr	r1, [r3, #0]
 8019a1e:	7dfa      	ldrb	r2, [r7, #23]
 8019a20:	481f      	ldr	r0, [pc, #124]	; (8019aa0 <etharp_output+0x200>)
 8019a22:	4613      	mov	r3, r2
 8019a24:	005b      	lsls	r3, r3, #1
 8019a26:	4413      	add	r3, r2
 8019a28:	00db      	lsls	r3, r3, #3
 8019a2a:	4403      	add	r3, r0
 8019a2c:	3304      	adds	r3, #4
 8019a2e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8019a30:	4299      	cmp	r1, r3
 8019a32:	d10a      	bne.n	8019a4a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8019a34:	4a19      	ldr	r2, [pc, #100]	; (8019a9c <etharp_output+0x1fc>)
 8019a36:	7dfb      	ldrb	r3, [r7, #23]
 8019a38:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8019a3a:	7dfb      	ldrb	r3, [r7, #23]
 8019a3c:	461a      	mov	r2, r3
 8019a3e:	68b9      	ldr	r1, [r7, #8]
 8019a40:	68f8      	ldr	r0, [r7, #12]
 8019a42:	f7ff fe93 	bl	801976c <etharp_output_to_arp_index>
 8019a46:	4603      	mov	r3, r0
 8019a48:	e018      	b.n	8019a7c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019a4a:	7dfb      	ldrb	r3, [r7, #23]
 8019a4c:	3301      	adds	r3, #1
 8019a4e:	75fb      	strb	r3, [r7, #23]
 8019a50:	7dfb      	ldrb	r3, [r7, #23]
 8019a52:	2b09      	cmp	r3, #9
 8019a54:	d9ca      	bls.n	80199ec <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8019a56:	68ba      	ldr	r2, [r7, #8]
 8019a58:	69b9      	ldr	r1, [r7, #24]
 8019a5a:	68f8      	ldr	r0, [r7, #12]
 8019a5c:	f000 f822 	bl	8019aa4 <etharp_query>
 8019a60:	4603      	mov	r3, r0
 8019a62:	e00b      	b.n	8019a7c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8019a64:	68fb      	ldr	r3, [r7, #12]
 8019a66:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8019a6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019a6e:	9300      	str	r3, [sp, #0]
 8019a70:	69fb      	ldr	r3, [r7, #28]
 8019a72:	68b9      	ldr	r1, [r7, #8]
 8019a74:	68f8      	ldr	r0, [r7, #12]
 8019a76:	f001 fd45 	bl	801b504 <ethernet_output>
 8019a7a:	4603      	mov	r3, r0
}
 8019a7c:	4618      	mov	r0, r3
 8019a7e:	3720      	adds	r7, #32
 8019a80:	46bd      	mov	sp, r7
 8019a82:	bd80      	pop	{r7, pc}
 8019a84:	0801ff00 	.word	0x0801ff00
 8019a88:	08020050 	.word	0x08020050
 8019a8c:	0801ff78 	.word	0x0801ff78
 8019a90:	080200a0 	.word	0x080200a0
 8019a94:	08020040 	.word	0x08020040
 8019a98:	080207b8 	.word	0x080207b8
 8019a9c:	200111dc 	.word	0x200111dc
 8019aa0:	200110ec 	.word	0x200110ec

08019aa4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8019aa4:	b580      	push	{r7, lr}
 8019aa6:	b08c      	sub	sp, #48	; 0x30
 8019aa8:	af02      	add	r7, sp, #8
 8019aaa:	60f8      	str	r0, [r7, #12]
 8019aac:	60b9      	str	r1, [r7, #8]
 8019aae:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8019ab0:	68fb      	ldr	r3, [r7, #12]
 8019ab2:	3326      	adds	r3, #38	; 0x26
 8019ab4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8019ab6:	23ff      	movs	r3, #255	; 0xff
 8019ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8019abc:	2300      	movs	r3, #0
 8019abe:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019ac0:	68bb      	ldr	r3, [r7, #8]
 8019ac2:	681b      	ldr	r3, [r3, #0]
 8019ac4:	68f9      	ldr	r1, [r7, #12]
 8019ac6:	4618      	mov	r0, r3
 8019ac8:	f000 fe0e 	bl	801a6e8 <ip4_addr_isbroadcast_u32>
 8019acc:	4603      	mov	r3, r0
 8019ace:	2b00      	cmp	r3, #0
 8019ad0:	d10c      	bne.n	8019aec <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019ad2:	68bb      	ldr	r3, [r7, #8]
 8019ad4:	681b      	ldr	r3, [r3, #0]
 8019ad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019ada:	2be0      	cmp	r3, #224	; 0xe0
 8019adc:	d006      	beq.n	8019aec <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019ade:	68bb      	ldr	r3, [r7, #8]
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	d003      	beq.n	8019aec <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8019ae4:	68bb      	ldr	r3, [r7, #8]
 8019ae6:	681b      	ldr	r3, [r3, #0]
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	d102      	bne.n	8019af2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019aec:	f06f 030f 	mvn.w	r3, #15
 8019af0:	e101      	b.n	8019cf6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8019af2:	68fa      	ldr	r2, [r7, #12]
 8019af4:	2101      	movs	r1, #1
 8019af6:	68b8      	ldr	r0, [r7, #8]
 8019af8:	f7ff fb60 	bl	80191bc <etharp_find_entry>
 8019afc:	4603      	mov	r3, r0
 8019afe:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8019b00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	da02      	bge.n	8019b0e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8019b08:	8a7b      	ldrh	r3, [r7, #18]
 8019b0a:	b25b      	sxtb	r3, r3
 8019b0c:	e0f3      	b.n	8019cf6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8019b0e:	8a7b      	ldrh	r3, [r7, #18]
 8019b10:	2b7e      	cmp	r3, #126	; 0x7e
 8019b12:	d906      	bls.n	8019b22 <etharp_query+0x7e>
 8019b14:	4b7a      	ldr	r3, [pc, #488]	; (8019d00 <etharp_query+0x25c>)
 8019b16:	f240 32c1 	movw	r2, #961	; 0x3c1
 8019b1a:	497a      	ldr	r1, [pc, #488]	; (8019d04 <etharp_query+0x260>)
 8019b1c:	487a      	ldr	r0, [pc, #488]	; (8019d08 <etharp_query+0x264>)
 8019b1e:	f001 ff39 	bl	801b994 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8019b22:	8a7b      	ldrh	r3, [r7, #18]
 8019b24:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8019b26:	7c7a      	ldrb	r2, [r7, #17]
 8019b28:	4978      	ldr	r1, [pc, #480]	; (8019d0c <etharp_query+0x268>)
 8019b2a:	4613      	mov	r3, r2
 8019b2c:	005b      	lsls	r3, r3, #1
 8019b2e:	4413      	add	r3, r2
 8019b30:	00db      	lsls	r3, r3, #3
 8019b32:	440b      	add	r3, r1
 8019b34:	3314      	adds	r3, #20
 8019b36:	781b      	ldrb	r3, [r3, #0]
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	d115      	bne.n	8019b68 <etharp_query+0xc4>
    is_new_entry = 1;
 8019b3c:	2301      	movs	r3, #1
 8019b3e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8019b40:	7c7a      	ldrb	r2, [r7, #17]
 8019b42:	4972      	ldr	r1, [pc, #456]	; (8019d0c <etharp_query+0x268>)
 8019b44:	4613      	mov	r3, r2
 8019b46:	005b      	lsls	r3, r3, #1
 8019b48:	4413      	add	r3, r2
 8019b4a:	00db      	lsls	r3, r3, #3
 8019b4c:	440b      	add	r3, r1
 8019b4e:	3314      	adds	r3, #20
 8019b50:	2201      	movs	r2, #1
 8019b52:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8019b54:	7c7a      	ldrb	r2, [r7, #17]
 8019b56:	496d      	ldr	r1, [pc, #436]	; (8019d0c <etharp_query+0x268>)
 8019b58:	4613      	mov	r3, r2
 8019b5a:	005b      	lsls	r3, r3, #1
 8019b5c:	4413      	add	r3, r2
 8019b5e:	00db      	lsls	r3, r3, #3
 8019b60:	440b      	add	r3, r1
 8019b62:	3308      	adds	r3, #8
 8019b64:	68fa      	ldr	r2, [r7, #12]
 8019b66:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8019b68:	7c7a      	ldrb	r2, [r7, #17]
 8019b6a:	4968      	ldr	r1, [pc, #416]	; (8019d0c <etharp_query+0x268>)
 8019b6c:	4613      	mov	r3, r2
 8019b6e:	005b      	lsls	r3, r3, #1
 8019b70:	4413      	add	r3, r2
 8019b72:	00db      	lsls	r3, r3, #3
 8019b74:	440b      	add	r3, r1
 8019b76:	3314      	adds	r3, #20
 8019b78:	781b      	ldrb	r3, [r3, #0]
 8019b7a:	2b01      	cmp	r3, #1
 8019b7c:	d011      	beq.n	8019ba2 <etharp_query+0xfe>
 8019b7e:	7c7a      	ldrb	r2, [r7, #17]
 8019b80:	4962      	ldr	r1, [pc, #392]	; (8019d0c <etharp_query+0x268>)
 8019b82:	4613      	mov	r3, r2
 8019b84:	005b      	lsls	r3, r3, #1
 8019b86:	4413      	add	r3, r2
 8019b88:	00db      	lsls	r3, r3, #3
 8019b8a:	440b      	add	r3, r1
 8019b8c:	3314      	adds	r3, #20
 8019b8e:	781b      	ldrb	r3, [r3, #0]
 8019b90:	2b01      	cmp	r3, #1
 8019b92:	d806      	bhi.n	8019ba2 <etharp_query+0xfe>
 8019b94:	4b5a      	ldr	r3, [pc, #360]	; (8019d00 <etharp_query+0x25c>)
 8019b96:	f240 32cd 	movw	r2, #973	; 0x3cd
 8019b9a:	495d      	ldr	r1, [pc, #372]	; (8019d10 <etharp_query+0x26c>)
 8019b9c:	485a      	ldr	r0, [pc, #360]	; (8019d08 <etharp_query+0x264>)
 8019b9e:	f001 fef9 	bl	801b994 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8019ba2:	6a3b      	ldr	r3, [r7, #32]
 8019ba4:	2b00      	cmp	r3, #0
 8019ba6:	d102      	bne.n	8019bae <etharp_query+0x10a>
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	d10c      	bne.n	8019bc8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8019bae:	68b9      	ldr	r1, [r7, #8]
 8019bb0:	68f8      	ldr	r0, [r7, #12]
 8019bb2:	f000 f963 	bl	8019e7c <etharp_request>
 8019bb6:	4603      	mov	r3, r0
 8019bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d102      	bne.n	8019bc8 <etharp_query+0x124>
      return result;
 8019bc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019bc6:	e096      	b.n	8019cf6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d106      	bne.n	8019bdc <etharp_query+0x138>
 8019bce:	4b4c      	ldr	r3, [pc, #304]	; (8019d00 <etharp_query+0x25c>)
 8019bd0:	f240 32e1 	movw	r2, #993	; 0x3e1
 8019bd4:	494f      	ldr	r1, [pc, #316]	; (8019d14 <etharp_query+0x270>)
 8019bd6:	484c      	ldr	r0, [pc, #304]	; (8019d08 <etharp_query+0x264>)
 8019bd8:	f001 fedc 	bl	801b994 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8019bdc:	7c7a      	ldrb	r2, [r7, #17]
 8019bde:	494b      	ldr	r1, [pc, #300]	; (8019d0c <etharp_query+0x268>)
 8019be0:	4613      	mov	r3, r2
 8019be2:	005b      	lsls	r3, r3, #1
 8019be4:	4413      	add	r3, r2
 8019be6:	00db      	lsls	r3, r3, #3
 8019be8:	440b      	add	r3, r1
 8019bea:	3314      	adds	r3, #20
 8019bec:	781b      	ldrb	r3, [r3, #0]
 8019bee:	2b01      	cmp	r3, #1
 8019bf0:	d917      	bls.n	8019c22 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8019bf2:	4a49      	ldr	r2, [pc, #292]	; (8019d18 <etharp_query+0x274>)
 8019bf4:	7c7b      	ldrb	r3, [r7, #17]
 8019bf6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8019bf8:	7c7a      	ldrb	r2, [r7, #17]
 8019bfa:	4613      	mov	r3, r2
 8019bfc:	005b      	lsls	r3, r3, #1
 8019bfe:	4413      	add	r3, r2
 8019c00:	00db      	lsls	r3, r3, #3
 8019c02:	3308      	adds	r3, #8
 8019c04:	4a41      	ldr	r2, [pc, #260]	; (8019d0c <etharp_query+0x268>)
 8019c06:	4413      	add	r3, r2
 8019c08:	3304      	adds	r3, #4
 8019c0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019c0e:	9200      	str	r2, [sp, #0]
 8019c10:	697a      	ldr	r2, [r7, #20]
 8019c12:	6879      	ldr	r1, [r7, #4]
 8019c14:	68f8      	ldr	r0, [r7, #12]
 8019c16:	f001 fc75 	bl	801b504 <ethernet_output>
 8019c1a:	4603      	mov	r3, r0
 8019c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019c20:	e067      	b.n	8019cf2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019c22:	7c7a      	ldrb	r2, [r7, #17]
 8019c24:	4939      	ldr	r1, [pc, #228]	; (8019d0c <etharp_query+0x268>)
 8019c26:	4613      	mov	r3, r2
 8019c28:	005b      	lsls	r3, r3, #1
 8019c2a:	4413      	add	r3, r2
 8019c2c:	00db      	lsls	r3, r3, #3
 8019c2e:	440b      	add	r3, r1
 8019c30:	3314      	adds	r3, #20
 8019c32:	781b      	ldrb	r3, [r3, #0]
 8019c34:	2b01      	cmp	r3, #1
 8019c36:	d15c      	bne.n	8019cf2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8019c38:	2300      	movs	r3, #0
 8019c3a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019c40:	e01c      	b.n	8019c7c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8019c42:	69fb      	ldr	r3, [r7, #28]
 8019c44:	895a      	ldrh	r2, [r3, #10]
 8019c46:	69fb      	ldr	r3, [r7, #28]
 8019c48:	891b      	ldrh	r3, [r3, #8]
 8019c4a:	429a      	cmp	r2, r3
 8019c4c:	d10a      	bne.n	8019c64 <etharp_query+0x1c0>
 8019c4e:	69fb      	ldr	r3, [r7, #28]
 8019c50:	681b      	ldr	r3, [r3, #0]
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d006      	beq.n	8019c64 <etharp_query+0x1c0>
 8019c56:	4b2a      	ldr	r3, [pc, #168]	; (8019d00 <etharp_query+0x25c>)
 8019c58:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8019c5c:	492f      	ldr	r1, [pc, #188]	; (8019d1c <etharp_query+0x278>)
 8019c5e:	482a      	ldr	r0, [pc, #168]	; (8019d08 <etharp_query+0x264>)
 8019c60:	f001 fe98 	bl	801b994 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8019c64:	69fb      	ldr	r3, [r7, #28]
 8019c66:	7b1b      	ldrb	r3, [r3, #12]
 8019c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	d002      	beq.n	8019c76 <etharp_query+0x1d2>
        copy_needed = 1;
 8019c70:	2301      	movs	r3, #1
 8019c72:	61bb      	str	r3, [r7, #24]
        break;
 8019c74:	e005      	b.n	8019c82 <etharp_query+0x1de>
      }
      p = p->next;
 8019c76:	69fb      	ldr	r3, [r7, #28]
 8019c78:	681b      	ldr	r3, [r3, #0]
 8019c7a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019c7c:	69fb      	ldr	r3, [r7, #28]
 8019c7e:	2b00      	cmp	r3, #0
 8019c80:	d1df      	bne.n	8019c42 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8019c82:	69bb      	ldr	r3, [r7, #24]
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	d007      	beq.n	8019c98 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8019c88:	687a      	ldr	r2, [r7, #4]
 8019c8a:	f44f 7120 	mov.w	r1, #640	; 0x280
 8019c8e:	200e      	movs	r0, #14
 8019c90:	f7f8 fd52 	bl	8012738 <pbuf_clone>
 8019c94:	61f8      	str	r0, [r7, #28]
 8019c96:	e004      	b.n	8019ca2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8019c9c:	69f8      	ldr	r0, [r7, #28]
 8019c9e:	f7f8 fb89 	bl	80123b4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8019ca2:	69fb      	ldr	r3, [r7, #28]
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	d021      	beq.n	8019cec <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8019ca8:	7c7a      	ldrb	r2, [r7, #17]
 8019caa:	4918      	ldr	r1, [pc, #96]	; (8019d0c <etharp_query+0x268>)
 8019cac:	4613      	mov	r3, r2
 8019cae:	005b      	lsls	r3, r3, #1
 8019cb0:	4413      	add	r3, r2
 8019cb2:	00db      	lsls	r3, r3, #3
 8019cb4:	440b      	add	r3, r1
 8019cb6:	681b      	ldr	r3, [r3, #0]
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d00a      	beq.n	8019cd2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8019cbc:	7c7a      	ldrb	r2, [r7, #17]
 8019cbe:	4913      	ldr	r1, [pc, #76]	; (8019d0c <etharp_query+0x268>)
 8019cc0:	4613      	mov	r3, r2
 8019cc2:	005b      	lsls	r3, r3, #1
 8019cc4:	4413      	add	r3, r2
 8019cc6:	00db      	lsls	r3, r3, #3
 8019cc8:	440b      	add	r3, r1
 8019cca:	681b      	ldr	r3, [r3, #0]
 8019ccc:	4618      	mov	r0, r3
 8019cce:	f7f8 facb 	bl	8012268 <pbuf_free>
      }
      arp_table[i].q = p;
 8019cd2:	7c7a      	ldrb	r2, [r7, #17]
 8019cd4:	490d      	ldr	r1, [pc, #52]	; (8019d0c <etharp_query+0x268>)
 8019cd6:	4613      	mov	r3, r2
 8019cd8:	005b      	lsls	r3, r3, #1
 8019cda:	4413      	add	r3, r2
 8019cdc:	00db      	lsls	r3, r3, #3
 8019cde:	440b      	add	r3, r1
 8019ce0:	69fa      	ldr	r2, [r7, #28]
 8019ce2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8019ce4:	2300      	movs	r3, #0
 8019ce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019cea:	e002      	b.n	8019cf2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8019cec:	23ff      	movs	r3, #255	; 0xff
 8019cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8019cf2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8019cf6:	4618      	mov	r0, r3
 8019cf8:	3728      	adds	r7, #40	; 0x28
 8019cfa:	46bd      	mov	sp, r7
 8019cfc:	bd80      	pop	{r7, pc}
 8019cfe:	bf00      	nop
 8019d00:	0801ff00 	.word	0x0801ff00
 8019d04:	080200ac 	.word	0x080200ac
 8019d08:	0801ff78 	.word	0x0801ff78
 8019d0c:	200110ec 	.word	0x200110ec
 8019d10:	080200bc 	.word	0x080200bc
 8019d14:	080200a0 	.word	0x080200a0
 8019d18:	200111dc 	.word	0x200111dc
 8019d1c:	080200e4 	.word	0x080200e4

08019d20 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8019d20:	b580      	push	{r7, lr}
 8019d22:	b08a      	sub	sp, #40	; 0x28
 8019d24:	af02      	add	r7, sp, #8
 8019d26:	60f8      	str	r0, [r7, #12]
 8019d28:	60b9      	str	r1, [r7, #8]
 8019d2a:	607a      	str	r2, [r7, #4]
 8019d2c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8019d2e:	2300      	movs	r3, #0
 8019d30:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019d32:	68fb      	ldr	r3, [r7, #12]
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d106      	bne.n	8019d46 <etharp_raw+0x26>
 8019d38:	4b3a      	ldr	r3, [pc, #232]	; (8019e24 <etharp_raw+0x104>)
 8019d3a:	f240 4257 	movw	r2, #1111	; 0x457
 8019d3e:	493a      	ldr	r1, [pc, #232]	; (8019e28 <etharp_raw+0x108>)
 8019d40:	483a      	ldr	r0, [pc, #232]	; (8019e2c <etharp_raw+0x10c>)
 8019d42:	f001 fe27 	bl	801b994 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8019d46:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019d4a:	211c      	movs	r1, #28
 8019d4c:	200e      	movs	r0, #14
 8019d4e:	f7f7 ff75 	bl	8011c3c <pbuf_alloc>
 8019d52:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8019d54:	69bb      	ldr	r3, [r7, #24]
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d102      	bne.n	8019d60 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8019d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8019d5e:	e05d      	b.n	8019e1c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8019d60:	69bb      	ldr	r3, [r7, #24]
 8019d62:	895b      	ldrh	r3, [r3, #10]
 8019d64:	2b1b      	cmp	r3, #27
 8019d66:	d806      	bhi.n	8019d76 <etharp_raw+0x56>
 8019d68:	4b2e      	ldr	r3, [pc, #184]	; (8019e24 <etharp_raw+0x104>)
 8019d6a:	f240 4262 	movw	r2, #1122	; 0x462
 8019d6e:	4930      	ldr	r1, [pc, #192]	; (8019e30 <etharp_raw+0x110>)
 8019d70:	482e      	ldr	r0, [pc, #184]	; (8019e2c <etharp_raw+0x10c>)
 8019d72:	f001 fe0f 	bl	801b994 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8019d76:	69bb      	ldr	r3, [r7, #24]
 8019d78:	685b      	ldr	r3, [r3, #4]
 8019d7a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8019d7c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019d7e:	4618      	mov	r0, r3
 8019d80:	f7f6 fe4e 	bl	8010a20 <lwip_htons>
 8019d84:	4603      	mov	r3, r0
 8019d86:	461a      	mov	r2, r3
 8019d88:	697b      	ldr	r3, [r7, #20]
 8019d8a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8019d8c:	68fb      	ldr	r3, [r7, #12]
 8019d8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019d92:	2b06      	cmp	r3, #6
 8019d94:	d006      	beq.n	8019da4 <etharp_raw+0x84>
 8019d96:	4b23      	ldr	r3, [pc, #140]	; (8019e24 <etharp_raw+0x104>)
 8019d98:	f240 4269 	movw	r2, #1129	; 0x469
 8019d9c:	4925      	ldr	r1, [pc, #148]	; (8019e34 <etharp_raw+0x114>)
 8019d9e:	4823      	ldr	r0, [pc, #140]	; (8019e2c <etharp_raw+0x10c>)
 8019da0:	f001 fdf8 	bl	801b994 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8019da4:	697b      	ldr	r3, [r7, #20]
 8019da6:	3308      	adds	r3, #8
 8019da8:	2206      	movs	r2, #6
 8019daa:	6839      	ldr	r1, [r7, #0]
 8019dac:	4618      	mov	r0, r3
 8019dae:	f001 fddb 	bl	801b968 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8019db2:	697b      	ldr	r3, [r7, #20]
 8019db4:	3312      	adds	r3, #18
 8019db6:	2206      	movs	r2, #6
 8019db8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019dba:	4618      	mov	r0, r3
 8019dbc:	f001 fdd4 	bl	801b968 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8019dc0:	697b      	ldr	r3, [r7, #20]
 8019dc2:	330e      	adds	r3, #14
 8019dc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019dc6:	6812      	ldr	r2, [r2, #0]
 8019dc8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8019dca:	697b      	ldr	r3, [r7, #20]
 8019dcc:	3318      	adds	r3, #24
 8019dce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019dd0:	6812      	ldr	r2, [r2, #0]
 8019dd2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8019dd4:	697b      	ldr	r3, [r7, #20]
 8019dd6:	2200      	movs	r2, #0
 8019dd8:	701a      	strb	r2, [r3, #0]
 8019dda:	2200      	movs	r2, #0
 8019ddc:	f042 0201 	orr.w	r2, r2, #1
 8019de0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8019de2:	697b      	ldr	r3, [r7, #20]
 8019de4:	2200      	movs	r2, #0
 8019de6:	f042 0208 	orr.w	r2, r2, #8
 8019dea:	709a      	strb	r2, [r3, #2]
 8019dec:	2200      	movs	r2, #0
 8019dee:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8019df0:	697b      	ldr	r3, [r7, #20]
 8019df2:	2206      	movs	r2, #6
 8019df4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8019df6:	697b      	ldr	r3, [r7, #20]
 8019df8:	2204      	movs	r2, #4
 8019dfa:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8019dfc:	f640 0306 	movw	r3, #2054	; 0x806
 8019e00:	9300      	str	r3, [sp, #0]
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	68ba      	ldr	r2, [r7, #8]
 8019e06:	69b9      	ldr	r1, [r7, #24]
 8019e08:	68f8      	ldr	r0, [r7, #12]
 8019e0a:	f001 fb7b 	bl	801b504 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8019e0e:	69b8      	ldr	r0, [r7, #24]
 8019e10:	f7f8 fa2a 	bl	8012268 <pbuf_free>
  p = NULL;
 8019e14:	2300      	movs	r3, #0
 8019e16:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8019e18:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019e1c:	4618      	mov	r0, r3
 8019e1e:	3720      	adds	r7, #32
 8019e20:	46bd      	mov	sp, r7
 8019e22:	bd80      	pop	{r7, pc}
 8019e24:	0801ff00 	.word	0x0801ff00
 8019e28:	08020050 	.word	0x08020050
 8019e2c:	0801ff78 	.word	0x0801ff78
 8019e30:	08020100 	.word	0x08020100
 8019e34:	08020134 	.word	0x08020134

08019e38 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8019e38:	b580      	push	{r7, lr}
 8019e3a:	b088      	sub	sp, #32
 8019e3c:	af04      	add	r7, sp, #16
 8019e3e:	60f8      	str	r0, [r7, #12]
 8019e40:	60b9      	str	r1, [r7, #8]
 8019e42:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019e44:	68fb      	ldr	r3, [r7, #12]
 8019e46:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8019e4a:	68fb      	ldr	r3, [r7, #12]
 8019e4c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8019e50:	68fb      	ldr	r3, [r7, #12]
 8019e52:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019e54:	2201      	movs	r2, #1
 8019e56:	9203      	str	r2, [sp, #12]
 8019e58:	68ba      	ldr	r2, [r7, #8]
 8019e5a:	9202      	str	r2, [sp, #8]
 8019e5c:	4a06      	ldr	r2, [pc, #24]	; (8019e78 <etharp_request_dst+0x40>)
 8019e5e:	9201      	str	r2, [sp, #4]
 8019e60:	9300      	str	r3, [sp, #0]
 8019e62:	4603      	mov	r3, r0
 8019e64:	687a      	ldr	r2, [r7, #4]
 8019e66:	68f8      	ldr	r0, [r7, #12]
 8019e68:	f7ff ff5a 	bl	8019d20 <etharp_raw>
 8019e6c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8019e6e:	4618      	mov	r0, r3
 8019e70:	3710      	adds	r7, #16
 8019e72:	46bd      	mov	sp, r7
 8019e74:	bd80      	pop	{r7, pc}
 8019e76:	bf00      	nop
 8019e78:	080207c0 	.word	0x080207c0

08019e7c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8019e7c:	b580      	push	{r7, lr}
 8019e7e:	b082      	sub	sp, #8
 8019e80:	af00      	add	r7, sp, #0
 8019e82:	6078      	str	r0, [r7, #4]
 8019e84:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8019e86:	4a05      	ldr	r2, [pc, #20]	; (8019e9c <etharp_request+0x20>)
 8019e88:	6839      	ldr	r1, [r7, #0]
 8019e8a:	6878      	ldr	r0, [r7, #4]
 8019e8c:	f7ff ffd4 	bl	8019e38 <etharp_request_dst>
 8019e90:	4603      	mov	r3, r0
}
 8019e92:	4618      	mov	r0, r3
 8019e94:	3708      	adds	r7, #8
 8019e96:	46bd      	mov	sp, r7
 8019e98:	bd80      	pop	{r7, pc}
 8019e9a:	bf00      	nop
 8019e9c:	080207b8 	.word	0x080207b8

08019ea0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8019ea0:	b580      	push	{r7, lr}
 8019ea2:	b08e      	sub	sp, #56	; 0x38
 8019ea4:	af04      	add	r7, sp, #16
 8019ea6:	6078      	str	r0, [r7, #4]
 8019ea8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8019eaa:	4b79      	ldr	r3, [pc, #484]	; (801a090 <icmp_input+0x1f0>)
 8019eac:	689b      	ldr	r3, [r3, #8]
 8019eae:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8019eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eb2:	781b      	ldrb	r3, [r3, #0]
 8019eb4:	f003 030f 	and.w	r3, r3, #15
 8019eb8:	b2db      	uxtb	r3, r3
 8019eba:	009b      	lsls	r3, r3, #2
 8019ebc:	b2db      	uxtb	r3, r3
 8019ebe:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8019ec0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019ec2:	2b13      	cmp	r3, #19
 8019ec4:	f240 80cd 	bls.w	801a062 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	895b      	ldrh	r3, [r3, #10]
 8019ecc:	2b03      	cmp	r3, #3
 8019ece:	f240 80ca 	bls.w	801a066 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	685b      	ldr	r3, [r3, #4]
 8019ed6:	781b      	ldrb	r3, [r3, #0]
 8019ed8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8019edc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019ee0:	2b00      	cmp	r3, #0
 8019ee2:	f000 80b7 	beq.w	801a054 <icmp_input+0x1b4>
 8019ee6:	2b08      	cmp	r3, #8
 8019ee8:	f040 80b7 	bne.w	801a05a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8019eec:	4b69      	ldr	r3, [pc, #420]	; (801a094 <icmp_input+0x1f4>)
 8019eee:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019ef0:	4b67      	ldr	r3, [pc, #412]	; (801a090 <icmp_input+0x1f0>)
 8019ef2:	695b      	ldr	r3, [r3, #20]
 8019ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019ef8:	2be0      	cmp	r3, #224	; 0xe0
 8019efa:	f000 80bb 	beq.w	801a074 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8019efe:	4b64      	ldr	r3, [pc, #400]	; (801a090 <icmp_input+0x1f0>)
 8019f00:	695b      	ldr	r3, [r3, #20]
 8019f02:	4a63      	ldr	r2, [pc, #396]	; (801a090 <icmp_input+0x1f0>)
 8019f04:	6812      	ldr	r2, [r2, #0]
 8019f06:	4611      	mov	r1, r2
 8019f08:	4618      	mov	r0, r3
 8019f0a:	f000 fbed 	bl	801a6e8 <ip4_addr_isbroadcast_u32>
 8019f0e:	4603      	mov	r3, r0
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	f040 80b1 	bne.w	801a078 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	891b      	ldrh	r3, [r3, #8]
 8019f1a:	2b07      	cmp	r3, #7
 8019f1c:	f240 80a5 	bls.w	801a06a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019f20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019f22:	330e      	adds	r3, #14
 8019f24:	4619      	mov	r1, r3
 8019f26:	6878      	ldr	r0, [r7, #4]
 8019f28:	f7f8 f8d6 	bl	80120d8 <pbuf_add_header>
 8019f2c:	4603      	mov	r3, r0
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d04b      	beq.n	8019fca <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	891a      	ldrh	r2, [r3, #8]
 8019f36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019f38:	4413      	add	r3, r2
 8019f3a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	891b      	ldrh	r3, [r3, #8]
 8019f40:	8b7a      	ldrh	r2, [r7, #26]
 8019f42:	429a      	cmp	r2, r3
 8019f44:	f0c0 809a 	bcc.w	801a07c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8019f48:	8b7b      	ldrh	r3, [r7, #26]
 8019f4a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019f4e:	4619      	mov	r1, r3
 8019f50:	200e      	movs	r0, #14
 8019f52:	f7f7 fe73 	bl	8011c3c <pbuf_alloc>
 8019f56:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8019f58:	697b      	ldr	r3, [r7, #20]
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	f000 8090 	beq.w	801a080 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019f60:	697b      	ldr	r3, [r7, #20]
 8019f62:	895b      	ldrh	r3, [r3, #10]
 8019f64:	461a      	mov	r2, r3
 8019f66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019f68:	3308      	adds	r3, #8
 8019f6a:	429a      	cmp	r2, r3
 8019f6c:	d203      	bcs.n	8019f76 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8019f6e:	6978      	ldr	r0, [r7, #20]
 8019f70:	f7f8 f97a 	bl	8012268 <pbuf_free>
          goto icmperr;
 8019f74:	e085      	b.n	801a082 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8019f76:	697b      	ldr	r3, [r7, #20]
 8019f78:	685b      	ldr	r3, [r3, #4]
 8019f7a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019f7e:	4618      	mov	r0, r3
 8019f80:	f001 fcf2 	bl	801b968 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019f84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019f86:	4619      	mov	r1, r3
 8019f88:	6978      	ldr	r0, [r7, #20]
 8019f8a:	f7f8 f8b5 	bl	80120f8 <pbuf_remove_header>
 8019f8e:	4603      	mov	r3, r0
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d009      	beq.n	8019fa8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019f94:	4b40      	ldr	r3, [pc, #256]	; (801a098 <icmp_input+0x1f8>)
 8019f96:	22b6      	movs	r2, #182	; 0xb6
 8019f98:	4940      	ldr	r1, [pc, #256]	; (801a09c <icmp_input+0x1fc>)
 8019f9a:	4841      	ldr	r0, [pc, #260]	; (801a0a0 <icmp_input+0x200>)
 8019f9c:	f001 fcfa 	bl	801b994 <iprintf>
          pbuf_free(r);
 8019fa0:	6978      	ldr	r0, [r7, #20]
 8019fa2:	f7f8 f961 	bl	8012268 <pbuf_free>
          goto icmperr;
 8019fa6:	e06c      	b.n	801a082 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019fa8:	6879      	ldr	r1, [r7, #4]
 8019faa:	6978      	ldr	r0, [r7, #20]
 8019fac:	f7f8 fa80 	bl	80124b0 <pbuf_copy>
 8019fb0:	4603      	mov	r3, r0
 8019fb2:	2b00      	cmp	r3, #0
 8019fb4:	d003      	beq.n	8019fbe <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8019fb6:	6978      	ldr	r0, [r7, #20]
 8019fb8:	f7f8 f956 	bl	8012268 <pbuf_free>
          goto icmperr;
 8019fbc:	e061      	b.n	801a082 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8019fbe:	6878      	ldr	r0, [r7, #4]
 8019fc0:	f7f8 f952 	bl	8012268 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019fc4:	697b      	ldr	r3, [r7, #20]
 8019fc6:	607b      	str	r3, [r7, #4]
 8019fc8:	e00f      	b.n	8019fea <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019fca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019fcc:	330e      	adds	r3, #14
 8019fce:	4619      	mov	r1, r3
 8019fd0:	6878      	ldr	r0, [r7, #4]
 8019fd2:	f7f8 f891 	bl	80120f8 <pbuf_remove_header>
 8019fd6:	4603      	mov	r3, r0
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d006      	beq.n	8019fea <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8019fdc:	4b2e      	ldr	r3, [pc, #184]	; (801a098 <icmp_input+0x1f8>)
 8019fde:	22c7      	movs	r2, #199	; 0xc7
 8019fe0:	4930      	ldr	r1, [pc, #192]	; (801a0a4 <icmp_input+0x204>)
 8019fe2:	482f      	ldr	r0, [pc, #188]	; (801a0a0 <icmp_input+0x200>)
 8019fe4:	f001 fcd6 	bl	801b994 <iprintf>
          goto icmperr;
 8019fe8:	e04b      	b.n	801a082 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	685b      	ldr	r3, [r3, #4]
 8019fee:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8019ff0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019ff2:	4619      	mov	r1, r3
 8019ff4:	6878      	ldr	r0, [r7, #4]
 8019ff6:	f7f8 f86f 	bl	80120d8 <pbuf_add_header>
 8019ffa:	4603      	mov	r3, r0
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d12b      	bne.n	801a058 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	685b      	ldr	r3, [r3, #4]
 801a004:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801a006:	69fb      	ldr	r3, [r7, #28]
 801a008:	681a      	ldr	r2, [r3, #0]
 801a00a:	68fb      	ldr	r3, [r7, #12]
 801a00c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801a00e:	4b20      	ldr	r3, [pc, #128]	; (801a090 <icmp_input+0x1f0>)
 801a010:	691a      	ldr	r2, [r3, #16]
 801a012:	68fb      	ldr	r3, [r7, #12]
 801a014:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801a016:	693b      	ldr	r3, [r7, #16]
 801a018:	2200      	movs	r2, #0
 801a01a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801a01c:	693b      	ldr	r3, [r7, #16]
 801a01e:	2200      	movs	r2, #0
 801a020:	709a      	strb	r2, [r3, #2]
 801a022:	2200      	movs	r2, #0
 801a024:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801a026:	68fb      	ldr	r3, [r7, #12]
 801a028:	22ff      	movs	r2, #255	; 0xff
 801a02a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801a02c:	68fb      	ldr	r3, [r7, #12]
 801a02e:	2200      	movs	r2, #0
 801a030:	729a      	strb	r2, [r3, #10]
 801a032:	2200      	movs	r2, #0
 801a034:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801a036:	683b      	ldr	r3, [r7, #0]
 801a038:	9302      	str	r3, [sp, #8]
 801a03a:	2301      	movs	r3, #1
 801a03c:	9301      	str	r3, [sp, #4]
 801a03e:	2300      	movs	r3, #0
 801a040:	9300      	str	r3, [sp, #0]
 801a042:	23ff      	movs	r3, #255	; 0xff
 801a044:	2200      	movs	r2, #0
 801a046:	69f9      	ldr	r1, [r7, #28]
 801a048:	6878      	ldr	r0, [r7, #4]
 801a04a:	f000 fa75 	bl	801a538 <ip4_output_if>
 801a04e:	4603      	mov	r3, r0
 801a050:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801a052:	e001      	b.n	801a058 <icmp_input+0x1b8>
      break;
 801a054:	bf00      	nop
 801a056:	e000      	b.n	801a05a <icmp_input+0x1ba>
      break;
 801a058:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801a05a:	6878      	ldr	r0, [r7, #4]
 801a05c:	f7f8 f904 	bl	8012268 <pbuf_free>
  return;
 801a060:	e013      	b.n	801a08a <icmp_input+0x1ea>
    goto lenerr;
 801a062:	bf00      	nop
 801a064:	e002      	b.n	801a06c <icmp_input+0x1cc>
    goto lenerr;
 801a066:	bf00      	nop
 801a068:	e000      	b.n	801a06c <icmp_input+0x1cc>
        goto lenerr;
 801a06a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801a06c:	6878      	ldr	r0, [r7, #4]
 801a06e:	f7f8 f8fb 	bl	8012268 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a072:	e00a      	b.n	801a08a <icmp_input+0x1ea>
        goto icmperr;
 801a074:	bf00      	nop
 801a076:	e004      	b.n	801a082 <icmp_input+0x1e2>
        goto icmperr;
 801a078:	bf00      	nop
 801a07a:	e002      	b.n	801a082 <icmp_input+0x1e2>
          goto icmperr;
 801a07c:	bf00      	nop
 801a07e:	e000      	b.n	801a082 <icmp_input+0x1e2>
          goto icmperr;
 801a080:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801a082:	6878      	ldr	r0, [r7, #4]
 801a084:	f7f8 f8f0 	bl	8012268 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a088:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801a08a:	3728      	adds	r7, #40	; 0x28
 801a08c:	46bd      	mov	sp, r7
 801a08e:	bd80      	pop	{r7, pc}
 801a090:	2000d938 	.word	0x2000d938
 801a094:	2000d94c 	.word	0x2000d94c
 801a098:	08020178 	.word	0x08020178
 801a09c:	080201b0 	.word	0x080201b0
 801a0a0:	080201e8 	.word	0x080201e8
 801a0a4:	08020210 	.word	0x08020210

0801a0a8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801a0a8:	b580      	push	{r7, lr}
 801a0aa:	b082      	sub	sp, #8
 801a0ac:	af00      	add	r7, sp, #0
 801a0ae:	6078      	str	r0, [r7, #4]
 801a0b0:	460b      	mov	r3, r1
 801a0b2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801a0b4:	78fb      	ldrb	r3, [r7, #3]
 801a0b6:	461a      	mov	r2, r3
 801a0b8:	2103      	movs	r1, #3
 801a0ba:	6878      	ldr	r0, [r7, #4]
 801a0bc:	f000 f814 	bl	801a0e8 <icmp_send_response>
}
 801a0c0:	bf00      	nop
 801a0c2:	3708      	adds	r7, #8
 801a0c4:	46bd      	mov	sp, r7
 801a0c6:	bd80      	pop	{r7, pc}

0801a0c8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801a0c8:	b580      	push	{r7, lr}
 801a0ca:	b082      	sub	sp, #8
 801a0cc:	af00      	add	r7, sp, #0
 801a0ce:	6078      	str	r0, [r7, #4]
 801a0d0:	460b      	mov	r3, r1
 801a0d2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801a0d4:	78fb      	ldrb	r3, [r7, #3]
 801a0d6:	461a      	mov	r2, r3
 801a0d8:	210b      	movs	r1, #11
 801a0da:	6878      	ldr	r0, [r7, #4]
 801a0dc:	f000 f804 	bl	801a0e8 <icmp_send_response>
}
 801a0e0:	bf00      	nop
 801a0e2:	3708      	adds	r7, #8
 801a0e4:	46bd      	mov	sp, r7
 801a0e6:	bd80      	pop	{r7, pc}

0801a0e8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801a0e8:	b580      	push	{r7, lr}
 801a0ea:	b08c      	sub	sp, #48	; 0x30
 801a0ec:	af04      	add	r7, sp, #16
 801a0ee:	6078      	str	r0, [r7, #4]
 801a0f0:	460b      	mov	r3, r1
 801a0f2:	70fb      	strb	r3, [r7, #3]
 801a0f4:	4613      	mov	r3, r2
 801a0f6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801a0f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a0fc:	2124      	movs	r1, #36	; 0x24
 801a0fe:	2022      	movs	r0, #34	; 0x22
 801a100:	f7f7 fd9c 	bl	8011c3c <pbuf_alloc>
 801a104:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801a106:	69fb      	ldr	r3, [r7, #28]
 801a108:	2b00      	cmp	r3, #0
 801a10a:	d04c      	beq.n	801a1a6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801a10c:	69fb      	ldr	r3, [r7, #28]
 801a10e:	895b      	ldrh	r3, [r3, #10]
 801a110:	2b23      	cmp	r3, #35	; 0x23
 801a112:	d806      	bhi.n	801a122 <icmp_send_response+0x3a>
 801a114:	4b26      	ldr	r3, [pc, #152]	; (801a1b0 <icmp_send_response+0xc8>)
 801a116:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801a11a:	4926      	ldr	r1, [pc, #152]	; (801a1b4 <icmp_send_response+0xcc>)
 801a11c:	4826      	ldr	r0, [pc, #152]	; (801a1b8 <icmp_send_response+0xd0>)
 801a11e:	f001 fc39 	bl	801b994 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	685b      	ldr	r3, [r3, #4]
 801a126:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801a128:	69fb      	ldr	r3, [r7, #28]
 801a12a:	685b      	ldr	r3, [r3, #4]
 801a12c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801a12e:	697b      	ldr	r3, [r7, #20]
 801a130:	78fa      	ldrb	r2, [r7, #3]
 801a132:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801a134:	697b      	ldr	r3, [r7, #20]
 801a136:	78ba      	ldrb	r2, [r7, #2]
 801a138:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801a13a:	697b      	ldr	r3, [r7, #20]
 801a13c:	2200      	movs	r2, #0
 801a13e:	711a      	strb	r2, [r3, #4]
 801a140:	2200      	movs	r2, #0
 801a142:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801a144:	697b      	ldr	r3, [r7, #20]
 801a146:	2200      	movs	r2, #0
 801a148:	719a      	strb	r2, [r3, #6]
 801a14a:	2200      	movs	r2, #0
 801a14c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801a14e:	69fb      	ldr	r3, [r7, #28]
 801a150:	685b      	ldr	r3, [r3, #4]
 801a152:	f103 0008 	add.w	r0, r3, #8
 801a156:	687b      	ldr	r3, [r7, #4]
 801a158:	685b      	ldr	r3, [r3, #4]
 801a15a:	221c      	movs	r2, #28
 801a15c:	4619      	mov	r1, r3
 801a15e:	f001 fc03 	bl	801b968 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801a162:	69bb      	ldr	r3, [r7, #24]
 801a164:	68db      	ldr	r3, [r3, #12]
 801a166:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801a168:	f107 030c 	add.w	r3, r7, #12
 801a16c:	4618      	mov	r0, r3
 801a16e:	f000 f825 	bl	801a1bc <ip4_route>
 801a172:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801a174:	693b      	ldr	r3, [r7, #16]
 801a176:	2b00      	cmp	r3, #0
 801a178:	d011      	beq.n	801a19e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801a17a:	697b      	ldr	r3, [r7, #20]
 801a17c:	2200      	movs	r2, #0
 801a17e:	709a      	strb	r2, [r3, #2]
 801a180:	2200      	movs	r2, #0
 801a182:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801a184:	f107 020c 	add.w	r2, r7, #12
 801a188:	693b      	ldr	r3, [r7, #16]
 801a18a:	9302      	str	r3, [sp, #8]
 801a18c:	2301      	movs	r3, #1
 801a18e:	9301      	str	r3, [sp, #4]
 801a190:	2300      	movs	r3, #0
 801a192:	9300      	str	r3, [sp, #0]
 801a194:	23ff      	movs	r3, #255	; 0xff
 801a196:	2100      	movs	r1, #0
 801a198:	69f8      	ldr	r0, [r7, #28]
 801a19a:	f000 f9cd 	bl	801a538 <ip4_output_if>
  }
  pbuf_free(q);
 801a19e:	69f8      	ldr	r0, [r7, #28]
 801a1a0:	f7f8 f862 	bl	8012268 <pbuf_free>
 801a1a4:	e000      	b.n	801a1a8 <icmp_send_response+0xc0>
    return;
 801a1a6:	bf00      	nop
}
 801a1a8:	3720      	adds	r7, #32
 801a1aa:	46bd      	mov	sp, r7
 801a1ac:	bd80      	pop	{r7, pc}
 801a1ae:	bf00      	nop
 801a1b0:	08020178 	.word	0x08020178
 801a1b4:	08020244 	.word	0x08020244
 801a1b8:	080201e8 	.word	0x080201e8

0801a1bc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801a1bc:	b480      	push	{r7}
 801a1be:	b085      	sub	sp, #20
 801a1c0:	af00      	add	r7, sp, #0
 801a1c2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801a1c4:	4b33      	ldr	r3, [pc, #204]	; (801a294 <ip4_route+0xd8>)
 801a1c6:	681b      	ldr	r3, [r3, #0]
 801a1c8:	60fb      	str	r3, [r7, #12]
 801a1ca:	e036      	b.n	801a23a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a1cc:	68fb      	ldr	r3, [r7, #12]
 801a1ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a1d2:	f003 0301 	and.w	r3, r3, #1
 801a1d6:	b2db      	uxtb	r3, r3
 801a1d8:	2b00      	cmp	r3, #0
 801a1da:	d02b      	beq.n	801a234 <ip4_route+0x78>
 801a1dc:	68fb      	ldr	r3, [r7, #12]
 801a1de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a1e2:	089b      	lsrs	r3, r3, #2
 801a1e4:	f003 0301 	and.w	r3, r3, #1
 801a1e8:	b2db      	uxtb	r3, r3
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d022      	beq.n	801a234 <ip4_route+0x78>
 801a1ee:	68fb      	ldr	r3, [r7, #12]
 801a1f0:	3304      	adds	r3, #4
 801a1f2:	681b      	ldr	r3, [r3, #0]
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	d01d      	beq.n	801a234 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	681a      	ldr	r2, [r3, #0]
 801a1fc:	68fb      	ldr	r3, [r7, #12]
 801a1fe:	3304      	adds	r3, #4
 801a200:	681b      	ldr	r3, [r3, #0]
 801a202:	405a      	eors	r2, r3
 801a204:	68fb      	ldr	r3, [r7, #12]
 801a206:	3308      	adds	r3, #8
 801a208:	681b      	ldr	r3, [r3, #0]
 801a20a:	4013      	ands	r3, r2
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	d101      	bne.n	801a214 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801a210:	68fb      	ldr	r3, [r7, #12]
 801a212:	e038      	b.n	801a286 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801a214:	68fb      	ldr	r3, [r7, #12]
 801a216:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a21a:	f003 0302 	and.w	r3, r3, #2
 801a21e:	2b00      	cmp	r3, #0
 801a220:	d108      	bne.n	801a234 <ip4_route+0x78>
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	681a      	ldr	r2, [r3, #0]
 801a226:	68fb      	ldr	r3, [r7, #12]
 801a228:	330c      	adds	r3, #12
 801a22a:	681b      	ldr	r3, [r3, #0]
 801a22c:	429a      	cmp	r2, r3
 801a22e:	d101      	bne.n	801a234 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801a230:	68fb      	ldr	r3, [r7, #12]
 801a232:	e028      	b.n	801a286 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801a234:	68fb      	ldr	r3, [r7, #12]
 801a236:	681b      	ldr	r3, [r3, #0]
 801a238:	60fb      	str	r3, [r7, #12]
 801a23a:	68fb      	ldr	r3, [r7, #12]
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d1c5      	bne.n	801a1cc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a240:	4b15      	ldr	r3, [pc, #84]	; (801a298 <ip4_route+0xdc>)
 801a242:	681b      	ldr	r3, [r3, #0]
 801a244:	2b00      	cmp	r3, #0
 801a246:	d01a      	beq.n	801a27e <ip4_route+0xc2>
 801a248:	4b13      	ldr	r3, [pc, #76]	; (801a298 <ip4_route+0xdc>)
 801a24a:	681b      	ldr	r3, [r3, #0]
 801a24c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a250:	f003 0301 	and.w	r3, r3, #1
 801a254:	2b00      	cmp	r3, #0
 801a256:	d012      	beq.n	801a27e <ip4_route+0xc2>
 801a258:	4b0f      	ldr	r3, [pc, #60]	; (801a298 <ip4_route+0xdc>)
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a260:	f003 0304 	and.w	r3, r3, #4
 801a264:	2b00      	cmp	r3, #0
 801a266:	d00a      	beq.n	801a27e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801a268:	4b0b      	ldr	r3, [pc, #44]	; (801a298 <ip4_route+0xdc>)
 801a26a:	681b      	ldr	r3, [r3, #0]
 801a26c:	3304      	adds	r3, #4
 801a26e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a270:	2b00      	cmp	r3, #0
 801a272:	d004      	beq.n	801a27e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	681b      	ldr	r3, [r3, #0]
 801a278:	b2db      	uxtb	r3, r3
 801a27a:	2b7f      	cmp	r3, #127	; 0x7f
 801a27c:	d101      	bne.n	801a282 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801a27e:	2300      	movs	r3, #0
 801a280:	e001      	b.n	801a286 <ip4_route+0xca>
  }

  return netif_default;
 801a282:	4b05      	ldr	r3, [pc, #20]	; (801a298 <ip4_route+0xdc>)
 801a284:	681b      	ldr	r3, [r3, #0]
}
 801a286:	4618      	mov	r0, r3
 801a288:	3714      	adds	r7, #20
 801a28a:	46bd      	mov	sp, r7
 801a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a290:	4770      	bx	lr
 801a292:	bf00      	nop
 801a294:	20011080 	.word	0x20011080
 801a298:	20011084 	.word	0x20011084

0801a29c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801a29c:	b580      	push	{r7, lr}
 801a29e:	b082      	sub	sp, #8
 801a2a0:	af00      	add	r7, sp, #0
 801a2a2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a2aa:	f003 0301 	and.w	r3, r3, #1
 801a2ae:	b2db      	uxtb	r3, r3
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d016      	beq.n	801a2e2 <ip4_input_accept+0x46>
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	3304      	adds	r3, #4
 801a2b8:	681b      	ldr	r3, [r3, #0]
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	d011      	beq.n	801a2e2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a2be:	4b0b      	ldr	r3, [pc, #44]	; (801a2ec <ip4_input_accept+0x50>)
 801a2c0:	695a      	ldr	r2, [r3, #20]
 801a2c2:	687b      	ldr	r3, [r7, #4]
 801a2c4:	3304      	adds	r3, #4
 801a2c6:	681b      	ldr	r3, [r3, #0]
 801a2c8:	429a      	cmp	r2, r3
 801a2ca:	d008      	beq.n	801a2de <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801a2cc:	4b07      	ldr	r3, [pc, #28]	; (801a2ec <ip4_input_accept+0x50>)
 801a2ce:	695b      	ldr	r3, [r3, #20]
 801a2d0:	6879      	ldr	r1, [r7, #4]
 801a2d2:	4618      	mov	r0, r3
 801a2d4:	f000 fa08 	bl	801a6e8 <ip4_addr_isbroadcast_u32>
 801a2d8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	d001      	beq.n	801a2e2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801a2de:	2301      	movs	r3, #1
 801a2e0:	e000      	b.n	801a2e4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801a2e2:	2300      	movs	r3, #0
}
 801a2e4:	4618      	mov	r0, r3
 801a2e6:	3708      	adds	r7, #8
 801a2e8:	46bd      	mov	sp, r7
 801a2ea:	bd80      	pop	{r7, pc}
 801a2ec:	2000d938 	.word	0x2000d938

0801a2f0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801a2f0:	b580      	push	{r7, lr}
 801a2f2:	b086      	sub	sp, #24
 801a2f4:	af00      	add	r7, sp, #0
 801a2f6:	6078      	str	r0, [r7, #4]
 801a2f8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	685b      	ldr	r3, [r3, #4]
 801a2fe:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801a300:	697b      	ldr	r3, [r7, #20]
 801a302:	781b      	ldrb	r3, [r3, #0]
 801a304:	091b      	lsrs	r3, r3, #4
 801a306:	b2db      	uxtb	r3, r3
 801a308:	2b04      	cmp	r3, #4
 801a30a:	d004      	beq.n	801a316 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801a30c:	6878      	ldr	r0, [r7, #4]
 801a30e:	f7f7 ffab 	bl	8012268 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801a312:	2300      	movs	r3, #0
 801a314:	e107      	b.n	801a526 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801a316:	697b      	ldr	r3, [r7, #20]
 801a318:	781b      	ldrb	r3, [r3, #0]
 801a31a:	f003 030f 	and.w	r3, r3, #15
 801a31e:	b2db      	uxtb	r3, r3
 801a320:	009b      	lsls	r3, r3, #2
 801a322:	b2db      	uxtb	r3, r3
 801a324:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801a326:	697b      	ldr	r3, [r7, #20]
 801a328:	885b      	ldrh	r3, [r3, #2]
 801a32a:	b29b      	uxth	r3, r3
 801a32c:	4618      	mov	r0, r3
 801a32e:	f7f6 fb77 	bl	8010a20 <lwip_htons>
 801a332:	4603      	mov	r3, r0
 801a334:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	891b      	ldrh	r3, [r3, #8]
 801a33a:	89ba      	ldrh	r2, [r7, #12]
 801a33c:	429a      	cmp	r2, r3
 801a33e:	d204      	bcs.n	801a34a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801a340:	89bb      	ldrh	r3, [r7, #12]
 801a342:	4619      	mov	r1, r3
 801a344:	6878      	ldr	r0, [r7, #4]
 801a346:	f7f7 fdd7 	bl	8011ef8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	895b      	ldrh	r3, [r3, #10]
 801a34e:	89fa      	ldrh	r2, [r7, #14]
 801a350:	429a      	cmp	r2, r3
 801a352:	d807      	bhi.n	801a364 <ip4_input+0x74>
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	891b      	ldrh	r3, [r3, #8]
 801a358:	89ba      	ldrh	r2, [r7, #12]
 801a35a:	429a      	cmp	r2, r3
 801a35c:	d802      	bhi.n	801a364 <ip4_input+0x74>
 801a35e:	89fb      	ldrh	r3, [r7, #14]
 801a360:	2b13      	cmp	r3, #19
 801a362:	d804      	bhi.n	801a36e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801a364:	6878      	ldr	r0, [r7, #4]
 801a366:	f7f7 ff7f 	bl	8012268 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801a36a:	2300      	movs	r3, #0
 801a36c:	e0db      	b.n	801a526 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801a36e:	697b      	ldr	r3, [r7, #20]
 801a370:	691b      	ldr	r3, [r3, #16]
 801a372:	4a6f      	ldr	r2, [pc, #444]	; (801a530 <ip4_input+0x240>)
 801a374:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801a376:	697b      	ldr	r3, [r7, #20]
 801a378:	68db      	ldr	r3, [r3, #12]
 801a37a:	4a6d      	ldr	r2, [pc, #436]	; (801a530 <ip4_input+0x240>)
 801a37c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a37e:	4b6c      	ldr	r3, [pc, #432]	; (801a530 <ip4_input+0x240>)
 801a380:	695b      	ldr	r3, [r3, #20]
 801a382:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a386:	2be0      	cmp	r3, #224	; 0xe0
 801a388:	d112      	bne.n	801a3b0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801a38a:	683b      	ldr	r3, [r7, #0]
 801a38c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a390:	f003 0301 	and.w	r3, r3, #1
 801a394:	b2db      	uxtb	r3, r3
 801a396:	2b00      	cmp	r3, #0
 801a398:	d007      	beq.n	801a3aa <ip4_input+0xba>
 801a39a:	683b      	ldr	r3, [r7, #0]
 801a39c:	3304      	adds	r3, #4
 801a39e:	681b      	ldr	r3, [r3, #0]
 801a3a0:	2b00      	cmp	r3, #0
 801a3a2:	d002      	beq.n	801a3aa <ip4_input+0xba>
      netif = inp;
 801a3a4:	683b      	ldr	r3, [r7, #0]
 801a3a6:	613b      	str	r3, [r7, #16]
 801a3a8:	e02a      	b.n	801a400 <ip4_input+0x110>
    } else {
      netif = NULL;
 801a3aa:	2300      	movs	r3, #0
 801a3ac:	613b      	str	r3, [r7, #16]
 801a3ae:	e027      	b.n	801a400 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801a3b0:	6838      	ldr	r0, [r7, #0]
 801a3b2:	f7ff ff73 	bl	801a29c <ip4_input_accept>
 801a3b6:	4603      	mov	r3, r0
 801a3b8:	2b00      	cmp	r3, #0
 801a3ba:	d002      	beq.n	801a3c2 <ip4_input+0xd2>
      netif = inp;
 801a3bc:	683b      	ldr	r3, [r7, #0]
 801a3be:	613b      	str	r3, [r7, #16]
 801a3c0:	e01e      	b.n	801a400 <ip4_input+0x110>
    } else {
      netif = NULL;
 801a3c2:	2300      	movs	r3, #0
 801a3c4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801a3c6:	4b5a      	ldr	r3, [pc, #360]	; (801a530 <ip4_input+0x240>)
 801a3c8:	695b      	ldr	r3, [r3, #20]
 801a3ca:	b2db      	uxtb	r3, r3
 801a3cc:	2b7f      	cmp	r3, #127	; 0x7f
 801a3ce:	d017      	beq.n	801a400 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801a3d0:	4b58      	ldr	r3, [pc, #352]	; (801a534 <ip4_input+0x244>)
 801a3d2:	681b      	ldr	r3, [r3, #0]
 801a3d4:	613b      	str	r3, [r7, #16]
 801a3d6:	e00e      	b.n	801a3f6 <ip4_input+0x106>
          if (netif == inp) {
 801a3d8:	693a      	ldr	r2, [r7, #16]
 801a3da:	683b      	ldr	r3, [r7, #0]
 801a3dc:	429a      	cmp	r2, r3
 801a3de:	d006      	beq.n	801a3ee <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801a3e0:	6938      	ldr	r0, [r7, #16]
 801a3e2:	f7ff ff5b 	bl	801a29c <ip4_input_accept>
 801a3e6:	4603      	mov	r3, r0
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	d108      	bne.n	801a3fe <ip4_input+0x10e>
 801a3ec:	e000      	b.n	801a3f0 <ip4_input+0x100>
            continue;
 801a3ee:	bf00      	nop
        NETIF_FOREACH(netif) {
 801a3f0:	693b      	ldr	r3, [r7, #16]
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	613b      	str	r3, [r7, #16]
 801a3f6:	693b      	ldr	r3, [r7, #16]
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	d1ed      	bne.n	801a3d8 <ip4_input+0xe8>
 801a3fc:	e000      	b.n	801a400 <ip4_input+0x110>
            break;
 801a3fe:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a400:	4b4b      	ldr	r3, [pc, #300]	; (801a530 <ip4_input+0x240>)
 801a402:	691b      	ldr	r3, [r3, #16]
 801a404:	6839      	ldr	r1, [r7, #0]
 801a406:	4618      	mov	r0, r3
 801a408:	f000 f96e 	bl	801a6e8 <ip4_addr_isbroadcast_u32>
 801a40c:	4603      	mov	r3, r0
 801a40e:	2b00      	cmp	r3, #0
 801a410:	d105      	bne.n	801a41e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801a412:	4b47      	ldr	r3, [pc, #284]	; (801a530 <ip4_input+0x240>)
 801a414:	691b      	ldr	r3, [r3, #16]
 801a416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a41a:	2be0      	cmp	r3, #224	; 0xe0
 801a41c:	d104      	bne.n	801a428 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801a41e:	6878      	ldr	r0, [r7, #4]
 801a420:	f7f7 ff22 	bl	8012268 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801a424:	2300      	movs	r3, #0
 801a426:	e07e      	b.n	801a526 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801a428:	693b      	ldr	r3, [r7, #16]
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d104      	bne.n	801a438 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801a42e:	6878      	ldr	r0, [r7, #4]
 801a430:	f7f7 ff1a 	bl	8012268 <pbuf_free>
    return ERR_OK;
 801a434:	2300      	movs	r3, #0
 801a436:	e076      	b.n	801a526 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801a438:	697b      	ldr	r3, [r7, #20]
 801a43a:	88db      	ldrh	r3, [r3, #6]
 801a43c:	b29b      	uxth	r3, r3
 801a43e:	461a      	mov	r2, r3
 801a440:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801a444:	4013      	ands	r3, r2
 801a446:	2b00      	cmp	r3, #0
 801a448:	d00b      	beq.n	801a462 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801a44a:	6878      	ldr	r0, [r7, #4]
 801a44c:	f000 fc92 	bl	801ad74 <ip4_reass>
 801a450:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	2b00      	cmp	r3, #0
 801a456:	d101      	bne.n	801a45c <ip4_input+0x16c>
      return ERR_OK;
 801a458:	2300      	movs	r3, #0
 801a45a:	e064      	b.n	801a526 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	685b      	ldr	r3, [r3, #4]
 801a460:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801a462:	4a33      	ldr	r2, [pc, #204]	; (801a530 <ip4_input+0x240>)
 801a464:	693b      	ldr	r3, [r7, #16]
 801a466:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801a468:	4a31      	ldr	r2, [pc, #196]	; (801a530 <ip4_input+0x240>)
 801a46a:	683b      	ldr	r3, [r7, #0]
 801a46c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801a46e:	4a30      	ldr	r2, [pc, #192]	; (801a530 <ip4_input+0x240>)
 801a470:	697b      	ldr	r3, [r7, #20]
 801a472:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801a474:	697b      	ldr	r3, [r7, #20]
 801a476:	781b      	ldrb	r3, [r3, #0]
 801a478:	f003 030f 	and.w	r3, r3, #15
 801a47c:	b2db      	uxtb	r3, r3
 801a47e:	009b      	lsls	r3, r3, #2
 801a480:	b2db      	uxtb	r3, r3
 801a482:	b29a      	uxth	r2, r3
 801a484:	4b2a      	ldr	r3, [pc, #168]	; (801a530 <ip4_input+0x240>)
 801a486:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801a488:	89fb      	ldrh	r3, [r7, #14]
 801a48a:	4619      	mov	r1, r3
 801a48c:	6878      	ldr	r0, [r7, #4]
 801a48e:	f7f7 fe33 	bl	80120f8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801a492:	697b      	ldr	r3, [r7, #20]
 801a494:	7a5b      	ldrb	r3, [r3, #9]
 801a496:	2b11      	cmp	r3, #17
 801a498:	d006      	beq.n	801a4a8 <ip4_input+0x1b8>
 801a49a:	2b11      	cmp	r3, #17
 801a49c:	dc13      	bgt.n	801a4c6 <ip4_input+0x1d6>
 801a49e:	2b01      	cmp	r3, #1
 801a4a0:	d00c      	beq.n	801a4bc <ip4_input+0x1cc>
 801a4a2:	2b06      	cmp	r3, #6
 801a4a4:	d005      	beq.n	801a4b2 <ip4_input+0x1c2>
 801a4a6:	e00e      	b.n	801a4c6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801a4a8:	6839      	ldr	r1, [r7, #0]
 801a4aa:	6878      	ldr	r0, [r7, #4]
 801a4ac:	f7fe fb5a 	bl	8018b64 <udp_input>
        break;
 801a4b0:	e026      	b.n	801a500 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801a4b2:	6839      	ldr	r1, [r7, #0]
 801a4b4:	6878      	ldr	r0, [r7, #4]
 801a4b6:	f7f9 ff13 	bl	80142e0 <tcp_input>
        break;
 801a4ba:	e021      	b.n	801a500 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801a4bc:	6839      	ldr	r1, [r7, #0]
 801a4be:	6878      	ldr	r0, [r7, #4]
 801a4c0:	f7ff fcee 	bl	8019ea0 <icmp_input>
        break;
 801a4c4:	e01c      	b.n	801a500 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a4c6:	4b1a      	ldr	r3, [pc, #104]	; (801a530 <ip4_input+0x240>)
 801a4c8:	695b      	ldr	r3, [r3, #20]
 801a4ca:	6939      	ldr	r1, [r7, #16]
 801a4cc:	4618      	mov	r0, r3
 801a4ce:	f000 f90b 	bl	801a6e8 <ip4_addr_isbroadcast_u32>
 801a4d2:	4603      	mov	r3, r0
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d10f      	bne.n	801a4f8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a4d8:	4b15      	ldr	r3, [pc, #84]	; (801a530 <ip4_input+0x240>)
 801a4da:	695b      	ldr	r3, [r3, #20]
 801a4dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a4e0:	2be0      	cmp	r3, #224	; 0xe0
 801a4e2:	d009      	beq.n	801a4f8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801a4e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a4e8:	4619      	mov	r1, r3
 801a4ea:	6878      	ldr	r0, [r7, #4]
 801a4ec:	f7f7 fe77 	bl	80121de <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801a4f0:	2102      	movs	r1, #2
 801a4f2:	6878      	ldr	r0, [r7, #4]
 801a4f4:	f7ff fdd8 	bl	801a0a8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801a4f8:	6878      	ldr	r0, [r7, #4]
 801a4fa:	f7f7 feb5 	bl	8012268 <pbuf_free>
        break;
 801a4fe:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801a500:	4b0b      	ldr	r3, [pc, #44]	; (801a530 <ip4_input+0x240>)
 801a502:	2200      	movs	r2, #0
 801a504:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801a506:	4b0a      	ldr	r3, [pc, #40]	; (801a530 <ip4_input+0x240>)
 801a508:	2200      	movs	r2, #0
 801a50a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801a50c:	4b08      	ldr	r3, [pc, #32]	; (801a530 <ip4_input+0x240>)
 801a50e:	2200      	movs	r2, #0
 801a510:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801a512:	4b07      	ldr	r3, [pc, #28]	; (801a530 <ip4_input+0x240>)
 801a514:	2200      	movs	r2, #0
 801a516:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801a518:	4b05      	ldr	r3, [pc, #20]	; (801a530 <ip4_input+0x240>)
 801a51a:	2200      	movs	r2, #0
 801a51c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801a51e:	4b04      	ldr	r3, [pc, #16]	; (801a530 <ip4_input+0x240>)
 801a520:	2200      	movs	r2, #0
 801a522:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801a524:	2300      	movs	r3, #0
}
 801a526:	4618      	mov	r0, r3
 801a528:	3718      	adds	r7, #24
 801a52a:	46bd      	mov	sp, r7
 801a52c:	bd80      	pop	{r7, pc}
 801a52e:	bf00      	nop
 801a530:	2000d938 	.word	0x2000d938
 801a534:	20011080 	.word	0x20011080

0801a538 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801a538:	b580      	push	{r7, lr}
 801a53a:	b08a      	sub	sp, #40	; 0x28
 801a53c:	af04      	add	r7, sp, #16
 801a53e:	60f8      	str	r0, [r7, #12]
 801a540:	60b9      	str	r1, [r7, #8]
 801a542:	607a      	str	r2, [r7, #4]
 801a544:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801a546:	68bb      	ldr	r3, [r7, #8]
 801a548:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	d009      	beq.n	801a564 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801a550:	68bb      	ldr	r3, [r7, #8]
 801a552:	2b00      	cmp	r3, #0
 801a554:	d003      	beq.n	801a55e <ip4_output_if+0x26>
 801a556:	68bb      	ldr	r3, [r7, #8]
 801a558:	681b      	ldr	r3, [r3, #0]
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	d102      	bne.n	801a564 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801a55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a560:	3304      	adds	r3, #4
 801a562:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801a564:	78fa      	ldrb	r2, [r7, #3]
 801a566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a568:	9302      	str	r3, [sp, #8]
 801a56a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a56e:	9301      	str	r3, [sp, #4]
 801a570:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a574:	9300      	str	r3, [sp, #0]
 801a576:	4613      	mov	r3, r2
 801a578:	687a      	ldr	r2, [r7, #4]
 801a57a:	6979      	ldr	r1, [r7, #20]
 801a57c:	68f8      	ldr	r0, [r7, #12]
 801a57e:	f000 f805 	bl	801a58c <ip4_output_if_src>
 801a582:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801a584:	4618      	mov	r0, r3
 801a586:	3718      	adds	r7, #24
 801a588:	46bd      	mov	sp, r7
 801a58a:	bd80      	pop	{r7, pc}

0801a58c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801a58c:	b580      	push	{r7, lr}
 801a58e:	b088      	sub	sp, #32
 801a590:	af00      	add	r7, sp, #0
 801a592:	60f8      	str	r0, [r7, #12]
 801a594:	60b9      	str	r1, [r7, #8]
 801a596:	607a      	str	r2, [r7, #4]
 801a598:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801a59a:	68fb      	ldr	r3, [r7, #12]
 801a59c:	7b9b      	ldrb	r3, [r3, #14]
 801a59e:	2b01      	cmp	r3, #1
 801a5a0:	d006      	beq.n	801a5b0 <ip4_output_if_src+0x24>
 801a5a2:	4b4b      	ldr	r3, [pc, #300]	; (801a6d0 <ip4_output_if_src+0x144>)
 801a5a4:	f44f 7255 	mov.w	r2, #852	; 0x354
 801a5a8:	494a      	ldr	r1, [pc, #296]	; (801a6d4 <ip4_output_if_src+0x148>)
 801a5aa:	484b      	ldr	r0, [pc, #300]	; (801a6d8 <ip4_output_if_src+0x14c>)
 801a5ac:	f001 f9f2 	bl	801b994 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	2b00      	cmp	r3, #0
 801a5b4:	d060      	beq.n	801a678 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801a5b6:	2314      	movs	r3, #20
 801a5b8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801a5ba:	2114      	movs	r1, #20
 801a5bc:	68f8      	ldr	r0, [r7, #12]
 801a5be:	f7f7 fd8b 	bl	80120d8 <pbuf_add_header>
 801a5c2:	4603      	mov	r3, r0
 801a5c4:	2b00      	cmp	r3, #0
 801a5c6:	d002      	beq.n	801a5ce <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a5c8:	f06f 0301 	mvn.w	r3, #1
 801a5cc:	e07c      	b.n	801a6c8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801a5ce:	68fb      	ldr	r3, [r7, #12]
 801a5d0:	685b      	ldr	r3, [r3, #4]
 801a5d2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801a5d4:	68fb      	ldr	r3, [r7, #12]
 801a5d6:	895b      	ldrh	r3, [r3, #10]
 801a5d8:	2b13      	cmp	r3, #19
 801a5da:	d806      	bhi.n	801a5ea <ip4_output_if_src+0x5e>
 801a5dc:	4b3c      	ldr	r3, [pc, #240]	; (801a6d0 <ip4_output_if_src+0x144>)
 801a5de:	f44f 7262 	mov.w	r2, #904	; 0x388
 801a5e2:	493e      	ldr	r1, [pc, #248]	; (801a6dc <ip4_output_if_src+0x150>)
 801a5e4:	483c      	ldr	r0, [pc, #240]	; (801a6d8 <ip4_output_if_src+0x14c>)
 801a5e6:	f001 f9d5 	bl	801b994 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801a5ea:	69fb      	ldr	r3, [r7, #28]
 801a5ec:	78fa      	ldrb	r2, [r7, #3]
 801a5ee:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801a5f0:	69fb      	ldr	r3, [r7, #28]
 801a5f2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a5f6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801a5f8:	687b      	ldr	r3, [r7, #4]
 801a5fa:	681a      	ldr	r2, [r3, #0]
 801a5fc:	69fb      	ldr	r3, [r7, #28]
 801a5fe:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801a600:	8b7b      	ldrh	r3, [r7, #26]
 801a602:	089b      	lsrs	r3, r3, #2
 801a604:	b29b      	uxth	r3, r3
 801a606:	b2db      	uxtb	r3, r3
 801a608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a60c:	b2da      	uxtb	r2, r3
 801a60e:	69fb      	ldr	r3, [r7, #28]
 801a610:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801a612:	69fb      	ldr	r3, [r7, #28]
 801a614:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a618:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801a61a:	68fb      	ldr	r3, [r7, #12]
 801a61c:	891b      	ldrh	r3, [r3, #8]
 801a61e:	4618      	mov	r0, r3
 801a620:	f7f6 f9fe 	bl	8010a20 <lwip_htons>
 801a624:	4603      	mov	r3, r0
 801a626:	461a      	mov	r2, r3
 801a628:	69fb      	ldr	r3, [r7, #28]
 801a62a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801a62c:	69fb      	ldr	r3, [r7, #28]
 801a62e:	2200      	movs	r2, #0
 801a630:	719a      	strb	r2, [r3, #6]
 801a632:	2200      	movs	r2, #0
 801a634:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801a636:	4b2a      	ldr	r3, [pc, #168]	; (801a6e0 <ip4_output_if_src+0x154>)
 801a638:	881b      	ldrh	r3, [r3, #0]
 801a63a:	4618      	mov	r0, r3
 801a63c:	f7f6 f9f0 	bl	8010a20 <lwip_htons>
 801a640:	4603      	mov	r3, r0
 801a642:	461a      	mov	r2, r3
 801a644:	69fb      	ldr	r3, [r7, #28]
 801a646:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801a648:	4b25      	ldr	r3, [pc, #148]	; (801a6e0 <ip4_output_if_src+0x154>)
 801a64a:	881b      	ldrh	r3, [r3, #0]
 801a64c:	3301      	adds	r3, #1
 801a64e:	b29a      	uxth	r2, r3
 801a650:	4b23      	ldr	r3, [pc, #140]	; (801a6e0 <ip4_output_if_src+0x154>)
 801a652:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801a654:	68bb      	ldr	r3, [r7, #8]
 801a656:	2b00      	cmp	r3, #0
 801a658:	d104      	bne.n	801a664 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801a65a:	4b22      	ldr	r3, [pc, #136]	; (801a6e4 <ip4_output_if_src+0x158>)
 801a65c:	681a      	ldr	r2, [r3, #0]
 801a65e:	69fb      	ldr	r3, [r7, #28]
 801a660:	60da      	str	r2, [r3, #12]
 801a662:	e003      	b.n	801a66c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801a664:	68bb      	ldr	r3, [r7, #8]
 801a666:	681a      	ldr	r2, [r3, #0]
 801a668:	69fb      	ldr	r3, [r7, #28]
 801a66a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801a66c:	69fb      	ldr	r3, [r7, #28]
 801a66e:	2200      	movs	r2, #0
 801a670:	729a      	strb	r2, [r3, #10]
 801a672:	2200      	movs	r2, #0
 801a674:	72da      	strb	r2, [r3, #11]
 801a676:	e00f      	b.n	801a698 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801a678:	68fb      	ldr	r3, [r7, #12]
 801a67a:	895b      	ldrh	r3, [r3, #10]
 801a67c:	2b13      	cmp	r3, #19
 801a67e:	d802      	bhi.n	801a686 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a680:	f06f 0301 	mvn.w	r3, #1
 801a684:	e020      	b.n	801a6c8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801a686:	68fb      	ldr	r3, [r7, #12]
 801a688:	685b      	ldr	r3, [r3, #4]
 801a68a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801a68c:	69fb      	ldr	r3, [r7, #28]
 801a68e:	691b      	ldr	r3, [r3, #16]
 801a690:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801a692:	f107 0314 	add.w	r3, r7, #20
 801a696:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801a698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a69a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a69c:	2b00      	cmp	r3, #0
 801a69e:	d00c      	beq.n	801a6ba <ip4_output_if_src+0x12e>
 801a6a0:	68fb      	ldr	r3, [r7, #12]
 801a6a2:	891a      	ldrh	r2, [r3, #8]
 801a6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a6a8:	429a      	cmp	r2, r3
 801a6aa:	d906      	bls.n	801a6ba <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801a6ac:	687a      	ldr	r2, [r7, #4]
 801a6ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a6b0:	68f8      	ldr	r0, [r7, #12]
 801a6b2:	f000 fd53 	bl	801b15c <ip4_frag>
 801a6b6:	4603      	mov	r3, r0
 801a6b8:	e006      	b.n	801a6c8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801a6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6bc:	695b      	ldr	r3, [r3, #20]
 801a6be:	687a      	ldr	r2, [r7, #4]
 801a6c0:	68f9      	ldr	r1, [r7, #12]
 801a6c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a6c4:	4798      	blx	r3
 801a6c6:	4603      	mov	r3, r0
}
 801a6c8:	4618      	mov	r0, r3
 801a6ca:	3720      	adds	r7, #32
 801a6cc:	46bd      	mov	sp, r7
 801a6ce:	bd80      	pop	{r7, pc}
 801a6d0:	08020270 	.word	0x08020270
 801a6d4:	080202a4 	.word	0x080202a4
 801a6d8:	080202b0 	.word	0x080202b0
 801a6dc:	080202d8 	.word	0x080202d8
 801a6e0:	200111de 	.word	0x200111de
 801a6e4:	080207b4 	.word	0x080207b4

0801a6e8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801a6e8:	b480      	push	{r7}
 801a6ea:	b085      	sub	sp, #20
 801a6ec:	af00      	add	r7, sp, #0
 801a6ee:	6078      	str	r0, [r7, #4]
 801a6f0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a6fc:	d002      	beq.n	801a704 <ip4_addr_isbroadcast_u32+0x1c>
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	2b00      	cmp	r3, #0
 801a702:	d101      	bne.n	801a708 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801a704:	2301      	movs	r3, #1
 801a706:	e02a      	b.n	801a75e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801a708:	683b      	ldr	r3, [r7, #0]
 801a70a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a70e:	f003 0302 	and.w	r3, r3, #2
 801a712:	2b00      	cmp	r3, #0
 801a714:	d101      	bne.n	801a71a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801a716:	2300      	movs	r3, #0
 801a718:	e021      	b.n	801a75e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801a71a:	683b      	ldr	r3, [r7, #0]
 801a71c:	3304      	adds	r3, #4
 801a71e:	681b      	ldr	r3, [r3, #0]
 801a720:	687a      	ldr	r2, [r7, #4]
 801a722:	429a      	cmp	r2, r3
 801a724:	d101      	bne.n	801a72a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801a726:	2300      	movs	r3, #0
 801a728:	e019      	b.n	801a75e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801a72a:	68fa      	ldr	r2, [r7, #12]
 801a72c:	683b      	ldr	r3, [r7, #0]
 801a72e:	3304      	adds	r3, #4
 801a730:	681b      	ldr	r3, [r3, #0]
 801a732:	405a      	eors	r2, r3
 801a734:	683b      	ldr	r3, [r7, #0]
 801a736:	3308      	adds	r3, #8
 801a738:	681b      	ldr	r3, [r3, #0]
 801a73a:	4013      	ands	r3, r2
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	d10d      	bne.n	801a75c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a740:	683b      	ldr	r3, [r7, #0]
 801a742:	3308      	adds	r3, #8
 801a744:	681b      	ldr	r3, [r3, #0]
 801a746:	43da      	mvns	r2, r3
 801a748:	687b      	ldr	r3, [r7, #4]
 801a74a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801a74c:	683b      	ldr	r3, [r7, #0]
 801a74e:	3308      	adds	r3, #8
 801a750:	681b      	ldr	r3, [r3, #0]
 801a752:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a754:	429a      	cmp	r2, r3
 801a756:	d101      	bne.n	801a75c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801a758:	2301      	movs	r3, #1
 801a75a:	e000      	b.n	801a75e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801a75c:	2300      	movs	r3, #0
  }
}
 801a75e:	4618      	mov	r0, r3
 801a760:	3714      	adds	r7, #20
 801a762:	46bd      	mov	sp, r7
 801a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a768:	4770      	bx	lr
	...

0801a76c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801a76c:	b580      	push	{r7, lr}
 801a76e:	b084      	sub	sp, #16
 801a770:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801a772:	2300      	movs	r3, #0
 801a774:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801a776:	4b12      	ldr	r3, [pc, #72]	; (801a7c0 <ip_reass_tmr+0x54>)
 801a778:	681b      	ldr	r3, [r3, #0]
 801a77a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801a77c:	e018      	b.n	801a7b0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801a77e:	68fb      	ldr	r3, [r7, #12]
 801a780:	7fdb      	ldrb	r3, [r3, #31]
 801a782:	2b00      	cmp	r3, #0
 801a784:	d00b      	beq.n	801a79e <ip_reass_tmr+0x32>
      r->timer--;
 801a786:	68fb      	ldr	r3, [r7, #12]
 801a788:	7fdb      	ldrb	r3, [r3, #31]
 801a78a:	3b01      	subs	r3, #1
 801a78c:	b2da      	uxtb	r2, r3
 801a78e:	68fb      	ldr	r3, [r7, #12]
 801a790:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801a792:	68fb      	ldr	r3, [r7, #12]
 801a794:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801a796:	68fb      	ldr	r3, [r7, #12]
 801a798:	681b      	ldr	r3, [r3, #0]
 801a79a:	60fb      	str	r3, [r7, #12]
 801a79c:	e008      	b.n	801a7b0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801a79e:	68fb      	ldr	r3, [r7, #12]
 801a7a0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801a7a2:	68fb      	ldr	r3, [r7, #12]
 801a7a4:	681b      	ldr	r3, [r3, #0]
 801a7a6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801a7a8:	68b9      	ldr	r1, [r7, #8]
 801a7aa:	6878      	ldr	r0, [r7, #4]
 801a7ac:	f000 f80a 	bl	801a7c4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801a7b0:	68fb      	ldr	r3, [r7, #12]
 801a7b2:	2b00      	cmp	r3, #0
 801a7b4:	d1e3      	bne.n	801a77e <ip_reass_tmr+0x12>
    }
  }
}
 801a7b6:	bf00      	nop
 801a7b8:	bf00      	nop
 801a7ba:	3710      	adds	r7, #16
 801a7bc:	46bd      	mov	sp, r7
 801a7be:	bd80      	pop	{r7, pc}
 801a7c0:	200111e0 	.word	0x200111e0

0801a7c4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a7c4:	b580      	push	{r7, lr}
 801a7c6:	b088      	sub	sp, #32
 801a7c8:	af00      	add	r7, sp, #0
 801a7ca:	6078      	str	r0, [r7, #4]
 801a7cc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801a7ce:	2300      	movs	r3, #0
 801a7d0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801a7d2:	683a      	ldr	r2, [r7, #0]
 801a7d4:	687b      	ldr	r3, [r7, #4]
 801a7d6:	429a      	cmp	r2, r3
 801a7d8:	d105      	bne.n	801a7e6 <ip_reass_free_complete_datagram+0x22>
 801a7da:	4b45      	ldr	r3, [pc, #276]	; (801a8f0 <ip_reass_free_complete_datagram+0x12c>)
 801a7dc:	22ab      	movs	r2, #171	; 0xab
 801a7de:	4945      	ldr	r1, [pc, #276]	; (801a8f4 <ip_reass_free_complete_datagram+0x130>)
 801a7e0:	4845      	ldr	r0, [pc, #276]	; (801a8f8 <ip_reass_free_complete_datagram+0x134>)
 801a7e2:	f001 f8d7 	bl	801b994 <iprintf>
  if (prev != NULL) {
 801a7e6:	683b      	ldr	r3, [r7, #0]
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	d00a      	beq.n	801a802 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801a7ec:	683b      	ldr	r3, [r7, #0]
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	687a      	ldr	r2, [r7, #4]
 801a7f2:	429a      	cmp	r2, r3
 801a7f4:	d005      	beq.n	801a802 <ip_reass_free_complete_datagram+0x3e>
 801a7f6:	4b3e      	ldr	r3, [pc, #248]	; (801a8f0 <ip_reass_free_complete_datagram+0x12c>)
 801a7f8:	22ad      	movs	r2, #173	; 0xad
 801a7fa:	4940      	ldr	r1, [pc, #256]	; (801a8fc <ip_reass_free_complete_datagram+0x138>)
 801a7fc:	483e      	ldr	r0, [pc, #248]	; (801a8f8 <ip_reass_free_complete_datagram+0x134>)
 801a7fe:	f001 f8c9 	bl	801b994 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801a802:	687b      	ldr	r3, [r7, #4]
 801a804:	685b      	ldr	r3, [r3, #4]
 801a806:	685b      	ldr	r3, [r3, #4]
 801a808:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801a80a:	697b      	ldr	r3, [r7, #20]
 801a80c:	889b      	ldrh	r3, [r3, #4]
 801a80e:	b29b      	uxth	r3, r3
 801a810:	2b00      	cmp	r3, #0
 801a812:	d12a      	bne.n	801a86a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	685b      	ldr	r3, [r3, #4]
 801a818:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801a81a:	697b      	ldr	r3, [r7, #20]
 801a81c:	681a      	ldr	r2, [r3, #0]
 801a81e:	687b      	ldr	r3, [r7, #4]
 801a820:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801a822:	69bb      	ldr	r3, [r7, #24]
 801a824:	6858      	ldr	r0, [r3, #4]
 801a826:	687b      	ldr	r3, [r7, #4]
 801a828:	3308      	adds	r3, #8
 801a82a:	2214      	movs	r2, #20
 801a82c:	4619      	mov	r1, r3
 801a82e:	f001 f89b 	bl	801b968 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801a832:	2101      	movs	r1, #1
 801a834:	69b8      	ldr	r0, [r7, #24]
 801a836:	f7ff fc47 	bl	801a0c8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801a83a:	69b8      	ldr	r0, [r7, #24]
 801a83c:	f7f7 fda2 	bl	8012384 <pbuf_clen>
 801a840:	4603      	mov	r3, r0
 801a842:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a844:	8bfa      	ldrh	r2, [r7, #30]
 801a846:	8a7b      	ldrh	r3, [r7, #18]
 801a848:	4413      	add	r3, r2
 801a84a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a84e:	db05      	blt.n	801a85c <ip_reass_free_complete_datagram+0x98>
 801a850:	4b27      	ldr	r3, [pc, #156]	; (801a8f0 <ip_reass_free_complete_datagram+0x12c>)
 801a852:	22bc      	movs	r2, #188	; 0xbc
 801a854:	492a      	ldr	r1, [pc, #168]	; (801a900 <ip_reass_free_complete_datagram+0x13c>)
 801a856:	4828      	ldr	r0, [pc, #160]	; (801a8f8 <ip_reass_free_complete_datagram+0x134>)
 801a858:	f001 f89c 	bl	801b994 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a85c:	8bfa      	ldrh	r2, [r7, #30]
 801a85e:	8a7b      	ldrh	r3, [r7, #18]
 801a860:	4413      	add	r3, r2
 801a862:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801a864:	69b8      	ldr	r0, [r7, #24]
 801a866:	f7f7 fcff 	bl	8012268 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	685b      	ldr	r3, [r3, #4]
 801a86e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801a870:	e01f      	b.n	801a8b2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801a872:	69bb      	ldr	r3, [r7, #24]
 801a874:	685b      	ldr	r3, [r3, #4]
 801a876:	617b      	str	r3, [r7, #20]
    pcur = p;
 801a878:	69bb      	ldr	r3, [r7, #24]
 801a87a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801a87c:	697b      	ldr	r3, [r7, #20]
 801a87e:	681b      	ldr	r3, [r3, #0]
 801a880:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801a882:	68f8      	ldr	r0, [r7, #12]
 801a884:	f7f7 fd7e 	bl	8012384 <pbuf_clen>
 801a888:	4603      	mov	r3, r0
 801a88a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a88c:	8bfa      	ldrh	r2, [r7, #30]
 801a88e:	8a7b      	ldrh	r3, [r7, #18]
 801a890:	4413      	add	r3, r2
 801a892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a896:	db05      	blt.n	801a8a4 <ip_reass_free_complete_datagram+0xe0>
 801a898:	4b15      	ldr	r3, [pc, #84]	; (801a8f0 <ip_reass_free_complete_datagram+0x12c>)
 801a89a:	22cc      	movs	r2, #204	; 0xcc
 801a89c:	4918      	ldr	r1, [pc, #96]	; (801a900 <ip_reass_free_complete_datagram+0x13c>)
 801a89e:	4816      	ldr	r0, [pc, #88]	; (801a8f8 <ip_reass_free_complete_datagram+0x134>)
 801a8a0:	f001 f878 	bl	801b994 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a8a4:	8bfa      	ldrh	r2, [r7, #30]
 801a8a6:	8a7b      	ldrh	r3, [r7, #18]
 801a8a8:	4413      	add	r3, r2
 801a8aa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801a8ac:	68f8      	ldr	r0, [r7, #12]
 801a8ae:	f7f7 fcdb 	bl	8012268 <pbuf_free>
  while (p != NULL) {
 801a8b2:	69bb      	ldr	r3, [r7, #24]
 801a8b4:	2b00      	cmp	r3, #0
 801a8b6:	d1dc      	bne.n	801a872 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801a8b8:	6839      	ldr	r1, [r7, #0]
 801a8ba:	6878      	ldr	r0, [r7, #4]
 801a8bc:	f000 f8c2 	bl	801aa44 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801a8c0:	4b10      	ldr	r3, [pc, #64]	; (801a904 <ip_reass_free_complete_datagram+0x140>)
 801a8c2:	881b      	ldrh	r3, [r3, #0]
 801a8c4:	8bfa      	ldrh	r2, [r7, #30]
 801a8c6:	429a      	cmp	r2, r3
 801a8c8:	d905      	bls.n	801a8d6 <ip_reass_free_complete_datagram+0x112>
 801a8ca:	4b09      	ldr	r3, [pc, #36]	; (801a8f0 <ip_reass_free_complete_datagram+0x12c>)
 801a8cc:	22d2      	movs	r2, #210	; 0xd2
 801a8ce:	490e      	ldr	r1, [pc, #56]	; (801a908 <ip_reass_free_complete_datagram+0x144>)
 801a8d0:	4809      	ldr	r0, [pc, #36]	; (801a8f8 <ip_reass_free_complete_datagram+0x134>)
 801a8d2:	f001 f85f 	bl	801b994 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801a8d6:	4b0b      	ldr	r3, [pc, #44]	; (801a904 <ip_reass_free_complete_datagram+0x140>)
 801a8d8:	881a      	ldrh	r2, [r3, #0]
 801a8da:	8bfb      	ldrh	r3, [r7, #30]
 801a8dc:	1ad3      	subs	r3, r2, r3
 801a8de:	b29a      	uxth	r2, r3
 801a8e0:	4b08      	ldr	r3, [pc, #32]	; (801a904 <ip_reass_free_complete_datagram+0x140>)
 801a8e2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801a8e4:	8bfb      	ldrh	r3, [r7, #30]
}
 801a8e6:	4618      	mov	r0, r3
 801a8e8:	3720      	adds	r7, #32
 801a8ea:	46bd      	mov	sp, r7
 801a8ec:	bd80      	pop	{r7, pc}
 801a8ee:	bf00      	nop
 801a8f0:	08020308 	.word	0x08020308
 801a8f4:	08020344 	.word	0x08020344
 801a8f8:	08020350 	.word	0x08020350
 801a8fc:	08020378 	.word	0x08020378
 801a900:	0802038c 	.word	0x0802038c
 801a904:	200111e4 	.word	0x200111e4
 801a908:	080203ac 	.word	0x080203ac

0801a90c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801a90c:	b580      	push	{r7, lr}
 801a90e:	b08a      	sub	sp, #40	; 0x28
 801a910:	af00      	add	r7, sp, #0
 801a912:	6078      	str	r0, [r7, #4]
 801a914:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801a916:	2300      	movs	r3, #0
 801a918:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801a91a:	2300      	movs	r3, #0
 801a91c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801a91e:	2300      	movs	r3, #0
 801a920:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801a922:	2300      	movs	r3, #0
 801a924:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801a926:	2300      	movs	r3, #0
 801a928:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801a92a:	4b28      	ldr	r3, [pc, #160]	; (801a9cc <ip_reass_remove_oldest_datagram+0xc0>)
 801a92c:	681b      	ldr	r3, [r3, #0]
 801a92e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a930:	e030      	b.n	801a994 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801a932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a934:	695a      	ldr	r2, [r3, #20]
 801a936:	687b      	ldr	r3, [r7, #4]
 801a938:	68db      	ldr	r3, [r3, #12]
 801a93a:	429a      	cmp	r2, r3
 801a93c:	d10c      	bne.n	801a958 <ip_reass_remove_oldest_datagram+0x4c>
 801a93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a940:	699a      	ldr	r2, [r3, #24]
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	691b      	ldr	r3, [r3, #16]
 801a946:	429a      	cmp	r2, r3
 801a948:	d106      	bne.n	801a958 <ip_reass_remove_oldest_datagram+0x4c>
 801a94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a94c:	899a      	ldrh	r2, [r3, #12]
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	889b      	ldrh	r3, [r3, #4]
 801a952:	b29b      	uxth	r3, r3
 801a954:	429a      	cmp	r2, r3
 801a956:	d014      	beq.n	801a982 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801a958:	693b      	ldr	r3, [r7, #16]
 801a95a:	3301      	adds	r3, #1
 801a95c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801a95e:	6a3b      	ldr	r3, [r7, #32]
 801a960:	2b00      	cmp	r3, #0
 801a962:	d104      	bne.n	801a96e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801a964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a966:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a968:	69fb      	ldr	r3, [r7, #28]
 801a96a:	61bb      	str	r3, [r7, #24]
 801a96c:	e009      	b.n	801a982 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801a96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a970:	7fda      	ldrb	r2, [r3, #31]
 801a972:	6a3b      	ldr	r3, [r7, #32]
 801a974:	7fdb      	ldrb	r3, [r3, #31]
 801a976:	429a      	cmp	r2, r3
 801a978:	d803      	bhi.n	801a982 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801a97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a97c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a97e:	69fb      	ldr	r3, [r7, #28]
 801a980:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801a982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a984:	681b      	ldr	r3, [r3, #0]
 801a986:	2b00      	cmp	r3, #0
 801a988:	d001      	beq.n	801a98e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801a98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a98c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801a98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a990:	681b      	ldr	r3, [r3, #0]
 801a992:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a996:	2b00      	cmp	r3, #0
 801a998:	d1cb      	bne.n	801a932 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801a99a:	6a3b      	ldr	r3, [r7, #32]
 801a99c:	2b00      	cmp	r3, #0
 801a99e:	d008      	beq.n	801a9b2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801a9a0:	69b9      	ldr	r1, [r7, #24]
 801a9a2:	6a38      	ldr	r0, [r7, #32]
 801a9a4:	f7ff ff0e 	bl	801a7c4 <ip_reass_free_complete_datagram>
 801a9a8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801a9aa:	697a      	ldr	r2, [r7, #20]
 801a9ac:	68fb      	ldr	r3, [r7, #12]
 801a9ae:	4413      	add	r3, r2
 801a9b0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801a9b2:	697a      	ldr	r2, [r7, #20]
 801a9b4:	683b      	ldr	r3, [r7, #0]
 801a9b6:	429a      	cmp	r2, r3
 801a9b8:	da02      	bge.n	801a9c0 <ip_reass_remove_oldest_datagram+0xb4>
 801a9ba:	693b      	ldr	r3, [r7, #16]
 801a9bc:	2b01      	cmp	r3, #1
 801a9be:	dcac      	bgt.n	801a91a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801a9c0:	697b      	ldr	r3, [r7, #20]
}
 801a9c2:	4618      	mov	r0, r3
 801a9c4:	3728      	adds	r7, #40	; 0x28
 801a9c6:	46bd      	mov	sp, r7
 801a9c8:	bd80      	pop	{r7, pc}
 801a9ca:	bf00      	nop
 801a9cc:	200111e0 	.word	0x200111e0

0801a9d0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801a9d0:	b580      	push	{r7, lr}
 801a9d2:	b084      	sub	sp, #16
 801a9d4:	af00      	add	r7, sp, #0
 801a9d6:	6078      	str	r0, [r7, #4]
 801a9d8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a9da:	2004      	movs	r0, #4
 801a9dc:	f7f6 fcf8 	bl	80113d0 <memp_malloc>
 801a9e0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801a9e2:	68fb      	ldr	r3, [r7, #12]
 801a9e4:	2b00      	cmp	r3, #0
 801a9e6:	d110      	bne.n	801aa0a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801a9e8:	6839      	ldr	r1, [r7, #0]
 801a9ea:	6878      	ldr	r0, [r7, #4]
 801a9ec:	f7ff ff8e 	bl	801a90c <ip_reass_remove_oldest_datagram>
 801a9f0:	4602      	mov	r2, r0
 801a9f2:	683b      	ldr	r3, [r7, #0]
 801a9f4:	4293      	cmp	r3, r2
 801a9f6:	dc03      	bgt.n	801aa00 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a9f8:	2004      	movs	r0, #4
 801a9fa:	f7f6 fce9 	bl	80113d0 <memp_malloc>
 801a9fe:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801aa00:	68fb      	ldr	r3, [r7, #12]
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d101      	bne.n	801aa0a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801aa06:	2300      	movs	r3, #0
 801aa08:	e016      	b.n	801aa38 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801aa0a:	2220      	movs	r2, #32
 801aa0c:	2100      	movs	r1, #0
 801aa0e:	68f8      	ldr	r0, [r7, #12]
 801aa10:	f000 ffb8 	bl	801b984 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801aa14:	68fb      	ldr	r3, [r7, #12]
 801aa16:	220f      	movs	r2, #15
 801aa18:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801aa1a:	4b09      	ldr	r3, [pc, #36]	; (801aa40 <ip_reass_enqueue_new_datagram+0x70>)
 801aa1c:	681a      	ldr	r2, [r3, #0]
 801aa1e:	68fb      	ldr	r3, [r7, #12]
 801aa20:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801aa22:	4a07      	ldr	r2, [pc, #28]	; (801aa40 <ip_reass_enqueue_new_datagram+0x70>)
 801aa24:	68fb      	ldr	r3, [r7, #12]
 801aa26:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801aa28:	68fb      	ldr	r3, [r7, #12]
 801aa2a:	3308      	adds	r3, #8
 801aa2c:	2214      	movs	r2, #20
 801aa2e:	6879      	ldr	r1, [r7, #4]
 801aa30:	4618      	mov	r0, r3
 801aa32:	f000 ff99 	bl	801b968 <memcpy>
  return ipr;
 801aa36:	68fb      	ldr	r3, [r7, #12]
}
 801aa38:	4618      	mov	r0, r3
 801aa3a:	3710      	adds	r7, #16
 801aa3c:	46bd      	mov	sp, r7
 801aa3e:	bd80      	pop	{r7, pc}
 801aa40:	200111e0 	.word	0x200111e0

0801aa44 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801aa44:	b580      	push	{r7, lr}
 801aa46:	b082      	sub	sp, #8
 801aa48:	af00      	add	r7, sp, #0
 801aa4a:	6078      	str	r0, [r7, #4]
 801aa4c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801aa4e:	4b10      	ldr	r3, [pc, #64]	; (801aa90 <ip_reass_dequeue_datagram+0x4c>)
 801aa50:	681b      	ldr	r3, [r3, #0]
 801aa52:	687a      	ldr	r2, [r7, #4]
 801aa54:	429a      	cmp	r2, r3
 801aa56:	d104      	bne.n	801aa62 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	681b      	ldr	r3, [r3, #0]
 801aa5c:	4a0c      	ldr	r2, [pc, #48]	; (801aa90 <ip_reass_dequeue_datagram+0x4c>)
 801aa5e:	6013      	str	r3, [r2, #0]
 801aa60:	e00d      	b.n	801aa7e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801aa62:	683b      	ldr	r3, [r7, #0]
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	d106      	bne.n	801aa76 <ip_reass_dequeue_datagram+0x32>
 801aa68:	4b0a      	ldr	r3, [pc, #40]	; (801aa94 <ip_reass_dequeue_datagram+0x50>)
 801aa6a:	f240 1245 	movw	r2, #325	; 0x145
 801aa6e:	490a      	ldr	r1, [pc, #40]	; (801aa98 <ip_reass_dequeue_datagram+0x54>)
 801aa70:	480a      	ldr	r0, [pc, #40]	; (801aa9c <ip_reass_dequeue_datagram+0x58>)
 801aa72:	f000 ff8f 	bl	801b994 <iprintf>
    prev->next = ipr->next;
 801aa76:	687b      	ldr	r3, [r7, #4]
 801aa78:	681a      	ldr	r2, [r3, #0]
 801aa7a:	683b      	ldr	r3, [r7, #0]
 801aa7c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801aa7e:	6879      	ldr	r1, [r7, #4]
 801aa80:	2004      	movs	r0, #4
 801aa82:	f7f6 fd1b 	bl	80114bc <memp_free>
}
 801aa86:	bf00      	nop
 801aa88:	3708      	adds	r7, #8
 801aa8a:	46bd      	mov	sp, r7
 801aa8c:	bd80      	pop	{r7, pc}
 801aa8e:	bf00      	nop
 801aa90:	200111e0 	.word	0x200111e0
 801aa94:	08020308 	.word	0x08020308
 801aa98:	080203d0 	.word	0x080203d0
 801aa9c:	08020350 	.word	0x08020350

0801aaa0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801aaa0:	b580      	push	{r7, lr}
 801aaa2:	b08c      	sub	sp, #48	; 0x30
 801aaa4:	af00      	add	r7, sp, #0
 801aaa6:	60f8      	str	r0, [r7, #12]
 801aaa8:	60b9      	str	r1, [r7, #8]
 801aaaa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801aaac:	2300      	movs	r3, #0
 801aaae:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801aab0:	2301      	movs	r3, #1
 801aab2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801aab4:	68bb      	ldr	r3, [r7, #8]
 801aab6:	685b      	ldr	r3, [r3, #4]
 801aab8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801aaba:	69fb      	ldr	r3, [r7, #28]
 801aabc:	885b      	ldrh	r3, [r3, #2]
 801aabe:	b29b      	uxth	r3, r3
 801aac0:	4618      	mov	r0, r3
 801aac2:	f7f5 ffad 	bl	8010a20 <lwip_htons>
 801aac6:	4603      	mov	r3, r0
 801aac8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801aaca:	69fb      	ldr	r3, [r7, #28]
 801aacc:	781b      	ldrb	r3, [r3, #0]
 801aace:	f003 030f 	and.w	r3, r3, #15
 801aad2:	b2db      	uxtb	r3, r3
 801aad4:	009b      	lsls	r3, r3, #2
 801aad6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801aad8:	7e7b      	ldrb	r3, [r7, #25]
 801aada:	b29b      	uxth	r3, r3
 801aadc:	8b7a      	ldrh	r2, [r7, #26]
 801aade:	429a      	cmp	r2, r3
 801aae0:	d202      	bcs.n	801aae8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801aae2:	f04f 33ff 	mov.w	r3, #4294967295
 801aae6:	e135      	b.n	801ad54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801aae8:	7e7b      	ldrb	r3, [r7, #25]
 801aaea:	b29b      	uxth	r3, r3
 801aaec:	8b7a      	ldrh	r2, [r7, #26]
 801aaee:	1ad3      	subs	r3, r2, r3
 801aaf0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801aaf2:	69fb      	ldr	r3, [r7, #28]
 801aaf4:	88db      	ldrh	r3, [r3, #6]
 801aaf6:	b29b      	uxth	r3, r3
 801aaf8:	4618      	mov	r0, r3
 801aafa:	f7f5 ff91 	bl	8010a20 <lwip_htons>
 801aafe:	4603      	mov	r3, r0
 801ab00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ab04:	b29b      	uxth	r3, r3
 801ab06:	00db      	lsls	r3, r3, #3
 801ab08:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801ab0a:	68bb      	ldr	r3, [r7, #8]
 801ab0c:	685b      	ldr	r3, [r3, #4]
 801ab0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801ab10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab12:	2200      	movs	r2, #0
 801ab14:	701a      	strb	r2, [r3, #0]
 801ab16:	2200      	movs	r2, #0
 801ab18:	705a      	strb	r2, [r3, #1]
 801ab1a:	2200      	movs	r2, #0
 801ab1c:	709a      	strb	r2, [r3, #2]
 801ab1e:	2200      	movs	r2, #0
 801ab20:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801ab22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab24:	8afa      	ldrh	r2, [r7, #22]
 801ab26:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801ab28:	8afa      	ldrh	r2, [r7, #22]
 801ab2a:	8b7b      	ldrh	r3, [r7, #26]
 801ab2c:	4413      	add	r3, r2
 801ab2e:	b29a      	uxth	r2, r3
 801ab30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab32:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801ab34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab36:	88db      	ldrh	r3, [r3, #6]
 801ab38:	b29b      	uxth	r3, r3
 801ab3a:	8afa      	ldrh	r2, [r7, #22]
 801ab3c:	429a      	cmp	r2, r3
 801ab3e:	d902      	bls.n	801ab46 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ab40:	f04f 33ff 	mov.w	r3, #4294967295
 801ab44:	e106      	b.n	801ad54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801ab46:	68fb      	ldr	r3, [r7, #12]
 801ab48:	685b      	ldr	r3, [r3, #4]
 801ab4a:	627b      	str	r3, [r7, #36]	; 0x24
 801ab4c:	e068      	b.n	801ac20 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801ab4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab50:	685b      	ldr	r3, [r3, #4]
 801ab52:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801ab54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab56:	889b      	ldrh	r3, [r3, #4]
 801ab58:	b29a      	uxth	r2, r3
 801ab5a:	693b      	ldr	r3, [r7, #16]
 801ab5c:	889b      	ldrh	r3, [r3, #4]
 801ab5e:	b29b      	uxth	r3, r3
 801ab60:	429a      	cmp	r2, r3
 801ab62:	d235      	bcs.n	801abd0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801ab64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ab68:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801ab6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	d020      	beq.n	801abb2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801ab70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab72:	889b      	ldrh	r3, [r3, #4]
 801ab74:	b29a      	uxth	r2, r3
 801ab76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab78:	88db      	ldrh	r3, [r3, #6]
 801ab7a:	b29b      	uxth	r3, r3
 801ab7c:	429a      	cmp	r2, r3
 801ab7e:	d307      	bcc.n	801ab90 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801ab80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab82:	88db      	ldrh	r3, [r3, #6]
 801ab84:	b29a      	uxth	r2, r3
 801ab86:	693b      	ldr	r3, [r7, #16]
 801ab88:	889b      	ldrh	r3, [r3, #4]
 801ab8a:	b29b      	uxth	r3, r3
 801ab8c:	429a      	cmp	r2, r3
 801ab8e:	d902      	bls.n	801ab96 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ab90:	f04f 33ff 	mov.w	r3, #4294967295
 801ab94:	e0de      	b.n	801ad54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801ab96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab98:	68ba      	ldr	r2, [r7, #8]
 801ab9a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801ab9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab9e:	88db      	ldrh	r3, [r3, #6]
 801aba0:	b29a      	uxth	r2, r3
 801aba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aba4:	889b      	ldrh	r3, [r3, #4]
 801aba6:	b29b      	uxth	r3, r3
 801aba8:	429a      	cmp	r2, r3
 801abaa:	d03d      	beq.n	801ac28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801abac:	2300      	movs	r3, #0
 801abae:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801abb0:	e03a      	b.n	801ac28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801abb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abb4:	88db      	ldrh	r3, [r3, #6]
 801abb6:	b29a      	uxth	r2, r3
 801abb8:	693b      	ldr	r3, [r7, #16]
 801abba:	889b      	ldrh	r3, [r3, #4]
 801abbc:	b29b      	uxth	r3, r3
 801abbe:	429a      	cmp	r2, r3
 801abc0:	d902      	bls.n	801abc8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801abc2:	f04f 33ff 	mov.w	r3, #4294967295
 801abc6:	e0c5      	b.n	801ad54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801abc8:	68fb      	ldr	r3, [r7, #12]
 801abca:	68ba      	ldr	r2, [r7, #8]
 801abcc:	605a      	str	r2, [r3, #4]
      break;
 801abce:	e02b      	b.n	801ac28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801abd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abd2:	889b      	ldrh	r3, [r3, #4]
 801abd4:	b29a      	uxth	r2, r3
 801abd6:	693b      	ldr	r3, [r7, #16]
 801abd8:	889b      	ldrh	r3, [r3, #4]
 801abda:	b29b      	uxth	r3, r3
 801abdc:	429a      	cmp	r2, r3
 801abde:	d102      	bne.n	801abe6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801abe0:	f04f 33ff 	mov.w	r3, #4294967295
 801abe4:	e0b6      	b.n	801ad54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801abe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abe8:	889b      	ldrh	r3, [r3, #4]
 801abea:	b29a      	uxth	r2, r3
 801abec:	693b      	ldr	r3, [r7, #16]
 801abee:	88db      	ldrh	r3, [r3, #6]
 801abf0:	b29b      	uxth	r3, r3
 801abf2:	429a      	cmp	r2, r3
 801abf4:	d202      	bcs.n	801abfc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801abf6:	f04f 33ff 	mov.w	r3, #4294967295
 801abfa:	e0ab      	b.n	801ad54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801abfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d009      	beq.n	801ac16 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801ac02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac04:	88db      	ldrh	r3, [r3, #6]
 801ac06:	b29a      	uxth	r2, r3
 801ac08:	693b      	ldr	r3, [r7, #16]
 801ac0a:	889b      	ldrh	r3, [r3, #4]
 801ac0c:	b29b      	uxth	r3, r3
 801ac0e:	429a      	cmp	r2, r3
 801ac10:	d001      	beq.n	801ac16 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801ac12:	2300      	movs	r3, #0
 801ac14:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801ac16:	693b      	ldr	r3, [r7, #16]
 801ac18:	681b      	ldr	r3, [r3, #0]
 801ac1a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801ac1c:	693b      	ldr	r3, [r7, #16]
 801ac1e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801ac20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	d193      	bne.n	801ab4e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801ac26:	e000      	b.n	801ac2a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801ac28:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801ac2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac2c:	2b00      	cmp	r3, #0
 801ac2e:	d12d      	bne.n	801ac8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801ac30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	d01c      	beq.n	801ac70 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801ac36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac38:	88db      	ldrh	r3, [r3, #6]
 801ac3a:	b29a      	uxth	r2, r3
 801ac3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac3e:	889b      	ldrh	r3, [r3, #4]
 801ac40:	b29b      	uxth	r3, r3
 801ac42:	429a      	cmp	r2, r3
 801ac44:	d906      	bls.n	801ac54 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801ac46:	4b45      	ldr	r3, [pc, #276]	; (801ad5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ac48:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801ac4c:	4944      	ldr	r1, [pc, #272]	; (801ad60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801ac4e:	4845      	ldr	r0, [pc, #276]	; (801ad64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ac50:	f000 fea0 	bl	801b994 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801ac54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac56:	68ba      	ldr	r2, [r7, #8]
 801ac58:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801ac5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac5c:	88db      	ldrh	r3, [r3, #6]
 801ac5e:	b29a      	uxth	r2, r3
 801ac60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac62:	889b      	ldrh	r3, [r3, #4]
 801ac64:	b29b      	uxth	r3, r3
 801ac66:	429a      	cmp	r2, r3
 801ac68:	d010      	beq.n	801ac8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801ac6a:	2300      	movs	r3, #0
 801ac6c:	623b      	str	r3, [r7, #32]
 801ac6e:	e00d      	b.n	801ac8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801ac70:	68fb      	ldr	r3, [r7, #12]
 801ac72:	685b      	ldr	r3, [r3, #4]
 801ac74:	2b00      	cmp	r3, #0
 801ac76:	d006      	beq.n	801ac86 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801ac78:	4b38      	ldr	r3, [pc, #224]	; (801ad5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ac7a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801ac7e:	493a      	ldr	r1, [pc, #232]	; (801ad68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801ac80:	4838      	ldr	r0, [pc, #224]	; (801ad64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ac82:	f000 fe87 	bl	801b994 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801ac86:	68fb      	ldr	r3, [r7, #12]
 801ac88:	68ba      	ldr	r2, [r7, #8]
 801ac8a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d105      	bne.n	801ac9e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801ac92:	68fb      	ldr	r3, [r7, #12]
 801ac94:	7f9b      	ldrb	r3, [r3, #30]
 801ac96:	f003 0301 	and.w	r3, r3, #1
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d059      	beq.n	801ad52 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801ac9e:	6a3b      	ldr	r3, [r7, #32]
 801aca0:	2b00      	cmp	r3, #0
 801aca2:	d04f      	beq.n	801ad44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801aca4:	68fb      	ldr	r3, [r7, #12]
 801aca6:	685b      	ldr	r3, [r3, #4]
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	d006      	beq.n	801acba <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801acac:	68fb      	ldr	r3, [r7, #12]
 801acae:	685b      	ldr	r3, [r3, #4]
 801acb0:	685b      	ldr	r3, [r3, #4]
 801acb2:	889b      	ldrh	r3, [r3, #4]
 801acb4:	b29b      	uxth	r3, r3
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	d002      	beq.n	801acc0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801acba:	2300      	movs	r3, #0
 801acbc:	623b      	str	r3, [r7, #32]
 801acbe:	e041      	b.n	801ad44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801acc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acc2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801acc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acc6:	681b      	ldr	r3, [r3, #0]
 801acc8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801acca:	e012      	b.n	801acf2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801accc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acce:	685b      	ldr	r3, [r3, #4]
 801acd0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801acd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acd4:	88db      	ldrh	r3, [r3, #6]
 801acd6:	b29a      	uxth	r2, r3
 801acd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acda:	889b      	ldrh	r3, [r3, #4]
 801acdc:	b29b      	uxth	r3, r3
 801acde:	429a      	cmp	r2, r3
 801ace0:	d002      	beq.n	801ace8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801ace2:	2300      	movs	r3, #0
 801ace4:	623b      	str	r3, [r7, #32]
            break;
 801ace6:	e007      	b.n	801acf8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801ace8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acea:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801acec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acee:	681b      	ldr	r3, [r3, #0]
 801acf0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801acf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	d1e9      	bne.n	801accc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801acf8:	6a3b      	ldr	r3, [r7, #32]
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	d022      	beq.n	801ad44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801acfe:	68fb      	ldr	r3, [r7, #12]
 801ad00:	685b      	ldr	r3, [r3, #4]
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	d106      	bne.n	801ad14 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801ad06:	4b15      	ldr	r3, [pc, #84]	; (801ad5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ad08:	f240 12df 	movw	r2, #479	; 0x1df
 801ad0c:	4917      	ldr	r1, [pc, #92]	; (801ad6c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ad0e:	4815      	ldr	r0, [pc, #84]	; (801ad64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ad10:	f000 fe40 	bl	801b994 <iprintf>
          LWIP_ASSERT("sanity check",
 801ad14:	68fb      	ldr	r3, [r7, #12]
 801ad16:	685b      	ldr	r3, [r3, #4]
 801ad18:	685b      	ldr	r3, [r3, #4]
 801ad1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ad1c:	429a      	cmp	r2, r3
 801ad1e:	d106      	bne.n	801ad2e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801ad20:	4b0e      	ldr	r3, [pc, #56]	; (801ad5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ad22:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801ad26:	4911      	ldr	r1, [pc, #68]	; (801ad6c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ad28:	480e      	ldr	r0, [pc, #56]	; (801ad64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ad2a:	f000 fe33 	bl	801b994 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801ad2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad30:	681b      	ldr	r3, [r3, #0]
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	d006      	beq.n	801ad44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801ad36:	4b09      	ldr	r3, [pc, #36]	; (801ad5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ad38:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801ad3c:	490c      	ldr	r1, [pc, #48]	; (801ad70 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801ad3e:	4809      	ldr	r0, [pc, #36]	; (801ad64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ad40:	f000 fe28 	bl	801b994 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801ad44:	6a3b      	ldr	r3, [r7, #32]
 801ad46:	2b00      	cmp	r3, #0
 801ad48:	bf14      	ite	ne
 801ad4a:	2301      	movne	r3, #1
 801ad4c:	2300      	moveq	r3, #0
 801ad4e:	b2db      	uxtb	r3, r3
 801ad50:	e000      	b.n	801ad54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801ad52:	2300      	movs	r3, #0
}
 801ad54:	4618      	mov	r0, r3
 801ad56:	3730      	adds	r7, #48	; 0x30
 801ad58:	46bd      	mov	sp, r7
 801ad5a:	bd80      	pop	{r7, pc}
 801ad5c:	08020308 	.word	0x08020308
 801ad60:	080203ec 	.word	0x080203ec
 801ad64:	08020350 	.word	0x08020350
 801ad68:	0802040c 	.word	0x0802040c
 801ad6c:	08020444 	.word	0x08020444
 801ad70:	08020454 	.word	0x08020454

0801ad74 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801ad74:	b580      	push	{r7, lr}
 801ad76:	b08e      	sub	sp, #56	; 0x38
 801ad78:	af00      	add	r7, sp, #0
 801ad7a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	685b      	ldr	r3, [r3, #4]
 801ad80:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801ad82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad84:	781b      	ldrb	r3, [r3, #0]
 801ad86:	f003 030f 	and.w	r3, r3, #15
 801ad8a:	b2db      	uxtb	r3, r3
 801ad8c:	009b      	lsls	r3, r3, #2
 801ad8e:	b2db      	uxtb	r3, r3
 801ad90:	2b14      	cmp	r3, #20
 801ad92:	f040 8171 	bne.w	801b078 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801ad96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad98:	88db      	ldrh	r3, [r3, #6]
 801ad9a:	b29b      	uxth	r3, r3
 801ad9c:	4618      	mov	r0, r3
 801ad9e:	f7f5 fe3f 	bl	8010a20 <lwip_htons>
 801ada2:	4603      	mov	r3, r0
 801ada4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ada8:	b29b      	uxth	r3, r3
 801adaa:	00db      	lsls	r3, r3, #3
 801adac:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801adae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adb0:	885b      	ldrh	r3, [r3, #2]
 801adb2:	b29b      	uxth	r3, r3
 801adb4:	4618      	mov	r0, r3
 801adb6:	f7f5 fe33 	bl	8010a20 <lwip_htons>
 801adba:	4603      	mov	r3, r0
 801adbc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801adbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adc0:	781b      	ldrb	r3, [r3, #0]
 801adc2:	f003 030f 	and.w	r3, r3, #15
 801adc6:	b2db      	uxtb	r3, r3
 801adc8:	009b      	lsls	r3, r3, #2
 801adca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801adce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801add2:	b29b      	uxth	r3, r3
 801add4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801add6:	429a      	cmp	r2, r3
 801add8:	f0c0 8150 	bcc.w	801b07c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801addc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ade0:	b29b      	uxth	r3, r3
 801ade2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ade4:	1ad3      	subs	r3, r2, r3
 801ade6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801ade8:	6878      	ldr	r0, [r7, #4]
 801adea:	f7f7 facb 	bl	8012384 <pbuf_clen>
 801adee:	4603      	mov	r3, r0
 801adf0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801adf2:	4b8c      	ldr	r3, [pc, #560]	; (801b024 <ip4_reass+0x2b0>)
 801adf4:	881b      	ldrh	r3, [r3, #0]
 801adf6:	461a      	mov	r2, r3
 801adf8:	8c3b      	ldrh	r3, [r7, #32]
 801adfa:	4413      	add	r3, r2
 801adfc:	2b0a      	cmp	r3, #10
 801adfe:	dd10      	ble.n	801ae22 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801ae00:	8c3b      	ldrh	r3, [r7, #32]
 801ae02:	4619      	mov	r1, r3
 801ae04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ae06:	f7ff fd81 	bl	801a90c <ip_reass_remove_oldest_datagram>
 801ae0a:	4603      	mov	r3, r0
 801ae0c:	2b00      	cmp	r3, #0
 801ae0e:	f000 8137 	beq.w	801b080 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801ae12:	4b84      	ldr	r3, [pc, #528]	; (801b024 <ip4_reass+0x2b0>)
 801ae14:	881b      	ldrh	r3, [r3, #0]
 801ae16:	461a      	mov	r2, r3
 801ae18:	8c3b      	ldrh	r3, [r7, #32]
 801ae1a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801ae1c:	2b0a      	cmp	r3, #10
 801ae1e:	f300 812f 	bgt.w	801b080 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801ae22:	4b81      	ldr	r3, [pc, #516]	; (801b028 <ip4_reass+0x2b4>)
 801ae24:	681b      	ldr	r3, [r3, #0]
 801ae26:	633b      	str	r3, [r7, #48]	; 0x30
 801ae28:	e015      	b.n	801ae56 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801ae2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae2c:	695a      	ldr	r2, [r3, #20]
 801ae2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae30:	68db      	ldr	r3, [r3, #12]
 801ae32:	429a      	cmp	r2, r3
 801ae34:	d10c      	bne.n	801ae50 <ip4_reass+0xdc>
 801ae36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae38:	699a      	ldr	r2, [r3, #24]
 801ae3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae3c:	691b      	ldr	r3, [r3, #16]
 801ae3e:	429a      	cmp	r2, r3
 801ae40:	d106      	bne.n	801ae50 <ip4_reass+0xdc>
 801ae42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae44:	899a      	ldrh	r2, [r3, #12]
 801ae46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae48:	889b      	ldrh	r3, [r3, #4]
 801ae4a:	b29b      	uxth	r3, r3
 801ae4c:	429a      	cmp	r2, r3
 801ae4e:	d006      	beq.n	801ae5e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801ae50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae52:	681b      	ldr	r3, [r3, #0]
 801ae54:	633b      	str	r3, [r7, #48]	; 0x30
 801ae56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae58:	2b00      	cmp	r3, #0
 801ae5a:	d1e6      	bne.n	801ae2a <ip4_reass+0xb6>
 801ae5c:	e000      	b.n	801ae60 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801ae5e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801ae60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae62:	2b00      	cmp	r3, #0
 801ae64:	d109      	bne.n	801ae7a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801ae66:	8c3b      	ldrh	r3, [r7, #32]
 801ae68:	4619      	mov	r1, r3
 801ae6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ae6c:	f7ff fdb0 	bl	801a9d0 <ip_reass_enqueue_new_datagram>
 801ae70:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801ae72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae74:	2b00      	cmp	r3, #0
 801ae76:	d11c      	bne.n	801aeb2 <ip4_reass+0x13e>
      goto nullreturn;
 801ae78:	e105      	b.n	801b086 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801ae7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae7c:	88db      	ldrh	r3, [r3, #6]
 801ae7e:	b29b      	uxth	r3, r3
 801ae80:	4618      	mov	r0, r3
 801ae82:	f7f5 fdcd 	bl	8010a20 <lwip_htons>
 801ae86:	4603      	mov	r3, r0
 801ae88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	d110      	bne.n	801aeb2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801ae90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae92:	89db      	ldrh	r3, [r3, #14]
 801ae94:	4618      	mov	r0, r3
 801ae96:	f7f5 fdc3 	bl	8010a20 <lwip_htons>
 801ae9a:	4603      	mov	r3, r0
 801ae9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801aea0:	2b00      	cmp	r3, #0
 801aea2:	d006      	beq.n	801aeb2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801aea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aea6:	3308      	adds	r3, #8
 801aea8:	2214      	movs	r2, #20
 801aeaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801aeac:	4618      	mov	r0, r3
 801aeae:	f000 fd5b 	bl	801b968 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801aeb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aeb4:	88db      	ldrh	r3, [r3, #6]
 801aeb6:	b29b      	uxth	r3, r3
 801aeb8:	f003 0320 	and.w	r3, r3, #32
 801aebc:	2b00      	cmp	r3, #0
 801aebe:	bf0c      	ite	eq
 801aec0:	2301      	moveq	r3, #1
 801aec2:	2300      	movne	r3, #0
 801aec4:	b2db      	uxtb	r3, r3
 801aec6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801aec8:	69fb      	ldr	r3, [r7, #28]
 801aeca:	2b00      	cmp	r3, #0
 801aecc:	d00e      	beq.n	801aeec <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801aece:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801aed0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801aed2:	4413      	add	r3, r2
 801aed4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801aed6:	8b7a      	ldrh	r2, [r7, #26]
 801aed8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801aeda:	429a      	cmp	r2, r3
 801aedc:	f0c0 80a0 	bcc.w	801b020 <ip4_reass+0x2ac>
 801aee0:	8b7b      	ldrh	r3, [r7, #26]
 801aee2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801aee6:	4293      	cmp	r3, r2
 801aee8:	f200 809a 	bhi.w	801b020 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801aeec:	69fa      	ldr	r2, [r7, #28]
 801aeee:	6879      	ldr	r1, [r7, #4]
 801aef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801aef2:	f7ff fdd5 	bl	801aaa0 <ip_reass_chain_frag_into_datagram_and_validate>
 801aef6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801aef8:	697b      	ldr	r3, [r7, #20]
 801aefa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aefe:	f000 809b 	beq.w	801b038 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801af02:	4b48      	ldr	r3, [pc, #288]	; (801b024 <ip4_reass+0x2b0>)
 801af04:	881a      	ldrh	r2, [r3, #0]
 801af06:	8c3b      	ldrh	r3, [r7, #32]
 801af08:	4413      	add	r3, r2
 801af0a:	b29a      	uxth	r2, r3
 801af0c:	4b45      	ldr	r3, [pc, #276]	; (801b024 <ip4_reass+0x2b0>)
 801af0e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801af10:	69fb      	ldr	r3, [r7, #28]
 801af12:	2b00      	cmp	r3, #0
 801af14:	d00d      	beq.n	801af32 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801af16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801af18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801af1a:	4413      	add	r3, r2
 801af1c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801af1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af20:	8a7a      	ldrh	r2, [r7, #18]
 801af22:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801af24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af26:	7f9b      	ldrb	r3, [r3, #30]
 801af28:	f043 0301 	orr.w	r3, r3, #1
 801af2c:	b2da      	uxtb	r2, r3
 801af2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af30:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801af32:	697b      	ldr	r3, [r7, #20]
 801af34:	2b01      	cmp	r3, #1
 801af36:	d171      	bne.n	801b01c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801af38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af3a:	8b9b      	ldrh	r3, [r3, #28]
 801af3c:	3314      	adds	r3, #20
 801af3e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801af40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af42:	685b      	ldr	r3, [r3, #4]
 801af44:	685b      	ldr	r3, [r3, #4]
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801af4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af4c:	685b      	ldr	r3, [r3, #4]
 801af4e:	685b      	ldr	r3, [r3, #4]
 801af50:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801af52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af54:	3308      	adds	r3, #8
 801af56:	2214      	movs	r2, #20
 801af58:	4619      	mov	r1, r3
 801af5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801af5c:	f000 fd04 	bl	801b968 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801af60:	8a3b      	ldrh	r3, [r7, #16]
 801af62:	4618      	mov	r0, r3
 801af64:	f7f5 fd5c 	bl	8010a20 <lwip_htons>
 801af68:	4603      	mov	r3, r0
 801af6a:	461a      	mov	r2, r3
 801af6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af6e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801af70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af72:	2200      	movs	r2, #0
 801af74:	719a      	strb	r2, [r3, #6]
 801af76:	2200      	movs	r2, #0
 801af78:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801af7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af7c:	2200      	movs	r2, #0
 801af7e:	729a      	strb	r2, [r3, #10]
 801af80:	2200      	movs	r2, #0
 801af82:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801af84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af86:	685b      	ldr	r3, [r3, #4]
 801af88:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801af8a:	e00d      	b.n	801afa8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801af8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af8e:	685b      	ldr	r3, [r3, #4]
 801af90:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801af92:	2114      	movs	r1, #20
 801af94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801af96:	f7f7 f8af 	bl	80120f8 <pbuf_remove_header>
      pbuf_cat(p, r);
 801af9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801af9c:	6878      	ldr	r0, [r7, #4]
 801af9e:	f7f7 fa31 	bl	8012404 <pbuf_cat>
      r = iprh->next_pbuf;
 801afa2:	68fb      	ldr	r3, [r7, #12]
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801afa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801afaa:	2b00      	cmp	r3, #0
 801afac:	d1ee      	bne.n	801af8c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801afae:	4b1e      	ldr	r3, [pc, #120]	; (801b028 <ip4_reass+0x2b4>)
 801afb0:	681b      	ldr	r3, [r3, #0]
 801afb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801afb4:	429a      	cmp	r2, r3
 801afb6:	d102      	bne.n	801afbe <ip4_reass+0x24a>
      ipr_prev = NULL;
 801afb8:	2300      	movs	r3, #0
 801afba:	62fb      	str	r3, [r7, #44]	; 0x2c
 801afbc:	e010      	b.n	801afe0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801afbe:	4b1a      	ldr	r3, [pc, #104]	; (801b028 <ip4_reass+0x2b4>)
 801afc0:	681b      	ldr	r3, [r3, #0]
 801afc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801afc4:	e007      	b.n	801afd6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801afc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801afc8:	681b      	ldr	r3, [r3, #0]
 801afca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801afcc:	429a      	cmp	r2, r3
 801afce:	d006      	beq.n	801afde <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801afd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801afd2:	681b      	ldr	r3, [r3, #0]
 801afd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801afd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801afd8:	2b00      	cmp	r3, #0
 801afda:	d1f4      	bne.n	801afc6 <ip4_reass+0x252>
 801afdc:	e000      	b.n	801afe0 <ip4_reass+0x26c>
          break;
 801afde:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801afe0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801afe2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801afe4:	f7ff fd2e 	bl	801aa44 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801afe8:	6878      	ldr	r0, [r7, #4]
 801afea:	f7f7 f9cb 	bl	8012384 <pbuf_clen>
 801afee:	4603      	mov	r3, r0
 801aff0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801aff2:	4b0c      	ldr	r3, [pc, #48]	; (801b024 <ip4_reass+0x2b0>)
 801aff4:	881b      	ldrh	r3, [r3, #0]
 801aff6:	8c3a      	ldrh	r2, [r7, #32]
 801aff8:	429a      	cmp	r2, r3
 801affa:	d906      	bls.n	801b00a <ip4_reass+0x296>
 801affc:	4b0b      	ldr	r3, [pc, #44]	; (801b02c <ip4_reass+0x2b8>)
 801affe:	f240 229b 	movw	r2, #667	; 0x29b
 801b002:	490b      	ldr	r1, [pc, #44]	; (801b030 <ip4_reass+0x2bc>)
 801b004:	480b      	ldr	r0, [pc, #44]	; (801b034 <ip4_reass+0x2c0>)
 801b006:	f000 fcc5 	bl	801b994 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801b00a:	4b06      	ldr	r3, [pc, #24]	; (801b024 <ip4_reass+0x2b0>)
 801b00c:	881a      	ldrh	r2, [r3, #0]
 801b00e:	8c3b      	ldrh	r3, [r7, #32]
 801b010:	1ad3      	subs	r3, r2, r3
 801b012:	b29a      	uxth	r2, r3
 801b014:	4b03      	ldr	r3, [pc, #12]	; (801b024 <ip4_reass+0x2b0>)
 801b016:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	e038      	b.n	801b08e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801b01c:	2300      	movs	r3, #0
 801b01e:	e036      	b.n	801b08e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801b020:	bf00      	nop
 801b022:	e00a      	b.n	801b03a <ip4_reass+0x2c6>
 801b024:	200111e4 	.word	0x200111e4
 801b028:	200111e0 	.word	0x200111e0
 801b02c:	08020308 	.word	0x08020308
 801b030:	08020478 	.word	0x08020478
 801b034:	08020350 	.word	0x08020350
    goto nullreturn_ipr;
 801b038:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801b03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b03c:	2b00      	cmp	r3, #0
 801b03e:	d106      	bne.n	801b04e <ip4_reass+0x2da>
 801b040:	4b15      	ldr	r3, [pc, #84]	; (801b098 <ip4_reass+0x324>)
 801b042:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801b046:	4915      	ldr	r1, [pc, #84]	; (801b09c <ip4_reass+0x328>)
 801b048:	4815      	ldr	r0, [pc, #84]	; (801b0a0 <ip4_reass+0x32c>)
 801b04a:	f000 fca3 	bl	801b994 <iprintf>
  if (ipr->p == NULL) {
 801b04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b050:	685b      	ldr	r3, [r3, #4]
 801b052:	2b00      	cmp	r3, #0
 801b054:	d116      	bne.n	801b084 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801b056:	4b13      	ldr	r3, [pc, #76]	; (801b0a4 <ip4_reass+0x330>)
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b05c:	429a      	cmp	r2, r3
 801b05e:	d006      	beq.n	801b06e <ip4_reass+0x2fa>
 801b060:	4b0d      	ldr	r3, [pc, #52]	; (801b098 <ip4_reass+0x324>)
 801b062:	f240 22ab 	movw	r2, #683	; 0x2ab
 801b066:	4910      	ldr	r1, [pc, #64]	; (801b0a8 <ip4_reass+0x334>)
 801b068:	480d      	ldr	r0, [pc, #52]	; (801b0a0 <ip4_reass+0x32c>)
 801b06a:	f000 fc93 	bl	801b994 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801b06e:	2100      	movs	r1, #0
 801b070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b072:	f7ff fce7 	bl	801aa44 <ip_reass_dequeue_datagram>
 801b076:	e006      	b.n	801b086 <ip4_reass+0x312>
    goto nullreturn;
 801b078:	bf00      	nop
 801b07a:	e004      	b.n	801b086 <ip4_reass+0x312>
    goto nullreturn;
 801b07c:	bf00      	nop
 801b07e:	e002      	b.n	801b086 <ip4_reass+0x312>
      goto nullreturn;
 801b080:	bf00      	nop
 801b082:	e000      	b.n	801b086 <ip4_reass+0x312>
  }

nullreturn:
 801b084:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801b086:	6878      	ldr	r0, [r7, #4]
 801b088:	f7f7 f8ee 	bl	8012268 <pbuf_free>
  return NULL;
 801b08c:	2300      	movs	r3, #0
}
 801b08e:	4618      	mov	r0, r3
 801b090:	3738      	adds	r7, #56	; 0x38
 801b092:	46bd      	mov	sp, r7
 801b094:	bd80      	pop	{r7, pc}
 801b096:	bf00      	nop
 801b098:	08020308 	.word	0x08020308
 801b09c:	08020494 	.word	0x08020494
 801b0a0:	08020350 	.word	0x08020350
 801b0a4:	200111e0 	.word	0x200111e0
 801b0a8:	080204a0 	.word	0x080204a0

0801b0ac <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801b0ac:	b580      	push	{r7, lr}
 801b0ae:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801b0b0:	2005      	movs	r0, #5
 801b0b2:	f7f6 f98d 	bl	80113d0 <memp_malloc>
 801b0b6:	4603      	mov	r3, r0
}
 801b0b8:	4618      	mov	r0, r3
 801b0ba:	bd80      	pop	{r7, pc}

0801b0bc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801b0bc:	b580      	push	{r7, lr}
 801b0be:	b082      	sub	sp, #8
 801b0c0:	af00      	add	r7, sp, #0
 801b0c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801b0c4:	687b      	ldr	r3, [r7, #4]
 801b0c6:	2b00      	cmp	r3, #0
 801b0c8:	d106      	bne.n	801b0d8 <ip_frag_free_pbuf_custom_ref+0x1c>
 801b0ca:	4b07      	ldr	r3, [pc, #28]	; (801b0e8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801b0cc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801b0d0:	4906      	ldr	r1, [pc, #24]	; (801b0ec <ip_frag_free_pbuf_custom_ref+0x30>)
 801b0d2:	4807      	ldr	r0, [pc, #28]	; (801b0f0 <ip_frag_free_pbuf_custom_ref+0x34>)
 801b0d4:	f000 fc5e 	bl	801b994 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801b0d8:	6879      	ldr	r1, [r7, #4]
 801b0da:	2005      	movs	r0, #5
 801b0dc:	f7f6 f9ee 	bl	80114bc <memp_free>
}
 801b0e0:	bf00      	nop
 801b0e2:	3708      	adds	r7, #8
 801b0e4:	46bd      	mov	sp, r7
 801b0e6:	bd80      	pop	{r7, pc}
 801b0e8:	08020308 	.word	0x08020308
 801b0ec:	080204c0 	.word	0x080204c0
 801b0f0:	08020350 	.word	0x08020350

0801b0f4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801b0f4:	b580      	push	{r7, lr}
 801b0f6:	b084      	sub	sp, #16
 801b0f8:	af00      	add	r7, sp, #0
 801b0fa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801b100:	68fb      	ldr	r3, [r7, #12]
 801b102:	2b00      	cmp	r3, #0
 801b104:	d106      	bne.n	801b114 <ipfrag_free_pbuf_custom+0x20>
 801b106:	4b11      	ldr	r3, [pc, #68]	; (801b14c <ipfrag_free_pbuf_custom+0x58>)
 801b108:	f240 22ce 	movw	r2, #718	; 0x2ce
 801b10c:	4910      	ldr	r1, [pc, #64]	; (801b150 <ipfrag_free_pbuf_custom+0x5c>)
 801b10e:	4811      	ldr	r0, [pc, #68]	; (801b154 <ipfrag_free_pbuf_custom+0x60>)
 801b110:	f000 fc40 	bl	801b994 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801b114:	68fa      	ldr	r2, [r7, #12]
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	429a      	cmp	r2, r3
 801b11a:	d006      	beq.n	801b12a <ipfrag_free_pbuf_custom+0x36>
 801b11c:	4b0b      	ldr	r3, [pc, #44]	; (801b14c <ipfrag_free_pbuf_custom+0x58>)
 801b11e:	f240 22cf 	movw	r2, #719	; 0x2cf
 801b122:	490d      	ldr	r1, [pc, #52]	; (801b158 <ipfrag_free_pbuf_custom+0x64>)
 801b124:	480b      	ldr	r0, [pc, #44]	; (801b154 <ipfrag_free_pbuf_custom+0x60>)
 801b126:	f000 fc35 	bl	801b994 <iprintf>
  if (pcr->original != NULL) {
 801b12a:	68fb      	ldr	r3, [r7, #12]
 801b12c:	695b      	ldr	r3, [r3, #20]
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d004      	beq.n	801b13c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801b132:	68fb      	ldr	r3, [r7, #12]
 801b134:	695b      	ldr	r3, [r3, #20]
 801b136:	4618      	mov	r0, r3
 801b138:	f7f7 f896 	bl	8012268 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801b13c:	68f8      	ldr	r0, [r7, #12]
 801b13e:	f7ff ffbd 	bl	801b0bc <ip_frag_free_pbuf_custom_ref>
}
 801b142:	bf00      	nop
 801b144:	3710      	adds	r7, #16
 801b146:	46bd      	mov	sp, r7
 801b148:	bd80      	pop	{r7, pc}
 801b14a:	bf00      	nop
 801b14c:	08020308 	.word	0x08020308
 801b150:	080204cc 	.word	0x080204cc
 801b154:	08020350 	.word	0x08020350
 801b158:	080204d8 	.word	0x080204d8

0801b15c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801b15c:	b580      	push	{r7, lr}
 801b15e:	b094      	sub	sp, #80	; 0x50
 801b160:	af02      	add	r7, sp, #8
 801b162:	60f8      	str	r0, [r7, #12]
 801b164:	60b9      	str	r1, [r7, #8]
 801b166:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801b168:	2300      	movs	r3, #0
 801b16a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801b16e:	68bb      	ldr	r3, [r7, #8]
 801b170:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b172:	3b14      	subs	r3, #20
 801b174:	2b00      	cmp	r3, #0
 801b176:	da00      	bge.n	801b17a <ip4_frag+0x1e>
 801b178:	3307      	adds	r3, #7
 801b17a:	10db      	asrs	r3, r3, #3
 801b17c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801b17e:	2314      	movs	r3, #20
 801b180:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801b182:	68fb      	ldr	r3, [r7, #12]
 801b184:	685b      	ldr	r3, [r3, #4]
 801b186:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801b188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b18a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801b18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b18e:	781b      	ldrb	r3, [r3, #0]
 801b190:	f003 030f 	and.w	r3, r3, #15
 801b194:	b2db      	uxtb	r3, r3
 801b196:	009b      	lsls	r3, r3, #2
 801b198:	b2db      	uxtb	r3, r3
 801b19a:	2b14      	cmp	r3, #20
 801b19c:	d002      	beq.n	801b1a4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801b19e:	f06f 0305 	mvn.w	r3, #5
 801b1a2:	e110      	b.n	801b3c6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801b1a4:	68fb      	ldr	r3, [r7, #12]
 801b1a6:	895b      	ldrh	r3, [r3, #10]
 801b1a8:	2b13      	cmp	r3, #19
 801b1aa:	d809      	bhi.n	801b1c0 <ip4_frag+0x64>
 801b1ac:	4b88      	ldr	r3, [pc, #544]	; (801b3d0 <ip4_frag+0x274>)
 801b1ae:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801b1b2:	4988      	ldr	r1, [pc, #544]	; (801b3d4 <ip4_frag+0x278>)
 801b1b4:	4888      	ldr	r0, [pc, #544]	; (801b3d8 <ip4_frag+0x27c>)
 801b1b6:	f000 fbed 	bl	801b994 <iprintf>
 801b1ba:	f06f 0305 	mvn.w	r3, #5
 801b1be:	e102      	b.n	801b3c6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801b1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b1c2:	88db      	ldrh	r3, [r3, #6]
 801b1c4:	b29b      	uxth	r3, r3
 801b1c6:	4618      	mov	r0, r3
 801b1c8:	f7f5 fc2a 	bl	8010a20 <lwip_htons>
 801b1cc:	4603      	mov	r3, r0
 801b1ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801b1d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b1d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b1d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801b1da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b1dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b1e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801b1e2:	68fb      	ldr	r3, [r7, #12]
 801b1e4:	891b      	ldrh	r3, [r3, #8]
 801b1e6:	3b14      	subs	r3, #20
 801b1e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801b1ec:	e0e1      	b.n	801b3b2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801b1ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b1f0:	00db      	lsls	r3, r3, #3
 801b1f2:	b29b      	uxth	r3, r3
 801b1f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b1f8:	4293      	cmp	r3, r2
 801b1fa:	bf28      	it	cs
 801b1fc:	4613      	movcs	r3, r2
 801b1fe:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801b200:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b204:	2114      	movs	r1, #20
 801b206:	200e      	movs	r0, #14
 801b208:	f7f6 fd18 	bl	8011c3c <pbuf_alloc>
 801b20c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801b20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b210:	2b00      	cmp	r3, #0
 801b212:	f000 80d5 	beq.w	801b3c0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801b216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b218:	895b      	ldrh	r3, [r3, #10]
 801b21a:	2b13      	cmp	r3, #19
 801b21c:	d806      	bhi.n	801b22c <ip4_frag+0xd0>
 801b21e:	4b6c      	ldr	r3, [pc, #432]	; (801b3d0 <ip4_frag+0x274>)
 801b220:	f44f 7249 	mov.w	r2, #804	; 0x324
 801b224:	496d      	ldr	r1, [pc, #436]	; (801b3dc <ip4_frag+0x280>)
 801b226:	486c      	ldr	r0, [pc, #432]	; (801b3d8 <ip4_frag+0x27c>)
 801b228:	f000 fbb4 	bl	801b994 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801b22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b22e:	685b      	ldr	r3, [r3, #4]
 801b230:	2214      	movs	r2, #20
 801b232:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b234:	4618      	mov	r0, r3
 801b236:	f000 fb97 	bl	801b968 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801b23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b23c:	685b      	ldr	r3, [r3, #4]
 801b23e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801b240:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b242:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801b246:	e064      	b.n	801b312 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801b248:	68fb      	ldr	r3, [r7, #12]
 801b24a:	895a      	ldrh	r2, [r3, #10]
 801b24c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b24e:	1ad3      	subs	r3, r2, r3
 801b250:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801b252:	68fb      	ldr	r3, [r7, #12]
 801b254:	895b      	ldrh	r3, [r3, #10]
 801b256:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b258:	429a      	cmp	r2, r3
 801b25a:	d906      	bls.n	801b26a <ip4_frag+0x10e>
 801b25c:	4b5c      	ldr	r3, [pc, #368]	; (801b3d0 <ip4_frag+0x274>)
 801b25e:	f240 322d 	movw	r2, #813	; 0x32d
 801b262:	495f      	ldr	r1, [pc, #380]	; (801b3e0 <ip4_frag+0x284>)
 801b264:	485c      	ldr	r0, [pc, #368]	; (801b3d8 <ip4_frag+0x27c>)
 801b266:	f000 fb95 	bl	801b994 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801b26a:	8bfa      	ldrh	r2, [r7, #30]
 801b26c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b270:	4293      	cmp	r3, r2
 801b272:	bf28      	it	cs
 801b274:	4613      	movcs	r3, r2
 801b276:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801b27a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b27e:	2b00      	cmp	r3, #0
 801b280:	d105      	bne.n	801b28e <ip4_frag+0x132>
        poff = 0;
 801b282:	2300      	movs	r3, #0
 801b284:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801b286:	68fb      	ldr	r3, [r7, #12]
 801b288:	681b      	ldr	r3, [r3, #0]
 801b28a:	60fb      	str	r3, [r7, #12]
        continue;
 801b28c:	e041      	b.n	801b312 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801b28e:	f7ff ff0d 	bl	801b0ac <ip_frag_alloc_pbuf_custom_ref>
 801b292:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801b294:	69bb      	ldr	r3, [r7, #24]
 801b296:	2b00      	cmp	r3, #0
 801b298:	d103      	bne.n	801b2a2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801b29a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b29c:	f7f6 ffe4 	bl	8012268 <pbuf_free>
        goto memerr;
 801b2a0:	e08f      	b.n	801b3c2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b2a2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801b2a4:	68fb      	ldr	r3, [r7, #12]
 801b2a6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b2a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b2aa:	4413      	add	r3, r2
 801b2ac:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801b2b0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801b2b4:	9201      	str	r2, [sp, #4]
 801b2b6:	9300      	str	r3, [sp, #0]
 801b2b8:	4603      	mov	r3, r0
 801b2ba:	2241      	movs	r2, #65	; 0x41
 801b2bc:	2000      	movs	r0, #0
 801b2be:	f7f6 fde7 	bl	8011e90 <pbuf_alloced_custom>
 801b2c2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801b2c4:	697b      	ldr	r3, [r7, #20]
 801b2c6:	2b00      	cmp	r3, #0
 801b2c8:	d106      	bne.n	801b2d8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801b2ca:	69b8      	ldr	r0, [r7, #24]
 801b2cc:	f7ff fef6 	bl	801b0bc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801b2d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b2d2:	f7f6 ffc9 	bl	8012268 <pbuf_free>
        goto memerr;
 801b2d6:	e074      	b.n	801b3c2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801b2d8:	68f8      	ldr	r0, [r7, #12]
 801b2da:	f7f7 f86b 	bl	80123b4 <pbuf_ref>
      pcr->original = p;
 801b2de:	69bb      	ldr	r3, [r7, #24]
 801b2e0:	68fa      	ldr	r2, [r7, #12]
 801b2e2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801b2e4:	69bb      	ldr	r3, [r7, #24]
 801b2e6:	4a3f      	ldr	r2, [pc, #252]	; (801b3e4 <ip4_frag+0x288>)
 801b2e8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801b2ea:	6979      	ldr	r1, [r7, #20]
 801b2ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b2ee:	f7f7 f889 	bl	8012404 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801b2f2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801b2f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b2fa:	1ad3      	subs	r3, r2, r3
 801b2fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801b300:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b304:	2b00      	cmp	r3, #0
 801b306:	d004      	beq.n	801b312 <ip4_frag+0x1b6>
        poff = 0;
 801b308:	2300      	movs	r3, #0
 801b30a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801b30c:	68fb      	ldr	r3, [r7, #12]
 801b30e:	681b      	ldr	r3, [r3, #0]
 801b310:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801b312:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b316:	2b00      	cmp	r3, #0
 801b318:	d196      	bne.n	801b248 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801b31a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b31c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b320:	4413      	add	r3, r2
 801b322:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801b324:	68bb      	ldr	r3, [r7, #8]
 801b326:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b328:	f1a3 0213 	sub.w	r2, r3, #19
 801b32c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b330:	429a      	cmp	r2, r3
 801b332:	bfcc      	ite	gt
 801b334:	2301      	movgt	r3, #1
 801b336:	2300      	movle	r3, #0
 801b338:	b2db      	uxtb	r3, r3
 801b33a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801b33c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b340:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b344:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801b346:	6a3b      	ldr	r3, [r7, #32]
 801b348:	2b00      	cmp	r3, #0
 801b34a:	d002      	beq.n	801b352 <ip4_frag+0x1f6>
 801b34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d003      	beq.n	801b35a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801b352:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b354:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801b358:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801b35a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b35c:	4618      	mov	r0, r3
 801b35e:	f7f5 fb5f 	bl	8010a20 <lwip_htons>
 801b362:	4603      	mov	r3, r0
 801b364:	461a      	mov	r2, r3
 801b366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b368:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801b36a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b36c:	3314      	adds	r3, #20
 801b36e:	b29b      	uxth	r3, r3
 801b370:	4618      	mov	r0, r3
 801b372:	f7f5 fb55 	bl	8010a20 <lwip_htons>
 801b376:	4603      	mov	r3, r0
 801b378:	461a      	mov	r2, r3
 801b37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b37c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801b37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b380:	2200      	movs	r2, #0
 801b382:	729a      	strb	r2, [r3, #10]
 801b384:	2200      	movs	r2, #0
 801b386:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801b388:	68bb      	ldr	r3, [r7, #8]
 801b38a:	695b      	ldr	r3, [r3, #20]
 801b38c:	687a      	ldr	r2, [r7, #4]
 801b38e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b390:	68b8      	ldr	r0, [r7, #8]
 801b392:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801b394:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b396:	f7f6 ff67 	bl	8012268 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801b39a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b39e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b3a0:	1ad3      	subs	r3, r2, r3
 801b3a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801b3a6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801b3aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b3ac:	4413      	add	r3, r2
 801b3ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801b3b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b3b6:	2b00      	cmp	r3, #0
 801b3b8:	f47f af19 	bne.w	801b1ee <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801b3bc:	2300      	movs	r3, #0
 801b3be:	e002      	b.n	801b3c6 <ip4_frag+0x26a>
      goto memerr;
 801b3c0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801b3c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b3c6:	4618      	mov	r0, r3
 801b3c8:	3748      	adds	r7, #72	; 0x48
 801b3ca:	46bd      	mov	sp, r7
 801b3cc:	bd80      	pop	{r7, pc}
 801b3ce:	bf00      	nop
 801b3d0:	08020308 	.word	0x08020308
 801b3d4:	080204e4 	.word	0x080204e4
 801b3d8:	08020350 	.word	0x08020350
 801b3dc:	08020500 	.word	0x08020500
 801b3e0:	08020520 	.word	0x08020520
 801b3e4:	0801b0f5 	.word	0x0801b0f5

0801b3e8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801b3e8:	b580      	push	{r7, lr}
 801b3ea:	b086      	sub	sp, #24
 801b3ec:	af00      	add	r7, sp, #0
 801b3ee:	6078      	str	r0, [r7, #4]
 801b3f0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801b3f2:	230e      	movs	r3, #14
 801b3f4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801b3f6:	687b      	ldr	r3, [r7, #4]
 801b3f8:	895b      	ldrh	r3, [r3, #10]
 801b3fa:	2b0e      	cmp	r3, #14
 801b3fc:	d96e      	bls.n	801b4dc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	7bdb      	ldrb	r3, [r3, #15]
 801b402:	2b00      	cmp	r3, #0
 801b404:	d106      	bne.n	801b414 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801b406:	683b      	ldr	r3, [r7, #0]
 801b408:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b40c:	3301      	adds	r3, #1
 801b40e:	b2da      	uxtb	r2, r3
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801b414:	687b      	ldr	r3, [r7, #4]
 801b416:	685b      	ldr	r3, [r3, #4]
 801b418:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801b41a:	693b      	ldr	r3, [r7, #16]
 801b41c:	7b1a      	ldrb	r2, [r3, #12]
 801b41e:	7b5b      	ldrb	r3, [r3, #13]
 801b420:	021b      	lsls	r3, r3, #8
 801b422:	4313      	orrs	r3, r2
 801b424:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801b426:	693b      	ldr	r3, [r7, #16]
 801b428:	781b      	ldrb	r3, [r3, #0]
 801b42a:	f003 0301 	and.w	r3, r3, #1
 801b42e:	2b00      	cmp	r3, #0
 801b430:	d023      	beq.n	801b47a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801b432:	693b      	ldr	r3, [r7, #16]
 801b434:	781b      	ldrb	r3, [r3, #0]
 801b436:	2b01      	cmp	r3, #1
 801b438:	d10f      	bne.n	801b45a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b43a:	693b      	ldr	r3, [r7, #16]
 801b43c:	785b      	ldrb	r3, [r3, #1]
 801b43e:	2b00      	cmp	r3, #0
 801b440:	d11b      	bne.n	801b47a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801b442:	693b      	ldr	r3, [r7, #16]
 801b444:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b446:	2b5e      	cmp	r3, #94	; 0x5e
 801b448:	d117      	bne.n	801b47a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	7b5b      	ldrb	r3, [r3, #13]
 801b44e:	f043 0310 	orr.w	r3, r3, #16
 801b452:	b2da      	uxtb	r2, r3
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	735a      	strb	r2, [r3, #13]
 801b458:	e00f      	b.n	801b47a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801b45a:	693b      	ldr	r3, [r7, #16]
 801b45c:	2206      	movs	r2, #6
 801b45e:	4928      	ldr	r1, [pc, #160]	; (801b500 <ethernet_input+0x118>)
 801b460:	4618      	mov	r0, r3
 801b462:	f000 fa71 	bl	801b948 <memcmp>
 801b466:	4603      	mov	r3, r0
 801b468:	2b00      	cmp	r3, #0
 801b46a:	d106      	bne.n	801b47a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801b46c:	687b      	ldr	r3, [r7, #4]
 801b46e:	7b5b      	ldrb	r3, [r3, #13]
 801b470:	f043 0308 	orr.w	r3, r3, #8
 801b474:	b2da      	uxtb	r2, r3
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801b47a:	89fb      	ldrh	r3, [r7, #14]
 801b47c:	2b08      	cmp	r3, #8
 801b47e:	d003      	beq.n	801b488 <ethernet_input+0xa0>
 801b480:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801b484:	d014      	beq.n	801b4b0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801b486:	e032      	b.n	801b4ee <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b488:	683b      	ldr	r3, [r7, #0]
 801b48a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b48e:	f003 0308 	and.w	r3, r3, #8
 801b492:	2b00      	cmp	r3, #0
 801b494:	d024      	beq.n	801b4e0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b496:	8afb      	ldrh	r3, [r7, #22]
 801b498:	4619      	mov	r1, r3
 801b49a:	6878      	ldr	r0, [r7, #4]
 801b49c:	f7f6 fe2c 	bl	80120f8 <pbuf_remove_header>
 801b4a0:	4603      	mov	r3, r0
 801b4a2:	2b00      	cmp	r3, #0
 801b4a4:	d11e      	bne.n	801b4e4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801b4a6:	6839      	ldr	r1, [r7, #0]
 801b4a8:	6878      	ldr	r0, [r7, #4]
 801b4aa:	f7fe ff21 	bl	801a2f0 <ip4_input>
      break;
 801b4ae:	e013      	b.n	801b4d8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b4b0:	683b      	ldr	r3, [r7, #0]
 801b4b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b4b6:	f003 0308 	and.w	r3, r3, #8
 801b4ba:	2b00      	cmp	r3, #0
 801b4bc:	d014      	beq.n	801b4e8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b4be:	8afb      	ldrh	r3, [r7, #22]
 801b4c0:	4619      	mov	r1, r3
 801b4c2:	6878      	ldr	r0, [r7, #4]
 801b4c4:	f7f6 fe18 	bl	80120f8 <pbuf_remove_header>
 801b4c8:	4603      	mov	r3, r0
 801b4ca:	2b00      	cmp	r3, #0
 801b4cc:	d10e      	bne.n	801b4ec <ethernet_input+0x104>
        etharp_input(p, netif);
 801b4ce:	6839      	ldr	r1, [r7, #0]
 801b4d0:	6878      	ldr	r0, [r7, #4]
 801b4d2:	f7fe f8c1 	bl	8019658 <etharp_input>
      break;
 801b4d6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801b4d8:	2300      	movs	r3, #0
 801b4da:	e00c      	b.n	801b4f6 <ethernet_input+0x10e>
    goto free_and_return;
 801b4dc:	bf00      	nop
 801b4de:	e006      	b.n	801b4ee <ethernet_input+0x106>
        goto free_and_return;
 801b4e0:	bf00      	nop
 801b4e2:	e004      	b.n	801b4ee <ethernet_input+0x106>
        goto free_and_return;
 801b4e4:	bf00      	nop
 801b4e6:	e002      	b.n	801b4ee <ethernet_input+0x106>
        goto free_and_return;
 801b4e8:	bf00      	nop
 801b4ea:	e000      	b.n	801b4ee <ethernet_input+0x106>
        goto free_and_return;
 801b4ec:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801b4ee:	6878      	ldr	r0, [r7, #4]
 801b4f0:	f7f6 feba 	bl	8012268 <pbuf_free>
  return ERR_OK;
 801b4f4:	2300      	movs	r3, #0
}
 801b4f6:	4618      	mov	r0, r3
 801b4f8:	3718      	adds	r7, #24
 801b4fa:	46bd      	mov	sp, r7
 801b4fc:	bd80      	pop	{r7, pc}
 801b4fe:	bf00      	nop
 801b500:	080207b8 	.word	0x080207b8

0801b504 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801b504:	b580      	push	{r7, lr}
 801b506:	b086      	sub	sp, #24
 801b508:	af00      	add	r7, sp, #0
 801b50a:	60f8      	str	r0, [r7, #12]
 801b50c:	60b9      	str	r1, [r7, #8]
 801b50e:	607a      	str	r2, [r7, #4]
 801b510:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801b512:	8c3b      	ldrh	r3, [r7, #32]
 801b514:	4618      	mov	r0, r3
 801b516:	f7f5 fa83 	bl	8010a20 <lwip_htons>
 801b51a:	4603      	mov	r3, r0
 801b51c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801b51e:	210e      	movs	r1, #14
 801b520:	68b8      	ldr	r0, [r7, #8]
 801b522:	f7f6 fdd9 	bl	80120d8 <pbuf_add_header>
 801b526:	4603      	mov	r3, r0
 801b528:	2b00      	cmp	r3, #0
 801b52a:	d125      	bne.n	801b578 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801b52c:	68bb      	ldr	r3, [r7, #8]
 801b52e:	685b      	ldr	r3, [r3, #4]
 801b530:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801b532:	693b      	ldr	r3, [r7, #16]
 801b534:	8afa      	ldrh	r2, [r7, #22]
 801b536:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801b538:	693b      	ldr	r3, [r7, #16]
 801b53a:	2206      	movs	r2, #6
 801b53c:	6839      	ldr	r1, [r7, #0]
 801b53e:	4618      	mov	r0, r3
 801b540:	f000 fa12 	bl	801b968 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801b544:	693b      	ldr	r3, [r7, #16]
 801b546:	3306      	adds	r3, #6
 801b548:	2206      	movs	r2, #6
 801b54a:	6879      	ldr	r1, [r7, #4]
 801b54c:	4618      	mov	r0, r3
 801b54e:	f000 fa0b 	bl	801b968 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801b552:	68fb      	ldr	r3, [r7, #12]
 801b554:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b558:	2b06      	cmp	r3, #6
 801b55a:	d006      	beq.n	801b56a <ethernet_output+0x66>
 801b55c:	4b0a      	ldr	r3, [pc, #40]	; (801b588 <ethernet_output+0x84>)
 801b55e:	f44f 7299 	mov.w	r2, #306	; 0x132
 801b562:	490a      	ldr	r1, [pc, #40]	; (801b58c <ethernet_output+0x88>)
 801b564:	480a      	ldr	r0, [pc, #40]	; (801b590 <ethernet_output+0x8c>)
 801b566:	f000 fa15 	bl	801b994 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801b56a:	68fb      	ldr	r3, [r7, #12]
 801b56c:	699b      	ldr	r3, [r3, #24]
 801b56e:	68b9      	ldr	r1, [r7, #8]
 801b570:	68f8      	ldr	r0, [r7, #12]
 801b572:	4798      	blx	r3
 801b574:	4603      	mov	r3, r0
 801b576:	e002      	b.n	801b57e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801b578:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801b57a:	f06f 0301 	mvn.w	r3, #1
}
 801b57e:	4618      	mov	r0, r3
 801b580:	3718      	adds	r7, #24
 801b582:	46bd      	mov	sp, r7
 801b584:	bd80      	pop	{r7, pc}
 801b586:	bf00      	nop
 801b588:	08020530 	.word	0x08020530
 801b58c:	08020568 	.word	0x08020568
 801b590:	0802059c 	.word	0x0802059c

0801b594 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801b594:	b580      	push	{r7, lr}
 801b596:	b082      	sub	sp, #8
 801b598:	af00      	add	r7, sp, #0
 801b59a:	6078      	str	r0, [r7, #4]
 801b59c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801b59e:	683b      	ldr	r3, [r7, #0]
 801b5a0:	2200      	movs	r2, #0
 801b5a2:	2104      	movs	r1, #4
 801b5a4:	4618      	mov	r0, r3
 801b5a6:	f7ee fb3f 	bl	8009c28 <osMessageQueueNew>
 801b5aa:	4602      	mov	r2, r0
 801b5ac:	687b      	ldr	r3, [r7, #4]
 801b5ae:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801b5b0:	687b      	ldr	r3, [r7, #4]
 801b5b2:	681b      	ldr	r3, [r3, #0]
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	d102      	bne.n	801b5be <sys_mbox_new+0x2a>
    return ERR_MEM;
 801b5b8:	f04f 33ff 	mov.w	r3, #4294967295
 801b5bc:	e000      	b.n	801b5c0 <sys_mbox_new+0x2c>

  return ERR_OK;
 801b5be:	2300      	movs	r3, #0
}
 801b5c0:	4618      	mov	r0, r3
 801b5c2:	3708      	adds	r7, #8
 801b5c4:	46bd      	mov	sp, r7
 801b5c6:	bd80      	pop	{r7, pc}

0801b5c8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801b5c8:	b580      	push	{r7, lr}
 801b5ca:	b082      	sub	sp, #8
 801b5cc:	af00      	add	r7, sp, #0
 801b5ce:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	681b      	ldr	r3, [r3, #0]
 801b5d4:	4618      	mov	r0, r3
 801b5d6:	f7ee fc93 	bl	8009f00 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801b5da:	687b      	ldr	r3, [r7, #4]
 801b5dc:	681b      	ldr	r3, [r3, #0]
 801b5de:	4618      	mov	r0, r3
 801b5e0:	f7ee fcc0 	bl	8009f64 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801b5e4:	bf00      	nop
 801b5e6:	3708      	adds	r7, #8
 801b5e8:	46bd      	mov	sp, r7
 801b5ea:	bd80      	pop	{r7, pc}

0801b5ec <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801b5ec:	b580      	push	{r7, lr}
 801b5ee:	b084      	sub	sp, #16
 801b5f0:	af00      	add	r7, sp, #0
 801b5f2:	6078      	str	r0, [r7, #4]
 801b5f4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	6818      	ldr	r0, [r3, #0]
 801b5fa:	4639      	mov	r1, r7
 801b5fc:	2300      	movs	r3, #0
 801b5fe:	2200      	movs	r2, #0
 801b600:	f7ee fb98 	bl	8009d34 <osMessageQueuePut>
 801b604:	4603      	mov	r3, r0
 801b606:	2b00      	cmp	r3, #0
 801b608:	d102      	bne.n	801b610 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801b60a:	2300      	movs	r3, #0
 801b60c:	73fb      	strb	r3, [r7, #15]
 801b60e:	e001      	b.n	801b614 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801b610:	23ff      	movs	r3, #255	; 0xff
 801b612:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801b614:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b618:	4618      	mov	r0, r3
 801b61a:	3710      	adds	r7, #16
 801b61c:	46bd      	mov	sp, r7
 801b61e:	bd80      	pop	{r7, pc}

0801b620 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801b620:	b580      	push	{r7, lr}
 801b622:	b086      	sub	sp, #24
 801b624:	af00      	add	r7, sp, #0
 801b626:	60f8      	str	r0, [r7, #12]
 801b628:	60b9      	str	r1, [r7, #8]
 801b62a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801b62c:	f7ed ff28 	bl	8009480 <osKernelGetTickCount>
 801b630:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	2b00      	cmp	r3, #0
 801b636:	d013      	beq.n	801b660 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801b638:	68fb      	ldr	r3, [r7, #12]
 801b63a:	6818      	ldr	r0, [r3, #0]
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	2200      	movs	r2, #0
 801b640:	68b9      	ldr	r1, [r7, #8]
 801b642:	f7ee fbeb 	bl	8009e1c <osMessageQueueGet>
 801b646:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801b648:	693b      	ldr	r3, [r7, #16]
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	d105      	bne.n	801b65a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801b64e:	f7ed ff17 	bl	8009480 <osKernelGetTickCount>
 801b652:	4602      	mov	r2, r0
 801b654:	697b      	ldr	r3, [r7, #20]
 801b656:	1ad3      	subs	r3, r2, r3
 801b658:	e00f      	b.n	801b67a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801b65a:	f04f 33ff 	mov.w	r3, #4294967295
 801b65e:	e00c      	b.n	801b67a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801b660:	68fb      	ldr	r3, [r7, #12]
 801b662:	6818      	ldr	r0, [r3, #0]
 801b664:	f04f 33ff 	mov.w	r3, #4294967295
 801b668:	2200      	movs	r2, #0
 801b66a:	68b9      	ldr	r1, [r7, #8]
 801b66c:	f7ee fbd6 	bl	8009e1c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801b670:	f7ed ff06 	bl	8009480 <osKernelGetTickCount>
 801b674:	4602      	mov	r2, r0
 801b676:	697b      	ldr	r3, [r7, #20]
 801b678:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801b67a:	4618      	mov	r0, r3
 801b67c:	3718      	adds	r7, #24
 801b67e:	46bd      	mov	sp, r7
 801b680:	bd80      	pop	{r7, pc}

0801b682 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801b682:	b580      	push	{r7, lr}
 801b684:	b082      	sub	sp, #8
 801b686:	af00      	add	r7, sp, #0
 801b688:	6078      	str	r0, [r7, #4]
 801b68a:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801b68c:	687b      	ldr	r3, [r7, #4]
 801b68e:	6818      	ldr	r0, [r3, #0]
 801b690:	2300      	movs	r3, #0
 801b692:	2200      	movs	r2, #0
 801b694:	6839      	ldr	r1, [r7, #0]
 801b696:	f7ee fbc1 	bl	8009e1c <osMessageQueueGet>
 801b69a:	4603      	mov	r3, r0
 801b69c:	2b00      	cmp	r3, #0
 801b69e:	d101      	bne.n	801b6a4 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801b6a0:	2300      	movs	r3, #0
 801b6a2:	e001      	b.n	801b6a8 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801b6a4:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801b6a8:	4618      	mov	r0, r3
 801b6aa:	3708      	adds	r7, #8
 801b6ac:	46bd      	mov	sp, r7
 801b6ae:	bd80      	pop	{r7, pc}

0801b6b0 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801b6b0:	b480      	push	{r7}
 801b6b2:	b083      	sub	sp, #12
 801b6b4:	af00      	add	r7, sp, #0
 801b6b6:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	681b      	ldr	r3, [r3, #0]
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	d101      	bne.n	801b6c4 <sys_mbox_valid+0x14>
    return 0;
 801b6c0:	2300      	movs	r3, #0
 801b6c2:	e000      	b.n	801b6c6 <sys_mbox_valid+0x16>
  else
    return 1;
 801b6c4:	2301      	movs	r3, #1
}
 801b6c6:	4618      	mov	r0, r3
 801b6c8:	370c      	adds	r7, #12
 801b6ca:	46bd      	mov	sp, r7
 801b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6d0:	4770      	bx	lr

0801b6d2 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801b6d2:	b480      	push	{r7}
 801b6d4:	b083      	sub	sp, #12
 801b6d6:	af00      	add	r7, sp, #0
 801b6d8:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801b6da:	687b      	ldr	r3, [r7, #4]
 801b6dc:	2200      	movs	r2, #0
 801b6de:	601a      	str	r2, [r3, #0]
}
 801b6e0:	bf00      	nop
 801b6e2:	370c      	adds	r7, #12
 801b6e4:	46bd      	mov	sp, r7
 801b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6ea:	4770      	bx	lr

0801b6ec <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801b6ec:	b580      	push	{r7, lr}
 801b6ee:	b082      	sub	sp, #8
 801b6f0:	af00      	add	r7, sp, #0
 801b6f2:	6078      	str	r0, [r7, #4]
 801b6f4:	460b      	mov	r3, r1
 801b6f6:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801b6f8:	78fb      	ldrb	r3, [r7, #3]
 801b6fa:	2200      	movs	r2, #0
 801b6fc:	4619      	mov	r1, r3
 801b6fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b702:	f7ee f901 	bl	8009908 <osSemaphoreNew>
 801b706:	4602      	mov	r2, r0
 801b708:	687b      	ldr	r3, [r7, #4]
 801b70a:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	681b      	ldr	r3, [r3, #0]
 801b710:	2b00      	cmp	r3, #0
 801b712:	d102      	bne.n	801b71a <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801b714:	f04f 33ff 	mov.w	r3, #4294967295
 801b718:	e009      	b.n	801b72e <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801b71a:	78fb      	ldrb	r3, [r7, #3]
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	d105      	bne.n	801b72c <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	681b      	ldr	r3, [r3, #0]
 801b724:	2100      	movs	r1, #0
 801b726:	4618      	mov	r0, r3
 801b728:	f7ee f98a 	bl	8009a40 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801b72c:	2300      	movs	r3, #0
}
 801b72e:	4618      	mov	r0, r3
 801b730:	3708      	adds	r7, #8
 801b732:	46bd      	mov	sp, r7
 801b734:	bd80      	pop	{r7, pc}

0801b736 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801b736:	b580      	push	{r7, lr}
 801b738:	b084      	sub	sp, #16
 801b73a:	af00      	add	r7, sp, #0
 801b73c:	6078      	str	r0, [r7, #4]
 801b73e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801b740:	f7ed fe9e 	bl	8009480 <osKernelGetTickCount>
 801b744:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801b746:	683b      	ldr	r3, [r7, #0]
 801b748:	2b00      	cmp	r3, #0
 801b74a:	d011      	beq.n	801b770 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	681b      	ldr	r3, [r3, #0]
 801b750:	6839      	ldr	r1, [r7, #0]
 801b752:	4618      	mov	r0, r3
 801b754:	f7ee f974 	bl	8009a40 <osSemaphoreAcquire>
 801b758:	4603      	mov	r3, r0
 801b75a:	2b00      	cmp	r3, #0
 801b75c:	d105      	bne.n	801b76a <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801b75e:	f7ed fe8f 	bl	8009480 <osKernelGetTickCount>
 801b762:	4602      	mov	r2, r0
 801b764:	68fb      	ldr	r3, [r7, #12]
 801b766:	1ad3      	subs	r3, r2, r3
 801b768:	e012      	b.n	801b790 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801b76a:	f04f 33ff 	mov.w	r3, #4294967295
 801b76e:	e00f      	b.n	801b790 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801b770:	bf00      	nop
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	681b      	ldr	r3, [r3, #0]
 801b776:	f04f 31ff 	mov.w	r1, #4294967295
 801b77a:	4618      	mov	r0, r3
 801b77c:	f7ee f960 	bl	8009a40 <osSemaphoreAcquire>
 801b780:	4603      	mov	r3, r0
 801b782:	2b00      	cmp	r3, #0
 801b784:	d1f5      	bne.n	801b772 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801b786:	f7ed fe7b 	bl	8009480 <osKernelGetTickCount>
 801b78a:	4602      	mov	r2, r0
 801b78c:	68fb      	ldr	r3, [r7, #12]
 801b78e:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801b790:	4618      	mov	r0, r3
 801b792:	3710      	adds	r7, #16
 801b794:	46bd      	mov	sp, r7
 801b796:	bd80      	pop	{r7, pc}

0801b798 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801b798:	b580      	push	{r7, lr}
 801b79a:	b082      	sub	sp, #8
 801b79c:	af00      	add	r7, sp, #0
 801b79e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801b7a0:	687b      	ldr	r3, [r7, #4]
 801b7a2:	681b      	ldr	r3, [r3, #0]
 801b7a4:	4618      	mov	r0, r3
 801b7a6:	f7ee f9b1 	bl	8009b0c <osSemaphoreRelease>
}
 801b7aa:	bf00      	nop
 801b7ac:	3708      	adds	r7, #8
 801b7ae:	46bd      	mov	sp, r7
 801b7b0:	bd80      	pop	{r7, pc}

0801b7b2 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801b7b2:	b580      	push	{r7, lr}
 801b7b4:	b082      	sub	sp, #8
 801b7b6:	af00      	add	r7, sp, #0
 801b7b8:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	681b      	ldr	r3, [r3, #0]
 801b7be:	4618      	mov	r0, r3
 801b7c0:	f7ee f9fc 	bl	8009bbc <osSemaphoreDelete>
}
 801b7c4:	bf00      	nop
 801b7c6:	3708      	adds	r7, #8
 801b7c8:	46bd      	mov	sp, r7
 801b7ca:	bd80      	pop	{r7, pc}

0801b7cc <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801b7cc:	b480      	push	{r7}
 801b7ce:	b083      	sub	sp, #12
 801b7d0:	af00      	add	r7, sp, #0
 801b7d2:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	681b      	ldr	r3, [r3, #0]
 801b7d8:	2b00      	cmp	r3, #0
 801b7da:	d101      	bne.n	801b7e0 <sys_sem_valid+0x14>
    return 0;
 801b7dc:	2300      	movs	r3, #0
 801b7de:	e000      	b.n	801b7e2 <sys_sem_valid+0x16>
  else
    return 1;
 801b7e0:	2301      	movs	r3, #1
}
 801b7e2:	4618      	mov	r0, r3
 801b7e4:	370c      	adds	r7, #12
 801b7e6:	46bd      	mov	sp, r7
 801b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7ec:	4770      	bx	lr

0801b7ee <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801b7ee:	b480      	push	{r7}
 801b7f0:	b083      	sub	sp, #12
 801b7f2:	af00      	add	r7, sp, #0
 801b7f4:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801b7f6:	687b      	ldr	r3, [r7, #4]
 801b7f8:	2200      	movs	r2, #0
 801b7fa:	601a      	str	r2, [r3, #0]
}
 801b7fc:	bf00      	nop
 801b7fe:	370c      	adds	r7, #12
 801b800:	46bd      	mov	sp, r7
 801b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b806:	4770      	bx	lr

0801b808 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801b808:	b580      	push	{r7, lr}
 801b80a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801b80c:	2000      	movs	r0, #0
 801b80e:	f7ed ff33 	bl	8009678 <osMutexNew>
 801b812:	4603      	mov	r3, r0
 801b814:	4a01      	ldr	r2, [pc, #4]	; (801b81c <sys_init+0x14>)
 801b816:	6013      	str	r3, [r2, #0]
#endif
}
 801b818:	bf00      	nop
 801b81a:	bd80      	pop	{r7, pc}
 801b81c:	200111ec 	.word	0x200111ec

0801b820 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801b820:	b580      	push	{r7, lr}
 801b822:	b082      	sub	sp, #8
 801b824:	af00      	add	r7, sp, #0
 801b826:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801b828:	2000      	movs	r0, #0
 801b82a:	f7ed ff25 	bl	8009678 <osMutexNew>
 801b82e:	4602      	mov	r2, r0
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	2b00      	cmp	r3, #0
 801b83a:	d102      	bne.n	801b842 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801b83c:	f04f 33ff 	mov.w	r3, #4294967295
 801b840:	e000      	b.n	801b844 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801b842:	2300      	movs	r3, #0
}
 801b844:	4618      	mov	r0, r3
 801b846:	3708      	adds	r7, #8
 801b848:	46bd      	mov	sp, r7
 801b84a:	bd80      	pop	{r7, pc}

0801b84c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801b84c:	b580      	push	{r7, lr}
 801b84e:	b082      	sub	sp, #8
 801b850:	af00      	add	r7, sp, #0
 801b852:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	681b      	ldr	r3, [r3, #0]
 801b858:	f04f 31ff 	mov.w	r1, #4294967295
 801b85c:	4618      	mov	r0, r3
 801b85e:	f7ed ffa5 	bl	80097ac <osMutexAcquire>
#endif
}
 801b862:	bf00      	nop
 801b864:	3708      	adds	r7, #8
 801b866:	46bd      	mov	sp, r7
 801b868:	bd80      	pop	{r7, pc}

0801b86a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801b86a:	b580      	push	{r7, lr}
 801b86c:	b082      	sub	sp, #8
 801b86e:	af00      	add	r7, sp, #0
 801b870:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801b872:	687b      	ldr	r3, [r7, #4]
 801b874:	681b      	ldr	r3, [r3, #0]
 801b876:	4618      	mov	r0, r3
 801b878:	f7ed fff6 	bl	8009868 <osMutexRelease>
}
 801b87c:	bf00      	nop
 801b87e:	3708      	adds	r7, #8
 801b880:	46bd      	mov	sp, r7
 801b882:	bd80      	pop	{r7, pc}

0801b884 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801b884:	b580      	push	{r7, lr}
 801b886:	b08e      	sub	sp, #56	; 0x38
 801b888:	af00      	add	r7, sp, #0
 801b88a:	60f8      	str	r0, [r7, #12]
 801b88c:	60b9      	str	r1, [r7, #8]
 801b88e:	607a      	str	r2, [r7, #4]
 801b890:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801b892:	f107 0314 	add.w	r3, r7, #20
 801b896:	2224      	movs	r2, #36	; 0x24
 801b898:	2100      	movs	r1, #0
 801b89a:	4618      	mov	r0, r3
 801b89c:	f000 f872 	bl	801b984 <memset>
 801b8a0:	68fb      	ldr	r3, [r7, #12]
 801b8a2:	617b      	str	r3, [r7, #20]
 801b8a4:	683b      	ldr	r3, [r7, #0]
 801b8a6:	62bb      	str	r3, [r7, #40]	; 0x28
 801b8a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b8aa:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801b8ac:	f107 0314 	add.w	r3, r7, #20
 801b8b0:	461a      	mov	r2, r3
 801b8b2:	6879      	ldr	r1, [r7, #4]
 801b8b4:	68b8      	ldr	r0, [r7, #8]
 801b8b6:	f7ed fe0b 	bl	80094d0 <osThreadNew>
 801b8ba:	4603      	mov	r3, r0
#endif
}
 801b8bc:	4618      	mov	r0, r3
 801b8be:	3738      	adds	r7, #56	; 0x38
 801b8c0:	46bd      	mov	sp, r7
 801b8c2:	bd80      	pop	{r7, pc}

0801b8c4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801b8c4:	b580      	push	{r7, lr}
 801b8c6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801b8c8:	4b04      	ldr	r3, [pc, #16]	; (801b8dc <sys_arch_protect+0x18>)
 801b8ca:	681b      	ldr	r3, [r3, #0]
 801b8cc:	f04f 31ff 	mov.w	r1, #4294967295
 801b8d0:	4618      	mov	r0, r3
 801b8d2:	f7ed ff6b 	bl	80097ac <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801b8d6:	2301      	movs	r3, #1
}
 801b8d8:	4618      	mov	r0, r3
 801b8da:	bd80      	pop	{r7, pc}
 801b8dc:	200111ec 	.word	0x200111ec

0801b8e0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801b8e0:	b580      	push	{r7, lr}
 801b8e2:	b082      	sub	sp, #8
 801b8e4:	af00      	add	r7, sp, #0
 801b8e6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801b8e8:	4b04      	ldr	r3, [pc, #16]	; (801b8fc <sys_arch_unprotect+0x1c>)
 801b8ea:	681b      	ldr	r3, [r3, #0]
 801b8ec:	4618      	mov	r0, r3
 801b8ee:	f7ed ffbb 	bl	8009868 <osMutexRelease>
}
 801b8f2:	bf00      	nop
 801b8f4:	3708      	adds	r7, #8
 801b8f6:	46bd      	mov	sp, r7
 801b8f8:	bd80      	pop	{r7, pc}
 801b8fa:	bf00      	nop
 801b8fc:	200111ec 	.word	0x200111ec

0801b900 <__libc_init_array>:
 801b900:	b570      	push	{r4, r5, r6, lr}
 801b902:	4d0d      	ldr	r5, [pc, #52]	; (801b938 <__libc_init_array+0x38>)
 801b904:	4c0d      	ldr	r4, [pc, #52]	; (801b93c <__libc_init_array+0x3c>)
 801b906:	1b64      	subs	r4, r4, r5
 801b908:	10a4      	asrs	r4, r4, #2
 801b90a:	2600      	movs	r6, #0
 801b90c:	42a6      	cmp	r6, r4
 801b90e:	d109      	bne.n	801b924 <__libc_init_array+0x24>
 801b910:	4d0b      	ldr	r5, [pc, #44]	; (801b940 <__libc_init_array+0x40>)
 801b912:	4c0c      	ldr	r4, [pc, #48]	; (801b944 <__libc_init_array+0x44>)
 801b914:	f001 f962 	bl	801cbdc <_init>
 801b918:	1b64      	subs	r4, r4, r5
 801b91a:	10a4      	asrs	r4, r4, #2
 801b91c:	2600      	movs	r6, #0
 801b91e:	42a6      	cmp	r6, r4
 801b920:	d105      	bne.n	801b92e <__libc_init_array+0x2e>
 801b922:	bd70      	pop	{r4, r5, r6, pc}
 801b924:	f855 3b04 	ldr.w	r3, [r5], #4
 801b928:	4798      	blx	r3
 801b92a:	3601      	adds	r6, #1
 801b92c:	e7ee      	b.n	801b90c <__libc_init_array+0xc>
 801b92e:	f855 3b04 	ldr.w	r3, [r5], #4
 801b932:	4798      	blx	r3
 801b934:	3601      	adds	r6, #1
 801b936:	e7f2      	b.n	801b91e <__libc_init_array+0x1e>
 801b938:	08020918 	.word	0x08020918
 801b93c:	08020918 	.word	0x08020918
 801b940:	08020918 	.word	0x08020918
 801b944:	0802091c 	.word	0x0802091c

0801b948 <memcmp>:
 801b948:	b510      	push	{r4, lr}
 801b94a:	3901      	subs	r1, #1
 801b94c:	4402      	add	r2, r0
 801b94e:	4290      	cmp	r0, r2
 801b950:	d101      	bne.n	801b956 <memcmp+0xe>
 801b952:	2000      	movs	r0, #0
 801b954:	e005      	b.n	801b962 <memcmp+0x1a>
 801b956:	7803      	ldrb	r3, [r0, #0]
 801b958:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b95c:	42a3      	cmp	r3, r4
 801b95e:	d001      	beq.n	801b964 <memcmp+0x1c>
 801b960:	1b18      	subs	r0, r3, r4
 801b962:	bd10      	pop	{r4, pc}
 801b964:	3001      	adds	r0, #1
 801b966:	e7f2      	b.n	801b94e <memcmp+0x6>

0801b968 <memcpy>:
 801b968:	440a      	add	r2, r1
 801b96a:	4291      	cmp	r1, r2
 801b96c:	f100 33ff 	add.w	r3, r0, #4294967295
 801b970:	d100      	bne.n	801b974 <memcpy+0xc>
 801b972:	4770      	bx	lr
 801b974:	b510      	push	{r4, lr}
 801b976:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b97a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b97e:	4291      	cmp	r1, r2
 801b980:	d1f9      	bne.n	801b976 <memcpy+0xe>
 801b982:	bd10      	pop	{r4, pc}

0801b984 <memset>:
 801b984:	4402      	add	r2, r0
 801b986:	4603      	mov	r3, r0
 801b988:	4293      	cmp	r3, r2
 801b98a:	d100      	bne.n	801b98e <memset+0xa>
 801b98c:	4770      	bx	lr
 801b98e:	f803 1b01 	strb.w	r1, [r3], #1
 801b992:	e7f9      	b.n	801b988 <memset+0x4>

0801b994 <iprintf>:
 801b994:	b40f      	push	{r0, r1, r2, r3}
 801b996:	4b0a      	ldr	r3, [pc, #40]	; (801b9c0 <iprintf+0x2c>)
 801b998:	b513      	push	{r0, r1, r4, lr}
 801b99a:	681c      	ldr	r4, [r3, #0]
 801b99c:	b124      	cbz	r4, 801b9a8 <iprintf+0x14>
 801b99e:	69a3      	ldr	r3, [r4, #24]
 801b9a0:	b913      	cbnz	r3, 801b9a8 <iprintf+0x14>
 801b9a2:	4620      	mov	r0, r4
 801b9a4:	f000 fad0 	bl	801bf48 <__sinit>
 801b9a8:	ab05      	add	r3, sp, #20
 801b9aa:	9a04      	ldr	r2, [sp, #16]
 801b9ac:	68a1      	ldr	r1, [r4, #8]
 801b9ae:	9301      	str	r3, [sp, #4]
 801b9b0:	4620      	mov	r0, r4
 801b9b2:	f000 fcf3 	bl	801c39c <_vfiprintf_r>
 801b9b6:	b002      	add	sp, #8
 801b9b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b9bc:	b004      	add	sp, #16
 801b9be:	4770      	bx	lr
 801b9c0:	20000030 	.word	0x20000030

0801b9c4 <putchar>:
 801b9c4:	4b09      	ldr	r3, [pc, #36]	; (801b9ec <putchar+0x28>)
 801b9c6:	b513      	push	{r0, r1, r4, lr}
 801b9c8:	681c      	ldr	r4, [r3, #0]
 801b9ca:	4601      	mov	r1, r0
 801b9cc:	b134      	cbz	r4, 801b9dc <putchar+0x18>
 801b9ce:	69a3      	ldr	r3, [r4, #24]
 801b9d0:	b923      	cbnz	r3, 801b9dc <putchar+0x18>
 801b9d2:	9001      	str	r0, [sp, #4]
 801b9d4:	4620      	mov	r0, r4
 801b9d6:	f000 fab7 	bl	801bf48 <__sinit>
 801b9da:	9901      	ldr	r1, [sp, #4]
 801b9dc:	68a2      	ldr	r2, [r4, #8]
 801b9de:	4620      	mov	r0, r4
 801b9e0:	b002      	add	sp, #8
 801b9e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b9e6:	f000 bf9d 	b.w	801c924 <_putc_r>
 801b9ea:	bf00      	nop
 801b9ec:	20000030 	.word	0x20000030

0801b9f0 <_puts_r>:
 801b9f0:	b570      	push	{r4, r5, r6, lr}
 801b9f2:	460e      	mov	r6, r1
 801b9f4:	4605      	mov	r5, r0
 801b9f6:	b118      	cbz	r0, 801ba00 <_puts_r+0x10>
 801b9f8:	6983      	ldr	r3, [r0, #24]
 801b9fa:	b90b      	cbnz	r3, 801ba00 <_puts_r+0x10>
 801b9fc:	f000 faa4 	bl	801bf48 <__sinit>
 801ba00:	69ab      	ldr	r3, [r5, #24]
 801ba02:	68ac      	ldr	r4, [r5, #8]
 801ba04:	b913      	cbnz	r3, 801ba0c <_puts_r+0x1c>
 801ba06:	4628      	mov	r0, r5
 801ba08:	f000 fa9e 	bl	801bf48 <__sinit>
 801ba0c:	4b2c      	ldr	r3, [pc, #176]	; (801bac0 <_puts_r+0xd0>)
 801ba0e:	429c      	cmp	r4, r3
 801ba10:	d120      	bne.n	801ba54 <_puts_r+0x64>
 801ba12:	686c      	ldr	r4, [r5, #4]
 801ba14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ba16:	07db      	lsls	r3, r3, #31
 801ba18:	d405      	bmi.n	801ba26 <_puts_r+0x36>
 801ba1a:	89a3      	ldrh	r3, [r4, #12]
 801ba1c:	0598      	lsls	r0, r3, #22
 801ba1e:	d402      	bmi.n	801ba26 <_puts_r+0x36>
 801ba20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ba22:	f000 fb41 	bl	801c0a8 <__retarget_lock_acquire_recursive>
 801ba26:	89a3      	ldrh	r3, [r4, #12]
 801ba28:	0719      	lsls	r1, r3, #28
 801ba2a:	d51d      	bpl.n	801ba68 <_puts_r+0x78>
 801ba2c:	6923      	ldr	r3, [r4, #16]
 801ba2e:	b1db      	cbz	r3, 801ba68 <_puts_r+0x78>
 801ba30:	3e01      	subs	r6, #1
 801ba32:	68a3      	ldr	r3, [r4, #8]
 801ba34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ba38:	3b01      	subs	r3, #1
 801ba3a:	60a3      	str	r3, [r4, #8]
 801ba3c:	bb39      	cbnz	r1, 801ba8e <_puts_r+0x9e>
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	da38      	bge.n	801bab4 <_puts_r+0xc4>
 801ba42:	4622      	mov	r2, r4
 801ba44:	210a      	movs	r1, #10
 801ba46:	4628      	mov	r0, r5
 801ba48:	f000 f886 	bl	801bb58 <__swbuf_r>
 801ba4c:	3001      	adds	r0, #1
 801ba4e:	d011      	beq.n	801ba74 <_puts_r+0x84>
 801ba50:	250a      	movs	r5, #10
 801ba52:	e011      	b.n	801ba78 <_puts_r+0x88>
 801ba54:	4b1b      	ldr	r3, [pc, #108]	; (801bac4 <_puts_r+0xd4>)
 801ba56:	429c      	cmp	r4, r3
 801ba58:	d101      	bne.n	801ba5e <_puts_r+0x6e>
 801ba5a:	68ac      	ldr	r4, [r5, #8]
 801ba5c:	e7da      	b.n	801ba14 <_puts_r+0x24>
 801ba5e:	4b1a      	ldr	r3, [pc, #104]	; (801bac8 <_puts_r+0xd8>)
 801ba60:	429c      	cmp	r4, r3
 801ba62:	bf08      	it	eq
 801ba64:	68ec      	ldreq	r4, [r5, #12]
 801ba66:	e7d5      	b.n	801ba14 <_puts_r+0x24>
 801ba68:	4621      	mov	r1, r4
 801ba6a:	4628      	mov	r0, r5
 801ba6c:	f000 f8c6 	bl	801bbfc <__swsetup_r>
 801ba70:	2800      	cmp	r0, #0
 801ba72:	d0dd      	beq.n	801ba30 <_puts_r+0x40>
 801ba74:	f04f 35ff 	mov.w	r5, #4294967295
 801ba78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ba7a:	07da      	lsls	r2, r3, #31
 801ba7c:	d405      	bmi.n	801ba8a <_puts_r+0x9a>
 801ba7e:	89a3      	ldrh	r3, [r4, #12]
 801ba80:	059b      	lsls	r3, r3, #22
 801ba82:	d402      	bmi.n	801ba8a <_puts_r+0x9a>
 801ba84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ba86:	f000 fb10 	bl	801c0aa <__retarget_lock_release_recursive>
 801ba8a:	4628      	mov	r0, r5
 801ba8c:	bd70      	pop	{r4, r5, r6, pc}
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	da04      	bge.n	801ba9c <_puts_r+0xac>
 801ba92:	69a2      	ldr	r2, [r4, #24]
 801ba94:	429a      	cmp	r2, r3
 801ba96:	dc06      	bgt.n	801baa6 <_puts_r+0xb6>
 801ba98:	290a      	cmp	r1, #10
 801ba9a:	d004      	beq.n	801baa6 <_puts_r+0xb6>
 801ba9c:	6823      	ldr	r3, [r4, #0]
 801ba9e:	1c5a      	adds	r2, r3, #1
 801baa0:	6022      	str	r2, [r4, #0]
 801baa2:	7019      	strb	r1, [r3, #0]
 801baa4:	e7c5      	b.n	801ba32 <_puts_r+0x42>
 801baa6:	4622      	mov	r2, r4
 801baa8:	4628      	mov	r0, r5
 801baaa:	f000 f855 	bl	801bb58 <__swbuf_r>
 801baae:	3001      	adds	r0, #1
 801bab0:	d1bf      	bne.n	801ba32 <_puts_r+0x42>
 801bab2:	e7df      	b.n	801ba74 <_puts_r+0x84>
 801bab4:	6823      	ldr	r3, [r4, #0]
 801bab6:	250a      	movs	r5, #10
 801bab8:	1c5a      	adds	r2, r3, #1
 801baba:	6022      	str	r2, [r4, #0]
 801babc:	701d      	strb	r5, [r3, #0]
 801babe:	e7db      	b.n	801ba78 <_puts_r+0x88>
 801bac0:	0802089c 	.word	0x0802089c
 801bac4:	080208bc 	.word	0x080208bc
 801bac8:	0802087c 	.word	0x0802087c

0801bacc <puts>:
 801bacc:	4b02      	ldr	r3, [pc, #8]	; (801bad8 <puts+0xc>)
 801bace:	4601      	mov	r1, r0
 801bad0:	6818      	ldr	r0, [r3, #0]
 801bad2:	f7ff bf8d 	b.w	801b9f0 <_puts_r>
 801bad6:	bf00      	nop
 801bad8:	20000030 	.word	0x20000030

0801badc <rand>:
 801badc:	4b16      	ldr	r3, [pc, #88]	; (801bb38 <rand+0x5c>)
 801bade:	b510      	push	{r4, lr}
 801bae0:	681c      	ldr	r4, [r3, #0]
 801bae2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801bae4:	b9b3      	cbnz	r3, 801bb14 <rand+0x38>
 801bae6:	2018      	movs	r0, #24
 801bae8:	f000 fb46 	bl	801c178 <malloc>
 801baec:	63a0      	str	r0, [r4, #56]	; 0x38
 801baee:	b928      	cbnz	r0, 801bafc <rand+0x20>
 801baf0:	4602      	mov	r2, r0
 801baf2:	4b12      	ldr	r3, [pc, #72]	; (801bb3c <rand+0x60>)
 801baf4:	4812      	ldr	r0, [pc, #72]	; (801bb40 <rand+0x64>)
 801baf6:	214e      	movs	r1, #78	; 0x4e
 801baf8:	f000 f8ee 	bl	801bcd8 <__assert_func>
 801bafc:	4a11      	ldr	r2, [pc, #68]	; (801bb44 <rand+0x68>)
 801bafe:	4b12      	ldr	r3, [pc, #72]	; (801bb48 <rand+0x6c>)
 801bb00:	e9c0 2300 	strd	r2, r3, [r0]
 801bb04:	4b11      	ldr	r3, [pc, #68]	; (801bb4c <rand+0x70>)
 801bb06:	6083      	str	r3, [r0, #8]
 801bb08:	230b      	movs	r3, #11
 801bb0a:	8183      	strh	r3, [r0, #12]
 801bb0c:	2201      	movs	r2, #1
 801bb0e:	2300      	movs	r3, #0
 801bb10:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801bb14:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801bb16:	4a0e      	ldr	r2, [pc, #56]	; (801bb50 <rand+0x74>)
 801bb18:	6920      	ldr	r0, [r4, #16]
 801bb1a:	6963      	ldr	r3, [r4, #20]
 801bb1c:	490d      	ldr	r1, [pc, #52]	; (801bb54 <rand+0x78>)
 801bb1e:	4342      	muls	r2, r0
 801bb20:	fb01 2203 	mla	r2, r1, r3, r2
 801bb24:	fba0 0101 	umull	r0, r1, r0, r1
 801bb28:	1c43      	adds	r3, r0, #1
 801bb2a:	eb42 0001 	adc.w	r0, r2, r1
 801bb2e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801bb32:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801bb36:	bd10      	pop	{r4, pc}
 801bb38:	20000030 	.word	0x20000030
 801bb3c:	080207cc 	.word	0x080207cc
 801bb40:	080207e3 	.word	0x080207e3
 801bb44:	abcd330e 	.word	0xabcd330e
 801bb48:	e66d1234 	.word	0xe66d1234
 801bb4c:	0005deec 	.word	0x0005deec
 801bb50:	5851f42d 	.word	0x5851f42d
 801bb54:	4c957f2d 	.word	0x4c957f2d

0801bb58 <__swbuf_r>:
 801bb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb5a:	460e      	mov	r6, r1
 801bb5c:	4614      	mov	r4, r2
 801bb5e:	4605      	mov	r5, r0
 801bb60:	b118      	cbz	r0, 801bb6a <__swbuf_r+0x12>
 801bb62:	6983      	ldr	r3, [r0, #24]
 801bb64:	b90b      	cbnz	r3, 801bb6a <__swbuf_r+0x12>
 801bb66:	f000 f9ef 	bl	801bf48 <__sinit>
 801bb6a:	4b21      	ldr	r3, [pc, #132]	; (801bbf0 <__swbuf_r+0x98>)
 801bb6c:	429c      	cmp	r4, r3
 801bb6e:	d12b      	bne.n	801bbc8 <__swbuf_r+0x70>
 801bb70:	686c      	ldr	r4, [r5, #4]
 801bb72:	69a3      	ldr	r3, [r4, #24]
 801bb74:	60a3      	str	r3, [r4, #8]
 801bb76:	89a3      	ldrh	r3, [r4, #12]
 801bb78:	071a      	lsls	r2, r3, #28
 801bb7a:	d52f      	bpl.n	801bbdc <__swbuf_r+0x84>
 801bb7c:	6923      	ldr	r3, [r4, #16]
 801bb7e:	b36b      	cbz	r3, 801bbdc <__swbuf_r+0x84>
 801bb80:	6923      	ldr	r3, [r4, #16]
 801bb82:	6820      	ldr	r0, [r4, #0]
 801bb84:	1ac0      	subs	r0, r0, r3
 801bb86:	6963      	ldr	r3, [r4, #20]
 801bb88:	b2f6      	uxtb	r6, r6
 801bb8a:	4283      	cmp	r3, r0
 801bb8c:	4637      	mov	r7, r6
 801bb8e:	dc04      	bgt.n	801bb9a <__swbuf_r+0x42>
 801bb90:	4621      	mov	r1, r4
 801bb92:	4628      	mov	r0, r5
 801bb94:	f000 f944 	bl	801be20 <_fflush_r>
 801bb98:	bb30      	cbnz	r0, 801bbe8 <__swbuf_r+0x90>
 801bb9a:	68a3      	ldr	r3, [r4, #8]
 801bb9c:	3b01      	subs	r3, #1
 801bb9e:	60a3      	str	r3, [r4, #8]
 801bba0:	6823      	ldr	r3, [r4, #0]
 801bba2:	1c5a      	adds	r2, r3, #1
 801bba4:	6022      	str	r2, [r4, #0]
 801bba6:	701e      	strb	r6, [r3, #0]
 801bba8:	6963      	ldr	r3, [r4, #20]
 801bbaa:	3001      	adds	r0, #1
 801bbac:	4283      	cmp	r3, r0
 801bbae:	d004      	beq.n	801bbba <__swbuf_r+0x62>
 801bbb0:	89a3      	ldrh	r3, [r4, #12]
 801bbb2:	07db      	lsls	r3, r3, #31
 801bbb4:	d506      	bpl.n	801bbc4 <__swbuf_r+0x6c>
 801bbb6:	2e0a      	cmp	r6, #10
 801bbb8:	d104      	bne.n	801bbc4 <__swbuf_r+0x6c>
 801bbba:	4621      	mov	r1, r4
 801bbbc:	4628      	mov	r0, r5
 801bbbe:	f000 f92f 	bl	801be20 <_fflush_r>
 801bbc2:	b988      	cbnz	r0, 801bbe8 <__swbuf_r+0x90>
 801bbc4:	4638      	mov	r0, r7
 801bbc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bbc8:	4b0a      	ldr	r3, [pc, #40]	; (801bbf4 <__swbuf_r+0x9c>)
 801bbca:	429c      	cmp	r4, r3
 801bbcc:	d101      	bne.n	801bbd2 <__swbuf_r+0x7a>
 801bbce:	68ac      	ldr	r4, [r5, #8]
 801bbd0:	e7cf      	b.n	801bb72 <__swbuf_r+0x1a>
 801bbd2:	4b09      	ldr	r3, [pc, #36]	; (801bbf8 <__swbuf_r+0xa0>)
 801bbd4:	429c      	cmp	r4, r3
 801bbd6:	bf08      	it	eq
 801bbd8:	68ec      	ldreq	r4, [r5, #12]
 801bbda:	e7ca      	b.n	801bb72 <__swbuf_r+0x1a>
 801bbdc:	4621      	mov	r1, r4
 801bbde:	4628      	mov	r0, r5
 801bbe0:	f000 f80c 	bl	801bbfc <__swsetup_r>
 801bbe4:	2800      	cmp	r0, #0
 801bbe6:	d0cb      	beq.n	801bb80 <__swbuf_r+0x28>
 801bbe8:	f04f 37ff 	mov.w	r7, #4294967295
 801bbec:	e7ea      	b.n	801bbc4 <__swbuf_r+0x6c>
 801bbee:	bf00      	nop
 801bbf0:	0802089c 	.word	0x0802089c
 801bbf4:	080208bc 	.word	0x080208bc
 801bbf8:	0802087c 	.word	0x0802087c

0801bbfc <__swsetup_r>:
 801bbfc:	4b32      	ldr	r3, [pc, #200]	; (801bcc8 <__swsetup_r+0xcc>)
 801bbfe:	b570      	push	{r4, r5, r6, lr}
 801bc00:	681d      	ldr	r5, [r3, #0]
 801bc02:	4606      	mov	r6, r0
 801bc04:	460c      	mov	r4, r1
 801bc06:	b125      	cbz	r5, 801bc12 <__swsetup_r+0x16>
 801bc08:	69ab      	ldr	r3, [r5, #24]
 801bc0a:	b913      	cbnz	r3, 801bc12 <__swsetup_r+0x16>
 801bc0c:	4628      	mov	r0, r5
 801bc0e:	f000 f99b 	bl	801bf48 <__sinit>
 801bc12:	4b2e      	ldr	r3, [pc, #184]	; (801bccc <__swsetup_r+0xd0>)
 801bc14:	429c      	cmp	r4, r3
 801bc16:	d10f      	bne.n	801bc38 <__swsetup_r+0x3c>
 801bc18:	686c      	ldr	r4, [r5, #4]
 801bc1a:	89a3      	ldrh	r3, [r4, #12]
 801bc1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bc20:	0719      	lsls	r1, r3, #28
 801bc22:	d42c      	bmi.n	801bc7e <__swsetup_r+0x82>
 801bc24:	06dd      	lsls	r5, r3, #27
 801bc26:	d411      	bmi.n	801bc4c <__swsetup_r+0x50>
 801bc28:	2309      	movs	r3, #9
 801bc2a:	6033      	str	r3, [r6, #0]
 801bc2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801bc30:	81a3      	strh	r3, [r4, #12]
 801bc32:	f04f 30ff 	mov.w	r0, #4294967295
 801bc36:	e03e      	b.n	801bcb6 <__swsetup_r+0xba>
 801bc38:	4b25      	ldr	r3, [pc, #148]	; (801bcd0 <__swsetup_r+0xd4>)
 801bc3a:	429c      	cmp	r4, r3
 801bc3c:	d101      	bne.n	801bc42 <__swsetup_r+0x46>
 801bc3e:	68ac      	ldr	r4, [r5, #8]
 801bc40:	e7eb      	b.n	801bc1a <__swsetup_r+0x1e>
 801bc42:	4b24      	ldr	r3, [pc, #144]	; (801bcd4 <__swsetup_r+0xd8>)
 801bc44:	429c      	cmp	r4, r3
 801bc46:	bf08      	it	eq
 801bc48:	68ec      	ldreq	r4, [r5, #12]
 801bc4a:	e7e6      	b.n	801bc1a <__swsetup_r+0x1e>
 801bc4c:	0758      	lsls	r0, r3, #29
 801bc4e:	d512      	bpl.n	801bc76 <__swsetup_r+0x7a>
 801bc50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bc52:	b141      	cbz	r1, 801bc66 <__swsetup_r+0x6a>
 801bc54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bc58:	4299      	cmp	r1, r3
 801bc5a:	d002      	beq.n	801bc62 <__swsetup_r+0x66>
 801bc5c:	4630      	mov	r0, r6
 801bc5e:	f000 fa93 	bl	801c188 <_free_r>
 801bc62:	2300      	movs	r3, #0
 801bc64:	6363      	str	r3, [r4, #52]	; 0x34
 801bc66:	89a3      	ldrh	r3, [r4, #12]
 801bc68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bc6c:	81a3      	strh	r3, [r4, #12]
 801bc6e:	2300      	movs	r3, #0
 801bc70:	6063      	str	r3, [r4, #4]
 801bc72:	6923      	ldr	r3, [r4, #16]
 801bc74:	6023      	str	r3, [r4, #0]
 801bc76:	89a3      	ldrh	r3, [r4, #12]
 801bc78:	f043 0308 	orr.w	r3, r3, #8
 801bc7c:	81a3      	strh	r3, [r4, #12]
 801bc7e:	6923      	ldr	r3, [r4, #16]
 801bc80:	b94b      	cbnz	r3, 801bc96 <__swsetup_r+0x9a>
 801bc82:	89a3      	ldrh	r3, [r4, #12]
 801bc84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bc88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bc8c:	d003      	beq.n	801bc96 <__swsetup_r+0x9a>
 801bc8e:	4621      	mov	r1, r4
 801bc90:	4630      	mov	r0, r6
 801bc92:	f000 fa31 	bl	801c0f8 <__smakebuf_r>
 801bc96:	89a0      	ldrh	r0, [r4, #12]
 801bc98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bc9c:	f010 0301 	ands.w	r3, r0, #1
 801bca0:	d00a      	beq.n	801bcb8 <__swsetup_r+0xbc>
 801bca2:	2300      	movs	r3, #0
 801bca4:	60a3      	str	r3, [r4, #8]
 801bca6:	6963      	ldr	r3, [r4, #20]
 801bca8:	425b      	negs	r3, r3
 801bcaa:	61a3      	str	r3, [r4, #24]
 801bcac:	6923      	ldr	r3, [r4, #16]
 801bcae:	b943      	cbnz	r3, 801bcc2 <__swsetup_r+0xc6>
 801bcb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801bcb4:	d1ba      	bne.n	801bc2c <__swsetup_r+0x30>
 801bcb6:	bd70      	pop	{r4, r5, r6, pc}
 801bcb8:	0781      	lsls	r1, r0, #30
 801bcba:	bf58      	it	pl
 801bcbc:	6963      	ldrpl	r3, [r4, #20]
 801bcbe:	60a3      	str	r3, [r4, #8]
 801bcc0:	e7f4      	b.n	801bcac <__swsetup_r+0xb0>
 801bcc2:	2000      	movs	r0, #0
 801bcc4:	e7f7      	b.n	801bcb6 <__swsetup_r+0xba>
 801bcc6:	bf00      	nop
 801bcc8:	20000030 	.word	0x20000030
 801bccc:	0802089c 	.word	0x0802089c
 801bcd0:	080208bc 	.word	0x080208bc
 801bcd4:	0802087c 	.word	0x0802087c

0801bcd8 <__assert_func>:
 801bcd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bcda:	4614      	mov	r4, r2
 801bcdc:	461a      	mov	r2, r3
 801bcde:	4b09      	ldr	r3, [pc, #36]	; (801bd04 <__assert_func+0x2c>)
 801bce0:	681b      	ldr	r3, [r3, #0]
 801bce2:	4605      	mov	r5, r0
 801bce4:	68d8      	ldr	r0, [r3, #12]
 801bce6:	b14c      	cbz	r4, 801bcfc <__assert_func+0x24>
 801bce8:	4b07      	ldr	r3, [pc, #28]	; (801bd08 <__assert_func+0x30>)
 801bcea:	9100      	str	r1, [sp, #0]
 801bcec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801bcf0:	4906      	ldr	r1, [pc, #24]	; (801bd0c <__assert_func+0x34>)
 801bcf2:	462b      	mov	r3, r5
 801bcf4:	f000 f9a6 	bl	801c044 <fiprintf>
 801bcf8:	f000 fec2 	bl	801ca80 <abort>
 801bcfc:	4b04      	ldr	r3, [pc, #16]	; (801bd10 <__assert_func+0x38>)
 801bcfe:	461c      	mov	r4, r3
 801bd00:	e7f3      	b.n	801bcea <__assert_func+0x12>
 801bd02:	bf00      	nop
 801bd04:	20000030 	.word	0x20000030
 801bd08:	0802083e 	.word	0x0802083e
 801bd0c:	0802084b 	.word	0x0802084b
 801bd10:	08020879 	.word	0x08020879

0801bd14 <__sflush_r>:
 801bd14:	898a      	ldrh	r2, [r1, #12]
 801bd16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd1a:	4605      	mov	r5, r0
 801bd1c:	0710      	lsls	r0, r2, #28
 801bd1e:	460c      	mov	r4, r1
 801bd20:	d458      	bmi.n	801bdd4 <__sflush_r+0xc0>
 801bd22:	684b      	ldr	r3, [r1, #4]
 801bd24:	2b00      	cmp	r3, #0
 801bd26:	dc05      	bgt.n	801bd34 <__sflush_r+0x20>
 801bd28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bd2a:	2b00      	cmp	r3, #0
 801bd2c:	dc02      	bgt.n	801bd34 <__sflush_r+0x20>
 801bd2e:	2000      	movs	r0, #0
 801bd30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bd36:	2e00      	cmp	r6, #0
 801bd38:	d0f9      	beq.n	801bd2e <__sflush_r+0x1a>
 801bd3a:	2300      	movs	r3, #0
 801bd3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bd40:	682f      	ldr	r7, [r5, #0]
 801bd42:	602b      	str	r3, [r5, #0]
 801bd44:	d032      	beq.n	801bdac <__sflush_r+0x98>
 801bd46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bd48:	89a3      	ldrh	r3, [r4, #12]
 801bd4a:	075a      	lsls	r2, r3, #29
 801bd4c:	d505      	bpl.n	801bd5a <__sflush_r+0x46>
 801bd4e:	6863      	ldr	r3, [r4, #4]
 801bd50:	1ac0      	subs	r0, r0, r3
 801bd52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bd54:	b10b      	cbz	r3, 801bd5a <__sflush_r+0x46>
 801bd56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bd58:	1ac0      	subs	r0, r0, r3
 801bd5a:	2300      	movs	r3, #0
 801bd5c:	4602      	mov	r2, r0
 801bd5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bd60:	6a21      	ldr	r1, [r4, #32]
 801bd62:	4628      	mov	r0, r5
 801bd64:	47b0      	blx	r6
 801bd66:	1c43      	adds	r3, r0, #1
 801bd68:	89a3      	ldrh	r3, [r4, #12]
 801bd6a:	d106      	bne.n	801bd7a <__sflush_r+0x66>
 801bd6c:	6829      	ldr	r1, [r5, #0]
 801bd6e:	291d      	cmp	r1, #29
 801bd70:	d82c      	bhi.n	801bdcc <__sflush_r+0xb8>
 801bd72:	4a2a      	ldr	r2, [pc, #168]	; (801be1c <__sflush_r+0x108>)
 801bd74:	40ca      	lsrs	r2, r1
 801bd76:	07d6      	lsls	r6, r2, #31
 801bd78:	d528      	bpl.n	801bdcc <__sflush_r+0xb8>
 801bd7a:	2200      	movs	r2, #0
 801bd7c:	6062      	str	r2, [r4, #4]
 801bd7e:	04d9      	lsls	r1, r3, #19
 801bd80:	6922      	ldr	r2, [r4, #16]
 801bd82:	6022      	str	r2, [r4, #0]
 801bd84:	d504      	bpl.n	801bd90 <__sflush_r+0x7c>
 801bd86:	1c42      	adds	r2, r0, #1
 801bd88:	d101      	bne.n	801bd8e <__sflush_r+0x7a>
 801bd8a:	682b      	ldr	r3, [r5, #0]
 801bd8c:	b903      	cbnz	r3, 801bd90 <__sflush_r+0x7c>
 801bd8e:	6560      	str	r0, [r4, #84]	; 0x54
 801bd90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bd92:	602f      	str	r7, [r5, #0]
 801bd94:	2900      	cmp	r1, #0
 801bd96:	d0ca      	beq.n	801bd2e <__sflush_r+0x1a>
 801bd98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bd9c:	4299      	cmp	r1, r3
 801bd9e:	d002      	beq.n	801bda6 <__sflush_r+0x92>
 801bda0:	4628      	mov	r0, r5
 801bda2:	f000 f9f1 	bl	801c188 <_free_r>
 801bda6:	2000      	movs	r0, #0
 801bda8:	6360      	str	r0, [r4, #52]	; 0x34
 801bdaa:	e7c1      	b.n	801bd30 <__sflush_r+0x1c>
 801bdac:	6a21      	ldr	r1, [r4, #32]
 801bdae:	2301      	movs	r3, #1
 801bdb0:	4628      	mov	r0, r5
 801bdb2:	47b0      	blx	r6
 801bdb4:	1c41      	adds	r1, r0, #1
 801bdb6:	d1c7      	bne.n	801bd48 <__sflush_r+0x34>
 801bdb8:	682b      	ldr	r3, [r5, #0]
 801bdba:	2b00      	cmp	r3, #0
 801bdbc:	d0c4      	beq.n	801bd48 <__sflush_r+0x34>
 801bdbe:	2b1d      	cmp	r3, #29
 801bdc0:	d001      	beq.n	801bdc6 <__sflush_r+0xb2>
 801bdc2:	2b16      	cmp	r3, #22
 801bdc4:	d101      	bne.n	801bdca <__sflush_r+0xb6>
 801bdc6:	602f      	str	r7, [r5, #0]
 801bdc8:	e7b1      	b.n	801bd2e <__sflush_r+0x1a>
 801bdca:	89a3      	ldrh	r3, [r4, #12]
 801bdcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bdd0:	81a3      	strh	r3, [r4, #12]
 801bdd2:	e7ad      	b.n	801bd30 <__sflush_r+0x1c>
 801bdd4:	690f      	ldr	r7, [r1, #16]
 801bdd6:	2f00      	cmp	r7, #0
 801bdd8:	d0a9      	beq.n	801bd2e <__sflush_r+0x1a>
 801bdda:	0793      	lsls	r3, r2, #30
 801bddc:	680e      	ldr	r6, [r1, #0]
 801bdde:	bf08      	it	eq
 801bde0:	694b      	ldreq	r3, [r1, #20]
 801bde2:	600f      	str	r7, [r1, #0]
 801bde4:	bf18      	it	ne
 801bde6:	2300      	movne	r3, #0
 801bde8:	eba6 0807 	sub.w	r8, r6, r7
 801bdec:	608b      	str	r3, [r1, #8]
 801bdee:	f1b8 0f00 	cmp.w	r8, #0
 801bdf2:	dd9c      	ble.n	801bd2e <__sflush_r+0x1a>
 801bdf4:	6a21      	ldr	r1, [r4, #32]
 801bdf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bdf8:	4643      	mov	r3, r8
 801bdfa:	463a      	mov	r2, r7
 801bdfc:	4628      	mov	r0, r5
 801bdfe:	47b0      	blx	r6
 801be00:	2800      	cmp	r0, #0
 801be02:	dc06      	bgt.n	801be12 <__sflush_r+0xfe>
 801be04:	89a3      	ldrh	r3, [r4, #12]
 801be06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801be0a:	81a3      	strh	r3, [r4, #12]
 801be0c:	f04f 30ff 	mov.w	r0, #4294967295
 801be10:	e78e      	b.n	801bd30 <__sflush_r+0x1c>
 801be12:	4407      	add	r7, r0
 801be14:	eba8 0800 	sub.w	r8, r8, r0
 801be18:	e7e9      	b.n	801bdee <__sflush_r+0xda>
 801be1a:	bf00      	nop
 801be1c:	20400001 	.word	0x20400001

0801be20 <_fflush_r>:
 801be20:	b538      	push	{r3, r4, r5, lr}
 801be22:	690b      	ldr	r3, [r1, #16]
 801be24:	4605      	mov	r5, r0
 801be26:	460c      	mov	r4, r1
 801be28:	b913      	cbnz	r3, 801be30 <_fflush_r+0x10>
 801be2a:	2500      	movs	r5, #0
 801be2c:	4628      	mov	r0, r5
 801be2e:	bd38      	pop	{r3, r4, r5, pc}
 801be30:	b118      	cbz	r0, 801be3a <_fflush_r+0x1a>
 801be32:	6983      	ldr	r3, [r0, #24]
 801be34:	b90b      	cbnz	r3, 801be3a <_fflush_r+0x1a>
 801be36:	f000 f887 	bl	801bf48 <__sinit>
 801be3a:	4b14      	ldr	r3, [pc, #80]	; (801be8c <_fflush_r+0x6c>)
 801be3c:	429c      	cmp	r4, r3
 801be3e:	d11b      	bne.n	801be78 <_fflush_r+0x58>
 801be40:	686c      	ldr	r4, [r5, #4]
 801be42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801be46:	2b00      	cmp	r3, #0
 801be48:	d0ef      	beq.n	801be2a <_fflush_r+0xa>
 801be4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801be4c:	07d0      	lsls	r0, r2, #31
 801be4e:	d404      	bmi.n	801be5a <_fflush_r+0x3a>
 801be50:	0599      	lsls	r1, r3, #22
 801be52:	d402      	bmi.n	801be5a <_fflush_r+0x3a>
 801be54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801be56:	f000 f927 	bl	801c0a8 <__retarget_lock_acquire_recursive>
 801be5a:	4628      	mov	r0, r5
 801be5c:	4621      	mov	r1, r4
 801be5e:	f7ff ff59 	bl	801bd14 <__sflush_r>
 801be62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801be64:	07da      	lsls	r2, r3, #31
 801be66:	4605      	mov	r5, r0
 801be68:	d4e0      	bmi.n	801be2c <_fflush_r+0xc>
 801be6a:	89a3      	ldrh	r3, [r4, #12]
 801be6c:	059b      	lsls	r3, r3, #22
 801be6e:	d4dd      	bmi.n	801be2c <_fflush_r+0xc>
 801be70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801be72:	f000 f91a 	bl	801c0aa <__retarget_lock_release_recursive>
 801be76:	e7d9      	b.n	801be2c <_fflush_r+0xc>
 801be78:	4b05      	ldr	r3, [pc, #20]	; (801be90 <_fflush_r+0x70>)
 801be7a:	429c      	cmp	r4, r3
 801be7c:	d101      	bne.n	801be82 <_fflush_r+0x62>
 801be7e:	68ac      	ldr	r4, [r5, #8]
 801be80:	e7df      	b.n	801be42 <_fflush_r+0x22>
 801be82:	4b04      	ldr	r3, [pc, #16]	; (801be94 <_fflush_r+0x74>)
 801be84:	429c      	cmp	r4, r3
 801be86:	bf08      	it	eq
 801be88:	68ec      	ldreq	r4, [r5, #12]
 801be8a:	e7da      	b.n	801be42 <_fflush_r+0x22>
 801be8c:	0802089c 	.word	0x0802089c
 801be90:	080208bc 	.word	0x080208bc
 801be94:	0802087c 	.word	0x0802087c

0801be98 <std>:
 801be98:	2300      	movs	r3, #0
 801be9a:	b510      	push	{r4, lr}
 801be9c:	4604      	mov	r4, r0
 801be9e:	e9c0 3300 	strd	r3, r3, [r0]
 801bea2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bea6:	6083      	str	r3, [r0, #8]
 801bea8:	8181      	strh	r1, [r0, #12]
 801beaa:	6643      	str	r3, [r0, #100]	; 0x64
 801beac:	81c2      	strh	r2, [r0, #14]
 801beae:	6183      	str	r3, [r0, #24]
 801beb0:	4619      	mov	r1, r3
 801beb2:	2208      	movs	r2, #8
 801beb4:	305c      	adds	r0, #92	; 0x5c
 801beb6:	f7ff fd65 	bl	801b984 <memset>
 801beba:	4b05      	ldr	r3, [pc, #20]	; (801bed0 <std+0x38>)
 801bebc:	6263      	str	r3, [r4, #36]	; 0x24
 801bebe:	4b05      	ldr	r3, [pc, #20]	; (801bed4 <std+0x3c>)
 801bec0:	62a3      	str	r3, [r4, #40]	; 0x28
 801bec2:	4b05      	ldr	r3, [pc, #20]	; (801bed8 <std+0x40>)
 801bec4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bec6:	4b05      	ldr	r3, [pc, #20]	; (801bedc <std+0x44>)
 801bec8:	6224      	str	r4, [r4, #32]
 801beca:	6323      	str	r3, [r4, #48]	; 0x30
 801becc:	bd10      	pop	{r4, pc}
 801bece:	bf00      	nop
 801bed0:	0801c9d5 	.word	0x0801c9d5
 801bed4:	0801c9f7 	.word	0x0801c9f7
 801bed8:	0801ca2f 	.word	0x0801ca2f
 801bedc:	0801ca53 	.word	0x0801ca53

0801bee0 <_cleanup_r>:
 801bee0:	4901      	ldr	r1, [pc, #4]	; (801bee8 <_cleanup_r+0x8>)
 801bee2:	f000 b8c1 	b.w	801c068 <_fwalk_reent>
 801bee6:	bf00      	nop
 801bee8:	0801be21 	.word	0x0801be21

0801beec <__sfmoreglue>:
 801beec:	b570      	push	{r4, r5, r6, lr}
 801beee:	2268      	movs	r2, #104	; 0x68
 801bef0:	1e4d      	subs	r5, r1, #1
 801bef2:	4355      	muls	r5, r2
 801bef4:	460e      	mov	r6, r1
 801bef6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801befa:	f000 f9b1 	bl	801c260 <_malloc_r>
 801befe:	4604      	mov	r4, r0
 801bf00:	b140      	cbz	r0, 801bf14 <__sfmoreglue+0x28>
 801bf02:	2100      	movs	r1, #0
 801bf04:	e9c0 1600 	strd	r1, r6, [r0]
 801bf08:	300c      	adds	r0, #12
 801bf0a:	60a0      	str	r0, [r4, #8]
 801bf0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801bf10:	f7ff fd38 	bl	801b984 <memset>
 801bf14:	4620      	mov	r0, r4
 801bf16:	bd70      	pop	{r4, r5, r6, pc}

0801bf18 <__sfp_lock_acquire>:
 801bf18:	4801      	ldr	r0, [pc, #4]	; (801bf20 <__sfp_lock_acquire+0x8>)
 801bf1a:	f000 b8c5 	b.w	801c0a8 <__retarget_lock_acquire_recursive>
 801bf1e:	bf00      	nop
 801bf20:	200111f1 	.word	0x200111f1

0801bf24 <__sfp_lock_release>:
 801bf24:	4801      	ldr	r0, [pc, #4]	; (801bf2c <__sfp_lock_release+0x8>)
 801bf26:	f000 b8c0 	b.w	801c0aa <__retarget_lock_release_recursive>
 801bf2a:	bf00      	nop
 801bf2c:	200111f1 	.word	0x200111f1

0801bf30 <__sinit_lock_acquire>:
 801bf30:	4801      	ldr	r0, [pc, #4]	; (801bf38 <__sinit_lock_acquire+0x8>)
 801bf32:	f000 b8b9 	b.w	801c0a8 <__retarget_lock_acquire_recursive>
 801bf36:	bf00      	nop
 801bf38:	200111f2 	.word	0x200111f2

0801bf3c <__sinit_lock_release>:
 801bf3c:	4801      	ldr	r0, [pc, #4]	; (801bf44 <__sinit_lock_release+0x8>)
 801bf3e:	f000 b8b4 	b.w	801c0aa <__retarget_lock_release_recursive>
 801bf42:	bf00      	nop
 801bf44:	200111f2 	.word	0x200111f2

0801bf48 <__sinit>:
 801bf48:	b510      	push	{r4, lr}
 801bf4a:	4604      	mov	r4, r0
 801bf4c:	f7ff fff0 	bl	801bf30 <__sinit_lock_acquire>
 801bf50:	69a3      	ldr	r3, [r4, #24]
 801bf52:	b11b      	cbz	r3, 801bf5c <__sinit+0x14>
 801bf54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bf58:	f7ff bff0 	b.w	801bf3c <__sinit_lock_release>
 801bf5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801bf60:	6523      	str	r3, [r4, #80]	; 0x50
 801bf62:	4b13      	ldr	r3, [pc, #76]	; (801bfb0 <__sinit+0x68>)
 801bf64:	4a13      	ldr	r2, [pc, #76]	; (801bfb4 <__sinit+0x6c>)
 801bf66:	681b      	ldr	r3, [r3, #0]
 801bf68:	62a2      	str	r2, [r4, #40]	; 0x28
 801bf6a:	42a3      	cmp	r3, r4
 801bf6c:	bf04      	itt	eq
 801bf6e:	2301      	moveq	r3, #1
 801bf70:	61a3      	streq	r3, [r4, #24]
 801bf72:	4620      	mov	r0, r4
 801bf74:	f000 f820 	bl	801bfb8 <__sfp>
 801bf78:	6060      	str	r0, [r4, #4]
 801bf7a:	4620      	mov	r0, r4
 801bf7c:	f000 f81c 	bl	801bfb8 <__sfp>
 801bf80:	60a0      	str	r0, [r4, #8]
 801bf82:	4620      	mov	r0, r4
 801bf84:	f000 f818 	bl	801bfb8 <__sfp>
 801bf88:	2200      	movs	r2, #0
 801bf8a:	60e0      	str	r0, [r4, #12]
 801bf8c:	2104      	movs	r1, #4
 801bf8e:	6860      	ldr	r0, [r4, #4]
 801bf90:	f7ff ff82 	bl	801be98 <std>
 801bf94:	68a0      	ldr	r0, [r4, #8]
 801bf96:	2201      	movs	r2, #1
 801bf98:	2109      	movs	r1, #9
 801bf9a:	f7ff ff7d 	bl	801be98 <std>
 801bf9e:	68e0      	ldr	r0, [r4, #12]
 801bfa0:	2202      	movs	r2, #2
 801bfa2:	2112      	movs	r1, #18
 801bfa4:	f7ff ff78 	bl	801be98 <std>
 801bfa8:	2301      	movs	r3, #1
 801bfaa:	61a3      	str	r3, [r4, #24]
 801bfac:	e7d2      	b.n	801bf54 <__sinit+0xc>
 801bfae:	bf00      	nop
 801bfb0:	080207c8 	.word	0x080207c8
 801bfb4:	0801bee1 	.word	0x0801bee1

0801bfb8 <__sfp>:
 801bfb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bfba:	4607      	mov	r7, r0
 801bfbc:	f7ff ffac 	bl	801bf18 <__sfp_lock_acquire>
 801bfc0:	4b1e      	ldr	r3, [pc, #120]	; (801c03c <__sfp+0x84>)
 801bfc2:	681e      	ldr	r6, [r3, #0]
 801bfc4:	69b3      	ldr	r3, [r6, #24]
 801bfc6:	b913      	cbnz	r3, 801bfce <__sfp+0x16>
 801bfc8:	4630      	mov	r0, r6
 801bfca:	f7ff ffbd 	bl	801bf48 <__sinit>
 801bfce:	3648      	adds	r6, #72	; 0x48
 801bfd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801bfd4:	3b01      	subs	r3, #1
 801bfd6:	d503      	bpl.n	801bfe0 <__sfp+0x28>
 801bfd8:	6833      	ldr	r3, [r6, #0]
 801bfda:	b30b      	cbz	r3, 801c020 <__sfp+0x68>
 801bfdc:	6836      	ldr	r6, [r6, #0]
 801bfde:	e7f7      	b.n	801bfd0 <__sfp+0x18>
 801bfe0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801bfe4:	b9d5      	cbnz	r5, 801c01c <__sfp+0x64>
 801bfe6:	4b16      	ldr	r3, [pc, #88]	; (801c040 <__sfp+0x88>)
 801bfe8:	60e3      	str	r3, [r4, #12]
 801bfea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801bfee:	6665      	str	r5, [r4, #100]	; 0x64
 801bff0:	f000 f859 	bl	801c0a6 <__retarget_lock_init_recursive>
 801bff4:	f7ff ff96 	bl	801bf24 <__sfp_lock_release>
 801bff8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801bffc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c000:	6025      	str	r5, [r4, #0]
 801c002:	61a5      	str	r5, [r4, #24]
 801c004:	2208      	movs	r2, #8
 801c006:	4629      	mov	r1, r5
 801c008:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c00c:	f7ff fcba 	bl	801b984 <memset>
 801c010:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c014:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c018:	4620      	mov	r0, r4
 801c01a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c01c:	3468      	adds	r4, #104	; 0x68
 801c01e:	e7d9      	b.n	801bfd4 <__sfp+0x1c>
 801c020:	2104      	movs	r1, #4
 801c022:	4638      	mov	r0, r7
 801c024:	f7ff ff62 	bl	801beec <__sfmoreglue>
 801c028:	4604      	mov	r4, r0
 801c02a:	6030      	str	r0, [r6, #0]
 801c02c:	2800      	cmp	r0, #0
 801c02e:	d1d5      	bne.n	801bfdc <__sfp+0x24>
 801c030:	f7ff ff78 	bl	801bf24 <__sfp_lock_release>
 801c034:	230c      	movs	r3, #12
 801c036:	603b      	str	r3, [r7, #0]
 801c038:	e7ee      	b.n	801c018 <__sfp+0x60>
 801c03a:	bf00      	nop
 801c03c:	080207c8 	.word	0x080207c8
 801c040:	ffff0001 	.word	0xffff0001

0801c044 <fiprintf>:
 801c044:	b40e      	push	{r1, r2, r3}
 801c046:	b503      	push	{r0, r1, lr}
 801c048:	4601      	mov	r1, r0
 801c04a:	ab03      	add	r3, sp, #12
 801c04c:	4805      	ldr	r0, [pc, #20]	; (801c064 <fiprintf+0x20>)
 801c04e:	f853 2b04 	ldr.w	r2, [r3], #4
 801c052:	6800      	ldr	r0, [r0, #0]
 801c054:	9301      	str	r3, [sp, #4]
 801c056:	f000 f9a1 	bl	801c39c <_vfiprintf_r>
 801c05a:	b002      	add	sp, #8
 801c05c:	f85d eb04 	ldr.w	lr, [sp], #4
 801c060:	b003      	add	sp, #12
 801c062:	4770      	bx	lr
 801c064:	20000030 	.word	0x20000030

0801c068 <_fwalk_reent>:
 801c068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c06c:	4606      	mov	r6, r0
 801c06e:	4688      	mov	r8, r1
 801c070:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c074:	2700      	movs	r7, #0
 801c076:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c07a:	f1b9 0901 	subs.w	r9, r9, #1
 801c07e:	d505      	bpl.n	801c08c <_fwalk_reent+0x24>
 801c080:	6824      	ldr	r4, [r4, #0]
 801c082:	2c00      	cmp	r4, #0
 801c084:	d1f7      	bne.n	801c076 <_fwalk_reent+0xe>
 801c086:	4638      	mov	r0, r7
 801c088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c08c:	89ab      	ldrh	r3, [r5, #12]
 801c08e:	2b01      	cmp	r3, #1
 801c090:	d907      	bls.n	801c0a2 <_fwalk_reent+0x3a>
 801c092:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c096:	3301      	adds	r3, #1
 801c098:	d003      	beq.n	801c0a2 <_fwalk_reent+0x3a>
 801c09a:	4629      	mov	r1, r5
 801c09c:	4630      	mov	r0, r6
 801c09e:	47c0      	blx	r8
 801c0a0:	4307      	orrs	r7, r0
 801c0a2:	3568      	adds	r5, #104	; 0x68
 801c0a4:	e7e9      	b.n	801c07a <_fwalk_reent+0x12>

0801c0a6 <__retarget_lock_init_recursive>:
 801c0a6:	4770      	bx	lr

0801c0a8 <__retarget_lock_acquire_recursive>:
 801c0a8:	4770      	bx	lr

0801c0aa <__retarget_lock_release_recursive>:
 801c0aa:	4770      	bx	lr

0801c0ac <__swhatbuf_r>:
 801c0ac:	b570      	push	{r4, r5, r6, lr}
 801c0ae:	460e      	mov	r6, r1
 801c0b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c0b4:	2900      	cmp	r1, #0
 801c0b6:	b096      	sub	sp, #88	; 0x58
 801c0b8:	4614      	mov	r4, r2
 801c0ba:	461d      	mov	r5, r3
 801c0bc:	da08      	bge.n	801c0d0 <__swhatbuf_r+0x24>
 801c0be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801c0c2:	2200      	movs	r2, #0
 801c0c4:	602a      	str	r2, [r5, #0]
 801c0c6:	061a      	lsls	r2, r3, #24
 801c0c8:	d410      	bmi.n	801c0ec <__swhatbuf_r+0x40>
 801c0ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c0ce:	e00e      	b.n	801c0ee <__swhatbuf_r+0x42>
 801c0d0:	466a      	mov	r2, sp
 801c0d2:	f000 fced 	bl	801cab0 <_fstat_r>
 801c0d6:	2800      	cmp	r0, #0
 801c0d8:	dbf1      	blt.n	801c0be <__swhatbuf_r+0x12>
 801c0da:	9a01      	ldr	r2, [sp, #4]
 801c0dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c0e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c0e4:	425a      	negs	r2, r3
 801c0e6:	415a      	adcs	r2, r3
 801c0e8:	602a      	str	r2, [r5, #0]
 801c0ea:	e7ee      	b.n	801c0ca <__swhatbuf_r+0x1e>
 801c0ec:	2340      	movs	r3, #64	; 0x40
 801c0ee:	2000      	movs	r0, #0
 801c0f0:	6023      	str	r3, [r4, #0]
 801c0f2:	b016      	add	sp, #88	; 0x58
 801c0f4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c0f8 <__smakebuf_r>:
 801c0f8:	898b      	ldrh	r3, [r1, #12]
 801c0fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c0fc:	079d      	lsls	r5, r3, #30
 801c0fe:	4606      	mov	r6, r0
 801c100:	460c      	mov	r4, r1
 801c102:	d507      	bpl.n	801c114 <__smakebuf_r+0x1c>
 801c104:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c108:	6023      	str	r3, [r4, #0]
 801c10a:	6123      	str	r3, [r4, #16]
 801c10c:	2301      	movs	r3, #1
 801c10e:	6163      	str	r3, [r4, #20]
 801c110:	b002      	add	sp, #8
 801c112:	bd70      	pop	{r4, r5, r6, pc}
 801c114:	ab01      	add	r3, sp, #4
 801c116:	466a      	mov	r2, sp
 801c118:	f7ff ffc8 	bl	801c0ac <__swhatbuf_r>
 801c11c:	9900      	ldr	r1, [sp, #0]
 801c11e:	4605      	mov	r5, r0
 801c120:	4630      	mov	r0, r6
 801c122:	f000 f89d 	bl	801c260 <_malloc_r>
 801c126:	b948      	cbnz	r0, 801c13c <__smakebuf_r+0x44>
 801c128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c12c:	059a      	lsls	r2, r3, #22
 801c12e:	d4ef      	bmi.n	801c110 <__smakebuf_r+0x18>
 801c130:	f023 0303 	bic.w	r3, r3, #3
 801c134:	f043 0302 	orr.w	r3, r3, #2
 801c138:	81a3      	strh	r3, [r4, #12]
 801c13a:	e7e3      	b.n	801c104 <__smakebuf_r+0xc>
 801c13c:	4b0d      	ldr	r3, [pc, #52]	; (801c174 <__smakebuf_r+0x7c>)
 801c13e:	62b3      	str	r3, [r6, #40]	; 0x28
 801c140:	89a3      	ldrh	r3, [r4, #12]
 801c142:	6020      	str	r0, [r4, #0]
 801c144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c148:	81a3      	strh	r3, [r4, #12]
 801c14a:	9b00      	ldr	r3, [sp, #0]
 801c14c:	6163      	str	r3, [r4, #20]
 801c14e:	9b01      	ldr	r3, [sp, #4]
 801c150:	6120      	str	r0, [r4, #16]
 801c152:	b15b      	cbz	r3, 801c16c <__smakebuf_r+0x74>
 801c154:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c158:	4630      	mov	r0, r6
 801c15a:	f000 fcbb 	bl	801cad4 <_isatty_r>
 801c15e:	b128      	cbz	r0, 801c16c <__smakebuf_r+0x74>
 801c160:	89a3      	ldrh	r3, [r4, #12]
 801c162:	f023 0303 	bic.w	r3, r3, #3
 801c166:	f043 0301 	orr.w	r3, r3, #1
 801c16a:	81a3      	strh	r3, [r4, #12]
 801c16c:	89a0      	ldrh	r0, [r4, #12]
 801c16e:	4305      	orrs	r5, r0
 801c170:	81a5      	strh	r5, [r4, #12]
 801c172:	e7cd      	b.n	801c110 <__smakebuf_r+0x18>
 801c174:	0801bee1 	.word	0x0801bee1

0801c178 <malloc>:
 801c178:	4b02      	ldr	r3, [pc, #8]	; (801c184 <malloc+0xc>)
 801c17a:	4601      	mov	r1, r0
 801c17c:	6818      	ldr	r0, [r3, #0]
 801c17e:	f000 b86f 	b.w	801c260 <_malloc_r>
 801c182:	bf00      	nop
 801c184:	20000030 	.word	0x20000030

0801c188 <_free_r>:
 801c188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c18a:	2900      	cmp	r1, #0
 801c18c:	d044      	beq.n	801c218 <_free_r+0x90>
 801c18e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c192:	9001      	str	r0, [sp, #4]
 801c194:	2b00      	cmp	r3, #0
 801c196:	f1a1 0404 	sub.w	r4, r1, #4
 801c19a:	bfb8      	it	lt
 801c19c:	18e4      	addlt	r4, r4, r3
 801c19e:	f000 fcbb 	bl	801cb18 <__malloc_lock>
 801c1a2:	4a1e      	ldr	r2, [pc, #120]	; (801c21c <_free_r+0x94>)
 801c1a4:	9801      	ldr	r0, [sp, #4]
 801c1a6:	6813      	ldr	r3, [r2, #0]
 801c1a8:	b933      	cbnz	r3, 801c1b8 <_free_r+0x30>
 801c1aa:	6063      	str	r3, [r4, #4]
 801c1ac:	6014      	str	r4, [r2, #0]
 801c1ae:	b003      	add	sp, #12
 801c1b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c1b4:	f000 bcb6 	b.w	801cb24 <__malloc_unlock>
 801c1b8:	42a3      	cmp	r3, r4
 801c1ba:	d908      	bls.n	801c1ce <_free_r+0x46>
 801c1bc:	6825      	ldr	r5, [r4, #0]
 801c1be:	1961      	adds	r1, r4, r5
 801c1c0:	428b      	cmp	r3, r1
 801c1c2:	bf01      	itttt	eq
 801c1c4:	6819      	ldreq	r1, [r3, #0]
 801c1c6:	685b      	ldreq	r3, [r3, #4]
 801c1c8:	1949      	addeq	r1, r1, r5
 801c1ca:	6021      	streq	r1, [r4, #0]
 801c1cc:	e7ed      	b.n	801c1aa <_free_r+0x22>
 801c1ce:	461a      	mov	r2, r3
 801c1d0:	685b      	ldr	r3, [r3, #4]
 801c1d2:	b10b      	cbz	r3, 801c1d8 <_free_r+0x50>
 801c1d4:	42a3      	cmp	r3, r4
 801c1d6:	d9fa      	bls.n	801c1ce <_free_r+0x46>
 801c1d8:	6811      	ldr	r1, [r2, #0]
 801c1da:	1855      	adds	r5, r2, r1
 801c1dc:	42a5      	cmp	r5, r4
 801c1de:	d10b      	bne.n	801c1f8 <_free_r+0x70>
 801c1e0:	6824      	ldr	r4, [r4, #0]
 801c1e2:	4421      	add	r1, r4
 801c1e4:	1854      	adds	r4, r2, r1
 801c1e6:	42a3      	cmp	r3, r4
 801c1e8:	6011      	str	r1, [r2, #0]
 801c1ea:	d1e0      	bne.n	801c1ae <_free_r+0x26>
 801c1ec:	681c      	ldr	r4, [r3, #0]
 801c1ee:	685b      	ldr	r3, [r3, #4]
 801c1f0:	6053      	str	r3, [r2, #4]
 801c1f2:	4421      	add	r1, r4
 801c1f4:	6011      	str	r1, [r2, #0]
 801c1f6:	e7da      	b.n	801c1ae <_free_r+0x26>
 801c1f8:	d902      	bls.n	801c200 <_free_r+0x78>
 801c1fa:	230c      	movs	r3, #12
 801c1fc:	6003      	str	r3, [r0, #0]
 801c1fe:	e7d6      	b.n	801c1ae <_free_r+0x26>
 801c200:	6825      	ldr	r5, [r4, #0]
 801c202:	1961      	adds	r1, r4, r5
 801c204:	428b      	cmp	r3, r1
 801c206:	bf04      	itt	eq
 801c208:	6819      	ldreq	r1, [r3, #0]
 801c20a:	685b      	ldreq	r3, [r3, #4]
 801c20c:	6063      	str	r3, [r4, #4]
 801c20e:	bf04      	itt	eq
 801c210:	1949      	addeq	r1, r1, r5
 801c212:	6021      	streq	r1, [r4, #0]
 801c214:	6054      	str	r4, [r2, #4]
 801c216:	e7ca      	b.n	801c1ae <_free_r+0x26>
 801c218:	b003      	add	sp, #12
 801c21a:	bd30      	pop	{r4, r5, pc}
 801c21c:	200111f4 	.word	0x200111f4

0801c220 <sbrk_aligned>:
 801c220:	b570      	push	{r4, r5, r6, lr}
 801c222:	4e0e      	ldr	r6, [pc, #56]	; (801c25c <sbrk_aligned+0x3c>)
 801c224:	460c      	mov	r4, r1
 801c226:	6831      	ldr	r1, [r6, #0]
 801c228:	4605      	mov	r5, r0
 801c22a:	b911      	cbnz	r1, 801c232 <sbrk_aligned+0x12>
 801c22c:	f000 fbc2 	bl	801c9b4 <_sbrk_r>
 801c230:	6030      	str	r0, [r6, #0]
 801c232:	4621      	mov	r1, r4
 801c234:	4628      	mov	r0, r5
 801c236:	f000 fbbd 	bl	801c9b4 <_sbrk_r>
 801c23a:	1c43      	adds	r3, r0, #1
 801c23c:	d00a      	beq.n	801c254 <sbrk_aligned+0x34>
 801c23e:	1cc4      	adds	r4, r0, #3
 801c240:	f024 0403 	bic.w	r4, r4, #3
 801c244:	42a0      	cmp	r0, r4
 801c246:	d007      	beq.n	801c258 <sbrk_aligned+0x38>
 801c248:	1a21      	subs	r1, r4, r0
 801c24a:	4628      	mov	r0, r5
 801c24c:	f000 fbb2 	bl	801c9b4 <_sbrk_r>
 801c250:	3001      	adds	r0, #1
 801c252:	d101      	bne.n	801c258 <sbrk_aligned+0x38>
 801c254:	f04f 34ff 	mov.w	r4, #4294967295
 801c258:	4620      	mov	r0, r4
 801c25a:	bd70      	pop	{r4, r5, r6, pc}
 801c25c:	200111f8 	.word	0x200111f8

0801c260 <_malloc_r>:
 801c260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c264:	1ccd      	adds	r5, r1, #3
 801c266:	f025 0503 	bic.w	r5, r5, #3
 801c26a:	3508      	adds	r5, #8
 801c26c:	2d0c      	cmp	r5, #12
 801c26e:	bf38      	it	cc
 801c270:	250c      	movcc	r5, #12
 801c272:	2d00      	cmp	r5, #0
 801c274:	4607      	mov	r7, r0
 801c276:	db01      	blt.n	801c27c <_malloc_r+0x1c>
 801c278:	42a9      	cmp	r1, r5
 801c27a:	d905      	bls.n	801c288 <_malloc_r+0x28>
 801c27c:	230c      	movs	r3, #12
 801c27e:	603b      	str	r3, [r7, #0]
 801c280:	2600      	movs	r6, #0
 801c282:	4630      	mov	r0, r6
 801c284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c288:	4e2e      	ldr	r6, [pc, #184]	; (801c344 <_malloc_r+0xe4>)
 801c28a:	f000 fc45 	bl	801cb18 <__malloc_lock>
 801c28e:	6833      	ldr	r3, [r6, #0]
 801c290:	461c      	mov	r4, r3
 801c292:	bb34      	cbnz	r4, 801c2e2 <_malloc_r+0x82>
 801c294:	4629      	mov	r1, r5
 801c296:	4638      	mov	r0, r7
 801c298:	f7ff ffc2 	bl	801c220 <sbrk_aligned>
 801c29c:	1c43      	adds	r3, r0, #1
 801c29e:	4604      	mov	r4, r0
 801c2a0:	d14d      	bne.n	801c33e <_malloc_r+0xde>
 801c2a2:	6834      	ldr	r4, [r6, #0]
 801c2a4:	4626      	mov	r6, r4
 801c2a6:	2e00      	cmp	r6, #0
 801c2a8:	d140      	bne.n	801c32c <_malloc_r+0xcc>
 801c2aa:	6823      	ldr	r3, [r4, #0]
 801c2ac:	4631      	mov	r1, r6
 801c2ae:	4638      	mov	r0, r7
 801c2b0:	eb04 0803 	add.w	r8, r4, r3
 801c2b4:	f000 fb7e 	bl	801c9b4 <_sbrk_r>
 801c2b8:	4580      	cmp	r8, r0
 801c2ba:	d13a      	bne.n	801c332 <_malloc_r+0xd2>
 801c2bc:	6821      	ldr	r1, [r4, #0]
 801c2be:	3503      	adds	r5, #3
 801c2c0:	1a6d      	subs	r5, r5, r1
 801c2c2:	f025 0503 	bic.w	r5, r5, #3
 801c2c6:	3508      	adds	r5, #8
 801c2c8:	2d0c      	cmp	r5, #12
 801c2ca:	bf38      	it	cc
 801c2cc:	250c      	movcc	r5, #12
 801c2ce:	4629      	mov	r1, r5
 801c2d0:	4638      	mov	r0, r7
 801c2d2:	f7ff ffa5 	bl	801c220 <sbrk_aligned>
 801c2d6:	3001      	adds	r0, #1
 801c2d8:	d02b      	beq.n	801c332 <_malloc_r+0xd2>
 801c2da:	6823      	ldr	r3, [r4, #0]
 801c2dc:	442b      	add	r3, r5
 801c2de:	6023      	str	r3, [r4, #0]
 801c2e0:	e00e      	b.n	801c300 <_malloc_r+0xa0>
 801c2e2:	6822      	ldr	r2, [r4, #0]
 801c2e4:	1b52      	subs	r2, r2, r5
 801c2e6:	d41e      	bmi.n	801c326 <_malloc_r+0xc6>
 801c2e8:	2a0b      	cmp	r2, #11
 801c2ea:	d916      	bls.n	801c31a <_malloc_r+0xba>
 801c2ec:	1961      	adds	r1, r4, r5
 801c2ee:	42a3      	cmp	r3, r4
 801c2f0:	6025      	str	r5, [r4, #0]
 801c2f2:	bf18      	it	ne
 801c2f4:	6059      	strne	r1, [r3, #4]
 801c2f6:	6863      	ldr	r3, [r4, #4]
 801c2f8:	bf08      	it	eq
 801c2fa:	6031      	streq	r1, [r6, #0]
 801c2fc:	5162      	str	r2, [r4, r5]
 801c2fe:	604b      	str	r3, [r1, #4]
 801c300:	4638      	mov	r0, r7
 801c302:	f104 060b 	add.w	r6, r4, #11
 801c306:	f000 fc0d 	bl	801cb24 <__malloc_unlock>
 801c30a:	f026 0607 	bic.w	r6, r6, #7
 801c30e:	1d23      	adds	r3, r4, #4
 801c310:	1af2      	subs	r2, r6, r3
 801c312:	d0b6      	beq.n	801c282 <_malloc_r+0x22>
 801c314:	1b9b      	subs	r3, r3, r6
 801c316:	50a3      	str	r3, [r4, r2]
 801c318:	e7b3      	b.n	801c282 <_malloc_r+0x22>
 801c31a:	6862      	ldr	r2, [r4, #4]
 801c31c:	42a3      	cmp	r3, r4
 801c31e:	bf0c      	ite	eq
 801c320:	6032      	streq	r2, [r6, #0]
 801c322:	605a      	strne	r2, [r3, #4]
 801c324:	e7ec      	b.n	801c300 <_malloc_r+0xa0>
 801c326:	4623      	mov	r3, r4
 801c328:	6864      	ldr	r4, [r4, #4]
 801c32a:	e7b2      	b.n	801c292 <_malloc_r+0x32>
 801c32c:	4634      	mov	r4, r6
 801c32e:	6876      	ldr	r6, [r6, #4]
 801c330:	e7b9      	b.n	801c2a6 <_malloc_r+0x46>
 801c332:	230c      	movs	r3, #12
 801c334:	603b      	str	r3, [r7, #0]
 801c336:	4638      	mov	r0, r7
 801c338:	f000 fbf4 	bl	801cb24 <__malloc_unlock>
 801c33c:	e7a1      	b.n	801c282 <_malloc_r+0x22>
 801c33e:	6025      	str	r5, [r4, #0]
 801c340:	e7de      	b.n	801c300 <_malloc_r+0xa0>
 801c342:	bf00      	nop
 801c344:	200111f4 	.word	0x200111f4

0801c348 <__sfputc_r>:
 801c348:	6893      	ldr	r3, [r2, #8]
 801c34a:	3b01      	subs	r3, #1
 801c34c:	2b00      	cmp	r3, #0
 801c34e:	b410      	push	{r4}
 801c350:	6093      	str	r3, [r2, #8]
 801c352:	da08      	bge.n	801c366 <__sfputc_r+0x1e>
 801c354:	6994      	ldr	r4, [r2, #24]
 801c356:	42a3      	cmp	r3, r4
 801c358:	db01      	blt.n	801c35e <__sfputc_r+0x16>
 801c35a:	290a      	cmp	r1, #10
 801c35c:	d103      	bne.n	801c366 <__sfputc_r+0x1e>
 801c35e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c362:	f7ff bbf9 	b.w	801bb58 <__swbuf_r>
 801c366:	6813      	ldr	r3, [r2, #0]
 801c368:	1c58      	adds	r0, r3, #1
 801c36a:	6010      	str	r0, [r2, #0]
 801c36c:	7019      	strb	r1, [r3, #0]
 801c36e:	4608      	mov	r0, r1
 801c370:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c374:	4770      	bx	lr

0801c376 <__sfputs_r>:
 801c376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c378:	4606      	mov	r6, r0
 801c37a:	460f      	mov	r7, r1
 801c37c:	4614      	mov	r4, r2
 801c37e:	18d5      	adds	r5, r2, r3
 801c380:	42ac      	cmp	r4, r5
 801c382:	d101      	bne.n	801c388 <__sfputs_r+0x12>
 801c384:	2000      	movs	r0, #0
 801c386:	e007      	b.n	801c398 <__sfputs_r+0x22>
 801c388:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c38c:	463a      	mov	r2, r7
 801c38e:	4630      	mov	r0, r6
 801c390:	f7ff ffda 	bl	801c348 <__sfputc_r>
 801c394:	1c43      	adds	r3, r0, #1
 801c396:	d1f3      	bne.n	801c380 <__sfputs_r+0xa>
 801c398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c39c <_vfiprintf_r>:
 801c39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3a0:	460d      	mov	r5, r1
 801c3a2:	b09d      	sub	sp, #116	; 0x74
 801c3a4:	4614      	mov	r4, r2
 801c3a6:	4698      	mov	r8, r3
 801c3a8:	4606      	mov	r6, r0
 801c3aa:	b118      	cbz	r0, 801c3b4 <_vfiprintf_r+0x18>
 801c3ac:	6983      	ldr	r3, [r0, #24]
 801c3ae:	b90b      	cbnz	r3, 801c3b4 <_vfiprintf_r+0x18>
 801c3b0:	f7ff fdca 	bl	801bf48 <__sinit>
 801c3b4:	4b89      	ldr	r3, [pc, #548]	; (801c5dc <_vfiprintf_r+0x240>)
 801c3b6:	429d      	cmp	r5, r3
 801c3b8:	d11b      	bne.n	801c3f2 <_vfiprintf_r+0x56>
 801c3ba:	6875      	ldr	r5, [r6, #4]
 801c3bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c3be:	07d9      	lsls	r1, r3, #31
 801c3c0:	d405      	bmi.n	801c3ce <_vfiprintf_r+0x32>
 801c3c2:	89ab      	ldrh	r3, [r5, #12]
 801c3c4:	059a      	lsls	r2, r3, #22
 801c3c6:	d402      	bmi.n	801c3ce <_vfiprintf_r+0x32>
 801c3c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c3ca:	f7ff fe6d 	bl	801c0a8 <__retarget_lock_acquire_recursive>
 801c3ce:	89ab      	ldrh	r3, [r5, #12]
 801c3d0:	071b      	lsls	r3, r3, #28
 801c3d2:	d501      	bpl.n	801c3d8 <_vfiprintf_r+0x3c>
 801c3d4:	692b      	ldr	r3, [r5, #16]
 801c3d6:	b9eb      	cbnz	r3, 801c414 <_vfiprintf_r+0x78>
 801c3d8:	4629      	mov	r1, r5
 801c3da:	4630      	mov	r0, r6
 801c3dc:	f7ff fc0e 	bl	801bbfc <__swsetup_r>
 801c3e0:	b1c0      	cbz	r0, 801c414 <_vfiprintf_r+0x78>
 801c3e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c3e4:	07dc      	lsls	r4, r3, #31
 801c3e6:	d50e      	bpl.n	801c406 <_vfiprintf_r+0x6a>
 801c3e8:	f04f 30ff 	mov.w	r0, #4294967295
 801c3ec:	b01d      	add	sp, #116	; 0x74
 801c3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3f2:	4b7b      	ldr	r3, [pc, #492]	; (801c5e0 <_vfiprintf_r+0x244>)
 801c3f4:	429d      	cmp	r5, r3
 801c3f6:	d101      	bne.n	801c3fc <_vfiprintf_r+0x60>
 801c3f8:	68b5      	ldr	r5, [r6, #8]
 801c3fa:	e7df      	b.n	801c3bc <_vfiprintf_r+0x20>
 801c3fc:	4b79      	ldr	r3, [pc, #484]	; (801c5e4 <_vfiprintf_r+0x248>)
 801c3fe:	429d      	cmp	r5, r3
 801c400:	bf08      	it	eq
 801c402:	68f5      	ldreq	r5, [r6, #12]
 801c404:	e7da      	b.n	801c3bc <_vfiprintf_r+0x20>
 801c406:	89ab      	ldrh	r3, [r5, #12]
 801c408:	0598      	lsls	r0, r3, #22
 801c40a:	d4ed      	bmi.n	801c3e8 <_vfiprintf_r+0x4c>
 801c40c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c40e:	f7ff fe4c 	bl	801c0aa <__retarget_lock_release_recursive>
 801c412:	e7e9      	b.n	801c3e8 <_vfiprintf_r+0x4c>
 801c414:	2300      	movs	r3, #0
 801c416:	9309      	str	r3, [sp, #36]	; 0x24
 801c418:	2320      	movs	r3, #32
 801c41a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c41e:	f8cd 800c 	str.w	r8, [sp, #12]
 801c422:	2330      	movs	r3, #48	; 0x30
 801c424:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c5e8 <_vfiprintf_r+0x24c>
 801c428:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c42c:	f04f 0901 	mov.w	r9, #1
 801c430:	4623      	mov	r3, r4
 801c432:	469a      	mov	sl, r3
 801c434:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c438:	b10a      	cbz	r2, 801c43e <_vfiprintf_r+0xa2>
 801c43a:	2a25      	cmp	r2, #37	; 0x25
 801c43c:	d1f9      	bne.n	801c432 <_vfiprintf_r+0x96>
 801c43e:	ebba 0b04 	subs.w	fp, sl, r4
 801c442:	d00b      	beq.n	801c45c <_vfiprintf_r+0xc0>
 801c444:	465b      	mov	r3, fp
 801c446:	4622      	mov	r2, r4
 801c448:	4629      	mov	r1, r5
 801c44a:	4630      	mov	r0, r6
 801c44c:	f7ff ff93 	bl	801c376 <__sfputs_r>
 801c450:	3001      	adds	r0, #1
 801c452:	f000 80aa 	beq.w	801c5aa <_vfiprintf_r+0x20e>
 801c456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c458:	445a      	add	r2, fp
 801c45a:	9209      	str	r2, [sp, #36]	; 0x24
 801c45c:	f89a 3000 	ldrb.w	r3, [sl]
 801c460:	2b00      	cmp	r3, #0
 801c462:	f000 80a2 	beq.w	801c5aa <_vfiprintf_r+0x20e>
 801c466:	2300      	movs	r3, #0
 801c468:	f04f 32ff 	mov.w	r2, #4294967295
 801c46c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c470:	f10a 0a01 	add.w	sl, sl, #1
 801c474:	9304      	str	r3, [sp, #16]
 801c476:	9307      	str	r3, [sp, #28]
 801c478:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c47c:	931a      	str	r3, [sp, #104]	; 0x68
 801c47e:	4654      	mov	r4, sl
 801c480:	2205      	movs	r2, #5
 801c482:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c486:	4858      	ldr	r0, [pc, #352]	; (801c5e8 <_vfiprintf_r+0x24c>)
 801c488:	f7e3 feda 	bl	8000240 <memchr>
 801c48c:	9a04      	ldr	r2, [sp, #16]
 801c48e:	b9d8      	cbnz	r0, 801c4c8 <_vfiprintf_r+0x12c>
 801c490:	06d1      	lsls	r1, r2, #27
 801c492:	bf44      	itt	mi
 801c494:	2320      	movmi	r3, #32
 801c496:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c49a:	0713      	lsls	r3, r2, #28
 801c49c:	bf44      	itt	mi
 801c49e:	232b      	movmi	r3, #43	; 0x2b
 801c4a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c4a4:	f89a 3000 	ldrb.w	r3, [sl]
 801c4a8:	2b2a      	cmp	r3, #42	; 0x2a
 801c4aa:	d015      	beq.n	801c4d8 <_vfiprintf_r+0x13c>
 801c4ac:	9a07      	ldr	r2, [sp, #28]
 801c4ae:	4654      	mov	r4, sl
 801c4b0:	2000      	movs	r0, #0
 801c4b2:	f04f 0c0a 	mov.w	ip, #10
 801c4b6:	4621      	mov	r1, r4
 801c4b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c4bc:	3b30      	subs	r3, #48	; 0x30
 801c4be:	2b09      	cmp	r3, #9
 801c4c0:	d94e      	bls.n	801c560 <_vfiprintf_r+0x1c4>
 801c4c2:	b1b0      	cbz	r0, 801c4f2 <_vfiprintf_r+0x156>
 801c4c4:	9207      	str	r2, [sp, #28]
 801c4c6:	e014      	b.n	801c4f2 <_vfiprintf_r+0x156>
 801c4c8:	eba0 0308 	sub.w	r3, r0, r8
 801c4cc:	fa09 f303 	lsl.w	r3, r9, r3
 801c4d0:	4313      	orrs	r3, r2
 801c4d2:	9304      	str	r3, [sp, #16]
 801c4d4:	46a2      	mov	sl, r4
 801c4d6:	e7d2      	b.n	801c47e <_vfiprintf_r+0xe2>
 801c4d8:	9b03      	ldr	r3, [sp, #12]
 801c4da:	1d19      	adds	r1, r3, #4
 801c4dc:	681b      	ldr	r3, [r3, #0]
 801c4de:	9103      	str	r1, [sp, #12]
 801c4e0:	2b00      	cmp	r3, #0
 801c4e2:	bfbb      	ittet	lt
 801c4e4:	425b      	neglt	r3, r3
 801c4e6:	f042 0202 	orrlt.w	r2, r2, #2
 801c4ea:	9307      	strge	r3, [sp, #28]
 801c4ec:	9307      	strlt	r3, [sp, #28]
 801c4ee:	bfb8      	it	lt
 801c4f0:	9204      	strlt	r2, [sp, #16]
 801c4f2:	7823      	ldrb	r3, [r4, #0]
 801c4f4:	2b2e      	cmp	r3, #46	; 0x2e
 801c4f6:	d10c      	bne.n	801c512 <_vfiprintf_r+0x176>
 801c4f8:	7863      	ldrb	r3, [r4, #1]
 801c4fa:	2b2a      	cmp	r3, #42	; 0x2a
 801c4fc:	d135      	bne.n	801c56a <_vfiprintf_r+0x1ce>
 801c4fe:	9b03      	ldr	r3, [sp, #12]
 801c500:	1d1a      	adds	r2, r3, #4
 801c502:	681b      	ldr	r3, [r3, #0]
 801c504:	9203      	str	r2, [sp, #12]
 801c506:	2b00      	cmp	r3, #0
 801c508:	bfb8      	it	lt
 801c50a:	f04f 33ff 	movlt.w	r3, #4294967295
 801c50e:	3402      	adds	r4, #2
 801c510:	9305      	str	r3, [sp, #20]
 801c512:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c5f8 <_vfiprintf_r+0x25c>
 801c516:	7821      	ldrb	r1, [r4, #0]
 801c518:	2203      	movs	r2, #3
 801c51a:	4650      	mov	r0, sl
 801c51c:	f7e3 fe90 	bl	8000240 <memchr>
 801c520:	b140      	cbz	r0, 801c534 <_vfiprintf_r+0x198>
 801c522:	2340      	movs	r3, #64	; 0x40
 801c524:	eba0 000a 	sub.w	r0, r0, sl
 801c528:	fa03 f000 	lsl.w	r0, r3, r0
 801c52c:	9b04      	ldr	r3, [sp, #16]
 801c52e:	4303      	orrs	r3, r0
 801c530:	3401      	adds	r4, #1
 801c532:	9304      	str	r3, [sp, #16]
 801c534:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c538:	482c      	ldr	r0, [pc, #176]	; (801c5ec <_vfiprintf_r+0x250>)
 801c53a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c53e:	2206      	movs	r2, #6
 801c540:	f7e3 fe7e 	bl	8000240 <memchr>
 801c544:	2800      	cmp	r0, #0
 801c546:	d03f      	beq.n	801c5c8 <_vfiprintf_r+0x22c>
 801c548:	4b29      	ldr	r3, [pc, #164]	; (801c5f0 <_vfiprintf_r+0x254>)
 801c54a:	bb1b      	cbnz	r3, 801c594 <_vfiprintf_r+0x1f8>
 801c54c:	9b03      	ldr	r3, [sp, #12]
 801c54e:	3307      	adds	r3, #7
 801c550:	f023 0307 	bic.w	r3, r3, #7
 801c554:	3308      	adds	r3, #8
 801c556:	9303      	str	r3, [sp, #12]
 801c558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c55a:	443b      	add	r3, r7
 801c55c:	9309      	str	r3, [sp, #36]	; 0x24
 801c55e:	e767      	b.n	801c430 <_vfiprintf_r+0x94>
 801c560:	fb0c 3202 	mla	r2, ip, r2, r3
 801c564:	460c      	mov	r4, r1
 801c566:	2001      	movs	r0, #1
 801c568:	e7a5      	b.n	801c4b6 <_vfiprintf_r+0x11a>
 801c56a:	2300      	movs	r3, #0
 801c56c:	3401      	adds	r4, #1
 801c56e:	9305      	str	r3, [sp, #20]
 801c570:	4619      	mov	r1, r3
 801c572:	f04f 0c0a 	mov.w	ip, #10
 801c576:	4620      	mov	r0, r4
 801c578:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c57c:	3a30      	subs	r2, #48	; 0x30
 801c57e:	2a09      	cmp	r2, #9
 801c580:	d903      	bls.n	801c58a <_vfiprintf_r+0x1ee>
 801c582:	2b00      	cmp	r3, #0
 801c584:	d0c5      	beq.n	801c512 <_vfiprintf_r+0x176>
 801c586:	9105      	str	r1, [sp, #20]
 801c588:	e7c3      	b.n	801c512 <_vfiprintf_r+0x176>
 801c58a:	fb0c 2101 	mla	r1, ip, r1, r2
 801c58e:	4604      	mov	r4, r0
 801c590:	2301      	movs	r3, #1
 801c592:	e7f0      	b.n	801c576 <_vfiprintf_r+0x1da>
 801c594:	ab03      	add	r3, sp, #12
 801c596:	9300      	str	r3, [sp, #0]
 801c598:	462a      	mov	r2, r5
 801c59a:	4b16      	ldr	r3, [pc, #88]	; (801c5f4 <_vfiprintf_r+0x258>)
 801c59c:	a904      	add	r1, sp, #16
 801c59e:	4630      	mov	r0, r6
 801c5a0:	f3af 8000 	nop.w
 801c5a4:	4607      	mov	r7, r0
 801c5a6:	1c78      	adds	r0, r7, #1
 801c5a8:	d1d6      	bne.n	801c558 <_vfiprintf_r+0x1bc>
 801c5aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c5ac:	07d9      	lsls	r1, r3, #31
 801c5ae:	d405      	bmi.n	801c5bc <_vfiprintf_r+0x220>
 801c5b0:	89ab      	ldrh	r3, [r5, #12]
 801c5b2:	059a      	lsls	r2, r3, #22
 801c5b4:	d402      	bmi.n	801c5bc <_vfiprintf_r+0x220>
 801c5b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c5b8:	f7ff fd77 	bl	801c0aa <__retarget_lock_release_recursive>
 801c5bc:	89ab      	ldrh	r3, [r5, #12]
 801c5be:	065b      	lsls	r3, r3, #25
 801c5c0:	f53f af12 	bmi.w	801c3e8 <_vfiprintf_r+0x4c>
 801c5c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c5c6:	e711      	b.n	801c3ec <_vfiprintf_r+0x50>
 801c5c8:	ab03      	add	r3, sp, #12
 801c5ca:	9300      	str	r3, [sp, #0]
 801c5cc:	462a      	mov	r2, r5
 801c5ce:	4b09      	ldr	r3, [pc, #36]	; (801c5f4 <_vfiprintf_r+0x258>)
 801c5d0:	a904      	add	r1, sp, #16
 801c5d2:	4630      	mov	r0, r6
 801c5d4:	f000 f880 	bl	801c6d8 <_printf_i>
 801c5d8:	e7e4      	b.n	801c5a4 <_vfiprintf_r+0x208>
 801c5da:	bf00      	nop
 801c5dc:	0802089c 	.word	0x0802089c
 801c5e0:	080208bc 	.word	0x080208bc
 801c5e4:	0802087c 	.word	0x0802087c
 801c5e8:	080208dc 	.word	0x080208dc
 801c5ec:	080208e6 	.word	0x080208e6
 801c5f0:	00000000 	.word	0x00000000
 801c5f4:	0801c377 	.word	0x0801c377
 801c5f8:	080208e2 	.word	0x080208e2

0801c5fc <_printf_common>:
 801c5fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c600:	4616      	mov	r6, r2
 801c602:	4699      	mov	r9, r3
 801c604:	688a      	ldr	r2, [r1, #8]
 801c606:	690b      	ldr	r3, [r1, #16]
 801c608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c60c:	4293      	cmp	r3, r2
 801c60e:	bfb8      	it	lt
 801c610:	4613      	movlt	r3, r2
 801c612:	6033      	str	r3, [r6, #0]
 801c614:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c618:	4607      	mov	r7, r0
 801c61a:	460c      	mov	r4, r1
 801c61c:	b10a      	cbz	r2, 801c622 <_printf_common+0x26>
 801c61e:	3301      	adds	r3, #1
 801c620:	6033      	str	r3, [r6, #0]
 801c622:	6823      	ldr	r3, [r4, #0]
 801c624:	0699      	lsls	r1, r3, #26
 801c626:	bf42      	ittt	mi
 801c628:	6833      	ldrmi	r3, [r6, #0]
 801c62a:	3302      	addmi	r3, #2
 801c62c:	6033      	strmi	r3, [r6, #0]
 801c62e:	6825      	ldr	r5, [r4, #0]
 801c630:	f015 0506 	ands.w	r5, r5, #6
 801c634:	d106      	bne.n	801c644 <_printf_common+0x48>
 801c636:	f104 0a19 	add.w	sl, r4, #25
 801c63a:	68e3      	ldr	r3, [r4, #12]
 801c63c:	6832      	ldr	r2, [r6, #0]
 801c63e:	1a9b      	subs	r3, r3, r2
 801c640:	42ab      	cmp	r3, r5
 801c642:	dc26      	bgt.n	801c692 <_printf_common+0x96>
 801c644:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c648:	1e13      	subs	r3, r2, #0
 801c64a:	6822      	ldr	r2, [r4, #0]
 801c64c:	bf18      	it	ne
 801c64e:	2301      	movne	r3, #1
 801c650:	0692      	lsls	r2, r2, #26
 801c652:	d42b      	bmi.n	801c6ac <_printf_common+0xb0>
 801c654:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c658:	4649      	mov	r1, r9
 801c65a:	4638      	mov	r0, r7
 801c65c:	47c0      	blx	r8
 801c65e:	3001      	adds	r0, #1
 801c660:	d01e      	beq.n	801c6a0 <_printf_common+0xa4>
 801c662:	6823      	ldr	r3, [r4, #0]
 801c664:	68e5      	ldr	r5, [r4, #12]
 801c666:	6832      	ldr	r2, [r6, #0]
 801c668:	f003 0306 	and.w	r3, r3, #6
 801c66c:	2b04      	cmp	r3, #4
 801c66e:	bf08      	it	eq
 801c670:	1aad      	subeq	r5, r5, r2
 801c672:	68a3      	ldr	r3, [r4, #8]
 801c674:	6922      	ldr	r2, [r4, #16]
 801c676:	bf0c      	ite	eq
 801c678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c67c:	2500      	movne	r5, #0
 801c67e:	4293      	cmp	r3, r2
 801c680:	bfc4      	itt	gt
 801c682:	1a9b      	subgt	r3, r3, r2
 801c684:	18ed      	addgt	r5, r5, r3
 801c686:	2600      	movs	r6, #0
 801c688:	341a      	adds	r4, #26
 801c68a:	42b5      	cmp	r5, r6
 801c68c:	d11a      	bne.n	801c6c4 <_printf_common+0xc8>
 801c68e:	2000      	movs	r0, #0
 801c690:	e008      	b.n	801c6a4 <_printf_common+0xa8>
 801c692:	2301      	movs	r3, #1
 801c694:	4652      	mov	r2, sl
 801c696:	4649      	mov	r1, r9
 801c698:	4638      	mov	r0, r7
 801c69a:	47c0      	blx	r8
 801c69c:	3001      	adds	r0, #1
 801c69e:	d103      	bne.n	801c6a8 <_printf_common+0xac>
 801c6a0:	f04f 30ff 	mov.w	r0, #4294967295
 801c6a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c6a8:	3501      	adds	r5, #1
 801c6aa:	e7c6      	b.n	801c63a <_printf_common+0x3e>
 801c6ac:	18e1      	adds	r1, r4, r3
 801c6ae:	1c5a      	adds	r2, r3, #1
 801c6b0:	2030      	movs	r0, #48	; 0x30
 801c6b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c6b6:	4422      	add	r2, r4
 801c6b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c6bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c6c0:	3302      	adds	r3, #2
 801c6c2:	e7c7      	b.n	801c654 <_printf_common+0x58>
 801c6c4:	2301      	movs	r3, #1
 801c6c6:	4622      	mov	r2, r4
 801c6c8:	4649      	mov	r1, r9
 801c6ca:	4638      	mov	r0, r7
 801c6cc:	47c0      	blx	r8
 801c6ce:	3001      	adds	r0, #1
 801c6d0:	d0e6      	beq.n	801c6a0 <_printf_common+0xa4>
 801c6d2:	3601      	adds	r6, #1
 801c6d4:	e7d9      	b.n	801c68a <_printf_common+0x8e>
	...

0801c6d8 <_printf_i>:
 801c6d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c6dc:	7e0f      	ldrb	r7, [r1, #24]
 801c6de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c6e0:	2f78      	cmp	r7, #120	; 0x78
 801c6e2:	4691      	mov	r9, r2
 801c6e4:	4680      	mov	r8, r0
 801c6e6:	460c      	mov	r4, r1
 801c6e8:	469a      	mov	sl, r3
 801c6ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c6ee:	d807      	bhi.n	801c700 <_printf_i+0x28>
 801c6f0:	2f62      	cmp	r7, #98	; 0x62
 801c6f2:	d80a      	bhi.n	801c70a <_printf_i+0x32>
 801c6f4:	2f00      	cmp	r7, #0
 801c6f6:	f000 80d8 	beq.w	801c8aa <_printf_i+0x1d2>
 801c6fa:	2f58      	cmp	r7, #88	; 0x58
 801c6fc:	f000 80a3 	beq.w	801c846 <_printf_i+0x16e>
 801c700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c704:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c708:	e03a      	b.n	801c780 <_printf_i+0xa8>
 801c70a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c70e:	2b15      	cmp	r3, #21
 801c710:	d8f6      	bhi.n	801c700 <_printf_i+0x28>
 801c712:	a101      	add	r1, pc, #4	; (adr r1, 801c718 <_printf_i+0x40>)
 801c714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c718:	0801c771 	.word	0x0801c771
 801c71c:	0801c785 	.word	0x0801c785
 801c720:	0801c701 	.word	0x0801c701
 801c724:	0801c701 	.word	0x0801c701
 801c728:	0801c701 	.word	0x0801c701
 801c72c:	0801c701 	.word	0x0801c701
 801c730:	0801c785 	.word	0x0801c785
 801c734:	0801c701 	.word	0x0801c701
 801c738:	0801c701 	.word	0x0801c701
 801c73c:	0801c701 	.word	0x0801c701
 801c740:	0801c701 	.word	0x0801c701
 801c744:	0801c891 	.word	0x0801c891
 801c748:	0801c7b5 	.word	0x0801c7b5
 801c74c:	0801c873 	.word	0x0801c873
 801c750:	0801c701 	.word	0x0801c701
 801c754:	0801c701 	.word	0x0801c701
 801c758:	0801c8b3 	.word	0x0801c8b3
 801c75c:	0801c701 	.word	0x0801c701
 801c760:	0801c7b5 	.word	0x0801c7b5
 801c764:	0801c701 	.word	0x0801c701
 801c768:	0801c701 	.word	0x0801c701
 801c76c:	0801c87b 	.word	0x0801c87b
 801c770:	682b      	ldr	r3, [r5, #0]
 801c772:	1d1a      	adds	r2, r3, #4
 801c774:	681b      	ldr	r3, [r3, #0]
 801c776:	602a      	str	r2, [r5, #0]
 801c778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c77c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c780:	2301      	movs	r3, #1
 801c782:	e0a3      	b.n	801c8cc <_printf_i+0x1f4>
 801c784:	6820      	ldr	r0, [r4, #0]
 801c786:	6829      	ldr	r1, [r5, #0]
 801c788:	0606      	lsls	r6, r0, #24
 801c78a:	f101 0304 	add.w	r3, r1, #4
 801c78e:	d50a      	bpl.n	801c7a6 <_printf_i+0xce>
 801c790:	680e      	ldr	r6, [r1, #0]
 801c792:	602b      	str	r3, [r5, #0]
 801c794:	2e00      	cmp	r6, #0
 801c796:	da03      	bge.n	801c7a0 <_printf_i+0xc8>
 801c798:	232d      	movs	r3, #45	; 0x2d
 801c79a:	4276      	negs	r6, r6
 801c79c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c7a0:	485e      	ldr	r0, [pc, #376]	; (801c91c <_printf_i+0x244>)
 801c7a2:	230a      	movs	r3, #10
 801c7a4:	e019      	b.n	801c7da <_printf_i+0x102>
 801c7a6:	680e      	ldr	r6, [r1, #0]
 801c7a8:	602b      	str	r3, [r5, #0]
 801c7aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 801c7ae:	bf18      	it	ne
 801c7b0:	b236      	sxthne	r6, r6
 801c7b2:	e7ef      	b.n	801c794 <_printf_i+0xbc>
 801c7b4:	682b      	ldr	r3, [r5, #0]
 801c7b6:	6820      	ldr	r0, [r4, #0]
 801c7b8:	1d19      	adds	r1, r3, #4
 801c7ba:	6029      	str	r1, [r5, #0]
 801c7bc:	0601      	lsls	r1, r0, #24
 801c7be:	d501      	bpl.n	801c7c4 <_printf_i+0xec>
 801c7c0:	681e      	ldr	r6, [r3, #0]
 801c7c2:	e002      	b.n	801c7ca <_printf_i+0xf2>
 801c7c4:	0646      	lsls	r6, r0, #25
 801c7c6:	d5fb      	bpl.n	801c7c0 <_printf_i+0xe8>
 801c7c8:	881e      	ldrh	r6, [r3, #0]
 801c7ca:	4854      	ldr	r0, [pc, #336]	; (801c91c <_printf_i+0x244>)
 801c7cc:	2f6f      	cmp	r7, #111	; 0x6f
 801c7ce:	bf0c      	ite	eq
 801c7d0:	2308      	moveq	r3, #8
 801c7d2:	230a      	movne	r3, #10
 801c7d4:	2100      	movs	r1, #0
 801c7d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c7da:	6865      	ldr	r5, [r4, #4]
 801c7dc:	60a5      	str	r5, [r4, #8]
 801c7de:	2d00      	cmp	r5, #0
 801c7e0:	bfa2      	ittt	ge
 801c7e2:	6821      	ldrge	r1, [r4, #0]
 801c7e4:	f021 0104 	bicge.w	r1, r1, #4
 801c7e8:	6021      	strge	r1, [r4, #0]
 801c7ea:	b90e      	cbnz	r6, 801c7f0 <_printf_i+0x118>
 801c7ec:	2d00      	cmp	r5, #0
 801c7ee:	d04d      	beq.n	801c88c <_printf_i+0x1b4>
 801c7f0:	4615      	mov	r5, r2
 801c7f2:	fbb6 f1f3 	udiv	r1, r6, r3
 801c7f6:	fb03 6711 	mls	r7, r3, r1, r6
 801c7fa:	5dc7      	ldrb	r7, [r0, r7]
 801c7fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c800:	4637      	mov	r7, r6
 801c802:	42bb      	cmp	r3, r7
 801c804:	460e      	mov	r6, r1
 801c806:	d9f4      	bls.n	801c7f2 <_printf_i+0x11a>
 801c808:	2b08      	cmp	r3, #8
 801c80a:	d10b      	bne.n	801c824 <_printf_i+0x14c>
 801c80c:	6823      	ldr	r3, [r4, #0]
 801c80e:	07de      	lsls	r6, r3, #31
 801c810:	d508      	bpl.n	801c824 <_printf_i+0x14c>
 801c812:	6923      	ldr	r3, [r4, #16]
 801c814:	6861      	ldr	r1, [r4, #4]
 801c816:	4299      	cmp	r1, r3
 801c818:	bfde      	ittt	le
 801c81a:	2330      	movle	r3, #48	; 0x30
 801c81c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c820:	f105 35ff 	addle.w	r5, r5, #4294967295
 801c824:	1b52      	subs	r2, r2, r5
 801c826:	6122      	str	r2, [r4, #16]
 801c828:	f8cd a000 	str.w	sl, [sp]
 801c82c:	464b      	mov	r3, r9
 801c82e:	aa03      	add	r2, sp, #12
 801c830:	4621      	mov	r1, r4
 801c832:	4640      	mov	r0, r8
 801c834:	f7ff fee2 	bl	801c5fc <_printf_common>
 801c838:	3001      	adds	r0, #1
 801c83a:	d14c      	bne.n	801c8d6 <_printf_i+0x1fe>
 801c83c:	f04f 30ff 	mov.w	r0, #4294967295
 801c840:	b004      	add	sp, #16
 801c842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c846:	4835      	ldr	r0, [pc, #212]	; (801c91c <_printf_i+0x244>)
 801c848:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801c84c:	6829      	ldr	r1, [r5, #0]
 801c84e:	6823      	ldr	r3, [r4, #0]
 801c850:	f851 6b04 	ldr.w	r6, [r1], #4
 801c854:	6029      	str	r1, [r5, #0]
 801c856:	061d      	lsls	r5, r3, #24
 801c858:	d514      	bpl.n	801c884 <_printf_i+0x1ac>
 801c85a:	07df      	lsls	r7, r3, #31
 801c85c:	bf44      	itt	mi
 801c85e:	f043 0320 	orrmi.w	r3, r3, #32
 801c862:	6023      	strmi	r3, [r4, #0]
 801c864:	b91e      	cbnz	r6, 801c86e <_printf_i+0x196>
 801c866:	6823      	ldr	r3, [r4, #0]
 801c868:	f023 0320 	bic.w	r3, r3, #32
 801c86c:	6023      	str	r3, [r4, #0]
 801c86e:	2310      	movs	r3, #16
 801c870:	e7b0      	b.n	801c7d4 <_printf_i+0xfc>
 801c872:	6823      	ldr	r3, [r4, #0]
 801c874:	f043 0320 	orr.w	r3, r3, #32
 801c878:	6023      	str	r3, [r4, #0]
 801c87a:	2378      	movs	r3, #120	; 0x78
 801c87c:	4828      	ldr	r0, [pc, #160]	; (801c920 <_printf_i+0x248>)
 801c87e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c882:	e7e3      	b.n	801c84c <_printf_i+0x174>
 801c884:	0659      	lsls	r1, r3, #25
 801c886:	bf48      	it	mi
 801c888:	b2b6      	uxthmi	r6, r6
 801c88a:	e7e6      	b.n	801c85a <_printf_i+0x182>
 801c88c:	4615      	mov	r5, r2
 801c88e:	e7bb      	b.n	801c808 <_printf_i+0x130>
 801c890:	682b      	ldr	r3, [r5, #0]
 801c892:	6826      	ldr	r6, [r4, #0]
 801c894:	6961      	ldr	r1, [r4, #20]
 801c896:	1d18      	adds	r0, r3, #4
 801c898:	6028      	str	r0, [r5, #0]
 801c89a:	0635      	lsls	r5, r6, #24
 801c89c:	681b      	ldr	r3, [r3, #0]
 801c89e:	d501      	bpl.n	801c8a4 <_printf_i+0x1cc>
 801c8a0:	6019      	str	r1, [r3, #0]
 801c8a2:	e002      	b.n	801c8aa <_printf_i+0x1d2>
 801c8a4:	0670      	lsls	r0, r6, #25
 801c8a6:	d5fb      	bpl.n	801c8a0 <_printf_i+0x1c8>
 801c8a8:	8019      	strh	r1, [r3, #0]
 801c8aa:	2300      	movs	r3, #0
 801c8ac:	6123      	str	r3, [r4, #16]
 801c8ae:	4615      	mov	r5, r2
 801c8b0:	e7ba      	b.n	801c828 <_printf_i+0x150>
 801c8b2:	682b      	ldr	r3, [r5, #0]
 801c8b4:	1d1a      	adds	r2, r3, #4
 801c8b6:	602a      	str	r2, [r5, #0]
 801c8b8:	681d      	ldr	r5, [r3, #0]
 801c8ba:	6862      	ldr	r2, [r4, #4]
 801c8bc:	2100      	movs	r1, #0
 801c8be:	4628      	mov	r0, r5
 801c8c0:	f7e3 fcbe 	bl	8000240 <memchr>
 801c8c4:	b108      	cbz	r0, 801c8ca <_printf_i+0x1f2>
 801c8c6:	1b40      	subs	r0, r0, r5
 801c8c8:	6060      	str	r0, [r4, #4]
 801c8ca:	6863      	ldr	r3, [r4, #4]
 801c8cc:	6123      	str	r3, [r4, #16]
 801c8ce:	2300      	movs	r3, #0
 801c8d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c8d4:	e7a8      	b.n	801c828 <_printf_i+0x150>
 801c8d6:	6923      	ldr	r3, [r4, #16]
 801c8d8:	462a      	mov	r2, r5
 801c8da:	4649      	mov	r1, r9
 801c8dc:	4640      	mov	r0, r8
 801c8de:	47d0      	blx	sl
 801c8e0:	3001      	adds	r0, #1
 801c8e2:	d0ab      	beq.n	801c83c <_printf_i+0x164>
 801c8e4:	6823      	ldr	r3, [r4, #0]
 801c8e6:	079b      	lsls	r3, r3, #30
 801c8e8:	d413      	bmi.n	801c912 <_printf_i+0x23a>
 801c8ea:	68e0      	ldr	r0, [r4, #12]
 801c8ec:	9b03      	ldr	r3, [sp, #12]
 801c8ee:	4298      	cmp	r0, r3
 801c8f0:	bfb8      	it	lt
 801c8f2:	4618      	movlt	r0, r3
 801c8f4:	e7a4      	b.n	801c840 <_printf_i+0x168>
 801c8f6:	2301      	movs	r3, #1
 801c8f8:	4632      	mov	r2, r6
 801c8fa:	4649      	mov	r1, r9
 801c8fc:	4640      	mov	r0, r8
 801c8fe:	47d0      	blx	sl
 801c900:	3001      	adds	r0, #1
 801c902:	d09b      	beq.n	801c83c <_printf_i+0x164>
 801c904:	3501      	adds	r5, #1
 801c906:	68e3      	ldr	r3, [r4, #12]
 801c908:	9903      	ldr	r1, [sp, #12]
 801c90a:	1a5b      	subs	r3, r3, r1
 801c90c:	42ab      	cmp	r3, r5
 801c90e:	dcf2      	bgt.n	801c8f6 <_printf_i+0x21e>
 801c910:	e7eb      	b.n	801c8ea <_printf_i+0x212>
 801c912:	2500      	movs	r5, #0
 801c914:	f104 0619 	add.w	r6, r4, #25
 801c918:	e7f5      	b.n	801c906 <_printf_i+0x22e>
 801c91a:	bf00      	nop
 801c91c:	080208ed 	.word	0x080208ed
 801c920:	080208fe 	.word	0x080208fe

0801c924 <_putc_r>:
 801c924:	b570      	push	{r4, r5, r6, lr}
 801c926:	460d      	mov	r5, r1
 801c928:	4614      	mov	r4, r2
 801c92a:	4606      	mov	r6, r0
 801c92c:	b118      	cbz	r0, 801c936 <_putc_r+0x12>
 801c92e:	6983      	ldr	r3, [r0, #24]
 801c930:	b90b      	cbnz	r3, 801c936 <_putc_r+0x12>
 801c932:	f7ff fb09 	bl	801bf48 <__sinit>
 801c936:	4b1c      	ldr	r3, [pc, #112]	; (801c9a8 <_putc_r+0x84>)
 801c938:	429c      	cmp	r4, r3
 801c93a:	d124      	bne.n	801c986 <_putc_r+0x62>
 801c93c:	6874      	ldr	r4, [r6, #4]
 801c93e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c940:	07d8      	lsls	r0, r3, #31
 801c942:	d405      	bmi.n	801c950 <_putc_r+0x2c>
 801c944:	89a3      	ldrh	r3, [r4, #12]
 801c946:	0599      	lsls	r1, r3, #22
 801c948:	d402      	bmi.n	801c950 <_putc_r+0x2c>
 801c94a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c94c:	f7ff fbac 	bl	801c0a8 <__retarget_lock_acquire_recursive>
 801c950:	68a3      	ldr	r3, [r4, #8]
 801c952:	3b01      	subs	r3, #1
 801c954:	2b00      	cmp	r3, #0
 801c956:	60a3      	str	r3, [r4, #8]
 801c958:	da05      	bge.n	801c966 <_putc_r+0x42>
 801c95a:	69a2      	ldr	r2, [r4, #24]
 801c95c:	4293      	cmp	r3, r2
 801c95e:	db1c      	blt.n	801c99a <_putc_r+0x76>
 801c960:	b2eb      	uxtb	r3, r5
 801c962:	2b0a      	cmp	r3, #10
 801c964:	d019      	beq.n	801c99a <_putc_r+0x76>
 801c966:	6823      	ldr	r3, [r4, #0]
 801c968:	1c5a      	adds	r2, r3, #1
 801c96a:	6022      	str	r2, [r4, #0]
 801c96c:	701d      	strb	r5, [r3, #0]
 801c96e:	b2ed      	uxtb	r5, r5
 801c970:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c972:	07da      	lsls	r2, r3, #31
 801c974:	d405      	bmi.n	801c982 <_putc_r+0x5e>
 801c976:	89a3      	ldrh	r3, [r4, #12]
 801c978:	059b      	lsls	r3, r3, #22
 801c97a:	d402      	bmi.n	801c982 <_putc_r+0x5e>
 801c97c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c97e:	f7ff fb94 	bl	801c0aa <__retarget_lock_release_recursive>
 801c982:	4628      	mov	r0, r5
 801c984:	bd70      	pop	{r4, r5, r6, pc}
 801c986:	4b09      	ldr	r3, [pc, #36]	; (801c9ac <_putc_r+0x88>)
 801c988:	429c      	cmp	r4, r3
 801c98a:	d101      	bne.n	801c990 <_putc_r+0x6c>
 801c98c:	68b4      	ldr	r4, [r6, #8]
 801c98e:	e7d6      	b.n	801c93e <_putc_r+0x1a>
 801c990:	4b07      	ldr	r3, [pc, #28]	; (801c9b0 <_putc_r+0x8c>)
 801c992:	429c      	cmp	r4, r3
 801c994:	bf08      	it	eq
 801c996:	68f4      	ldreq	r4, [r6, #12]
 801c998:	e7d1      	b.n	801c93e <_putc_r+0x1a>
 801c99a:	4629      	mov	r1, r5
 801c99c:	4622      	mov	r2, r4
 801c99e:	4630      	mov	r0, r6
 801c9a0:	f7ff f8da 	bl	801bb58 <__swbuf_r>
 801c9a4:	4605      	mov	r5, r0
 801c9a6:	e7e3      	b.n	801c970 <_putc_r+0x4c>
 801c9a8:	0802089c 	.word	0x0802089c
 801c9ac:	080208bc 	.word	0x080208bc
 801c9b0:	0802087c 	.word	0x0802087c

0801c9b4 <_sbrk_r>:
 801c9b4:	b538      	push	{r3, r4, r5, lr}
 801c9b6:	4d06      	ldr	r5, [pc, #24]	; (801c9d0 <_sbrk_r+0x1c>)
 801c9b8:	2300      	movs	r3, #0
 801c9ba:	4604      	mov	r4, r0
 801c9bc:	4608      	mov	r0, r1
 801c9be:	602b      	str	r3, [r5, #0]
 801c9c0:	f7e5 fc58 	bl	8002274 <_sbrk>
 801c9c4:	1c43      	adds	r3, r0, #1
 801c9c6:	d102      	bne.n	801c9ce <_sbrk_r+0x1a>
 801c9c8:	682b      	ldr	r3, [r5, #0]
 801c9ca:	b103      	cbz	r3, 801c9ce <_sbrk_r+0x1a>
 801c9cc:	6023      	str	r3, [r4, #0]
 801c9ce:	bd38      	pop	{r3, r4, r5, pc}
 801c9d0:	200111e8 	.word	0x200111e8

0801c9d4 <__sread>:
 801c9d4:	b510      	push	{r4, lr}
 801c9d6:	460c      	mov	r4, r1
 801c9d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c9dc:	f000 f8a8 	bl	801cb30 <_read_r>
 801c9e0:	2800      	cmp	r0, #0
 801c9e2:	bfab      	itete	ge
 801c9e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c9e6:	89a3      	ldrhlt	r3, [r4, #12]
 801c9e8:	181b      	addge	r3, r3, r0
 801c9ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c9ee:	bfac      	ite	ge
 801c9f0:	6563      	strge	r3, [r4, #84]	; 0x54
 801c9f2:	81a3      	strhlt	r3, [r4, #12]
 801c9f4:	bd10      	pop	{r4, pc}

0801c9f6 <__swrite>:
 801c9f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c9fa:	461f      	mov	r7, r3
 801c9fc:	898b      	ldrh	r3, [r1, #12]
 801c9fe:	05db      	lsls	r3, r3, #23
 801ca00:	4605      	mov	r5, r0
 801ca02:	460c      	mov	r4, r1
 801ca04:	4616      	mov	r6, r2
 801ca06:	d505      	bpl.n	801ca14 <__swrite+0x1e>
 801ca08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ca0c:	2302      	movs	r3, #2
 801ca0e:	2200      	movs	r2, #0
 801ca10:	f000 f870 	bl	801caf4 <_lseek_r>
 801ca14:	89a3      	ldrh	r3, [r4, #12]
 801ca16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ca1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ca1e:	81a3      	strh	r3, [r4, #12]
 801ca20:	4632      	mov	r2, r6
 801ca22:	463b      	mov	r3, r7
 801ca24:	4628      	mov	r0, r5
 801ca26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ca2a:	f000 b817 	b.w	801ca5c <_write_r>

0801ca2e <__sseek>:
 801ca2e:	b510      	push	{r4, lr}
 801ca30:	460c      	mov	r4, r1
 801ca32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ca36:	f000 f85d 	bl	801caf4 <_lseek_r>
 801ca3a:	1c43      	adds	r3, r0, #1
 801ca3c:	89a3      	ldrh	r3, [r4, #12]
 801ca3e:	bf15      	itete	ne
 801ca40:	6560      	strne	r0, [r4, #84]	; 0x54
 801ca42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ca46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ca4a:	81a3      	strheq	r3, [r4, #12]
 801ca4c:	bf18      	it	ne
 801ca4e:	81a3      	strhne	r3, [r4, #12]
 801ca50:	bd10      	pop	{r4, pc}

0801ca52 <__sclose>:
 801ca52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ca56:	f000 b81b 	b.w	801ca90 <_close_r>
	...

0801ca5c <_write_r>:
 801ca5c:	b538      	push	{r3, r4, r5, lr}
 801ca5e:	4d07      	ldr	r5, [pc, #28]	; (801ca7c <_write_r+0x20>)
 801ca60:	4604      	mov	r4, r0
 801ca62:	4608      	mov	r0, r1
 801ca64:	4611      	mov	r1, r2
 801ca66:	2200      	movs	r2, #0
 801ca68:	602a      	str	r2, [r5, #0]
 801ca6a:	461a      	mov	r2, r3
 801ca6c:	f7e5 fbb1 	bl	80021d2 <_write>
 801ca70:	1c43      	adds	r3, r0, #1
 801ca72:	d102      	bne.n	801ca7a <_write_r+0x1e>
 801ca74:	682b      	ldr	r3, [r5, #0]
 801ca76:	b103      	cbz	r3, 801ca7a <_write_r+0x1e>
 801ca78:	6023      	str	r3, [r4, #0]
 801ca7a:	bd38      	pop	{r3, r4, r5, pc}
 801ca7c:	200111e8 	.word	0x200111e8

0801ca80 <abort>:
 801ca80:	b508      	push	{r3, lr}
 801ca82:	2006      	movs	r0, #6
 801ca84:	f000 f88e 	bl	801cba4 <raise>
 801ca88:	2001      	movs	r0, #1
 801ca8a:	f7e5 fb7b 	bl	8002184 <_exit>
	...

0801ca90 <_close_r>:
 801ca90:	b538      	push	{r3, r4, r5, lr}
 801ca92:	4d06      	ldr	r5, [pc, #24]	; (801caac <_close_r+0x1c>)
 801ca94:	2300      	movs	r3, #0
 801ca96:	4604      	mov	r4, r0
 801ca98:	4608      	mov	r0, r1
 801ca9a:	602b      	str	r3, [r5, #0]
 801ca9c:	f7e5 fbb5 	bl	800220a <_close>
 801caa0:	1c43      	adds	r3, r0, #1
 801caa2:	d102      	bne.n	801caaa <_close_r+0x1a>
 801caa4:	682b      	ldr	r3, [r5, #0]
 801caa6:	b103      	cbz	r3, 801caaa <_close_r+0x1a>
 801caa8:	6023      	str	r3, [r4, #0]
 801caaa:	bd38      	pop	{r3, r4, r5, pc}
 801caac:	200111e8 	.word	0x200111e8

0801cab0 <_fstat_r>:
 801cab0:	b538      	push	{r3, r4, r5, lr}
 801cab2:	4d07      	ldr	r5, [pc, #28]	; (801cad0 <_fstat_r+0x20>)
 801cab4:	2300      	movs	r3, #0
 801cab6:	4604      	mov	r4, r0
 801cab8:	4608      	mov	r0, r1
 801caba:	4611      	mov	r1, r2
 801cabc:	602b      	str	r3, [r5, #0]
 801cabe:	f7e5 fbb0 	bl	8002222 <_fstat>
 801cac2:	1c43      	adds	r3, r0, #1
 801cac4:	d102      	bne.n	801cacc <_fstat_r+0x1c>
 801cac6:	682b      	ldr	r3, [r5, #0]
 801cac8:	b103      	cbz	r3, 801cacc <_fstat_r+0x1c>
 801caca:	6023      	str	r3, [r4, #0]
 801cacc:	bd38      	pop	{r3, r4, r5, pc}
 801cace:	bf00      	nop
 801cad0:	200111e8 	.word	0x200111e8

0801cad4 <_isatty_r>:
 801cad4:	b538      	push	{r3, r4, r5, lr}
 801cad6:	4d06      	ldr	r5, [pc, #24]	; (801caf0 <_isatty_r+0x1c>)
 801cad8:	2300      	movs	r3, #0
 801cada:	4604      	mov	r4, r0
 801cadc:	4608      	mov	r0, r1
 801cade:	602b      	str	r3, [r5, #0]
 801cae0:	f7e5 fbaf 	bl	8002242 <_isatty>
 801cae4:	1c43      	adds	r3, r0, #1
 801cae6:	d102      	bne.n	801caee <_isatty_r+0x1a>
 801cae8:	682b      	ldr	r3, [r5, #0]
 801caea:	b103      	cbz	r3, 801caee <_isatty_r+0x1a>
 801caec:	6023      	str	r3, [r4, #0]
 801caee:	bd38      	pop	{r3, r4, r5, pc}
 801caf0:	200111e8 	.word	0x200111e8

0801caf4 <_lseek_r>:
 801caf4:	b538      	push	{r3, r4, r5, lr}
 801caf6:	4d07      	ldr	r5, [pc, #28]	; (801cb14 <_lseek_r+0x20>)
 801caf8:	4604      	mov	r4, r0
 801cafa:	4608      	mov	r0, r1
 801cafc:	4611      	mov	r1, r2
 801cafe:	2200      	movs	r2, #0
 801cb00:	602a      	str	r2, [r5, #0]
 801cb02:	461a      	mov	r2, r3
 801cb04:	f7e5 fba8 	bl	8002258 <_lseek>
 801cb08:	1c43      	adds	r3, r0, #1
 801cb0a:	d102      	bne.n	801cb12 <_lseek_r+0x1e>
 801cb0c:	682b      	ldr	r3, [r5, #0]
 801cb0e:	b103      	cbz	r3, 801cb12 <_lseek_r+0x1e>
 801cb10:	6023      	str	r3, [r4, #0]
 801cb12:	bd38      	pop	{r3, r4, r5, pc}
 801cb14:	200111e8 	.word	0x200111e8

0801cb18 <__malloc_lock>:
 801cb18:	4801      	ldr	r0, [pc, #4]	; (801cb20 <__malloc_lock+0x8>)
 801cb1a:	f7ff bac5 	b.w	801c0a8 <__retarget_lock_acquire_recursive>
 801cb1e:	bf00      	nop
 801cb20:	200111f0 	.word	0x200111f0

0801cb24 <__malloc_unlock>:
 801cb24:	4801      	ldr	r0, [pc, #4]	; (801cb2c <__malloc_unlock+0x8>)
 801cb26:	f7ff bac0 	b.w	801c0aa <__retarget_lock_release_recursive>
 801cb2a:	bf00      	nop
 801cb2c:	200111f0 	.word	0x200111f0

0801cb30 <_read_r>:
 801cb30:	b538      	push	{r3, r4, r5, lr}
 801cb32:	4d07      	ldr	r5, [pc, #28]	; (801cb50 <_read_r+0x20>)
 801cb34:	4604      	mov	r4, r0
 801cb36:	4608      	mov	r0, r1
 801cb38:	4611      	mov	r1, r2
 801cb3a:	2200      	movs	r2, #0
 801cb3c:	602a      	str	r2, [r5, #0]
 801cb3e:	461a      	mov	r2, r3
 801cb40:	f7e5 fb2a 	bl	8002198 <_read>
 801cb44:	1c43      	adds	r3, r0, #1
 801cb46:	d102      	bne.n	801cb4e <_read_r+0x1e>
 801cb48:	682b      	ldr	r3, [r5, #0]
 801cb4a:	b103      	cbz	r3, 801cb4e <_read_r+0x1e>
 801cb4c:	6023      	str	r3, [r4, #0]
 801cb4e:	bd38      	pop	{r3, r4, r5, pc}
 801cb50:	200111e8 	.word	0x200111e8

0801cb54 <_raise_r>:
 801cb54:	291f      	cmp	r1, #31
 801cb56:	b538      	push	{r3, r4, r5, lr}
 801cb58:	4604      	mov	r4, r0
 801cb5a:	460d      	mov	r5, r1
 801cb5c:	d904      	bls.n	801cb68 <_raise_r+0x14>
 801cb5e:	2316      	movs	r3, #22
 801cb60:	6003      	str	r3, [r0, #0]
 801cb62:	f04f 30ff 	mov.w	r0, #4294967295
 801cb66:	bd38      	pop	{r3, r4, r5, pc}
 801cb68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801cb6a:	b112      	cbz	r2, 801cb72 <_raise_r+0x1e>
 801cb6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cb70:	b94b      	cbnz	r3, 801cb86 <_raise_r+0x32>
 801cb72:	4620      	mov	r0, r4
 801cb74:	f000 f830 	bl	801cbd8 <_getpid_r>
 801cb78:	462a      	mov	r2, r5
 801cb7a:	4601      	mov	r1, r0
 801cb7c:	4620      	mov	r0, r4
 801cb7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cb82:	f000 b817 	b.w	801cbb4 <_kill_r>
 801cb86:	2b01      	cmp	r3, #1
 801cb88:	d00a      	beq.n	801cba0 <_raise_r+0x4c>
 801cb8a:	1c59      	adds	r1, r3, #1
 801cb8c:	d103      	bne.n	801cb96 <_raise_r+0x42>
 801cb8e:	2316      	movs	r3, #22
 801cb90:	6003      	str	r3, [r0, #0]
 801cb92:	2001      	movs	r0, #1
 801cb94:	e7e7      	b.n	801cb66 <_raise_r+0x12>
 801cb96:	2400      	movs	r4, #0
 801cb98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801cb9c:	4628      	mov	r0, r5
 801cb9e:	4798      	blx	r3
 801cba0:	2000      	movs	r0, #0
 801cba2:	e7e0      	b.n	801cb66 <_raise_r+0x12>

0801cba4 <raise>:
 801cba4:	4b02      	ldr	r3, [pc, #8]	; (801cbb0 <raise+0xc>)
 801cba6:	4601      	mov	r1, r0
 801cba8:	6818      	ldr	r0, [r3, #0]
 801cbaa:	f7ff bfd3 	b.w	801cb54 <_raise_r>
 801cbae:	bf00      	nop
 801cbb0:	20000030 	.word	0x20000030

0801cbb4 <_kill_r>:
 801cbb4:	b538      	push	{r3, r4, r5, lr}
 801cbb6:	4d07      	ldr	r5, [pc, #28]	; (801cbd4 <_kill_r+0x20>)
 801cbb8:	2300      	movs	r3, #0
 801cbba:	4604      	mov	r4, r0
 801cbbc:	4608      	mov	r0, r1
 801cbbe:	4611      	mov	r1, r2
 801cbc0:	602b      	str	r3, [r5, #0]
 801cbc2:	f7e5 facd 	bl	8002160 <_kill>
 801cbc6:	1c43      	adds	r3, r0, #1
 801cbc8:	d102      	bne.n	801cbd0 <_kill_r+0x1c>
 801cbca:	682b      	ldr	r3, [r5, #0]
 801cbcc:	b103      	cbz	r3, 801cbd0 <_kill_r+0x1c>
 801cbce:	6023      	str	r3, [r4, #0]
 801cbd0:	bd38      	pop	{r3, r4, r5, pc}
 801cbd2:	bf00      	nop
 801cbd4:	200111e8 	.word	0x200111e8

0801cbd8 <_getpid_r>:
 801cbd8:	f7e5 baba 	b.w	8002150 <_getpid>

0801cbdc <_init>:
 801cbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbde:	bf00      	nop
 801cbe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cbe2:	bc08      	pop	{r3}
 801cbe4:	469e      	mov	lr, r3
 801cbe6:	4770      	bx	lr

0801cbe8 <_fini>:
 801cbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbea:	bf00      	nop
 801cbec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cbee:	bc08      	pop	{r3}
 801cbf0:	469e      	mov	lr, r3
 801cbf2:	4770      	bx	lr
