
Catch-Robo2023BYn622.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bd54  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d1c  0801bf54  0801bf54  0002bf54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fc70  0801fc70  000301d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801fc70  0801fc70  0002fc70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fc78  0801fc78  000301d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fc78  0801fc78  0002fc78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fc7c  0801fc7c  0002fc7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0801fc80  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000094  0801fd14  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000134  0801fdb4  00030134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00011020  200001d8  0801fe54  000301d8  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  200111f8  0801fe54  000311f8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   000430af  00000000  00000000  00030202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000092b2  00000000  00000000  000732b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002f08  00000000  00000000  0007c568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002d70  00000000  00000000  0007f470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003d6ae  00000000  00000000  000821e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004b2e1  00000000  00000000  000bf88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012a3ea  00000000  00000000  0010ab6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00234f59  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000cd54  00000000  00000000  00234fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d8 	.word	0x200001d8
 800021c:	00000000 	.word	0x00000000
 8000220:	0801bf3c 	.word	0x0801bf3c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001dc 	.word	0x200001dc
 800023c:	0801bf3c 	.word	0x0801bf3c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <PopSendTx8Bytes>:
	}

	return HAL_OK;
}

HAL_StatusTypeDef PopSendTx8Bytes(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;

	txHeader.RTR = CAN_RTR_DATA; // Data frame
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]
	txHeader.IDE = CAN_ID_EXT;	 // CAN Extend ID
 80005ee:	2304      	movs	r3, #4
 80005f0:	60fb      	str	r3, [r7, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	763b      	strb	r3, [r7, #24]

	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 80005f6:	e035      	b.n	8000664 <PopSendTx8Bytes+0x80>
		if (isfull == 0 && readpoint == writepoint)break;
 80005f8:	4b22      	ldr	r3, [pc, #136]	; (8000684 <PopSendTx8Bytes+0xa0>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d105      	bne.n	800060c <PopSendTx8Bytes+0x28>
 8000600:	4b21      	ldr	r3, [pc, #132]	; (8000688 <PopSendTx8Bytes+0xa4>)
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	4b21      	ldr	r3, [pc, #132]	; (800068c <PopSendTx8Bytes+0xa8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	429a      	cmp	r2, r3
 800060a:	d034      	beq.n	8000676 <PopSendTx8Bytes+0x92>

		txHeader.DLC = buffer[readpoint].DLC;
 800060c:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <PopSendTx8Bytes+0xa4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a1f      	ldr	r2, [pc, #124]	; (8000690 <PopSendTx8Bytes+0xac>)
 8000612:	011b      	lsls	r3, r3, #4
 8000614:	4413      	add	r3, r2
 8000616:	3304      	adds	r3, #4
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	617b      	str	r3, [r7, #20]
		txHeader.ExtId = buffer[readpoint].ExtId;
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <PopSendTx8Bytes+0xa4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a1b      	ldr	r2, [pc, #108]	; (8000690 <PopSendTx8Bytes+0xac>)
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	4413      	add	r3, r2
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	60bb      	str	r3, [r7, #8]

		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, buffer[readpoint].bytes, &txMailbox);
 800062a:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <PopSendTx8Bytes+0xb0>)
 800062c:	6818      	ldr	r0, [r3, #0]
 800062e:	4b16      	ldr	r3, [pc, #88]	; (8000688 <PopSendTx8Bytes+0xa4>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	011b      	lsls	r3, r3, #4
 8000634:	3308      	adds	r3, #8
 8000636:	4a16      	ldr	r2, [pc, #88]	; (8000690 <PopSendTx8Bytes+0xac>)
 8000638:	441a      	add	r2, r3
 800063a:	463b      	mov	r3, r7
 800063c:	1d39      	adds	r1, r7, #4
 800063e:	f001 fc3c 	bl	8001eba <HAL_CAN_AddTxMessage>
 8000642:	4603      	mov	r3, r0
 8000644:	77fb      	strb	r3, [r7, #31]
		if (ret != HAL_OK)return ret;
 8000646:	7ffb      	ldrb	r3, [r7, #31]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <PopSendTx8Bytes+0x6c>
 800064c:	7ffb      	ldrb	r3, [r7, #31]
 800064e:	e014      	b.n	800067a <PopSendTx8Bytes+0x96>

		readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000650:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <PopSendTx8Bytes+0xa4>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	3301      	adds	r3, #1
 8000656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800065a:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <PopSendTx8Bytes+0xa4>)
 800065c:	6013      	str	r3, [r2, #0]
		isfull = 0;
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <PopSendTx8Bytes+0xa0>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000664:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <PopSendTx8Bytes+0xb0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f001 fcf6 	bl	800205a <HAL_CAN_GetTxMailboxesFreeLevel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1c1      	bne.n	80005f8 <PopSendTx8Bytes+0x14>
 8000674:	e000      	b.n	8000678 <PopSendTx8Bytes+0x94>
		if (isfull == 0 && readpoint == writepoint)break;
 8000676:	bf00      	nop
	}

	return HAL_OK;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	3720      	adds	r7, #32
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200024d0 	.word	0x200024d0
 8000688:	200024c8 	.word	0x200024c8
 800068c:	200024cc 	.word	0x200024cc
 8000690:	200004c8 	.word	0x200004c8
 8000694:	200001f4 	.word	0x200001f4

08000698 <WhenTxMailbox0_1_2CompleteCallbackCalled>:

void WhenTxMailbox0_1_2CompleteCallbackCalled(){
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 800069c:	f7ff ffa2 	bl	80005e4 <PopSendTx8Bytes>
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <WhenTxMailbox0_1_2AbortCallbackCalled>:

void WhenTxMailbox0_1_2AbortCallbackCalled(){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 80006a8:	f7ff ff9c 	bl	80005e4 <PopSendTx8Bytes>
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <WhenCANRxFifo0MsgPending>:

void WhenCANRxFifo0MsgPending(CAN_HandleTypeDef *phcan, NUM_OF_DEVICES *num_of){ // Fifo0MsgPendingで呼び出すこと. CAN受信時に呼び出される関数
 80006b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80006b4:	b08e      	sub	sp, #56	; 0x38
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
 80006ba:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_CAN_GetRxMessage(phcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK){
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	f107 0218 	add.w	r2, r7, #24
 80006c4:	2100      	movs	r1, #0
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f001 fcfc 	bl	80020c4 <HAL_CAN_GetRxMessage>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d004      	beq.n	80006dc <WhenCANRxFifo0MsgPending+0x2c>
		// Reception Error
		printf("GetRxMessage error\n\r");
 80006d2:	486e      	ldr	r0, [pc, #440]	; (800088c <WhenCANRxFifo0MsgPending+0x1dc>)
 80006d4:	f01a fb0e 	bl	801acf4 <iprintf>
		Error_Handler();
 80006d8:	f000 fdba 	bl	8001250 <Error_Handler>
	}
	// awakeコマンドを受信した場合
	CAN_Device can_device = Extract_CAN_Device(rxHeader.ExtId);
 80006dc:	69fb      	ldr	r3, [r7, #28]
 80006de:	2200      	movs	r2, #0
 80006e0:	4698      	mov	r8, r3
 80006e2:	4691      	mov	r9, r2
 80006e4:	4640      	mov	r0, r8
 80006e6:	4649      	mov	r1, r9
 80006e8:	f000 f8e2 	bl	80008b0 <Extract_CAN_Device>
 80006ec:	4603      	mov	r3, r0
 80006ee:	461a      	mov	r2, r3
 80006f0:	733a      	strb	r2, [r7, #12]
 80006f2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80006f6:	737a      	strb	r2, [r7, #13]
 80006f8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80006fc:	73bb      	strb	r3, [r7, #14]
	uint8_t extracted_cmd = Extract_CAN_CMD(rxHeader.ExtId);
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	2200      	movs	r2, #0
 8000702:	461c      	mov	r4, r3
 8000704:	4615      	mov	r5, r2
 8000706:	4620      	mov	r0, r4
 8000708:	4629      	mov	r1, r5
 800070a:	f000 f91d 	bl	8000948 <Extract_CAN_CMD>
 800070e:	4603      	mov	r3, r0
 8000710:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(extracted_cmd == AWAKE_CMD){
 8000714:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000718:	2b00      	cmp	r3, #0
 800071a:	d139      	bne.n	8000790 <WhenCANRxFifo0MsgPending+0xe0>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 800071c:	2300      	movs	r3, #0
 800071e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000722:	e013      	b.n	800074c <WhenCANRxFifo0MsgPending+0x9c>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000724:	7b3b      	ldrb	r3, [r7, #12]
 8000726:	4618      	mov	r0, r3
 8000728:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800072c:	4958      	ldr	r1, [pc, #352]	; (8000890 <WhenCANRxFifo0MsgPending+0x1e0>)
 800072e:	4603      	mov	r3, r0
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	1a1b      	subs	r3, r3, r0
 8000734:	440b      	add	r3, r1
 8000736:	4413      	add	r3, r2
 8000738:	781a      	ldrb	r2, [r3, #0]
 800073a:	7c3b      	ldrb	r3, [r7, #16]
 800073c:	429a      	cmp	r2, r3
 800073e:	f000 80a0 	beq.w	8000882 <WhenCANRxFifo0MsgPending+0x1d2>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000742:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000746:	3301      	adds	r3, #1
 8000748:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800074c:	7b3b      	ldrb	r3, [r7, #12]
 800074e:	461a      	mov	r2, r3
 8000750:	4b50      	ldr	r3, [pc, #320]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000752:	5c9b      	ldrb	r3, [r3, r2]
 8000754:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000758:	429a      	cmp	r2, r3
 800075a:	d3e3      	bcc.n	8000724 <WhenCANRxFifo0MsgPending+0x74>
		}
		node_id_list[can_device.node_type][num_detected[can_device.node_type]] = rxData[0];
 800075c:	7b3b      	ldrb	r3, [r7, #12]
 800075e:	4619      	mov	r1, r3
 8000760:	7b3b      	ldrb	r3, [r7, #12]
 8000762:	461a      	mov	r2, r3
 8000764:	4b4b      	ldr	r3, [pc, #300]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000766:	5c9b      	ldrb	r3, [r3, r2]
 8000768:	461c      	mov	r4, r3
 800076a:	7c38      	ldrb	r0, [r7, #16]
 800076c:	4a48      	ldr	r2, [pc, #288]	; (8000890 <WhenCANRxFifo0MsgPending+0x1e0>)
 800076e:	460b      	mov	r3, r1
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	1a5b      	subs	r3, r3, r1
 8000774:	4413      	add	r3, r2
 8000776:	4423      	add	r3, r4
 8000778:	4602      	mov	r2, r0
 800077a:	701a      	strb	r2, [r3, #0]
		num_detected[can_device.node_type] += 1;
 800077c:	7b3b      	ldrb	r3, [r7, #12]
 800077e:	461a      	mov	r2, r3
 8000780:	4b44      	ldr	r3, [pc, #272]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000782:	5c9b      	ldrb	r3, [r3, r2]
 8000784:	7b3a      	ldrb	r2, [r7, #12]
 8000786:	3301      	adds	r3, #1
 8000788:	b2d9      	uxtb	r1, r3
 800078a:	4b42      	ldr	r3, [pc, #264]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 800078c:	5499      	strb	r1, [r3, r2]
 800078e:	e04a      	b.n	8000826 <WhenCANRxFifo0MsgPending+0x176>
	}else if(extracted_cmd == FB_CMD){
 8000790:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000794:	2b01      	cmp	r3, #1
 8000796:	d146      	bne.n	8000826 <WhenCANRxFifo0MsgPending+0x176>
		if (can_device.node_type == NODE_MCMD1){
 8000798:	7b3b      	ldrb	r3, [r7, #12]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d10d      	bne.n	80007ba <WhenCANRxFifo0MsgPending+0x10a>
			memcpy(&(_feedback_table_mcmd1[can_device.node_id].feedback_motor[can_device.device_num]),
 800079e:	7b7b      	ldrb	r3, [r7, #13]
 80007a0:	7bba      	ldrb	r2, [r7, #14]
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	4413      	add	r3, r2
 80007a6:	00db      	lsls	r3, r3, #3
 80007a8:	4a3b      	ldr	r2, [pc, #236]	; (8000898 <WhenCANRxFifo0MsgPending+0x1e8>)
 80007aa:	4413      	add	r3, r2
 80007ac:	461a      	mov	r2, r3
 80007ae:	f107 0310 	add.w	r3, r7, #16
 80007b2:	cb03      	ldmia	r3!, {r0, r1}
 80007b4:	6010      	str	r0, [r2, #0]
 80007b6:	6051      	str	r1, [r2, #4]
 80007b8:	e035      	b.n	8000826 <WhenCANRxFifo0MsgPending+0x176>
                   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD2){
 80007ba:	7b3b      	ldrb	r3, [r7, #12]
 80007bc:	2b02      	cmp	r3, #2
 80007be:	d10d      	bne.n	80007dc <WhenCANRxFifo0MsgPending+0x12c>
			memcpy(&(_feedback_table_mcmd2[can_device.node_id].feedback_motor[can_device.device_num]),
 80007c0:	7b7b      	ldrb	r3, [r7, #13]
 80007c2:	7bba      	ldrb	r2, [r7, #14]
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	4413      	add	r3, r2
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	4a34      	ldr	r2, [pc, #208]	; (800089c <WhenCANRxFifo0MsgPending+0x1ec>)
 80007cc:	4413      	add	r3, r2
 80007ce:	461a      	mov	r2, r3
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	cb03      	ldmia	r3!, {r0, r1}
 80007d6:	6010      	str	r0, [r2, #0]
 80007d8:	6051      	str	r1, [r2, #4]
 80007da:	e024      	b.n	8000826 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD3){
 80007dc:	7b3b      	ldrb	r3, [r7, #12]
 80007de:	2b03      	cmp	r3, #3
 80007e0:	d10d      	bne.n	80007fe <WhenCANRxFifo0MsgPending+0x14e>
			memcpy(&(_feedback_table_mcmd3[can_device.node_id].feedback_motor[can_device.device_num]),
 80007e2:	7b7b      	ldrb	r3, [r7, #13]
 80007e4:	7bba      	ldrb	r2, [r7, #14]
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	4413      	add	r3, r2
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	4a2c      	ldr	r2, [pc, #176]	; (80008a0 <WhenCANRxFifo0MsgPending+0x1f0>)
 80007ee:	4413      	add	r3, r2
 80007f0:	461a      	mov	r2, r3
 80007f2:	f107 0310 	add.w	r3, r7, #16
 80007f6:	cb03      	ldmia	r3!, {r0, r1}
 80007f8:	6010      	str	r0, [r2, #0]
 80007fa:	6051      	str	r1, [r2, #4]
 80007fc:	e013      	b.n	8000826 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD4){
 80007fe:	7b3b      	ldrb	r3, [r7, #12]
 8000800:	2b06      	cmp	r3, #6
 8000802:	d10d      	bne.n	8000820 <WhenCANRxFifo0MsgPending+0x170>
			memcpy(&(_feedback_table_mcmd4[can_device.node_id].feedback_motor[can_device.device_num]),
 8000804:	7b7b      	ldrb	r3, [r7, #13]
 8000806:	7bba      	ldrb	r2, [r7, #14]
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	4413      	add	r3, r2
 800080c:	00db      	lsls	r3, r3, #3
 800080e:	4a25      	ldr	r2, [pc, #148]	; (80008a4 <WhenCANRxFifo0MsgPending+0x1f4>)
 8000810:	4413      	add	r3, r2
 8000812:	461a      	mov	r2, r3
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	cb03      	ldmia	r3!, {r0, r1}
 800081a:	6010      	str	r0, [r2, #0]
 800081c:	6051      	str	r1, [r2, #4]
 800081e:	e002      	b.n	8000826 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else{
			printf("Error\n\r");
 8000820:	4821      	ldr	r0, [pc, #132]	; (80008a8 <WhenCANRxFifo0MsgPending+0x1f8>)
 8000822:	f01a fa67 	bl	801acf4 <iprintf>
		}
	}else{

    }
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000826:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000828:	785a      	ldrb	r2, [r3, #1]
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	429a      	cmp	r2, r3
 8000830:	d128      	bne.n	8000884 <WhenCANRxFifo0MsgPending+0x1d4>
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000834:	789a      	ldrb	r2, [r3, #2]
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	785b      	ldrb	r3, [r3, #1]
 800083a:	429a      	cmp	r2, r3
 800083c:	d122      	bne.n	8000884 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000840:	78da      	ldrb	r2, [r3, #3]
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	789b      	ldrb	r3, [r3, #2]
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000846:	429a      	cmp	r2, r3
 8000848:	d11c      	bne.n	8000884 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 800084c:	791a      	ldrb	r2, [r3, #4]
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	78db      	ldrb	r3, [r3, #3]
 8000852:	429a      	cmp	r2, r3
 8000854:	d116      	bne.n	8000884 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000858:	795a      	ldrb	r2, [r3, #5]
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	791b      	ldrb	r3, [r3, #4]
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 800085e:	429a      	cmp	r2, r3
 8000860:	d110      	bne.n	8000884 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000864:	799a      	ldrb	r2, [r3, #6]
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	795b      	ldrb	r3, [r3, #5]
 800086a:	429a      	cmp	r2, r3
 800086c:	d10a      	bne.n	8000884 <WhenCANRxFifo0MsgPending+0x1d4>
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000870:	7a1a      	ldrb	r2, [r3, #8]
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	799b      	ldrb	r3, [r3, #6]
 8000876:	429a      	cmp	r2, r3
 8000878:	d104      	bne.n	8000884 <WhenCANRxFifo0MsgPending+0x1d4>
		all_node_detected = 1;
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <WhenCANRxFifo0MsgPending+0x1fc>)
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
 8000880:	e000      	b.n	8000884 <WhenCANRxFifo0MsgPending+0x1d4>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000882:	bf00      	nop
	}
}
 8000884:	3738      	adds	r7, #56	; 0x38
 8000886:	46bd      	mov	sp, r7
 8000888:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800088c:	0801bf54 	.word	0x0801bf54
 8000890:	20000208 	.word	0x20000208
 8000894:	200001fc 	.word	0x200001fc
 8000898:	20000248 	.word	0x20000248
 800089c:	200002e8 	.word	0x200002e8
 80008a0:	20000388 	.word	0x20000388
 80008a4:	20000428 	.word	0x20000428
 80008a8:	0801bf6c 	.word	0x0801bf6c
 80008ac:	200001f8 	.word	0x200001f8

080008b0 <Extract_CAN_Device>:
uint64_t Make_CAN_ID(Node_Type node_type, uint8_t node_id, uint8_t device_num, uint8_t cmd){
    return ( (((uint8_t)node_type & 0b111) << 11) | (((node_id)&0b111) << 8) | ((device_num&0b111) << 5)
             | (cmd&0b11111) );
}

CAN_Device Extract_CAN_Device(uint64_t can_id) {  // CAN_IDからCAN_Deviceを抽出する
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	e9c7 0100 	strd	r0, r1, [r7]
    CAN_Device ans;
    ans.device_num = ((can_id>>5) & 0b111);
 80008ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80008be:	f04f 0200 	mov.w	r2, #0
 80008c2:	f04f 0300 	mov.w	r3, #0
 80008c6:	0942      	lsrs	r2, r0, #5
 80008c8:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 80008cc:	094b      	lsrs	r3, r1, #5
 80008ce:	b2d3      	uxtb	r3, r2
 80008d0:	f003 0307 	and.w	r3, r3, #7
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	72bb      	strb	r3, [r7, #10]
    ans.node_id = ((can_id>>8) & 0b111);
 80008d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80008dc:	f04f 0200 	mov.w	r2, #0
 80008e0:	f04f 0300 	mov.w	r3, #0
 80008e4:	0a02      	lsrs	r2, r0, #8
 80008e6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80008ea:	0a0b      	lsrs	r3, r1, #8
 80008ec:	b2d3      	uxtb	r3, r2
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	727b      	strb	r3, [r7, #9]
    ans.node_type = (Node_Type)( (can_id>>11) & 0b111);
 80008f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80008fa:	f04f 0200 	mov.w	r2, #0
 80008fe:	f04f 0300 	mov.w	r3, #0
 8000902:	0ac2      	lsrs	r2, r0, #11
 8000904:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8000908:	0acb      	lsrs	r3, r1, #11
 800090a:	b2d3      	uxtb	r3, r2
 800090c:	f003 0307 	and.w	r3, r3, #7
 8000910:	b2db      	uxtb	r3, r3
 8000912:	723b      	strb	r3, [r7, #8]
    return ans;
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	f107 0208 	add.w	r2, r7, #8
 800091c:	6812      	ldr	r2, [r2, #0]
 800091e:	4611      	mov	r1, r2
 8000920:	8019      	strh	r1, [r3, #0]
 8000922:	3302      	adds	r3, #2
 8000924:	0c12      	lsrs	r2, r2, #16
 8000926:	701a      	strb	r2, [r3, #0]
 8000928:	2300      	movs	r3, #0
 800092a:	7b3a      	ldrb	r2, [r7, #12]
 800092c:	f362 0307 	bfi	r3, r2, #0, #8
 8000930:	7b7a      	ldrb	r2, [r7, #13]
 8000932:	f362 230f 	bfi	r3, r2, #8, #8
 8000936:	7bba      	ldrb	r2, [r7, #14]
 8000938:	f362 4317 	bfi	r3, r2, #16, #8
}
 800093c:	4618      	mov	r0, r3
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <Extract_CAN_CMD>:

uint8_t Extract_CAN_CMD(uint64_t can_id){ return ( can_id & 0b11111); }  // cmdを抽出
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	e9c7 0100 	strd	r0, r1, [r7]
 8000952:	783b      	ldrb	r3, [r7, #0]
 8000954:	f003 031f 	and.w	r3, r3, #31
 8000958:	b2db      	uxtb	r3, r3
 800095a:	4618      	mov	r0, r3
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
	...

08000968 <printControllerValue>:
//refer this global variable to obtain controller data
//do NOT overwrite this variable
static struct controller_data controller_raw = { };
struct timeval tv;

void printControllerValue(struct controller_data *d){
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af02      	add	r7, sp, #8
 800096e:	6078      	str	r0, [r7, #4]
    printf("(lx, ly, rx, ry) : (%d, %d, %d, %d)\r\n", (int)(d->l_x * 256), (int)(d->l_y * 256), (int)(d->r_x * 256), (int)(d->r_y * 256));
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	edd3 7a01 	vldr	s15, [r3, #4]
 8000976:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000a18 <printControllerValue+0xb0>
 800097a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800097e:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	edd3 7a02 	vldr	s15, [r3, #8]
 8000988:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000a18 <printControllerValue+0xb0>
 800098c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000990:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	edd3 7a03 	vldr	s15, [r3, #12]
 800099a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000a18 <printControllerValue+0xb0>
 800099e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009a2:	eefd 5ae7 	vcvt.s32.f32	s11, s15
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80009ac:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000a18 <printControllerValue+0xb0>
 80009b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009b8:	ee17 3a90 	vmov	r3, s15
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	ee15 3a90 	vmov	r3, s11
 80009c2:	ee16 2a10 	vmov	r2, s12
 80009c6:	ee16 1a90 	vmov	r1, s13
 80009ca:	4814      	ldr	r0, [pc, #80]	; (8000a1c <printControllerValue+0xb4>)
 80009cc:	f01a f992 	bl	801acf4 <iprintf>
    printf("button: ");
 80009d0:	4813      	ldr	r0, [pc, #76]	; (8000a20 <printControllerValue+0xb8>)
 80009d2:	f01a f98f 	bl	801acf4 <iprintf>
    for(int i=0; i<16; i++){
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	e013      	b.n	8000a04 <printControllerValue+0x9c>
        if((d->button >> i) & 1) printf("1");
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	461a      	mov	r2, r3
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	fa42 f303 	asr.w	r3, r2, r3
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d003      	beq.n	80009f8 <printControllerValue+0x90>
 80009f0:	2031      	movs	r0, #49	; 0x31
 80009f2:	f01a f997 	bl	801ad24 <putchar>
 80009f6:	e002      	b.n	80009fe <printControllerValue+0x96>
        else printf("0");
 80009f8:	2030      	movs	r0, #48	; 0x30
 80009fa:	f01a f993 	bl	801ad24 <putchar>
    for(int i=0; i<16; i++){
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	3301      	adds	r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	2b0f      	cmp	r3, #15
 8000a08:	dde8      	ble.n	80009dc <printControllerValue+0x74>
    }
    printf("\n\r");
 8000a0a:	4806      	ldr	r0, [pc, #24]	; (8000a24 <printControllerValue+0xbc>)
 8000a0c:	f01a f972 	bl	801acf4 <iprintf>

}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	43800000 	.word	0x43800000
 8000a1c:	0801c04c 	.word	0x0801c04c
 8000a20:	0801c074 	.word	0x0801c074
 8000a24:	0801c080 	.word	0x0801c080

08000a28 <UDPControllerReceive>:

void UDPControllerReceive(void const *argument) {
 8000a28:	b5b0      	push	{r4, r5, r7, lr}
 8000a2a:	b0dc      	sub	sp, #368	; 0x170
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000a32:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8000a36:	6018      	str	r0, [r3, #0]

    printf("This is UdpControllerReceive\r\n"); //これがないとなぜか動かない
 8000a38:	4898      	ldr	r0, [pc, #608]	; (8000c9c <UDPControllerReceive+0x274>)
 8000a3a:	f01a f9f7 	bl	801ae2c <puts>

    int sock;
    char buffer[256];
    struct sockaddr_in server_addr, client_addr;

    sock = lwip_socket(AF_INET, SOCK_DGRAM, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2102      	movs	r1, #2
 8000a42:	2002      	movs	r0, #2
 8000a44:	f00e f926 	bl	800ec94 <lwip_socket>
 8000a48:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
    memset((char*) &server_addr, 0, sizeof(server_addr));
 8000a4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a50:	2210      	movs	r2, #16
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f01a f945 	bl	801ace4 <memset>

    server_addr.sin_family = AF_INET;
 8000a5a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000a5e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000a62:	2202      	movs	r2, #2
 8000a64:	705a      	strb	r2, [r3, #1]
    server_addr.sin_len = sizeof(server_addr);
 8000a66:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000a6a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000a6e:	2210      	movs	r2, #16
 8000a70:	701a      	strb	r2, [r3, #0]
   server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
 8000a72:	2000      	movs	r0, #0
 8000a74:	f00f f999 	bl	800fdaa <lwip_htonl>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000a7e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000a82:	605a      	str	r2, [r3, #4]
//	server_addr.sin_addr.s_addr = inet_addr(CLIENT_IP);
    server_addr.sin_port = htons(CLIENT_PORT);
 8000a84:	f641 6061 	movw	r0, #7777	; 0x1e61
 8000a88:	f00f f97a 	bl	800fd80 <lwip_htons>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	461a      	mov	r2, r3
 8000a90:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000a94:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000a98:	805a      	strh	r2, [r3, #2]

    if (fcntl(sock, F_SETFL, fcntl(sock, F_GETFL,0) | O_NONBLOCK) < 0) {
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2103      	movs	r1, #3
 8000a9e:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 8000aa2:	f00e ff0b 	bl	800f8bc <lwip_fcntl>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	461a      	mov	r2, r3
 8000aae:	2104      	movs	r1, #4
 8000ab0:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 8000ab4:	f00e ff02 	bl	800f8bc <lwip_fcntl>
        // handle error
    }

    FD_ZERO(&rset);
 8000ab8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000abc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8000ac6:	e00b      	b.n	8000ae0 <UDPControllerReceive+0xb8>
 8000ac8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000acc:	3b01      	subs	r3, #1
 8000ace:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8000ad2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000ad6:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8000ada:	2100      	movs	r1, #0
 8000adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000ae0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d1ef      	bne.n	8000ac8 <UDPControllerReceive+0xa0>

    int err = lwip_bind(sock, (struct sockaddr*) &server_addr, sizeof(server_addr));
 8000ae8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aec:	2210      	movs	r2, #16
 8000aee:	4619      	mov	r1, r3
 8000af0:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 8000af4:	f00d fd4a 	bl	800e58c <lwip_bind>
 8000af8:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
    if (err != 0) {
 8000afc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <UDPControllerReceive+0xe4>
        printf("UDPController:ERROR \r\n");
 8000b04:	4866      	ldr	r0, [pc, #408]	; (8000ca0 <UDPControllerReceive+0x278>)
 8000b06:	f01a f991 	bl	801ae2c <puts>
 8000b0a:	e002      	b.n	8000b12 <UDPControllerReceive+0xea>
    } else {
        printf("UDPController:Socket Opened!\r\n");
 8000b0c:	4865      	ldr	r0, [pc, #404]	; (8000ca4 <UDPControllerReceive+0x27c>)
 8000b0e:	f01a f98d 	bl	801ae2c <puts>
    }
    int timeout = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    struct controller_data controller_null;
    bzero(&controller_null, sizeof(struct controller_data));
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	2300      	movs	r3, #0
 8000b20:	6013      	str	r3, [r2, #0]
 8000b22:	6053      	str	r3, [r2, #4]
 8000b24:	6093      	str	r3, [r2, #8]
 8000b26:	60d3      	str	r3, [r2, #12]
 8000b28:	6113      	str	r3, [r2, #16]
    controller_null.l_x = 0.0f;
 8000b2a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000b2e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8000b32:	f04f 0200 	mov.w	r2, #0
 8000b36:	605a      	str	r2, [r3, #4]
    controller_null.l_y = 0.0f;
 8000b38:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000b3c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8000b40:	f04f 0200 	mov.w	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
    controller_null.r_x = 0.0f;
 8000b46:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000b4a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8000b4e:	f04f 0200 	mov.w	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
    controller_null.r_y = 0.0f;
 8000b54:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000b58:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8000b5c:	f04f 0200 	mov.w	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
    //FD_SET(sock, &rset);

    int maxfdp1 = sock + 1;
 8000b62:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000b66:	3301      	adds	r3, #1
 8000b68:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

    while (1) {
        FD_SET(sock, &rset);
 8000b6c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	da00      	bge.n	8000b76 <UDPControllerReceive+0x14e>
 8000b74:	331f      	adds	r3, #31
 8000b76:	115b      	asrs	r3, r3, #5
 8000b78:	461a      	mov	r2, r3
 8000b7a:	0093      	lsls	r3, r2, #2
 8000b7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000b80:	443b      	add	r3, r7
 8000b82:	f853 1c28 	ldr.w	r1, [r3, #-40]
 8000b86:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000b8a:	4258      	negs	r0, r3
 8000b8c:	f003 031f 	and.w	r3, r3, #31
 8000b90:	f000 001f 	and.w	r0, r0, #31
 8000b94:	bf58      	it	pl
 8000b96:	4243      	negpl	r3, r0
 8000b98:	2001      	movs	r0, #1
 8000b9a:	fa00 f303 	lsl.w	r3, r0, r3
 8000b9e:	4319      	orrs	r1, r3
 8000ba0:	0093      	lsls	r3, r2, #2
 8000ba2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000ba6:	443b      	add	r3, r7
 8000ba8:	f843 1c28 	str.w	r1, [r3, #-40]
        tv.tv_usec = 1000;
 8000bac:	4b3e      	ldr	r3, [pc, #248]	; (8000ca8 <UDPControllerReceive+0x280>)
 8000bae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bb2:	609a      	str	r2, [r3, #8]
        select(maxfdp1, &rset, NULL, NULL, &tv);
 8000bb4:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8000bb8:	4b3b      	ldr	r3, [pc, #236]	; (8000ca8 <UDPControllerReceive+0x280>)
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000bc4:	f00e facc 	bl	800f160 <lwip_select>
        if (timeout < 100) {
 8000bc8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000bcc:	2b63      	cmp	r3, #99	; 0x63
 8000bce:	dc05      	bgt.n	8000bdc <UDPControllerReceive+0x1b4>
            timeout++;
 8000bd0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8000bda:	e00a      	b.n	8000bf2 <UDPControllerReceive+0x1ca>
        } else {
            memcpy(&controller_raw, &controller_null,
 8000bdc:	4a33      	ldr	r2, [pc, #204]	; (8000cac <UDPControllerReceive+0x284>)
 8000bde:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000be2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8000be6:	4614      	mov	r4, r2
 8000be8:	461d      	mov	r5, r3
 8000bea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bee:	682b      	ldr	r3, [r5, #0]
 8000bf0:	6023      	str	r3, [r4, #0]
                   sizeof(struct controller_data));
        }

        if (FD_ISSET(sock, &rset)) {
 8000bf2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	da00      	bge.n	8000bfc <UDPControllerReceive+0x1d4>
 8000bfa:	331f      	adds	r3, #31
 8000bfc:	115b      	asrs	r3, r3, #5
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000c04:	443b      	add	r3, r7
 8000c06:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8000c0a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000c0e:	4259      	negs	r1, r3
 8000c10:	f003 031f 	and.w	r3, r3, #31
 8000c14:	f001 011f 	and.w	r1, r1, #31
 8000c18:	bf58      	it	pl
 8000c1a:	424b      	negpl	r3, r1
 8000c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d034      	beq.n	8000c92 <UDPControllerReceive+0x26a>
            socklen_t n;
            socklen_t len = sizeof(client_addr);
 8000c28:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000c2c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8000c30:	2210      	movs	r2, #16
 8000c32:	601a      	str	r2, [r3, #0]
            n = lwip_recvfrom(sock, (char*) buffer, 256, (int) NULL,
 8000c34:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000c38:	f107 0308 	add.w	r3, r7, #8
 8000c3c:	9301      	str	r3, [sp, #4]
 8000c3e:	f107 0320 	add.w	r3, r7, #32
 8000c42:	9300      	str	r3, [sp, #0]
 8000c44:	2300      	movs	r3, #0
 8000c46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c4a:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 8000c4e:	f00d ff8f 	bl	800eb70 <lwip_recvfrom>
 8000c52:	4603      	mov	r3, r0
 8000c54:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
                              (struct sockaddr*) &client_addr, &len);
            if (n > 0) {
 8000c58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d018      	beq.n	8000c92 <UDPControllerReceive+0x26a>
                timeout = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
                if (n < sizeof(struct controller_data)) {
 8000c66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000c6a:	2b13      	cmp	r3, #19
 8000c6c:	d803      	bhi.n	8000c76 <UDPControllerReceive+0x24e>
                    printf("invalid data : \r\n");
 8000c6e:	4810      	ldr	r0, [pc, #64]	; (8000cb0 <UDPControllerReceive+0x288>)
 8000c70:	f01a f8dc 	bl	801ae2c <puts>
 8000c74:	e77a      	b.n	8000b6c <UDPControllerReceive+0x144>
                    continue;
                }

                struct controller_data *d = (struct controller_data*) &buffer;
 8000c76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c7a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
                printControllerValue(d);
 8000c7e:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8000c82:	f7ff fe71 	bl	8000968 <printControllerValue>
                memcpy(&controller_raw, d, sizeof(struct controller_data));
 8000c86:	2214      	movs	r2, #20
 8000c88:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8000c8c:	4807      	ldr	r0, [pc, #28]	; (8000cac <UDPControllerReceive+0x284>)
 8000c8e:	f01a f81b 	bl	801acc8 <memcpy>
            }
        }
        osDelay(100);
 8000c92:	2064      	movs	r0, #100	; 0x64
 8000c94:	f007 fe6e 	bl	8008974 <osDelay>
        FD_SET(sock, &rset);
 8000c98:	e768      	b.n	8000b6c <UDPControllerReceive+0x144>
 8000c9a:	bf00      	nop
 8000c9c:	0801c084 	.word	0x0801c084
 8000ca0:	0801c0a4 	.word	0x0801c0a4
 8000ca4:	0801c0bc 	.word	0x0801c0bc
 8000ca8:	200024e8 	.word	0x200024e8
 8000cac:	200024d4 	.word	0x200024d4
 8000cb0:	0801c0dc 	.word	0x0801c0dc

08000cb4 <UDPController_GetControllerButtons>:
    }

}


uint16_t UDPController_GetControllerButtons() {
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
    return controller_raw.button;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <UDPController_GetControllerButtons+0x14>)
 8000cba:	881b      	ldrh	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	200024d4 	.word	0x200024d4

08000ccc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(uint8_t ch)
#else
#define PUTCHAR_PROTYPE int fputc(int ch,FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, &ch, 1, 500);
 8000cd6:	1df9      	adds	r1, r7, #7
 8000cd8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cdc:	2201      	movs	r2, #1
 8000cde:	4804      	ldr	r0, [pc, #16]	; (8000cf0 <__io_putchar+0x24>)
 8000ce0:	f005 fb86 	bl	80063f0 <HAL_UART_Transmit>
    return ch;
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20002520 	.word	0x20002520

08000cf4 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8000cfc:	f7ff fccc 	bl	8000698 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8000d10:	f7ff fcc8 	bl	80006a4 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8000d24:	f7ff fcb8 	bl	8000698 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8000d38:	f7ff fcb4 	bl	80006a4 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8000d4c:	f7ff fca4 	bl	8000698 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8000d60:	f7ff fca0 	bl	80006a4 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
    WhenCANRxFifo0MsgPending(hcan, &num_of_devices);
 8000d74:	4903      	ldr	r1, [pc, #12]	; (8000d84 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff fc9a 	bl	80006b0 <WhenCANRxFifo0MsgPending>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20004430 	.word	0x20004430

08000d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8c:	f000 ff48 	bl	8001c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d90:	f000 f83a 	bl	8000e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d94:	f000 f95c 	bl	8001050 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d98:	f000 f93c 	bl	8001014 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000d9c:	f000 f8dc 	bl	8000f58 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000da0:	f000 f90a 	bl	8000fb8 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 8000da4:	f000 f8a2 	bl	8000eec <MX_CAN1_Init>
  //airSetting();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000da8:	f007 fcac 	bl	8008704 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000dac:	4a0d      	ldr	r2, [pc, #52]	; (8000de4 <main+0x5c>)
 8000dae:	2100      	movs	r1, #0
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <main+0x60>)
 8000db2:	f007 fd39 	bl	8008828 <osThreadNew>
 8000db6:	4603      	mov	r3, r0
 8000db8:	4a0c      	ldr	r2, [pc, #48]	; (8000dec <main+0x64>)
 8000dba:	6013      	str	r3, [r2, #0]

  /* creation of systemCheckTask */
  systemCheckTaskHandle = osThreadNew(StartSystemCheckTask, NULL, &systemCheckTask_attributes);
 8000dbc:	4a0c      	ldr	r2, [pc, #48]	; (8000df0 <main+0x68>)
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	480c      	ldr	r0, [pc, #48]	; (8000df4 <main+0x6c>)
 8000dc2:	f007 fd31 	bl	8008828 <osThreadNew>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <main+0x70>)
 8000dca:	6013      	str	r3, [r2, #0]

  /* creation of ControllerTask */
  ControllerTaskHandle = osThreadNew(StartControllerTask, NULL, &ControllerTask_attributes);
 8000dcc:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <main+0x74>)
 8000dce:	2100      	movs	r1, #0
 8000dd0:	480b      	ldr	r0, [pc, #44]	; (8000e00 <main+0x78>)
 8000dd2:	f007 fd29 	bl	8008828 <osThreadNew>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <main+0x7c>)
 8000dda:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ddc:	f007 fcc6 	bl	800876c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <main+0x58>
 8000de2:	bf00      	nop
 8000de4:	0801f924 	.word	0x0801f924
 8000de8:	08001195 	.word	0x08001195
 8000dec:	20002b10 	.word	0x20002b10
 8000df0:	0801f948 	.word	0x0801f948
 8000df4:	08001201 	.word	0x08001201
 8000df8:	20003370 	.word	0x20003370
 8000dfc:	0801f96c 	.word	0x0801f96c
 8000e00:	08001217 	.word	0x08001217
 8000e04:	20003bd0 	.word	0x20003bd0

08000e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b094      	sub	sp, #80	; 0x50
 8000e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	2234      	movs	r2, #52	; 0x34
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f019 ff64 	bl	801ace4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e1c:	f107 0308 	add.w	r3, r7, #8
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e2c:	f003 fe24 	bl	8004a78 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e30:	4b2c      	ldr	r3, [pc, #176]	; (8000ee4 <SystemClock_Config+0xdc>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	4a2b      	ldr	r2, [pc, #172]	; (8000ee4 <SystemClock_Config+0xdc>)
 8000e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3c:	4b29      	ldr	r3, [pc, #164]	; (8000ee4 <SystemClock_Config+0xdc>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e48:	4b27      	ldr	r3, [pc, #156]	; (8000ee8 <SystemClock_Config+0xe0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e50:	4a25      	ldr	r2, [pc, #148]	; (8000ee8 <SystemClock_Config+0xe0>)
 8000e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <SystemClock_Config+0xe0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e60:	603b      	str	r3, [r7, #0]
 8000e62:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e64:	2301      	movs	r3, #1
 8000e66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e68:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e6c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e78:	2304      	movs	r3, #4
 8000e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000e7c:	2360      	movs	r3, #96	; 0x60
 8000e7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e80:	2302      	movs	r3, #2
 8000e82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e84:	2304      	movs	r3, #4
 8000e86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	4618      	mov	r0, r3
 8000e92:	f003 fe51 	bl	8004b38 <HAL_RCC_OscConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e9c:	f000 f9d8 	bl	8001250 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ea0:	f003 fdfa 	bl	8004a98 <HAL_PWREx_EnableOverDrive>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000eaa:	f000 f9d1 	bl	8001250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eae:	230f      	movs	r3, #15
 8000eb0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ebe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ec4:	f107 0308 	add.w	r3, r7, #8
 8000ec8:	2103      	movs	r1, #3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f004 f8e2 	bl	8005094 <HAL_RCC_ClockConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000ed6:	f000 f9bb 	bl	8001250 <Error_Handler>
  }
}
 8000eda:	bf00      	nop
 8000edc:	3750      	adds	r7, #80	; 0x50
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40007000 	.word	0x40007000

08000eec <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <MX_CAN1_Init+0x64>)
 8000ef2:	4a18      	ldr	r2, [pc, #96]	; (8000f54 <MX_CAN1_Init+0x68>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000ef6:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <MX_CAN1_Init+0x64>)
 8000ef8:	2206      	movs	r2, #6
 8000efa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_CAN1_Init+0x64>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <MX_CAN1_Init+0x64>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <MX_CAN1_Init+0x64>)
 8000f0a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000f0e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_CAN1_Init+0x64>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <MX_CAN1_Init+0x64>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <MX_CAN1_Init+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <MX_CAN1_Init+0x64>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f28:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <MX_CAN1_Init+0x64>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <MX_CAN1_Init+0x64>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <MX_CAN1_Init+0x64>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f3a:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_CAN1_Init+0x64>)
 8000f3c:	f000 fec2 	bl	8001cc4 <HAL_CAN_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000f46:	f000 f983 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200024f8 	.word	0x200024f8
 8000f54:	40006400 	.word	0x40006400

08000f58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f5e:	4a15      	ldr	r2, [pc, #84]	; (8000fb4 <MX_USART3_UART_Init+0x5c>)
 8000f60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f7e:	220c      	movs	r2, #12
 8000f80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f9c:	f005 f9da 	bl	8006354 <HAL_UART_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000fa6:	f000 f953 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20002520 	.word	0x20002520
 8000fb4:	40004800 	.word	0x40004800

08000fb8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fbe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fc2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc6:	2206      	movs	r2, #6
 8000fc8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fcc:	2202      	movs	r2, #2
 8000fce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd8:	2202      	movs	r2, #2
 8000fda:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fe8:	4b09      	ldr	r3, [pc, #36]	; (8001010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000fee:	4b08      	ldr	r3, [pc, #32]	; (8001010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ffc:	f003 fbf3 	bl	80047e6 <HAL_PCD_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001006:	f000 f923 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20002608 	.word	0x20002608

08001014 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <MX_DMA_Init+0x38>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a0b      	ldr	r2, [pc, #44]	; (800104c <MX_DMA_Init+0x38>)
 8001020:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <MX_DMA_Init+0x38>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2105      	movs	r1, #5
 8001036:	200e      	movs	r0, #14
 8001038:	f001 fc02 	bl	8002840 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800103c:	200e      	movs	r0, #14
 800103e:	f001 fc1b 	bl	8002878 <HAL_NVIC_EnableIRQ>

}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023800 	.word	0x40023800

08001050 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08c      	sub	sp, #48	; 0x30
 8001054:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001066:	4b47      	ldr	r3, [pc, #284]	; (8001184 <MX_GPIO_Init+0x134>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a46      	ldr	r2, [pc, #280]	; (8001184 <MX_GPIO_Init+0x134>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b44      	ldr	r3, [pc, #272]	; (8001184 <MX_GPIO_Init+0x134>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	61bb      	str	r3, [r7, #24]
 800107c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800107e:	4b41      	ldr	r3, [pc, #260]	; (8001184 <MX_GPIO_Init+0x134>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a40      	ldr	r2, [pc, #256]	; (8001184 <MX_GPIO_Init+0x134>)
 8001084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b3e      	ldr	r3, [pc, #248]	; (8001184 <MX_GPIO_Init+0x134>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b3b      	ldr	r3, [pc, #236]	; (8001184 <MX_GPIO_Init+0x134>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a3a      	ldr	r2, [pc, #232]	; (8001184 <MX_GPIO_Init+0x134>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b38      	ldr	r3, [pc, #224]	; (8001184 <MX_GPIO_Init+0x134>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	4b35      	ldr	r3, [pc, #212]	; (8001184 <MX_GPIO_Init+0x134>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a34      	ldr	r2, [pc, #208]	; (8001184 <MX_GPIO_Init+0x134>)
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b32      	ldr	r3, [pc, #200]	; (8001184 <MX_GPIO_Init+0x134>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c6:	4b2f      	ldr	r3, [pc, #188]	; (8001184 <MX_GPIO_Init+0x134>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a2e      	ldr	r2, [pc, #184]	; (8001184 <MX_GPIO_Init+0x134>)
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b2c      	ldr	r3, [pc, #176]	; (8001184 <MX_GPIO_Init+0x134>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0308 	and.w	r3, r3, #8
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010de:	4b29      	ldr	r3, [pc, #164]	; (8001184 <MX_GPIO_Init+0x134>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a28      	ldr	r2, [pc, #160]	; (8001184 <MX_GPIO_Init+0x134>)
 80010e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b26      	ldr	r3, [pc, #152]	; (8001184 <MX_GPIO_Init+0x134>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f244 0181 	movw	r1, #16513	; 0x4081
 80010fc:	4822      	ldr	r0, [pc, #136]	; (8001188 <MX_GPIO_Init+0x138>)
 80010fe:	f003 fb3f 	bl	8004780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	2140      	movs	r1, #64	; 0x40
 8001106:	4821      	ldr	r0, [pc, #132]	; (800118c <MX_GPIO_Init+0x13c>)
 8001108:	f003 fb3a 	bl	8004780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800110c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001112:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001116:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	4619      	mov	r1, r3
 8001122:	481b      	ldr	r0, [pc, #108]	; (8001190 <MX_GPIO_Init+0x140>)
 8001124:	f003 f980 	bl	8004428 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001128:	f244 0381 	movw	r3, #16513	; 0x4081
 800112c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112e:	2301      	movs	r3, #1
 8001130:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	4619      	mov	r1, r3
 8001140:	4811      	ldr	r0, [pc, #68]	; (8001188 <MX_GPIO_Init+0x138>)
 8001142:	f003 f971 	bl	8004428 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001146:	2340      	movs	r3, #64	; 0x40
 8001148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114a:	2301      	movs	r3, #1
 800114c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	4619      	mov	r1, r3
 800115c:	480b      	ldr	r0, [pc, #44]	; (800118c <MX_GPIO_Init+0x13c>)
 800115e:	f003 f963 	bl	8004428 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001162:	2380      	movs	r3, #128	; 0x80
 8001164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001166:	2300      	movs	r3, #0
 8001168:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	4619      	mov	r1, r3
 8001174:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_GPIO_Init+0x13c>)
 8001176:	f003 f957 	bl	8004428 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800117a:	bf00      	nop
 800117c:	3730      	adds	r7, #48	; 0x30
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40023800 	.word	0x40023800
 8001188:	40020400 	.word	0x40020400
 800118c:	40021800 	.word	0x40021800
 8001190:	40020800 	.word	0x40020800

08001194 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800119c:	f006 fc70 	bl	8007a80 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);  // LED1 消灯
 80011a0:	2200      	movs	r2, #0
 80011a2:	2101      	movs	r1, #1
 80011a4:	480d      	ldr	r0, [pc, #52]	; (80011dc <StartDefaultTask+0x48>)
 80011a6:	f003 faeb 	bl	8004780 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	uint16_t button_data = UDPController_GetControllerButtons();  // buttonの入力を取得
 80011aa:	f7ff fd83 	bl	8000cb4 <UDPController_GetControllerButtons>
 80011ae:	4603      	mov	r3, r0
 80011b0:	81fb      	strh	r3, [r7, #14]
	if((button_data & CONTROLLER_CIRCLE) != 0){  // oボタンが押されている場合
 80011b2:	89fb      	ldrh	r3, [r7, #14]
 80011b4:	f003 0320 	and.w	r3, r3, #32
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d005      	beq.n	80011c8 <StartDefaultTask+0x34>
	   HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);  // LED1 点灯
 80011bc:	2201      	movs	r2, #1
 80011be:	2101      	movs	r1, #1
 80011c0:	4806      	ldr	r0, [pc, #24]	; (80011dc <StartDefaultTask+0x48>)
 80011c2:	f003 fadd 	bl	8004780 <HAL_GPIO_WritePin>
 80011c6:	e7f0      	b.n	80011aa <StartDefaultTask+0x16>
	}else{
	   HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);  // LED1 消灯
 80011c8:	2200      	movs	r2, #0
 80011ca:	2101      	movs	r1, #1
 80011cc:	4803      	ldr	r0, [pc, #12]	; (80011dc <StartDefaultTask+0x48>)
 80011ce:	f003 fad7 	bl	8004780 <HAL_GPIO_WritePin>
	  osDelay(100);
 80011d2:	2064      	movs	r0, #100	; 0x64
 80011d4:	f007 fbce 	bl	8008974 <osDelay>
  {
 80011d8:	e7e7      	b.n	80011aa <StartDefaultTask+0x16>
 80011da:	bf00      	nop
 80011dc:	40020400 	.word	0x40020400

080011e0 <freeRTOSChecker>:
/**
* @brief Function implementing the systemCheckTask thread.
* @param argument: Not used
* @retval None
*/
void freeRTOSChecker(){//無限ループの中で実行
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, LD2_Pin);  // PINのPin stateを反転
 80011e4:	2180      	movs	r1, #128	; 0x80
 80011e6:	4804      	ldr	r0, [pc, #16]	; (80011f8 <freeRTOSChecker+0x18>)
 80011e8:	f003 fae3 	bl	80047b2 <HAL_GPIO_TogglePin>
	printf("RTOSchecking\r\n");
 80011ec:	4803      	ldr	r0, [pc, #12]	; (80011fc <freeRTOSChecker+0x1c>)
 80011ee:	f019 fe1d 	bl	801ae2c <puts>

}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40020400 	.word	0x40020400
 80011fc:	0801c170 	.word	0x0801c170

08001200 <StartSystemCheckTask>:
	  AirCylinder_SendOutput(&air_device, AIR_OFF); // 0番ポートの電磁弁がoffになる
	  osDelay(1000);
}
/* USER CODE END Header_StartSystemCheckTask */
void StartSystemCheckTask(void *argument)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	//servoChecker();
	//airChecker();
  /* Infinite loop */
  for(;;)
  {
	  freeRTOSChecker();
 8001208:	f7ff ffea 	bl	80011e0 <freeRTOSChecker>
	  //mcmdChecker();
	  osDelay(1000);
 800120c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001210:	f007 fbb0 	bl	8008974 <osDelay>
	  freeRTOSChecker();
 8001214:	e7f8      	b.n	8001208 <StartSystemCheckTask+0x8>

08001216 <StartControllerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControllerTask */
void StartControllerTask(void *argument)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControllerTask */
  /* Infinite loop */
  UDPControllerReceive(argument);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff fc02 	bl	8000a28 <UDPControllerReceive>
  /* USER CODE END StartControllerTask */
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d101      	bne.n	8001242 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800123e:	f000 fcfd 	bl	8001c3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40002000 	.word	0x40002000

08001250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001254:	b672      	cpsid	i
}
 8001256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("error");
 8001258:	4805      	ldr	r0, [pc, #20]	; (8001270 <Error_Handler+0x20>)
 800125a:	f019 fd4b 	bl	801acf4 <iprintf>
	  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);  // LED1点灯
 800125e:	2201      	movs	r2, #1
 8001260:	2101      	movs	r1, #1
 8001262:	4804      	ldr	r0, [pc, #16]	; (8001274 <Error_Handler+0x24>)
 8001264:	f003 fa8c 	bl	8004780 <HAL_GPIO_WritePin>
	  osDelay(100);
 8001268:	2064      	movs	r0, #100	; 0x64
 800126a:	f007 fb83 	bl	8008974 <osDelay>
	  printf("error");
 800126e:	e7f3      	b.n	8001258 <Error_Handler+0x8>
 8001270:	0801c198 	.word	0x0801c198
 8001274:	40020400 	.word	0x40020400

08001278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <HAL_MspInit+0x4c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a10      	ldr	r2, [pc, #64]	; (80012c4 <HAL_MspInit+0x4c>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <HAL_MspInit+0x4c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <HAL_MspInit+0x4c>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <HAL_MspInit+0x4c>)
 800129c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a0:	6453      	str	r3, [r2, #68]	; 0x44
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <HAL_MspInit+0x4c>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	210f      	movs	r1, #15
 80012b2:	f06f 0001 	mvn.w	r0, #1
 80012b6:	f001 fac3 	bl	8002840 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800

080012c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a23      	ldr	r2, [pc, #140]	; (8001374 <HAL_CAN_MspInit+0xac>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d13f      	bne.n	800136a <HAL_CAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80012ea:	4b23      	ldr	r3, [pc, #140]	; (8001378 <HAL_CAN_MspInit+0xb0>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	4a22      	ldr	r2, [pc, #136]	; (8001378 <HAL_CAN_MspInit+0xb0>)
 80012f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012f4:	6413      	str	r3, [r2, #64]	; 0x40
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <HAL_CAN_MspInit+0xb0>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001302:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <HAL_CAN_MspInit+0xb0>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a1c      	ldr	r2, [pc, #112]	; (8001378 <HAL_CAN_MspInit+0xb0>)
 8001308:	f043 0308 	orr.w	r3, r3, #8
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <HAL_CAN_MspInit+0xb0>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800131a:	2303      	movs	r3, #3
 800131c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001326:	2303      	movs	r3, #3
 8001328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800132a:	2309      	movs	r3, #9
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	4811      	ldr	r0, [pc, #68]	; (800137c <HAL_CAN_MspInit+0xb4>)
 8001336:	f003 f877 	bl	8004428 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2105      	movs	r1, #5
 800133e:	2013      	movs	r0, #19
 8001340:	f001 fa7e 	bl	8002840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001344:	2013      	movs	r0, #19
 8001346:	f001 fa97 	bl	8002878 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2105      	movs	r1, #5
 800134e:	2014      	movs	r0, #20
 8001350:	f001 fa76 	bl	8002840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001354:	2014      	movs	r0, #20
 8001356:	f001 fa8f 	bl	8002878 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2105      	movs	r1, #5
 800135e:	2015      	movs	r0, #21
 8001360:	f001 fa6e 	bl	8002840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001364:	2015      	movs	r0, #21
 8001366:	f001 fa87 	bl	8002878 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800136a:	bf00      	nop
 800136c:	3728      	adds	r7, #40	; 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40006400 	.word	0x40006400
 8001378:	40023800 	.word	0x40023800
 800137c:	40020c00 	.word	0x40020c00

08001380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b0ae      	sub	sp, #184	; 0xb8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2290      	movs	r2, #144	; 0x90
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f019 fc9f 	bl	801ace4 <memset>
  if(huart->Instance==USART3)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a3d      	ldr	r2, [pc, #244]	; (80014a0 <HAL_UART_MspInit+0x120>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d172      	bne.n	8001496 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4618      	mov	r0, r3
 80013c0:	f004 f8c0 	bl	8005544 <HAL_RCCEx_PeriphCLKConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013ca:	f7ff ff41 	bl	8001250 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013ce:	4b35      	ldr	r3, [pc, #212]	; (80014a4 <HAL_UART_MspInit+0x124>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a34      	ldr	r2, [pc, #208]	; (80014a4 <HAL_UART_MspInit+0x124>)
 80013d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b32      	ldr	r3, [pc, #200]	; (80014a4 <HAL_UART_MspInit+0x124>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e6:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <HAL_UART_MspInit+0x124>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a2e      	ldr	r2, [pc, #184]	; (80014a4 <HAL_UART_MspInit+0x124>)
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b2c      	ldr	r3, [pc, #176]	; (80014a4 <HAL_UART_MspInit+0x124>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001402:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001418:	2307      	movs	r3, #7
 800141a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800141e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001422:	4619      	mov	r1, r3
 8001424:	4820      	ldr	r0, [pc, #128]	; (80014a8 <HAL_UART_MspInit+0x128>)
 8001426:	f002 ffff 	bl	8004428 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800142a:	4b20      	ldr	r3, [pc, #128]	; (80014ac <HAL_UART_MspInit+0x12c>)
 800142c:	4a20      	ldr	r2, [pc, #128]	; (80014b0 <HAL_UART_MspInit+0x130>)
 800142e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001430:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <HAL_UART_MspInit+0x12c>)
 8001432:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001436:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001438:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <HAL_UART_MspInit+0x12c>)
 800143a:	2240      	movs	r2, #64	; 0x40
 800143c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800143e:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <HAL_UART_MspInit+0x12c>)
 8001440:	2200      	movs	r2, #0
 8001442:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001444:	4b19      	ldr	r3, [pc, #100]	; (80014ac <HAL_UART_MspInit+0x12c>)
 8001446:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800144a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800144c:	4b17      	ldr	r3, [pc, #92]	; (80014ac <HAL_UART_MspInit+0x12c>)
 800144e:	2200      	movs	r2, #0
 8001450:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001452:	4b16      	ldr	r3, [pc, #88]	; (80014ac <HAL_UART_MspInit+0x12c>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <HAL_UART_MspInit+0x12c>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800145e:	4b13      	ldr	r3, [pc, #76]	; (80014ac <HAL_UART_MspInit+0x12c>)
 8001460:	2200      	movs	r2, #0
 8001462:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <HAL_UART_MspInit+0x12c>)
 8001466:	2200      	movs	r2, #0
 8001468:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800146a:	4810      	ldr	r0, [pc, #64]	; (80014ac <HAL_UART_MspInit+0x12c>)
 800146c:	f001 fa12 	bl	8002894 <HAL_DMA_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001476:	f7ff feeb 	bl	8001250 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <HAL_UART_MspInit+0x12c>)
 800147e:	671a      	str	r2, [r3, #112]	; 0x70
 8001480:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <HAL_UART_MspInit+0x12c>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2105      	movs	r1, #5
 800148a:	2027      	movs	r0, #39	; 0x27
 800148c:	f001 f9d8 	bl	8002840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001490:	2027      	movs	r0, #39	; 0x27
 8001492:	f001 f9f1 	bl	8002878 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001496:	bf00      	nop
 8001498:	37b8      	adds	r7, #184	; 0xb8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40004800 	.word	0x40004800
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020c00 	.word	0x40020c00
 80014ac:	200025a8 	.word	0x200025a8
 80014b0:	40026058 	.word	0x40026058

080014b4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b0ae      	sub	sp, #184	; 0xb8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2290      	movs	r2, #144	; 0x90
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f019 fc05 	bl	801ace4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014e2:	d159      	bne.n	8001598 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80014e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014e8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4618      	mov	r0, r3
 80014f6:	f004 f825 	bl	8005544 <HAL_RCCEx_PeriphCLKConfig>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001500:	f7ff fea6 	bl	8001250 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001504:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <HAL_PCD_MspInit+0xec>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	4a25      	ldr	r2, [pc, #148]	; (80015a0 <HAL_PCD_MspInit+0xec>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6313      	str	r3, [r2, #48]	; 0x30
 8001510:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <HAL_PCD_MspInit+0xec>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800151c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001520:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001536:	230a      	movs	r3, #10
 8001538:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001540:	4619      	mov	r1, r3
 8001542:	4818      	ldr	r0, [pc, #96]	; (80015a4 <HAL_PCD_MspInit+0xf0>)
 8001544:	f002 ff70 	bl	8004428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001548:	f44f 7300 	mov.w	r3, #512	; 0x200
 800154c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001550:	2300      	movs	r3, #0
 8001552:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001560:	4619      	mov	r1, r3
 8001562:	4810      	ldr	r0, [pc, #64]	; (80015a4 <HAL_PCD_MspInit+0xf0>)
 8001564:	f002 ff60 	bl	8004428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001568:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <HAL_PCD_MspInit+0xec>)
 800156a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156c:	4a0c      	ldr	r2, [pc, #48]	; (80015a0 <HAL_PCD_MspInit+0xec>)
 800156e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001572:	6353      	str	r3, [r2, #52]	; 0x34
 8001574:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <HAL_PCD_MspInit+0xec>)
 8001576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <HAL_PCD_MspInit+0xec>)
 8001582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001584:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <HAL_PCD_MspInit+0xec>)
 8001586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158a:	6453      	str	r3, [r2, #68]	; 0x44
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <HAL_PCD_MspInit+0xec>)
 800158e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001598:	bf00      	nop
 800159a:	37b8      	adds	r7, #184	; 0xb8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020000 	.word	0x40020000

080015a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08e      	sub	sp, #56	; 0x38
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80015b8:	4b33      	ldr	r3, [pc, #204]	; (8001688 <HAL_InitTick+0xe0>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	4a32      	ldr	r2, [pc, #200]	; (8001688 <HAL_InitTick+0xe0>)
 80015be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c2:	6413      	str	r3, [r2, #64]	; 0x40
 80015c4:	4b30      	ldr	r3, [pc, #192]	; (8001688 <HAL_InitTick+0xe0>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015d0:	f107 0210 	add.w	r2, r7, #16
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4611      	mov	r1, r2
 80015da:	4618      	mov	r0, r3
 80015dc:	f003 ff80 	bl	80054e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015e0:	6a3b      	ldr	r3, [r7, #32]
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d103      	bne.n	80015f2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015ea:	f003 ff51 	bl	8005490 <HAL_RCC_GetPCLK1Freq>
 80015ee:	6378      	str	r0, [r7, #52]	; 0x34
 80015f0:	e004      	b.n	80015fc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015f2:	f003 ff4d 	bl	8005490 <HAL_RCC_GetPCLK1Freq>
 80015f6:	4603      	mov	r3, r0
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015fe:	4a23      	ldr	r2, [pc, #140]	; (800168c <HAL_InitTick+0xe4>)
 8001600:	fba2 2303 	umull	r2, r3, r2, r3
 8001604:	0c9b      	lsrs	r3, r3, #18
 8001606:	3b01      	subs	r3, #1
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800160a:	4b21      	ldr	r3, [pc, #132]	; (8001690 <HAL_InitTick+0xe8>)
 800160c:	4a21      	ldr	r2, [pc, #132]	; (8001694 <HAL_InitTick+0xec>)
 800160e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001610:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <HAL_InitTick+0xe8>)
 8001612:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001616:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001618:	4a1d      	ldr	r2, [pc, #116]	; (8001690 <HAL_InitTick+0xe8>)
 800161a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161c:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800161e:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <HAL_InitTick+0xe8>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001624:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <HAL_InitTick+0xe8>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162a:	4b19      	ldr	r3, [pc, #100]	; (8001690 <HAL_InitTick+0xe8>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001630:	4817      	ldr	r0, [pc, #92]	; (8001690 <HAL_InitTick+0xe8>)
 8001632:	f004 fbaf 	bl	8005d94 <HAL_TIM_Base_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800163c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001640:	2b00      	cmp	r3, #0
 8001642:	d11b      	bne.n	800167c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8001644:	4812      	ldr	r0, [pc, #72]	; (8001690 <HAL_InitTick+0xe8>)
 8001646:	f004 fc07 	bl	8005e58 <HAL_TIM_Base_Start_IT>
 800164a:	4603      	mov	r3, r0
 800164c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001650:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001654:	2b00      	cmp	r3, #0
 8001656:	d111      	bne.n	800167c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001658:	202d      	movs	r0, #45	; 0x2d
 800165a:	f001 f90d 	bl	8002878 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b0f      	cmp	r3, #15
 8001662:	d808      	bhi.n	8001676 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8001664:	2200      	movs	r2, #0
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	202d      	movs	r0, #45	; 0x2d
 800166a:	f001 f8e9 	bl	8002840 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <HAL_InitTick+0xf0>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	e002      	b.n	800167c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800167c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001680:	4618      	mov	r0, r3
 8001682:	3738      	adds	r7, #56	; 0x38
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40023800 	.word	0x40023800
 800168c:	431bde83 	.word	0x431bde83
 8001690:	20004438 	.word	0x20004438
 8001694:	40002000 	.word	0x40002000
 8001698:	20000004 	.word	0x20000004

0800169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <NMI_Handler+0x4>

080016a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <HardFault_Handler+0x4>

080016a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <MemManage_Handler+0x4>

080016ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <BusFault_Handler+0x4>

080016b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <UsageFault_Handler+0x4>

080016ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <DMA1_Stream3_IRQHandler+0x10>)
 80016ce:	f001 fa21 	bl	8002b14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200025a8 	.word	0x200025a8

080016dc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <CAN1_TX_IRQHandler+0x10>)
 80016e2:	f000 fe01 	bl	80022e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200024f8 	.word	0x200024f8

080016f0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <CAN1_RX0_IRQHandler+0x10>)
 80016f6:	f000 fdf7 	bl	80022e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200024f8 	.word	0x200024f8

08001704 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <CAN1_RX1_IRQHandler+0x10>)
 800170a:	f000 fded 	bl	80022e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200024f8 	.word	0x200024f8

08001718 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800171c:	4802      	ldr	r0, [pc, #8]	; (8001728 <USART3_IRQHandler+0x10>)
 800171e:	f004 feeb 	bl	80064f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20002520 	.word	0x20002520

0800172c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001732:	f004 fc09 	bl	8005f48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20004438 	.word	0x20004438

08001740 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <ETH_IRQHandler+0x10>)
 8001746:	f001 ff9b 	bl	8003680 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20008e90 	.word	0x20008e90

08001754 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return 1;
 8001758:	2301      	movs	r3, #1
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <_kill>:

int _kill(int pid, int sig)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800176e:	4b05      	ldr	r3, [pc, #20]	; (8001784 <_kill+0x20>)
 8001770:	2216      	movs	r2, #22
 8001772:	601a      	str	r2, [r3, #0]
  return -1;
 8001774:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	200111e4 	.word	0x200111e4

08001788 <_exit>:

void _exit (int status)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001790:	f04f 31ff 	mov.w	r1, #4294967295
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff ffe5 	bl	8001764 <_kill>
  while (1) {}    /* Make sure we hang here */
 800179a:	e7fe      	b.n	800179a <_exit+0x12>

0800179c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	e00a      	b.n	80017c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ae:	f3af 8000 	nop.w
 80017b2:	4601      	mov	r1, r0
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	60ba      	str	r2, [r7, #8]
 80017ba:	b2ca      	uxtb	r2, r1
 80017bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	3301      	adds	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	dbf0      	blt.n	80017ae <_read+0x12>
  }

  return len;
 80017cc:	687b      	ldr	r3, [r7, #4]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	60f8      	str	r0, [r7, #12]
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	e009      	b.n	80017fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	60ba      	str	r2, [r7, #8]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fa6b 	bl	8000ccc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	3301      	adds	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	429a      	cmp	r2, r3
 8001802:	dbf1      	blt.n	80017e8 <_write+0x12>
  }
  return len;
 8001804:	687b      	ldr	r3, [r7, #4]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <_close>:

int _close(int file)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001836:	605a      	str	r2, [r3, #4]
  return 0;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <_isatty>:

int _isatty(int file)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001880:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <_sbrk+0x5c>)
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <_sbrk+0x60>)
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800188c:	4b13      	ldr	r3, [pc, #76]	; (80018dc <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <_sbrk+0x64>)
 8001896:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <_sbrk+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d205      	bcs.n	80018b4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80018a8:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <_sbrk+0x6c>)
 80018aa:	220c      	movs	r2, #12
 80018ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
 80018b2:	e009      	b.n	80018c8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <_sbrk+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	4a06      	ldr	r2, [pc, #24]	; (80018dc <_sbrk+0x64>)
 80018c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018c6:	68fb      	ldr	r3, [r7, #12]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	371c      	adds	r7, #28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	20080000 	.word	0x20080000
 80018d8:	00000400 	.word	0x00000400
 80018dc:	20004484 	.word	0x20004484
 80018e0:	200111f8 	.word	0x200111f8
 80018e4:	200111e4 	.word	0x200111e4

080018e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <SystemInit+0x20>)
 80018ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018f2:	4a05      	ldr	r2, [pc, #20]	; (8001908 <SystemInit+0x20>)
 80018f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800190c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001944 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001910:	480d      	ldr	r0, [pc, #52]	; (8001948 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001912:	490e      	ldr	r1, [pc, #56]	; (800194c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001914:	4a0e      	ldr	r2, [pc, #56]	; (8001950 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001918:	e002      	b.n	8001920 <LoopCopyDataInit>

0800191a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800191c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191e:	3304      	adds	r3, #4

08001920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001924:	d3f9      	bcc.n	800191a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001926:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001928:	4c0b      	ldr	r4, [pc, #44]	; (8001958 <LoopFillZerobss+0x26>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800192c:	e001      	b.n	8001932 <LoopFillZerobss>

0800192e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001930:	3204      	adds	r2, #4

08001932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001934:	d3fb      	bcc.n	800192e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001936:	f7ff ffd7 	bl	80018e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800193a:	f019 f991 	bl	801ac60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800193e:	f7ff fa23 	bl	8000d88 <main>
  bx  lr    
 8001942:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001944:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800194c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001950:	0801fc80 	.word	0x0801fc80
  ldr r2, =_sbss
 8001954:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001958:	200111f8 	.word	0x200111f8

0800195c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800195c:	e7fe      	b.n	800195c <ADC_IRQHandler>

0800195e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00b      	beq.n	8001986 <LAN8742_RegisterBusIO+0x28>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d007      	beq.n	8001986 <LAN8742_RegisterBusIO+0x28>
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <LAN8742_RegisterBusIO+0x28>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d102      	bne.n	800198c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
 800198a:	e014      	b.n	80019b6 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	2300      	movs	r3, #0
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d17c      	bne.n	8001adc <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d002      	beq.n	80019f0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2220      	movs	r2, #32
 80019f4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	e01c      	b.n	8001a36 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	f107 0208 	add.w	r2, r7, #8
 8001a04:	2112      	movs	r1, #18
 8001a06:	6978      	ldr	r0, [r7, #20]
 8001a08:	4798      	blx	r3
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	da03      	bge.n	8001a18 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001a10:	f06f 0304 	mvn.w	r3, #4
 8001a14:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001a16:	e00b      	b.n	8001a30 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	f003 031f 	and.w	r3, r3, #31
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d105      	bne.n	8001a30 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
         break;
 8001a2e:	e005      	b.n	8001a3c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	3301      	adds	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2b1f      	cmp	r3, #31
 8001a3a:	d9df      	bls.n	80019fc <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b1f      	cmp	r3, #31
 8001a42:	d902      	bls.n	8001a4a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001a44:	f06f 0302 	mvn.w	r3, #2
 8001a48:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d145      	bne.n	8001adc <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6810      	ldr	r0, [r2, #0]
 8001a58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4798      	blx	r3
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	db37      	blt.n	8001ad6 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6810      	ldr	r0, [r2, #0]
 8001a6e:	f107 0208 	add.w	r2, r7, #8
 8001a72:	2100      	movs	r1, #0
 8001a74:	4798      	blx	r3
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	db28      	blt.n	8001ace <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	4798      	blx	r3
 8001a82:	4603      	mov	r3, r0
 8001a84:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001a86:	e01c      	b.n	8001ac2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	4798      	blx	r3
 8001a8e:	4603      	mov	r3, r0
 8001a90:	461a      	mov	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a9a:	d80e      	bhi.n	8001aba <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6810      	ldr	r0, [r2, #0]
 8001aa4:	f107 0208 	add.w	r2, r7, #8
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4798      	blx	r3
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da07      	bge.n	8001ac2 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001ab2:	f06f 0304 	mvn.w	r3, #4
 8001ab6:	613b      	str	r3, [r7, #16]
                 break;
 8001ab8:	e010      	b.n	8001adc <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001aba:	f06f 0301 	mvn.w	r3, #1
 8001abe:	613b      	str	r3, [r7, #16]
               break;
 8001ac0:	e00c      	b.n	8001adc <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1dd      	bne.n	8001a88 <LAN8742_Init+0xc6>
 8001acc:	e006      	b.n	8001adc <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001ace:	f06f 0304 	mvn.w	r3, #4
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	e002      	b.n	8001adc <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001ad6:	f06f 0303 	mvn.w	r3, #3
 8001ada:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d112      	bne.n	8001b08 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	4798      	blx	r3
 8001ae8:	4603      	mov	r3, r0
 8001aea:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001aec:	bf00      	nop
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	4798      	blx	r3
 8001af4:	4603      	mov	r3, r0
 8001af6:	461a      	mov	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b00:	d9f5      	bls.n	8001aee <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001b08:	693b      	ldr	r3, [r7, #16]
 }
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b084      	sub	sp, #16
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6810      	ldr	r0, [r2, #0]
 8001b26:	f107 020c 	add.w	r2, r7, #12
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	4798      	blx	r3
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	da02      	bge.n	8001b3a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b34:	f06f 0304 	mvn.w	r3, #4
 8001b38:	e06e      	b.n	8001c18 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6810      	ldr	r0, [r2, #0]
 8001b42:	f107 020c 	add.w	r2, r7, #12
 8001b46:	2101      	movs	r1, #1
 8001b48:	4798      	blx	r3
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	da02      	bge.n	8001b56 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b50:	f06f 0304 	mvn.w	r3, #4
 8001b54:	e060      	b.n	8001c18 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001b60:	2301      	movs	r3, #1
 8001b62:	e059      	b.n	8001c18 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6810      	ldr	r0, [r2, #0]
 8001b6c:	f107 020c 	add.w	r2, r7, #12
 8001b70:	2100      	movs	r1, #0
 8001b72:	4798      	blx	r3
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	da02      	bge.n	8001b80 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b7a:	f06f 0304 	mvn.w	r3, #4
 8001b7e:	e04b      	b.n	8001c18 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d11b      	bne.n	8001bc2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d006      	beq.n	8001ba2 <LAN8742_GetLinkState+0x90>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e03a      	b.n	8001c18 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e033      	b.n	8001c18 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001bba:	2304      	movs	r3, #4
 8001bbc:	e02c      	b.n	8001c18 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001bbe:	2305      	movs	r3, #5
 8001bc0:	e02a      	b.n	8001c18 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6810      	ldr	r0, [r2, #0]
 8001bca:	f107 020c 	add.w	r2, r7, #12
 8001bce:	211f      	movs	r1, #31
 8001bd0:	4798      	blx	r3
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	da02      	bge.n	8001bde <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001bd8:	f06f 0304 	mvn.w	r3, #4
 8001bdc:	e01c      	b.n	8001c18 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001be8:	2306      	movs	r3, #6
 8001bea:	e015      	b.n	8001c18 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 031c 	and.w	r3, r3, #28
 8001bf2:	2b18      	cmp	r3, #24
 8001bf4:	d101      	bne.n	8001bfa <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e00e      	b.n	8001c18 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f003 031c 	and.w	r3, r3, #28
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d101      	bne.n	8001c08 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e007      	b.n	8001c18 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f003 031c 	and.w	r3, r3, #28
 8001c0e:	2b14      	cmp	r3, #20
 8001c10:	d101      	bne.n	8001c16 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001c12:	2304      	movs	r3, #4
 8001c14:	e000      	b.n	8001c18 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001c16:	2305      	movs	r3, #5
    }				
  }
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c24:	2003      	movs	r0, #3
 8001c26:	f000 fe00 	bl	800282a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2a:	200f      	movs	r0, #15
 8001c2c:	f7ff fcbc 	bl	80015a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c30:	f7ff fb22 	bl	8001278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_IncTick+0x20>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_IncTick+0x24>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <HAL_IncTick+0x24>)
 8001c4e:	6013      	str	r3, [r2, #0]
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000008 	.word	0x20000008
 8001c60:	20004488 	.word	0x20004488

08001c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return uwTick;
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <HAL_GetTick+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20004488 	.word	0x20004488

08001c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c84:	f7ff ffee 	bl	8001c64 <HAL_GetTick>
 8001c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c94:	d005      	beq.n	8001ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <HAL_Delay+0x44>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ca2:	bf00      	nop
 8001ca4:	f7ff ffde 	bl	8001c64 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d8f7      	bhi.n	8001ca4 <HAL_Delay+0x28>
  {
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000008 	.word	0x20000008

08001cc4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e0ed      	b.n	8001eb2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d102      	bne.n	8001ce8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff faf0 	bl	80012c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0201 	orr.w	r2, r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cf8:	f7ff ffb4 	bl	8001c64 <HAL_GetTick>
 8001cfc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cfe:	e012      	b.n	8001d26 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d00:	f7ff ffb0 	bl	8001c64 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b0a      	cmp	r3, #10
 8001d0c:	d90b      	bls.n	8001d26 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2205      	movs	r2, #5
 8001d1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e0c5      	b.n	8001eb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0e5      	beq.n	8001d00 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0202 	bic.w	r2, r2, #2
 8001d42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d44:	f7ff ff8e 	bl	8001c64 <HAL_GetTick>
 8001d48:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d4a:	e012      	b.n	8001d72 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d4c:	f7ff ff8a 	bl	8001c64 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b0a      	cmp	r3, #10
 8001d58:	d90b      	bls.n	8001d72 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2205      	movs	r2, #5
 8001d6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e09f      	b.n	8001eb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1e5      	bne.n	8001d4c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	7e1b      	ldrb	r3, [r3, #24]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d108      	bne.n	8001d9a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	e007      	b.n	8001daa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001da8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	7e5b      	ldrb	r3, [r3, #25]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d108      	bne.n	8001dc4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	e007      	b.n	8001dd4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7e9b      	ldrb	r3, [r3, #26]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d108      	bne.n	8001dee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0220 	orr.w	r2, r2, #32
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	e007      	b.n	8001dfe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0220 	bic.w	r2, r2, #32
 8001dfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	7edb      	ldrb	r3, [r3, #27]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d108      	bne.n	8001e18 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0210 	bic.w	r2, r2, #16
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	e007      	b.n	8001e28 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0210 	orr.w	r2, r2, #16
 8001e26:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	7f1b      	ldrb	r3, [r3, #28]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d108      	bne.n	8001e42 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0208 	orr.w	r2, r2, #8
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	e007      	b.n	8001e52 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0208 	bic.w	r2, r2, #8
 8001e50:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	7f5b      	ldrb	r3, [r3, #29]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d108      	bne.n	8001e6c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 0204 	orr.w	r2, r2, #4
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	e007      	b.n	8001e7c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0204 	bic.w	r2, r2, #4
 8001e7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	ea42 0103 	orr.w	r1, r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	1e5a      	subs	r2, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b089      	sub	sp, #36	; 0x24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ece:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ed8:	7ffb      	ldrb	r3, [r7, #31]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d003      	beq.n	8001ee6 <HAL_CAN_AddTxMessage+0x2c>
 8001ede:	7ffb      	ldrb	r3, [r7, #31]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	f040 80ad 	bne.w	8002040 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10a      	bne.n	8001f06 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d105      	bne.n	8001f06 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 8095 	beq.w	8002030 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	0e1b      	lsrs	r3, r3, #24
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001f10:	2201      	movs	r2, #1
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	409a      	lsls	r2, r3
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10d      	bne.n	8001f3e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f2c:	68f9      	ldr	r1, [r7, #12]
 8001f2e:	6809      	ldr	r1, [r1, #0]
 8001f30:	431a      	orrs	r2, r3
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	3318      	adds	r3, #24
 8001f36:	011b      	lsls	r3, r3, #4
 8001f38:	440b      	add	r3, r1
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	e00f      	b.n	8001f5e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f48:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f4e:	68f9      	ldr	r1, [r7, #12]
 8001f50:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001f52:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	3318      	adds	r3, #24
 8001f58:	011b      	lsls	r3, r3, #4
 8001f5a:	440b      	add	r3, r1
 8001f5c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6819      	ldr	r1, [r3, #0]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	691a      	ldr	r2, [r3, #16]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	3318      	adds	r3, #24
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	440b      	add	r3, r1
 8001f6e:	3304      	adds	r3, #4
 8001f70:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	7d1b      	ldrb	r3, [r3, #20]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d111      	bne.n	8001f9e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3318      	adds	r3, #24
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	4413      	add	r3, r2
 8001f86:	3304      	adds	r3, #4
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	6811      	ldr	r1, [r2, #0]
 8001f8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	3318      	adds	r3, #24
 8001f96:	011b      	lsls	r3, r3, #4
 8001f98:	440b      	add	r3, r1
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3307      	adds	r3, #7
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	061a      	lsls	r2, r3, #24
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3306      	adds	r3, #6
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	041b      	lsls	r3, r3, #16
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3305      	adds	r3, #5
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	3204      	adds	r2, #4
 8001fbe:	7812      	ldrb	r2, [r2, #0]
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	6811      	ldr	r1, [r2, #0]
 8001fc6:	ea43 0200 	orr.w	r2, r3, r0
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	440b      	add	r3, r1
 8001fd0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001fd4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3303      	adds	r3, #3
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	061a      	lsls	r2, r3, #24
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	041b      	lsls	r3, r3, #16
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3301      	adds	r3, #1
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	021b      	lsls	r3, r3, #8
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	7812      	ldrb	r2, [r2, #0]
 8001ff6:	4610      	mov	r0, r2
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	6811      	ldr	r1, [r2, #0]
 8001ffc:	ea43 0200 	orr.w	r2, r3, r0
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	440b      	add	r3, r1
 8002006:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800200a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	3318      	adds	r3, #24
 8002014:	011b      	lsls	r3, r3, #4
 8002016:	4413      	add	r3, r2
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	6811      	ldr	r1, [r2, #0]
 800201e:	f043 0201 	orr.w	r2, r3, #1
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	3318      	adds	r3, #24
 8002026:	011b      	lsls	r3, r3, #4
 8002028:	440b      	add	r3, r1
 800202a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	e00e      	b.n	800204e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e006      	b.n	800204e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
  }
}
 800204e:	4618      	mov	r0, r3
 8002050:	3724      	adds	r7, #36	; 0x24
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800205a:	b480      	push	{r7}
 800205c:	b085      	sub	sp, #20
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3020 	ldrb.w	r3, [r3, #32]
 800206c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800206e:	7afb      	ldrb	r3, [r7, #11]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d002      	beq.n	800207a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002074:	7afb      	ldrb	r3, [r7, #11]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d11d      	bne.n	80020b6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	3301      	adds	r3, #1
 800208c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d002      	beq.n	80020a2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	3301      	adds	r3, #1
 80020a0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	3301      	adds	r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80020b6:	68fb      	ldr	r3, [r7, #12]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80020c4:	b480      	push	{r7}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020d8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80020da:	7dfb      	ldrb	r3, [r7, #23]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d003      	beq.n	80020e8 <HAL_CAN_GetRxMessage+0x24>
 80020e0:	7dfb      	ldrb	r3, [r7, #23]
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	f040 80f3 	bne.w	80022ce <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10e      	bne.n	800210c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d116      	bne.n	800212a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0e7      	b.n	80022dc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d107      	bne.n	800212a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e0d8      	b.n	80022dc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	331b      	adds	r3, #27
 8002132:	011b      	lsls	r3, r3, #4
 8002134:	4413      	add	r3, r2
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0204 	and.w	r2, r3, #4
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10c      	bne.n	8002162 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	331b      	adds	r3, #27
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	4413      	add	r3, r2
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	0d5b      	lsrs	r3, r3, #21
 8002158:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	e00b      	b.n	800217a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	331b      	adds	r3, #27
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	4413      	add	r3, r2
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	08db      	lsrs	r3, r3, #3
 8002172:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	331b      	adds	r3, #27
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	4413      	add	r3, r2
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0202 	and.w	r2, r3, #2
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	331b      	adds	r3, #27
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	4413      	add	r3, r2
 800219c:	3304      	adds	r3, #4
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 020f 	and.w	r2, r3, #15
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	331b      	adds	r3, #27
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	4413      	add	r3, r2
 80021b4:	3304      	adds	r3, #4
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	331b      	adds	r3, #27
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	4413      	add	r3, r2
 80021cc:	3304      	adds	r3, #4
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	0c1b      	lsrs	r3, r3, #16
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	4413      	add	r3, r2
 80021f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	0a1a      	lsrs	r2, r3, #8
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	3301      	adds	r3, #1
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	4413      	add	r3, r2
 8002212:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	0c1a      	lsrs	r2, r3, #16
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	3302      	adds	r3, #2
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	4413      	add	r3, r2
 800222c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	0e1a      	lsrs	r2, r3, #24
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	3303      	adds	r3, #3
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	4413      	add	r3, r2
 8002246:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	3304      	adds	r3, #4
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	4413      	add	r3, r2
 800225e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	0a1a      	lsrs	r2, r3, #8
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	3305      	adds	r3, #5
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	4413      	add	r3, r2
 8002278:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	0c1a      	lsrs	r2, r3, #16
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	3306      	adds	r3, #6
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	4413      	add	r3, r2
 8002292:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	0e1a      	lsrs	r2, r3, #24
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	3307      	adds	r3, #7
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d108      	bne.n	80022ba <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0220 	orr.w	r2, r2, #32
 80022b6:	60da      	str	r2, [r3, #12]
 80022b8:	e007      	b.n	80022ca <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0220 	orr.w	r2, r2, #32
 80022c8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	e006      	b.n	80022dc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
  }
}
 80022dc:	4618      	mov	r0, r3
 80022de:	371c      	adds	r7, #28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08a      	sub	sp, #40	; 0x28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d07c      	beq.n	8002428 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b00      	cmp	r3, #0
 8002336:	d023      	beq.n	8002380 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2201      	movs	r2, #1
 800233e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7fe fcd2 	bl	8000cf4 <HAL_CAN_TxMailbox0CompleteCallback>
 8002350:	e016      	b.n	8002380 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d004      	beq.n	8002366 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
 8002364:	e00c      	b.n	8002380 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d004      	beq.n	800237a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
 8002378:	e002      	b.n	8002380 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7fe fcc4 	bl	8000d08 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002386:	2b00      	cmp	r3, #0
 8002388:	d024      	beq.n	80023d4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002392:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe fcbc 	bl	8000d1c <HAL_CAN_TxMailbox1CompleteCallback>
 80023a4:	e016      	b.n	80023d4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d004      	beq.n	80023ba <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
 80023b8:	e00c      	b.n	80023d4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d004      	beq.n	80023ce <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
 80023cc:	e002      	b.n	80023d4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7fe fcae 	bl	8000d30 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d024      	beq.n	8002428 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7fe fca6 	bl	8000d44 <HAL_CAN_TxMailbox2CompleteCallback>
 80023f8:	e016      	b.n	8002428 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d004      	beq.n	800240e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
 800240c:	e00c      	b.n	8002428 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d004      	beq.n	8002422 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
 8002420:	e002      	b.n	8002428 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7fe fc98 	bl	8000d58 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00c      	beq.n	800244c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f003 0310 	and.w	r3, r3, #16
 8002438:	2b00      	cmp	r3, #0
 800243a:	d007      	beq.n	800244c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002442:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2210      	movs	r2, #16
 800244a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00b      	beq.n	800246e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f003 0308 	and.w	r3, r3, #8
 800245c:	2b00      	cmp	r3, #0
 800245e:	d006      	beq.n	800246e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2208      	movs	r2, #8
 8002466:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f8f4 	bl	8002656 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d009      	beq.n	800248c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7fe fc70 	bl	8000d6c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00c      	beq.n	80024b0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	2b00      	cmp	r3, #0
 800249e:	d007      	beq.n	80024b0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2210      	movs	r2, #16
 80024ae:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	f003 0320 	and.w	r3, r3, #32
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00b      	beq.n	80024d2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	f003 0308 	and.w	r3, r3, #8
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d006      	beq.n	80024d2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2208      	movs	r2, #8
 80024ca:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f8d6 	bl	800267e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d009      	beq.n	80024f0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f8bd 	bl	800266a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00b      	beq.n	8002512 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	f003 0310 	and.w	r3, r3, #16
 8002500:	2b00      	cmp	r3, #0
 8002502:	d006      	beq.n	8002512 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2210      	movs	r2, #16
 800250a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f8c0 	bl	8002692 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00b      	beq.n	8002534 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d006      	beq.n	8002534 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2208      	movs	r2, #8
 800252c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f8b9 	bl	80026a6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d07b      	beq.n	8002636 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b00      	cmp	r3, #0
 8002546:	d072      	beq.n	800262e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254e:	2b00      	cmp	r3, #0
 8002550:	d008      	beq.n	8002564 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800256a:	2b00      	cmp	r3, #0
 800256c:	d008      	beq.n	8002580 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	f043 0302 	orr.w	r3, r3, #2
 800257e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002586:	2b00      	cmp	r3, #0
 8002588:	d008      	beq.n	800259c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	f043 0304 	orr.w	r3, r3, #4
 800259a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d043      	beq.n	800262e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d03e      	beq.n	800262e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025b6:	2b60      	cmp	r3, #96	; 0x60
 80025b8:	d02b      	beq.n	8002612 <HAL_CAN_IRQHandler+0x32a>
 80025ba:	2b60      	cmp	r3, #96	; 0x60
 80025bc:	d82e      	bhi.n	800261c <HAL_CAN_IRQHandler+0x334>
 80025be:	2b50      	cmp	r3, #80	; 0x50
 80025c0:	d022      	beq.n	8002608 <HAL_CAN_IRQHandler+0x320>
 80025c2:	2b50      	cmp	r3, #80	; 0x50
 80025c4:	d82a      	bhi.n	800261c <HAL_CAN_IRQHandler+0x334>
 80025c6:	2b40      	cmp	r3, #64	; 0x40
 80025c8:	d019      	beq.n	80025fe <HAL_CAN_IRQHandler+0x316>
 80025ca:	2b40      	cmp	r3, #64	; 0x40
 80025cc:	d826      	bhi.n	800261c <HAL_CAN_IRQHandler+0x334>
 80025ce:	2b30      	cmp	r3, #48	; 0x30
 80025d0:	d010      	beq.n	80025f4 <HAL_CAN_IRQHandler+0x30c>
 80025d2:	2b30      	cmp	r3, #48	; 0x30
 80025d4:	d822      	bhi.n	800261c <HAL_CAN_IRQHandler+0x334>
 80025d6:	2b10      	cmp	r3, #16
 80025d8:	d002      	beq.n	80025e0 <HAL_CAN_IRQHandler+0x2f8>
 80025da:	2b20      	cmp	r3, #32
 80025dc:	d005      	beq.n	80025ea <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80025de:	e01d      	b.n	800261c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	f043 0308 	orr.w	r3, r3, #8
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025e8:	e019      	b.n	800261e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	f043 0310 	orr.w	r3, r3, #16
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025f2:	e014      	b.n	800261e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	f043 0320 	orr.w	r3, r3, #32
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025fc:	e00f      	b.n	800261e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002606:	e00a      	b.n	800261e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002610:	e005      	b.n	800261e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800261a:	e000      	b.n	800261e <HAL_CAN_IRQHandler+0x336>
            break;
 800261c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	699a      	ldr	r2, [r3, #24]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800262c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2204      	movs	r2, #4
 8002634:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f836 	bl	80026ba <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800264e:	bf00      	nop
 8002650:	3728      	adds	r7, #40	; 0x28
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <__NVIC_SetPriorityGrouping+0x40>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026ec:	4013      	ands	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <__NVIC_SetPriorityGrouping+0x44>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026fe:	4a04      	ldr	r2, [pc, #16]	; (8002710 <__NVIC_SetPriorityGrouping+0x40>)
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	60d3      	str	r3, [r2, #12]
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000ed00 	.word	0xe000ed00
 8002714:	05fa0000 	.word	0x05fa0000

08002718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800271c:	4b04      	ldr	r3, [pc, #16]	; (8002730 <__NVIC_GetPriorityGrouping+0x18>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	0a1b      	lsrs	r3, r3, #8
 8002722:	f003 0307 	and.w	r3, r3, #7
}
 8002726:	4618      	mov	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	2b00      	cmp	r3, #0
 8002744:	db0b      	blt.n	800275e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	f003 021f 	and.w	r2, r3, #31
 800274c:	4907      	ldr	r1, [pc, #28]	; (800276c <__NVIC_EnableIRQ+0x38>)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	2001      	movs	r0, #1
 8002756:	fa00 f202 	lsl.w	r2, r0, r2
 800275a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	e000e100 	.word	0xe000e100

08002770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	6039      	str	r1, [r7, #0]
 800277a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002780:	2b00      	cmp	r3, #0
 8002782:	db0a      	blt.n	800279a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	b2da      	uxtb	r2, r3
 8002788:	490c      	ldr	r1, [pc, #48]	; (80027bc <__NVIC_SetPriority+0x4c>)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	0112      	lsls	r2, r2, #4
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	440b      	add	r3, r1
 8002794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002798:	e00a      	b.n	80027b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	4908      	ldr	r1, [pc, #32]	; (80027c0 <__NVIC_SetPriority+0x50>)
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	3b04      	subs	r3, #4
 80027a8:	0112      	lsls	r2, r2, #4
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	440b      	add	r3, r1
 80027ae:	761a      	strb	r2, [r3, #24]
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000e100 	.word	0xe000e100
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b089      	sub	sp, #36	; 0x24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f1c3 0307 	rsb	r3, r3, #7
 80027de:	2b04      	cmp	r3, #4
 80027e0:	bf28      	it	cs
 80027e2:	2304      	movcs	r3, #4
 80027e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3304      	adds	r3, #4
 80027ea:	2b06      	cmp	r3, #6
 80027ec:	d902      	bls.n	80027f4 <NVIC_EncodePriority+0x30>
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3b03      	subs	r3, #3
 80027f2:	e000      	b.n	80027f6 <NVIC_EncodePriority+0x32>
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f8:	f04f 32ff 	mov.w	r2, #4294967295
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43da      	mvns	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	401a      	ands	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800280c:	f04f 31ff 	mov.w	r1, #4294967295
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	fa01 f303 	lsl.w	r3, r1, r3
 8002816:	43d9      	mvns	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281c:	4313      	orrs	r3, r2
         );
}
 800281e:	4618      	mov	r0, r3
 8002820:	3724      	adds	r7, #36	; 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff ff4c 	bl	80026d0 <__NVIC_SetPriorityGrouping>
}
 8002838:	bf00      	nop
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002852:	f7ff ff61 	bl	8002718 <__NVIC_GetPriorityGrouping>
 8002856:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	68b9      	ldr	r1, [r7, #8]
 800285c:	6978      	ldr	r0, [r7, #20]
 800285e:	f7ff ffb1 	bl	80027c4 <NVIC_EncodePriority>
 8002862:	4602      	mov	r2, r0
 8002864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002868:	4611      	mov	r1, r2
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ff80 	bl	8002770 <__NVIC_SetPriority>
}
 8002870:	bf00      	nop
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ff54 	bl	8002734 <__NVIC_EnableIRQ>
}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028a0:	f7ff f9e0 	bl	8001c64 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e099      	b.n	80029e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0201 	bic.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028d0:	e00f      	b.n	80028f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028d2:	f7ff f9c7 	bl	8001c64 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b05      	cmp	r3, #5
 80028de:	d908      	bls.n	80028f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2220      	movs	r2, #32
 80028e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2203      	movs	r2, #3
 80028ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e078      	b.n	80029e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1e8      	bne.n	80028d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	4b38      	ldr	r3, [pc, #224]	; (80029ec <HAL_DMA_Init+0x158>)
 800290c:	4013      	ands	r3, r2
 800290e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800291e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800292a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002936:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	4313      	orrs	r3, r2
 8002942:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	2b04      	cmp	r3, #4
 800294a:	d107      	bne.n	800295c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	4313      	orrs	r3, r2
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4313      	orrs	r3, r2
 800295a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f023 0307 	bic.w	r3, r3, #7
 8002972:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	4313      	orrs	r3, r2
 800297c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	2b04      	cmp	r3, #4
 8002984:	d117      	bne.n	80029b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	4313      	orrs	r3, r2
 800298e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00e      	beq.n	80029b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 fa7b 	bl	8002e94 <DMA_CheckFifoParam>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2240      	movs	r2, #64	; 0x40
 80029a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80029b2:	2301      	movs	r3, #1
 80029b4:	e016      	b.n	80029e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fa32 	bl	8002e28 <DMA_CalcBaseAndBitshift>
 80029c4:	4603      	mov	r3, r0
 80029c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029cc:	223f      	movs	r2, #63	; 0x3f
 80029ce:	409a      	lsls	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	e010803f 	.word	0xe010803f

080029f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029fe:	f7ff f931 	bl	8001c64 <HAL_GetTick>
 8002a02:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d008      	beq.n	8002a22 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2280      	movs	r2, #128	; 0x80
 8002a14:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e052      	b.n	8002ac8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0216 	bic.w	r2, r2, #22
 8002a30:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695a      	ldr	r2, [r3, #20]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a40:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d103      	bne.n	8002a52 <HAL_DMA_Abort+0x62>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d007      	beq.n	8002a62 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0208 	bic.w	r2, r2, #8
 8002a60:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0201 	bic.w	r2, r2, #1
 8002a70:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a72:	e013      	b.n	8002a9c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a74:	f7ff f8f6 	bl	8001c64 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b05      	cmp	r3, #5
 8002a80:	d90c      	bls.n	8002a9c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2220      	movs	r2, #32
 8002a86:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e015      	b.n	8002ac8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1e4      	bne.n	8002a74 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aae:	223f      	movs	r2, #63	; 0x3f
 8002ab0:	409a      	lsls	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d004      	beq.n	8002aee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2280      	movs	r2, #128	; 0x80
 8002ae8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e00c      	b.n	8002b08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2205      	movs	r2, #5
 8002af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0201 	bic.w	r2, r2, #1
 8002b04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002b20:	4b8e      	ldr	r3, [pc, #568]	; (8002d5c <HAL_DMA_IRQHandler+0x248>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a8e      	ldr	r2, [pc, #568]	; (8002d60 <HAL_DMA_IRQHandler+0x24c>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	0a9b      	lsrs	r3, r3, #10
 8002b2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3e:	2208      	movs	r2, #8
 8002b40:	409a      	lsls	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d01a      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d013      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0204 	bic.w	r2, r2, #4
 8002b66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6c:	2208      	movs	r2, #8
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b78:	f043 0201 	orr.w	r2, r3, #1
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b84:	2201      	movs	r2, #1
 8002b86:	409a      	lsls	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d012      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00b      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	409a      	lsls	r2, r3
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bae:	f043 0202 	orr.w	r2, r3, #2
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bba:	2204      	movs	r2, #4
 8002bbc:	409a      	lsls	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d012      	beq.n	8002bec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00b      	beq.n	8002bec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd8:	2204      	movs	r2, #4
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be4:	f043 0204 	orr.w	r2, r3, #4
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf0:	2210      	movs	r2, #16
 8002bf2:	409a      	lsls	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d043      	beq.n	8002c84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d03c      	beq.n	8002c84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0e:	2210      	movs	r2, #16
 8002c10:	409a      	lsls	r2, r3
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d018      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d108      	bne.n	8002c44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d024      	beq.n	8002c84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	4798      	blx	r3
 8002c42:	e01f      	b.n	8002c84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d01b      	beq.n	8002c84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	4798      	blx	r3
 8002c54:	e016      	b.n	8002c84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d107      	bne.n	8002c74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0208 	bic.w	r2, r2, #8
 8002c72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c88:	2220      	movs	r2, #32
 8002c8a:	409a      	lsls	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 808f 	beq.w	8002db4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 8087 	beq.w	8002db4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002caa:	2220      	movs	r2, #32
 8002cac:	409a      	lsls	r2, r3
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b05      	cmp	r3, #5
 8002cbc:	d136      	bne.n	8002d2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0216 	bic.w	r2, r2, #22
 8002ccc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695a      	ldr	r2, [r3, #20]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cdc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d103      	bne.n	8002cee <HAL_DMA_IRQHandler+0x1da>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d007      	beq.n	8002cfe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0208 	bic.w	r2, r2, #8
 8002cfc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d02:	223f      	movs	r2, #63	; 0x3f
 8002d04:	409a      	lsls	r2, r3
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d07e      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	4798      	blx	r3
        }
        return;
 8002d2a:	e079      	b.n	8002e20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d01d      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10d      	bne.n	8002d64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d031      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	4798      	blx	r3
 8002d58:	e02c      	b.n	8002db4 <HAL_DMA_IRQHandler+0x2a0>
 8002d5a:	bf00      	nop
 8002d5c:	20000000 	.word	0x20000000
 8002d60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d023      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	4798      	blx	r3
 8002d74:	e01e      	b.n	8002db4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10f      	bne.n	8002da4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0210 	bic.w	r2, r2, #16
 8002d92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d032      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d022      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2205      	movs	r2, #5
 8002dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0201 	bic.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	3301      	adds	r3, #1
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d307      	bcc.n	8002dfc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f2      	bne.n	8002de0 <HAL_DMA_IRQHandler+0x2cc>
 8002dfa:	e000      	b.n	8002dfe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002dfc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d005      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	4798      	blx	r3
 8002e1e:	e000      	b.n	8002e22 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e20:	bf00      	nop
    }
  }
}
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	3b10      	subs	r3, #16
 8002e38:	4a13      	ldr	r2, [pc, #76]	; (8002e88 <DMA_CalcBaseAndBitshift+0x60>)
 8002e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3e:	091b      	lsrs	r3, r3, #4
 8002e40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e42:	4a12      	ldr	r2, [pc, #72]	; (8002e8c <DMA_CalcBaseAndBitshift+0x64>)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4413      	add	r3, r2
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d908      	bls.n	8002e68 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <DMA_CalcBaseAndBitshift+0x68>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	1d1a      	adds	r2, r3, #4
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	659a      	str	r2, [r3, #88]	; 0x58
 8002e66:	e006      	b.n	8002e76 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <DMA_CalcBaseAndBitshift+0x68>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	aaaaaaab 	.word	0xaaaaaaab
 8002e8c:	0801f9a8 	.word	0x0801f9a8
 8002e90:	fffffc00 	.word	0xfffffc00

08002e94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d11f      	bne.n	8002eee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d856      	bhi.n	8002f62 <DMA_CheckFifoParam+0xce>
 8002eb4:	a201      	add	r2, pc, #4	; (adr r2, 8002ebc <DMA_CheckFifoParam+0x28>)
 8002eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eba:	bf00      	nop
 8002ebc:	08002ecd 	.word	0x08002ecd
 8002ec0:	08002edf 	.word	0x08002edf
 8002ec4:	08002ecd 	.word	0x08002ecd
 8002ec8:	08002f63 	.word	0x08002f63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d046      	beq.n	8002f66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002edc:	e043      	b.n	8002f66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ee6:	d140      	bne.n	8002f6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eec:	e03d      	b.n	8002f6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ef6:	d121      	bne.n	8002f3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d837      	bhi.n	8002f6e <DMA_CheckFifoParam+0xda>
 8002efe:	a201      	add	r2, pc, #4	; (adr r2, 8002f04 <DMA_CheckFifoParam+0x70>)
 8002f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f04:	08002f15 	.word	0x08002f15
 8002f08:	08002f1b 	.word	0x08002f1b
 8002f0c:	08002f15 	.word	0x08002f15
 8002f10:	08002f2d 	.word	0x08002f2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
      break;
 8002f18:	e030      	b.n	8002f7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d025      	beq.n	8002f72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f2a:	e022      	b.n	8002f72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f34:	d11f      	bne.n	8002f76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f3a:	e01c      	b.n	8002f76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d903      	bls.n	8002f4a <DMA_CheckFifoParam+0xb6>
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d003      	beq.n	8002f50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f48:	e018      	b.n	8002f7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	73fb      	strb	r3, [r7, #15]
      break;
 8002f4e:	e015      	b.n	8002f7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00e      	beq.n	8002f7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f60:	e00b      	b.n	8002f7a <DMA_CheckFifoParam+0xe6>
      break;
 8002f62:	bf00      	nop
 8002f64:	e00a      	b.n	8002f7c <DMA_CheckFifoParam+0xe8>
      break;
 8002f66:	bf00      	nop
 8002f68:	e008      	b.n	8002f7c <DMA_CheckFifoParam+0xe8>
      break;
 8002f6a:	bf00      	nop
 8002f6c:	e006      	b.n	8002f7c <DMA_CheckFifoParam+0xe8>
      break;
 8002f6e:	bf00      	nop
 8002f70:	e004      	b.n	8002f7c <DMA_CheckFifoParam+0xe8>
      break;
 8002f72:	bf00      	nop
 8002f74:	e002      	b.n	8002f7c <DMA_CheckFifoParam+0xe8>
      break;   
 8002f76:	bf00      	nop
 8002f78:	e000      	b.n	8002f7c <DMA_CheckFifoParam+0xe8>
      break;
 8002f7a:	bf00      	nop
    }
  } 
  
  return status; 
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop

08002f8c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e06a      	b.n	8003074 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d106      	bne.n	8002fb6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2223      	movs	r2, #35	; 0x23
 8002fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f005 f987 	bl	80082c4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb6:	4b31      	ldr	r3, [pc, #196]	; (800307c <HAL_ETH_Init+0xf0>)
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	4a30      	ldr	r2, [pc, #192]	; (800307c <HAL_ETH_Init+0xf0>)
 8002fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fc2:	4b2e      	ldr	r3, [pc, #184]	; (800307c <HAL_ETH_Init+0xf0>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002fce:	4b2c      	ldr	r3, [pc, #176]	; (8003080 <HAL_ETH_Init+0xf4>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	4a2b      	ldr	r2, [pc, #172]	; (8003080 <HAL_ETH_Init+0xf4>)
 8002fd4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002fd8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002fda:	4b29      	ldr	r3, [pc, #164]	; (8003080 <HAL_ETH_Init+0xf4>)
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	4927      	ldr	r1, [pc, #156]	; (8003080 <HAL_ETH_Init+0xf4>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002fe8:	4b25      	ldr	r3, [pc, #148]	; (8003080 <HAL_ETH_Init+0xf4>)
 8002fea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6812      	ldr	r2, [r2, #0]
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003002:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003004:	f7fe fe2e 	bl	8001c64 <HAL_GetTick>
 8003008:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800300a:	e011      	b.n	8003030 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800300c:	f7fe fe2a 	bl	8001c64 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800301a:	d909      	bls.n	8003030 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2204      	movs	r2, #4
 8003020:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	22e0      	movs	r2, #224	; 0xe0
 8003028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e021      	b.n	8003074 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1e4      	bne.n	800300c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 ff4c 	bl	8003ee0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 fff3 	bl	8004034 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f001 f849 	bl	80040e6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	461a      	mov	r2, r3
 800305a:	2100      	movs	r1, #0
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 ffb1 	bl	8003fc4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2210      	movs	r2, #16
 800306e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40023800 	.word	0x40023800
 8003080:	40013800 	.word	0x40013800

08003084 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003092:	2b10      	cmp	r3, #16
 8003094:	d17b      	bne.n	800318e <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2223      	movs	r2, #35	; 0x23
 800309a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80030b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	4b35      	ldr	r3, [pc, #212]	; (8003198 <HAL_ETH_Start_IT+0x114>)
 80030c2:	430b      	orrs	r3, r1
 80030c4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80030d8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2204      	movs	r2, #4
 80030e0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f9fc 	bl	80034e0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0208 	orr.w	r2, r2, #8
 80030f6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003100:	2001      	movs	r0, #1
 8003102:	f7fe fdbb 	bl	8001c7c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0204 	orr.w	r2, r2, #4
 800311c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003126:	2001      	movs	r0, #1
 8003128:	f7fe fda8 	bl	8001c7c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fd74 	bl	8003c22 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800314c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003150:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	f043 0302 	orr.w	r3, r3, #2
 8003164:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003168:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003172:	69d9      	ldr	r1, [r3, #28]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	4b08      	ldr	r3, [pc, #32]	; (800319c <HAL_ETH_Start_IT+0x118>)
 800317a:	430b      	orrs	r3, r1
 800317c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003180:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2223      	movs	r2, #35	; 0x23
 8003186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800318a:	2300      	movs	r3, #0
 800318c:	e000      	b.n	8003190 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
  }
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	00020060 	.word	0x00020060
 800319c:	0001a0c1 	.word	0x0001a0c1

080031a0 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ae:	2b23      	cmp	r3, #35	; 0x23
 80031b0:	d16e      	bne.n	8003290 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2223      	movs	r2, #35	; 0x23
 80031b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031c2:	69d9      	ldr	r1, [r3, #28]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	4b34      	ldr	r3, [pc, #208]	; (800329c <HAL_ETH_Stop_IT+0xfc>)
 80031ca:	400b      	ands	r3, r1
 80031cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80031d0:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80031e8:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	f023 0302 	bic.w	r3, r3, #2
 80031fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003200:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0204 	bic.w	r2, r2, #4
 8003210:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800321a:	2001      	movs	r0, #1
 800321c:	f7fe fd2e 	bl	8001c7c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 fcfa 	bl	8003c22 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0208 	bic.w	r2, r2, #8
 800323c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003246:	2001      	movs	r0, #1
 8003248:	f7fe fd18 	bl	8001c7c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	e00e      	b.n	8003278 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	3212      	adds	r2, #18
 8003260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003264:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	3301      	adds	r3, #1
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	2b03      	cmp	r3, #3
 800327c:	d9ed      	bls.n	800325a <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2210      	movs	r2, #16
 8003288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	e000      	b.n	8003292 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
  }
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	fffe5f3e 	.word	0xfffe5f3e

080032a0 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d109      	bne.n	80032c4 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b6:	f043 0201 	orr.w	r2, r3, #1
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e045      	b.n	8003350 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ca:	2b23      	cmp	r3, #35	; 0x23
 80032cc:	d13f      	bne.n	800334e <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80032d6:	2201      	movs	r2, #1
 80032d8:	6839      	ldr	r1, [r7, #0]
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 ff70 	bl	80041c0 <ETH_Prepare_Tx_Descriptors>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d009      	beq.n	80032fa <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ec:	f043 0202 	orr.w	r2, r3, #2
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e02a      	b.n	8003350 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80032fa:	f3bf 8f4f 	dsb	sy
}
 80032fe:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	629a      	str	r2, [r3, #40]	; 0x28
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	2b03      	cmp	r3, #3
 8003310:	d904      	bls.n	800331c <HAL_ETH_Transmit_IT+0x7c>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003316:	1f1a      	subs	r2, r3, #4
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	f003 0304 	and.w	r3, r3, #4
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00d      	beq.n	800334a <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003336:	461a      	mov	r2, r3
 8003338:	2304      	movs	r3, #4
 800333a:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003344:	461a      	mov	r2, r3
 8003346:	2300      	movs	r3, #0
 8003348:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	e000      	b.n	8003350 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
  }
}
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003366:	2300      	movs	r3, #0
 8003368:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d109      	bne.n	8003384 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003376:	f043 0201 	orr.w	r2, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0a8      	b.n	80034d6 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800338a:	2b23      	cmp	r3, #35	; 0x23
 800338c:	d001      	beq.n	8003392 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e0a1      	b.n	80034d6 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003396:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	69fa      	ldr	r2, [r7, #28]
 800339c:	3212      	adds	r2, #18
 800339e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033a8:	f1c3 0304 	rsb	r3, r3, #4
 80033ac:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80033ae:	e06a      	b.n	8003486 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d007      	beq.n	80033cc <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	699a      	ldr	r2, [r3, #24]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	69da      	ldr	r2, [r3, #28]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d103      	bne.n	80033e0 <HAL_ETH_ReadData+0x88>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d040      	beq.n	8003462 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00c      	beq.n	8003424 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	0c1b      	lsrs	r3, r3, #16
 8003410:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003414:	3b04      	subs	r3, #4
 8003416:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8003420:	2301      	movs	r3, #1
 8003422:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800343c:	461a      	mov	r2, r3
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	b29b      	uxth	r3, r3
 8003442:	f005 f90b 	bl	800865c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	441a      	add	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	2200      	movs	r2, #0
 8003460:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3301      	adds	r3, #1
 8003466:	61fb      	str	r3, [r7, #28]
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	2b03      	cmp	r3, #3
 800346c:	d902      	bls.n	8003474 <HAL_ETH_ReadData+0x11c>
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	3b04      	subs	r3, #4
 8003472:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	3212      	adds	r2, #18
 800347a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800347e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	3301      	adds	r3, #1
 8003484:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	db06      	blt.n	800349c <HAL_ETH_ReadData+0x144>
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	429a      	cmp	r2, r3
 8003494:	d202      	bcs.n	800349c <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8003496:	7bfb      	ldrb	r3, [r7, #15]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d089      	beq.n	80033b0 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	441a      	add	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f815 	bl	80034e0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69fa      	ldr	r2, [r7, #28]
 80034ba:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d108      	bne.n	80034d4 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80034d0:	2300      	movs	r3, #0
 80034d2:	e000      	b.n	80034d6 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3720      	adds	r7, #32
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80034ec:	2301      	movs	r3, #1
 80034ee:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034f4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	3212      	adds	r2, #18
 80034fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003500:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003506:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003508:	e040      	b.n	800358c <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d112      	bne.n	8003538 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003512:	f107 030c 	add.w	r3, r7, #12
 8003516:	4618      	mov	r0, r3
 8003518:	f005 f870 	bl	80085fc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d102      	bne.n	8003528 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	74fb      	strb	r3, [r7, #19]
 8003526:	e007      	b.n	8003538 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	461a      	mov	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	461a      	mov	r2, r3
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003538:	7cfb      	ldrb	r3, [r7, #19]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d026      	beq.n	800358c <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003542:	2b00      	cmp	r3, #0
 8003544:	d103      	bne.n	800354e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	4a1e      	ldr	r2, [pc, #120]	; (80035c4 <ETH_UpdateDescriptor+0xe4>)
 800354a:	605a      	str	r2, [r3, #4]
 800354c:	e003      	b.n	8003556 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8003554:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003556:	f3bf 8f5f 	dmb	sy
}
 800355a:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	3301      	adds	r3, #1
 800356c:	61fb      	str	r3, [r7, #28]
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	2b03      	cmp	r3, #3
 8003572:	d902      	bls.n	800357a <ETH_UpdateDescriptor+0x9a>
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	3b04      	subs	r3, #4
 8003578:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69fa      	ldr	r2, [r7, #28]
 800357e:	3212      	adds	r2, #18
 8003580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003584:	617b      	str	r3, [r7, #20]
      desccount--;
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	3b01      	subs	r3, #1
 800358a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <ETH_UpdateDescriptor+0xb8>
 8003592:	7cfb      	ldrb	r3, [r7, #19]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1b8      	bne.n	800350a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d00c      	beq.n	80035bc <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035aa:	461a      	mov	r2, r3
 80035ac:	2300      	movs	r3, #0
 80035ae:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69fa      	ldr	r2, [r7, #28]
 80035b4:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80035bc:	bf00      	nop
 80035be:	3720      	adds	r7, #32
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	80004600 	.word	0x80004600

080035c8 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3318      	adds	r3, #24
 80035d4:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e0:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80035e2:	2301      	movs	r3, #1
 80035e4:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80035e6:	e03f      	b.n	8003668 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80035e8:	2301      	movs	r3, #1
 80035ea:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	3304      	adds	r3, #4
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	3301      	adds	r3, #1
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8003610:	7bbb      	ldrb	r3, [r7, #14]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d028      	beq.n	8003668 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68d9      	ldr	r1, [r3, #12]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4613      	mov	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	440b      	add	r3, r1
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	db1b      	blt.n	8003664 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	3304      	adds	r3, #4
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	4618      	mov	r0, r3
 800363a:	f005 f851 	bl	80086e0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	3304      	adds	r3, #4
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	2200      	movs	r2, #0
 800364a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	3301      	adds	r3, #1
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	62da      	str	r2, [r3, #44]	; 0x2c
 8003662:	e001      	b.n	8003668 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <HAL_ETH_ReleaseTxPacket+0xac>
 800366e:	7bfb      	ldrb	r3, [r7, #15]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1b9      	bne.n	80035e8 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003696:	2b40      	cmp	r3, #64	; 0x40
 8003698:	d112      	bne.n	80036c0 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a8:	2b40      	cmp	r3, #64	; 0x40
 80036aa:	d109      	bne.n	80036c0 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036b4:	461a      	mov	r2, r3
 80036b6:	4b50      	ldr	r3, [pc, #320]	; (80037f8 <HAL_ETH_IRQHandler+0x178>)
 80036b8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f004 fb64 	bl	8007d88 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d113      	bne.n	80036fa <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d10a      	bne.n	80036fa <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ec:	461a      	mov	r2, r3
 80036ee:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80036f2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f004 fb57 	bl	8007da8 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800370c:	d14c      	bne.n	80037a8 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800371c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003720:	d142      	bne.n	80037a8 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003728:	f043 0208 	orr.w	r2, r3, #8
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003744:	d11a      	bne.n	800377c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800374e:	695a      	ldr	r2, [r3, #20]
 8003750:	4b2a      	ldr	r3, [pc, #168]	; (80037fc <HAL_ETH_IRQHandler+0x17c>)
 8003752:	4013      	ands	r3, r2
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 800376c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003770:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	22e0      	movs	r2, #224	; 0xe0
 8003776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800377a:	e012      	b.n	80037a2 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003784:	695a      	ldr	r2, [r3, #20]
 8003786:	f248 6380 	movw	r3, #34432	; 0x8680
 800378a:	4013      	ands	r3, r2
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800379a:	461a      	mov	r2, r3
 800379c:	f248 6380 	movw	r3, #34432	; 0x8680
 80037a0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f004 fb10 	bl	8007dc8 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d10e      	bne.n	80037d4 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f81c 	bl	8003804 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80037d4:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <HAL_ETH_IRQHandler+0x180>)
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d006      	beq.n	80037ee <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80037e0:	4b07      	ldr	r3, [pc, #28]	; (8003800 <HAL_ETH_IRQHandler+0x180>)
 80037e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80037e6:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f815 	bl	8003818 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	00010040 	.word	0x00010040
 80037fc:	007e2000 	.word	0x007e2000
 8003800:	40013c00 	.word	0x40013c00

08003804 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f003 031c 	and.w	r3, r3, #28
 8003848:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	02db      	lsls	r3, r3, #11
 800384e:	b29b      	uxth	r3, r3
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	4313      	orrs	r3, r2
 8003854:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	019b      	lsls	r3, r3, #6
 800385a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	4313      	orrs	r3, r2
 8003862:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f023 0302 	bic.w	r3, r3, #2
 800386a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800387c:	f7fe f9f2 	bl	8001c64 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003882:	e00d      	b.n	80038a0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003884:	f7fe f9ee 	bl	8001c64 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003892:	d301      	bcc.n	8003898 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e010      	b.n	80038ba <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1ec      	bne.n	8003884 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	461a      	mov	r2, r3
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b086      	sub	sp, #24
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	60f8      	str	r0, [r7, #12]
 80038ca:	60b9      	str	r1, [r7, #8]
 80038cc:	607a      	str	r2, [r7, #4]
 80038ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f003 031c 	and.w	r3, r3, #28
 80038de:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	02db      	lsls	r3, r3, #11
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	019b      	lsls	r3, r3, #6
 80038f0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f043 0302 	orr.w	r3, r3, #2
 8003900:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f043 0301 	orr.w	r3, r3, #1
 8003908:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800391c:	f7fe f9a2 	bl	8001c64 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003922:	e00d      	b.n	8003940 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003924:	f7fe f99e 	bl	8001c64 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003932:	d301      	bcc.n	8003938 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e009      	b.n	800394c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1ec      	bne.n	8003924 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0d9      	b.n	8003b1c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0310 	and.w	r3, r3, #16
 8003972:	2b00      	cmp	r3, #0
 8003974:	bf14      	ite	ne
 8003976:	2301      	movne	r3, #1
 8003978:	2300      	moveq	r3, #0
 800397a:	b2db      	uxtb	r3, r3
 800397c:	461a      	mov	r2, r3
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	461a      	mov	r2, r3
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bf14      	ite	ne
 80039bc:	2301      	movne	r3, #1
 80039be:	2300      	moveq	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	bf0c      	ite	eq
 80039d6:	2301      	moveq	r3, #1
 80039d8:	2300      	movne	r3, #0
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	461a      	mov	r2, r3
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	bf14      	ite	ne
 80039f0:	2301      	movne	r3, #1
 80039f2:	2300      	moveq	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	461a      	mov	r2, r3
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	bf0c      	ite	eq
 8003a26:	2301      	moveq	r3, #1
 8003a28:	2300      	movne	r3, #0
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	bf0c      	ite	eq
 8003a40:	2301      	moveq	r3, #1
 8003a42:	2300      	movne	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	461a      	mov	r2, r3
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	bf14      	ite	ne
 8003a5a:	2301      	movne	r3, #1
 8003a5c:	2300      	moveq	r3, #0
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	461a      	mov	r2, r3
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	bf14      	ite	ne
 8003a82:	2301      	movne	r3, #1
 8003a84:	2300      	moveq	r3, #0
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	461a      	mov	r2, r3
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bf14      	ite	ne
 8003a9c:	2301      	movne	r3, #1
 8003a9e:	2300      	moveq	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bf0c      	ite	eq
 8003ab8:	2301      	moveq	r3, #1
 8003aba:	2300      	movne	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	461a      	mov	r2, r3
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	0c1b      	lsrs	r3, r3, #16
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	bf14      	ite	ne
 8003af0:	2301      	movne	r3, #1
 8003af2:	2300      	moveq	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	461a      	mov	r2, r3
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	bf14      	ite	ne
 8003b0c:	2301      	movne	r3, #1
 8003b0e:	2300      	moveq	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e00b      	b.n	8003b54 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b42:	2b10      	cmp	r3, #16
 8003b44:	d105      	bne.n	8003b52 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003b46:	6839      	ldr	r1, [r7, #0]
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f88f 	bl	8003c6c <ETH_SetMACConfig>

    return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	e000      	b.n	8003b54 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
  }
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 031c 	bic.w	r3, r3, #28
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003b74:	f001 fc80 	bl	8005478 <HAL_RCC_GetHCLKFreq>
 8003b78:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	4a1d      	ldr	r2, [pc, #116]	; (8003bf4 <HAL_ETH_SetMDIOClockRange+0x98>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d908      	bls.n	8003b94 <HAL_ETH_SetMDIOClockRange+0x38>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	4a1c      	ldr	r2, [pc, #112]	; (8003bf8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d804      	bhi.n	8003b94 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f043 0308 	orr.w	r3, r3, #8
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	e027      	b.n	8003be4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4a18      	ldr	r2, [pc, #96]	; (8003bf8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d908      	bls.n	8003bae <HAL_ETH_SetMDIOClockRange+0x52>
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4a17      	ldr	r2, [pc, #92]	; (8003bfc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d204      	bcs.n	8003bae <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f043 030c 	orr.w	r3, r3, #12
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	e01a      	b.n	8003be4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	4a12      	ldr	r2, [pc, #72]	; (8003bfc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d303      	bcc.n	8003bbe <HAL_ETH_SetMDIOClockRange+0x62>
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	4a11      	ldr	r2, [pc, #68]	; (8003c00 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d911      	bls.n	8003be2 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	4a0f      	ldr	r2, [pc, #60]	; (8003c00 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d908      	bls.n	8003bd8 <HAL_ETH_SetMDIOClockRange+0x7c>
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	4a0e      	ldr	r2, [pc, #56]	; (8003c04 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d804      	bhi.n	8003bd8 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f043 0304 	orr.w	r3, r3, #4
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	e005      	b.n	8003be4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f043 0310 	orr.w	r3, r3, #16
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	e000      	b.n	8003be4 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003be2:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	611a      	str	r2, [r3, #16]
}
 8003bec:	bf00      	nop
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	01312cff 	.word	0x01312cff
 8003bf8:	02160ebf 	.word	0x02160ebf
 8003bfc:	03938700 	.word	0x03938700
 8003c00:	05f5e0ff 	.word	0x05f5e0ff
 8003c04:	08f0d17f 	.word	0x08f0d17f

08003c08 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b084      	sub	sp, #16
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6812      	ldr	r2, [r2, #0]
 8003c3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c44:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c52:	2001      	movs	r0, #1
 8003c54:	f7fe f812 	bl	8001c7c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c62:	6193      	str	r3, [r2, #24]
}
 8003c64:	bf00      	nop
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4b51      	ldr	r3, [pc, #324]	; (8003dc8 <ETH_SetMACConfig+0x15c>)
 8003c82:	4013      	ands	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	7c1b      	ldrb	r3, [r3, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d102      	bne.n	8003c94 <ETH_SetMACConfig+0x28>
 8003c8e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003c92:	e000      	b.n	8003c96 <ETH_SetMACConfig+0x2a>
 8003c94:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	7c5b      	ldrb	r3, [r3, #17]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d102      	bne.n	8003ca4 <ETH_SetMACConfig+0x38>
 8003c9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ca2:	e000      	b.n	8003ca6 <ETH_SetMACConfig+0x3a>
 8003ca4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003ca6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003cac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	7fdb      	ldrb	r3, [r3, #31]
 8003cb2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003cb4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003cba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	7f92      	ldrb	r2, [r2, #30]
 8003cc0:	2a00      	cmp	r2, #0
 8003cc2:	d102      	bne.n	8003cca <ETH_SetMACConfig+0x5e>
 8003cc4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cc8:	e000      	b.n	8003ccc <ETH_SetMACConfig+0x60>
 8003cca:	2200      	movs	r2, #0
                        macconf->Speed |
 8003ccc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	7f1b      	ldrb	r3, [r3, #28]
 8003cd2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003cd4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003cda:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	791b      	ldrb	r3, [r3, #4]
 8003ce0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003ce2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003cea:	2a00      	cmp	r2, #0
 8003cec:	d102      	bne.n	8003cf4 <ETH_SetMACConfig+0x88>
 8003cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cf2:	e000      	b.n	8003cf6 <ETH_SetMACConfig+0x8a>
 8003cf4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003cf6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	7bdb      	ldrb	r3, [r3, #15]
 8003cfc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003cfe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003d04:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d0c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d26:	2001      	movs	r0, #1
 8003d28:	f7fd ffa8 	bl	8001c7c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003d42:	4013      	ands	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d4a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003d52:	2a00      	cmp	r2, #0
 8003d54:	d101      	bne.n	8003d5a <ETH_SetMACConfig+0xee>
 8003d56:	2280      	movs	r2, #128	; 0x80
 8003d58:	e000      	b.n	8003d5c <ETH_SetMACConfig+0xf0>
 8003d5a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d5c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003d62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003d6a:	2a01      	cmp	r2, #1
 8003d6c:	d101      	bne.n	8003d72 <ETH_SetMACConfig+0x106>
 8003d6e:	2208      	movs	r2, #8
 8003d70:	e000      	b.n	8003d74 <ETH_SetMACConfig+0x108>
 8003d72:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003d74:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003d7c:	2a01      	cmp	r2, #1
 8003d7e:	d101      	bne.n	8003d84 <ETH_SetMACConfig+0x118>
 8003d80:	2204      	movs	r2, #4
 8003d82:	e000      	b.n	8003d86 <ETH_SetMACConfig+0x11a>
 8003d84:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003d86:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003d8e:	2a01      	cmp	r2, #1
 8003d90:	d101      	bne.n	8003d96 <ETH_SetMACConfig+0x12a>
 8003d92:	2202      	movs	r2, #2
 8003d94:	e000      	b.n	8003d98 <ETH_SetMACConfig+0x12c>
 8003d96:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003db0:	2001      	movs	r0, #1
 8003db2:	f7fd ff63 	bl	8001c7c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	619a      	str	r2, [r3, #24]
}
 8003dbe:	bf00      	nop
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	ff20810f 	.word	0xff20810f

08003dcc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	4b3d      	ldr	r3, [pc, #244]	; (8003edc <ETH_SetDMAConfig+0x110>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	7b1b      	ldrb	r3, [r3, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d102      	bne.n	8003df8 <ETH_SetDMAConfig+0x2c>
 8003df2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003df6:	e000      	b.n	8003dfa <ETH_SetDMAConfig+0x2e>
 8003df8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	7b5b      	ldrb	r3, [r3, #13]
 8003dfe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003e00:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	7f52      	ldrb	r2, [r2, #29]
 8003e06:	2a00      	cmp	r2, #0
 8003e08:	d102      	bne.n	8003e10 <ETH_SetDMAConfig+0x44>
 8003e0a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e0e:	e000      	b.n	8003e12 <ETH_SetDMAConfig+0x46>
 8003e10:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003e12:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	7b9b      	ldrb	r3, [r3, #14]
 8003e18:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003e1a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003e20:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	7f1b      	ldrb	r3, [r3, #28]
 8003e26:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003e28:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	7f9b      	ldrb	r3, [r3, #30]
 8003e2e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003e30:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003e36:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e3e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003e40:	4313      	orrs	r3, r2
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e50:	461a      	mov	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e62:	2001      	movs	r0, #1
 8003e64:	f7fd ff0a 	bl	8001c7c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e70:	461a      	mov	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	791b      	ldrb	r3, [r3, #4]
 8003e7a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e80:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003e86:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003e8c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e94:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003e96:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003e9e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003ea4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6812      	ldr	r2, [r2, #0]
 8003eaa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003eae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003eb2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ec0:	2001      	movs	r0, #1
 8003ec2:	f7fd fedb 	bl	8001c7c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ece:	461a      	mov	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6013      	str	r3, [r2, #0]
}
 8003ed4:	bf00      	nop
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	f8de3f23 	.word	0xf8de3f23

08003ee0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b0a6      	sub	sp, #152	; 0x98
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003efe:	2301      	movs	r3, #1
 8003f00:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003f10:	2300      	movs	r3, #0
 8003f12:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003f16:	2300      	movs	r3, #0
 8003f18:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003f20:	2300      	movs	r3, #0
 8003f22:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003f30:	2300      	movs	r3, #0
 8003f32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003f36:	2300      	movs	r3, #0
 8003f38:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003f42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f46:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003f48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003f54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f58:	4619      	mov	r1, r3
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff fe86 	bl	8003c6c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003f60:	2301      	movs	r3, #1
 8003f62:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003f64:	2301      	movs	r3, #1
 8003f66:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003f76:	2300      	movs	r3, #0
 8003f78:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003f82:	2300      	movs	r3, #0
 8003f84:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003f86:	2301      	movs	r3, #1
 8003f88:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003f90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f94:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003f96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f9a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003f9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fa0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003fac:	2300      	movs	r3, #0
 8003fae:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003fb0:	f107 0308 	add.w	r3, r7, #8
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7ff ff08 	bl	8003dcc <ETH_SetDMAConfig>
}
 8003fbc:	bf00      	nop
 8003fbe:	3798      	adds	r7, #152	; 0x98
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3305      	adds	r3, #5
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	021b      	lsls	r3, r3, #8
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	3204      	adds	r2, #4
 8003fdc:	7812      	ldrb	r2, [r2, #0]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	4b11      	ldr	r3, [pc, #68]	; (800402c <ETH_MACAddressConfig+0x68>)
 8003fe6:	4413      	add	r3, r2
 8003fe8:	461a      	mov	r2, r3
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3303      	adds	r3, #3
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	061a      	lsls	r2, r3, #24
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3302      	adds	r3, #2
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	041b      	lsls	r3, r3, #16
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3301      	adds	r3, #1
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	021b      	lsls	r3, r3, #8
 8004008:	4313      	orrs	r3, r2
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	7812      	ldrb	r2, [r2, #0]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	4b06      	ldr	r3, [pc, #24]	; (8004030 <ETH_MACAddressConfig+0x6c>)
 8004016:	4413      	add	r3, r2
 8004018:	461a      	mov	r2, r3
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	6013      	str	r3, [r2, #0]
}
 800401e:	bf00      	nop
 8004020:	371c      	adds	r7, #28
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40028040 	.word	0x40028040
 8004030:	40028044 	.word	0x40028044

08004034 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800403c:	2300      	movs	r3, #0
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	e03e      	b.n	80040c0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68d9      	ldr	r1, [r3, #12]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	4613      	mov	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	440b      	add	r3, r1
 8004052:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2200      	movs	r2, #0
 800405e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2200      	movs	r2, #0
 8004064:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	2200      	movs	r2, #0
 800406a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800406c:	68b9      	ldr	r1, [r7, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	3206      	adds	r2, #6
 8004074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d80c      	bhi.n	80040a4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68d9      	ldr	r1, [r3, #12]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	4613      	mov	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	440b      	add	r3, r1
 800409c:	461a      	mov	r2, r3
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	60da      	str	r2, [r3, #12]
 80040a2:	e004      	b.n	80040ae <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	461a      	mov	r2, r3
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3301      	adds	r3, #1
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d9bd      	bls.n	8004042 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d8:	611a      	str	r2, [r3, #16]
}
 80040da:	bf00      	nop
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b085      	sub	sp, #20
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80040ee:	2300      	movs	r3, #0
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	e046      	b.n	8004182 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6919      	ldr	r1, [r3, #16]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	4613      	mov	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	440b      	add	r3, r1
 8004104:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2200      	movs	r2, #0
 8004110:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2200      	movs	r2, #0
 8004116:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2200      	movs	r2, #0
 800411c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2200      	movs	r2, #0
 8004122:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2200      	movs	r2, #0
 8004128:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004130:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8004138:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004146:	68b9      	ldr	r1, [r7, #8]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	3212      	adds	r2, #18
 800414e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b02      	cmp	r3, #2
 8004156:	d80c      	bhi.n	8004172 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6919      	ldr	r1, [r3, #16]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	440b      	add	r3, r1
 800416a:	461a      	mov	r2, r3
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	60da      	str	r2, [r3, #12]
 8004170:	e004      	b.n	800417c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	461a      	mov	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	3301      	adds	r3, #1
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2b03      	cmp	r3, #3
 8004186:	d9b5      	bls.n	80040f4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b2:	60da      	str	r2, [r3, #12]
}
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b08d      	sub	sp, #52	; 0x34
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	3318      	adds	r3, #24
 80041d0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80041de:	2300      	movs	r3, #0
 80041e0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ea:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80041f2:	2300      	movs	r3, #0
 80041f4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004202:	d007      	beq.n	8004214 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004208:	3304      	adds	r3, #4
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004214:	2302      	movs	r3, #2
 8004216:	e0ff      	b.n	8004418 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	3301      	adds	r3, #1
 800421c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	4b7d      	ldr	r3, [pc, #500]	; (8004424 <ETH_Prepare_Tx_Descriptors+0x264>)
 800422e:	4013      	ands	r3, r2
 8004230:	69fa      	ldr	r2, [r7, #28]
 8004232:	6852      	ldr	r2, [r2, #4]
 8004234:	431a      	orrs	r2, r3
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d008      	beq.n	8004258 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	431a      	orrs	r2, r3
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0320 	and.w	r3, r3, #32
 8004260:	2b00      	cmp	r3, #0
 8004262:	d008      	beq.n	8004276 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	431a      	orrs	r2, r3
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b00      	cmp	r3, #0
 8004280:	d005      	beq.n	800428e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800429a:	f3bf 8f5f 	dmb	sy
}
 800429e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80042ac:	e082      	b.n	80043b4 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d006      	beq.n	80042ce <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	e005      	b.n	80042da <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80042da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042dc:	3301      	adds	r3, #1
 80042de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d902      	bls.n	80042ec <ETH_Prepare_Tx_Descriptors+0x12c>
 80042e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e8:	3b04      	subs	r3, #4
 80042ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042f4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800430a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800430e:	d007      	beq.n	8004320 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004314:	3304      	adds	r3, #4
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d029      	beq.n	8004374 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800432c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800432e:	2300      	movs	r3, #0
 8004330:	62bb      	str	r3, [r7, #40]	; 0x28
 8004332:	e019      	b.n	8004368 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8004334:	f3bf 8f5f 	dmb	sy
}
 8004338:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800433a:	6a3b      	ldr	r3, [r7, #32]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004348:	3301      	adds	r3, #1
 800434a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800434c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434e:	2b03      	cmp	r3, #3
 8004350:	d902      	bls.n	8004358 <ETH_Prepare_Tx_Descriptors+0x198>
 8004352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004354:	3b04      	subs	r3, #4
 8004356:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800435c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004360:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8004362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004364:	3301      	adds	r3, #1
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28
 8004368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	429a      	cmp	r2, r3
 800436e:	d3e1      	bcc.n	8004334 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8004370:	2302      	movs	r3, #2
 8004372:	e051      	b.n	8004418 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	3301      	adds	r3, #1
 8004378:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	4b25      	ldr	r3, [pc, #148]	; (8004424 <ETH_Prepare_Tx_Descriptors+0x264>)
 8004390:	4013      	ands	r3, r2
 8004392:	69fa      	ldr	r2, [r7, #28]
 8004394:	6852      	ldr	r2, [r2, #4]
 8004396:	431a      	orrs	r2, r3
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	3301      	adds	r3, #1
 80043a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80043a2:	f3bf 8f5f 	dmb	sy
}
 80043a6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f47f af78 	bne.w	80042ae <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d006      	beq.n	80043d2 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	e005      	b.n	80043de <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ee:	6979      	ldr	r1, [r7, #20]
 80043f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f2:	3304      	adds	r3, #4
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	440b      	add	r3, r1
 80043f8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043fe:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004400:	b672      	cpsid	i
}
 8004402:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	4413      	add	r3, r2
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004412:	b662      	cpsie	i
}
 8004414:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3734      	adds	r7, #52	; 0x34
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	ffffe000 	.word	0xffffe000

08004428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004428:	b480      	push	{r7}
 800442a:	b089      	sub	sp, #36	; 0x24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004432:	2300      	movs	r3, #0
 8004434:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800443a:	2300      	movs	r3, #0
 800443c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800443e:	2300      	movs	r3, #0
 8004440:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004442:	2300      	movs	r3, #0
 8004444:	61fb      	str	r3, [r7, #28]
 8004446:	e175      	b.n	8004734 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004448:	2201      	movs	r2, #1
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	4013      	ands	r3, r2
 800445a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	429a      	cmp	r2, r3
 8004462:	f040 8164 	bne.w	800472e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	2b01      	cmp	r3, #1
 8004470:	d005      	beq.n	800447e <HAL_GPIO_Init+0x56>
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d130      	bne.n	80044e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	2203      	movs	r2, #3
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	43db      	mvns	r3, r3
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	4013      	ands	r3, r2
 8004494:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044b4:	2201      	movs	r2, #1
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	43db      	mvns	r3, r3
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	4013      	ands	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	091b      	lsrs	r3, r3, #4
 80044ca:	f003 0201 	and.w	r2, r3, #1
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f003 0303 	and.w	r3, r3, #3
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d017      	beq.n	800451c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	2203      	movs	r2, #3
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	43db      	mvns	r3, r3
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	4013      	ands	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	4313      	orrs	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f003 0303 	and.w	r3, r3, #3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d123      	bne.n	8004570 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	08da      	lsrs	r2, r3, #3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3208      	adds	r2, #8
 8004530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	220f      	movs	r2, #15
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	43db      	mvns	r3, r3
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	4013      	ands	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	691a      	ldr	r2, [r3, #16]
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	4313      	orrs	r3, r2
 8004560:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	08da      	lsrs	r2, r3, #3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3208      	adds	r2, #8
 800456a:	69b9      	ldr	r1, [r7, #24]
 800456c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	2203      	movs	r2, #3
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	43db      	mvns	r3, r3
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4013      	ands	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f003 0203 	and.w	r2, r3, #3
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	4313      	orrs	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 80be 	beq.w	800472e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045b2:	4b66      	ldr	r3, [pc, #408]	; (800474c <HAL_GPIO_Init+0x324>)
 80045b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b6:	4a65      	ldr	r2, [pc, #404]	; (800474c <HAL_GPIO_Init+0x324>)
 80045b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045bc:	6453      	str	r3, [r2, #68]	; 0x44
 80045be:	4b63      	ldr	r3, [pc, #396]	; (800474c <HAL_GPIO_Init+0x324>)
 80045c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80045ca:	4a61      	ldr	r2, [pc, #388]	; (8004750 <HAL_GPIO_Init+0x328>)
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	089b      	lsrs	r3, r3, #2
 80045d0:	3302      	adds	r3, #2
 80045d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	220f      	movs	r2, #15
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	43db      	mvns	r3, r3
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	4013      	ands	r3, r2
 80045ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a58      	ldr	r2, [pc, #352]	; (8004754 <HAL_GPIO_Init+0x32c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d037      	beq.n	8004666 <HAL_GPIO_Init+0x23e>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a57      	ldr	r2, [pc, #348]	; (8004758 <HAL_GPIO_Init+0x330>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d031      	beq.n	8004662 <HAL_GPIO_Init+0x23a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a56      	ldr	r2, [pc, #344]	; (800475c <HAL_GPIO_Init+0x334>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d02b      	beq.n	800465e <HAL_GPIO_Init+0x236>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a55      	ldr	r2, [pc, #340]	; (8004760 <HAL_GPIO_Init+0x338>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d025      	beq.n	800465a <HAL_GPIO_Init+0x232>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a54      	ldr	r2, [pc, #336]	; (8004764 <HAL_GPIO_Init+0x33c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d01f      	beq.n	8004656 <HAL_GPIO_Init+0x22e>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a53      	ldr	r2, [pc, #332]	; (8004768 <HAL_GPIO_Init+0x340>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d019      	beq.n	8004652 <HAL_GPIO_Init+0x22a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a52      	ldr	r2, [pc, #328]	; (800476c <HAL_GPIO_Init+0x344>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d013      	beq.n	800464e <HAL_GPIO_Init+0x226>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a51      	ldr	r2, [pc, #324]	; (8004770 <HAL_GPIO_Init+0x348>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00d      	beq.n	800464a <HAL_GPIO_Init+0x222>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a50      	ldr	r2, [pc, #320]	; (8004774 <HAL_GPIO_Init+0x34c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d007      	beq.n	8004646 <HAL_GPIO_Init+0x21e>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a4f      	ldr	r2, [pc, #316]	; (8004778 <HAL_GPIO_Init+0x350>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d101      	bne.n	8004642 <HAL_GPIO_Init+0x21a>
 800463e:	2309      	movs	r3, #9
 8004640:	e012      	b.n	8004668 <HAL_GPIO_Init+0x240>
 8004642:	230a      	movs	r3, #10
 8004644:	e010      	b.n	8004668 <HAL_GPIO_Init+0x240>
 8004646:	2308      	movs	r3, #8
 8004648:	e00e      	b.n	8004668 <HAL_GPIO_Init+0x240>
 800464a:	2307      	movs	r3, #7
 800464c:	e00c      	b.n	8004668 <HAL_GPIO_Init+0x240>
 800464e:	2306      	movs	r3, #6
 8004650:	e00a      	b.n	8004668 <HAL_GPIO_Init+0x240>
 8004652:	2305      	movs	r3, #5
 8004654:	e008      	b.n	8004668 <HAL_GPIO_Init+0x240>
 8004656:	2304      	movs	r3, #4
 8004658:	e006      	b.n	8004668 <HAL_GPIO_Init+0x240>
 800465a:	2303      	movs	r3, #3
 800465c:	e004      	b.n	8004668 <HAL_GPIO_Init+0x240>
 800465e:	2302      	movs	r3, #2
 8004660:	e002      	b.n	8004668 <HAL_GPIO_Init+0x240>
 8004662:	2301      	movs	r3, #1
 8004664:	e000      	b.n	8004668 <HAL_GPIO_Init+0x240>
 8004666:	2300      	movs	r3, #0
 8004668:	69fa      	ldr	r2, [r7, #28]
 800466a:	f002 0203 	and.w	r2, r2, #3
 800466e:	0092      	lsls	r2, r2, #2
 8004670:	4093      	lsls	r3, r2
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	4313      	orrs	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004678:	4935      	ldr	r1, [pc, #212]	; (8004750 <HAL_GPIO_Init+0x328>)
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	089b      	lsrs	r3, r3, #2
 800467e:	3302      	adds	r3, #2
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004686:	4b3d      	ldr	r3, [pc, #244]	; (800477c <HAL_GPIO_Init+0x354>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	43db      	mvns	r3, r3
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	4013      	ands	r3, r2
 8004694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046aa:	4a34      	ldr	r2, [pc, #208]	; (800477c <HAL_GPIO_Init+0x354>)
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046b0:	4b32      	ldr	r3, [pc, #200]	; (800477c <HAL_GPIO_Init+0x354>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	43db      	mvns	r3, r3
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	4013      	ands	r3, r2
 80046be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d003      	beq.n	80046d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046d4:	4a29      	ldr	r2, [pc, #164]	; (800477c <HAL_GPIO_Init+0x354>)
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046da:	4b28      	ldr	r3, [pc, #160]	; (800477c <HAL_GPIO_Init+0x354>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	43db      	mvns	r3, r3
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	4013      	ands	r3, r2
 80046e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046fe:	4a1f      	ldr	r2, [pc, #124]	; (800477c <HAL_GPIO_Init+0x354>)
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004704:	4b1d      	ldr	r3, [pc, #116]	; (800477c <HAL_GPIO_Init+0x354>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	43db      	mvns	r3, r3
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	4013      	ands	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	4313      	orrs	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004728:	4a14      	ldr	r2, [pc, #80]	; (800477c <HAL_GPIO_Init+0x354>)
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	3301      	adds	r3, #1
 8004732:	61fb      	str	r3, [r7, #28]
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	2b0f      	cmp	r3, #15
 8004738:	f67f ae86 	bls.w	8004448 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800473c:	bf00      	nop
 800473e:	bf00      	nop
 8004740:	3724      	adds	r7, #36	; 0x24
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	40023800 	.word	0x40023800
 8004750:	40013800 	.word	0x40013800
 8004754:	40020000 	.word	0x40020000
 8004758:	40020400 	.word	0x40020400
 800475c:	40020800 	.word	0x40020800
 8004760:	40020c00 	.word	0x40020c00
 8004764:	40021000 	.word	0x40021000
 8004768:	40021400 	.word	0x40021400
 800476c:	40021800 	.word	0x40021800
 8004770:	40021c00 	.word	0x40021c00
 8004774:	40022000 	.word	0x40022000
 8004778:	40022400 	.word	0x40022400
 800477c:	40013c00 	.word	0x40013c00

08004780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	460b      	mov	r3, r1
 800478a:	807b      	strh	r3, [r7, #2]
 800478c:	4613      	mov	r3, r2
 800478e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004790:	787b      	ldrb	r3, [r7, #1]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004796:	887a      	ldrh	r2, [r7, #2]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800479c:	e003      	b.n	80047a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800479e:	887b      	ldrh	r3, [r7, #2]
 80047a0:	041a      	lsls	r2, r3, #16
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	619a      	str	r2, [r3, #24]
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b085      	sub	sp, #20
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	460b      	mov	r3, r1
 80047bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80047c4:	887a      	ldrh	r2, [r7, #2]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4013      	ands	r3, r2
 80047ca:	041a      	lsls	r2, r3, #16
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	43d9      	mvns	r1, r3
 80047d0:	887b      	ldrh	r3, [r7, #2]
 80047d2:	400b      	ands	r3, r1
 80047d4:	431a      	orrs	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	619a      	str	r2, [r3, #24]
}
 80047da:	bf00      	nop
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80047e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047e8:	b08f      	sub	sp, #60	; 0x3c
 80047ea:	af0a      	add	r7, sp, #40	; 0x28
 80047ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e116      	b.n	8004a26 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d106      	bne.n	8004818 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fc fe4e 	bl	80014b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2203      	movs	r2, #3
 800481c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004828:	2b00      	cmp	r3, #0
 800482a:	d102      	bne.n	8004832 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f002 fe86 	bl	8007548 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	603b      	str	r3, [r7, #0]
 8004842:	687e      	ldr	r6, [r7, #4]
 8004844:	466d      	mov	r5, sp
 8004846:	f106 0410 	add.w	r4, r6, #16
 800484a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800484c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800484e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004850:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004852:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004856:	e885 0003 	stmia.w	r5, {r0, r1}
 800485a:	1d33      	adds	r3, r6, #4
 800485c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800485e:	6838      	ldr	r0, [r7, #0]
 8004860:	f002 fe1a 	bl	8007498 <USB_CoreInit>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d005      	beq.n	8004876 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2202      	movs	r2, #2
 800486e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e0d7      	b.n	8004a26 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2100      	movs	r1, #0
 800487c:	4618      	mov	r0, r3
 800487e:	f002 fe74 	bl	800756a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004882:	2300      	movs	r3, #0
 8004884:	73fb      	strb	r3, [r7, #15]
 8004886:	e04a      	b.n	800491e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004888:	7bfa      	ldrb	r2, [r7, #15]
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	4613      	mov	r3, r2
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	333d      	adds	r3, #61	; 0x3d
 8004898:	2201      	movs	r2, #1
 800489a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800489c:	7bfa      	ldrb	r2, [r7, #15]
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	4613      	mov	r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	333c      	adds	r3, #60	; 0x3c
 80048ac:	7bfa      	ldrb	r2, [r7, #15]
 80048ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80048b0:	7bfa      	ldrb	r2, [r7, #15]
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
 80048b4:	b298      	uxth	r0, r3
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	4613      	mov	r3, r2
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	3344      	adds	r3, #68	; 0x44
 80048c4:	4602      	mov	r2, r0
 80048c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80048c8:	7bfa      	ldrb	r2, [r7, #15]
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	4613      	mov	r3, r2
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	4413      	add	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	440b      	add	r3, r1
 80048d6:	3340      	adds	r3, #64	; 0x40
 80048d8:	2200      	movs	r2, #0
 80048da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80048dc:	7bfa      	ldrb	r2, [r7, #15]
 80048de:	6879      	ldr	r1, [r7, #4]
 80048e0:	4613      	mov	r3, r2
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	4413      	add	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	440b      	add	r3, r1
 80048ea:	3348      	adds	r3, #72	; 0x48
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80048f0:	7bfa      	ldrb	r2, [r7, #15]
 80048f2:	6879      	ldr	r1, [r7, #4]
 80048f4:	4613      	mov	r3, r2
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	4413      	add	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	334c      	adds	r3, #76	; 0x4c
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004904:	7bfa      	ldrb	r2, [r7, #15]
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	4613      	mov	r3, r2
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	4413      	add	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	440b      	add	r3, r1
 8004912:	3354      	adds	r3, #84	; 0x54
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004918:	7bfb      	ldrb	r3, [r7, #15]
 800491a:	3301      	adds	r3, #1
 800491c:	73fb      	strb	r3, [r7, #15]
 800491e:	7bfa      	ldrb	r2, [r7, #15]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	429a      	cmp	r2, r3
 8004926:	d3af      	bcc.n	8004888 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004928:	2300      	movs	r3, #0
 800492a:	73fb      	strb	r3, [r7, #15]
 800492c:	e044      	b.n	80049b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800492e:	7bfa      	ldrb	r2, [r7, #15]
 8004930:	6879      	ldr	r1, [r7, #4]
 8004932:	4613      	mov	r3, r2
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	4413      	add	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	440b      	add	r3, r1
 800493c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004940:	2200      	movs	r2, #0
 8004942:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004944:	7bfa      	ldrb	r2, [r7, #15]
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	4613      	mov	r3, r2
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	4413      	add	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004956:	7bfa      	ldrb	r2, [r7, #15]
 8004958:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800495a:	7bfa      	ldrb	r2, [r7, #15]
 800495c:	6879      	ldr	r1, [r7, #4]
 800495e:	4613      	mov	r3, r2
 8004960:	00db      	lsls	r3, r3, #3
 8004962:	4413      	add	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	440b      	add	r3, r1
 8004968:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800496c:	2200      	movs	r2, #0
 800496e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004970:	7bfa      	ldrb	r2, [r7, #15]
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	4613      	mov	r3, r2
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	4413      	add	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	440b      	add	r3, r1
 800497e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004986:	7bfa      	ldrb	r2, [r7, #15]
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	4613      	mov	r3, r2
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	4413      	add	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	440b      	add	r3, r1
 8004994:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800499c:	7bfa      	ldrb	r2, [r7, #15]
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	4613      	mov	r3, r2
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	4413      	add	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80049ae:	2200      	movs	r2, #0
 80049b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
 80049b4:	3301      	adds	r3, #1
 80049b6:	73fb      	strb	r3, [r7, #15]
 80049b8:	7bfa      	ldrb	r2, [r7, #15]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d3b5      	bcc.n	800492e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	603b      	str	r3, [r7, #0]
 80049c8:	687e      	ldr	r6, [r7, #4]
 80049ca:	466d      	mov	r5, sp
 80049cc:	f106 0410 	add.w	r4, r6, #16
 80049d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80049e0:	1d33      	adds	r3, r6, #4
 80049e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049e4:	6838      	ldr	r0, [r7, #0]
 80049e6:	f002 fe0d 	bl	8007604 <USB_DevInit>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d005      	beq.n	80049fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e014      	b.n	8004a26 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d102      	bne.n	8004a1a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f80b 	bl	8004a30 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f002 ffcb 	bl	80079ba <USB_DevDisconnect>

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004a30 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a5e:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <HAL_PCDEx_ActivateLPM+0x44>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	10000003 	.word	0x10000003

08004a78 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a7c:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a04      	ldr	r2, [pc, #16]	; (8004a94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a86:	6013      	str	r3, [r2, #0]
}
 8004a88:	bf00      	nop
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	40007000 	.word	0x40007000

08004a98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004aa2:	4b23      	ldr	r3, [pc, #140]	; (8004b30 <HAL_PWREx_EnableOverDrive+0x98>)
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	4a22      	ldr	r2, [pc, #136]	; (8004b30 <HAL_PWREx_EnableOverDrive+0x98>)
 8004aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aac:	6413      	str	r3, [r2, #64]	; 0x40
 8004aae:	4b20      	ldr	r3, [pc, #128]	; (8004b30 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab6:	603b      	str	r3, [r7, #0]
 8004ab8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004aba:	4b1e      	ldr	r3, [pc, #120]	; (8004b34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a1d      	ldr	r2, [pc, #116]	; (8004b34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ac6:	f7fd f8cd 	bl	8001c64 <HAL_GetTick>
 8004aca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004acc:	e009      	b.n	8004ae2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ace:	f7fd f8c9 	bl	8001c64 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004adc:	d901      	bls.n	8004ae2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e022      	b.n	8004b28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ae2:	4b14      	ldr	r3, [pc, #80]	; (8004b34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aee:	d1ee      	bne.n	8004ace <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004af0:	4b10      	ldr	r3, [pc, #64]	; (8004b34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a0f      	ldr	r2, [pc, #60]	; (8004b34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004afa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004afc:	f7fd f8b2 	bl	8001c64 <HAL_GetTick>
 8004b00:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004b02:	e009      	b.n	8004b18 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b04:	f7fd f8ae 	bl	8001c64 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b12:	d901      	bls.n	8004b18 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e007      	b.n	8004b28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004b18:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b24:	d1ee      	bne.n	8004b04 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40023800 	.word	0x40023800
 8004b34:	40007000 	.word	0x40007000

08004b38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004b40:	2300      	movs	r3, #0
 8004b42:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e29b      	b.n	8005086 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 8087 	beq.w	8004c6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b5c:	4b96      	ldr	r3, [pc, #600]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f003 030c 	and.w	r3, r3, #12
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d00c      	beq.n	8004b82 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b68:	4b93      	ldr	r3, [pc, #588]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f003 030c 	and.w	r3, r3, #12
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d112      	bne.n	8004b9a <HAL_RCC_OscConfig+0x62>
 8004b74:	4b90      	ldr	r3, [pc, #576]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b80:	d10b      	bne.n	8004b9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b82:	4b8d      	ldr	r3, [pc, #564]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d06c      	beq.n	8004c68 <HAL_RCC_OscConfig+0x130>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d168      	bne.n	8004c68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e275      	b.n	8005086 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba2:	d106      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x7a>
 8004ba4:	4b84      	ldr	r3, [pc, #528]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a83      	ldr	r2, [pc, #524]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bae:	6013      	str	r3, [r2, #0]
 8004bb0:	e02e      	b.n	8004c10 <HAL_RCC_OscConfig+0xd8>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10c      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x9c>
 8004bba:	4b7f      	ldr	r3, [pc, #508]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a7e      	ldr	r2, [pc, #504]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	4b7c      	ldr	r3, [pc, #496]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a7b      	ldr	r2, [pc, #492]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004bcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	e01d      	b.n	8004c10 <HAL_RCC_OscConfig+0xd8>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bdc:	d10c      	bne.n	8004bf8 <HAL_RCC_OscConfig+0xc0>
 8004bde:	4b76      	ldr	r3, [pc, #472]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a75      	ldr	r2, [pc, #468]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	4b73      	ldr	r3, [pc, #460]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a72      	ldr	r2, [pc, #456]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	e00b      	b.n	8004c10 <HAL_RCC_OscConfig+0xd8>
 8004bf8:	4b6f      	ldr	r3, [pc, #444]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a6e      	ldr	r2, [pc, #440]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c02:	6013      	str	r3, [r2, #0]
 8004c04:	4b6c      	ldr	r3, [pc, #432]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a6b      	ldr	r2, [pc, #428]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d013      	beq.n	8004c40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c18:	f7fd f824 	bl	8001c64 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c20:	f7fd f820 	bl	8001c64 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b64      	cmp	r3, #100	; 0x64
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e229      	b.n	8005086 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c32:	4b61      	ldr	r3, [pc, #388]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0xe8>
 8004c3e:	e014      	b.n	8004c6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c40:	f7fd f810 	bl	8001c64 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c48:	f7fd f80c 	bl	8001c64 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b64      	cmp	r3, #100	; 0x64
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e215      	b.n	8005086 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c5a:	4b57      	ldr	r3, [pc, #348]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f0      	bne.n	8004c48 <HAL_RCC_OscConfig+0x110>
 8004c66:	e000      	b.n	8004c6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d069      	beq.n	8004d4a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c76:	4b50      	ldr	r3, [pc, #320]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 030c 	and.w	r3, r3, #12
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00b      	beq.n	8004c9a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c82:	4b4d      	ldr	r3, [pc, #308]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 030c 	and.w	r3, r3, #12
 8004c8a:	2b08      	cmp	r3, #8
 8004c8c:	d11c      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x190>
 8004c8e:	4b4a      	ldr	r3, [pc, #296]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d116      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c9a:	4b47      	ldr	r3, [pc, #284]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d005      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x17a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d001      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e1e9      	b.n	8005086 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb2:	4b41      	ldr	r3, [pc, #260]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	493d      	ldr	r1, [pc, #244]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cc6:	e040      	b.n	8004d4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d023      	beq.n	8004d18 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cd0:	4b39      	ldr	r3, [pc, #228]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a38      	ldr	r2, [pc, #224]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004cd6:	f043 0301 	orr.w	r3, r3, #1
 8004cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cdc:	f7fc ffc2 	bl	8001c64 <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ce4:	f7fc ffbe 	bl	8001c64 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e1c7      	b.n	8005086 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf6:	4b30      	ldr	r3, [pc, #192]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0f0      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d02:	4b2d      	ldr	r3, [pc, #180]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	4929      	ldr	r1, [pc, #164]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	600b      	str	r3, [r1, #0]
 8004d16:	e018      	b.n	8004d4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d18:	4b27      	ldr	r3, [pc, #156]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a26      	ldr	r2, [pc, #152]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004d1e:	f023 0301 	bic.w	r3, r3, #1
 8004d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d24:	f7fc ff9e 	bl	8001c64 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d2c:	f7fc ff9a 	bl	8001c64 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e1a3      	b.n	8005086 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d3e:	4b1e      	ldr	r3, [pc, #120]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f0      	bne.n	8004d2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d038      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d019      	beq.n	8004d92 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d5e:	4b16      	ldr	r3, [pc, #88]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d62:	4a15      	ldr	r2, [pc, #84]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004d64:	f043 0301 	orr.w	r3, r3, #1
 8004d68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d6a:	f7fc ff7b 	bl	8001c64 <HAL_GetTick>
 8004d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d70:	e008      	b.n	8004d84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d72:	f7fc ff77 	bl	8001c64 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e180      	b.n	8005086 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d84:	4b0c      	ldr	r3, [pc, #48]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0f0      	beq.n	8004d72 <HAL_RCC_OscConfig+0x23a>
 8004d90:	e01a      	b.n	8004dc8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d92:	4b09      	ldr	r3, [pc, #36]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d96:	4a08      	ldr	r2, [pc, #32]	; (8004db8 <HAL_RCC_OscConfig+0x280>)
 8004d98:	f023 0301 	bic.w	r3, r3, #1
 8004d9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9e:	f7fc ff61 	bl	8001c64 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004da4:	e00a      	b.n	8004dbc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004da6:	f7fc ff5d 	bl	8001c64 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d903      	bls.n	8004dbc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e166      	b.n	8005086 <HAL_RCC_OscConfig+0x54e>
 8004db8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dbc:	4b92      	ldr	r3, [pc, #584]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1ee      	bne.n	8004da6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 80a4 	beq.w	8004f1e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dd6:	4b8c      	ldr	r3, [pc, #560]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10d      	bne.n	8004dfe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004de2:	4b89      	ldr	r3, [pc, #548]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	4a88      	ldr	r2, [pc, #544]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dec:	6413      	str	r3, [r2, #64]	; 0x40
 8004dee:	4b86      	ldr	r3, [pc, #536]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df6:	60bb      	str	r3, [r7, #8]
 8004df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dfe:	4b83      	ldr	r3, [pc, #524]	; (800500c <HAL_RCC_OscConfig+0x4d4>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d118      	bne.n	8004e3c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004e0a:	4b80      	ldr	r3, [pc, #512]	; (800500c <HAL_RCC_OscConfig+0x4d4>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a7f      	ldr	r2, [pc, #508]	; (800500c <HAL_RCC_OscConfig+0x4d4>)
 8004e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e16:	f7fc ff25 	bl	8001c64 <HAL_GetTick>
 8004e1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e1c:	e008      	b.n	8004e30 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e1e:	f7fc ff21 	bl	8001c64 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b64      	cmp	r3, #100	; 0x64
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e12a      	b.n	8005086 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e30:	4b76      	ldr	r3, [pc, #472]	; (800500c <HAL_RCC_OscConfig+0x4d4>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0f0      	beq.n	8004e1e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d106      	bne.n	8004e52 <HAL_RCC_OscConfig+0x31a>
 8004e44:	4b70      	ldr	r3, [pc, #448]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e48:	4a6f      	ldr	r2, [pc, #444]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004e4a:	f043 0301 	orr.w	r3, r3, #1
 8004e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e50:	e02d      	b.n	8004eae <HAL_RCC_OscConfig+0x376>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10c      	bne.n	8004e74 <HAL_RCC_OscConfig+0x33c>
 8004e5a:	4b6b      	ldr	r3, [pc, #428]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5e:	4a6a      	ldr	r2, [pc, #424]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004e60:	f023 0301 	bic.w	r3, r3, #1
 8004e64:	6713      	str	r3, [r2, #112]	; 0x70
 8004e66:	4b68      	ldr	r3, [pc, #416]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6a:	4a67      	ldr	r2, [pc, #412]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004e6c:	f023 0304 	bic.w	r3, r3, #4
 8004e70:	6713      	str	r3, [r2, #112]	; 0x70
 8004e72:	e01c      	b.n	8004eae <HAL_RCC_OscConfig+0x376>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	2b05      	cmp	r3, #5
 8004e7a:	d10c      	bne.n	8004e96 <HAL_RCC_OscConfig+0x35e>
 8004e7c:	4b62      	ldr	r3, [pc, #392]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e80:	4a61      	ldr	r2, [pc, #388]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004e82:	f043 0304 	orr.w	r3, r3, #4
 8004e86:	6713      	str	r3, [r2, #112]	; 0x70
 8004e88:	4b5f      	ldr	r3, [pc, #380]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8c:	4a5e      	ldr	r2, [pc, #376]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004e8e:	f043 0301 	orr.w	r3, r3, #1
 8004e92:	6713      	str	r3, [r2, #112]	; 0x70
 8004e94:	e00b      	b.n	8004eae <HAL_RCC_OscConfig+0x376>
 8004e96:	4b5c      	ldr	r3, [pc, #368]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9a:	4a5b      	ldr	r2, [pc, #364]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004e9c:	f023 0301 	bic.w	r3, r3, #1
 8004ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea2:	4b59      	ldr	r3, [pc, #356]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea6:	4a58      	ldr	r2, [pc, #352]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004ea8:	f023 0304 	bic.w	r3, r3, #4
 8004eac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d015      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb6:	f7fc fed5 	bl	8001c64 <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ebc:	e00a      	b.n	8004ed4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ebe:	f7fc fed1 	bl	8001c64 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e0d8      	b.n	8005086 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed4:	4b4c      	ldr	r3, [pc, #304]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0ee      	beq.n	8004ebe <HAL_RCC_OscConfig+0x386>
 8004ee0:	e014      	b.n	8004f0c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee2:	f7fc febf 	bl	8001c64 <HAL_GetTick>
 8004ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee8:	e00a      	b.n	8004f00 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eea:	f7fc febb 	bl	8001c64 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e0c2      	b.n	8005086 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f00:	4b41      	ldr	r3, [pc, #260]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1ee      	bne.n	8004eea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f0c:	7dfb      	ldrb	r3, [r7, #23]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d105      	bne.n	8004f1e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f12:	4b3d      	ldr	r3, [pc, #244]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	4a3c      	ldr	r2, [pc, #240]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 80ae 	beq.w	8005084 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f28:	4b37      	ldr	r3, [pc, #220]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 030c 	and.w	r3, r3, #12
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d06d      	beq.n	8005010 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d14b      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f3c:	4b32      	ldr	r3, [pc, #200]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a31      	ldr	r2, [pc, #196]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004f42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f48:	f7fc fe8c 	bl	8001c64 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f50:	f7fc fe88 	bl	8001c64 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e091      	b.n	8005086 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f62:	4b29      	ldr	r3, [pc, #164]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1f0      	bne.n	8004f50 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69da      	ldr	r2, [r3, #28]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	019b      	lsls	r3, r3, #6
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f84:	085b      	lsrs	r3, r3, #1
 8004f86:	3b01      	subs	r3, #1
 8004f88:	041b      	lsls	r3, r3, #16
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	061b      	lsls	r3, r3, #24
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f98:	071b      	lsls	r3, r3, #28
 8004f9a:	491b      	ldr	r1, [pc, #108]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fa0:	4b19      	ldr	r3, [pc, #100]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a18      	ldr	r2, [pc, #96]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fac:	f7fc fe5a 	bl	8001c64 <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb4:	f7fc fe56 	bl	8001c64 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e05f      	b.n	8005086 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fc6:	4b10      	ldr	r3, [pc, #64]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0f0      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x47c>
 8004fd2:	e057      	b.n	8005084 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd4:	4b0c      	ldr	r3, [pc, #48]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a0b      	ldr	r2, [pc, #44]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004fda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe0:	f7fc fe40 	bl	8001c64 <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe8:	f7fc fe3c 	bl	8001c64 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e045      	b.n	8005086 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffa:	4b03      	ldr	r3, [pc, #12]	; (8005008 <HAL_RCC_OscConfig+0x4d0>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1f0      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x4b0>
 8005006:	e03d      	b.n	8005084 <HAL_RCC_OscConfig+0x54c>
 8005008:	40023800 	.word	0x40023800
 800500c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005010:	4b1f      	ldr	r3, [pc, #124]	; (8005090 <HAL_RCC_OscConfig+0x558>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d030      	beq.n	8005080 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005028:	429a      	cmp	r2, r3
 800502a:	d129      	bne.n	8005080 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005036:	429a      	cmp	r2, r3
 8005038:	d122      	bne.n	8005080 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005040:	4013      	ands	r3, r2
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005046:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005048:	4293      	cmp	r3, r2
 800504a:	d119      	bne.n	8005080 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005056:	085b      	lsrs	r3, r3, #1
 8005058:	3b01      	subs	r3, #1
 800505a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800505c:	429a      	cmp	r2, r3
 800505e:	d10f      	bne.n	8005080 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800506c:	429a      	cmp	r2, r3
 800506e:	d107      	bne.n	8005080 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800507c:	429a      	cmp	r2, r3
 800507e:	d001      	beq.n	8005084 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e000      	b.n	8005086 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	40023800 	.word	0x40023800

08005094 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800509e:	2300      	movs	r3, #0
 80050a0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e0d0      	b.n	800524e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050ac:	4b6a      	ldr	r3, [pc, #424]	; (8005258 <HAL_RCC_ClockConfig+0x1c4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 030f 	and.w	r3, r3, #15
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d910      	bls.n	80050dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ba:	4b67      	ldr	r3, [pc, #412]	; (8005258 <HAL_RCC_ClockConfig+0x1c4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f023 020f 	bic.w	r2, r3, #15
 80050c2:	4965      	ldr	r1, [pc, #404]	; (8005258 <HAL_RCC_ClockConfig+0x1c4>)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ca:	4b63      	ldr	r3, [pc, #396]	; (8005258 <HAL_RCC_ClockConfig+0x1c4>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d001      	beq.n	80050dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e0b8      	b.n	800524e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d020      	beq.n	800512a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050f4:	4b59      	ldr	r3, [pc, #356]	; (800525c <HAL_RCC_ClockConfig+0x1c8>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	4a58      	ldr	r2, [pc, #352]	; (800525c <HAL_RCC_ClockConfig+0x1c8>)
 80050fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b00      	cmp	r3, #0
 800510a:	d005      	beq.n	8005118 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800510c:	4b53      	ldr	r3, [pc, #332]	; (800525c <HAL_RCC_ClockConfig+0x1c8>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	4a52      	ldr	r2, [pc, #328]	; (800525c <HAL_RCC_ClockConfig+0x1c8>)
 8005112:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005116:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005118:	4b50      	ldr	r3, [pc, #320]	; (800525c <HAL_RCC_ClockConfig+0x1c8>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	494d      	ldr	r1, [pc, #308]	; (800525c <HAL_RCC_ClockConfig+0x1c8>)
 8005126:	4313      	orrs	r3, r2
 8005128:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d040      	beq.n	80051b8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d107      	bne.n	800514e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800513e:	4b47      	ldr	r3, [pc, #284]	; (800525c <HAL_RCC_ClockConfig+0x1c8>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d115      	bne.n	8005176 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e07f      	b.n	800524e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2b02      	cmp	r3, #2
 8005154:	d107      	bne.n	8005166 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005156:	4b41      	ldr	r3, [pc, #260]	; (800525c <HAL_RCC_ClockConfig+0x1c8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d109      	bne.n	8005176 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e073      	b.n	800524e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005166:	4b3d      	ldr	r3, [pc, #244]	; (800525c <HAL_RCC_ClockConfig+0x1c8>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e06b      	b.n	800524e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005176:	4b39      	ldr	r3, [pc, #228]	; (800525c <HAL_RCC_ClockConfig+0x1c8>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f023 0203 	bic.w	r2, r3, #3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	4936      	ldr	r1, [pc, #216]	; (800525c <HAL_RCC_ClockConfig+0x1c8>)
 8005184:	4313      	orrs	r3, r2
 8005186:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005188:	f7fc fd6c 	bl	8001c64 <HAL_GetTick>
 800518c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800518e:	e00a      	b.n	80051a6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005190:	f7fc fd68 	bl	8001c64 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	f241 3288 	movw	r2, #5000	; 0x1388
 800519e:	4293      	cmp	r3, r2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e053      	b.n	800524e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051a6:	4b2d      	ldr	r3, [pc, #180]	; (800525c <HAL_RCC_ClockConfig+0x1c8>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f003 020c 	and.w	r2, r3, #12
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d1eb      	bne.n	8005190 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051b8:	4b27      	ldr	r3, [pc, #156]	; (8005258 <HAL_RCC_ClockConfig+0x1c4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 030f 	and.w	r3, r3, #15
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d210      	bcs.n	80051e8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051c6:	4b24      	ldr	r3, [pc, #144]	; (8005258 <HAL_RCC_ClockConfig+0x1c4>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f023 020f 	bic.w	r2, r3, #15
 80051ce:	4922      	ldr	r1, [pc, #136]	; (8005258 <HAL_RCC_ClockConfig+0x1c4>)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051d6:	4b20      	ldr	r3, [pc, #128]	; (8005258 <HAL_RCC_ClockConfig+0x1c4>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d001      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e032      	b.n	800524e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d008      	beq.n	8005206 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051f4:	4b19      	ldr	r3, [pc, #100]	; (800525c <HAL_RCC_ClockConfig+0x1c8>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	4916      	ldr	r1, [pc, #88]	; (800525c <HAL_RCC_ClockConfig+0x1c8>)
 8005202:	4313      	orrs	r3, r2
 8005204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0308 	and.w	r3, r3, #8
 800520e:	2b00      	cmp	r3, #0
 8005210:	d009      	beq.n	8005226 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005212:	4b12      	ldr	r3, [pc, #72]	; (800525c <HAL_RCC_ClockConfig+0x1c8>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	490e      	ldr	r1, [pc, #56]	; (800525c <HAL_RCC_ClockConfig+0x1c8>)
 8005222:	4313      	orrs	r3, r2
 8005224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005226:	f000 f821 	bl	800526c <HAL_RCC_GetSysClockFreq>
 800522a:	4602      	mov	r2, r0
 800522c:	4b0b      	ldr	r3, [pc, #44]	; (800525c <HAL_RCC_ClockConfig+0x1c8>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	091b      	lsrs	r3, r3, #4
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	490a      	ldr	r1, [pc, #40]	; (8005260 <HAL_RCC_ClockConfig+0x1cc>)
 8005238:	5ccb      	ldrb	r3, [r1, r3]
 800523a:	fa22 f303 	lsr.w	r3, r2, r3
 800523e:	4a09      	ldr	r2, [pc, #36]	; (8005264 <HAL_RCC_ClockConfig+0x1d0>)
 8005240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005242:	4b09      	ldr	r3, [pc, #36]	; (8005268 <HAL_RCC_ClockConfig+0x1d4>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	f7fc f9ae 	bl	80015a8 <HAL_InitTick>

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	40023c00 	.word	0x40023c00
 800525c:	40023800 	.word	0x40023800
 8005260:	0801f990 	.word	0x0801f990
 8005264:	20000000 	.word	0x20000000
 8005268:	20000004 	.word	0x20000004

0800526c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800526c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005270:	b094      	sub	sp, #80	; 0x50
 8005272:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005274:	2300      	movs	r3, #0
 8005276:	647b      	str	r3, [r7, #68]	; 0x44
 8005278:	2300      	movs	r3, #0
 800527a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800527c:	2300      	movs	r3, #0
 800527e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005280:	2300      	movs	r3, #0
 8005282:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005284:	4b79      	ldr	r3, [pc, #484]	; (800546c <HAL_RCC_GetSysClockFreq+0x200>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f003 030c 	and.w	r3, r3, #12
 800528c:	2b08      	cmp	r3, #8
 800528e:	d00d      	beq.n	80052ac <HAL_RCC_GetSysClockFreq+0x40>
 8005290:	2b08      	cmp	r3, #8
 8005292:	f200 80e1 	bhi.w	8005458 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <HAL_RCC_GetSysClockFreq+0x34>
 800529a:	2b04      	cmp	r3, #4
 800529c:	d003      	beq.n	80052a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800529e:	e0db      	b.n	8005458 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052a0:	4b73      	ldr	r3, [pc, #460]	; (8005470 <HAL_RCC_GetSysClockFreq+0x204>)
 80052a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052a4:	e0db      	b.n	800545e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052a6:	4b73      	ldr	r3, [pc, #460]	; (8005474 <HAL_RCC_GetSysClockFreq+0x208>)
 80052a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052aa:	e0d8      	b.n	800545e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052ac:	4b6f      	ldr	r3, [pc, #444]	; (800546c <HAL_RCC_GetSysClockFreq+0x200>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052b4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80052b6:	4b6d      	ldr	r3, [pc, #436]	; (800546c <HAL_RCC_GetSysClockFreq+0x200>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d063      	beq.n	800538a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052c2:	4b6a      	ldr	r3, [pc, #424]	; (800546c <HAL_RCC_GetSysClockFreq+0x200>)
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	099b      	lsrs	r3, r3, #6
 80052c8:	2200      	movs	r2, #0
 80052ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80052cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80052ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d4:	633b      	str	r3, [r7, #48]	; 0x30
 80052d6:	2300      	movs	r3, #0
 80052d8:	637b      	str	r3, [r7, #52]	; 0x34
 80052da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80052de:	4622      	mov	r2, r4
 80052e0:	462b      	mov	r3, r5
 80052e2:	f04f 0000 	mov.w	r0, #0
 80052e6:	f04f 0100 	mov.w	r1, #0
 80052ea:	0159      	lsls	r1, r3, #5
 80052ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052f0:	0150      	lsls	r0, r2, #5
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4621      	mov	r1, r4
 80052f8:	1a51      	subs	r1, r2, r1
 80052fa:	6139      	str	r1, [r7, #16]
 80052fc:	4629      	mov	r1, r5
 80052fe:	eb63 0301 	sbc.w	r3, r3, r1
 8005302:	617b      	str	r3, [r7, #20]
 8005304:	f04f 0200 	mov.w	r2, #0
 8005308:	f04f 0300 	mov.w	r3, #0
 800530c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005310:	4659      	mov	r1, fp
 8005312:	018b      	lsls	r3, r1, #6
 8005314:	4651      	mov	r1, sl
 8005316:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800531a:	4651      	mov	r1, sl
 800531c:	018a      	lsls	r2, r1, #6
 800531e:	4651      	mov	r1, sl
 8005320:	ebb2 0801 	subs.w	r8, r2, r1
 8005324:	4659      	mov	r1, fp
 8005326:	eb63 0901 	sbc.w	r9, r3, r1
 800532a:	f04f 0200 	mov.w	r2, #0
 800532e:	f04f 0300 	mov.w	r3, #0
 8005332:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005336:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800533a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800533e:	4690      	mov	r8, r2
 8005340:	4699      	mov	r9, r3
 8005342:	4623      	mov	r3, r4
 8005344:	eb18 0303 	adds.w	r3, r8, r3
 8005348:	60bb      	str	r3, [r7, #8]
 800534a:	462b      	mov	r3, r5
 800534c:	eb49 0303 	adc.w	r3, r9, r3
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	f04f 0200 	mov.w	r2, #0
 8005356:	f04f 0300 	mov.w	r3, #0
 800535a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800535e:	4629      	mov	r1, r5
 8005360:	024b      	lsls	r3, r1, #9
 8005362:	4621      	mov	r1, r4
 8005364:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005368:	4621      	mov	r1, r4
 800536a:	024a      	lsls	r2, r1, #9
 800536c:	4610      	mov	r0, r2
 800536e:	4619      	mov	r1, r3
 8005370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005372:	2200      	movs	r2, #0
 8005374:	62bb      	str	r3, [r7, #40]	; 0x28
 8005376:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005378:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800537c:	f7fa ffb0 	bl	80002e0 <__aeabi_uldivmod>
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	4613      	mov	r3, r2
 8005386:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005388:	e058      	b.n	800543c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800538a:	4b38      	ldr	r3, [pc, #224]	; (800546c <HAL_RCC_GetSysClockFreq+0x200>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	099b      	lsrs	r3, r3, #6
 8005390:	2200      	movs	r2, #0
 8005392:	4618      	mov	r0, r3
 8005394:	4611      	mov	r1, r2
 8005396:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800539a:	623b      	str	r3, [r7, #32]
 800539c:	2300      	movs	r3, #0
 800539e:	627b      	str	r3, [r7, #36]	; 0x24
 80053a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053a4:	4642      	mov	r2, r8
 80053a6:	464b      	mov	r3, r9
 80053a8:	f04f 0000 	mov.w	r0, #0
 80053ac:	f04f 0100 	mov.w	r1, #0
 80053b0:	0159      	lsls	r1, r3, #5
 80053b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053b6:	0150      	lsls	r0, r2, #5
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4641      	mov	r1, r8
 80053be:	ebb2 0a01 	subs.w	sl, r2, r1
 80053c2:	4649      	mov	r1, r9
 80053c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80053c8:	f04f 0200 	mov.w	r2, #0
 80053cc:	f04f 0300 	mov.w	r3, #0
 80053d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053dc:	ebb2 040a 	subs.w	r4, r2, sl
 80053e0:	eb63 050b 	sbc.w	r5, r3, fp
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	f04f 0300 	mov.w	r3, #0
 80053ec:	00eb      	lsls	r3, r5, #3
 80053ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053f2:	00e2      	lsls	r2, r4, #3
 80053f4:	4614      	mov	r4, r2
 80053f6:	461d      	mov	r5, r3
 80053f8:	4643      	mov	r3, r8
 80053fa:	18e3      	adds	r3, r4, r3
 80053fc:	603b      	str	r3, [r7, #0]
 80053fe:	464b      	mov	r3, r9
 8005400:	eb45 0303 	adc.w	r3, r5, r3
 8005404:	607b      	str	r3, [r7, #4]
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005412:	4629      	mov	r1, r5
 8005414:	028b      	lsls	r3, r1, #10
 8005416:	4621      	mov	r1, r4
 8005418:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800541c:	4621      	mov	r1, r4
 800541e:	028a      	lsls	r2, r1, #10
 8005420:	4610      	mov	r0, r2
 8005422:	4619      	mov	r1, r3
 8005424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005426:	2200      	movs	r2, #0
 8005428:	61bb      	str	r3, [r7, #24]
 800542a:	61fa      	str	r2, [r7, #28]
 800542c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005430:	f7fa ff56 	bl	80002e0 <__aeabi_uldivmod>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4613      	mov	r3, r2
 800543a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800543c:	4b0b      	ldr	r3, [pc, #44]	; (800546c <HAL_RCC_GetSysClockFreq+0x200>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	0c1b      	lsrs	r3, r3, #16
 8005442:	f003 0303 	and.w	r3, r3, #3
 8005446:	3301      	adds	r3, #1
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800544c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800544e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005450:	fbb2 f3f3 	udiv	r3, r2, r3
 8005454:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005456:	e002      	b.n	800545e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005458:	4b05      	ldr	r3, [pc, #20]	; (8005470 <HAL_RCC_GetSysClockFreq+0x204>)
 800545a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800545c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800545e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005460:	4618      	mov	r0, r3
 8005462:	3750      	adds	r7, #80	; 0x50
 8005464:	46bd      	mov	sp, r7
 8005466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800546a:	bf00      	nop
 800546c:	40023800 	.word	0x40023800
 8005470:	00f42400 	.word	0x00f42400
 8005474:	007a1200 	.word	0x007a1200

08005478 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800547c:	4b03      	ldr	r3, [pc, #12]	; (800548c <HAL_RCC_GetHCLKFreq+0x14>)
 800547e:	681b      	ldr	r3, [r3, #0]
}
 8005480:	4618      	mov	r0, r3
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	20000000 	.word	0x20000000

08005490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005494:	f7ff fff0 	bl	8005478 <HAL_RCC_GetHCLKFreq>
 8005498:	4602      	mov	r2, r0
 800549a:	4b05      	ldr	r3, [pc, #20]	; (80054b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	0a9b      	lsrs	r3, r3, #10
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	4903      	ldr	r1, [pc, #12]	; (80054b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054a6:	5ccb      	ldrb	r3, [r1, r3]
 80054a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	40023800 	.word	0x40023800
 80054b4:	0801f9a0 	.word	0x0801f9a0

080054b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054bc:	f7ff ffdc 	bl	8005478 <HAL_RCC_GetHCLKFreq>
 80054c0:	4602      	mov	r2, r0
 80054c2:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	0b5b      	lsrs	r3, r3, #13
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	4903      	ldr	r1, [pc, #12]	; (80054dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80054ce:	5ccb      	ldrb	r3, [r1, r3]
 80054d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	40023800 	.word	0x40023800
 80054dc:	0801f9a0 	.word	0x0801f9a0

080054e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	220f      	movs	r2, #15
 80054ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80054f0:	4b12      	ldr	r3, [pc, #72]	; (800553c <HAL_RCC_GetClockConfig+0x5c>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f003 0203 	and.w	r2, r3, #3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80054fc:	4b0f      	ldr	r3, [pc, #60]	; (800553c <HAL_RCC_GetClockConfig+0x5c>)
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005508:	4b0c      	ldr	r3, [pc, #48]	; (800553c <HAL_RCC_GetClockConfig+0x5c>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005514:	4b09      	ldr	r3, [pc, #36]	; (800553c <HAL_RCC_GetClockConfig+0x5c>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	08db      	lsrs	r3, r3, #3
 800551a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005522:	4b07      	ldr	r3, [pc, #28]	; (8005540 <HAL_RCC_GetClockConfig+0x60>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 020f 	and.w	r2, r3, #15
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	601a      	str	r2, [r3, #0]
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	40023800 	.word	0x40023800
 8005540:	40023c00 	.word	0x40023c00

08005544 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800554c:	2300      	movs	r3, #0
 800554e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005550:	2300      	movs	r3, #0
 8005552:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005554:	2300      	movs	r3, #0
 8005556:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005558:	2300      	movs	r3, #0
 800555a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800555c:	2300      	movs	r3, #0
 800555e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	2b00      	cmp	r3, #0
 800556a:	d012      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800556c:	4b69      	ldr	r3, [pc, #420]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	4a68      	ldr	r2, [pc, #416]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005572:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005576:	6093      	str	r3, [r2, #8]
 8005578:	4b66      	ldr	r3, [pc, #408]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005580:	4964      	ldr	r1, [pc, #400]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005582:	4313      	orrs	r3, r2
 8005584:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800558e:	2301      	movs	r3, #1
 8005590:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d017      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800559e:	4b5d      	ldr	r3, [pc, #372]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ac:	4959      	ldr	r1, [pc, #356]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055bc:	d101      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80055be:	2301      	movs	r3, #1
 80055c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80055ca:	2301      	movs	r3, #1
 80055cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d017      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80055da:	4b4e      	ldr	r3, [pc, #312]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e8:	494a      	ldr	r1, [pc, #296]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055f8:	d101      	bne.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80055fa:	2301      	movs	r3, #1
 80055fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005606:	2301      	movs	r3, #1
 8005608:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005616:	2301      	movs	r3, #1
 8005618:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0320 	and.w	r3, r3, #32
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 808b 	beq.w	800573e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005628:	4b3a      	ldr	r3, [pc, #232]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800562a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562c:	4a39      	ldr	r2, [pc, #228]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800562e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005632:	6413      	str	r3, [r2, #64]	; 0x40
 8005634:	4b37      	ldr	r3, [pc, #220]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800563c:	60bb      	str	r3, [r7, #8]
 800563e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005640:	4b35      	ldr	r3, [pc, #212]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a34      	ldr	r2, [pc, #208]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800564a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800564c:	f7fc fb0a 	bl	8001c64 <HAL_GetTick>
 8005650:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005652:	e008      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005654:	f7fc fb06 	bl	8001c64 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b64      	cmp	r3, #100	; 0x64
 8005660:	d901      	bls.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e38f      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005666:	4b2c      	ldr	r3, [pc, #176]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566e:	2b00      	cmp	r3, #0
 8005670:	d0f0      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005672:	4b28      	ldr	r3, [pc, #160]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800567a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d035      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	429a      	cmp	r2, r3
 800568e:	d02e      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005690:	4b20      	ldr	r3, [pc, #128]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005698:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800569a:	4b1e      	ldr	r3, [pc, #120]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800569c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569e:	4a1d      	ldr	r2, [pc, #116]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056a4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056a6:	4b1b      	ldr	r3, [pc, #108]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056aa:	4a1a      	ldr	r2, [pc, #104]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80056b2:	4a18      	ldr	r2, [pc, #96]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056b8:	4b16      	ldr	r3, [pc, #88]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d114      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c4:	f7fc face 	bl	8001c64 <HAL_GetTick>
 80056c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ca:	e00a      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056cc:	f7fc faca 	bl	8001c64 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056da:	4293      	cmp	r3, r2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e351      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e2:	4b0c      	ldr	r3, [pc, #48]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0ee      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056fa:	d111      	bne.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80056fc:	4b05      	ldr	r3, [pc, #20]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005708:	4b04      	ldr	r3, [pc, #16]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800570a:	400b      	ands	r3, r1
 800570c:	4901      	ldr	r1, [pc, #4]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800570e:	4313      	orrs	r3, r2
 8005710:	608b      	str	r3, [r1, #8]
 8005712:	e00b      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005714:	40023800 	.word	0x40023800
 8005718:	40007000 	.word	0x40007000
 800571c:	0ffffcff 	.word	0x0ffffcff
 8005720:	4bac      	ldr	r3, [pc, #688]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	4aab      	ldr	r2, [pc, #684]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005726:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800572a:	6093      	str	r3, [r2, #8]
 800572c:	4ba9      	ldr	r3, [pc, #676]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800572e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005738:	49a6      	ldr	r1, [pc, #664]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800573a:	4313      	orrs	r3, r2
 800573c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0310 	and.w	r3, r3, #16
 8005746:	2b00      	cmp	r3, #0
 8005748:	d010      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800574a:	4ba2      	ldr	r3, [pc, #648]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800574c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005750:	4aa0      	ldr	r2, [pc, #640]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005752:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005756:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800575a:	4b9e      	ldr	r3, [pc, #632]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800575c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005764:	499b      	ldr	r1, [pc, #620]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005766:	4313      	orrs	r3, r2
 8005768:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00a      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005778:	4b96      	ldr	r3, [pc, #600]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800577a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005786:	4993      	ldr	r1, [pc, #588]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005788:	4313      	orrs	r3, r2
 800578a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800579a:	4b8e      	ldr	r3, [pc, #568]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800579c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057a8:	498a      	ldr	r1, [pc, #552]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00a      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057bc:	4b85      	ldr	r3, [pc, #532]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ca:	4982      	ldr	r1, [pc, #520]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057de:	4b7d      	ldr	r3, [pc, #500]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ec:	4979      	ldr	r1, [pc, #484]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005800:	4b74      	ldr	r3, [pc, #464]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005806:	f023 0203 	bic.w	r2, r3, #3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800580e:	4971      	ldr	r1, [pc, #452]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005810:	4313      	orrs	r3, r2
 8005812:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00a      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005822:	4b6c      	ldr	r3, [pc, #432]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005828:	f023 020c 	bic.w	r2, r3, #12
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005830:	4968      	ldr	r1, [pc, #416]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005832:	4313      	orrs	r3, r2
 8005834:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00a      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005844:	4b63      	ldr	r3, [pc, #396]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005852:	4960      	ldr	r1, [pc, #384]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005854:	4313      	orrs	r3, r2
 8005856:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005866:	4b5b      	ldr	r3, [pc, #364]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005874:	4957      	ldr	r1, [pc, #348]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005876:	4313      	orrs	r3, r2
 8005878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00a      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005888:	4b52      	ldr	r3, [pc, #328]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800588a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005896:	494f      	ldr	r1, [pc, #316]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005898:	4313      	orrs	r3, r2
 800589a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80058aa:	4b4a      	ldr	r3, [pc, #296]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b8:	4946      	ldr	r1, [pc, #280]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00a      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80058cc:	4b41      	ldr	r3, [pc, #260]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058da:	493e      	ldr	r1, [pc, #248]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80058ee:	4b39      	ldr	r3, [pc, #228]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058fc:	4935      	ldr	r1, [pc, #212]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00a      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005910:	4b30      	ldr	r3, [pc, #192]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005916:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800591e:	492d      	ldr	r1, [pc, #180]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005920:	4313      	orrs	r3, r2
 8005922:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d011      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005932:	4b28      	ldr	r3, [pc, #160]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005938:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005940:	4924      	ldr	r1, [pc, #144]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005942:	4313      	orrs	r3, r2
 8005944:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800594c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005950:	d101      	bne.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005952:	2301      	movs	r3, #1
 8005954:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0308 	and.w	r3, r3, #8
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005962:	2301      	movs	r3, #1
 8005964:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00a      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005972:	4b18      	ldr	r3, [pc, #96]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005978:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005980:	4914      	ldr	r1, [pc, #80]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005982:	4313      	orrs	r3, r2
 8005984:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00b      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005994:	4b0f      	ldr	r3, [pc, #60]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059a4:	490b      	ldr	r1, [pc, #44]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00f      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80059b8:	4b06      	ldr	r3, [pc, #24]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059be:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059c8:	4902      	ldr	r1, [pc, #8]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80059d0:	e002      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80059d2:	bf00      	nop
 80059d4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00b      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059e4:	4b8a      	ldr	r3, [pc, #552]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f4:	4986      	ldr	r1, [pc, #536]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00b      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005a08:	4b81      	ldr	r3, [pc, #516]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a0e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a18:	497d      	ldr	r1, [pc, #500]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d006      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 80d6 	beq.w	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a34:	4b76      	ldr	r3, [pc, #472]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a75      	ldr	r2, [pc, #468]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a40:	f7fc f910 	bl	8001c64 <HAL_GetTick>
 8005a44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a46:	e008      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a48:	f7fc f90c 	bl	8001c64 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b64      	cmp	r3, #100	; 0x64
 8005a54:	d901      	bls.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e195      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a5a:	4b6d      	ldr	r3, [pc, #436]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1f0      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d021      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d11d      	bne.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005a7a:	4b65      	ldr	r3, [pc, #404]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a80:	0c1b      	lsrs	r3, r3, #16
 8005a82:	f003 0303 	and.w	r3, r3, #3
 8005a86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a88:	4b61      	ldr	r3, [pc, #388]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a8e:	0e1b      	lsrs	r3, r3, #24
 8005a90:	f003 030f 	and.w	r3, r3, #15
 8005a94:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	019a      	lsls	r2, r3, #6
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	041b      	lsls	r3, r3, #16
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	061b      	lsls	r3, r3, #24
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	071b      	lsls	r3, r3, #28
 8005aae:	4958      	ldr	r1, [pc, #352]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d004      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aca:	d00a      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d02e      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005adc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ae0:	d129      	bne.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005ae2:	4b4b      	ldr	r3, [pc, #300]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ae8:	0c1b      	lsrs	r3, r3, #16
 8005aea:	f003 0303 	and.w	r3, r3, #3
 8005aee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005af0:	4b47      	ldr	r3, [pc, #284]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005af6:	0f1b      	lsrs	r3, r3, #28
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	019a      	lsls	r2, r3, #6
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	041b      	lsls	r3, r3, #16
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	061b      	lsls	r3, r3, #24
 8005b10:	431a      	orrs	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	071b      	lsls	r3, r3, #28
 8005b16:	493e      	ldr	r1, [pc, #248]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b1e:	4b3c      	ldr	r3, [pc, #240]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b24:	f023 021f 	bic.w	r2, r3, #31
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	4938      	ldr	r1, [pc, #224]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d01d      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b42:	4b33      	ldr	r3, [pc, #204]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b48:	0e1b      	lsrs	r3, r3, #24
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b50:	4b2f      	ldr	r3, [pc, #188]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b56:	0f1b      	lsrs	r3, r3, #28
 8005b58:	f003 0307 	and.w	r3, r3, #7
 8005b5c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	019a      	lsls	r2, r3, #6
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	041b      	lsls	r3, r3, #16
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	061b      	lsls	r3, r3, #24
 8005b70:	431a      	orrs	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	071b      	lsls	r3, r3, #28
 8005b76:	4926      	ldr	r1, [pc, #152]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d011      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	019a      	lsls	r2, r3, #6
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	041b      	lsls	r3, r3, #16
 8005b96:	431a      	orrs	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	061b      	lsls	r3, r3, #24
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	071b      	lsls	r3, r3, #28
 8005ba6:	491a      	ldr	r1, [pc, #104]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005bae:	4b18      	ldr	r3, [pc, #96]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a17      	ldr	r2, [pc, #92]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bba:	f7fc f853 	bl	8001c64 <HAL_GetTick>
 8005bbe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bc0:	e008      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005bc2:	f7fc f84f 	bl	8001c64 <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	2b64      	cmp	r3, #100	; 0x64
 8005bce:	d901      	bls.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e0d8      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bd4:	4b0e      	ldr	r3, [pc, #56]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d0f0      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	f040 80ce 	bne.w	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005be8:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a08      	ldr	r2, [pc, #32]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bf4:	f7fc f836 	bl	8001c64 <HAL_GetTick>
 8005bf8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005bfa:	e00b      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005bfc:	f7fc f832 	bl	8001c64 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b64      	cmp	r3, #100	; 0x64
 8005c08:	d904      	bls.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e0bb      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005c0e:	bf00      	nop
 8005c10:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c14:	4b5e      	ldr	r3, [pc, #376]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c20:	d0ec      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d009      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d02e      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d12a      	bne.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005c4a:	4b51      	ldr	r3, [pc, #324]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c50:	0c1b      	lsrs	r3, r3, #16
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c58:	4b4d      	ldr	r3, [pc, #308]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c5e:	0f1b      	lsrs	r3, r3, #28
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	019a      	lsls	r2, r3, #6
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	041b      	lsls	r3, r3, #16
 8005c70:	431a      	orrs	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	061b      	lsls	r3, r3, #24
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	071b      	lsls	r3, r3, #28
 8005c7e:	4944      	ldr	r1, [pc, #272]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c86:	4b42      	ldr	r3, [pc, #264]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c8c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c94:	3b01      	subs	r3, #1
 8005c96:	021b      	lsls	r3, r3, #8
 8005c98:	493d      	ldr	r1, [pc, #244]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d022      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cb4:	d11d      	bne.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005cb6:	4b36      	ldr	r3, [pc, #216]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cbc:	0e1b      	lsrs	r3, r3, #24
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005cc4:	4b32      	ldr	r3, [pc, #200]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cca:	0f1b      	lsrs	r3, r3, #28
 8005ccc:	f003 0307 	and.w	r3, r3, #7
 8005cd0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	019a      	lsls	r2, r3, #6
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	041b      	lsls	r3, r3, #16
 8005cde:	431a      	orrs	r2, r3
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	061b      	lsls	r3, r3, #24
 8005ce4:	431a      	orrs	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	071b      	lsls	r3, r3, #28
 8005cea:	4929      	ldr	r1, [pc, #164]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d028      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005cfe:	4b24      	ldr	r3, [pc, #144]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d04:	0e1b      	lsrs	r3, r3, #24
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d0c:	4b20      	ldr	r3, [pc, #128]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d12:	0c1b      	lsrs	r3, r3, #16
 8005d14:	f003 0303 	and.w	r3, r3, #3
 8005d18:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	019a      	lsls	r2, r3, #6
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	041b      	lsls	r3, r3, #16
 8005d24:	431a      	orrs	r2, r3
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	061b      	lsls	r3, r3, #24
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	69db      	ldr	r3, [r3, #28]
 8005d30:	071b      	lsls	r3, r3, #28
 8005d32:	4917      	ldr	r1, [pc, #92]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d3a:	4b15      	ldr	r3, [pc, #84]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d48:	4911      	ldr	r1, [pc, #68]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d50:	4b0f      	ldr	r3, [pc, #60]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a0e      	ldr	r2, [pc, #56]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d5c:	f7fb ff82 	bl	8001c64 <HAL_GetTick>
 8005d60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d62:	e008      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d64:	f7fb ff7e 	bl	8001c64 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b64      	cmp	r3, #100	; 0x64
 8005d70:	d901      	bls.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e007      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d76:	4b06      	ldr	r3, [pc, #24]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d82:	d1ef      	bne.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3720      	adds	r7, #32
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	40023800 	.word	0x40023800

08005d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e049      	b.n	8005e3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d106      	bne.n	8005dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f841 	bl	8005e42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	3304      	adds	r3, #4
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4610      	mov	r0, r2
 8005dd4:	f000 fa00 	bl	80061d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b083      	sub	sp, #12
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005e4a:	bf00      	nop
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
	...

08005e58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d001      	beq.n	8005e70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e054      	b.n	8005f1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68da      	ldr	r2, [r3, #12]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f042 0201 	orr.w	r2, r2, #1
 8005e86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a26      	ldr	r2, [pc, #152]	; (8005f28 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d022      	beq.n	8005ed8 <HAL_TIM_Base_Start_IT+0x80>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e9a:	d01d      	beq.n	8005ed8 <HAL_TIM_Base_Start_IT+0x80>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a22      	ldr	r2, [pc, #136]	; (8005f2c <HAL_TIM_Base_Start_IT+0xd4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d018      	beq.n	8005ed8 <HAL_TIM_Base_Start_IT+0x80>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a21      	ldr	r2, [pc, #132]	; (8005f30 <HAL_TIM_Base_Start_IT+0xd8>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d013      	beq.n	8005ed8 <HAL_TIM_Base_Start_IT+0x80>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a1f      	ldr	r2, [pc, #124]	; (8005f34 <HAL_TIM_Base_Start_IT+0xdc>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d00e      	beq.n	8005ed8 <HAL_TIM_Base_Start_IT+0x80>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a1e      	ldr	r2, [pc, #120]	; (8005f38 <HAL_TIM_Base_Start_IT+0xe0>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d009      	beq.n	8005ed8 <HAL_TIM_Base_Start_IT+0x80>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a1c      	ldr	r2, [pc, #112]	; (8005f3c <HAL_TIM_Base_Start_IT+0xe4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d004      	beq.n	8005ed8 <HAL_TIM_Base_Start_IT+0x80>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a1b      	ldr	r2, [pc, #108]	; (8005f40 <HAL_TIM_Base_Start_IT+0xe8>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d115      	bne.n	8005f04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689a      	ldr	r2, [r3, #8]
 8005ede:	4b19      	ldr	r3, [pc, #100]	; (8005f44 <HAL_TIM_Base_Start_IT+0xec>)
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b06      	cmp	r3, #6
 8005ee8:	d015      	beq.n	8005f16 <HAL_TIM_Base_Start_IT+0xbe>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ef0:	d011      	beq.n	8005f16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f042 0201 	orr.w	r2, r2, #1
 8005f00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f02:	e008      	b.n	8005f16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f042 0201 	orr.w	r2, r2, #1
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	e000      	b.n	8005f18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3714      	adds	r7, #20
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	40010000 	.word	0x40010000
 8005f2c:	40000400 	.word	0x40000400
 8005f30:	40000800 	.word	0x40000800
 8005f34:	40000c00 	.word	0x40000c00
 8005f38:	40010400 	.word	0x40010400
 8005f3c:	40014000 	.word	0x40014000
 8005f40:	40001800 	.word	0x40001800
 8005f44:	00010007 	.word	0x00010007

08005f48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d122      	bne.n	8005fa4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d11b      	bne.n	8005fa4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f06f 0202 	mvn.w	r2, #2
 8005f74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	f003 0303 	and.w	r3, r3, #3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f905 	bl	800619a <HAL_TIM_IC_CaptureCallback>
 8005f90:	e005      	b.n	8005f9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f8f7 	bl	8006186 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f908 	bl	80061ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	f003 0304 	and.w	r3, r3, #4
 8005fae:	2b04      	cmp	r3, #4
 8005fb0:	d122      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f003 0304 	and.w	r3, r3, #4
 8005fbc:	2b04      	cmp	r3, #4
 8005fbe:	d11b      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f06f 0204 	mvn.w	r2, #4
 8005fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2202      	movs	r2, #2
 8005fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f8db 	bl	800619a <HAL_TIM_IC_CaptureCallback>
 8005fe4:	e005      	b.n	8005ff2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f8cd 	bl	8006186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f8de 	bl	80061ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	f003 0308 	and.w	r3, r3, #8
 8006002:	2b08      	cmp	r3, #8
 8006004:	d122      	bne.n	800604c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f003 0308 	and.w	r3, r3, #8
 8006010:	2b08      	cmp	r3, #8
 8006012:	d11b      	bne.n	800604c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f06f 0208 	mvn.w	r2, #8
 800601c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2204      	movs	r2, #4
 8006022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	f003 0303 	and.w	r3, r3, #3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f8b1 	bl	800619a <HAL_TIM_IC_CaptureCallback>
 8006038:	e005      	b.n	8006046 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f8a3 	bl	8006186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f8b4 	bl	80061ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	f003 0310 	and.w	r3, r3, #16
 8006056:	2b10      	cmp	r3, #16
 8006058:	d122      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	f003 0310 	and.w	r3, r3, #16
 8006064:	2b10      	cmp	r3, #16
 8006066:	d11b      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f06f 0210 	mvn.w	r2, #16
 8006070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2208      	movs	r2, #8
 8006076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f887 	bl	800619a <HAL_TIM_IC_CaptureCallback>
 800608c:	e005      	b.n	800609a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f879 	bl	8006186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f88a 	bl	80061ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d10e      	bne.n	80060cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d107      	bne.n	80060cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f06f 0201 	mvn.w	r2, #1
 80060c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7fb f8b0 	bl	800122c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d6:	2b80      	cmp	r3, #128	; 0x80
 80060d8:	d10e      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e4:	2b80      	cmp	r3, #128	; 0x80
 80060e6:	d107      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f91a 	bl	800632c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006106:	d10e      	bne.n	8006126 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006112:	2b80      	cmp	r3, #128	; 0x80
 8006114:	d107      	bne.n	8006126 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800611e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f90d 	bl	8006340 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006130:	2b40      	cmp	r3, #64	; 0x40
 8006132:	d10e      	bne.n	8006152 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613e:	2b40      	cmp	r3, #64	; 0x40
 8006140:	d107      	bne.n	8006152 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800614a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 f838 	bl	80061c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	f003 0320 	and.w	r3, r3, #32
 800615c:	2b20      	cmp	r3, #32
 800615e:	d10e      	bne.n	800617e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f003 0320 	and.w	r3, r3, #32
 800616a:	2b20      	cmp	r3, #32
 800616c:	d107      	bne.n	800617e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f06f 0220 	mvn.w	r2, #32
 8006176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 f8cd 	bl	8006318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800617e:	bf00      	nop
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006186:	b480      	push	{r7}
 8006188:	b083      	sub	sp, #12
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800618e:	bf00      	nop
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061a2:	bf00      	nop
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b083      	sub	sp, #12
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061b6:	bf00      	nop
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b083      	sub	sp, #12
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061ca:	bf00      	nop
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
	...

080061d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a40      	ldr	r2, [pc, #256]	; (80062ec <TIM_Base_SetConfig+0x114>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d013      	beq.n	8006218 <TIM_Base_SetConfig+0x40>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f6:	d00f      	beq.n	8006218 <TIM_Base_SetConfig+0x40>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a3d      	ldr	r2, [pc, #244]	; (80062f0 <TIM_Base_SetConfig+0x118>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d00b      	beq.n	8006218 <TIM_Base_SetConfig+0x40>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a3c      	ldr	r2, [pc, #240]	; (80062f4 <TIM_Base_SetConfig+0x11c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d007      	beq.n	8006218 <TIM_Base_SetConfig+0x40>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a3b      	ldr	r2, [pc, #236]	; (80062f8 <TIM_Base_SetConfig+0x120>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d003      	beq.n	8006218 <TIM_Base_SetConfig+0x40>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a3a      	ldr	r2, [pc, #232]	; (80062fc <TIM_Base_SetConfig+0x124>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d108      	bne.n	800622a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a2f      	ldr	r2, [pc, #188]	; (80062ec <TIM_Base_SetConfig+0x114>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d02b      	beq.n	800628a <TIM_Base_SetConfig+0xb2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006238:	d027      	beq.n	800628a <TIM_Base_SetConfig+0xb2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a2c      	ldr	r2, [pc, #176]	; (80062f0 <TIM_Base_SetConfig+0x118>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d023      	beq.n	800628a <TIM_Base_SetConfig+0xb2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a2b      	ldr	r2, [pc, #172]	; (80062f4 <TIM_Base_SetConfig+0x11c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d01f      	beq.n	800628a <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a2a      	ldr	r2, [pc, #168]	; (80062f8 <TIM_Base_SetConfig+0x120>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d01b      	beq.n	800628a <TIM_Base_SetConfig+0xb2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a29      	ldr	r2, [pc, #164]	; (80062fc <TIM_Base_SetConfig+0x124>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d017      	beq.n	800628a <TIM_Base_SetConfig+0xb2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a28      	ldr	r2, [pc, #160]	; (8006300 <TIM_Base_SetConfig+0x128>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d013      	beq.n	800628a <TIM_Base_SetConfig+0xb2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a27      	ldr	r2, [pc, #156]	; (8006304 <TIM_Base_SetConfig+0x12c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d00f      	beq.n	800628a <TIM_Base_SetConfig+0xb2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a26      	ldr	r2, [pc, #152]	; (8006308 <TIM_Base_SetConfig+0x130>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d00b      	beq.n	800628a <TIM_Base_SetConfig+0xb2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a25      	ldr	r2, [pc, #148]	; (800630c <TIM_Base_SetConfig+0x134>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d007      	beq.n	800628a <TIM_Base_SetConfig+0xb2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a24      	ldr	r2, [pc, #144]	; (8006310 <TIM_Base_SetConfig+0x138>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d003      	beq.n	800628a <TIM_Base_SetConfig+0xb2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a23      	ldr	r2, [pc, #140]	; (8006314 <TIM_Base_SetConfig+0x13c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d108      	bne.n	800629c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	4313      	orrs	r3, r2
 800629a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a0a      	ldr	r2, [pc, #40]	; (80062ec <TIM_Base_SetConfig+0x114>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d003      	beq.n	80062d0 <TIM_Base_SetConfig+0xf8>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a0c      	ldr	r2, [pc, #48]	; (80062fc <TIM_Base_SetConfig+0x124>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d103      	bne.n	80062d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	691a      	ldr	r2, [r3, #16]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	615a      	str	r2, [r3, #20]
}
 80062de:	bf00      	nop
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	40010000 	.word	0x40010000
 80062f0:	40000400 	.word	0x40000400
 80062f4:	40000800 	.word	0x40000800
 80062f8:	40000c00 	.word	0x40000c00
 80062fc:	40010400 	.word	0x40010400
 8006300:	40014000 	.word	0x40014000
 8006304:	40014400 	.word	0x40014400
 8006308:	40014800 	.word	0x40014800
 800630c:	40001800 	.word	0x40001800
 8006310:	40001c00 	.word	0x40001c00
 8006314:	40002000 	.word	0x40002000

08006318 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e040      	b.n	80063e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800636a:	2b00      	cmp	r3, #0
 800636c:	d106      	bne.n	800637c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7fb f802 	bl	8001380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2224      	movs	r2, #36	; 0x24
 8006380:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 0201 	bic.w	r2, r2, #1
 8006390:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fbc2 	bl	8006b1c <UART_SetConfig>
 8006398:	4603      	mov	r3, r0
 800639a:	2b01      	cmp	r3, #1
 800639c:	d101      	bne.n	80063a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e022      	b.n	80063e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fe1a 	bl	8006fe4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689a      	ldr	r2, [r3, #8]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f042 0201 	orr.w	r2, r2, #1
 80063de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fea1 	bl	8007128 <UART_CheckIdleState>
 80063e6:	4603      	mov	r3, r0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3708      	adds	r7, #8
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b08a      	sub	sp, #40	; 0x28
 80063f4:	af02      	add	r7, sp, #8
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	603b      	str	r3, [r7, #0]
 80063fc:	4613      	mov	r3, r2
 80063fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006404:	2b20      	cmp	r3, #32
 8006406:	d171      	bne.n	80064ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <HAL_UART_Transmit+0x24>
 800640e:	88fb      	ldrh	r3, [r7, #6]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d101      	bne.n	8006418 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e06a      	b.n	80064ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2221      	movs	r2, #33	; 0x21
 8006424:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006426:	f7fb fc1d 	bl	8001c64 <HAL_GetTick>
 800642a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	88fa      	ldrh	r2, [r7, #6]
 8006430:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	88fa      	ldrh	r2, [r7, #6]
 8006438:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006444:	d108      	bne.n	8006458 <HAL_UART_Transmit+0x68>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d104      	bne.n	8006458 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800644e:	2300      	movs	r3, #0
 8006450:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	61bb      	str	r3, [r7, #24]
 8006456:	e003      	b.n	8006460 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800645c:	2300      	movs	r3, #0
 800645e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006460:	e02c      	b.n	80064bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2200      	movs	r2, #0
 800646a:	2180      	movs	r1, #128	; 0x80
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 fea8 	bl	80071c2 <UART_WaitOnFlagUntilTimeout>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e038      	b.n	80064ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10b      	bne.n	800649a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006490:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	3302      	adds	r3, #2
 8006496:	61bb      	str	r3, [r7, #24]
 8006498:	e007      	b.n	80064aa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	781a      	ldrb	r2, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	3301      	adds	r3, #1
 80064a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	3b01      	subs	r3, #1
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1cc      	bne.n	8006462 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2200      	movs	r2, #0
 80064d0:	2140      	movs	r1, #64	; 0x40
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f000 fe75 	bl	80071c2 <UART_WaitOnFlagUntilTimeout>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e005      	b.n	80064ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2220      	movs	r2, #32
 80064e6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80064e8:	2300      	movs	r3, #0
 80064ea:	e000      	b.n	80064ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80064ec:	2302      	movs	r3, #2
  }
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3720      	adds	r7, #32
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
	...

080064f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b0ba      	sub	sp, #232	; 0xe8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800651e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006522:	f640 030f 	movw	r3, #2063	; 0x80f
 8006526:	4013      	ands	r3, r2
 8006528:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800652c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006530:	2b00      	cmp	r3, #0
 8006532:	d115      	bne.n	8006560 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006538:	f003 0320 	and.w	r3, r3, #32
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00f      	beq.n	8006560 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006544:	f003 0320 	and.w	r3, r3, #32
 8006548:	2b00      	cmp	r3, #0
 800654a:	d009      	beq.n	8006560 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 82ac 	beq.w	8006aae <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	4798      	blx	r3
      }
      return;
 800655e:	e2a6      	b.n	8006aae <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006560:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 8117 	beq.w	8006798 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800656a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b00      	cmp	r3, #0
 8006574:	d106      	bne.n	8006584 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006576:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800657a:	4b85      	ldr	r3, [pc, #532]	; (8006790 <HAL_UART_IRQHandler+0x298>)
 800657c:	4013      	ands	r3, r2
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 810a 	beq.w	8006798 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	2b00      	cmp	r3, #0
 800658e:	d011      	beq.n	80065b4 <HAL_UART_IRQHandler+0xbc>
 8006590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00b      	beq.n	80065b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2201      	movs	r2, #1
 80065a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065aa:	f043 0201 	orr.w	r2, r3, #1
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065b8:	f003 0302 	and.w	r3, r3, #2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d011      	beq.n	80065e4 <HAL_UART_IRQHandler+0xec>
 80065c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00b      	beq.n	80065e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2202      	movs	r2, #2
 80065d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065da:	f043 0204 	orr.w	r2, r3, #4
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065e8:	f003 0304 	and.w	r3, r3, #4
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d011      	beq.n	8006614 <HAL_UART_IRQHandler+0x11c>
 80065f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00b      	beq.n	8006614 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2204      	movs	r2, #4
 8006602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800660a:	f043 0202 	orr.w	r2, r3, #2
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006618:	f003 0308 	and.w	r3, r3, #8
 800661c:	2b00      	cmp	r3, #0
 800661e:	d017      	beq.n	8006650 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006624:	f003 0320 	and.w	r3, r3, #32
 8006628:	2b00      	cmp	r3, #0
 800662a:	d105      	bne.n	8006638 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800662c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006630:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00b      	beq.n	8006650 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2208      	movs	r2, #8
 800663e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006646:	f043 0208 	orr.w	r2, r3, #8
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006658:	2b00      	cmp	r3, #0
 800665a:	d012      	beq.n	8006682 <HAL_UART_IRQHandler+0x18a>
 800665c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006660:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00c      	beq.n	8006682 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006670:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006678:	f043 0220 	orr.w	r2, r3, #32
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 8212 	beq.w	8006ab2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800668e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006692:	f003 0320 	and.w	r3, r3, #32
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00d      	beq.n	80066b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800669a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d007      	beq.n	80066b6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d003      	beq.n	80066b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ca:	2b40      	cmp	r3, #64	; 0x40
 80066cc:	d005      	beq.n	80066da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80066ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d04f      	beq.n	800677a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fe37 	bl	800734e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ea:	2b40      	cmp	r3, #64	; 0x40
 80066ec:	d141      	bne.n	8006772 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3308      	adds	r3, #8
 80066f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066fc:	e853 3f00 	ldrex	r3, [r3]
 8006700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006704:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800670c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	3308      	adds	r3, #8
 8006716:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800671a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800671e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006722:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006726:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800672a:	e841 2300 	strex	r3, r2, [r1]
 800672e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006732:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1d9      	bne.n	80066ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800673e:	2b00      	cmp	r3, #0
 8006740:	d013      	beq.n	800676a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006746:	4a13      	ldr	r2, [pc, #76]	; (8006794 <HAL_UART_IRQHandler+0x29c>)
 8006748:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800674e:	4618      	mov	r0, r3
 8006750:	f7fc f9be 	bl	8002ad0 <HAL_DMA_Abort_IT>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d017      	beq.n	800678a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800675e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006764:	4610      	mov	r0, r2
 8006766:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006768:	e00f      	b.n	800678a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f9b6 	bl	8006adc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006770:	e00b      	b.n	800678a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f9b2 	bl	8006adc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006778:	e007      	b.n	800678a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f9ae 	bl	8006adc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006788:	e193      	b.n	8006ab2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800678a:	bf00      	nop
    return;
 800678c:	e191      	b.n	8006ab2 <HAL_UART_IRQHandler+0x5ba>
 800678e:	bf00      	nop
 8006790:	04000120 	.word	0x04000120
 8006794:	08007417 	.word	0x08007417

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800679c:	2b01      	cmp	r3, #1
 800679e:	f040 814c 	bne.w	8006a3a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80067a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a6:	f003 0310 	and.w	r3, r3, #16
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 8145 	beq.w	8006a3a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80067b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b4:	f003 0310 	and.w	r3, r3, #16
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 813e 	beq.w	8006a3a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2210      	movs	r2, #16
 80067c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d0:	2b40      	cmp	r3, #64	; 0x40
 80067d2:	f040 80b6 	bne.w	8006942 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f000 8165 	beq.w	8006ab6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80067f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067f6:	429a      	cmp	r2, r3
 80067f8:	f080 815d 	bcs.w	8006ab6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006802:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006810:	f000 8086 	beq.w	8006920 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006820:	e853 3f00 	ldrex	r3, [r3]
 8006824:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006828:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800682c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006830:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	461a      	mov	r2, r3
 800683a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800683e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006842:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800684a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800684e:	e841 2300 	strex	r3, r2, [r1]
 8006852:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006856:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1da      	bne.n	8006814 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	3308      	adds	r3, #8
 8006864:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006868:	e853 3f00 	ldrex	r3, [r3]
 800686c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800686e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006870:	f023 0301 	bic.w	r3, r3, #1
 8006874:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3308      	adds	r3, #8
 800687e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006882:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006886:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006888:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800688a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800688e:	e841 2300 	strex	r3, r2, [r1]
 8006892:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1e1      	bne.n	800685e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3308      	adds	r3, #8
 80068a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068a4:	e853 3f00 	ldrex	r3, [r3]
 80068a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80068aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	3308      	adds	r3, #8
 80068ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068c6:	e841 2300 	strex	r3, r2, [r1]
 80068ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80068cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1e3      	bne.n	800689a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2220      	movs	r2, #32
 80068d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e8:	e853 3f00 	ldrex	r3, [r3]
 80068ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068f0:	f023 0310 	bic.w	r3, r3, #16
 80068f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	461a      	mov	r2, r3
 80068fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006902:	65bb      	str	r3, [r7, #88]	; 0x58
 8006904:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006906:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006908:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800690a:	e841 2300 	strex	r3, r2, [r1]
 800690e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1e4      	bne.n	80068e0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800691a:	4618      	mov	r0, r3
 800691c:	f7fc f868 	bl	80029f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2202      	movs	r2, #2
 8006924:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006932:	b29b      	uxth	r3, r3
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	b29b      	uxth	r3, r3
 8006938:	4619      	mov	r1, r3
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f8d8 	bl	8006af0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006940:	e0b9      	b.n	8006ab6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800694e:	b29b      	uxth	r3, r3
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800695c:	b29b      	uxth	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 80ab 	beq.w	8006aba <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006964:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 80a6 	beq.w	8006aba <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006976:	e853 3f00 	ldrex	r3, [r3]
 800697a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800697c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006982:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	461a      	mov	r2, r3
 800698c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006990:	647b      	str	r3, [r7, #68]	; 0x44
 8006992:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006994:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006996:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006998:	e841 2300 	strex	r3, r2, [r1]
 800699c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800699e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1e4      	bne.n	800696e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3308      	adds	r3, #8
 80069aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	e853 3f00 	ldrex	r3, [r3]
 80069b2:	623b      	str	r3, [r7, #32]
   return(result);
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	f023 0301 	bic.w	r3, r3, #1
 80069ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3308      	adds	r3, #8
 80069c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80069c8:	633a      	str	r2, [r7, #48]	; 0x30
 80069ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069d0:	e841 2300 	strex	r3, r2, [r1]
 80069d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1e3      	bne.n	80069a4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2220      	movs	r2, #32
 80069e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	e853 3f00 	ldrex	r3, [r3]
 80069fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f023 0310 	bic.w	r3, r3, #16
 8006a04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a12:	61fb      	str	r3, [r7, #28]
 8006a14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a16:	69b9      	ldr	r1, [r7, #24]
 8006a18:	69fa      	ldr	r2, [r7, #28]
 8006a1a:	e841 2300 	strex	r3, r2, [r1]
 8006a1e:	617b      	str	r3, [r7, #20]
   return(result);
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1e4      	bne.n	80069f0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2202      	movs	r2, #2
 8006a2a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f85c 	bl	8006af0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a38:	e03f      	b.n	8006aba <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00e      	beq.n	8006a64 <HAL_UART_IRQHandler+0x56c>
 8006a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d008      	beq.n	8006a64 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f853 	bl	8006b08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a62:	e02d      	b.n	8006ac0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00e      	beq.n	8006a8e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d008      	beq.n	8006a8e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d01c      	beq.n	8006abe <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	4798      	blx	r3
    }
    return;
 8006a8c:	e017      	b.n	8006abe <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d012      	beq.n	8006ac0 <HAL_UART_IRQHandler+0x5c8>
 8006a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00c      	beq.n	8006ac0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fccb 	bl	8007442 <UART_EndTransmit_IT>
    return;
 8006aac:	e008      	b.n	8006ac0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006aae:	bf00      	nop
 8006ab0:	e006      	b.n	8006ac0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006ab2:	bf00      	nop
 8006ab4:	e004      	b.n	8006ac0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006ab6:	bf00      	nop
 8006ab8:	e002      	b.n	8006ac0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006aba:	bf00      	nop
 8006abc:	e000      	b.n	8006ac0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006abe:	bf00      	nop
  }

}
 8006ac0:	37e8      	adds	r7, #232	; 0xe8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop

08006ac8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	460b      	mov	r3, r1
 8006afa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b088      	sub	sp, #32
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b24:	2300      	movs	r3, #0
 8006b26:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689a      	ldr	r2, [r3, #8]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	431a      	orrs	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	431a      	orrs	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	4ba6      	ldr	r3, [pc, #664]	; (8006de0 <UART_SetConfig+0x2c4>)
 8006b48:	4013      	ands	r3, r2
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	6812      	ldr	r2, [r2, #0]
 8006b4e:	6979      	ldr	r1, [r7, #20]
 8006b50:	430b      	orrs	r3, r1
 8006b52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68da      	ldr	r2, [r3, #12]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a94      	ldr	r2, [pc, #592]	; (8006de4 <UART_SetConfig+0x2c8>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d120      	bne.n	8006bda <UART_SetConfig+0xbe>
 8006b98:	4b93      	ldr	r3, [pc, #588]	; (8006de8 <UART_SetConfig+0x2cc>)
 8006b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b9e:	f003 0303 	and.w	r3, r3, #3
 8006ba2:	2b03      	cmp	r3, #3
 8006ba4:	d816      	bhi.n	8006bd4 <UART_SetConfig+0xb8>
 8006ba6:	a201      	add	r2, pc, #4	; (adr r2, 8006bac <UART_SetConfig+0x90>)
 8006ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bac:	08006bbd 	.word	0x08006bbd
 8006bb0:	08006bc9 	.word	0x08006bc9
 8006bb4:	08006bc3 	.word	0x08006bc3
 8006bb8:	08006bcf 	.word	0x08006bcf
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	77fb      	strb	r3, [r7, #31]
 8006bc0:	e150      	b.n	8006e64 <UART_SetConfig+0x348>
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	77fb      	strb	r3, [r7, #31]
 8006bc6:	e14d      	b.n	8006e64 <UART_SetConfig+0x348>
 8006bc8:	2304      	movs	r3, #4
 8006bca:	77fb      	strb	r3, [r7, #31]
 8006bcc:	e14a      	b.n	8006e64 <UART_SetConfig+0x348>
 8006bce:	2308      	movs	r3, #8
 8006bd0:	77fb      	strb	r3, [r7, #31]
 8006bd2:	e147      	b.n	8006e64 <UART_SetConfig+0x348>
 8006bd4:	2310      	movs	r3, #16
 8006bd6:	77fb      	strb	r3, [r7, #31]
 8006bd8:	e144      	b.n	8006e64 <UART_SetConfig+0x348>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a83      	ldr	r2, [pc, #524]	; (8006dec <UART_SetConfig+0x2d0>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d132      	bne.n	8006c4a <UART_SetConfig+0x12e>
 8006be4:	4b80      	ldr	r3, [pc, #512]	; (8006de8 <UART_SetConfig+0x2cc>)
 8006be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bea:	f003 030c 	and.w	r3, r3, #12
 8006bee:	2b0c      	cmp	r3, #12
 8006bf0:	d828      	bhi.n	8006c44 <UART_SetConfig+0x128>
 8006bf2:	a201      	add	r2, pc, #4	; (adr r2, 8006bf8 <UART_SetConfig+0xdc>)
 8006bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf8:	08006c2d 	.word	0x08006c2d
 8006bfc:	08006c45 	.word	0x08006c45
 8006c00:	08006c45 	.word	0x08006c45
 8006c04:	08006c45 	.word	0x08006c45
 8006c08:	08006c39 	.word	0x08006c39
 8006c0c:	08006c45 	.word	0x08006c45
 8006c10:	08006c45 	.word	0x08006c45
 8006c14:	08006c45 	.word	0x08006c45
 8006c18:	08006c33 	.word	0x08006c33
 8006c1c:	08006c45 	.word	0x08006c45
 8006c20:	08006c45 	.word	0x08006c45
 8006c24:	08006c45 	.word	0x08006c45
 8006c28:	08006c3f 	.word	0x08006c3f
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	77fb      	strb	r3, [r7, #31]
 8006c30:	e118      	b.n	8006e64 <UART_SetConfig+0x348>
 8006c32:	2302      	movs	r3, #2
 8006c34:	77fb      	strb	r3, [r7, #31]
 8006c36:	e115      	b.n	8006e64 <UART_SetConfig+0x348>
 8006c38:	2304      	movs	r3, #4
 8006c3a:	77fb      	strb	r3, [r7, #31]
 8006c3c:	e112      	b.n	8006e64 <UART_SetConfig+0x348>
 8006c3e:	2308      	movs	r3, #8
 8006c40:	77fb      	strb	r3, [r7, #31]
 8006c42:	e10f      	b.n	8006e64 <UART_SetConfig+0x348>
 8006c44:	2310      	movs	r3, #16
 8006c46:	77fb      	strb	r3, [r7, #31]
 8006c48:	e10c      	b.n	8006e64 <UART_SetConfig+0x348>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a68      	ldr	r2, [pc, #416]	; (8006df0 <UART_SetConfig+0x2d4>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d120      	bne.n	8006c96 <UART_SetConfig+0x17a>
 8006c54:	4b64      	ldr	r3, [pc, #400]	; (8006de8 <UART_SetConfig+0x2cc>)
 8006c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c5e:	2b30      	cmp	r3, #48	; 0x30
 8006c60:	d013      	beq.n	8006c8a <UART_SetConfig+0x16e>
 8006c62:	2b30      	cmp	r3, #48	; 0x30
 8006c64:	d814      	bhi.n	8006c90 <UART_SetConfig+0x174>
 8006c66:	2b20      	cmp	r3, #32
 8006c68:	d009      	beq.n	8006c7e <UART_SetConfig+0x162>
 8006c6a:	2b20      	cmp	r3, #32
 8006c6c:	d810      	bhi.n	8006c90 <UART_SetConfig+0x174>
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d002      	beq.n	8006c78 <UART_SetConfig+0x15c>
 8006c72:	2b10      	cmp	r3, #16
 8006c74:	d006      	beq.n	8006c84 <UART_SetConfig+0x168>
 8006c76:	e00b      	b.n	8006c90 <UART_SetConfig+0x174>
 8006c78:	2300      	movs	r3, #0
 8006c7a:	77fb      	strb	r3, [r7, #31]
 8006c7c:	e0f2      	b.n	8006e64 <UART_SetConfig+0x348>
 8006c7e:	2302      	movs	r3, #2
 8006c80:	77fb      	strb	r3, [r7, #31]
 8006c82:	e0ef      	b.n	8006e64 <UART_SetConfig+0x348>
 8006c84:	2304      	movs	r3, #4
 8006c86:	77fb      	strb	r3, [r7, #31]
 8006c88:	e0ec      	b.n	8006e64 <UART_SetConfig+0x348>
 8006c8a:	2308      	movs	r3, #8
 8006c8c:	77fb      	strb	r3, [r7, #31]
 8006c8e:	e0e9      	b.n	8006e64 <UART_SetConfig+0x348>
 8006c90:	2310      	movs	r3, #16
 8006c92:	77fb      	strb	r3, [r7, #31]
 8006c94:	e0e6      	b.n	8006e64 <UART_SetConfig+0x348>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a56      	ldr	r2, [pc, #344]	; (8006df4 <UART_SetConfig+0x2d8>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d120      	bne.n	8006ce2 <UART_SetConfig+0x1c6>
 8006ca0:	4b51      	ldr	r3, [pc, #324]	; (8006de8 <UART_SetConfig+0x2cc>)
 8006ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006caa:	2bc0      	cmp	r3, #192	; 0xc0
 8006cac:	d013      	beq.n	8006cd6 <UART_SetConfig+0x1ba>
 8006cae:	2bc0      	cmp	r3, #192	; 0xc0
 8006cb0:	d814      	bhi.n	8006cdc <UART_SetConfig+0x1c0>
 8006cb2:	2b80      	cmp	r3, #128	; 0x80
 8006cb4:	d009      	beq.n	8006cca <UART_SetConfig+0x1ae>
 8006cb6:	2b80      	cmp	r3, #128	; 0x80
 8006cb8:	d810      	bhi.n	8006cdc <UART_SetConfig+0x1c0>
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d002      	beq.n	8006cc4 <UART_SetConfig+0x1a8>
 8006cbe:	2b40      	cmp	r3, #64	; 0x40
 8006cc0:	d006      	beq.n	8006cd0 <UART_SetConfig+0x1b4>
 8006cc2:	e00b      	b.n	8006cdc <UART_SetConfig+0x1c0>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	77fb      	strb	r3, [r7, #31]
 8006cc8:	e0cc      	b.n	8006e64 <UART_SetConfig+0x348>
 8006cca:	2302      	movs	r3, #2
 8006ccc:	77fb      	strb	r3, [r7, #31]
 8006cce:	e0c9      	b.n	8006e64 <UART_SetConfig+0x348>
 8006cd0:	2304      	movs	r3, #4
 8006cd2:	77fb      	strb	r3, [r7, #31]
 8006cd4:	e0c6      	b.n	8006e64 <UART_SetConfig+0x348>
 8006cd6:	2308      	movs	r3, #8
 8006cd8:	77fb      	strb	r3, [r7, #31]
 8006cda:	e0c3      	b.n	8006e64 <UART_SetConfig+0x348>
 8006cdc:	2310      	movs	r3, #16
 8006cde:	77fb      	strb	r3, [r7, #31]
 8006ce0:	e0c0      	b.n	8006e64 <UART_SetConfig+0x348>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a44      	ldr	r2, [pc, #272]	; (8006df8 <UART_SetConfig+0x2dc>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d125      	bne.n	8006d38 <UART_SetConfig+0x21c>
 8006cec:	4b3e      	ldr	r3, [pc, #248]	; (8006de8 <UART_SetConfig+0x2cc>)
 8006cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cfa:	d017      	beq.n	8006d2c <UART_SetConfig+0x210>
 8006cfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d00:	d817      	bhi.n	8006d32 <UART_SetConfig+0x216>
 8006d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d06:	d00b      	beq.n	8006d20 <UART_SetConfig+0x204>
 8006d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d0c:	d811      	bhi.n	8006d32 <UART_SetConfig+0x216>
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d003      	beq.n	8006d1a <UART_SetConfig+0x1fe>
 8006d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d16:	d006      	beq.n	8006d26 <UART_SetConfig+0x20a>
 8006d18:	e00b      	b.n	8006d32 <UART_SetConfig+0x216>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	77fb      	strb	r3, [r7, #31]
 8006d1e:	e0a1      	b.n	8006e64 <UART_SetConfig+0x348>
 8006d20:	2302      	movs	r3, #2
 8006d22:	77fb      	strb	r3, [r7, #31]
 8006d24:	e09e      	b.n	8006e64 <UART_SetConfig+0x348>
 8006d26:	2304      	movs	r3, #4
 8006d28:	77fb      	strb	r3, [r7, #31]
 8006d2a:	e09b      	b.n	8006e64 <UART_SetConfig+0x348>
 8006d2c:	2308      	movs	r3, #8
 8006d2e:	77fb      	strb	r3, [r7, #31]
 8006d30:	e098      	b.n	8006e64 <UART_SetConfig+0x348>
 8006d32:	2310      	movs	r3, #16
 8006d34:	77fb      	strb	r3, [r7, #31]
 8006d36:	e095      	b.n	8006e64 <UART_SetConfig+0x348>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a2f      	ldr	r2, [pc, #188]	; (8006dfc <UART_SetConfig+0x2e0>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d125      	bne.n	8006d8e <UART_SetConfig+0x272>
 8006d42:	4b29      	ldr	r3, [pc, #164]	; (8006de8 <UART_SetConfig+0x2cc>)
 8006d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d50:	d017      	beq.n	8006d82 <UART_SetConfig+0x266>
 8006d52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d56:	d817      	bhi.n	8006d88 <UART_SetConfig+0x26c>
 8006d58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d5c:	d00b      	beq.n	8006d76 <UART_SetConfig+0x25a>
 8006d5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d62:	d811      	bhi.n	8006d88 <UART_SetConfig+0x26c>
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <UART_SetConfig+0x254>
 8006d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d6c:	d006      	beq.n	8006d7c <UART_SetConfig+0x260>
 8006d6e:	e00b      	b.n	8006d88 <UART_SetConfig+0x26c>
 8006d70:	2301      	movs	r3, #1
 8006d72:	77fb      	strb	r3, [r7, #31]
 8006d74:	e076      	b.n	8006e64 <UART_SetConfig+0x348>
 8006d76:	2302      	movs	r3, #2
 8006d78:	77fb      	strb	r3, [r7, #31]
 8006d7a:	e073      	b.n	8006e64 <UART_SetConfig+0x348>
 8006d7c:	2304      	movs	r3, #4
 8006d7e:	77fb      	strb	r3, [r7, #31]
 8006d80:	e070      	b.n	8006e64 <UART_SetConfig+0x348>
 8006d82:	2308      	movs	r3, #8
 8006d84:	77fb      	strb	r3, [r7, #31]
 8006d86:	e06d      	b.n	8006e64 <UART_SetConfig+0x348>
 8006d88:	2310      	movs	r3, #16
 8006d8a:	77fb      	strb	r3, [r7, #31]
 8006d8c:	e06a      	b.n	8006e64 <UART_SetConfig+0x348>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a1b      	ldr	r2, [pc, #108]	; (8006e00 <UART_SetConfig+0x2e4>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d138      	bne.n	8006e0a <UART_SetConfig+0x2ee>
 8006d98:	4b13      	ldr	r3, [pc, #76]	; (8006de8 <UART_SetConfig+0x2cc>)
 8006d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d9e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006da2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006da6:	d017      	beq.n	8006dd8 <UART_SetConfig+0x2bc>
 8006da8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006dac:	d82a      	bhi.n	8006e04 <UART_SetConfig+0x2e8>
 8006dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006db2:	d00b      	beq.n	8006dcc <UART_SetConfig+0x2b0>
 8006db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006db8:	d824      	bhi.n	8006e04 <UART_SetConfig+0x2e8>
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <UART_SetConfig+0x2aa>
 8006dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dc2:	d006      	beq.n	8006dd2 <UART_SetConfig+0x2b6>
 8006dc4:	e01e      	b.n	8006e04 <UART_SetConfig+0x2e8>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	77fb      	strb	r3, [r7, #31]
 8006dca:	e04b      	b.n	8006e64 <UART_SetConfig+0x348>
 8006dcc:	2302      	movs	r3, #2
 8006dce:	77fb      	strb	r3, [r7, #31]
 8006dd0:	e048      	b.n	8006e64 <UART_SetConfig+0x348>
 8006dd2:	2304      	movs	r3, #4
 8006dd4:	77fb      	strb	r3, [r7, #31]
 8006dd6:	e045      	b.n	8006e64 <UART_SetConfig+0x348>
 8006dd8:	2308      	movs	r3, #8
 8006dda:	77fb      	strb	r3, [r7, #31]
 8006ddc:	e042      	b.n	8006e64 <UART_SetConfig+0x348>
 8006dde:	bf00      	nop
 8006de0:	efff69f3 	.word	0xefff69f3
 8006de4:	40011000 	.word	0x40011000
 8006de8:	40023800 	.word	0x40023800
 8006dec:	40004400 	.word	0x40004400
 8006df0:	40004800 	.word	0x40004800
 8006df4:	40004c00 	.word	0x40004c00
 8006df8:	40005000 	.word	0x40005000
 8006dfc:	40011400 	.word	0x40011400
 8006e00:	40007800 	.word	0x40007800
 8006e04:	2310      	movs	r3, #16
 8006e06:	77fb      	strb	r3, [r7, #31]
 8006e08:	e02c      	b.n	8006e64 <UART_SetConfig+0x348>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a72      	ldr	r2, [pc, #456]	; (8006fd8 <UART_SetConfig+0x4bc>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d125      	bne.n	8006e60 <UART_SetConfig+0x344>
 8006e14:	4b71      	ldr	r3, [pc, #452]	; (8006fdc <UART_SetConfig+0x4c0>)
 8006e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006e1e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e22:	d017      	beq.n	8006e54 <UART_SetConfig+0x338>
 8006e24:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e28:	d817      	bhi.n	8006e5a <UART_SetConfig+0x33e>
 8006e2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e2e:	d00b      	beq.n	8006e48 <UART_SetConfig+0x32c>
 8006e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e34:	d811      	bhi.n	8006e5a <UART_SetConfig+0x33e>
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d003      	beq.n	8006e42 <UART_SetConfig+0x326>
 8006e3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e3e:	d006      	beq.n	8006e4e <UART_SetConfig+0x332>
 8006e40:	e00b      	b.n	8006e5a <UART_SetConfig+0x33e>
 8006e42:	2300      	movs	r3, #0
 8006e44:	77fb      	strb	r3, [r7, #31]
 8006e46:	e00d      	b.n	8006e64 <UART_SetConfig+0x348>
 8006e48:	2302      	movs	r3, #2
 8006e4a:	77fb      	strb	r3, [r7, #31]
 8006e4c:	e00a      	b.n	8006e64 <UART_SetConfig+0x348>
 8006e4e:	2304      	movs	r3, #4
 8006e50:	77fb      	strb	r3, [r7, #31]
 8006e52:	e007      	b.n	8006e64 <UART_SetConfig+0x348>
 8006e54:	2308      	movs	r3, #8
 8006e56:	77fb      	strb	r3, [r7, #31]
 8006e58:	e004      	b.n	8006e64 <UART_SetConfig+0x348>
 8006e5a:	2310      	movs	r3, #16
 8006e5c:	77fb      	strb	r3, [r7, #31]
 8006e5e:	e001      	b.n	8006e64 <UART_SetConfig+0x348>
 8006e60:	2310      	movs	r3, #16
 8006e62:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	69db      	ldr	r3, [r3, #28]
 8006e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e6c:	d15b      	bne.n	8006f26 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006e6e:	7ffb      	ldrb	r3, [r7, #31]
 8006e70:	2b08      	cmp	r3, #8
 8006e72:	d828      	bhi.n	8006ec6 <UART_SetConfig+0x3aa>
 8006e74:	a201      	add	r2, pc, #4	; (adr r2, 8006e7c <UART_SetConfig+0x360>)
 8006e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7a:	bf00      	nop
 8006e7c:	08006ea1 	.word	0x08006ea1
 8006e80:	08006ea9 	.word	0x08006ea9
 8006e84:	08006eb1 	.word	0x08006eb1
 8006e88:	08006ec7 	.word	0x08006ec7
 8006e8c:	08006eb7 	.word	0x08006eb7
 8006e90:	08006ec7 	.word	0x08006ec7
 8006e94:	08006ec7 	.word	0x08006ec7
 8006e98:	08006ec7 	.word	0x08006ec7
 8006e9c:	08006ebf 	.word	0x08006ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ea0:	f7fe faf6 	bl	8005490 <HAL_RCC_GetPCLK1Freq>
 8006ea4:	61b8      	str	r0, [r7, #24]
        break;
 8006ea6:	e013      	b.n	8006ed0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ea8:	f7fe fb06 	bl	80054b8 <HAL_RCC_GetPCLK2Freq>
 8006eac:	61b8      	str	r0, [r7, #24]
        break;
 8006eae:	e00f      	b.n	8006ed0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eb0:	4b4b      	ldr	r3, [pc, #300]	; (8006fe0 <UART_SetConfig+0x4c4>)
 8006eb2:	61bb      	str	r3, [r7, #24]
        break;
 8006eb4:	e00c      	b.n	8006ed0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eb6:	f7fe f9d9 	bl	800526c <HAL_RCC_GetSysClockFreq>
 8006eba:	61b8      	str	r0, [r7, #24]
        break;
 8006ebc:	e008      	b.n	8006ed0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ec2:	61bb      	str	r3, [r7, #24]
        break;
 8006ec4:	e004      	b.n	8006ed0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	77bb      	strb	r3, [r7, #30]
        break;
 8006ece:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d074      	beq.n	8006fc0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	005a      	lsls	r2, r3, #1
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	085b      	lsrs	r3, r3, #1
 8006ee0:	441a      	add	r2, r3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	2b0f      	cmp	r3, #15
 8006ef0:	d916      	bls.n	8006f20 <UART_SetConfig+0x404>
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ef8:	d212      	bcs.n	8006f20 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	f023 030f 	bic.w	r3, r3, #15
 8006f02:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	085b      	lsrs	r3, r3, #1
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	f003 0307 	and.w	r3, r3, #7
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	89fb      	ldrh	r3, [r7, #14]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	89fa      	ldrh	r2, [r7, #14]
 8006f1c:	60da      	str	r2, [r3, #12]
 8006f1e:	e04f      	b.n	8006fc0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	77bb      	strb	r3, [r7, #30]
 8006f24:	e04c      	b.n	8006fc0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f26:	7ffb      	ldrb	r3, [r7, #31]
 8006f28:	2b08      	cmp	r3, #8
 8006f2a:	d828      	bhi.n	8006f7e <UART_SetConfig+0x462>
 8006f2c:	a201      	add	r2, pc, #4	; (adr r2, 8006f34 <UART_SetConfig+0x418>)
 8006f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f32:	bf00      	nop
 8006f34:	08006f59 	.word	0x08006f59
 8006f38:	08006f61 	.word	0x08006f61
 8006f3c:	08006f69 	.word	0x08006f69
 8006f40:	08006f7f 	.word	0x08006f7f
 8006f44:	08006f6f 	.word	0x08006f6f
 8006f48:	08006f7f 	.word	0x08006f7f
 8006f4c:	08006f7f 	.word	0x08006f7f
 8006f50:	08006f7f 	.word	0x08006f7f
 8006f54:	08006f77 	.word	0x08006f77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f58:	f7fe fa9a 	bl	8005490 <HAL_RCC_GetPCLK1Freq>
 8006f5c:	61b8      	str	r0, [r7, #24]
        break;
 8006f5e:	e013      	b.n	8006f88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f60:	f7fe faaa 	bl	80054b8 <HAL_RCC_GetPCLK2Freq>
 8006f64:	61b8      	str	r0, [r7, #24]
        break;
 8006f66:	e00f      	b.n	8006f88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f68:	4b1d      	ldr	r3, [pc, #116]	; (8006fe0 <UART_SetConfig+0x4c4>)
 8006f6a:	61bb      	str	r3, [r7, #24]
        break;
 8006f6c:	e00c      	b.n	8006f88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f6e:	f7fe f97d 	bl	800526c <HAL_RCC_GetSysClockFreq>
 8006f72:	61b8      	str	r0, [r7, #24]
        break;
 8006f74:	e008      	b.n	8006f88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f7a:	61bb      	str	r3, [r7, #24]
        break;
 8006f7c:	e004      	b.n	8006f88 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	77bb      	strb	r3, [r7, #30]
        break;
 8006f86:	bf00      	nop
    }

    if (pclk != 0U)
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d018      	beq.n	8006fc0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	085a      	lsrs	r2, r3, #1
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	441a      	add	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	2b0f      	cmp	r3, #15
 8006fa6:	d909      	bls.n	8006fbc <UART_SetConfig+0x4a0>
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fae:	d205      	bcs.n	8006fbc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	60da      	str	r2, [r3, #12]
 8006fba:	e001      	b.n	8006fc0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006fcc:	7fbb      	ldrb	r3, [r7, #30]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3720      	adds	r7, #32
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	40007c00 	.word	0x40007c00
 8006fdc:	40023800 	.word	0x40023800
 8006fe0:	00f42400 	.word	0x00f42400

08006fe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff0:	f003 0301 	and.w	r3, r3, #1
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00a      	beq.n	800700e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	430a      	orrs	r2, r1
 800700c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00a      	beq.n	8007030 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	430a      	orrs	r2, r1
 800702e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007034:	f003 0304 	and.w	r3, r3, #4
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00a      	beq.n	8007052 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	430a      	orrs	r2, r1
 8007050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007056:	f003 0308 	and.w	r3, r3, #8
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00a      	beq.n	8007074 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	430a      	orrs	r2, r1
 8007072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007078:	f003 0310 	and.w	r3, r3, #16
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00a      	beq.n	8007096 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	430a      	orrs	r2, r1
 8007094:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709a:	f003 0320 	and.w	r3, r3, #32
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00a      	beq.n	80070b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	430a      	orrs	r2, r1
 80070b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d01a      	beq.n	80070fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070e2:	d10a      	bne.n	80070fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00a      	beq.n	800711c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	430a      	orrs	r2, r1
 800711a:	605a      	str	r2, [r3, #4]
  }
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af02      	add	r7, sp, #8
 800712e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007138:	f7fa fd94 	bl	8001c64 <HAL_GetTick>
 800713c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0308 	and.w	r3, r3, #8
 8007148:	2b08      	cmp	r3, #8
 800714a:	d10e      	bne.n	800716a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800714c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f831 	bl	80071c2 <UART_WaitOnFlagUntilTimeout>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d001      	beq.n	800716a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e027      	b.n	80071ba <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0304 	and.w	r3, r3, #4
 8007174:	2b04      	cmp	r3, #4
 8007176:	d10e      	bne.n	8007196 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007178:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f81b 	bl	80071c2 <UART_WaitOnFlagUntilTimeout>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e011      	b.n	80071ba <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2220      	movs	r2, #32
 800719a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2220      	movs	r2, #32
 80071a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b09c      	sub	sp, #112	; 0x70
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	60f8      	str	r0, [r7, #12]
 80071ca:	60b9      	str	r1, [r7, #8]
 80071cc:	603b      	str	r3, [r7, #0]
 80071ce:	4613      	mov	r3, r2
 80071d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071d2:	e0a7      	b.n	8007324 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071da:	f000 80a3 	beq.w	8007324 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071de:	f7fa fd41 	bl	8001c64 <HAL_GetTick>
 80071e2:	4602      	mov	r2, r0
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d302      	bcc.n	80071f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80071ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d13f      	bne.n	8007274 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071fc:	e853 3f00 	ldrex	r3, [r3]
 8007200:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007204:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007208:	667b      	str	r3, [r7, #100]	; 0x64
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	461a      	mov	r2, r3
 8007210:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007212:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007214:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007216:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007218:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800721a:	e841 2300 	strex	r3, r2, [r1]
 800721e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1e6      	bne.n	80071f4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	3308      	adds	r3, #8
 800722c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007230:	e853 3f00 	ldrex	r3, [r3]
 8007234:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007238:	f023 0301 	bic.w	r3, r3, #1
 800723c:	663b      	str	r3, [r7, #96]	; 0x60
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	3308      	adds	r3, #8
 8007244:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007246:	64ba      	str	r2, [r7, #72]	; 0x48
 8007248:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800724c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800724e:	e841 2300 	strex	r3, r2, [r1]
 8007252:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1e5      	bne.n	8007226 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2220      	movs	r2, #32
 800725e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2220      	movs	r2, #32
 8007264:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e068      	b.n	8007346 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0304 	and.w	r3, r3, #4
 800727e:	2b00      	cmp	r3, #0
 8007280:	d050      	beq.n	8007324 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	69db      	ldr	r3, [r3, #28]
 8007288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800728c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007290:	d148      	bne.n	8007324 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800729a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a4:	e853 3f00 	ldrex	r3, [r3]
 80072a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	461a      	mov	r2, r3
 80072b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ba:	637b      	str	r3, [r7, #52]	; 0x34
 80072bc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072c2:	e841 2300 	strex	r3, r2, [r1]
 80072c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1e6      	bne.n	800729c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	3308      	adds	r3, #8
 80072d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	e853 3f00 	ldrex	r3, [r3]
 80072dc:	613b      	str	r3, [r7, #16]
   return(result);
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	f023 0301 	bic.w	r3, r3, #1
 80072e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	3308      	adds	r3, #8
 80072ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80072ee:	623a      	str	r2, [r7, #32]
 80072f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f2:	69f9      	ldr	r1, [r7, #28]
 80072f4:	6a3a      	ldr	r2, [r7, #32]
 80072f6:	e841 2300 	strex	r3, r2, [r1]
 80072fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1e5      	bne.n	80072ce <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2220      	movs	r2, #32
 8007306:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2220      	movs	r2, #32
 800730c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2220      	movs	r2, #32
 8007314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e010      	b.n	8007346 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	69da      	ldr	r2, [r3, #28]
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	4013      	ands	r3, r2
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	429a      	cmp	r2, r3
 8007332:	bf0c      	ite	eq
 8007334:	2301      	moveq	r3, #1
 8007336:	2300      	movne	r3, #0
 8007338:	b2db      	uxtb	r3, r3
 800733a:	461a      	mov	r2, r3
 800733c:	79fb      	ldrb	r3, [r7, #7]
 800733e:	429a      	cmp	r2, r3
 8007340:	f43f af48 	beq.w	80071d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3770      	adds	r7, #112	; 0x70
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800734e:	b480      	push	{r7}
 8007350:	b095      	sub	sp, #84	; 0x54
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800735e:	e853 3f00 	ldrex	r3, [r3]
 8007362:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007366:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800736a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	461a      	mov	r2, r3
 8007372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007374:	643b      	str	r3, [r7, #64]	; 0x40
 8007376:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007378:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800737a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800737c:	e841 2300 	strex	r3, r2, [r1]
 8007380:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1e6      	bne.n	8007356 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	3308      	adds	r3, #8
 800738e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007390:	6a3b      	ldr	r3, [r7, #32]
 8007392:	e853 3f00 	ldrex	r3, [r3]
 8007396:	61fb      	str	r3, [r7, #28]
   return(result);
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	f023 0301 	bic.w	r3, r3, #1
 800739e:	64bb      	str	r3, [r7, #72]	; 0x48
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	3308      	adds	r3, #8
 80073a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073b0:	e841 2300 	strex	r3, r2, [r1]
 80073b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1e5      	bne.n	8007388 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d118      	bne.n	80073f6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	e853 3f00 	ldrex	r3, [r3]
 80073d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f023 0310 	bic.w	r3, r3, #16
 80073d8:	647b      	str	r3, [r7, #68]	; 0x44
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	461a      	mov	r2, r3
 80073e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073e2:	61bb      	str	r3, [r7, #24]
 80073e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e6:	6979      	ldr	r1, [r7, #20]
 80073e8:	69ba      	ldr	r2, [r7, #24]
 80073ea:	e841 2300 	strex	r3, r2, [r1]
 80073ee:	613b      	str	r3, [r7, #16]
   return(result);
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1e6      	bne.n	80073c4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2220      	movs	r2, #32
 80073fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	669a      	str	r2, [r3, #104]	; 0x68
}
 800740a:	bf00      	nop
 800740c:	3754      	adds	r7, #84	; 0x54
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b084      	sub	sp, #16
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007422:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f7ff fb51 	bl	8006adc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800743a:	bf00      	nop
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b088      	sub	sp, #32
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	e853 3f00 	ldrex	r3, [r3]
 8007456:	60bb      	str	r3, [r7, #8]
   return(result);
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800745e:	61fb      	str	r3, [r7, #28]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	461a      	mov	r2, r3
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	61bb      	str	r3, [r7, #24]
 800746a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746c:	6979      	ldr	r1, [r7, #20]
 800746e:	69ba      	ldr	r2, [r7, #24]
 8007470:	e841 2300 	strex	r3, r2, [r1]
 8007474:	613b      	str	r3, [r7, #16]
   return(result);
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1e6      	bne.n	800744a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2220      	movs	r2, #32
 8007480:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f7ff fb1d 	bl	8006ac8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800748e:	bf00      	nop
 8007490:	3720      	adds	r7, #32
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
	...

08007498 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007498:	b084      	sub	sp, #16
 800749a:	b580      	push	{r7, lr}
 800749c:	b084      	sub	sp, #16
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	f107 001c 	add.w	r0, r7, #28
 80074a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d120      	bne.n	80074f2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	68da      	ldr	r2, [r3, #12]
 80074c0:	4b20      	ldr	r3, [pc, #128]	; (8007544 <USB_CoreInit+0xac>)
 80074c2:	4013      	ands	r3, r2
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80074d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d105      	bne.n	80074e6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fa96 	bl	8007a18 <USB_CoreReset>
 80074ec:	4603      	mov	r3, r0
 80074ee:	73fb      	strb	r3, [r7, #15]
 80074f0:	e010      	b.n	8007514 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fa8a 	bl	8007a18 <USB_CoreReset>
 8007504:	4603      	mov	r3, r0
 8007506:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007516:	2b01      	cmp	r3, #1
 8007518:	d10b      	bne.n	8007532 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f043 0206 	orr.w	r2, r3, #6
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f043 0220 	orr.w	r2, r3, #32
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007532:	7bfb      	ldrb	r3, [r7, #15]
}
 8007534:	4618      	mov	r0, r3
 8007536:	3710      	adds	r7, #16
 8007538:	46bd      	mov	sp, r7
 800753a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800753e:	b004      	add	sp, #16
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	ffbdffbf 	.word	0xffbdffbf

08007548 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f023 0201 	bic.w	r2, r3, #1
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b084      	sub	sp, #16
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	460b      	mov	r3, r1
 8007574:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007576:	2300      	movs	r3, #0
 8007578:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007586:	78fb      	ldrb	r3, [r7, #3]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d115      	bne.n	80075b8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007598:	2001      	movs	r0, #1
 800759a:	f7fa fb6f 	bl	8001c7c <HAL_Delay>
      ms++;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	3301      	adds	r3, #1
 80075a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fa29 	bl	80079fc <USB_GetMode>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d01e      	beq.n	80075ee <USB_SetCurrentMode+0x84>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2b31      	cmp	r3, #49	; 0x31
 80075b4:	d9f0      	bls.n	8007598 <USB_SetCurrentMode+0x2e>
 80075b6:	e01a      	b.n	80075ee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80075b8:	78fb      	ldrb	r3, [r7, #3]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d115      	bne.n	80075ea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80075ca:	2001      	movs	r0, #1
 80075cc:	f7fa fb56 	bl	8001c7c <HAL_Delay>
      ms++;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	3301      	adds	r3, #1
 80075d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fa10 	bl	80079fc <USB_GetMode>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d005      	beq.n	80075ee <USB_SetCurrentMode+0x84>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2b31      	cmp	r3, #49	; 0x31
 80075e6:	d9f0      	bls.n	80075ca <USB_SetCurrentMode+0x60>
 80075e8:	e001      	b.n	80075ee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e005      	b.n	80075fa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2b32      	cmp	r3, #50	; 0x32
 80075f2:	d101      	bne.n	80075f8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e000      	b.n	80075fa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
	...

08007604 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007604:	b084      	sub	sp, #16
 8007606:	b580      	push	{r7, lr}
 8007608:	b086      	sub	sp, #24
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007612:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800761e:	2300      	movs	r3, #0
 8007620:	613b      	str	r3, [r7, #16]
 8007622:	e009      	b.n	8007638 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	3340      	adds	r3, #64	; 0x40
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	4413      	add	r3, r2
 800762e:	2200      	movs	r2, #0
 8007630:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	3301      	adds	r3, #1
 8007636:	613b      	str	r3, [r7, #16]
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	2b0e      	cmp	r3, #14
 800763c:	d9f2      	bls.n	8007624 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800763e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007640:	2b00      	cmp	r3, #0
 8007642:	d11c      	bne.n	800767e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007652:	f043 0302 	orr.w	r3, r3, #2
 8007656:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	e005      	b.n	800768a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007682:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007690:	461a      	mov	r2, r3
 8007692:	2300      	movs	r3, #0
 8007694:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800769c:	4619      	mov	r1, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076a4:	461a      	mov	r2, r3
 80076a6:	680b      	ldr	r3, [r1, #0]
 80076a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d10c      	bne.n	80076ca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80076b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d104      	bne.n	80076c0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80076b6:	2100      	movs	r1, #0
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f965 	bl	8007988 <USB_SetDevSpeed>
 80076be:	e008      	b.n	80076d2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80076c0:	2101      	movs	r1, #1
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f960 	bl	8007988 <USB_SetDevSpeed>
 80076c8:	e003      	b.n	80076d2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80076ca:	2103      	movs	r1, #3
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 f95b 	bl	8007988 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80076d2:	2110      	movs	r1, #16
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f8f3 	bl	80078c0 <USB_FlushTxFifo>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d001      	beq.n	80076e4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f91f 	bl	8007928 <USB_FlushRxFifo>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d001      	beq.n	80076f4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076fa:	461a      	mov	r2, r3
 80076fc:	2300      	movs	r3, #0
 80076fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007706:	461a      	mov	r2, r3
 8007708:	2300      	movs	r3, #0
 800770a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007712:	461a      	mov	r2, r3
 8007714:	2300      	movs	r3, #0
 8007716:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007718:	2300      	movs	r3, #0
 800771a:	613b      	str	r3, [r7, #16]
 800771c:	e043      	b.n	80077a6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	015a      	lsls	r2, r3, #5
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	4413      	add	r3, r2
 8007726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007734:	d118      	bne.n	8007768 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10a      	bne.n	8007752 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	4413      	add	r3, r2
 8007744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007748:	461a      	mov	r2, r3
 800774a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800774e:	6013      	str	r3, [r2, #0]
 8007750:	e013      	b.n	800777a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	015a      	lsls	r2, r3, #5
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	4413      	add	r3, r2
 800775a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800775e:	461a      	mov	r2, r3
 8007760:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007764:	6013      	str	r3, [r2, #0]
 8007766:	e008      	b.n	800777a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	015a      	lsls	r2, r3, #5
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4413      	add	r3, r2
 8007770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007774:	461a      	mov	r2, r3
 8007776:	2300      	movs	r3, #0
 8007778:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	015a      	lsls	r2, r3, #5
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	4413      	add	r3, r2
 8007782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007786:	461a      	mov	r2, r3
 8007788:	2300      	movs	r3, #0
 800778a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4413      	add	r3, r2
 8007794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007798:	461a      	mov	r2, r3
 800779a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800779e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	3301      	adds	r3, #1
 80077a4:	613b      	str	r3, [r7, #16]
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d3b7      	bcc.n	800771e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077ae:	2300      	movs	r3, #0
 80077b0:	613b      	str	r3, [r7, #16]
 80077b2:	e043      	b.n	800783c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077ca:	d118      	bne.n	80077fe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10a      	bne.n	80077e8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077de:	461a      	mov	r2, r3
 80077e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80077e4:	6013      	str	r3, [r2, #0]
 80077e6:	e013      	b.n	8007810 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f4:	461a      	mov	r2, r3
 80077f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	e008      	b.n	8007810 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	015a      	lsls	r2, r3, #5
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	4413      	add	r3, r2
 8007806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800780a:	461a      	mov	r2, r3
 800780c:	2300      	movs	r3, #0
 800780e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781c:	461a      	mov	r2, r3
 800781e:	2300      	movs	r3, #0
 8007820:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	015a      	lsls	r2, r3, #5
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	4413      	add	r3, r2
 800782a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800782e:	461a      	mov	r2, r3
 8007830:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007834:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	3301      	adds	r3, #1
 800783a:	613b      	str	r3, [r7, #16]
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	693a      	ldr	r2, [r7, #16]
 8007840:	429a      	cmp	r2, r3
 8007842:	d3b7      	bcc.n	80077b4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007852:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007856:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007864:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007868:	2b00      	cmp	r3, #0
 800786a:	d105      	bne.n	8007878 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	f043 0210 	orr.w	r2, r3, #16
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	699a      	ldr	r2, [r3, #24]
 800787c:	4b0e      	ldr	r3, [pc, #56]	; (80078b8 <USB_DevInit+0x2b4>)
 800787e:	4313      	orrs	r3, r2
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007886:	2b00      	cmp	r3, #0
 8007888:	d005      	beq.n	8007896 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	f043 0208 	orr.w	r2, r3, #8
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007898:	2b01      	cmp	r3, #1
 800789a:	d105      	bne.n	80078a8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	699a      	ldr	r2, [r3, #24]
 80078a0:	4b06      	ldr	r3, [pc, #24]	; (80078bc <USB_DevInit+0x2b8>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80078a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3718      	adds	r7, #24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078b4:	b004      	add	sp, #16
 80078b6:	4770      	bx	lr
 80078b8:	803c3800 	.word	0x803c3800
 80078bc:	40000004 	.word	0x40000004

080078c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	3301      	adds	r3, #1
 80078d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	4a13      	ldr	r2, [pc, #76]	; (8007924 <USB_FlushTxFifo+0x64>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d901      	bls.n	80078e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	e01b      	b.n	8007918 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	daf2      	bge.n	80078ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80078e8:	2300      	movs	r3, #0
 80078ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	019b      	lsls	r3, r3, #6
 80078f0:	f043 0220 	orr.w	r2, r3, #32
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	3301      	adds	r3, #1
 80078fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	4a08      	ldr	r2, [pc, #32]	; (8007924 <USB_FlushTxFifo+0x64>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d901      	bls.n	800790a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	e006      	b.n	8007918 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	f003 0320 	and.w	r3, r3, #32
 8007912:	2b20      	cmp	r3, #32
 8007914:	d0f0      	beq.n	80078f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3714      	adds	r7, #20
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr
 8007924:	00030d40 	.word	0x00030d40

08007928 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007930:	2300      	movs	r3, #0
 8007932:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	3301      	adds	r3, #1
 8007938:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	4a11      	ldr	r2, [pc, #68]	; (8007984 <USB_FlushRxFifo+0x5c>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d901      	bls.n	8007946 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	e018      	b.n	8007978 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	2b00      	cmp	r3, #0
 800794c:	daf2      	bge.n	8007934 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800794e:	2300      	movs	r3, #0
 8007950:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2210      	movs	r2, #16
 8007956:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	3301      	adds	r3, #1
 800795c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	4a08      	ldr	r2, [pc, #32]	; (8007984 <USB_FlushRxFifo+0x5c>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d901      	bls.n	800796a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e006      	b.n	8007978 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	f003 0310 	and.w	r3, r3, #16
 8007972:	2b10      	cmp	r3, #16
 8007974:	d0f0      	beq.n	8007958 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr
 8007984:	00030d40 	.word	0x00030d40

08007988 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	460b      	mov	r3, r1
 8007992:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	78fb      	ldrb	r3, [r7, #3]
 80079a2:	68f9      	ldr	r1, [r7, #12]
 80079a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079a8:	4313      	orrs	r3, r2
 80079aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b085      	sub	sp, #20
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80079d4:	f023 0303 	bic.w	r3, r3, #3
 80079d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079e8:	f043 0302 	orr.w	r3, r3, #2
 80079ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3714      	adds	r7, #20
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	695b      	ldr	r3, [r3, #20]
 8007a08:	f003 0301 	and.w	r3, r3, #1
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a20:	2300      	movs	r3, #0
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	3301      	adds	r3, #1
 8007a28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	4a13      	ldr	r2, [pc, #76]	; (8007a7c <USB_CoreReset+0x64>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d901      	bls.n	8007a36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e01b      	b.n	8007a6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	daf2      	bge.n	8007a24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	f043 0201 	orr.w	r2, r3, #1
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	3301      	adds	r3, #1
 8007a52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	4a09      	ldr	r2, [pc, #36]	; (8007a7c <USB_CoreReset+0x64>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d901      	bls.n	8007a60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e006      	b.n	8007a6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	f003 0301 	and.w	r3, r3, #1
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d0f0      	beq.n	8007a4e <USB_CoreReset+0x36>

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	00030d40 	.word	0x00030d40

08007a80 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007a86:	4b98      	ldr	r3, [pc, #608]	; (8007ce8 <MX_LWIP_Init+0x268>)
 8007a88:	22c0      	movs	r2, #192	; 0xc0
 8007a8a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007a8c:	4b96      	ldr	r3, [pc, #600]	; (8007ce8 <MX_LWIP_Init+0x268>)
 8007a8e:	22a8      	movs	r2, #168	; 0xa8
 8007a90:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8007a92:	4b95      	ldr	r3, [pc, #596]	; (8007ce8 <MX_LWIP_Init+0x268>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 20;
 8007a98:	4b93      	ldr	r3, [pc, #588]	; (8007ce8 <MX_LWIP_Init+0x268>)
 8007a9a:	2214      	movs	r2, #20
 8007a9c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007a9e:	4b93      	ldr	r3, [pc, #588]	; (8007cec <MX_LWIP_Init+0x26c>)
 8007aa0:	22ff      	movs	r2, #255	; 0xff
 8007aa2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007aa4:	4b91      	ldr	r3, [pc, #580]	; (8007cec <MX_LWIP_Init+0x26c>)
 8007aa6:	22ff      	movs	r2, #255	; 0xff
 8007aa8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007aaa:	4b90      	ldr	r3, [pc, #576]	; (8007cec <MX_LWIP_Init+0x26c>)
 8007aac:	22ff      	movs	r2, #255	; 0xff
 8007aae:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007ab0:	4b8e      	ldr	r3, [pc, #568]	; (8007cec <MX_LWIP_Init+0x26c>)
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8007ab6:	4b8e      	ldr	r3, [pc, #568]	; (8007cf0 <MX_LWIP_Init+0x270>)
 8007ab8:	22c0      	movs	r2, #192	; 0xc0
 8007aba:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8007abc:	4b8c      	ldr	r3, [pc, #560]	; (8007cf0 <MX_LWIP_Init+0x270>)
 8007abe:	22a8      	movs	r2, #168	; 0xa8
 8007ac0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8007ac2:	4b8b      	ldr	r3, [pc, #556]	; (8007cf0 <MX_LWIP_Init+0x270>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8007ac8:	4b89      	ldr	r3, [pc, #548]	; (8007cf0 <MX_LWIP_Init+0x270>)
 8007aca:	2201      	movs	r2, #1
 8007acc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8007ace:	2100      	movs	r1, #0
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	f008 f90b 	bl	800fcec <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007ad6:	4b84      	ldr	r3, [pc, #528]	; (8007ce8 <MX_LWIP_Init+0x268>)
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	061a      	lsls	r2, r3, #24
 8007adc:	4b82      	ldr	r3, [pc, #520]	; (8007ce8 <MX_LWIP_Init+0x268>)
 8007ade:	785b      	ldrb	r3, [r3, #1]
 8007ae0:	041b      	lsls	r3, r3, #16
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	4b80      	ldr	r3, [pc, #512]	; (8007ce8 <MX_LWIP_Init+0x268>)
 8007ae6:	789b      	ldrb	r3, [r3, #2]
 8007ae8:	021b      	lsls	r3, r3, #8
 8007aea:	4313      	orrs	r3, r2
 8007aec:	4a7e      	ldr	r2, [pc, #504]	; (8007ce8 <MX_LWIP_Init+0x268>)
 8007aee:	78d2      	ldrb	r2, [r2, #3]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	061a      	lsls	r2, r3, #24
 8007af4:	4b7c      	ldr	r3, [pc, #496]	; (8007ce8 <MX_LWIP_Init+0x268>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	0619      	lsls	r1, r3, #24
 8007afa:	4b7b      	ldr	r3, [pc, #492]	; (8007ce8 <MX_LWIP_Init+0x268>)
 8007afc:	785b      	ldrb	r3, [r3, #1]
 8007afe:	041b      	lsls	r3, r3, #16
 8007b00:	4319      	orrs	r1, r3
 8007b02:	4b79      	ldr	r3, [pc, #484]	; (8007ce8 <MX_LWIP_Init+0x268>)
 8007b04:	789b      	ldrb	r3, [r3, #2]
 8007b06:	021b      	lsls	r3, r3, #8
 8007b08:	430b      	orrs	r3, r1
 8007b0a:	4977      	ldr	r1, [pc, #476]	; (8007ce8 <MX_LWIP_Init+0x268>)
 8007b0c:	78c9      	ldrb	r1, [r1, #3]
 8007b0e:	430b      	orrs	r3, r1
 8007b10:	021b      	lsls	r3, r3, #8
 8007b12:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b16:	431a      	orrs	r2, r3
 8007b18:	4b73      	ldr	r3, [pc, #460]	; (8007ce8 <MX_LWIP_Init+0x268>)
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	0619      	lsls	r1, r3, #24
 8007b1e:	4b72      	ldr	r3, [pc, #456]	; (8007ce8 <MX_LWIP_Init+0x268>)
 8007b20:	785b      	ldrb	r3, [r3, #1]
 8007b22:	041b      	lsls	r3, r3, #16
 8007b24:	4319      	orrs	r1, r3
 8007b26:	4b70      	ldr	r3, [pc, #448]	; (8007ce8 <MX_LWIP_Init+0x268>)
 8007b28:	789b      	ldrb	r3, [r3, #2]
 8007b2a:	021b      	lsls	r3, r3, #8
 8007b2c:	430b      	orrs	r3, r1
 8007b2e:	496e      	ldr	r1, [pc, #440]	; (8007ce8 <MX_LWIP_Init+0x268>)
 8007b30:	78c9      	ldrb	r1, [r1, #3]
 8007b32:	430b      	orrs	r3, r1
 8007b34:	0a1b      	lsrs	r3, r3, #8
 8007b36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b3a:	431a      	orrs	r2, r3
 8007b3c:	4b6a      	ldr	r3, [pc, #424]	; (8007ce8 <MX_LWIP_Init+0x268>)
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	0619      	lsls	r1, r3, #24
 8007b42:	4b69      	ldr	r3, [pc, #420]	; (8007ce8 <MX_LWIP_Init+0x268>)
 8007b44:	785b      	ldrb	r3, [r3, #1]
 8007b46:	041b      	lsls	r3, r3, #16
 8007b48:	4319      	orrs	r1, r3
 8007b4a:	4b67      	ldr	r3, [pc, #412]	; (8007ce8 <MX_LWIP_Init+0x268>)
 8007b4c:	789b      	ldrb	r3, [r3, #2]
 8007b4e:	021b      	lsls	r3, r3, #8
 8007b50:	430b      	orrs	r3, r1
 8007b52:	4965      	ldr	r1, [pc, #404]	; (8007ce8 <MX_LWIP_Init+0x268>)
 8007b54:	78c9      	ldrb	r1, [r1, #3]
 8007b56:	430b      	orrs	r3, r1
 8007b58:	0e1b      	lsrs	r3, r3, #24
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	4a65      	ldr	r2, [pc, #404]	; (8007cf4 <MX_LWIP_Init+0x274>)
 8007b5e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007b60:	4b62      	ldr	r3, [pc, #392]	; (8007cec <MX_LWIP_Init+0x26c>)
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	061a      	lsls	r2, r3, #24
 8007b66:	4b61      	ldr	r3, [pc, #388]	; (8007cec <MX_LWIP_Init+0x26c>)
 8007b68:	785b      	ldrb	r3, [r3, #1]
 8007b6a:	041b      	lsls	r3, r3, #16
 8007b6c:	431a      	orrs	r2, r3
 8007b6e:	4b5f      	ldr	r3, [pc, #380]	; (8007cec <MX_LWIP_Init+0x26c>)
 8007b70:	789b      	ldrb	r3, [r3, #2]
 8007b72:	021b      	lsls	r3, r3, #8
 8007b74:	4313      	orrs	r3, r2
 8007b76:	4a5d      	ldr	r2, [pc, #372]	; (8007cec <MX_LWIP_Init+0x26c>)
 8007b78:	78d2      	ldrb	r2, [r2, #3]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	061a      	lsls	r2, r3, #24
 8007b7e:	4b5b      	ldr	r3, [pc, #364]	; (8007cec <MX_LWIP_Init+0x26c>)
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	0619      	lsls	r1, r3, #24
 8007b84:	4b59      	ldr	r3, [pc, #356]	; (8007cec <MX_LWIP_Init+0x26c>)
 8007b86:	785b      	ldrb	r3, [r3, #1]
 8007b88:	041b      	lsls	r3, r3, #16
 8007b8a:	4319      	orrs	r1, r3
 8007b8c:	4b57      	ldr	r3, [pc, #348]	; (8007cec <MX_LWIP_Init+0x26c>)
 8007b8e:	789b      	ldrb	r3, [r3, #2]
 8007b90:	021b      	lsls	r3, r3, #8
 8007b92:	430b      	orrs	r3, r1
 8007b94:	4955      	ldr	r1, [pc, #340]	; (8007cec <MX_LWIP_Init+0x26c>)
 8007b96:	78c9      	ldrb	r1, [r1, #3]
 8007b98:	430b      	orrs	r3, r1
 8007b9a:	021b      	lsls	r3, r3, #8
 8007b9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ba0:	431a      	orrs	r2, r3
 8007ba2:	4b52      	ldr	r3, [pc, #328]	; (8007cec <MX_LWIP_Init+0x26c>)
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	0619      	lsls	r1, r3, #24
 8007ba8:	4b50      	ldr	r3, [pc, #320]	; (8007cec <MX_LWIP_Init+0x26c>)
 8007baa:	785b      	ldrb	r3, [r3, #1]
 8007bac:	041b      	lsls	r3, r3, #16
 8007bae:	4319      	orrs	r1, r3
 8007bb0:	4b4e      	ldr	r3, [pc, #312]	; (8007cec <MX_LWIP_Init+0x26c>)
 8007bb2:	789b      	ldrb	r3, [r3, #2]
 8007bb4:	021b      	lsls	r3, r3, #8
 8007bb6:	430b      	orrs	r3, r1
 8007bb8:	494c      	ldr	r1, [pc, #304]	; (8007cec <MX_LWIP_Init+0x26c>)
 8007bba:	78c9      	ldrb	r1, [r1, #3]
 8007bbc:	430b      	orrs	r3, r1
 8007bbe:	0a1b      	lsrs	r3, r3, #8
 8007bc0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007bc4:	431a      	orrs	r2, r3
 8007bc6:	4b49      	ldr	r3, [pc, #292]	; (8007cec <MX_LWIP_Init+0x26c>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	0619      	lsls	r1, r3, #24
 8007bcc:	4b47      	ldr	r3, [pc, #284]	; (8007cec <MX_LWIP_Init+0x26c>)
 8007bce:	785b      	ldrb	r3, [r3, #1]
 8007bd0:	041b      	lsls	r3, r3, #16
 8007bd2:	4319      	orrs	r1, r3
 8007bd4:	4b45      	ldr	r3, [pc, #276]	; (8007cec <MX_LWIP_Init+0x26c>)
 8007bd6:	789b      	ldrb	r3, [r3, #2]
 8007bd8:	021b      	lsls	r3, r3, #8
 8007bda:	430b      	orrs	r3, r1
 8007bdc:	4943      	ldr	r1, [pc, #268]	; (8007cec <MX_LWIP_Init+0x26c>)
 8007bde:	78c9      	ldrb	r1, [r1, #3]
 8007be0:	430b      	orrs	r3, r1
 8007be2:	0e1b      	lsrs	r3, r3, #24
 8007be4:	4313      	orrs	r3, r2
 8007be6:	4a44      	ldr	r2, [pc, #272]	; (8007cf8 <MX_LWIP_Init+0x278>)
 8007be8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007bea:	4b41      	ldr	r3, [pc, #260]	; (8007cf0 <MX_LWIP_Init+0x270>)
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	061a      	lsls	r2, r3, #24
 8007bf0:	4b3f      	ldr	r3, [pc, #252]	; (8007cf0 <MX_LWIP_Init+0x270>)
 8007bf2:	785b      	ldrb	r3, [r3, #1]
 8007bf4:	041b      	lsls	r3, r3, #16
 8007bf6:	431a      	orrs	r2, r3
 8007bf8:	4b3d      	ldr	r3, [pc, #244]	; (8007cf0 <MX_LWIP_Init+0x270>)
 8007bfa:	789b      	ldrb	r3, [r3, #2]
 8007bfc:	021b      	lsls	r3, r3, #8
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	4a3b      	ldr	r2, [pc, #236]	; (8007cf0 <MX_LWIP_Init+0x270>)
 8007c02:	78d2      	ldrb	r2, [r2, #3]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	061a      	lsls	r2, r3, #24
 8007c08:	4b39      	ldr	r3, [pc, #228]	; (8007cf0 <MX_LWIP_Init+0x270>)
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	0619      	lsls	r1, r3, #24
 8007c0e:	4b38      	ldr	r3, [pc, #224]	; (8007cf0 <MX_LWIP_Init+0x270>)
 8007c10:	785b      	ldrb	r3, [r3, #1]
 8007c12:	041b      	lsls	r3, r3, #16
 8007c14:	4319      	orrs	r1, r3
 8007c16:	4b36      	ldr	r3, [pc, #216]	; (8007cf0 <MX_LWIP_Init+0x270>)
 8007c18:	789b      	ldrb	r3, [r3, #2]
 8007c1a:	021b      	lsls	r3, r3, #8
 8007c1c:	430b      	orrs	r3, r1
 8007c1e:	4934      	ldr	r1, [pc, #208]	; (8007cf0 <MX_LWIP_Init+0x270>)
 8007c20:	78c9      	ldrb	r1, [r1, #3]
 8007c22:	430b      	orrs	r3, r1
 8007c24:	021b      	lsls	r3, r3, #8
 8007c26:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	4b30      	ldr	r3, [pc, #192]	; (8007cf0 <MX_LWIP_Init+0x270>)
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	0619      	lsls	r1, r3, #24
 8007c32:	4b2f      	ldr	r3, [pc, #188]	; (8007cf0 <MX_LWIP_Init+0x270>)
 8007c34:	785b      	ldrb	r3, [r3, #1]
 8007c36:	041b      	lsls	r3, r3, #16
 8007c38:	4319      	orrs	r1, r3
 8007c3a:	4b2d      	ldr	r3, [pc, #180]	; (8007cf0 <MX_LWIP_Init+0x270>)
 8007c3c:	789b      	ldrb	r3, [r3, #2]
 8007c3e:	021b      	lsls	r3, r3, #8
 8007c40:	430b      	orrs	r3, r1
 8007c42:	492b      	ldr	r1, [pc, #172]	; (8007cf0 <MX_LWIP_Init+0x270>)
 8007c44:	78c9      	ldrb	r1, [r1, #3]
 8007c46:	430b      	orrs	r3, r1
 8007c48:	0a1b      	lsrs	r3, r3, #8
 8007c4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	4b27      	ldr	r3, [pc, #156]	; (8007cf0 <MX_LWIP_Init+0x270>)
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	0619      	lsls	r1, r3, #24
 8007c56:	4b26      	ldr	r3, [pc, #152]	; (8007cf0 <MX_LWIP_Init+0x270>)
 8007c58:	785b      	ldrb	r3, [r3, #1]
 8007c5a:	041b      	lsls	r3, r3, #16
 8007c5c:	4319      	orrs	r1, r3
 8007c5e:	4b24      	ldr	r3, [pc, #144]	; (8007cf0 <MX_LWIP_Init+0x270>)
 8007c60:	789b      	ldrb	r3, [r3, #2]
 8007c62:	021b      	lsls	r3, r3, #8
 8007c64:	430b      	orrs	r3, r1
 8007c66:	4922      	ldr	r1, [pc, #136]	; (8007cf0 <MX_LWIP_Init+0x270>)
 8007c68:	78c9      	ldrb	r1, [r1, #3]
 8007c6a:	430b      	orrs	r3, r1
 8007c6c:	0e1b      	lsrs	r3, r3, #24
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	4a22      	ldr	r2, [pc, #136]	; (8007cfc <MX_LWIP_Init+0x27c>)
 8007c72:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007c74:	4b22      	ldr	r3, [pc, #136]	; (8007d00 <MX_LWIP_Init+0x280>)
 8007c76:	9302      	str	r3, [sp, #8]
 8007c78:	4b22      	ldr	r3, [pc, #136]	; (8007d04 <MX_LWIP_Init+0x284>)
 8007c7a:	9301      	str	r3, [sp, #4]
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	4b1e      	ldr	r3, [pc, #120]	; (8007cfc <MX_LWIP_Init+0x27c>)
 8007c82:	4a1d      	ldr	r2, [pc, #116]	; (8007cf8 <MX_LWIP_Init+0x278>)
 8007c84:	491b      	ldr	r1, [pc, #108]	; (8007cf4 <MX_LWIP_Init+0x274>)
 8007c86:	4820      	ldr	r0, [pc, #128]	; (8007d08 <MX_LWIP_Init+0x288>)
 8007c88:	f008 fdfa 	bl	8010880 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007c8c:	481e      	ldr	r0, [pc, #120]	; (8007d08 <MX_LWIP_Init+0x288>)
 8007c8e:	f008 ffa9 	bl	8010be4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007c92:	4b1d      	ldr	r3, [pc, #116]	; (8007d08 <MX_LWIP_Init+0x288>)
 8007c94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007c98:	089b      	lsrs	r3, r3, #2
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d003      	beq.n	8007cac <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007ca4:	4818      	ldr	r0, [pc, #96]	; (8007d08 <MX_LWIP_Init+0x288>)
 8007ca6:	f008 ffad 	bl	8010c04 <netif_set_up>
 8007caa:	e002      	b.n	8007cb2 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007cac:	4816      	ldr	r0, [pc, #88]	; (8007d08 <MX_LWIP_Init+0x288>)
 8007cae:	f009 f815 	bl	8010cdc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007cb2:	4916      	ldr	r1, [pc, #88]	; (8007d0c <MX_LWIP_Init+0x28c>)
 8007cb4:	4814      	ldr	r0, [pc, #80]	; (8007d08 <MX_LWIP_Init+0x288>)
 8007cb6:	f009 f8a7 	bl	8010e08 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007cba:	2224      	movs	r2, #36	; 0x24
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	4814      	ldr	r0, [pc, #80]	; (8007d10 <MX_LWIP_Init+0x290>)
 8007cc0:	f013 f810 	bl	801ace4 <memset>
  attributes.name = "EthLink";
 8007cc4:	4b12      	ldr	r3, [pc, #72]	; (8007d10 <MX_LWIP_Init+0x290>)
 8007cc6:	4a13      	ldr	r2, [pc, #76]	; (8007d14 <MX_LWIP_Init+0x294>)
 8007cc8:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8007cca:	4b11      	ldr	r3, [pc, #68]	; (8007d10 <MX_LWIP_Init+0x290>)
 8007ccc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007cd0:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8007cd2:	4b0f      	ldr	r3, [pc, #60]	; (8007d10 <MX_LWIP_Init+0x290>)
 8007cd4:	2210      	movs	r2, #16
 8007cd6:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8007cd8:	4a0d      	ldr	r2, [pc, #52]	; (8007d10 <MX_LWIP_Init+0x290>)
 8007cda:	490b      	ldr	r1, [pc, #44]	; (8007d08 <MX_LWIP_Init+0x288>)
 8007cdc:	480e      	ldr	r0, [pc, #56]	; (8007d18 <MX_LWIP_Init+0x298>)
 8007cde:	f000 fda3 	bl	8008828 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007ce2:	bf00      	nop
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	200044cc 	.word	0x200044cc
 8007cec:	200044d0 	.word	0x200044d0
 8007cf0:	200044d4 	.word	0x200044d4
 8007cf4:	200044c0 	.word	0x200044c0
 8007cf8:	200044c4 	.word	0x200044c4
 8007cfc:	200044c8 	.word	0x200044c8
 8007d00:	0800fbfd 	.word	0x0800fbfd
 8007d04:	08008219 	.word	0x08008219
 8007d08:	2000448c 	.word	0x2000448c
 8007d0c:	08007d1d 	.word	0x08007d1d
 8007d10:	200044d8 	.word	0x200044d8
 8007d14:	0801c1a0 	.word	0x0801c1a0
 8007d18:	080084e1 	.word	0x080084e1

08007d1c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b087      	sub	sp, #28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8007d42:	2320      	movs	r3, #32
 8007d44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007d46:	f3bf 8f4f 	dsb	sy
}
 8007d4a:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8007d4c:	e00b      	b.n	8007d66 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8007d4e:	4a0d      	ldr	r2, [pc, #52]	; (8007d84 <SCB_InvalidateDCache_by_Addr+0x54>)
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	dcf0      	bgt.n	8007d4e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8007d6c:	f3bf 8f4f 	dsb	sy
}
 8007d70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007d72:	f3bf 8f6f 	isb	sy
}
 8007d76:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8007d78:	bf00      	nop
 8007d7a:	371c      	adds	r7, #28
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr
 8007d84:	e000ed00 	.word	0xe000ed00

08007d88 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8007d90:	4b04      	ldr	r3, [pc, #16]	; (8007da4 <HAL_ETH_RxCpltCallback+0x1c>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4618      	mov	r0, r3
 8007d96:	f001 f865 	bl	8008e64 <osSemaphoreRelease>
}
 8007d9a:	bf00      	nop
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	20008e88 	.word	0x20008e88

08007da8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8007db0:	4b04      	ldr	r3, [pc, #16]	; (8007dc4 <HAL_ETH_TxCpltCallback+0x1c>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f001 f855 	bl	8008e64 <osSemaphoreRelease>
}
 8007dba:	bf00      	nop
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20008e8c 	.word	0x20008e8c

08007dc8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7fb ff19 	bl	8003c08 <HAL_ETH_GetDMAError>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ddc:	2b80      	cmp	r3, #128	; 0x80
 8007dde:	d104      	bne.n	8007dea <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8007de0:	4b04      	ldr	r3, [pc, #16]	; (8007df4 <HAL_ETH_ErrorCallback+0x2c>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4618      	mov	r0, r3
 8007de6:	f001 f83d 	bl	8008e64 <osSemaphoreRelease>
  }
}
 8007dea:	bf00      	nop
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	20008e88 	.word	0x20008e88

08007df8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b0aa      	sub	sp, #168	; 0xa8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8007e06:	2300      	movs	r3, #0
 8007e08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8007e12:	f107 0310 	add.w	r3, r7, #16
 8007e16:	2264      	movs	r2, #100	; 0x64
 8007e18:	2100      	movs	r1, #0
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f012 ff62 	bl	801ace4 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007e20:	4b85      	ldr	r3, [pc, #532]	; (8008038 <low_level_init+0x240>)
 8007e22:	4a86      	ldr	r2, [pc, #536]	; (800803c <low_level_init+0x244>)
 8007e24:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8007e26:	2300      	movs	r3, #0
 8007e28:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8007e2a:	2380      	movs	r3, #128	; 0x80
 8007e2c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007e2e:	23e1      	movs	r3, #225	; 0xe1
 8007e30:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007e32:	2300      	movs	r3, #0
 8007e34:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8007e36:	2300      	movs	r3, #0
 8007e38:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007e3e:	4a7e      	ldr	r2, [pc, #504]	; (8008038 <low_level_init+0x240>)
 8007e40:	f107 0308 	add.w	r3, r7, #8
 8007e44:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007e46:	4b7c      	ldr	r3, [pc, #496]	; (8008038 <low_level_init+0x240>)
 8007e48:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007e4c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007e4e:	4b7a      	ldr	r3, [pc, #488]	; (8008038 <low_level_init+0x240>)
 8007e50:	4a7b      	ldr	r2, [pc, #492]	; (8008040 <low_level_init+0x248>)
 8007e52:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007e54:	4b78      	ldr	r3, [pc, #480]	; (8008038 <low_level_init+0x240>)
 8007e56:	4a7b      	ldr	r2, [pc, #492]	; (8008044 <low_level_init+0x24c>)
 8007e58:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007e5a:	4b77      	ldr	r3, [pc, #476]	; (8008038 <low_level_init+0x240>)
 8007e5c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007e60:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007e62:	4875      	ldr	r0, [pc, #468]	; (8008038 <low_level_init+0x240>)
 8007e64:	f7fb f892 	bl	8002f8c <HAL_ETH_Init>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007e6e:	2238      	movs	r2, #56	; 0x38
 8007e70:	2100      	movs	r1, #0
 8007e72:	4875      	ldr	r0, [pc, #468]	; (8008048 <low_level_init+0x250>)
 8007e74:	f012 ff36 	bl	801ace4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007e78:	4b73      	ldr	r3, [pc, #460]	; (8008048 <low_level_init+0x250>)
 8007e7a:	2221      	movs	r2, #33	; 0x21
 8007e7c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007e7e:	4b72      	ldr	r3, [pc, #456]	; (8008048 <low_level_init+0x250>)
 8007e80:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8007e84:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007e86:	4b70      	ldr	r3, [pc, #448]	; (8008048 <low_level_init+0x250>)
 8007e88:	2200      	movs	r2, #0
 8007e8a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007e8c:	486f      	ldr	r0, [pc, #444]	; (800804c <low_level_init+0x254>)
 8007e8e:	f008 fbb1 	bl	80105f4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2206      	movs	r2, #6
 8007e96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007e9a:	4b67      	ldr	r3, [pc, #412]	; (8008038 <low_level_init+0x240>)
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	781a      	ldrb	r2, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007ea6:	4b64      	ldr	r3, [pc, #400]	; (8008038 <low_level_init+0x240>)
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	785a      	ldrb	r2, [r3, #1]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007eb2:	4b61      	ldr	r3, [pc, #388]	; (8008038 <low_level_init+0x240>)
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	789a      	ldrb	r2, [r3, #2]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007ebe:	4b5e      	ldr	r3, [pc, #376]	; (8008038 <low_level_init+0x240>)
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	78da      	ldrb	r2, [r3, #3]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007eca:	4b5b      	ldr	r3, [pc, #364]	; (8008038 <low_level_init+0x240>)
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	791a      	ldrb	r2, [r3, #4]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007ed6:	4b58      	ldr	r3, [pc, #352]	; (8008038 <low_level_init+0x240>)
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	795a      	ldrb	r2, [r3, #5]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007ee8:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007ef0:	f043 030a 	orr.w	r3, r3, #10
 8007ef4:	b2da      	uxtb	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8007efc:	2200      	movs	r2, #0
 8007efe:	2101      	movs	r1, #1
 8007f00:	2001      	movs	r0, #1
 8007f02:	f000 fead 	bl	8008c60 <osSemaphoreNew>
 8007f06:	4603      	mov	r3, r0
 8007f08:	4a51      	ldr	r2, [pc, #324]	; (8008050 <low_level_init+0x258>)
 8007f0a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	2101      	movs	r1, #1
 8007f10:	2001      	movs	r0, #1
 8007f12:	f000 fea5 	bl	8008c60 <osSemaphoreNew>
 8007f16:	4603      	mov	r3, r0
 8007f18:	4a4e      	ldr	r2, [pc, #312]	; (8008054 <low_level_init+0x25c>)
 8007f1a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007f1c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007f20:	2224      	movs	r2, #36	; 0x24
 8007f22:	2100      	movs	r1, #0
 8007f24:	4618      	mov	r0, r3
 8007f26:	f012 fedd 	bl	801ace4 <memset>
  attributes.name = "EthIf";
 8007f2a:	4b4b      	ldr	r3, [pc, #300]	; (8008058 <low_level_init+0x260>)
 8007f2c:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8007f2e:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8007f32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 8007f36:	2330      	movs	r3, #48	; 0x30
 8007f38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8007f3c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007f40:	461a      	mov	r2, r3
 8007f42:	6879      	ldr	r1, [r7, #4]
 8007f44:	4845      	ldr	r0, [pc, #276]	; (800805c <low_level_init+0x264>)
 8007f46:	f000 fc6f 	bl	8008828 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007f4a:	4945      	ldr	r1, [pc, #276]	; (8008060 <low_level_init+0x268>)
 8007f4c:	4845      	ldr	r0, [pc, #276]	; (8008064 <low_level_init+0x26c>)
 8007f4e:	f7f9 fd06 	bl	800195e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8007f52:	4844      	ldr	r0, [pc, #272]	; (8008064 <low_level_init+0x26c>)
 8007f54:	f7f9 fd35 	bl	80019c2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8007f58:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d164      	bne.n	800802a <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007f60:	4840      	ldr	r0, [pc, #256]	; (8008064 <low_level_init+0x26c>)
 8007f62:	f7f9 fdd6 	bl	8001b12 <LAN8742_GetLinkState>
 8007f66:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8007f6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	dc06      	bgt.n	8007f80 <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f008 ff18 	bl	8010da8 <netif_set_link_down>
      netif_set_down(netif);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f008 feaf 	bl	8010cdc <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007f7e:	e056      	b.n	800802e <low_level_init+0x236>
      switch (PHYLinkState)
 8007f80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f84:	3b02      	subs	r3, #2
 8007f86:	2b03      	cmp	r3, #3
 8007f88:	d82a      	bhi.n	8007fe0 <low_level_init+0x1e8>
 8007f8a:	a201      	add	r2, pc, #4	; (adr r2, 8007f90 <low_level_init+0x198>)
 8007f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f90:	08007fa1 	.word	0x08007fa1
 8007f94:	08007fb3 	.word	0x08007fb3
 8007f98:	08007fc3 	.word	0x08007fc3
 8007f9c:	08007fd3 	.word	0x08007fd3
        duplex = ETH_FULLDUPLEX_MODE;
 8007fa0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007fa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8007fa8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007fac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8007fb0:	e01f      	b.n	8007ff2 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8007fb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007fbc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8007fc0:	e017      	b.n	8007ff2 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8007fc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007fc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8007fd0:	e00f      	b.n	8007ff2 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8007fde:	e008      	b.n	8007ff2 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8007fe0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007fe4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8007fe8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007fec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8007ff0:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007ff2:	f107 0310 	add.w	r3, r7, #16
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	480f      	ldr	r0, [pc, #60]	; (8008038 <low_level_init+0x240>)
 8007ffa:	f7fb fcab 	bl	8003954 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8007ffe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008002:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8008004:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800800a:	f107 0310 	add.w	r3, r7, #16
 800800e:	4619      	mov	r1, r3
 8008010:	4809      	ldr	r0, [pc, #36]	; (8008038 <low_level_init+0x240>)
 8008012:	f7fb fd89 	bl	8003b28 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8008016:	4808      	ldr	r0, [pc, #32]	; (8008038 <low_level_init+0x240>)
 8008018:	f7fb f834 	bl	8003084 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f008 fdf1 	bl	8010c04 <netif_set_up>
    netif_set_link_up(netif);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f008 fe8c 	bl	8010d40 <netif_set_link_up>
}
 8008028:	e001      	b.n	800802e <low_level_init+0x236>
    Error_Handler();
 800802a:	f7f9 f911 	bl	8001250 <Error_Handler>
}
 800802e:	bf00      	nop
 8008030:	37a8      	adds	r7, #168	; 0xa8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	20008e90 	.word	0x20008e90
 800803c:	40028000 	.word	0x40028000
 8008040:	20000134 	.word	0x20000134
 8008044:	20000094 	.word	0x20000094
 8008048:	20008f40 	.word	0x20008f40
 800804c:	0801f9b0 	.word	0x0801f9b0
 8008050:	20008e88 	.word	0x20008e88
 8008054:	20008e8c 	.word	0x20008e8c
 8008058:	0801c1a8 	.word	0x0801c1a8
 800805c:	080081c5 	.word	0x080081c5
 8008060:	2000000c 	.word	0x2000000c
 8008064:	20008f78 	.word	0x20008f78

08008068 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b092      	sub	sp, #72	; 0x48
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8008072:	2300      	movs	r3, #0
 8008074:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8008076:	2300      	movs	r3, #0
 8008078:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8008080:	f107 030c 	add.w	r3, r7, #12
 8008084:	2230      	movs	r2, #48	; 0x30
 8008086:	2100      	movs	r1, #0
 8008088:	4618      	mov	r0, r3
 800808a:	f012 fe2b 	bl	801ace4 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800808e:	f107 030c 	add.w	r3, r7, #12
 8008092:	2230      	movs	r2, #48	; 0x30
 8008094:	2100      	movs	r1, #0
 8008096:	4618      	mov	r0, r3
 8008098:	f012 fe24 	bl	801ace4 <memset>

  for(q = p; q != NULL; q = q->next)
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	643b      	str	r3, [r7, #64]	; 0x40
 80080a0:	e045      	b.n	800812e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80080a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080a4:	2b03      	cmp	r3, #3
 80080a6:	d902      	bls.n	80080ae <low_level_output+0x46>
      return ERR_IF;
 80080a8:	f06f 030b 	mvn.w	r3, #11
 80080ac:	e065      	b.n	800817a <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80080ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080b0:	6859      	ldr	r1, [r3, #4]
 80080b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080b4:	4613      	mov	r3, r2
 80080b6:	005b      	lsls	r3, r3, #1
 80080b8:	4413      	add	r3, r2
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	3348      	adds	r3, #72	; 0x48
 80080be:	443b      	add	r3, r7
 80080c0:	3b3c      	subs	r3, #60	; 0x3c
 80080c2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80080c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080c6:	895b      	ldrh	r3, [r3, #10]
 80080c8:	4619      	mov	r1, r3
 80080ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080cc:	4613      	mov	r3, r2
 80080ce:	005b      	lsls	r3, r3, #1
 80080d0:	4413      	add	r3, r2
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	3348      	adds	r3, #72	; 0x48
 80080d6:	443b      	add	r3, r7
 80080d8:	3b38      	subs	r3, #56	; 0x38
 80080da:	6019      	str	r1, [r3, #0]

    if(i>0)
 80080dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d011      	beq.n	8008106 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80080e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080e4:	1e5a      	subs	r2, r3, #1
 80080e6:	f107 000c 	add.w	r0, r7, #12
 80080ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80080ec:	460b      	mov	r3, r1
 80080ee:	005b      	lsls	r3, r3, #1
 80080f0:	440b      	add	r3, r1
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	18c1      	adds	r1, r0, r3
 80080f6:	4613      	mov	r3, r2
 80080f8:	005b      	lsls	r3, r3, #1
 80080fa:	4413      	add	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	3348      	adds	r3, #72	; 0x48
 8008100:	443b      	add	r3, r7
 8008102:	3b34      	subs	r3, #52	; 0x34
 8008104:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8008106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d109      	bne.n	8008122 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800810e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008110:	4613      	mov	r3, r2
 8008112:	005b      	lsls	r3, r3, #1
 8008114:	4413      	add	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	3348      	adds	r3, #72	; 0x48
 800811a:	443b      	add	r3, r7
 800811c:	3b34      	subs	r3, #52	; 0x34
 800811e:	2200      	movs	r2, #0
 8008120:	601a      	str	r2, [r3, #0]
    }

    i++;
 8008122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008124:	3301      	adds	r3, #1
 8008126:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8008128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	643b      	str	r3, [r7, #64]	; 0x40
 800812e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1b6      	bne.n	80080a2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	891b      	ldrh	r3, [r3, #8]
 8008138:	461a      	mov	r2, r3
 800813a:	4b12      	ldr	r3, [pc, #72]	; (8008184 <low_level_output+0x11c>)
 800813c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800813e:	4a11      	ldr	r2, [pc, #68]	; (8008184 <low_level_output+0x11c>)
 8008140:	f107 030c 	add.w	r3, r7, #12
 8008144:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8008146:	4a0f      	ldr	r2, [pc, #60]	; (8008184 <low_level_output+0x11c>)
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800814c:	6838      	ldr	r0, [r7, #0]
 800814e:	f009 fae1 	bl	8011714 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8008152:	490c      	ldr	r1, [pc, #48]	; (8008184 <low_level_output+0x11c>)
 8008154:	480c      	ldr	r0, [pc, #48]	; (8008188 <low_level_output+0x120>)
 8008156:	f7fb f8a3 	bl	80032a0 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800815a:	bf00      	nop
 800815c:	4b0b      	ldr	r3, [pc, #44]	; (800818c <low_level_output+0x124>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f04f 31ff 	mov.w	r1, #4294967295
 8008164:	4618      	mov	r0, r3
 8008166:	f000 fe17 	bl	8008d98 <osSemaphoreAcquire>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1f5      	bne.n	800815c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8008170:	4805      	ldr	r0, [pc, #20]	; (8008188 <low_level_output+0x120>)
 8008172:	f7fb fa29 	bl	80035c8 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8008176:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800817a:	4618      	mov	r0, r3
 800817c:	3748      	adds	r7, #72	; 0x48
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	20008f40 	.word	0x20008f40
 8008188:	20008e90 	.word	0x20008e90
 800818c:	20008e8c 	.word	0x20008e8c

08008190 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008198:	2300      	movs	r3, #0
 800819a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800819c:	4b07      	ldr	r3, [pc, #28]	; (80081bc <low_level_input+0x2c>)
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d105      	bne.n	80081b0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80081a4:	f107 030c 	add.w	r3, r7, #12
 80081a8:	4619      	mov	r1, r3
 80081aa:	4805      	ldr	r0, [pc, #20]	; (80081c0 <low_level_input+0x30>)
 80081ac:	f7fb f8d4 	bl	8003358 <HAL_ETH_ReadData>
  }

  return p;
 80081b0:	68fb      	ldr	r3, [r7, #12]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	20008e84 	.word	0x20008e84
 80081c0:	20008e90 	.word	0x20008e90

080081c4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80081cc:	2300      	movs	r3, #0
 80081ce:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80081d4:	4b0f      	ldr	r3, [pc, #60]	; (8008214 <ethernetif_input+0x50>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f04f 31ff 	mov.w	r1, #4294967295
 80081dc:	4618      	mov	r0, r3
 80081de:	f000 fddb 	bl	8008d98 <osSemaphoreAcquire>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1f5      	bne.n	80081d4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80081e8:	68b8      	ldr	r0, [r7, #8]
 80081ea:	f7ff ffd1 	bl	8008190 <low_level_input>
 80081ee:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00a      	beq.n	800820c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	68b9      	ldr	r1, [r7, #8]
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	4798      	blx	r3
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d002      	beq.n	800820c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f009 f9de 	bl	80115c8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1ea      	bne.n	80081e8 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008212:	e7df      	b.n	80081d4 <ethernetif_input+0x10>
 8008214:	20008e88 	.word	0x20008e88

08008218 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d106      	bne.n	8008234 <ethernetif_init+0x1c>
 8008226:	4b0e      	ldr	r3, [pc, #56]	; (8008260 <ethernetif_init+0x48>)
 8008228:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800822c:	490d      	ldr	r1, [pc, #52]	; (8008264 <ethernetif_init+0x4c>)
 800822e:	480e      	ldr	r0, [pc, #56]	; (8008268 <ethernetif_init+0x50>)
 8008230:	f012 fd60 	bl	801acf4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2273      	movs	r2, #115	; 0x73
 8008238:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2274      	movs	r2, #116	; 0x74
 8008240:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a09      	ldr	r2, [pc, #36]	; (800826c <ethernetif_init+0x54>)
 8008248:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a08      	ldr	r2, [pc, #32]	; (8008270 <ethernetif_init+0x58>)
 800824e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f7ff fdd1 	bl	8007df8 <low_level_init>

  return ERR_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	0801c1b0 	.word	0x0801c1b0
 8008264:	0801c1cc 	.word	0x0801c1cc
 8008268:	0801c1dc 	.word	0x0801c1dc
 800826c:	08018c01 	.word	0x08018c01
 8008270:	08008069 	.word	0x08008069

08008274 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008280:	68f9      	ldr	r1, [r7, #12]
 8008282:	4809      	ldr	r0, [pc, #36]	; (80082a8 <pbuf_free_custom+0x34>)
 8008284:	f008 faa6 	bl	80107d4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8008288:	4b08      	ldr	r3, [pc, #32]	; (80082ac <pbuf_free_custom+0x38>)
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	2b01      	cmp	r3, #1
 800828e:	d107      	bne.n	80082a0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8008290:	4b06      	ldr	r3, [pc, #24]	; (80082ac <pbuf_free_custom+0x38>)
 8008292:	2200      	movs	r2, #0
 8008294:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8008296:	4b06      	ldr	r3, [pc, #24]	; (80082b0 <pbuf_free_custom+0x3c>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4618      	mov	r0, r3
 800829c:	f000 fde2 	bl	8008e64 <osSemaphoreRelease>
  }
}
 80082a0:	bf00      	nop
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	0801f9b0 	.word	0x0801f9b0
 80082ac:	20008e84 	.word	0x20008e84
 80082b0:	20008e88 	.word	0x20008e88

080082b4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80082b8:	f7f9 fcd4 	bl	8001c64 <HAL_GetTick>
 80082bc:	4603      	mov	r3, r0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	bd80      	pop	{r7, pc}
	...

080082c4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b08e      	sub	sp, #56	; 0x38
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082d0:	2200      	movs	r2, #0
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	605a      	str	r2, [r3, #4]
 80082d6:	609a      	str	r2, [r3, #8]
 80082d8:	60da      	str	r2, [r3, #12]
 80082da:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a52      	ldr	r2, [pc, #328]	; (800842c <HAL_ETH_MspInit+0x168>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	f040 809e 	bne.w	8008424 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80082e8:	4b51      	ldr	r3, [pc, #324]	; (8008430 <HAL_ETH_MspInit+0x16c>)
 80082ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ec:	4a50      	ldr	r2, [pc, #320]	; (8008430 <HAL_ETH_MspInit+0x16c>)
 80082ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80082f2:	6313      	str	r3, [r2, #48]	; 0x30
 80082f4:	4b4e      	ldr	r3, [pc, #312]	; (8008430 <HAL_ETH_MspInit+0x16c>)
 80082f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082fc:	623b      	str	r3, [r7, #32]
 80082fe:	6a3b      	ldr	r3, [r7, #32]
 8008300:	4b4b      	ldr	r3, [pc, #300]	; (8008430 <HAL_ETH_MspInit+0x16c>)
 8008302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008304:	4a4a      	ldr	r2, [pc, #296]	; (8008430 <HAL_ETH_MspInit+0x16c>)
 8008306:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800830a:	6313      	str	r3, [r2, #48]	; 0x30
 800830c:	4b48      	ldr	r3, [pc, #288]	; (8008430 <HAL_ETH_MspInit+0x16c>)
 800830e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008310:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008314:	61fb      	str	r3, [r7, #28]
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	4b45      	ldr	r3, [pc, #276]	; (8008430 <HAL_ETH_MspInit+0x16c>)
 800831a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831c:	4a44      	ldr	r2, [pc, #272]	; (8008430 <HAL_ETH_MspInit+0x16c>)
 800831e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008322:	6313      	str	r3, [r2, #48]	; 0x30
 8008324:	4b42      	ldr	r3, [pc, #264]	; (8008430 <HAL_ETH_MspInit+0x16c>)
 8008326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800832c:	61bb      	str	r3, [r7, #24]
 800832e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008330:	4b3f      	ldr	r3, [pc, #252]	; (8008430 <HAL_ETH_MspInit+0x16c>)
 8008332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008334:	4a3e      	ldr	r2, [pc, #248]	; (8008430 <HAL_ETH_MspInit+0x16c>)
 8008336:	f043 0304 	orr.w	r3, r3, #4
 800833a:	6313      	str	r3, [r2, #48]	; 0x30
 800833c:	4b3c      	ldr	r3, [pc, #240]	; (8008430 <HAL_ETH_MspInit+0x16c>)
 800833e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008340:	f003 0304 	and.w	r3, r3, #4
 8008344:	617b      	str	r3, [r7, #20]
 8008346:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008348:	4b39      	ldr	r3, [pc, #228]	; (8008430 <HAL_ETH_MspInit+0x16c>)
 800834a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800834c:	4a38      	ldr	r2, [pc, #224]	; (8008430 <HAL_ETH_MspInit+0x16c>)
 800834e:	f043 0301 	orr.w	r3, r3, #1
 8008352:	6313      	str	r3, [r2, #48]	; 0x30
 8008354:	4b36      	ldr	r3, [pc, #216]	; (8008430 <HAL_ETH_MspInit+0x16c>)
 8008356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008358:	f003 0301 	and.w	r3, r3, #1
 800835c:	613b      	str	r3, [r7, #16]
 800835e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008360:	4b33      	ldr	r3, [pc, #204]	; (8008430 <HAL_ETH_MspInit+0x16c>)
 8008362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008364:	4a32      	ldr	r2, [pc, #200]	; (8008430 <HAL_ETH_MspInit+0x16c>)
 8008366:	f043 0302 	orr.w	r3, r3, #2
 800836a:	6313      	str	r3, [r2, #48]	; 0x30
 800836c:	4b30      	ldr	r3, [pc, #192]	; (8008430 <HAL_ETH_MspInit+0x16c>)
 800836e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008370:	f003 0302 	and.w	r3, r3, #2
 8008374:	60fb      	str	r3, [r7, #12]
 8008376:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008378:	4b2d      	ldr	r3, [pc, #180]	; (8008430 <HAL_ETH_MspInit+0x16c>)
 800837a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800837c:	4a2c      	ldr	r2, [pc, #176]	; (8008430 <HAL_ETH_MspInit+0x16c>)
 800837e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008382:	6313      	str	r3, [r2, #48]	; 0x30
 8008384:	4b2a      	ldr	r3, [pc, #168]	; (8008430 <HAL_ETH_MspInit+0x16c>)
 8008386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800838c:	60bb      	str	r3, [r7, #8]
 800838e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008390:	2332      	movs	r3, #50	; 0x32
 8008392:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008394:	2302      	movs	r3, #2
 8008396:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008398:	2300      	movs	r3, #0
 800839a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800839c:	2303      	movs	r3, #3
 800839e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80083a0:	230b      	movs	r3, #11
 80083a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80083a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083a8:	4619      	mov	r1, r3
 80083aa:	4822      	ldr	r0, [pc, #136]	; (8008434 <HAL_ETH_MspInit+0x170>)
 80083ac:	f7fc f83c 	bl	8004428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80083b0:	2386      	movs	r3, #134	; 0x86
 80083b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083b4:	2302      	movs	r3, #2
 80083b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083b8:	2300      	movs	r3, #0
 80083ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083bc:	2303      	movs	r3, #3
 80083be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80083c0:	230b      	movs	r3, #11
 80083c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083c8:	4619      	mov	r1, r3
 80083ca:	481b      	ldr	r0, [pc, #108]	; (8008438 <HAL_ETH_MspInit+0x174>)
 80083cc:	f7fc f82c 	bl	8004428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80083d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80083d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083d6:	2302      	movs	r3, #2
 80083d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083da:	2300      	movs	r3, #0
 80083dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083de:	2303      	movs	r3, #3
 80083e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80083e2:	230b      	movs	r3, #11
 80083e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80083e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083ea:	4619      	mov	r1, r3
 80083ec:	4813      	ldr	r0, [pc, #76]	; (800843c <HAL_ETH_MspInit+0x178>)
 80083ee:	f7fc f81b 	bl	8004428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80083f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80083f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083f8:	2302      	movs	r3, #2
 80083fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083fc:	2300      	movs	r3, #0
 80083fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008400:	2303      	movs	r3, #3
 8008402:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008404:	230b      	movs	r3, #11
 8008406:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800840c:	4619      	mov	r1, r3
 800840e:	480c      	ldr	r0, [pc, #48]	; (8008440 <HAL_ETH_MspInit+0x17c>)
 8008410:	f7fc f80a 	bl	8004428 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8008414:	2200      	movs	r2, #0
 8008416:	2105      	movs	r1, #5
 8008418:	203d      	movs	r0, #61	; 0x3d
 800841a:	f7fa fa11 	bl	8002840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800841e:	203d      	movs	r0, #61	; 0x3d
 8008420:	f7fa fa2a 	bl	8002878 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008424:	bf00      	nop
 8008426:	3738      	adds	r7, #56	; 0x38
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	40028000 	.word	0x40028000
 8008430:	40023800 	.word	0x40023800
 8008434:	40020800 	.word	0x40020800
 8008438:	40020000 	.word	0x40020000
 800843c:	40020400 	.word	0x40020400
 8008440:	40021800 	.word	0x40021800

08008444 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008448:	4802      	ldr	r0, [pc, #8]	; (8008454 <ETH_PHY_IO_Init+0x10>)
 800844a:	f7fb fb87 	bl	8003b5c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	bd80      	pop	{r7, pc}
 8008454:	20008e90 	.word	0x20008e90

08008458 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008458:	b480      	push	{r7}
 800845a:	af00      	add	r7, sp, #0
  return 0;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	68ba      	ldr	r2, [r7, #8]
 8008478:	68f9      	ldr	r1, [r7, #12]
 800847a:	4807      	ldr	r0, [pc, #28]	; (8008498 <ETH_PHY_IO_ReadReg+0x30>)
 800847c:	f7fb f9d6 	bl	800382c <HAL_ETH_ReadPHYRegister>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d002      	beq.n	800848c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8008486:	f04f 33ff 	mov.w	r3, #4294967295
 800848a:	e000      	b.n	800848e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	20008e90 	.word	0x20008e90

0800849c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	68f9      	ldr	r1, [r7, #12]
 80084ae:	4807      	ldr	r0, [pc, #28]	; (80084cc <ETH_PHY_IO_WriteReg+0x30>)
 80084b0:	f7fb fa07 	bl	80038c2 <HAL_ETH_WritePHYRegister>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d002      	beq.n	80084c0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80084ba:	f04f 33ff 	mov.w	r3, #4294967295
 80084be:	e000      	b.n	80084c2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	20008e90 	.word	0x20008e90

080084d0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80084d4:	f7f9 fbc6 	bl	8001c64 <HAL_GetTick>
 80084d8:	4603      	mov	r3, r0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b0a0      	sub	sp, #128	; 0x80
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80084e8:	f107 0308 	add.w	r3, r7, #8
 80084ec:	2264      	movs	r2, #100	; 0x64
 80084ee:	2100      	movs	r1, #0
 80084f0:	4618      	mov	r0, r3
 80084f2:	f012 fbf7 	bl	801ace4 <memset>
  int32_t PHYLinkState = 0;
 80084f6:	2300      	movs	r3, #0
 80084f8:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80084fa:	2300      	movs	r3, #0
 80084fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80084fe:	2300      	movs	r3, #0
 8008500:	67bb      	str	r3, [r7, #120]	; 0x78
 8008502:	2300      	movs	r3, #0
 8008504:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800850a:	483a      	ldr	r0, [pc, #232]	; (80085f4 <ethernet_link_thread+0x114>)
 800850c:	f7f9 fb01 	bl	8001b12 <LAN8742_GetLinkState>
 8008510:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8008512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008514:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008518:	089b      	lsrs	r3, r3, #2
 800851a:	f003 0301 	and.w	r3, r3, #1
 800851e:	b2db      	uxtb	r3, r3
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00c      	beq.n	800853e <ethernet_link_thread+0x5e>
 8008524:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008526:	2b01      	cmp	r3, #1
 8008528:	dc09      	bgt.n	800853e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800852a:	4833      	ldr	r0, [pc, #204]	; (80085f8 <ethernet_link_thread+0x118>)
 800852c:	f7fa fe38 	bl	80031a0 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8008530:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008532:	f008 fbd3 	bl	8010cdc <netif_set_down>
    netif_set_link_down(netif);
 8008536:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008538:	f008 fc36 	bl	8010da8 <netif_set_link_down>
 800853c:	e055      	b.n	80085ea <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800853e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008540:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008544:	f003 0304 	and.w	r3, r3, #4
 8008548:	2b00      	cmp	r3, #0
 800854a:	d14e      	bne.n	80085ea <ethernet_link_thread+0x10a>
 800854c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800854e:	2b01      	cmp	r3, #1
 8008550:	dd4b      	ble.n	80085ea <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8008552:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008554:	3b02      	subs	r3, #2
 8008556:	2b03      	cmp	r3, #3
 8008558:	d82a      	bhi.n	80085b0 <ethernet_link_thread+0xd0>
 800855a:	a201      	add	r2, pc, #4	; (adr r2, 8008560 <ethernet_link_thread+0x80>)
 800855c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008560:	08008571 	.word	0x08008571
 8008564:	08008583 	.word	0x08008583
 8008568:	08008593 	.word	0x08008593
 800856c:	080085a3 	.word	0x080085a3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008570:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008574:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008576:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800857a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800857c:	2301      	movs	r3, #1
 800857e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008580:	e017      	b.n	80085b2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8008582:	2300      	movs	r3, #0
 8008584:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008586:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800858a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800858c:	2301      	movs	r3, #1
 800858e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008590:	e00f      	b.n	80085b2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008592:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008596:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008598:	2300      	movs	r3, #0
 800859a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800859c:	2301      	movs	r3, #1
 800859e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80085a0:	e007      	b.n	80085b2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80085a2:	2300      	movs	r3, #0
 80085a4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80085a6:	2300      	movs	r3, #0
 80085a8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80085aa:	2301      	movs	r3, #1
 80085ac:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80085ae:	e000      	b.n	80085b2 <ethernet_link_thread+0xd2>
    default:
      break;
 80085b0:	bf00      	nop
    }

    if(linkchanged)
 80085b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d018      	beq.n	80085ea <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80085b8:	f107 0308 	add.w	r3, r7, #8
 80085bc:	4619      	mov	r1, r3
 80085be:	480e      	ldr	r0, [pc, #56]	; (80085f8 <ethernet_link_thread+0x118>)
 80085c0:	f7fb f9c8 	bl	8003954 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80085c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085c6:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80085c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085ca:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80085cc:	f107 0308 	add.w	r3, r7, #8
 80085d0:	4619      	mov	r1, r3
 80085d2:	4809      	ldr	r0, [pc, #36]	; (80085f8 <ethernet_link_thread+0x118>)
 80085d4:	f7fb faa8 	bl	8003b28 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80085d8:	4807      	ldr	r0, [pc, #28]	; (80085f8 <ethernet_link_thread+0x118>)
 80085da:	f7fa fd53 	bl	8003084 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80085de:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80085e0:	f008 fb10 	bl	8010c04 <netif_set_up>
      netif_set_link_up(netif);
 80085e4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80085e6:	f008 fbab 	bl	8010d40 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80085ea:	2064      	movs	r0, #100	; 0x64
 80085ec:	f000 f9c2 	bl	8008974 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80085f0:	e78b      	b.n	800850a <ethernet_link_thread+0x2a>
 80085f2:	bf00      	nop
 80085f4:	20008f78 	.word	0x20008f78
 80085f8:	20008e90 	.word	0x20008e90

080085fc <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af02      	add	r7, sp, #8
 8008602:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008604:	4812      	ldr	r0, [pc, #72]	; (8008650 <HAL_ETH_RxAllocateCallback+0x54>)
 8008606:	f008 f871 	bl	80106ec <memp_malloc_pool>
 800860a:	60f8      	str	r0, [r7, #12]
  if (p)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d014      	beq.n	800863c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f103 0220 	add.w	r2, r3, #32
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	4a0d      	ldr	r2, [pc, #52]	; (8008654 <HAL_ETH_RxAllocateCallback+0x58>)
 8008620:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800862a:	9201      	str	r2, [sp, #4]
 800862c:	9300      	str	r3, [sp, #0]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2241      	movs	r2, #65	; 0x41
 8008632:	2100      	movs	r1, #0
 8008634:	2000      	movs	r0, #0
 8008636:	f008 fddb 	bl	80111f0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800863a:	e005      	b.n	8008648 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800863c:	4b06      	ldr	r3, [pc, #24]	; (8008658 <HAL_ETH_RxAllocateCallback+0x5c>)
 800863e:	2201      	movs	r2, #1
 8008640:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	601a      	str	r2, [r3, #0]
}
 8008648:	bf00      	nop
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	0801f9b0 	.word	0x0801f9b0
 8008654:	08008275 	.word	0x08008275
 8008658:	20008e84 	.word	0x20008e84

0800865c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b088      	sub	sp, #32
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]
 8008668:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8008672:	2300      	movs	r3, #0
 8008674:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	3b20      	subs	r3, #32
 800867a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	2200      	movs	r2, #0
 8008680:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8008682:	69fb      	ldr	r3, [r7, #28]
 8008684:	2200      	movs	r2, #0
 8008686:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	887a      	ldrh	r2, [r7, #2]
 800868c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d103      	bne.n	800869e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	69fa      	ldr	r2, [r7, #28]
 800869a:	601a      	str	r2, [r3, #0]
 800869c:	e003      	b.n	80086a6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	69fa      	ldr	r2, [r7, #28]
 80086a4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	69fa      	ldr	r2, [r7, #28]
 80086aa:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	61fb      	str	r3, [r7, #28]
 80086b2:	e009      	b.n	80086c8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	891a      	ldrh	r2, [r3, #8]
 80086b8:	887b      	ldrh	r3, [r7, #2]
 80086ba:	4413      	add	r3, r2
 80086bc:	b29a      	uxth	r2, r3
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	61fb      	str	r3, [r7, #28]
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1f2      	bne.n	80086b4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80086ce:	887b      	ldrh	r3, [r7, #2]
 80086d0:	4619      	mov	r1, r3
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f7ff fb2c 	bl	8007d30 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 80086d8:	bf00      	nop
 80086da:	3720      	adds	r7, #32
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f008 ff6d 	bl	80115c8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80086ee:	bf00      	nop
 80086f0:	3708      	adds	r7, #8
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80086f6:	b480      	push	{r7}
 80086f8:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80086fa:	bf00      	nop
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800870a:	f3ef 8305 	mrs	r3, IPSR
 800870e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008710:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008712:	2b00      	cmp	r3, #0
 8008714:	d10f      	bne.n	8008736 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008716:	f3ef 8310 	mrs	r3, PRIMASK
 800871a:	607b      	str	r3, [r7, #4]
  return(result);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d105      	bne.n	800872e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008722:	f3ef 8311 	mrs	r3, BASEPRI
 8008726:	603b      	str	r3, [r7, #0]
  return(result);
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d007      	beq.n	800873e <osKernelInitialize+0x3a>
 800872e:	4b0e      	ldr	r3, [pc, #56]	; (8008768 <osKernelInitialize+0x64>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b02      	cmp	r3, #2
 8008734:	d103      	bne.n	800873e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008736:	f06f 0305 	mvn.w	r3, #5
 800873a:	60fb      	str	r3, [r7, #12]
 800873c:	e00c      	b.n	8008758 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800873e:	4b0a      	ldr	r3, [pc, #40]	; (8008768 <osKernelInitialize+0x64>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d105      	bne.n	8008752 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008746:	4b08      	ldr	r3, [pc, #32]	; (8008768 <osKernelInitialize+0x64>)
 8008748:	2201      	movs	r2, #1
 800874a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800874c:	2300      	movs	r3, #0
 800874e:	60fb      	str	r3, [r7, #12]
 8008750:	e002      	b.n	8008758 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008752:	f04f 33ff 	mov.w	r3, #4294967295
 8008756:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008758:	68fb      	ldr	r3, [r7, #12]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	20008f98 	.word	0x20008f98

0800876c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008772:	f3ef 8305 	mrs	r3, IPSR
 8008776:	60bb      	str	r3, [r7, #8]
  return(result);
 8008778:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800877a:	2b00      	cmp	r3, #0
 800877c:	d10f      	bne.n	800879e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800877e:	f3ef 8310 	mrs	r3, PRIMASK
 8008782:	607b      	str	r3, [r7, #4]
  return(result);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d105      	bne.n	8008796 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800878a:	f3ef 8311 	mrs	r3, BASEPRI
 800878e:	603b      	str	r3, [r7, #0]
  return(result);
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d007      	beq.n	80087a6 <osKernelStart+0x3a>
 8008796:	4b0f      	ldr	r3, [pc, #60]	; (80087d4 <osKernelStart+0x68>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2b02      	cmp	r3, #2
 800879c:	d103      	bne.n	80087a6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800879e:	f06f 0305 	mvn.w	r3, #5
 80087a2:	60fb      	str	r3, [r7, #12]
 80087a4:	e010      	b.n	80087c8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80087a6:	4b0b      	ldr	r3, [pc, #44]	; (80087d4 <osKernelStart+0x68>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d109      	bne.n	80087c2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80087ae:	f7ff ffa2 	bl	80086f6 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80087b2:	4b08      	ldr	r3, [pc, #32]	; (80087d4 <osKernelStart+0x68>)
 80087b4:	2202      	movs	r2, #2
 80087b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80087b8:	f002 f9ce 	bl	800ab58 <vTaskStartScheduler>
      stat = osOK;
 80087bc:	2300      	movs	r3, #0
 80087be:	60fb      	str	r3, [r7, #12]
 80087c0:	e002      	b.n	80087c8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80087c2:	f04f 33ff 	mov.w	r3, #4294967295
 80087c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80087c8:	68fb      	ldr	r3, [r7, #12]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20008f98 	.word	0x20008f98

080087d8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087de:	f3ef 8305 	mrs	r3, IPSR
 80087e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80087e4:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d10f      	bne.n	800880a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087ea:	f3ef 8310 	mrs	r3, PRIMASK
 80087ee:	607b      	str	r3, [r7, #4]
  return(result);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d105      	bne.n	8008802 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80087f6:	f3ef 8311 	mrs	r3, BASEPRI
 80087fa:	603b      	str	r3, [r7, #0]
  return(result);
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d007      	beq.n	8008812 <osKernelGetTickCount+0x3a>
 8008802:	4b08      	ldr	r3, [pc, #32]	; (8008824 <osKernelGetTickCount+0x4c>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2b02      	cmp	r3, #2
 8008808:	d103      	bne.n	8008812 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800880a:	f002 facd 	bl	800ada8 <xTaskGetTickCountFromISR>
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	e002      	b.n	8008818 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8008812:	f002 fab9 	bl	800ad88 <xTaskGetTickCount>
 8008816:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8008818:	68fb      	ldr	r3, [r7, #12]
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	20008f98 	.word	0x20008f98

08008828 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008828:	b580      	push	{r7, lr}
 800882a:	b090      	sub	sp, #64	; 0x40
 800882c:	af04      	add	r7, sp, #16
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008834:	2300      	movs	r3, #0
 8008836:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008838:	f3ef 8305 	mrs	r3, IPSR
 800883c:	61fb      	str	r3, [r7, #28]
  return(result);
 800883e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008840:	2b00      	cmp	r3, #0
 8008842:	f040 808f 	bne.w	8008964 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008846:	f3ef 8310 	mrs	r3, PRIMASK
 800884a:	61bb      	str	r3, [r7, #24]
  return(result);
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d105      	bne.n	800885e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008852:	f3ef 8311 	mrs	r3, BASEPRI
 8008856:	617b      	str	r3, [r7, #20]
  return(result);
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d003      	beq.n	8008866 <osThreadNew+0x3e>
 800885e:	4b44      	ldr	r3, [pc, #272]	; (8008970 <osThreadNew+0x148>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2b02      	cmp	r3, #2
 8008864:	d07e      	beq.n	8008964 <osThreadNew+0x13c>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d07b      	beq.n	8008964 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800886c:	2380      	movs	r3, #128	; 0x80
 800886e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008870:	2318      	movs	r3, #24
 8008872:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008874:	2300      	movs	r3, #0
 8008876:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008878:	f04f 33ff 	mov.w	r3, #4294967295
 800887c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d045      	beq.n	8008910 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d002      	beq.n	8008892 <osThreadNew+0x6a>
        name = attr->name;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	699b      	ldr	r3, [r3, #24]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d002      	beq.n	80088a0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80088a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d008      	beq.n	80088b8 <osThreadNew+0x90>
 80088a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a8:	2b38      	cmp	r3, #56	; 0x38
 80088aa:	d805      	bhi.n	80088b8 <osThreadNew+0x90>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	f003 0301 	and.w	r3, r3, #1
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d001      	beq.n	80088bc <osThreadNew+0x94>
        return (NULL);
 80088b8:	2300      	movs	r3, #0
 80088ba:	e054      	b.n	8008966 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	695b      	ldr	r3, [r3, #20]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d003      	beq.n	80088cc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	695b      	ldr	r3, [r3, #20]
 80088c8:	089b      	lsrs	r3, r3, #2
 80088ca:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00e      	beq.n	80088f2 <osThreadNew+0xca>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	2b5b      	cmp	r3, #91	; 0x5b
 80088da:	d90a      	bls.n	80088f2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d006      	beq.n	80088f2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	695b      	ldr	r3, [r3, #20]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d002      	beq.n	80088f2 <osThreadNew+0xca>
        mem = 1;
 80088ec:	2301      	movs	r3, #1
 80088ee:	623b      	str	r3, [r7, #32]
 80088f0:	e010      	b.n	8008914 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10c      	bne.n	8008914 <osThreadNew+0xec>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d108      	bne.n	8008914 <osThreadNew+0xec>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d104      	bne.n	8008914 <osThreadNew+0xec>
          mem = 0;
 800890a:	2300      	movs	r3, #0
 800890c:	623b      	str	r3, [r7, #32]
 800890e:	e001      	b.n	8008914 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008910:	2300      	movs	r3, #0
 8008912:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008914:	6a3b      	ldr	r3, [r7, #32]
 8008916:	2b01      	cmp	r3, #1
 8008918:	d110      	bne.n	800893c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008922:	9202      	str	r2, [sp, #8]
 8008924:	9301      	str	r3, [sp, #4]
 8008926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800892e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f001 ff31 	bl	800a798 <xTaskCreateStatic>
 8008936:	4603      	mov	r3, r0
 8008938:	613b      	str	r3, [r7, #16]
 800893a:	e013      	b.n	8008964 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800893c:	6a3b      	ldr	r3, [r7, #32]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d110      	bne.n	8008964 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008944:	b29a      	uxth	r2, r3
 8008946:	f107 0310 	add.w	r3, r7, #16
 800894a:	9301      	str	r3, [sp, #4]
 800894c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894e:	9300      	str	r3, [sp, #0]
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f001 ff82 	bl	800a85e <xTaskCreate>
 800895a:	4603      	mov	r3, r0
 800895c:	2b01      	cmp	r3, #1
 800895e:	d001      	beq.n	8008964 <osThreadNew+0x13c>
          hTask = NULL;
 8008960:	2300      	movs	r3, #0
 8008962:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008964:	693b      	ldr	r3, [r7, #16]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3730      	adds	r7, #48	; 0x30
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	20008f98 	.word	0x20008f98

08008974 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008974:	b580      	push	{r7, lr}
 8008976:	b086      	sub	sp, #24
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800897c:	f3ef 8305 	mrs	r3, IPSR
 8008980:	613b      	str	r3, [r7, #16]
  return(result);
 8008982:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10f      	bne.n	80089a8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008988:	f3ef 8310 	mrs	r3, PRIMASK
 800898c:	60fb      	str	r3, [r7, #12]
  return(result);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d105      	bne.n	80089a0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008994:	f3ef 8311 	mrs	r3, BASEPRI
 8008998:	60bb      	str	r3, [r7, #8]
  return(result);
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d007      	beq.n	80089b0 <osDelay+0x3c>
 80089a0:	4b0a      	ldr	r3, [pc, #40]	; (80089cc <osDelay+0x58>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d103      	bne.n	80089b0 <osDelay+0x3c>
    stat = osErrorISR;
 80089a8:	f06f 0305 	mvn.w	r3, #5
 80089ac:	617b      	str	r3, [r7, #20]
 80089ae:	e007      	b.n	80089c0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80089b0:	2300      	movs	r3, #0
 80089b2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d002      	beq.n	80089c0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f002 f896 	bl	800aaec <vTaskDelay>
    }
  }

  return (stat);
 80089c0:	697b      	ldr	r3, [r7, #20]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3718      	adds	r7, #24
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	20008f98 	.word	0x20008f98

080089d0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b08a      	sub	sp, #40	; 0x28
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80089d8:	2300      	movs	r3, #0
 80089da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089dc:	f3ef 8305 	mrs	r3, IPSR
 80089e0:	613b      	str	r3, [r7, #16]
  return(result);
 80089e2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f040 8085 	bne.w	8008af4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089ea:	f3ef 8310 	mrs	r3, PRIMASK
 80089ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d105      	bne.n	8008a02 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80089f6:	f3ef 8311 	mrs	r3, BASEPRI
 80089fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d003      	beq.n	8008a0a <osMutexNew+0x3a>
 8008a02:	4b3f      	ldr	r3, [pc, #252]	; (8008b00 <osMutexNew+0x130>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d074      	beq.n	8008af4 <osMutexNew+0x124>
    if (attr != NULL) {
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d003      	beq.n	8008a18 <osMutexNew+0x48>
      type = attr->attr_bits;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	623b      	str	r3, [r7, #32]
 8008a16:	e001      	b.n	8008a1c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008a1c:	6a3b      	ldr	r3, [r7, #32]
 8008a1e:	f003 0301 	and.w	r3, r3, #1
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d002      	beq.n	8008a2c <osMutexNew+0x5c>
      rmtx = 1U;
 8008a26:	2301      	movs	r3, #1
 8008a28:	61fb      	str	r3, [r7, #28]
 8008a2a:	e001      	b.n	8008a30 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	f003 0308 	and.w	r3, r3, #8
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d15c      	bne.n	8008af4 <osMutexNew+0x124>
      mem = -1;
 8008a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a3e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d015      	beq.n	8008a72 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d006      	beq.n	8008a5c <osMutexNew+0x8c>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	2b4f      	cmp	r3, #79	; 0x4f
 8008a54:	d902      	bls.n	8008a5c <osMutexNew+0x8c>
          mem = 1;
 8008a56:	2301      	movs	r3, #1
 8008a58:	61bb      	str	r3, [r7, #24]
 8008a5a:	e00c      	b.n	8008a76 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d108      	bne.n	8008a76 <osMutexNew+0xa6>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d104      	bne.n	8008a76 <osMutexNew+0xa6>
            mem = 0;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	61bb      	str	r3, [r7, #24]
 8008a70:	e001      	b.n	8008a76 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8008a72:	2300      	movs	r3, #0
 8008a74:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d112      	bne.n	8008aa2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d007      	beq.n	8008a92 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	4619      	mov	r1, r3
 8008a88:	2004      	movs	r0, #4
 8008a8a:	f000 feb8 	bl	80097fe <xQueueCreateMutexStatic>
 8008a8e:	6278      	str	r0, [r7, #36]	; 0x24
 8008a90:	e016      	b.n	8008ac0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	4619      	mov	r1, r3
 8008a98:	2001      	movs	r0, #1
 8008a9a:	f000 feb0 	bl	80097fe <xQueueCreateMutexStatic>
 8008a9e:	6278      	str	r0, [r7, #36]	; 0x24
 8008aa0:	e00e      	b.n	8008ac0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d10b      	bne.n	8008ac0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d004      	beq.n	8008ab8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8008aae:	2004      	movs	r0, #4
 8008ab0:	f000 fe8d 	bl	80097ce <xQueueCreateMutex>
 8008ab4:	6278      	str	r0, [r7, #36]	; 0x24
 8008ab6:	e003      	b.n	8008ac0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8008ab8:	2001      	movs	r0, #1
 8008aba:	f000 fe88 	bl	80097ce <xQueueCreateMutex>
 8008abe:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00c      	beq.n	8008ae0 <osMutexNew+0x110>
        if (attr != NULL) {
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d003      	beq.n	8008ad4 <osMutexNew+0x104>
          name = attr->name;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	617b      	str	r3, [r7, #20]
 8008ad2:	e001      	b.n	8008ad8 <osMutexNew+0x108>
        } else {
          name = NULL;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8008ad8:	6979      	ldr	r1, [r7, #20]
 8008ada:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008adc:	f001 fdd4 	bl	800a688 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d006      	beq.n	8008af4 <osMutexNew+0x124>
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d003      	beq.n	8008af4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aee:	f043 0301 	orr.w	r3, r3, #1
 8008af2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3728      	adds	r7, #40	; 0x28
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	20008f98 	.word	0x20008f98

08008b04 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b088      	sub	sp, #32
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f023 0301 	bic.w	r3, r3, #1
 8008b14:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f003 0301 	and.w	r3, r3, #1
 8008b1c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b22:	f3ef 8305 	mrs	r3, IPSR
 8008b26:	613b      	str	r3, [r7, #16]
  return(result);
 8008b28:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d10f      	bne.n	8008b4e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8008b32:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d105      	bne.n	8008b46 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b3a:	f3ef 8311 	mrs	r3, BASEPRI
 8008b3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d007      	beq.n	8008b56 <osMutexAcquire+0x52>
 8008b46:	4b1d      	ldr	r3, [pc, #116]	; (8008bbc <osMutexAcquire+0xb8>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d103      	bne.n	8008b56 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8008b4e:	f06f 0305 	mvn.w	r3, #5
 8008b52:	61fb      	str	r3, [r7, #28]
 8008b54:	e02c      	b.n	8008bb0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d103      	bne.n	8008b64 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8008b5c:	f06f 0303 	mvn.w	r3, #3
 8008b60:	61fb      	str	r3, [r7, #28]
 8008b62:	e025      	b.n	8008bb0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d011      	beq.n	8008b8e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008b6a:	6839      	ldr	r1, [r7, #0]
 8008b6c:	69b8      	ldr	r0, [r7, #24]
 8008b6e:	f000 fe97 	bl	80098a0 <xQueueTakeMutexRecursive>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d01b      	beq.n	8008bb0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d003      	beq.n	8008b86 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8008b7e:	f06f 0301 	mvn.w	r3, #1
 8008b82:	61fb      	str	r3, [r7, #28]
 8008b84:	e014      	b.n	8008bb0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008b86:	f06f 0302 	mvn.w	r3, #2
 8008b8a:	61fb      	str	r3, [r7, #28]
 8008b8c:	e010      	b.n	8008bb0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008b8e:	6839      	ldr	r1, [r7, #0]
 8008b90:	69b8      	ldr	r0, [r7, #24]
 8008b92:	f001 fa51 	bl	800a038 <xQueueSemaphoreTake>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d009      	beq.n	8008bb0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d003      	beq.n	8008baa <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8008ba2:	f06f 0301 	mvn.w	r3, #1
 8008ba6:	61fb      	str	r3, [r7, #28]
 8008ba8:	e002      	b.n	8008bb0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008baa:	f06f 0302 	mvn.w	r3, #2
 8008bae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008bb0:	69fb      	ldr	r3, [r7, #28]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3720      	adds	r7, #32
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	20008f98 	.word	0x20008f98

08008bc0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b088      	sub	sp, #32
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f023 0301 	bic.w	r3, r3, #1
 8008bce:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f003 0301 	and.w	r3, r3, #1
 8008bd6:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bdc:	f3ef 8305 	mrs	r3, IPSR
 8008be0:	613b      	str	r3, [r7, #16]
  return(result);
 8008be2:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d10f      	bne.n	8008c08 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008be8:	f3ef 8310 	mrs	r3, PRIMASK
 8008bec:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d105      	bne.n	8008c00 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008bf4:	f3ef 8311 	mrs	r3, BASEPRI
 8008bf8:	60bb      	str	r3, [r7, #8]
  return(result);
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d007      	beq.n	8008c10 <osMutexRelease+0x50>
 8008c00:	4b16      	ldr	r3, [pc, #88]	; (8008c5c <osMutexRelease+0x9c>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d103      	bne.n	8008c10 <osMutexRelease+0x50>
    stat = osErrorISR;
 8008c08:	f06f 0305 	mvn.w	r3, #5
 8008c0c:	61fb      	str	r3, [r7, #28]
 8008c0e:	e01f      	b.n	8008c50 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d103      	bne.n	8008c1e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8008c16:	f06f 0303 	mvn.w	r3, #3
 8008c1a:	61fb      	str	r3, [r7, #28]
 8008c1c:	e018      	b.n	8008c50 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d009      	beq.n	8008c38 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008c24:	69b8      	ldr	r0, [r7, #24]
 8008c26:	f000 fe05 	bl	8009834 <xQueueGiveMutexRecursive>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d00f      	beq.n	8008c50 <osMutexRelease+0x90>
        stat = osErrorResource;
 8008c30:	f06f 0302 	mvn.w	r3, #2
 8008c34:	61fb      	str	r3, [r7, #28]
 8008c36:	e00b      	b.n	8008c50 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008c38:	2300      	movs	r3, #0
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	69b8      	ldr	r0, [r7, #24]
 8008c40:	f000 fed8 	bl	80099f4 <xQueueGenericSend>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d002      	beq.n	8008c50 <osMutexRelease+0x90>
        stat = osErrorResource;
 8008c4a:	f06f 0302 	mvn.w	r3, #2
 8008c4e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8008c50:	69fb      	ldr	r3, [r7, #28]
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3720      	adds	r7, #32
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	20008f98 	.word	0x20008f98

08008c60 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b08c      	sub	sp, #48	; 0x30
 8008c64:	af02      	add	r7, sp, #8
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c70:	f3ef 8305 	mrs	r3, IPSR
 8008c74:	61bb      	str	r3, [r7, #24]
  return(result);
 8008c76:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f040 8086 	bne.w	8008d8a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8008c82:	617b      	str	r3, [r7, #20]
  return(result);
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d105      	bne.n	8008c96 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c8a:	f3ef 8311 	mrs	r3, BASEPRI
 8008c8e:	613b      	str	r3, [r7, #16]
  return(result);
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d003      	beq.n	8008c9e <osSemaphoreNew+0x3e>
 8008c96:	4b3f      	ldr	r3, [pc, #252]	; (8008d94 <osSemaphoreNew+0x134>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d075      	beq.n	8008d8a <osSemaphoreNew+0x12a>
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d072      	beq.n	8008d8a <osSemaphoreNew+0x12a>
 8008ca4:	68ba      	ldr	r2, [r7, #8]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d86e      	bhi.n	8008d8a <osSemaphoreNew+0x12a>
    mem = -1;
 8008cac:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d015      	beq.n	8008ce4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d006      	beq.n	8008cce <osSemaphoreNew+0x6e>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	2b4f      	cmp	r3, #79	; 0x4f
 8008cc6:	d902      	bls.n	8008cce <osSemaphoreNew+0x6e>
        mem = 1;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	623b      	str	r3, [r7, #32]
 8008ccc:	e00c      	b.n	8008ce8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d108      	bne.n	8008ce8 <osSemaphoreNew+0x88>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d104      	bne.n	8008ce8 <osSemaphoreNew+0x88>
          mem = 0;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	623b      	str	r3, [r7, #32]
 8008ce2:	e001      	b.n	8008ce8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8008ce8:	6a3b      	ldr	r3, [r7, #32]
 8008cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cee:	d04c      	beq.n	8008d8a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d128      	bne.n	8008d48 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8008cf6:	6a3b      	ldr	r3, [r7, #32]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d10a      	bne.n	8008d12 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	2203      	movs	r2, #3
 8008d02:	9200      	str	r2, [sp, #0]
 8008d04:	2200      	movs	r2, #0
 8008d06:	2100      	movs	r1, #0
 8008d08:	2001      	movs	r0, #1
 8008d0a:	f000 fc5f 	bl	80095cc <xQueueGenericCreateStatic>
 8008d0e:	6278      	str	r0, [r7, #36]	; 0x24
 8008d10:	e005      	b.n	8008d1e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8008d12:	2203      	movs	r2, #3
 8008d14:	2100      	movs	r1, #0
 8008d16:	2001      	movs	r0, #1
 8008d18:	f000 fcda 	bl	80096d0 <xQueueGenericCreate>
 8008d1c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d022      	beq.n	8008d6a <osSemaphoreNew+0x10a>
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d01f      	beq.n	8008d6a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	2100      	movs	r1, #0
 8008d30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d32:	f000 fe5f 	bl	80099f4 <xQueueGenericSend>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d016      	beq.n	8008d6a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8008d3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d3e:	f001 fb55 	bl	800a3ec <vQueueDelete>
            hSemaphore = NULL;
 8008d42:	2300      	movs	r3, #0
 8008d44:	627b      	str	r3, [r7, #36]	; 0x24
 8008d46:	e010      	b.n	8008d6a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8008d48:	6a3b      	ldr	r3, [r7, #32]
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d108      	bne.n	8008d60 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	461a      	mov	r2, r3
 8008d54:	68b9      	ldr	r1, [r7, #8]
 8008d56:	68f8      	ldr	r0, [r7, #12]
 8008d58:	f000 fdda 	bl	8009910 <xQueueCreateCountingSemaphoreStatic>
 8008d5c:	6278      	str	r0, [r7, #36]	; 0x24
 8008d5e:	e004      	b.n	8008d6a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008d60:	68b9      	ldr	r1, [r7, #8]
 8008d62:	68f8      	ldr	r0, [r7, #12]
 8008d64:	f000 fe0f 	bl	8009986 <xQueueCreateCountingSemaphore>
 8008d68:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00c      	beq.n	8008d8a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d003      	beq.n	8008d7e <osSemaphoreNew+0x11e>
          name = attr->name;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	61fb      	str	r3, [r7, #28]
 8008d7c:	e001      	b.n	8008d82 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008d82:	69f9      	ldr	r1, [r7, #28]
 8008d84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d86:	f001 fc7f 	bl	800a688 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3728      	adds	r7, #40	; 0x28
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	20008f98 	.word	0x20008f98

08008d98 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b088      	sub	sp, #32
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008da6:	2300      	movs	r3, #0
 8008da8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d103      	bne.n	8008db8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008db0:	f06f 0303 	mvn.w	r3, #3
 8008db4:	61fb      	str	r3, [r7, #28]
 8008db6:	e04b      	b.n	8008e50 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008db8:	f3ef 8305 	mrs	r3, IPSR
 8008dbc:	617b      	str	r3, [r7, #20]
  return(result);
 8008dbe:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d10f      	bne.n	8008de4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dc4:	f3ef 8310 	mrs	r3, PRIMASK
 8008dc8:	613b      	str	r3, [r7, #16]
  return(result);
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d105      	bne.n	8008ddc <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008dd0:	f3ef 8311 	mrs	r3, BASEPRI
 8008dd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d026      	beq.n	8008e2a <osSemaphoreAcquire+0x92>
 8008ddc:	4b1f      	ldr	r3, [pc, #124]	; (8008e5c <osSemaphoreAcquire+0xc4>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	d122      	bne.n	8008e2a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d003      	beq.n	8008df2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8008dea:	f06f 0303 	mvn.w	r3, #3
 8008dee:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008df0:	e02d      	b.n	8008e4e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8008df2:	2300      	movs	r3, #0
 8008df4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008df6:	f107 0308 	add.w	r3, r7, #8
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	2100      	movs	r1, #0
 8008dfe:	69b8      	ldr	r0, [r7, #24]
 8008e00:	f001 fa2e 	bl	800a260 <xQueueReceiveFromISR>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d003      	beq.n	8008e12 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8008e0a:	f06f 0302 	mvn.w	r3, #2
 8008e0e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008e10:	e01d      	b.n	8008e4e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d01a      	beq.n	8008e4e <osSemaphoreAcquire+0xb6>
 8008e18:	4b11      	ldr	r3, [pc, #68]	; (8008e60 <osSemaphoreAcquire+0xc8>)
 8008e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e1e:	601a      	str	r2, [r3, #0]
 8008e20:	f3bf 8f4f 	dsb	sy
 8008e24:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8008e28:	e011      	b.n	8008e4e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008e2a:	6839      	ldr	r1, [r7, #0]
 8008e2c:	69b8      	ldr	r0, [r7, #24]
 8008e2e:	f001 f903 	bl	800a038 <xQueueSemaphoreTake>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d00b      	beq.n	8008e50 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d003      	beq.n	8008e46 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8008e3e:	f06f 0301 	mvn.w	r3, #1
 8008e42:	61fb      	str	r3, [r7, #28]
 8008e44:	e004      	b.n	8008e50 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8008e46:	f06f 0302 	mvn.w	r3, #2
 8008e4a:	61fb      	str	r3, [r7, #28]
 8008e4c:	e000      	b.n	8008e50 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8008e4e:	bf00      	nop
      }
    }
  }

  return (stat);
 8008e50:	69fb      	ldr	r3, [r7, #28]
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3720      	adds	r7, #32
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	20008f98 	.word	0x20008f98
 8008e60:	e000ed04 	.word	0xe000ed04

08008e64 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b088      	sub	sp, #32
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008e70:	2300      	movs	r3, #0
 8008e72:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d103      	bne.n	8008e82 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008e7a:	f06f 0303 	mvn.w	r3, #3
 8008e7e:	61fb      	str	r3, [r7, #28]
 8008e80:	e03e      	b.n	8008f00 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e82:	f3ef 8305 	mrs	r3, IPSR
 8008e86:	617b      	str	r3, [r7, #20]
  return(result);
 8008e88:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d10f      	bne.n	8008eae <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8008e92:	613b      	str	r3, [r7, #16]
  return(result);
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d105      	bne.n	8008ea6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e9a:	f3ef 8311 	mrs	r3, BASEPRI
 8008e9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d01e      	beq.n	8008ee4 <osSemaphoreRelease+0x80>
 8008ea6:	4b19      	ldr	r3, [pc, #100]	; (8008f0c <osSemaphoreRelease+0xa8>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d11a      	bne.n	8008ee4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008eb2:	f107 0308 	add.w	r3, r7, #8
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	69b8      	ldr	r0, [r7, #24]
 8008eba:	f000 ff41 	bl	8009d40 <xQueueGiveFromISR>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d003      	beq.n	8008ecc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8008ec4:	f06f 0302 	mvn.w	r3, #2
 8008ec8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008eca:	e018      	b.n	8008efe <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d015      	beq.n	8008efe <osSemaphoreRelease+0x9a>
 8008ed2:	4b0f      	ldr	r3, [pc, #60]	; (8008f10 <osSemaphoreRelease+0xac>)
 8008ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ed8:	601a      	str	r2, [r3, #0]
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008ee2:	e00c      	b.n	8008efe <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	2100      	movs	r1, #0
 8008eea:	69b8      	ldr	r0, [r7, #24]
 8008eec:	f000 fd82 	bl	80099f4 <xQueueGenericSend>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d004      	beq.n	8008f00 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8008ef6:	f06f 0302 	mvn.w	r3, #2
 8008efa:	61fb      	str	r3, [r7, #28]
 8008efc:	e000      	b.n	8008f00 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008efe:	bf00      	nop
    }
  }

  return (stat);
 8008f00:	69fb      	ldr	r3, [r7, #28]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3720      	adds	r7, #32
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	20008f98 	.word	0x20008f98
 8008f10:	e000ed04 	.word	0xe000ed04

08008f14 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b088      	sub	sp, #32
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f20:	f3ef 8305 	mrs	r3, IPSR
 8008f24:	617b      	str	r3, [r7, #20]
  return(result);
 8008f26:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d10f      	bne.n	8008f4c <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8008f30:	613b      	str	r3, [r7, #16]
  return(result);
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d105      	bne.n	8008f44 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f38:	f3ef 8311 	mrs	r3, BASEPRI
 8008f3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d007      	beq.n	8008f54 <osSemaphoreDelete+0x40>
 8008f44:	4b0d      	ldr	r3, [pc, #52]	; (8008f7c <osSemaphoreDelete+0x68>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d103      	bne.n	8008f54 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8008f4c:	f06f 0305 	mvn.w	r3, #5
 8008f50:	61fb      	str	r3, [r7, #28]
 8008f52:	e00e      	b.n	8008f72 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d103      	bne.n	8008f62 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8008f5a:	f06f 0303 	mvn.w	r3, #3
 8008f5e:	61fb      	str	r3, [r7, #28]
 8008f60:	e007      	b.n	8008f72 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8008f62:	69b8      	ldr	r0, [r7, #24]
 8008f64:	f001 fbba 	bl	800a6dc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8008f6c:	69b8      	ldr	r0, [r7, #24]
 8008f6e:	f001 fa3d 	bl	800a3ec <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8008f72:	69fb      	ldr	r3, [r7, #28]
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3720      	adds	r7, #32
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	20008f98 	.word	0x20008f98

08008f80 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b08c      	sub	sp, #48	; 0x30
 8008f84:	af02      	add	r7, sp, #8
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f90:	f3ef 8305 	mrs	r3, IPSR
 8008f94:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f96:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d16f      	bne.n	800907c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8008fa0:	617b      	str	r3, [r7, #20]
  return(result);
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d105      	bne.n	8008fb4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008fa8:	f3ef 8311 	mrs	r3, BASEPRI
 8008fac:	613b      	str	r3, [r7, #16]
  return(result);
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d003      	beq.n	8008fbc <osMessageQueueNew+0x3c>
 8008fb4:	4b34      	ldr	r3, [pc, #208]	; (8009088 <osMessageQueueNew+0x108>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d05f      	beq.n	800907c <osMessageQueueNew+0xfc>
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d05c      	beq.n	800907c <osMessageQueueNew+0xfc>
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d059      	beq.n	800907c <osMessageQueueNew+0xfc>
    mem = -1;
 8008fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8008fcc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d029      	beq.n	8009028 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d012      	beq.n	8009002 <osMessageQueueNew+0x82>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	2b4f      	cmp	r3, #79	; 0x4f
 8008fe2:	d90e      	bls.n	8009002 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00a      	beq.n	8009002 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	695a      	ldr	r2, [r3, #20]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	68b9      	ldr	r1, [r7, #8]
 8008ff4:	fb01 f303 	mul.w	r3, r1, r3
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d302      	bcc.n	8009002 <osMessageQueueNew+0x82>
        mem = 1;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	623b      	str	r3, [r7, #32]
 8009000:	e014      	b.n	800902c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d110      	bne.n	800902c <osMessageQueueNew+0xac>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10c      	bne.n	800902c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009016:	2b00      	cmp	r3, #0
 8009018:	d108      	bne.n	800902c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	695b      	ldr	r3, [r3, #20]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d104      	bne.n	800902c <osMessageQueueNew+0xac>
          mem = 0;
 8009022:	2300      	movs	r3, #0
 8009024:	623b      	str	r3, [r7, #32]
 8009026:	e001      	b.n	800902c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8009028:	2300      	movs	r3, #0
 800902a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800902c:	6a3b      	ldr	r3, [r7, #32]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d10b      	bne.n	800904a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	691a      	ldr	r2, [r3, #16]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	2100      	movs	r1, #0
 800903c:	9100      	str	r1, [sp, #0]
 800903e:	68b9      	ldr	r1, [r7, #8]
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f000 fac3 	bl	80095cc <xQueueGenericCreateStatic>
 8009046:	6278      	str	r0, [r7, #36]	; 0x24
 8009048:	e008      	b.n	800905c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800904a:	6a3b      	ldr	r3, [r7, #32]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d105      	bne.n	800905c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8009050:	2200      	movs	r2, #0
 8009052:	68b9      	ldr	r1, [r7, #8]
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	f000 fb3b 	bl	80096d0 <xQueueGenericCreate>
 800905a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	2b00      	cmp	r3, #0
 8009060:	d00c      	beq.n	800907c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d003      	beq.n	8009070 <osMessageQueueNew+0xf0>
        name = attr->name;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	61fb      	str	r3, [r7, #28]
 800906e:	e001      	b.n	8009074 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8009070:	2300      	movs	r3, #0
 8009072:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8009074:	69f9      	ldr	r1, [r7, #28]
 8009076:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009078:	f001 fb06 	bl	800a688 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800907e:	4618      	mov	r0, r3
 8009080:	3728      	adds	r7, #40	; 0x28
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	20008f98 	.word	0x20008f98

0800908c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800908c:	b580      	push	{r7, lr}
 800908e:	b08a      	sub	sp, #40	; 0x28
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	603b      	str	r3, [r7, #0]
 8009098:	4613      	mov	r3, r2
 800909a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80090a0:	2300      	movs	r3, #0
 80090a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090a4:	f3ef 8305 	mrs	r3, IPSR
 80090a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80090aa:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d10f      	bne.n	80090d0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090b0:	f3ef 8310 	mrs	r3, PRIMASK
 80090b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d105      	bne.n	80090c8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80090bc:	f3ef 8311 	mrs	r3, BASEPRI
 80090c0:	617b      	str	r3, [r7, #20]
  return(result);
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d02c      	beq.n	8009122 <osMessageQueuePut+0x96>
 80090c8:	4b28      	ldr	r3, [pc, #160]	; (800916c <osMessageQueuePut+0xe0>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d128      	bne.n	8009122 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80090d0:	6a3b      	ldr	r3, [r7, #32]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d005      	beq.n	80090e2 <osMessageQueuePut+0x56>
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d002      	beq.n	80090e2 <osMessageQueuePut+0x56>
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d003      	beq.n	80090ea <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80090e2:	f06f 0303 	mvn.w	r3, #3
 80090e6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80090e8:	e039      	b.n	800915e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80090ea:	2300      	movs	r3, #0
 80090ec:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80090ee:	f107 0210 	add.w	r2, r7, #16
 80090f2:	2300      	movs	r3, #0
 80090f4:	68b9      	ldr	r1, [r7, #8]
 80090f6:	6a38      	ldr	r0, [r7, #32]
 80090f8:	f000 fd82 	bl	8009c00 <xQueueGenericSendFromISR>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d003      	beq.n	800910a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8009102:	f06f 0302 	mvn.w	r3, #2
 8009106:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009108:	e029      	b.n	800915e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d026      	beq.n	800915e <osMessageQueuePut+0xd2>
 8009110:	4b17      	ldr	r3, [pc, #92]	; (8009170 <osMessageQueuePut+0xe4>)
 8009112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009116:	601a      	str	r2, [r3, #0]
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009120:	e01d      	b.n	800915e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009122:	6a3b      	ldr	r3, [r7, #32]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d002      	beq.n	800912e <osMessageQueuePut+0xa2>
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d103      	bne.n	8009136 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800912e:	f06f 0303 	mvn.w	r3, #3
 8009132:	627b      	str	r3, [r7, #36]	; 0x24
 8009134:	e014      	b.n	8009160 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009136:	2300      	movs	r3, #0
 8009138:	683a      	ldr	r2, [r7, #0]
 800913a:	68b9      	ldr	r1, [r7, #8]
 800913c:	6a38      	ldr	r0, [r7, #32]
 800913e:	f000 fc59 	bl	80099f4 <xQueueGenericSend>
 8009142:	4603      	mov	r3, r0
 8009144:	2b01      	cmp	r3, #1
 8009146:	d00b      	beq.n	8009160 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d003      	beq.n	8009156 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800914e:	f06f 0301 	mvn.w	r3, #1
 8009152:	627b      	str	r3, [r7, #36]	; 0x24
 8009154:	e004      	b.n	8009160 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8009156:	f06f 0302 	mvn.w	r3, #2
 800915a:	627b      	str	r3, [r7, #36]	; 0x24
 800915c:	e000      	b.n	8009160 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800915e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009162:	4618      	mov	r0, r3
 8009164:	3728      	adds	r7, #40	; 0x28
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	20008f98 	.word	0x20008f98
 8009170:	e000ed04 	.word	0xe000ed04

08009174 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009174:	b580      	push	{r7, lr}
 8009176:	b08a      	sub	sp, #40	; 0x28
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
 8009180:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009186:	2300      	movs	r3, #0
 8009188:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800918a:	f3ef 8305 	mrs	r3, IPSR
 800918e:	61fb      	str	r3, [r7, #28]
  return(result);
 8009190:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009192:	2b00      	cmp	r3, #0
 8009194:	d10f      	bne.n	80091b6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009196:	f3ef 8310 	mrs	r3, PRIMASK
 800919a:	61bb      	str	r3, [r7, #24]
  return(result);
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d105      	bne.n	80091ae <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80091a2:	f3ef 8311 	mrs	r3, BASEPRI
 80091a6:	617b      	str	r3, [r7, #20]
  return(result);
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d02c      	beq.n	8009208 <osMessageQueueGet+0x94>
 80091ae:	4b28      	ldr	r3, [pc, #160]	; (8009250 <osMessageQueueGet+0xdc>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d128      	bne.n	8009208 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80091b6:	6a3b      	ldr	r3, [r7, #32]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d005      	beq.n	80091c8 <osMessageQueueGet+0x54>
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d002      	beq.n	80091c8 <osMessageQueueGet+0x54>
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d003      	beq.n	80091d0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80091c8:	f06f 0303 	mvn.w	r3, #3
 80091cc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80091ce:	e038      	b.n	8009242 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80091d0:	2300      	movs	r3, #0
 80091d2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80091d4:	f107 0310 	add.w	r3, r7, #16
 80091d8:	461a      	mov	r2, r3
 80091da:	68b9      	ldr	r1, [r7, #8]
 80091dc:	6a38      	ldr	r0, [r7, #32]
 80091de:	f001 f83f 	bl	800a260 <xQueueReceiveFromISR>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d003      	beq.n	80091f0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80091e8:	f06f 0302 	mvn.w	r3, #2
 80091ec:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80091ee:	e028      	b.n	8009242 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d025      	beq.n	8009242 <osMessageQueueGet+0xce>
 80091f6:	4b17      	ldr	r3, [pc, #92]	; (8009254 <osMessageQueueGet+0xe0>)
 80091f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091fc:	601a      	str	r2, [r3, #0]
 80091fe:	f3bf 8f4f 	dsb	sy
 8009202:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009206:	e01c      	b.n	8009242 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009208:	6a3b      	ldr	r3, [r7, #32]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d002      	beq.n	8009214 <osMessageQueueGet+0xa0>
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d103      	bne.n	800921c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8009214:	f06f 0303 	mvn.w	r3, #3
 8009218:	627b      	str	r3, [r7, #36]	; 0x24
 800921a:	e013      	b.n	8009244 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800921c:	683a      	ldr	r2, [r7, #0]
 800921e:	68b9      	ldr	r1, [r7, #8]
 8009220:	6a38      	ldr	r0, [r7, #32]
 8009222:	f000 fe23 	bl	8009e6c <xQueueReceive>
 8009226:	4603      	mov	r3, r0
 8009228:	2b01      	cmp	r3, #1
 800922a:	d00b      	beq.n	8009244 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d003      	beq.n	800923a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8009232:	f06f 0301 	mvn.w	r3, #1
 8009236:	627b      	str	r3, [r7, #36]	; 0x24
 8009238:	e004      	b.n	8009244 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800923a:	f06f 0302 	mvn.w	r3, #2
 800923e:	627b      	str	r3, [r7, #36]	; 0x24
 8009240:	e000      	b.n	8009244 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009242:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009246:	4618      	mov	r0, r3
 8009248:	3728      	adds	r7, #40	; 0x28
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	20008f98 	.word	0x20008f98
 8009254:	e000ed04 	.word	0xe000ed04

08009258 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8009258:	b580      	push	{r7, lr}
 800925a:	b088      	sub	sp, #32
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d102      	bne.n	8009270 <osMessageQueueGetCount+0x18>
    count = 0U;
 800926a:	2300      	movs	r3, #0
 800926c:	61fb      	str	r3, [r7, #28]
 800926e:	e01e      	b.n	80092ae <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009270:	f3ef 8305 	mrs	r3, IPSR
 8009274:	617b      	str	r3, [r7, #20]
  return(result);
 8009276:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10f      	bne.n	800929c <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800927c:	f3ef 8310 	mrs	r3, PRIMASK
 8009280:	613b      	str	r3, [r7, #16]
  return(result);
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d105      	bne.n	8009294 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009288:	f3ef 8311 	mrs	r3, BASEPRI
 800928c:	60fb      	str	r3, [r7, #12]
  return(result);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d008      	beq.n	80092a6 <osMessageQueueGetCount+0x4e>
 8009294:	4b08      	ldr	r3, [pc, #32]	; (80092b8 <osMessageQueueGetCount+0x60>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2b02      	cmp	r3, #2
 800929a:	d104      	bne.n	80092a6 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800929c:	69b8      	ldr	r0, [r7, #24]
 800929e:	f001 f885 	bl	800a3ac <uxQueueMessagesWaitingFromISR>
 80092a2:	61f8      	str	r0, [r7, #28]
 80092a4:	e003      	b.n	80092ae <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80092a6:	69b8      	ldr	r0, [r7, #24]
 80092a8:	f001 f860 	bl	800a36c <uxQueueMessagesWaiting>
 80092ac:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 80092ae:	69fb      	ldr	r3, [r7, #28]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3720      	adds	r7, #32
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	20008f98 	.word	0x20008f98

080092bc <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 80092bc:	b580      	push	{r7, lr}
 80092be:	b088      	sub	sp, #32
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092c8:	f3ef 8305 	mrs	r3, IPSR
 80092cc:	617b      	str	r3, [r7, #20]
  return(result);
 80092ce:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d10f      	bne.n	80092f4 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092d4:	f3ef 8310 	mrs	r3, PRIMASK
 80092d8:	613b      	str	r3, [r7, #16]
  return(result);
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d105      	bne.n	80092ec <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80092e0:	f3ef 8311 	mrs	r3, BASEPRI
 80092e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d007      	beq.n	80092fc <osMessageQueueDelete+0x40>
 80092ec:	4b0d      	ldr	r3, [pc, #52]	; (8009324 <osMessageQueueDelete+0x68>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	d103      	bne.n	80092fc <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 80092f4:	f06f 0305 	mvn.w	r3, #5
 80092f8:	61fb      	str	r3, [r7, #28]
 80092fa:	e00e      	b.n	800931a <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d103      	bne.n	800930a <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 8009302:	f06f 0303 	mvn.w	r3, #3
 8009306:	61fb      	str	r3, [r7, #28]
 8009308:	e007      	b.n	800931a <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800930a:	69b8      	ldr	r0, [r7, #24]
 800930c:	f001 f9e6 	bl	800a6dc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8009310:	2300      	movs	r3, #0
 8009312:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8009314:	69b8      	ldr	r0, [r7, #24]
 8009316:	f001 f869 	bl	800a3ec <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800931a:	69fb      	ldr	r3, [r7, #28]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3720      	adds	r7, #32
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	20008f98 	.word	0x20008f98

08009328 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	4a07      	ldr	r2, [pc, #28]	; (8009354 <vApplicationGetIdleTaskMemory+0x2c>)
 8009338:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	4a06      	ldr	r2, [pc, #24]	; (8009358 <vApplicationGetIdleTaskMemory+0x30>)
 800933e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2280      	movs	r2, #128	; 0x80
 8009344:	601a      	str	r2, [r3, #0]
}
 8009346:	bf00      	nop
 8009348:	3714      	adds	r7, #20
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	20008f9c 	.word	0x20008f9c
 8009358:	20008ff8 	.word	0x20008ff8

0800935c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	4a07      	ldr	r2, [pc, #28]	; (8009388 <vApplicationGetTimerTaskMemory+0x2c>)
 800936c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	4a06      	ldr	r2, [pc, #24]	; (800938c <vApplicationGetTimerTaskMemory+0x30>)
 8009372:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800937a:	601a      	str	r2, [r3, #0]
}
 800937c:	bf00      	nop
 800937e:	3714      	adds	r7, #20
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr
 8009388:	200091f8 	.word	0x200091f8
 800938c:	20009254 	.word	0x20009254

08009390 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f103 0208 	add.w	r2, r3, #8
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f04f 32ff 	mov.w	r2, #4294967295
 80093a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f103 0208 	add.w	r2, r3, #8
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f103 0208 	add.w	r2, r3, #8
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80093c4:	bf00      	nop
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80093de:	bf00      	nop
 80093e0:	370c      	adds	r7, #12
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr

080093ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80093ea:	b480      	push	{r7}
 80093ec:	b085      	sub	sp, #20
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
 80093f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	689a      	ldr	r2, [r3, #8]
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	1c5a      	adds	r2, r3, #1
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	601a      	str	r2, [r3, #0]
}
 8009426:	bf00      	nop
 8009428:	3714      	adds	r7, #20
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr

08009432 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009432:	b480      	push	{r7}
 8009434:	b085      	sub	sp, #20
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009448:	d103      	bne.n	8009452 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	60fb      	str	r3, [r7, #12]
 8009450:	e00c      	b.n	800946c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	3308      	adds	r3, #8
 8009456:	60fb      	str	r3, [r7, #12]
 8009458:	e002      	b.n	8009460 <vListInsert+0x2e>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	60fb      	str	r3, [r7, #12]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	429a      	cmp	r2, r3
 800946a:	d2f6      	bcs.n	800945a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	683a      	ldr	r2, [r7, #0]
 800947a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	683a      	ldr	r2, [r7, #0]
 8009486:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	1c5a      	adds	r2, r3, #1
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	601a      	str	r2, [r3, #0]
}
 8009498:	bf00      	nop
 800949a:	3714      	adds	r7, #20
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	691b      	ldr	r3, [r3, #16]
 80094b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	6892      	ldr	r2, [r2, #8]
 80094ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	6852      	ldr	r2, [r2, #4]
 80094c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d103      	bne.n	80094d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	689a      	ldr	r2, [r3, #8]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	1e5a      	subs	r2, r3, #1
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3714      	adds	r7, #20
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10c      	bne.n	8009526 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800950c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009510:	b672      	cpsid	i
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	b662      	cpsie	i
 8009520:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009522:	bf00      	nop
 8009524:	e7fe      	b.n	8009524 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8009526:	f002 fde9 	bl	800c0fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009532:	68f9      	ldr	r1, [r7, #12]
 8009534:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009536:	fb01 f303 	mul.w	r3, r1, r3
 800953a:	441a      	add	r2, r3
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2200      	movs	r2, #0
 8009544:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009556:	3b01      	subs	r3, #1
 8009558:	68f9      	ldr	r1, [r7, #12]
 800955a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800955c:	fb01 f303 	mul.w	r3, r1, r3
 8009560:	441a      	add	r2, r3
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	22ff      	movs	r2, #255	; 0xff
 800956a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	22ff      	movs	r2, #255	; 0xff
 8009572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d114      	bne.n	80095a6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d01a      	beq.n	80095ba <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	3310      	adds	r3, #16
 8009588:	4618      	mov	r0, r3
 800958a:	f001 fd8f 	bl	800b0ac <xTaskRemoveFromEventList>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d012      	beq.n	80095ba <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009594:	4b0c      	ldr	r3, [pc, #48]	; (80095c8 <xQueueGenericReset+0xd0>)
 8009596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800959a:	601a      	str	r2, [r3, #0]
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	f3bf 8f6f 	isb	sy
 80095a4:	e009      	b.n	80095ba <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	3310      	adds	r3, #16
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7ff fef0 	bl	8009390 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	3324      	adds	r3, #36	; 0x24
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7ff feeb 	bl	8009390 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80095ba:	f002 fdd3 	bl	800c164 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80095be:	2301      	movs	r3, #1
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	e000ed04 	.word	0xe000ed04

080095cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b08e      	sub	sp, #56	; 0x38
 80095d0:	af02      	add	r7, sp, #8
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	607a      	str	r2, [r7, #4]
 80095d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d10c      	bne.n	80095fa <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80095e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e4:	b672      	cpsid	i
 80095e6:	f383 8811 	msr	BASEPRI, r3
 80095ea:	f3bf 8f6f 	isb	sy
 80095ee:	f3bf 8f4f 	dsb	sy
 80095f2:	b662      	cpsie	i
 80095f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80095f6:	bf00      	nop
 80095f8:	e7fe      	b.n	80095f8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d10c      	bne.n	800961a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8009600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009604:	b672      	cpsid	i
 8009606:	f383 8811 	msr	BASEPRI, r3
 800960a:	f3bf 8f6f 	isb	sy
 800960e:	f3bf 8f4f 	dsb	sy
 8009612:	b662      	cpsie	i
 8009614:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009616:	bf00      	nop
 8009618:	e7fe      	b.n	8009618 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d002      	beq.n	8009626 <xQueueGenericCreateStatic+0x5a>
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d001      	beq.n	800962a <xQueueGenericCreateStatic+0x5e>
 8009626:	2301      	movs	r3, #1
 8009628:	e000      	b.n	800962c <xQueueGenericCreateStatic+0x60>
 800962a:	2300      	movs	r3, #0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d10c      	bne.n	800964a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8009630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009634:	b672      	cpsid	i
 8009636:	f383 8811 	msr	BASEPRI, r3
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	b662      	cpsie	i
 8009644:	623b      	str	r3, [r7, #32]
}
 8009646:	bf00      	nop
 8009648:	e7fe      	b.n	8009648 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d102      	bne.n	8009656 <xQueueGenericCreateStatic+0x8a>
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d101      	bne.n	800965a <xQueueGenericCreateStatic+0x8e>
 8009656:	2301      	movs	r3, #1
 8009658:	e000      	b.n	800965c <xQueueGenericCreateStatic+0x90>
 800965a:	2300      	movs	r3, #0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d10c      	bne.n	800967a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8009660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009664:	b672      	cpsid	i
 8009666:	f383 8811 	msr	BASEPRI, r3
 800966a:	f3bf 8f6f 	isb	sy
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	b662      	cpsie	i
 8009674:	61fb      	str	r3, [r7, #28]
}
 8009676:	bf00      	nop
 8009678:	e7fe      	b.n	8009678 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800967a:	2350      	movs	r3, #80	; 0x50
 800967c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	2b50      	cmp	r3, #80	; 0x50
 8009682:	d00c      	beq.n	800969e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8009684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009688:	b672      	cpsid	i
 800968a:	f383 8811 	msr	BASEPRI, r3
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f3bf 8f4f 	dsb	sy
 8009696:	b662      	cpsie	i
 8009698:	61bb      	str	r3, [r7, #24]
}
 800969a:	bf00      	nop
 800969c:	e7fe      	b.n	800969c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800969e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80096a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00d      	beq.n	80096c6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80096aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ac:	2201      	movs	r2, #1
 80096ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80096b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80096b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b8:	9300      	str	r3, [sp, #0]
 80096ba:	4613      	mov	r3, r2
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	68b9      	ldr	r1, [r7, #8]
 80096c0:	68f8      	ldr	r0, [r7, #12]
 80096c2:	f000 f847 	bl	8009754 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80096c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3730      	adds	r7, #48	; 0x30
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b08a      	sub	sp, #40	; 0x28
 80096d4:	af02      	add	r7, sp, #8
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	4613      	mov	r3, r2
 80096dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d10c      	bne.n	80096fe <xQueueGenericCreate+0x2e>
	__asm volatile
 80096e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e8:	b672      	cpsid	i
 80096ea:	f383 8811 	msr	BASEPRI, r3
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	b662      	cpsie	i
 80096f8:	613b      	str	r3, [r7, #16]
}
 80096fa:	bf00      	nop
 80096fc:	e7fe      	b.n	80096fc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d102      	bne.n	800970a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009704:	2300      	movs	r3, #0
 8009706:	61fb      	str	r3, [r7, #28]
 8009708:	e004      	b.n	8009714 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	68ba      	ldr	r2, [r7, #8]
 800970e:	fb02 f303 	mul.w	r3, r2, r3
 8009712:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	3350      	adds	r3, #80	; 0x50
 8009718:	4618      	mov	r0, r3
 800971a:	f002 fe1b 	bl	800c354 <pvPortMalloc>
 800971e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d011      	beq.n	800974a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	3350      	adds	r3, #80	; 0x50
 800972e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009730:	69bb      	ldr	r3, [r7, #24]
 8009732:	2200      	movs	r2, #0
 8009734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009738:	79fa      	ldrb	r2, [r7, #7]
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	9300      	str	r3, [sp, #0]
 800973e:	4613      	mov	r3, r2
 8009740:	697a      	ldr	r2, [r7, #20]
 8009742:	68b9      	ldr	r1, [r7, #8]
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f000 f805 	bl	8009754 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800974a:	69bb      	ldr	r3, [r7, #24]
	}
 800974c:	4618      	mov	r0, r3
 800974e:	3720      	adds	r7, #32
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
 8009760:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d103      	bne.n	8009770 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009768:	69bb      	ldr	r3, [r7, #24]
 800976a:	69ba      	ldr	r2, [r7, #24]
 800976c:	601a      	str	r2, [r3, #0]
 800976e:	e002      	b.n	8009776 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	68ba      	ldr	r2, [r7, #8]
 8009780:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009782:	2101      	movs	r1, #1
 8009784:	69b8      	ldr	r0, [r7, #24]
 8009786:	f7ff feb7 	bl	80094f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	78fa      	ldrb	r2, [r7, #3]
 800978e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009792:	bf00      	nop
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800979a:	b580      	push	{r7, lr}
 800979c:	b082      	sub	sp, #8
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00e      	beq.n	80097c6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80097ba:	2300      	movs	r3, #0
 80097bc:	2200      	movs	r2, #0
 80097be:	2100      	movs	r1, #0
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 f917 	bl	80099f4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80097c6:	bf00      	nop
 80097c8:	3708      	adds	r7, #8
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b086      	sub	sp, #24
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	4603      	mov	r3, r0
 80097d6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80097d8:	2301      	movs	r3, #1
 80097da:	617b      	str	r3, [r7, #20]
 80097dc:	2300      	movs	r3, #0
 80097de:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80097e0:	79fb      	ldrb	r3, [r7, #7]
 80097e2:	461a      	mov	r2, r3
 80097e4:	6939      	ldr	r1, [r7, #16]
 80097e6:	6978      	ldr	r0, [r7, #20]
 80097e8:	f7ff ff72 	bl	80096d0 <xQueueGenericCreate>
 80097ec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80097ee:	68f8      	ldr	r0, [r7, #12]
 80097f0:	f7ff ffd3 	bl	800979a <prvInitialiseMutex>

		return xNewQueue;
 80097f4:	68fb      	ldr	r3, [r7, #12]
	}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3718      	adds	r7, #24
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b088      	sub	sp, #32
 8009802:	af02      	add	r7, sp, #8
 8009804:	4603      	mov	r3, r0
 8009806:	6039      	str	r1, [r7, #0]
 8009808:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800980a:	2301      	movs	r3, #1
 800980c:	617b      	str	r3, [r7, #20]
 800980e:	2300      	movs	r3, #0
 8009810:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009812:	79fb      	ldrb	r3, [r7, #7]
 8009814:	9300      	str	r3, [sp, #0]
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	2200      	movs	r2, #0
 800981a:	6939      	ldr	r1, [r7, #16]
 800981c:	6978      	ldr	r0, [r7, #20]
 800981e:	f7ff fed5 	bl	80095cc <xQueueGenericCreateStatic>
 8009822:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f7ff ffb8 	bl	800979a <prvInitialiseMutex>

		return xNewQueue;
 800982a:	68fb      	ldr	r3, [r7, #12]
	}
 800982c:	4618      	mov	r0, r3
 800982e:	3718      	adds	r7, #24
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009834:	b590      	push	{r4, r7, lr}
 8009836:	b087      	sub	sp, #28
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d10c      	bne.n	8009860 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8009846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984a:	b672      	cpsid	i
 800984c:	f383 8811 	msr	BASEPRI, r3
 8009850:	f3bf 8f6f 	isb	sy
 8009854:	f3bf 8f4f 	dsb	sy
 8009858:	b662      	cpsie	i
 800985a:	60fb      	str	r3, [r7, #12]
}
 800985c:	bf00      	nop
 800985e:	e7fe      	b.n	800985e <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	689c      	ldr	r4, [r3, #8]
 8009864:	f001 fde8 	bl	800b438 <xTaskGetCurrentTaskHandle>
 8009868:	4603      	mov	r3, r0
 800986a:	429c      	cmp	r4, r3
 800986c:	d111      	bne.n	8009892 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	1e5a      	subs	r2, r3, #1
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d105      	bne.n	800988c <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009880:	2300      	movs	r3, #0
 8009882:	2200      	movs	r2, #0
 8009884:	2100      	movs	r1, #0
 8009886:	6938      	ldr	r0, [r7, #16]
 8009888:	f000 f8b4 	bl	80099f4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800988c:	2301      	movs	r3, #1
 800988e:	617b      	str	r3, [r7, #20]
 8009890:	e001      	b.n	8009896 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009892:	2300      	movs	r3, #0
 8009894:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009896:	697b      	ldr	r3, [r7, #20]
	}
 8009898:	4618      	mov	r0, r3
 800989a:	371c      	adds	r7, #28
 800989c:	46bd      	mov	sp, r7
 800989e:	bd90      	pop	{r4, r7, pc}

080098a0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80098a0:	b590      	push	{r4, r7, lr}
 80098a2:	b087      	sub	sp, #28
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d10c      	bne.n	80098ce <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 80098b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b8:	b672      	cpsid	i
 80098ba:	f383 8811 	msr	BASEPRI, r3
 80098be:	f3bf 8f6f 	isb	sy
 80098c2:	f3bf 8f4f 	dsb	sy
 80098c6:	b662      	cpsie	i
 80098c8:	60fb      	str	r3, [r7, #12]
}
 80098ca:	bf00      	nop
 80098cc:	e7fe      	b.n	80098cc <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	689c      	ldr	r4, [r3, #8]
 80098d2:	f001 fdb1 	bl	800b438 <xTaskGetCurrentTaskHandle>
 80098d6:	4603      	mov	r3, r0
 80098d8:	429c      	cmp	r4, r3
 80098da:	d107      	bne.n	80098ec <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	1c5a      	adds	r2, r3, #1
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80098e6:	2301      	movs	r3, #1
 80098e8:	617b      	str	r3, [r7, #20]
 80098ea:	e00c      	b.n	8009906 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80098ec:	6839      	ldr	r1, [r7, #0]
 80098ee:	6938      	ldr	r0, [r7, #16]
 80098f0:	f000 fba2 	bl	800a038 <xQueueSemaphoreTake>
 80098f4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d004      	beq.n	8009906 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	1c5a      	adds	r2, r3, #1
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009906:	697b      	ldr	r3, [r7, #20]
	}
 8009908:	4618      	mov	r0, r3
 800990a:	371c      	adds	r7, #28
 800990c:	46bd      	mov	sp, r7
 800990e:	bd90      	pop	{r4, r7, pc}

08009910 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009910:	b580      	push	{r7, lr}
 8009912:	b08a      	sub	sp, #40	; 0x28
 8009914:	af02      	add	r7, sp, #8
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d10c      	bne.n	800993c <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8009922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009926:	b672      	cpsid	i
 8009928:	f383 8811 	msr	BASEPRI, r3
 800992c:	f3bf 8f6f 	isb	sy
 8009930:	f3bf 8f4f 	dsb	sy
 8009934:	b662      	cpsie	i
 8009936:	61bb      	str	r3, [r7, #24]
}
 8009938:	bf00      	nop
 800993a:	e7fe      	b.n	800993a <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800993c:	68ba      	ldr	r2, [r7, #8]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	429a      	cmp	r2, r3
 8009942:	d90c      	bls.n	800995e <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8009944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009948:	b672      	cpsid	i
 800994a:	f383 8811 	msr	BASEPRI, r3
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	b662      	cpsie	i
 8009958:	617b      	str	r3, [r7, #20]
}
 800995a:	bf00      	nop
 800995c:	e7fe      	b.n	800995c <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800995e:	2302      	movs	r3, #2
 8009960:	9300      	str	r3, [sp, #0]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	2100      	movs	r1, #0
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	f7ff fe2f 	bl	80095cc <xQueueGenericCreateStatic>
 800996e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d002      	beq.n	800997c <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	68ba      	ldr	r2, [r7, #8]
 800997a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800997c:	69fb      	ldr	r3, [r7, #28]
	}
 800997e:	4618      	mov	r0, r3
 8009980:	3720      	adds	r7, #32
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009986:	b580      	push	{r7, lr}
 8009988:	b086      	sub	sp, #24
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
 800998e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d10c      	bne.n	80099b0 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8009996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999a:	b672      	cpsid	i
 800999c:	f383 8811 	msr	BASEPRI, r3
 80099a0:	f3bf 8f6f 	isb	sy
 80099a4:	f3bf 8f4f 	dsb	sy
 80099a8:	b662      	cpsie	i
 80099aa:	613b      	str	r3, [r7, #16]
}
 80099ac:	bf00      	nop
 80099ae:	e7fe      	b.n	80099ae <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80099b0:	683a      	ldr	r2, [r7, #0]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d90c      	bls.n	80099d2 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 80099b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099bc:	b672      	cpsid	i
 80099be:	f383 8811 	msr	BASEPRI, r3
 80099c2:	f3bf 8f6f 	isb	sy
 80099c6:	f3bf 8f4f 	dsb	sy
 80099ca:	b662      	cpsie	i
 80099cc:	60fb      	str	r3, [r7, #12]
}
 80099ce:	bf00      	nop
 80099d0:	e7fe      	b.n	80099d0 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80099d2:	2202      	movs	r2, #2
 80099d4:	2100      	movs	r1, #0
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f7ff fe7a 	bl	80096d0 <xQueueGenericCreate>
 80099dc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d002      	beq.n	80099ea <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	683a      	ldr	r2, [r7, #0]
 80099e8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80099ea:	697b      	ldr	r3, [r7, #20]
	}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3718      	adds	r7, #24
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b08e      	sub	sp, #56	; 0x38
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
 8009a00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009a02:	2300      	movs	r3, #0
 8009a04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10c      	bne.n	8009a2a <xQueueGenericSend+0x36>
	__asm volatile
 8009a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a14:	b672      	cpsid	i
 8009a16:	f383 8811 	msr	BASEPRI, r3
 8009a1a:	f3bf 8f6f 	isb	sy
 8009a1e:	f3bf 8f4f 	dsb	sy
 8009a22:	b662      	cpsie	i
 8009a24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a26:	bf00      	nop
 8009a28:	e7fe      	b.n	8009a28 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d103      	bne.n	8009a38 <xQueueGenericSend+0x44>
 8009a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d101      	bne.n	8009a3c <xQueueGenericSend+0x48>
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e000      	b.n	8009a3e <xQueueGenericSend+0x4a>
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10c      	bne.n	8009a5c <xQueueGenericSend+0x68>
	__asm volatile
 8009a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a46:	b672      	cpsid	i
 8009a48:	f383 8811 	msr	BASEPRI, r3
 8009a4c:	f3bf 8f6f 	isb	sy
 8009a50:	f3bf 8f4f 	dsb	sy
 8009a54:	b662      	cpsie	i
 8009a56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a58:	bf00      	nop
 8009a5a:	e7fe      	b.n	8009a5a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	d103      	bne.n	8009a6a <xQueueGenericSend+0x76>
 8009a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d101      	bne.n	8009a6e <xQueueGenericSend+0x7a>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e000      	b.n	8009a70 <xQueueGenericSend+0x7c>
 8009a6e:	2300      	movs	r3, #0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d10c      	bne.n	8009a8e <xQueueGenericSend+0x9a>
	__asm volatile
 8009a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a78:	b672      	cpsid	i
 8009a7a:	f383 8811 	msr	BASEPRI, r3
 8009a7e:	f3bf 8f6f 	isb	sy
 8009a82:	f3bf 8f4f 	dsb	sy
 8009a86:	b662      	cpsie	i
 8009a88:	623b      	str	r3, [r7, #32]
}
 8009a8a:	bf00      	nop
 8009a8c:	e7fe      	b.n	8009a8c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a8e:	f001 fce3 	bl	800b458 <xTaskGetSchedulerState>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d102      	bne.n	8009a9e <xQueueGenericSend+0xaa>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d101      	bne.n	8009aa2 <xQueueGenericSend+0xae>
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e000      	b.n	8009aa4 <xQueueGenericSend+0xb0>
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10c      	bne.n	8009ac2 <xQueueGenericSend+0xce>
	__asm volatile
 8009aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aac:	b672      	cpsid	i
 8009aae:	f383 8811 	msr	BASEPRI, r3
 8009ab2:	f3bf 8f6f 	isb	sy
 8009ab6:	f3bf 8f4f 	dsb	sy
 8009aba:	b662      	cpsie	i
 8009abc:	61fb      	str	r3, [r7, #28]
}
 8009abe:	bf00      	nop
 8009ac0:	e7fe      	b.n	8009ac0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ac2:	f002 fb1b 	bl	800c0fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d302      	bcc.n	8009ad8 <xQueueGenericSend+0xe4>
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	d129      	bne.n	8009b2c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ad8:	683a      	ldr	r2, [r7, #0]
 8009ada:	68b9      	ldr	r1, [r7, #8]
 8009adc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ade:	f000 fcc2 	bl	800a466 <prvCopyDataToQueue>
 8009ae2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d010      	beq.n	8009b0e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aee:	3324      	adds	r3, #36	; 0x24
 8009af0:	4618      	mov	r0, r3
 8009af2:	f001 fadb 	bl	800b0ac <xTaskRemoveFromEventList>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d013      	beq.n	8009b24 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009afc:	4b3f      	ldr	r3, [pc, #252]	; (8009bfc <xQueueGenericSend+0x208>)
 8009afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b02:	601a      	str	r2, [r3, #0]
 8009b04:	f3bf 8f4f 	dsb	sy
 8009b08:	f3bf 8f6f 	isb	sy
 8009b0c:	e00a      	b.n	8009b24 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d007      	beq.n	8009b24 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009b14:	4b39      	ldr	r3, [pc, #228]	; (8009bfc <xQueueGenericSend+0x208>)
 8009b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b1a:	601a      	str	r2, [r3, #0]
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009b24:	f002 fb1e 	bl	800c164 <vPortExitCritical>
				return pdPASS;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	e063      	b.n	8009bf4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d103      	bne.n	8009b3a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b32:	f002 fb17 	bl	800c164 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009b36:	2300      	movs	r3, #0
 8009b38:	e05c      	b.n	8009bf4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d106      	bne.n	8009b4e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b40:	f107 0314 	add.w	r3, r7, #20
 8009b44:	4618      	mov	r0, r3
 8009b46:	f001 fb17 	bl	800b178 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b4e:	f002 fb09 	bl	800c164 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b52:	f001 f86b 	bl	800ac2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b56:	f002 fad1 	bl	800c0fc <vPortEnterCritical>
 8009b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b60:	b25b      	sxtb	r3, r3
 8009b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b66:	d103      	bne.n	8009b70 <xQueueGenericSend+0x17c>
 8009b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b76:	b25b      	sxtb	r3, r3
 8009b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b7c:	d103      	bne.n	8009b86 <xQueueGenericSend+0x192>
 8009b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b80:	2200      	movs	r2, #0
 8009b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b86:	f002 faed 	bl	800c164 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b8a:	1d3a      	adds	r2, r7, #4
 8009b8c:	f107 0314 	add.w	r3, r7, #20
 8009b90:	4611      	mov	r1, r2
 8009b92:	4618      	mov	r0, r3
 8009b94:	f001 fb06 	bl	800b1a4 <xTaskCheckForTimeOut>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d124      	bne.n	8009be8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009b9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ba0:	f000 fd59 	bl	800a656 <prvIsQueueFull>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d018      	beq.n	8009bdc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bac:	3310      	adds	r3, #16
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f001 fa26 	bl	800b004 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009bb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bba:	f000 fce4 	bl	800a586 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009bbe:	f001 f843 	bl	800ac48 <xTaskResumeAll>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f47f af7c 	bne.w	8009ac2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8009bca:	4b0c      	ldr	r3, [pc, #48]	; (8009bfc <xQueueGenericSend+0x208>)
 8009bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bd0:	601a      	str	r2, [r3, #0]
 8009bd2:	f3bf 8f4f 	dsb	sy
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	e772      	b.n	8009ac2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bde:	f000 fcd2 	bl	800a586 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009be2:	f001 f831 	bl	800ac48 <xTaskResumeAll>
 8009be6:	e76c      	b.n	8009ac2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009be8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bea:	f000 fccc 	bl	800a586 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009bee:	f001 f82b 	bl	800ac48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009bf2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3738      	adds	r7, #56	; 0x38
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	e000ed04 	.word	0xe000ed04

08009c00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b08e      	sub	sp, #56	; 0x38
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	607a      	str	r2, [r7, #4]
 8009c0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d10c      	bne.n	8009c32 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8009c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1c:	b672      	cpsid	i
 8009c1e:	f383 8811 	msr	BASEPRI, r3
 8009c22:	f3bf 8f6f 	isb	sy
 8009c26:	f3bf 8f4f 	dsb	sy
 8009c2a:	b662      	cpsie	i
 8009c2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c2e:	bf00      	nop
 8009c30:	e7fe      	b.n	8009c30 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d103      	bne.n	8009c40 <xQueueGenericSendFromISR+0x40>
 8009c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d101      	bne.n	8009c44 <xQueueGenericSendFromISR+0x44>
 8009c40:	2301      	movs	r3, #1
 8009c42:	e000      	b.n	8009c46 <xQueueGenericSendFromISR+0x46>
 8009c44:	2300      	movs	r3, #0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d10c      	bne.n	8009c64 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8009c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4e:	b672      	cpsid	i
 8009c50:	f383 8811 	msr	BASEPRI, r3
 8009c54:	f3bf 8f6f 	isb	sy
 8009c58:	f3bf 8f4f 	dsb	sy
 8009c5c:	b662      	cpsie	i
 8009c5e:	623b      	str	r3, [r7, #32]
}
 8009c60:	bf00      	nop
 8009c62:	e7fe      	b.n	8009c62 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	d103      	bne.n	8009c72 <xQueueGenericSendFromISR+0x72>
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d101      	bne.n	8009c76 <xQueueGenericSendFromISR+0x76>
 8009c72:	2301      	movs	r3, #1
 8009c74:	e000      	b.n	8009c78 <xQueueGenericSendFromISR+0x78>
 8009c76:	2300      	movs	r3, #0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10c      	bne.n	8009c96 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8009c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c80:	b672      	cpsid	i
 8009c82:	f383 8811 	msr	BASEPRI, r3
 8009c86:	f3bf 8f6f 	isb	sy
 8009c8a:	f3bf 8f4f 	dsb	sy
 8009c8e:	b662      	cpsie	i
 8009c90:	61fb      	str	r3, [r7, #28]
}
 8009c92:	bf00      	nop
 8009c94:	e7fe      	b.n	8009c94 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c96:	f002 fb19 	bl	800c2cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009c9a:	f3ef 8211 	mrs	r2, BASEPRI
 8009c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca2:	b672      	cpsid	i
 8009ca4:	f383 8811 	msr	BASEPRI, r3
 8009ca8:	f3bf 8f6f 	isb	sy
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	b662      	cpsie	i
 8009cb2:	61ba      	str	r2, [r7, #24]
 8009cb4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009cb6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d302      	bcc.n	8009ccc <xQueueGenericSendFromISR+0xcc>
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d12c      	bne.n	8009d26 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009cd6:	683a      	ldr	r2, [r7, #0]
 8009cd8:	68b9      	ldr	r1, [r7, #8]
 8009cda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cdc:	f000 fbc3 	bl	800a466 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009ce0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce8:	d112      	bne.n	8009d10 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d016      	beq.n	8009d20 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf4:	3324      	adds	r3, #36	; 0x24
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f001 f9d8 	bl	800b0ac <xTaskRemoveFromEventList>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00e      	beq.n	8009d20 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d00b      	beq.n	8009d20 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	601a      	str	r2, [r3, #0]
 8009d0e:	e007      	b.n	8009d20 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009d10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d14:	3301      	adds	r3, #1
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	b25a      	sxtb	r2, r3
 8009d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009d20:	2301      	movs	r3, #1
 8009d22:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009d24:	e001      	b.n	8009d2a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009d26:	2300      	movs	r3, #0
 8009d28:	637b      	str	r3, [r7, #52]	; 0x34
 8009d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d2c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009d34:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3738      	adds	r7, #56	; 0x38
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b08e      	sub	sp, #56	; 0x38
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10c      	bne.n	8009d6e <xQueueGiveFromISR+0x2e>
	__asm volatile
 8009d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d58:	b672      	cpsid	i
 8009d5a:	f383 8811 	msr	BASEPRI, r3
 8009d5e:	f3bf 8f6f 	isb	sy
 8009d62:	f3bf 8f4f 	dsb	sy
 8009d66:	b662      	cpsie	i
 8009d68:	623b      	str	r3, [r7, #32]
}
 8009d6a:	bf00      	nop
 8009d6c:	e7fe      	b.n	8009d6c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d00c      	beq.n	8009d90 <xQueueGiveFromISR+0x50>
	__asm volatile
 8009d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7a:	b672      	cpsid	i
 8009d7c:	f383 8811 	msr	BASEPRI, r3
 8009d80:	f3bf 8f6f 	isb	sy
 8009d84:	f3bf 8f4f 	dsb	sy
 8009d88:	b662      	cpsie	i
 8009d8a:	61fb      	str	r3, [r7, #28]
}
 8009d8c:	bf00      	nop
 8009d8e:	e7fe      	b.n	8009d8e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d103      	bne.n	8009da0 <xQueueGiveFromISR+0x60>
 8009d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d101      	bne.n	8009da4 <xQueueGiveFromISR+0x64>
 8009da0:	2301      	movs	r3, #1
 8009da2:	e000      	b.n	8009da6 <xQueueGiveFromISR+0x66>
 8009da4:	2300      	movs	r3, #0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10c      	bne.n	8009dc4 <xQueueGiveFromISR+0x84>
	__asm volatile
 8009daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dae:	b672      	cpsid	i
 8009db0:	f383 8811 	msr	BASEPRI, r3
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	b662      	cpsie	i
 8009dbe:	61bb      	str	r3, [r7, #24]
}
 8009dc0:	bf00      	nop
 8009dc2:	e7fe      	b.n	8009dc2 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009dc4:	f002 fa82 	bl	800c2cc <vPortValidateInterruptPriority>
	__asm volatile
 8009dc8:	f3ef 8211 	mrs	r2, BASEPRI
 8009dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd0:	b672      	cpsid	i
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	b662      	cpsie	i
 8009de0:	617a      	str	r2, [r7, #20]
 8009de2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009de4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009de6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dec:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d22b      	bcs.n	8009e50 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e04:	1c5a      	adds	r2, r3, #1
 8009e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e08:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009e0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e12:	d112      	bne.n	8009e3a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d016      	beq.n	8009e4a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1e:	3324      	adds	r3, #36	; 0x24
 8009e20:	4618      	mov	r0, r3
 8009e22:	f001 f943 	bl	800b0ac <xTaskRemoveFromEventList>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00e      	beq.n	8009e4a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00b      	beq.n	8009e4a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	2201      	movs	r2, #1
 8009e36:	601a      	str	r2, [r3, #0]
 8009e38:	e007      	b.n	8009e4a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009e3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e3e:	3301      	adds	r3, #1
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	b25a      	sxtb	r2, r3
 8009e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	637b      	str	r3, [r7, #52]	; 0x34
 8009e4e:	e001      	b.n	8009e54 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009e50:	2300      	movs	r3, #0
 8009e52:	637b      	str	r3, [r7, #52]	; 0x34
 8009e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e56:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f383 8811 	msr	BASEPRI, r3
}
 8009e5e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3738      	adds	r7, #56	; 0x38
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
	...

08009e6c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b08c      	sub	sp, #48	; 0x30
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d10c      	bne.n	8009ea0 <xQueueReceive+0x34>
	__asm volatile
 8009e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8a:	b672      	cpsid	i
 8009e8c:	f383 8811 	msr	BASEPRI, r3
 8009e90:	f3bf 8f6f 	isb	sy
 8009e94:	f3bf 8f4f 	dsb	sy
 8009e98:	b662      	cpsie	i
 8009e9a:	623b      	str	r3, [r7, #32]
}
 8009e9c:	bf00      	nop
 8009e9e:	e7fe      	b.n	8009e9e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d103      	bne.n	8009eae <xQueueReceive+0x42>
 8009ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d101      	bne.n	8009eb2 <xQueueReceive+0x46>
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e000      	b.n	8009eb4 <xQueueReceive+0x48>
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d10c      	bne.n	8009ed2 <xQueueReceive+0x66>
	__asm volatile
 8009eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ebc:	b672      	cpsid	i
 8009ebe:	f383 8811 	msr	BASEPRI, r3
 8009ec2:	f3bf 8f6f 	isb	sy
 8009ec6:	f3bf 8f4f 	dsb	sy
 8009eca:	b662      	cpsie	i
 8009ecc:	61fb      	str	r3, [r7, #28]
}
 8009ece:	bf00      	nop
 8009ed0:	e7fe      	b.n	8009ed0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ed2:	f001 fac1 	bl	800b458 <xTaskGetSchedulerState>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d102      	bne.n	8009ee2 <xQueueReceive+0x76>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d101      	bne.n	8009ee6 <xQueueReceive+0x7a>
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e000      	b.n	8009ee8 <xQueueReceive+0x7c>
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d10c      	bne.n	8009f06 <xQueueReceive+0x9a>
	__asm volatile
 8009eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef0:	b672      	cpsid	i
 8009ef2:	f383 8811 	msr	BASEPRI, r3
 8009ef6:	f3bf 8f6f 	isb	sy
 8009efa:	f3bf 8f4f 	dsb	sy
 8009efe:	b662      	cpsie	i
 8009f00:	61bb      	str	r3, [r7, #24]
}
 8009f02:	bf00      	nop
 8009f04:	e7fe      	b.n	8009f04 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f06:	f002 f8f9 	bl	800c0fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f0e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d01f      	beq.n	8009f56 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009f16:	68b9      	ldr	r1, [r7, #8]
 8009f18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f1a:	f000 fb0e 	bl	800a53a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f20:	1e5a      	subs	r2, r3, #1
 8009f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f24:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00f      	beq.n	8009f4e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f30:	3310      	adds	r3, #16
 8009f32:	4618      	mov	r0, r3
 8009f34:	f001 f8ba 	bl	800b0ac <xTaskRemoveFromEventList>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d007      	beq.n	8009f4e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009f3e:	4b3d      	ldr	r3, [pc, #244]	; (800a034 <xQueueReceive+0x1c8>)
 8009f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f44:	601a      	str	r2, [r3, #0]
 8009f46:	f3bf 8f4f 	dsb	sy
 8009f4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009f4e:	f002 f909 	bl	800c164 <vPortExitCritical>
				return pdPASS;
 8009f52:	2301      	movs	r3, #1
 8009f54:	e069      	b.n	800a02a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d103      	bne.n	8009f64 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f5c:	f002 f902 	bl	800c164 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009f60:	2300      	movs	r3, #0
 8009f62:	e062      	b.n	800a02a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d106      	bne.n	8009f78 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f6a:	f107 0310 	add.w	r3, r7, #16
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f001 f902 	bl	800b178 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f74:	2301      	movs	r3, #1
 8009f76:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f78:	f002 f8f4 	bl	800c164 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f7c:	f000 fe56 	bl	800ac2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f80:	f002 f8bc 	bl	800c0fc <vPortEnterCritical>
 8009f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f8a:	b25b      	sxtb	r3, r3
 8009f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f90:	d103      	bne.n	8009f9a <xQueueReceive+0x12e>
 8009f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f94:	2200      	movs	r2, #0
 8009f96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fa0:	b25b      	sxtb	r3, r3
 8009fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa6:	d103      	bne.n	8009fb0 <xQueueReceive+0x144>
 8009fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009faa:	2200      	movs	r2, #0
 8009fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fb0:	f002 f8d8 	bl	800c164 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009fb4:	1d3a      	adds	r2, r7, #4
 8009fb6:	f107 0310 	add.w	r3, r7, #16
 8009fba:	4611      	mov	r1, r2
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f001 f8f1 	bl	800b1a4 <xTaskCheckForTimeOut>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d123      	bne.n	800a010 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009fc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fca:	f000 fb2e 	bl	800a62a <prvIsQueueEmpty>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d017      	beq.n	800a004 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd6:	3324      	adds	r3, #36	; 0x24
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	4611      	mov	r1, r2
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f001 f811 	bl	800b004 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009fe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fe4:	f000 facf 	bl	800a586 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009fe8:	f000 fe2e 	bl	800ac48 <xTaskResumeAll>
 8009fec:	4603      	mov	r3, r0
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d189      	bne.n	8009f06 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8009ff2:	4b10      	ldr	r3, [pc, #64]	; (800a034 <xQueueReceive+0x1c8>)
 8009ff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ff8:	601a      	str	r2, [r3, #0]
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	f3bf 8f6f 	isb	sy
 800a002:	e780      	b.n	8009f06 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a006:	f000 fabe 	bl	800a586 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a00a:	f000 fe1d 	bl	800ac48 <xTaskResumeAll>
 800a00e:	e77a      	b.n	8009f06 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a012:	f000 fab8 	bl	800a586 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a016:	f000 fe17 	bl	800ac48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a01a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a01c:	f000 fb05 	bl	800a62a <prvIsQueueEmpty>
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	f43f af6f 	beq.w	8009f06 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a028:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3730      	adds	r7, #48	; 0x30
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	e000ed04 	.word	0xe000ed04

0800a038 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b08e      	sub	sp, #56	; 0x38
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a042:	2300      	movs	r3, #0
 800a044:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a04a:	2300      	movs	r3, #0
 800a04c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a050:	2b00      	cmp	r3, #0
 800a052:	d10c      	bne.n	800a06e <xQueueSemaphoreTake+0x36>
	__asm volatile
 800a054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a058:	b672      	cpsid	i
 800a05a:	f383 8811 	msr	BASEPRI, r3
 800a05e:	f3bf 8f6f 	isb	sy
 800a062:	f3bf 8f4f 	dsb	sy
 800a066:	b662      	cpsie	i
 800a068:	623b      	str	r3, [r7, #32]
}
 800a06a:	bf00      	nop
 800a06c:	e7fe      	b.n	800a06c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a072:	2b00      	cmp	r3, #0
 800a074:	d00c      	beq.n	800a090 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800a076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07a:	b672      	cpsid	i
 800a07c:	f383 8811 	msr	BASEPRI, r3
 800a080:	f3bf 8f6f 	isb	sy
 800a084:	f3bf 8f4f 	dsb	sy
 800a088:	b662      	cpsie	i
 800a08a:	61fb      	str	r3, [r7, #28]
}
 800a08c:	bf00      	nop
 800a08e:	e7fe      	b.n	800a08e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a090:	f001 f9e2 	bl	800b458 <xTaskGetSchedulerState>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d102      	bne.n	800a0a0 <xQueueSemaphoreTake+0x68>
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d101      	bne.n	800a0a4 <xQueueSemaphoreTake+0x6c>
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	e000      	b.n	800a0a6 <xQueueSemaphoreTake+0x6e>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d10c      	bne.n	800a0c4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800a0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ae:	b672      	cpsid	i
 800a0b0:	f383 8811 	msr	BASEPRI, r3
 800a0b4:	f3bf 8f6f 	isb	sy
 800a0b8:	f3bf 8f4f 	dsb	sy
 800a0bc:	b662      	cpsie	i
 800a0be:	61bb      	str	r3, [r7, #24]
}
 800a0c0:	bf00      	nop
 800a0c2:	e7fe      	b.n	800a0c2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a0c4:	f002 f81a 	bl	800c0fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0cc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d024      	beq.n	800a11e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d6:	1e5a      	subs	r2, r3, #1
 800a0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0da:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d104      	bne.n	800a0ee <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a0e4:	f001 fb36 	bl	800b754 <pvTaskIncrementMutexHeldCount>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ec:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f0:	691b      	ldr	r3, [r3, #16]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d00f      	beq.n	800a116 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f8:	3310      	adds	r3, #16
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f000 ffd6 	bl	800b0ac <xTaskRemoveFromEventList>
 800a100:	4603      	mov	r3, r0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d007      	beq.n	800a116 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a106:	4b55      	ldr	r3, [pc, #340]	; (800a25c <xQueueSemaphoreTake+0x224>)
 800a108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a10c:	601a      	str	r2, [r3, #0]
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a116:	f002 f825 	bl	800c164 <vPortExitCritical>
				return pdPASS;
 800a11a:	2301      	movs	r3, #1
 800a11c:	e099      	b.n	800a252 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d113      	bne.n	800a14c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a126:	2b00      	cmp	r3, #0
 800a128:	d00c      	beq.n	800a144 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800a12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12e:	b672      	cpsid	i
 800a130:	f383 8811 	msr	BASEPRI, r3
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	f3bf 8f4f 	dsb	sy
 800a13c:	b662      	cpsie	i
 800a13e:	617b      	str	r3, [r7, #20]
}
 800a140:	bf00      	nop
 800a142:	e7fe      	b.n	800a142 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a144:	f002 f80e 	bl	800c164 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a148:	2300      	movs	r3, #0
 800a14a:	e082      	b.n	800a252 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d106      	bne.n	800a160 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a152:	f107 030c 	add.w	r3, r7, #12
 800a156:	4618      	mov	r0, r3
 800a158:	f001 f80e 	bl	800b178 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a15c:	2301      	movs	r3, #1
 800a15e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a160:	f002 f800 	bl	800c164 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a164:	f000 fd62 	bl	800ac2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a168:	f001 ffc8 	bl	800c0fc <vPortEnterCritical>
 800a16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a172:	b25b      	sxtb	r3, r3
 800a174:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a178:	d103      	bne.n	800a182 <xQueueSemaphoreTake+0x14a>
 800a17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17c:	2200      	movs	r2, #0
 800a17e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a184:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a188:	b25b      	sxtb	r3, r3
 800a18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a18e:	d103      	bne.n	800a198 <xQueueSemaphoreTake+0x160>
 800a190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a192:	2200      	movs	r2, #0
 800a194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a198:	f001 ffe4 	bl	800c164 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a19c:	463a      	mov	r2, r7
 800a19e:	f107 030c 	add.w	r3, r7, #12
 800a1a2:	4611      	mov	r1, r2
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f000 fffd 	bl	800b1a4 <xTaskCheckForTimeOut>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d132      	bne.n	800a216 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1b2:	f000 fa3a 	bl	800a62a <prvIsQueueEmpty>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d026      	beq.n	800a20a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d109      	bne.n	800a1d8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800a1c4:	f001 ff9a 	bl	800c0fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f001 f961 	bl	800b494 <xTaskPriorityInherit>
 800a1d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a1d4:	f001 ffc6 	bl	800c164 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1da:	3324      	adds	r3, #36	; 0x24
 800a1dc:	683a      	ldr	r2, [r7, #0]
 800a1de:	4611      	mov	r1, r2
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f000 ff0f 	bl	800b004 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a1e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1e8:	f000 f9cd 	bl	800a586 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a1ec:	f000 fd2c 	bl	800ac48 <xTaskResumeAll>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	f47f af66 	bne.w	800a0c4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800a1f8:	4b18      	ldr	r3, [pc, #96]	; (800a25c <xQueueSemaphoreTake+0x224>)
 800a1fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1fe:	601a      	str	r2, [r3, #0]
 800a200:	f3bf 8f4f 	dsb	sy
 800a204:	f3bf 8f6f 	isb	sy
 800a208:	e75c      	b.n	800a0c4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a20a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a20c:	f000 f9bb 	bl	800a586 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a210:	f000 fd1a 	bl	800ac48 <xTaskResumeAll>
 800a214:	e756      	b.n	800a0c4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a216:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a218:	f000 f9b5 	bl	800a586 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a21c:	f000 fd14 	bl	800ac48 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a220:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a222:	f000 fa02 	bl	800a62a <prvIsQueueEmpty>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	f43f af4b 	beq.w	800a0c4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a230:	2b00      	cmp	r3, #0
 800a232:	d00d      	beq.n	800a250 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800a234:	f001 ff62 	bl	800c0fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a238:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a23a:	f000 f8fc 	bl	800a436 <prvGetDisinheritPriorityAfterTimeout>
 800a23e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a246:	4618      	mov	r0, r3
 800a248:	f001 f9fe 	bl	800b648 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a24c:	f001 ff8a 	bl	800c164 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a250:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a252:	4618      	mov	r0, r3
 800a254:	3738      	adds	r7, #56	; 0x38
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	e000ed04 	.word	0xe000ed04

0800a260 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b08e      	sub	sp, #56	; 0x38
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a272:	2b00      	cmp	r3, #0
 800a274:	d10c      	bne.n	800a290 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800a276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27a:	b672      	cpsid	i
 800a27c:	f383 8811 	msr	BASEPRI, r3
 800a280:	f3bf 8f6f 	isb	sy
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	b662      	cpsie	i
 800a28a:	623b      	str	r3, [r7, #32]
}
 800a28c:	bf00      	nop
 800a28e:	e7fe      	b.n	800a28e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d103      	bne.n	800a29e <xQueueReceiveFromISR+0x3e>
 800a296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d101      	bne.n	800a2a2 <xQueueReceiveFromISR+0x42>
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e000      	b.n	800a2a4 <xQueueReceiveFromISR+0x44>
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d10c      	bne.n	800a2c2 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800a2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ac:	b672      	cpsid	i
 800a2ae:	f383 8811 	msr	BASEPRI, r3
 800a2b2:	f3bf 8f6f 	isb	sy
 800a2b6:	f3bf 8f4f 	dsb	sy
 800a2ba:	b662      	cpsie	i
 800a2bc:	61fb      	str	r3, [r7, #28]
}
 800a2be:	bf00      	nop
 800a2c0:	e7fe      	b.n	800a2c0 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a2c2:	f002 f803 	bl	800c2cc <vPortValidateInterruptPriority>
	__asm volatile
 800a2c6:	f3ef 8211 	mrs	r2, BASEPRI
 800a2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ce:	b672      	cpsid	i
 800a2d0:	f383 8811 	msr	BASEPRI, r3
 800a2d4:	f3bf 8f6f 	isb	sy
 800a2d8:	f3bf 8f4f 	dsb	sy
 800a2dc:	b662      	cpsie	i
 800a2de:	61ba      	str	r2, [r7, #24]
 800a2e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a2e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d02f      	beq.n	800a352 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a2fc:	68b9      	ldr	r1, [r7, #8]
 800a2fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a300:	f000 f91b 	bl	800a53a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a306:	1e5a      	subs	r2, r3, #1
 800a308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a30c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a310:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a314:	d112      	bne.n	800a33c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a318:	691b      	ldr	r3, [r3, #16]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d016      	beq.n	800a34c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a320:	3310      	adds	r3, #16
 800a322:	4618      	mov	r0, r3
 800a324:	f000 fec2 	bl	800b0ac <xTaskRemoveFromEventList>
 800a328:	4603      	mov	r3, r0
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00e      	beq.n	800a34c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d00b      	beq.n	800a34c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	601a      	str	r2, [r3, #0]
 800a33a:	e007      	b.n	800a34c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a33c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a340:	3301      	adds	r3, #1
 800a342:	b2db      	uxtb	r3, r3
 800a344:	b25a      	sxtb	r2, r3
 800a346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a34c:	2301      	movs	r3, #1
 800a34e:	637b      	str	r3, [r7, #52]	; 0x34
 800a350:	e001      	b.n	800a356 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800a352:	2300      	movs	r3, #0
 800a354:	637b      	str	r3, [r7, #52]	; 0x34
 800a356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a358:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	f383 8811 	msr	BASEPRI, r3
}
 800a360:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a364:	4618      	mov	r0, r3
 800a366:	3738      	adds	r7, #56	; 0x38
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d10c      	bne.n	800a394 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800a37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37e:	b672      	cpsid	i
 800a380:	f383 8811 	msr	BASEPRI, r3
 800a384:	f3bf 8f6f 	isb	sy
 800a388:	f3bf 8f4f 	dsb	sy
 800a38c:	b662      	cpsie	i
 800a38e:	60bb      	str	r3, [r7, #8]
}
 800a390:	bf00      	nop
 800a392:	e7fe      	b.n	800a392 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800a394:	f001 feb2 	bl	800c0fc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a39c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a39e:	f001 fee1 	bl	800c164 <vPortExitCritical>

	return uxReturn;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3710      	adds	r7, #16
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b087      	sub	sp, #28
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d10c      	bne.n	800a3d8 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 800a3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c2:	b672      	cpsid	i
 800a3c4:	f383 8811 	msr	BASEPRI, r3
 800a3c8:	f3bf 8f6f 	isb	sy
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	b662      	cpsie	i
 800a3d2:	60fb      	str	r3, [r7, #12]
}
 800a3d4:	bf00      	nop
 800a3d6:	e7fe      	b.n	800a3d6 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3dc:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800a3de:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	371c      	adds	r7, #28
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr

0800a3ec <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d10c      	bne.n	800a418 <vQueueDelete+0x2c>
	__asm volatile
 800a3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a402:	b672      	cpsid	i
 800a404:	f383 8811 	msr	BASEPRI, r3
 800a408:	f3bf 8f6f 	isb	sy
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	b662      	cpsie	i
 800a412:	60bb      	str	r3, [r7, #8]
}
 800a414:	bf00      	nop
 800a416:	e7fe      	b.n	800a416 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a418:	68f8      	ldr	r0, [r7, #12]
 800a41a:	f000 f95f 	bl	800a6dc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a424:	2b00      	cmp	r3, #0
 800a426:	d102      	bne.n	800a42e <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	f002 f85d 	bl	800c4e8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a42e:	bf00      	nop
 800a430:	3710      	adds	r7, #16
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a436:	b480      	push	{r7}
 800a438:	b085      	sub	sp, #20
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a442:	2b00      	cmp	r3, #0
 800a444:	d006      	beq.n	800a454 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a450:	60fb      	str	r3, [r7, #12]
 800a452:	e001      	b.n	800a458 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a454:	2300      	movs	r3, #0
 800a456:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a458:	68fb      	ldr	r3, [r7, #12]
	}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3714      	adds	r7, #20
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr

0800a466 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a466:	b580      	push	{r7, lr}
 800a468:	b086      	sub	sp, #24
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	60f8      	str	r0, [r7, #12]
 800a46e:	60b9      	str	r1, [r7, #8]
 800a470:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a472:	2300      	movs	r3, #0
 800a474:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a47a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a480:	2b00      	cmp	r3, #0
 800a482:	d10d      	bne.n	800a4a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d14d      	bne.n	800a528 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	4618      	mov	r0, r3
 800a492:	f001 f867 	bl	800b564 <xTaskPriorityDisinherit>
 800a496:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2200      	movs	r2, #0
 800a49c:	609a      	str	r2, [r3, #8]
 800a49e:	e043      	b.n	800a528 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d119      	bne.n	800a4da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6858      	ldr	r0, [r3, #4]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	68b9      	ldr	r1, [r7, #8]
 800a4b2:	f010 fc09 	bl	801acc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	685a      	ldr	r2, [r3, #4]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4be:	441a      	add	r2, r3
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	685a      	ldr	r2, [r3, #4]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d32b      	bcc.n	800a528 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	605a      	str	r2, [r3, #4]
 800a4d8:	e026      	b.n	800a528 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	68d8      	ldr	r0, [r3, #12]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	68b9      	ldr	r1, [r7, #8]
 800a4e6:	f010 fbef 	bl	801acc8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	68da      	ldr	r2, [r3, #12]
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4f2:	425b      	negs	r3, r3
 800a4f4:	441a      	add	r2, r3
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	68da      	ldr	r2, [r3, #12]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	429a      	cmp	r2, r3
 800a504:	d207      	bcs.n	800a516 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	689a      	ldr	r2, [r3, #8]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50e:	425b      	negs	r3, r3
 800a510:	441a      	add	r2, r3
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d105      	bne.n	800a528 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d002      	beq.n	800a528 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	3b01      	subs	r3, #1
 800a526:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	1c5a      	adds	r2, r3, #1
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a530:	697b      	ldr	r3, [r7, #20]
}
 800a532:	4618      	mov	r0, r3
 800a534:	3718      	adds	r7, #24
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b082      	sub	sp, #8
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
 800a542:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d018      	beq.n	800a57e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	68da      	ldr	r2, [r3, #12]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a554:	441a      	add	r2, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	68da      	ldr	r2, [r3, #12]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	429a      	cmp	r2, r3
 800a564:	d303      	bcc.n	800a56e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	68d9      	ldr	r1, [r3, #12]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a576:	461a      	mov	r2, r3
 800a578:	6838      	ldr	r0, [r7, #0]
 800a57a:	f010 fba5 	bl	801acc8 <memcpy>
	}
}
 800a57e:	bf00      	nop
 800a580:	3708      	adds	r7, #8
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a586:	b580      	push	{r7, lr}
 800a588:	b084      	sub	sp, #16
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a58e:	f001 fdb5 	bl	800c0fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a598:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a59a:	e011      	b.n	800a5c0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d012      	beq.n	800a5ca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	3324      	adds	r3, #36	; 0x24
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f000 fd7f 	bl	800b0ac <xTaskRemoveFromEventList>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d001      	beq.n	800a5b8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a5b4:	f000 fe5c 	bl	800b270 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a5b8:	7bfb      	ldrb	r3, [r7, #15]
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a5c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	dce9      	bgt.n	800a59c <prvUnlockQueue+0x16>
 800a5c8:	e000      	b.n	800a5cc <prvUnlockQueue+0x46>
					break;
 800a5ca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	22ff      	movs	r2, #255	; 0xff
 800a5d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a5d4:	f001 fdc6 	bl	800c164 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a5d8:	f001 fd90 	bl	800c0fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5e2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a5e4:	e011      	b.n	800a60a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	691b      	ldr	r3, [r3, #16]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d012      	beq.n	800a614 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	3310      	adds	r3, #16
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f000 fd5a 	bl	800b0ac <xTaskRemoveFromEventList>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a5fe:	f000 fe37 	bl	800b270 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a602:	7bbb      	ldrb	r3, [r7, #14]
 800a604:	3b01      	subs	r3, #1
 800a606:	b2db      	uxtb	r3, r3
 800a608:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a60a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	dce9      	bgt.n	800a5e6 <prvUnlockQueue+0x60>
 800a612:	e000      	b.n	800a616 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a614:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	22ff      	movs	r2, #255	; 0xff
 800a61a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a61e:	f001 fda1 	bl	800c164 <vPortExitCritical>
}
 800a622:	bf00      	nop
 800a624:	3710      	adds	r7, #16
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b084      	sub	sp, #16
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a632:	f001 fd63 	bl	800c0fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d102      	bne.n	800a644 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a63e:	2301      	movs	r3, #1
 800a640:	60fb      	str	r3, [r7, #12]
 800a642:	e001      	b.n	800a648 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a644:	2300      	movs	r3, #0
 800a646:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a648:	f001 fd8c 	bl	800c164 <vPortExitCritical>

	return xReturn;
 800a64c:	68fb      	ldr	r3, [r7, #12]
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}

0800a656 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a656:	b580      	push	{r7, lr}
 800a658:	b084      	sub	sp, #16
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a65e:	f001 fd4d 	bl	800c0fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d102      	bne.n	800a674 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a66e:	2301      	movs	r3, #1
 800a670:	60fb      	str	r3, [r7, #12]
 800a672:	e001      	b.n	800a678 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a674:	2300      	movs	r3, #0
 800a676:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a678:	f001 fd74 	bl	800c164 <vPortExitCritical>

	return xReturn;
 800a67c:	68fb      	ldr	r3, [r7, #12]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
	...

0800a688 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a692:	2300      	movs	r3, #0
 800a694:	60fb      	str	r3, [r7, #12]
 800a696:	e014      	b.n	800a6c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a698:	4a0f      	ldr	r2, [pc, #60]	; (800a6d8 <vQueueAddToRegistry+0x50>)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d10b      	bne.n	800a6bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a6a4:	490c      	ldr	r1, [pc, #48]	; (800a6d8 <vQueueAddToRegistry+0x50>)
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	683a      	ldr	r2, [r7, #0]
 800a6aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a6ae:	4a0a      	ldr	r2, [pc, #40]	; (800a6d8 <vQueueAddToRegistry+0x50>)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	00db      	lsls	r3, r3, #3
 800a6b4:	4413      	add	r3, r2
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a6ba:	e006      	b.n	800a6ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	60fb      	str	r3, [r7, #12]
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2b07      	cmp	r3, #7
 800a6c6:	d9e7      	bls.n	800a698 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a6c8:	bf00      	nop
 800a6ca:	bf00      	nop
 800a6cc:	3714      	adds	r7, #20
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr
 800a6d6:	bf00      	nop
 800a6d8:	20009654 	.word	0x20009654

0800a6dc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a6dc:	b480      	push	{r7}
 800a6de:	b085      	sub	sp, #20
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	60fb      	str	r3, [r7, #12]
 800a6e8:	e016      	b.n	800a718 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a6ea:	4a10      	ldr	r2, [pc, #64]	; (800a72c <vQueueUnregisterQueue+0x50>)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	00db      	lsls	r3, r3, #3
 800a6f0:	4413      	add	r3, r2
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d10b      	bne.n	800a712 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a6fa:	4a0c      	ldr	r2, [pc, #48]	; (800a72c <vQueueUnregisterQueue+0x50>)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2100      	movs	r1, #0
 800a700:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a704:	4a09      	ldr	r2, [pc, #36]	; (800a72c <vQueueUnregisterQueue+0x50>)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	00db      	lsls	r3, r3, #3
 800a70a:	4413      	add	r3, r2
 800a70c:	2200      	movs	r2, #0
 800a70e:	605a      	str	r2, [r3, #4]
				break;
 800a710:	e006      	b.n	800a720 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	3301      	adds	r3, #1
 800a716:	60fb      	str	r3, [r7, #12]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2b07      	cmp	r3, #7
 800a71c:	d9e5      	bls.n	800a6ea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a71e:	bf00      	nop
 800a720:	bf00      	nop
 800a722:	3714      	adds	r7, #20
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr
 800a72c:	20009654 	.word	0x20009654

0800a730 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a730:	b580      	push	{r7, lr}
 800a732:	b086      	sub	sp, #24
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a740:	f001 fcdc 	bl	800c0fc <vPortEnterCritical>
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a74a:	b25b      	sxtb	r3, r3
 800a74c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a750:	d103      	bne.n	800a75a <vQueueWaitForMessageRestricted+0x2a>
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	2200      	movs	r2, #0
 800a756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a760:	b25b      	sxtb	r3, r3
 800a762:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a766:	d103      	bne.n	800a770 <vQueueWaitForMessageRestricted+0x40>
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a770:	f001 fcf8 	bl	800c164 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d106      	bne.n	800a78a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	3324      	adds	r3, #36	; 0x24
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	68b9      	ldr	r1, [r7, #8]
 800a784:	4618      	mov	r0, r3
 800a786:	f000 fc63 	bl	800b050 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a78a:	6978      	ldr	r0, [r7, #20]
 800a78c:	f7ff fefb 	bl	800a586 <prvUnlockQueue>
	}
 800a790:	bf00      	nop
 800a792:	3718      	adds	r7, #24
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b08e      	sub	sp, #56	; 0x38
 800a79c:	af04      	add	r7, sp, #16
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	607a      	str	r2, [r7, #4]
 800a7a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a7a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d10c      	bne.n	800a7c6 <xTaskCreateStatic+0x2e>
	__asm volatile
 800a7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b0:	b672      	cpsid	i
 800a7b2:	f383 8811 	msr	BASEPRI, r3
 800a7b6:	f3bf 8f6f 	isb	sy
 800a7ba:	f3bf 8f4f 	dsb	sy
 800a7be:	b662      	cpsie	i
 800a7c0:	623b      	str	r3, [r7, #32]
}
 800a7c2:	bf00      	nop
 800a7c4:	e7fe      	b.n	800a7c4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800a7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10c      	bne.n	800a7e6 <xTaskCreateStatic+0x4e>
	__asm volatile
 800a7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d0:	b672      	cpsid	i
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
 800a7de:	b662      	cpsie	i
 800a7e0:	61fb      	str	r3, [r7, #28]
}
 800a7e2:	bf00      	nop
 800a7e4:	e7fe      	b.n	800a7e4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a7e6:	235c      	movs	r3, #92	; 0x5c
 800a7e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	2b5c      	cmp	r3, #92	; 0x5c
 800a7ee:	d00c      	beq.n	800a80a <xTaskCreateStatic+0x72>
	__asm volatile
 800a7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f4:	b672      	cpsid	i
 800a7f6:	f383 8811 	msr	BASEPRI, r3
 800a7fa:	f3bf 8f6f 	isb	sy
 800a7fe:	f3bf 8f4f 	dsb	sy
 800a802:	b662      	cpsie	i
 800a804:	61bb      	str	r3, [r7, #24]
}
 800a806:	bf00      	nop
 800a808:	e7fe      	b.n	800a808 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a80a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d01e      	beq.n	800a850 <xTaskCreateStatic+0xb8>
 800a812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a814:	2b00      	cmp	r3, #0
 800a816:	d01b      	beq.n	800a850 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a820:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a824:	2202      	movs	r2, #2
 800a826:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a82a:	2300      	movs	r3, #0
 800a82c:	9303      	str	r3, [sp, #12]
 800a82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a830:	9302      	str	r3, [sp, #8]
 800a832:	f107 0314 	add.w	r3, r7, #20
 800a836:	9301      	str	r3, [sp, #4]
 800a838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83a:	9300      	str	r3, [sp, #0]
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	68b9      	ldr	r1, [r7, #8]
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f000 f850 	bl	800a8e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a848:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a84a:	f000 f8df 	bl	800aa0c <prvAddNewTaskToReadyList>
 800a84e:	e001      	b.n	800a854 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800a850:	2300      	movs	r3, #0
 800a852:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a854:	697b      	ldr	r3, [r7, #20]
	}
 800a856:	4618      	mov	r0, r3
 800a858:	3728      	adds	r7, #40	; 0x28
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b08c      	sub	sp, #48	; 0x30
 800a862:	af04      	add	r7, sp, #16
 800a864:	60f8      	str	r0, [r7, #12]
 800a866:	60b9      	str	r1, [r7, #8]
 800a868:	603b      	str	r3, [r7, #0]
 800a86a:	4613      	mov	r3, r2
 800a86c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a86e:	88fb      	ldrh	r3, [r7, #6]
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	4618      	mov	r0, r3
 800a874:	f001 fd6e 	bl	800c354 <pvPortMalloc>
 800a878:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d00e      	beq.n	800a89e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a880:	205c      	movs	r0, #92	; 0x5c
 800a882:	f001 fd67 	bl	800c354 <pvPortMalloc>
 800a886:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d003      	beq.n	800a896 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	697a      	ldr	r2, [r7, #20]
 800a892:	631a      	str	r2, [r3, #48]	; 0x30
 800a894:	e005      	b.n	800a8a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a896:	6978      	ldr	r0, [r7, #20]
 800a898:	f001 fe26 	bl	800c4e8 <vPortFree>
 800a89c:	e001      	b.n	800a8a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d017      	beq.n	800a8d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a8a8:	69fb      	ldr	r3, [r7, #28]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a8b0:	88fa      	ldrh	r2, [r7, #6]
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	9303      	str	r3, [sp, #12]
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	9302      	str	r3, [sp, #8]
 800a8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8bc:	9301      	str	r3, [sp, #4]
 800a8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c0:	9300      	str	r3, [sp, #0]
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	68b9      	ldr	r1, [r7, #8]
 800a8c6:	68f8      	ldr	r0, [r7, #12]
 800a8c8:	f000 f80e 	bl	800a8e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a8cc:	69f8      	ldr	r0, [r7, #28]
 800a8ce:	f000 f89d 	bl	800aa0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	61bb      	str	r3, [r7, #24]
 800a8d6:	e002      	b.n	800a8de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a8d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a8dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a8de:	69bb      	ldr	r3, [r7, #24]
	}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3720      	adds	r7, #32
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b088      	sub	sp, #32
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	607a      	str	r2, [r7, #4]
 800a8f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	461a      	mov	r2, r3
 800a900:	21a5      	movs	r1, #165	; 0xa5
 800a902:	f010 f9ef 	bl	801ace4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a90a:	6879      	ldr	r1, [r7, #4]
 800a90c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a910:	440b      	add	r3, r1
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	4413      	add	r3, r2
 800a916:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	f023 0307 	bic.w	r3, r3, #7
 800a91e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a920:	69bb      	ldr	r3, [r7, #24]
 800a922:	f003 0307 	and.w	r3, r3, #7
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00c      	beq.n	800a944 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800a92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92e:	b672      	cpsid	i
 800a930:	f383 8811 	msr	BASEPRI, r3
 800a934:	f3bf 8f6f 	isb	sy
 800a938:	f3bf 8f4f 	dsb	sy
 800a93c:	b662      	cpsie	i
 800a93e:	617b      	str	r3, [r7, #20]
}
 800a940:	bf00      	nop
 800a942:	e7fe      	b.n	800a942 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d01f      	beq.n	800a98a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a94a:	2300      	movs	r3, #0
 800a94c:	61fb      	str	r3, [r7, #28]
 800a94e:	e012      	b.n	800a976 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a950:	68ba      	ldr	r2, [r7, #8]
 800a952:	69fb      	ldr	r3, [r7, #28]
 800a954:	4413      	add	r3, r2
 800a956:	7819      	ldrb	r1, [r3, #0]
 800a958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a95a:	69fb      	ldr	r3, [r7, #28]
 800a95c:	4413      	add	r3, r2
 800a95e:	3334      	adds	r3, #52	; 0x34
 800a960:	460a      	mov	r2, r1
 800a962:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a964:	68ba      	ldr	r2, [r7, #8]
 800a966:	69fb      	ldr	r3, [r7, #28]
 800a968:	4413      	add	r3, r2
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d006      	beq.n	800a97e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a970:	69fb      	ldr	r3, [r7, #28]
 800a972:	3301      	adds	r3, #1
 800a974:	61fb      	str	r3, [r7, #28]
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	2b0f      	cmp	r3, #15
 800a97a:	d9e9      	bls.n	800a950 <prvInitialiseNewTask+0x68>
 800a97c:	e000      	b.n	800a980 <prvInitialiseNewTask+0x98>
			{
				break;
 800a97e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a982:	2200      	movs	r2, #0
 800a984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a988:	e003      	b.n	800a992 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98c:	2200      	movs	r2, #0
 800a98e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a994:	2b37      	cmp	r3, #55	; 0x37
 800a996:	d901      	bls.n	800a99c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a998:	2337      	movs	r3, #55	; 0x37
 800a99a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b0:	3304      	adds	r3, #4
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f7fe fd0c 	bl	80093d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ba:	3318      	adds	r3, #24
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7fe fd07 	bl	80093d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9da:	2200      	movs	r2, #0
 800a9dc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a9e6:	683a      	ldr	r2, [r7, #0]
 800a9e8:	68f9      	ldr	r1, [r7, #12]
 800a9ea:	69b8      	ldr	r0, [r7, #24]
 800a9ec:	f001 fa76 	bl	800bedc <pxPortInitialiseStack>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d002      	beq.n	800aa02 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa02:	bf00      	nop
 800aa04:	3720      	adds	r7, #32
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
	...

0800aa0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aa14:	f001 fb72 	bl	800c0fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aa18:	4b2d      	ldr	r3, [pc, #180]	; (800aad0 <prvAddNewTaskToReadyList+0xc4>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	4a2c      	ldr	r2, [pc, #176]	; (800aad0 <prvAddNewTaskToReadyList+0xc4>)
 800aa20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aa22:	4b2c      	ldr	r3, [pc, #176]	; (800aad4 <prvAddNewTaskToReadyList+0xc8>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d109      	bne.n	800aa3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aa2a:	4a2a      	ldr	r2, [pc, #168]	; (800aad4 <prvAddNewTaskToReadyList+0xc8>)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aa30:	4b27      	ldr	r3, [pc, #156]	; (800aad0 <prvAddNewTaskToReadyList+0xc4>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d110      	bne.n	800aa5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aa38:	f000 fc3e 	bl	800b2b8 <prvInitialiseTaskLists>
 800aa3c:	e00d      	b.n	800aa5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aa3e:	4b26      	ldr	r3, [pc, #152]	; (800aad8 <prvAddNewTaskToReadyList+0xcc>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d109      	bne.n	800aa5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aa46:	4b23      	ldr	r3, [pc, #140]	; (800aad4 <prvAddNewTaskToReadyList+0xc8>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d802      	bhi.n	800aa5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aa54:	4a1f      	ldr	r2, [pc, #124]	; (800aad4 <prvAddNewTaskToReadyList+0xc8>)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aa5a:	4b20      	ldr	r3, [pc, #128]	; (800aadc <prvAddNewTaskToReadyList+0xd0>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	4a1e      	ldr	r2, [pc, #120]	; (800aadc <prvAddNewTaskToReadyList+0xd0>)
 800aa62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aa64:	4b1d      	ldr	r3, [pc, #116]	; (800aadc <prvAddNewTaskToReadyList+0xd0>)
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa70:	4b1b      	ldr	r3, [pc, #108]	; (800aae0 <prvAddNewTaskToReadyList+0xd4>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d903      	bls.n	800aa80 <prvAddNewTaskToReadyList+0x74>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa7c:	4a18      	ldr	r2, [pc, #96]	; (800aae0 <prvAddNewTaskToReadyList+0xd4>)
 800aa7e:	6013      	str	r3, [r2, #0]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa84:	4613      	mov	r3, r2
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	4413      	add	r3, r2
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	4a15      	ldr	r2, [pc, #84]	; (800aae4 <prvAddNewTaskToReadyList+0xd8>)
 800aa8e:	441a      	add	r2, r3
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	3304      	adds	r3, #4
 800aa94:	4619      	mov	r1, r3
 800aa96:	4610      	mov	r0, r2
 800aa98:	f7fe fca7 	bl	80093ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aa9c:	f001 fb62 	bl	800c164 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aaa0:	4b0d      	ldr	r3, [pc, #52]	; (800aad8 <prvAddNewTaskToReadyList+0xcc>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00e      	beq.n	800aac6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aaa8:	4b0a      	ldr	r3, [pc, #40]	; (800aad4 <prvAddNewTaskToReadyList+0xc8>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d207      	bcs.n	800aac6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aab6:	4b0c      	ldr	r3, [pc, #48]	; (800aae8 <prvAddNewTaskToReadyList+0xdc>)
 800aab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aabc:	601a      	str	r2, [r3, #0]
 800aabe:	f3bf 8f4f 	dsb	sy
 800aac2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aac6:	bf00      	nop
 800aac8:	3708      	adds	r7, #8
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	20009b68 	.word	0x20009b68
 800aad4:	20009694 	.word	0x20009694
 800aad8:	20009b74 	.word	0x20009b74
 800aadc:	20009b84 	.word	0x20009b84
 800aae0:	20009b70 	.word	0x20009b70
 800aae4:	20009698 	.word	0x20009698
 800aae8:	e000ed04 	.word	0xe000ed04

0800aaec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d019      	beq.n	800ab32 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aafe:	4b14      	ldr	r3, [pc, #80]	; (800ab50 <vTaskDelay+0x64>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d00c      	beq.n	800ab20 <vTaskDelay+0x34>
	__asm volatile
 800ab06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0a:	b672      	cpsid	i
 800ab0c:	f383 8811 	msr	BASEPRI, r3
 800ab10:	f3bf 8f6f 	isb	sy
 800ab14:	f3bf 8f4f 	dsb	sy
 800ab18:	b662      	cpsie	i
 800ab1a:	60bb      	str	r3, [r7, #8]
}
 800ab1c:	bf00      	nop
 800ab1e:	e7fe      	b.n	800ab1e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800ab20:	f000 f884 	bl	800ac2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ab24:	2100      	movs	r1, #0
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 fe28 	bl	800b77c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ab2c:	f000 f88c 	bl	800ac48 <xTaskResumeAll>
 800ab30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d107      	bne.n	800ab48 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800ab38:	4b06      	ldr	r3, [pc, #24]	; (800ab54 <vTaskDelay+0x68>)
 800ab3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab3e:	601a      	str	r2, [r3, #0]
 800ab40:	f3bf 8f4f 	dsb	sy
 800ab44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ab48:	bf00      	nop
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}
 800ab50:	20009b90 	.word	0x20009b90
 800ab54:	e000ed04 	.word	0xe000ed04

0800ab58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b08a      	sub	sp, #40	; 0x28
 800ab5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ab62:	2300      	movs	r3, #0
 800ab64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ab66:	463a      	mov	r2, r7
 800ab68:	1d39      	adds	r1, r7, #4
 800ab6a:	f107 0308 	add.w	r3, r7, #8
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7fe fbda 	bl	8009328 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ab74:	6839      	ldr	r1, [r7, #0]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	68ba      	ldr	r2, [r7, #8]
 800ab7a:	9202      	str	r2, [sp, #8]
 800ab7c:	9301      	str	r3, [sp, #4]
 800ab7e:	2300      	movs	r3, #0
 800ab80:	9300      	str	r3, [sp, #0]
 800ab82:	2300      	movs	r3, #0
 800ab84:	460a      	mov	r2, r1
 800ab86:	4923      	ldr	r1, [pc, #140]	; (800ac14 <vTaskStartScheduler+0xbc>)
 800ab88:	4823      	ldr	r0, [pc, #140]	; (800ac18 <vTaskStartScheduler+0xc0>)
 800ab8a:	f7ff fe05 	bl	800a798 <xTaskCreateStatic>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	4a22      	ldr	r2, [pc, #136]	; (800ac1c <vTaskStartScheduler+0xc4>)
 800ab92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ab94:	4b21      	ldr	r3, [pc, #132]	; (800ac1c <vTaskStartScheduler+0xc4>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d002      	beq.n	800aba2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	617b      	str	r3, [r7, #20]
 800aba0:	e001      	b.n	800aba6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aba2:	2300      	movs	r3, #0
 800aba4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d102      	bne.n	800abb2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800abac:	f000 fe3a 	bl	800b824 <xTimerCreateTimerTask>
 800abb0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d118      	bne.n	800abea <vTaskStartScheduler+0x92>
	__asm volatile
 800abb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abbc:	b672      	cpsid	i
 800abbe:	f383 8811 	msr	BASEPRI, r3
 800abc2:	f3bf 8f6f 	isb	sy
 800abc6:	f3bf 8f4f 	dsb	sy
 800abca:	b662      	cpsie	i
 800abcc:	613b      	str	r3, [r7, #16]
}
 800abce:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800abd0:	4b13      	ldr	r3, [pc, #76]	; (800ac20 <vTaskStartScheduler+0xc8>)
 800abd2:	f04f 32ff 	mov.w	r2, #4294967295
 800abd6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800abd8:	4b12      	ldr	r3, [pc, #72]	; (800ac24 <vTaskStartScheduler+0xcc>)
 800abda:	2201      	movs	r2, #1
 800abdc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800abde:	4b12      	ldr	r3, [pc, #72]	; (800ac28 <vTaskStartScheduler+0xd0>)
 800abe0:	2200      	movs	r2, #0
 800abe2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800abe4:	f001 fa0c 	bl	800c000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800abe8:	e010      	b.n	800ac0c <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abf0:	d10c      	bne.n	800ac0c <vTaskStartScheduler+0xb4>
	__asm volatile
 800abf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf6:	b672      	cpsid	i
 800abf8:	f383 8811 	msr	BASEPRI, r3
 800abfc:	f3bf 8f6f 	isb	sy
 800ac00:	f3bf 8f4f 	dsb	sy
 800ac04:	b662      	cpsie	i
 800ac06:	60fb      	str	r3, [r7, #12]
}
 800ac08:	bf00      	nop
 800ac0a:	e7fe      	b.n	800ac0a <vTaskStartScheduler+0xb2>
}
 800ac0c:	bf00      	nop
 800ac0e:	3718      	adds	r7, #24
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	0801c204 	.word	0x0801c204
 800ac18:	0800b289 	.word	0x0800b289
 800ac1c:	20009b8c 	.word	0x20009b8c
 800ac20:	20009b88 	.word	0x20009b88
 800ac24:	20009b74 	.word	0x20009b74
 800ac28:	20009b6c 	.word	0x20009b6c

0800ac2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ac30:	4b04      	ldr	r3, [pc, #16]	; (800ac44 <vTaskSuspendAll+0x18>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	3301      	adds	r3, #1
 800ac36:	4a03      	ldr	r2, [pc, #12]	; (800ac44 <vTaskSuspendAll+0x18>)
 800ac38:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ac3a:	bf00      	nop
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr
 800ac44:	20009b90 	.word	0x20009b90

0800ac48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ac52:	2300      	movs	r3, #0
 800ac54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ac56:	4b43      	ldr	r3, [pc, #268]	; (800ad64 <xTaskResumeAll+0x11c>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d10c      	bne.n	800ac78 <xTaskResumeAll+0x30>
	__asm volatile
 800ac5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac62:	b672      	cpsid	i
 800ac64:	f383 8811 	msr	BASEPRI, r3
 800ac68:	f3bf 8f6f 	isb	sy
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	b662      	cpsie	i
 800ac72:	603b      	str	r3, [r7, #0]
}
 800ac74:	bf00      	nop
 800ac76:	e7fe      	b.n	800ac76 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ac78:	f001 fa40 	bl	800c0fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ac7c:	4b39      	ldr	r3, [pc, #228]	; (800ad64 <xTaskResumeAll+0x11c>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	3b01      	subs	r3, #1
 800ac82:	4a38      	ldr	r2, [pc, #224]	; (800ad64 <xTaskResumeAll+0x11c>)
 800ac84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac86:	4b37      	ldr	r3, [pc, #220]	; (800ad64 <xTaskResumeAll+0x11c>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d162      	bne.n	800ad54 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ac8e:	4b36      	ldr	r3, [pc, #216]	; (800ad68 <xTaskResumeAll+0x120>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d05e      	beq.n	800ad54 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac96:	e02f      	b.n	800acf8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac98:	4b34      	ldr	r3, [pc, #208]	; (800ad6c <xTaskResumeAll+0x124>)
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	68db      	ldr	r3, [r3, #12]
 800ac9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	3318      	adds	r3, #24
 800aca4:	4618      	mov	r0, r3
 800aca6:	f7fe fbfd 	bl	80094a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	3304      	adds	r3, #4
 800acae:	4618      	mov	r0, r3
 800acb0:	f7fe fbf8 	bl	80094a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acb8:	4b2d      	ldr	r3, [pc, #180]	; (800ad70 <xTaskResumeAll+0x128>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d903      	bls.n	800acc8 <xTaskResumeAll+0x80>
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc4:	4a2a      	ldr	r2, [pc, #168]	; (800ad70 <xTaskResumeAll+0x128>)
 800acc6:	6013      	str	r3, [r2, #0]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800accc:	4613      	mov	r3, r2
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	4413      	add	r3, r2
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	4a27      	ldr	r2, [pc, #156]	; (800ad74 <xTaskResumeAll+0x12c>)
 800acd6:	441a      	add	r2, r3
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	3304      	adds	r3, #4
 800acdc:	4619      	mov	r1, r3
 800acde:	4610      	mov	r0, r2
 800ace0:	f7fe fb83 	bl	80093ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ace8:	4b23      	ldr	r3, [pc, #140]	; (800ad78 <xTaskResumeAll+0x130>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acee:	429a      	cmp	r2, r3
 800acf0:	d302      	bcc.n	800acf8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800acf2:	4b22      	ldr	r3, [pc, #136]	; (800ad7c <xTaskResumeAll+0x134>)
 800acf4:	2201      	movs	r2, #1
 800acf6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800acf8:	4b1c      	ldr	r3, [pc, #112]	; (800ad6c <xTaskResumeAll+0x124>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d1cb      	bne.n	800ac98 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d001      	beq.n	800ad0a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ad06:	f000 fb77 	bl	800b3f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ad0a:	4b1d      	ldr	r3, [pc, #116]	; (800ad80 <xTaskResumeAll+0x138>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d010      	beq.n	800ad38 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ad16:	f000 f859 	bl	800adcc <xTaskIncrementTick>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d002      	beq.n	800ad26 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800ad20:	4b16      	ldr	r3, [pc, #88]	; (800ad7c <xTaskResumeAll+0x134>)
 800ad22:	2201      	movs	r2, #1
 800ad24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	3b01      	subs	r3, #1
 800ad2a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d1f1      	bne.n	800ad16 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800ad32:	4b13      	ldr	r3, [pc, #76]	; (800ad80 <xTaskResumeAll+0x138>)
 800ad34:	2200      	movs	r2, #0
 800ad36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ad38:	4b10      	ldr	r3, [pc, #64]	; (800ad7c <xTaskResumeAll+0x134>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d009      	beq.n	800ad54 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ad40:	2301      	movs	r3, #1
 800ad42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ad44:	4b0f      	ldr	r3, [pc, #60]	; (800ad84 <xTaskResumeAll+0x13c>)
 800ad46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad4a:	601a      	str	r2, [r3, #0]
 800ad4c:	f3bf 8f4f 	dsb	sy
 800ad50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ad54:	f001 fa06 	bl	800c164 <vPortExitCritical>

	return xAlreadyYielded;
 800ad58:	68bb      	ldr	r3, [r7, #8]
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	20009b90 	.word	0x20009b90
 800ad68:	20009b68 	.word	0x20009b68
 800ad6c:	20009b28 	.word	0x20009b28
 800ad70:	20009b70 	.word	0x20009b70
 800ad74:	20009698 	.word	0x20009698
 800ad78:	20009694 	.word	0x20009694
 800ad7c:	20009b7c 	.word	0x20009b7c
 800ad80:	20009b78 	.word	0x20009b78
 800ad84:	e000ed04 	.word	0xe000ed04

0800ad88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ad8e:	4b05      	ldr	r3, [pc, #20]	; (800ada4 <xTaskGetTickCount+0x1c>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ad94:	687b      	ldr	r3, [r7, #4]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	370c      	adds	r7, #12
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop
 800ada4:	20009b6c 	.word	0x20009b6c

0800ada8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800adae:	f001 fa8d 	bl	800c2cc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800adb2:	2300      	movs	r3, #0
 800adb4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800adb6:	4b04      	ldr	r3, [pc, #16]	; (800adc8 <xTaskGetTickCountFromISR+0x20>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800adbc:	683b      	ldr	r3, [r7, #0]
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3708      	adds	r7, #8
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	20009b6c 	.word	0x20009b6c

0800adcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b086      	sub	sp, #24
 800add0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800add2:	2300      	movs	r3, #0
 800add4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800add6:	4b50      	ldr	r3, [pc, #320]	; (800af18 <xTaskIncrementTick+0x14c>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	f040 808b 	bne.w	800aef6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ade0:	4b4e      	ldr	r3, [pc, #312]	; (800af1c <xTaskIncrementTick+0x150>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	3301      	adds	r3, #1
 800ade6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ade8:	4a4c      	ldr	r2, [pc, #304]	; (800af1c <xTaskIncrementTick+0x150>)
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d122      	bne.n	800ae3a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800adf4:	4b4a      	ldr	r3, [pc, #296]	; (800af20 <xTaskIncrementTick+0x154>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00c      	beq.n	800ae18 <xTaskIncrementTick+0x4c>
	__asm volatile
 800adfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae02:	b672      	cpsid	i
 800ae04:	f383 8811 	msr	BASEPRI, r3
 800ae08:	f3bf 8f6f 	isb	sy
 800ae0c:	f3bf 8f4f 	dsb	sy
 800ae10:	b662      	cpsie	i
 800ae12:	603b      	str	r3, [r7, #0]
}
 800ae14:	bf00      	nop
 800ae16:	e7fe      	b.n	800ae16 <xTaskIncrementTick+0x4a>
 800ae18:	4b41      	ldr	r3, [pc, #260]	; (800af20 <xTaskIncrementTick+0x154>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	60fb      	str	r3, [r7, #12]
 800ae1e:	4b41      	ldr	r3, [pc, #260]	; (800af24 <xTaskIncrementTick+0x158>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4a3f      	ldr	r2, [pc, #252]	; (800af20 <xTaskIncrementTick+0x154>)
 800ae24:	6013      	str	r3, [r2, #0]
 800ae26:	4a3f      	ldr	r2, [pc, #252]	; (800af24 <xTaskIncrementTick+0x158>)
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	6013      	str	r3, [r2, #0]
 800ae2c:	4b3e      	ldr	r3, [pc, #248]	; (800af28 <xTaskIncrementTick+0x15c>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	3301      	adds	r3, #1
 800ae32:	4a3d      	ldr	r2, [pc, #244]	; (800af28 <xTaskIncrementTick+0x15c>)
 800ae34:	6013      	str	r3, [r2, #0]
 800ae36:	f000 fadf 	bl	800b3f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ae3a:	4b3c      	ldr	r3, [pc, #240]	; (800af2c <xTaskIncrementTick+0x160>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	693a      	ldr	r2, [r7, #16]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d349      	bcc.n	800aed8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae44:	4b36      	ldr	r3, [pc, #216]	; (800af20 <xTaskIncrementTick+0x154>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d104      	bne.n	800ae58 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae4e:	4b37      	ldr	r3, [pc, #220]	; (800af2c <xTaskIncrementTick+0x160>)
 800ae50:	f04f 32ff 	mov.w	r2, #4294967295
 800ae54:	601a      	str	r2, [r3, #0]
					break;
 800ae56:	e03f      	b.n	800aed8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae58:	4b31      	ldr	r3, [pc, #196]	; (800af20 <xTaskIncrementTick+0x154>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	68db      	ldr	r3, [r3, #12]
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ae68:	693a      	ldr	r2, [r7, #16]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d203      	bcs.n	800ae78 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ae70:	4a2e      	ldr	r2, [pc, #184]	; (800af2c <xTaskIncrementTick+0x160>)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ae76:	e02f      	b.n	800aed8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	3304      	adds	r3, #4
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f7fe fb11 	bl	80094a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d004      	beq.n	800ae94 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	3318      	adds	r3, #24
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7fe fb08 	bl	80094a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae98:	4b25      	ldr	r3, [pc, #148]	; (800af30 <xTaskIncrementTick+0x164>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d903      	bls.n	800aea8 <xTaskIncrementTick+0xdc>
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea4:	4a22      	ldr	r2, [pc, #136]	; (800af30 <xTaskIncrementTick+0x164>)
 800aea6:	6013      	str	r3, [r2, #0]
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeac:	4613      	mov	r3, r2
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	4413      	add	r3, r2
 800aeb2:	009b      	lsls	r3, r3, #2
 800aeb4:	4a1f      	ldr	r2, [pc, #124]	; (800af34 <xTaskIncrementTick+0x168>)
 800aeb6:	441a      	add	r2, r3
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	3304      	adds	r3, #4
 800aebc:	4619      	mov	r1, r3
 800aebe:	4610      	mov	r0, r2
 800aec0:	f7fe fa93 	bl	80093ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aec8:	4b1b      	ldr	r3, [pc, #108]	; (800af38 <xTaskIncrementTick+0x16c>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aece:	429a      	cmp	r2, r3
 800aed0:	d3b8      	bcc.n	800ae44 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800aed2:	2301      	movs	r3, #1
 800aed4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aed6:	e7b5      	b.n	800ae44 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aed8:	4b17      	ldr	r3, [pc, #92]	; (800af38 <xTaskIncrementTick+0x16c>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aede:	4915      	ldr	r1, [pc, #84]	; (800af34 <xTaskIncrementTick+0x168>)
 800aee0:	4613      	mov	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	4413      	add	r3, r2
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	440b      	add	r3, r1
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d907      	bls.n	800af00 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800aef0:	2301      	movs	r3, #1
 800aef2:	617b      	str	r3, [r7, #20]
 800aef4:	e004      	b.n	800af00 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800aef6:	4b11      	ldr	r3, [pc, #68]	; (800af3c <xTaskIncrementTick+0x170>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	3301      	adds	r3, #1
 800aefc:	4a0f      	ldr	r2, [pc, #60]	; (800af3c <xTaskIncrementTick+0x170>)
 800aefe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800af00:	4b0f      	ldr	r3, [pc, #60]	; (800af40 <xTaskIncrementTick+0x174>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d001      	beq.n	800af0c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800af08:	2301      	movs	r3, #1
 800af0a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800af0c:	697b      	ldr	r3, [r7, #20]
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3718      	adds	r7, #24
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	20009b90 	.word	0x20009b90
 800af1c:	20009b6c 	.word	0x20009b6c
 800af20:	20009b20 	.word	0x20009b20
 800af24:	20009b24 	.word	0x20009b24
 800af28:	20009b80 	.word	0x20009b80
 800af2c:	20009b88 	.word	0x20009b88
 800af30:	20009b70 	.word	0x20009b70
 800af34:	20009698 	.word	0x20009698
 800af38:	20009694 	.word	0x20009694
 800af3c:	20009b78 	.word	0x20009b78
 800af40:	20009b7c 	.word	0x20009b7c

0800af44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800af44:	b480      	push	{r7}
 800af46:	b085      	sub	sp, #20
 800af48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800af4a:	4b29      	ldr	r3, [pc, #164]	; (800aff0 <vTaskSwitchContext+0xac>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d003      	beq.n	800af5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800af52:	4b28      	ldr	r3, [pc, #160]	; (800aff4 <vTaskSwitchContext+0xb0>)
 800af54:	2201      	movs	r2, #1
 800af56:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800af58:	e043      	b.n	800afe2 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800af5a:	4b26      	ldr	r3, [pc, #152]	; (800aff4 <vTaskSwitchContext+0xb0>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af60:	4b25      	ldr	r3, [pc, #148]	; (800aff8 <vTaskSwitchContext+0xb4>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	60fb      	str	r3, [r7, #12]
 800af66:	e012      	b.n	800af8e <vTaskSwitchContext+0x4a>
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d10c      	bne.n	800af88 <vTaskSwitchContext+0x44>
	__asm volatile
 800af6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af72:	b672      	cpsid	i
 800af74:	f383 8811 	msr	BASEPRI, r3
 800af78:	f3bf 8f6f 	isb	sy
 800af7c:	f3bf 8f4f 	dsb	sy
 800af80:	b662      	cpsie	i
 800af82:	607b      	str	r3, [r7, #4]
}
 800af84:	bf00      	nop
 800af86:	e7fe      	b.n	800af86 <vTaskSwitchContext+0x42>
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	3b01      	subs	r3, #1
 800af8c:	60fb      	str	r3, [r7, #12]
 800af8e:	491b      	ldr	r1, [pc, #108]	; (800affc <vTaskSwitchContext+0xb8>)
 800af90:	68fa      	ldr	r2, [r7, #12]
 800af92:	4613      	mov	r3, r2
 800af94:	009b      	lsls	r3, r3, #2
 800af96:	4413      	add	r3, r2
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	440b      	add	r3, r1
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d0e2      	beq.n	800af68 <vTaskSwitchContext+0x24>
 800afa2:	68fa      	ldr	r2, [r7, #12]
 800afa4:	4613      	mov	r3, r2
 800afa6:	009b      	lsls	r3, r3, #2
 800afa8:	4413      	add	r3, r2
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	4a13      	ldr	r2, [pc, #76]	; (800affc <vTaskSwitchContext+0xb8>)
 800afae:	4413      	add	r3, r2
 800afb0:	60bb      	str	r3, [r7, #8]
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	685a      	ldr	r2, [r3, #4]
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	605a      	str	r2, [r3, #4]
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	685a      	ldr	r2, [r3, #4]
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	3308      	adds	r3, #8
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d104      	bne.n	800afd2 <vTaskSwitchContext+0x8e>
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	685a      	ldr	r2, [r3, #4]
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	605a      	str	r2, [r3, #4]
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	68db      	ldr	r3, [r3, #12]
 800afd8:	4a09      	ldr	r2, [pc, #36]	; (800b000 <vTaskSwitchContext+0xbc>)
 800afda:	6013      	str	r3, [r2, #0]
 800afdc:	4a06      	ldr	r2, [pc, #24]	; (800aff8 <vTaskSwitchContext+0xb4>)
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	6013      	str	r3, [r2, #0]
}
 800afe2:	bf00      	nop
 800afe4:	3714      	adds	r7, #20
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr
 800afee:	bf00      	nop
 800aff0:	20009b90 	.word	0x20009b90
 800aff4:	20009b7c 	.word	0x20009b7c
 800aff8:	20009b70 	.word	0x20009b70
 800affc:	20009698 	.word	0x20009698
 800b000:	20009694 	.word	0x20009694

0800b004 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d10c      	bne.n	800b02e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800b014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b018:	b672      	cpsid	i
 800b01a:	f383 8811 	msr	BASEPRI, r3
 800b01e:	f3bf 8f6f 	isb	sy
 800b022:	f3bf 8f4f 	dsb	sy
 800b026:	b662      	cpsie	i
 800b028:	60fb      	str	r3, [r7, #12]
}
 800b02a:	bf00      	nop
 800b02c:	e7fe      	b.n	800b02c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b02e:	4b07      	ldr	r3, [pc, #28]	; (800b04c <vTaskPlaceOnEventList+0x48>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	3318      	adds	r3, #24
 800b034:	4619      	mov	r1, r3
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f7fe f9fb 	bl	8009432 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b03c:	2101      	movs	r1, #1
 800b03e:	6838      	ldr	r0, [r7, #0]
 800b040:	f000 fb9c 	bl	800b77c <prvAddCurrentTaskToDelayedList>
}
 800b044:	bf00      	nop
 800b046:	3710      	adds	r7, #16
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	20009694 	.word	0x20009694

0800b050 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b050:	b580      	push	{r7, lr}
 800b052:	b086      	sub	sp, #24
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	60b9      	str	r1, [r7, #8]
 800b05a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d10c      	bne.n	800b07c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800b062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b066:	b672      	cpsid	i
 800b068:	f383 8811 	msr	BASEPRI, r3
 800b06c:	f3bf 8f6f 	isb	sy
 800b070:	f3bf 8f4f 	dsb	sy
 800b074:	b662      	cpsie	i
 800b076:	617b      	str	r3, [r7, #20]
}
 800b078:	bf00      	nop
 800b07a:	e7fe      	b.n	800b07a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b07c:	4b0a      	ldr	r3, [pc, #40]	; (800b0a8 <vTaskPlaceOnEventListRestricted+0x58>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	3318      	adds	r3, #24
 800b082:	4619      	mov	r1, r3
 800b084:	68f8      	ldr	r0, [r7, #12]
 800b086:	f7fe f9b0 	bl	80093ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d002      	beq.n	800b096 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800b090:	f04f 33ff 	mov.w	r3, #4294967295
 800b094:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b096:	6879      	ldr	r1, [r7, #4]
 800b098:	68b8      	ldr	r0, [r7, #8]
 800b09a:	f000 fb6f 	bl	800b77c <prvAddCurrentTaskToDelayedList>
	}
 800b09e:	bf00      	nop
 800b0a0:	3718      	adds	r7, #24
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	20009694 	.word	0x20009694

0800b0ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b086      	sub	sp, #24
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	68db      	ldr	r3, [r3, #12]
 800b0b8:	68db      	ldr	r3, [r3, #12]
 800b0ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d10c      	bne.n	800b0dc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800b0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c6:	b672      	cpsid	i
 800b0c8:	f383 8811 	msr	BASEPRI, r3
 800b0cc:	f3bf 8f6f 	isb	sy
 800b0d0:	f3bf 8f4f 	dsb	sy
 800b0d4:	b662      	cpsie	i
 800b0d6:	60fb      	str	r3, [r7, #12]
}
 800b0d8:	bf00      	nop
 800b0da:	e7fe      	b.n	800b0da <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	3318      	adds	r3, #24
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7fe f9df 	bl	80094a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0e6:	4b1e      	ldr	r3, [pc, #120]	; (800b160 <xTaskRemoveFromEventList+0xb4>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d11d      	bne.n	800b12a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	3304      	adds	r3, #4
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7fe f9d6 	bl	80094a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0fc:	4b19      	ldr	r3, [pc, #100]	; (800b164 <xTaskRemoveFromEventList+0xb8>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	429a      	cmp	r2, r3
 800b102:	d903      	bls.n	800b10c <xTaskRemoveFromEventList+0x60>
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b108:	4a16      	ldr	r2, [pc, #88]	; (800b164 <xTaskRemoveFromEventList+0xb8>)
 800b10a:	6013      	str	r3, [r2, #0]
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b110:	4613      	mov	r3, r2
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	4413      	add	r3, r2
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	4a13      	ldr	r2, [pc, #76]	; (800b168 <xTaskRemoveFromEventList+0xbc>)
 800b11a:	441a      	add	r2, r3
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	3304      	adds	r3, #4
 800b120:	4619      	mov	r1, r3
 800b122:	4610      	mov	r0, r2
 800b124:	f7fe f961 	bl	80093ea <vListInsertEnd>
 800b128:	e005      	b.n	800b136 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	3318      	adds	r3, #24
 800b12e:	4619      	mov	r1, r3
 800b130:	480e      	ldr	r0, [pc, #56]	; (800b16c <xTaskRemoveFromEventList+0xc0>)
 800b132:	f7fe f95a 	bl	80093ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b13a:	4b0d      	ldr	r3, [pc, #52]	; (800b170 <xTaskRemoveFromEventList+0xc4>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b140:	429a      	cmp	r2, r3
 800b142:	d905      	bls.n	800b150 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b144:	2301      	movs	r3, #1
 800b146:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b148:	4b0a      	ldr	r3, [pc, #40]	; (800b174 <xTaskRemoveFromEventList+0xc8>)
 800b14a:	2201      	movs	r2, #1
 800b14c:	601a      	str	r2, [r3, #0]
 800b14e:	e001      	b.n	800b154 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800b150:	2300      	movs	r3, #0
 800b152:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b154:	697b      	ldr	r3, [r7, #20]
}
 800b156:	4618      	mov	r0, r3
 800b158:	3718      	adds	r7, #24
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	20009b90 	.word	0x20009b90
 800b164:	20009b70 	.word	0x20009b70
 800b168:	20009698 	.word	0x20009698
 800b16c:	20009b28 	.word	0x20009b28
 800b170:	20009694 	.word	0x20009694
 800b174:	20009b7c 	.word	0x20009b7c

0800b178 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b180:	4b06      	ldr	r3, [pc, #24]	; (800b19c <vTaskInternalSetTimeOutState+0x24>)
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b188:	4b05      	ldr	r3, [pc, #20]	; (800b1a0 <vTaskInternalSetTimeOutState+0x28>)
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	605a      	str	r2, [r3, #4]
}
 800b190:	bf00      	nop
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr
 800b19c:	20009b80 	.word	0x20009b80
 800b1a0:	20009b6c 	.word	0x20009b6c

0800b1a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b088      	sub	sp, #32
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d10c      	bne.n	800b1ce <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800b1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b8:	b672      	cpsid	i
 800b1ba:	f383 8811 	msr	BASEPRI, r3
 800b1be:	f3bf 8f6f 	isb	sy
 800b1c2:	f3bf 8f4f 	dsb	sy
 800b1c6:	b662      	cpsie	i
 800b1c8:	613b      	str	r3, [r7, #16]
}
 800b1ca:	bf00      	nop
 800b1cc:	e7fe      	b.n	800b1cc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d10c      	bne.n	800b1ee <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800b1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d8:	b672      	cpsid	i
 800b1da:	f383 8811 	msr	BASEPRI, r3
 800b1de:	f3bf 8f6f 	isb	sy
 800b1e2:	f3bf 8f4f 	dsb	sy
 800b1e6:	b662      	cpsie	i
 800b1e8:	60fb      	str	r3, [r7, #12]
}
 800b1ea:	bf00      	nop
 800b1ec:	e7fe      	b.n	800b1ec <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800b1ee:	f000 ff85 	bl	800c0fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b1f2:	4b1d      	ldr	r3, [pc, #116]	; (800b268 <xTaskCheckForTimeOut+0xc4>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	69ba      	ldr	r2, [r7, #24]
 800b1fe:	1ad3      	subs	r3, r2, r3
 800b200:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b20a:	d102      	bne.n	800b212 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b20c:	2300      	movs	r3, #0
 800b20e:	61fb      	str	r3, [r7, #28]
 800b210:	e023      	b.n	800b25a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	4b15      	ldr	r3, [pc, #84]	; (800b26c <xTaskCheckForTimeOut+0xc8>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d007      	beq.n	800b22e <xTaskCheckForTimeOut+0x8a>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	69ba      	ldr	r2, [r7, #24]
 800b224:	429a      	cmp	r2, r3
 800b226:	d302      	bcc.n	800b22e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b228:	2301      	movs	r3, #1
 800b22a:	61fb      	str	r3, [r7, #28]
 800b22c:	e015      	b.n	800b25a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	697a      	ldr	r2, [r7, #20]
 800b234:	429a      	cmp	r2, r3
 800b236:	d20b      	bcs.n	800b250 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	1ad2      	subs	r2, r2, r3
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f7ff ff97 	bl	800b178 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b24a:	2300      	movs	r3, #0
 800b24c:	61fb      	str	r3, [r7, #28]
 800b24e:	e004      	b.n	800b25a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	2200      	movs	r2, #0
 800b254:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b256:	2301      	movs	r3, #1
 800b258:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b25a:	f000 ff83 	bl	800c164 <vPortExitCritical>

	return xReturn;
 800b25e:	69fb      	ldr	r3, [r7, #28]
}
 800b260:	4618      	mov	r0, r3
 800b262:	3720      	adds	r7, #32
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}
 800b268:	20009b6c 	.word	0x20009b6c
 800b26c:	20009b80 	.word	0x20009b80

0800b270 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b270:	b480      	push	{r7}
 800b272:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b274:	4b03      	ldr	r3, [pc, #12]	; (800b284 <vTaskMissedYield+0x14>)
 800b276:	2201      	movs	r2, #1
 800b278:	601a      	str	r2, [r3, #0]
}
 800b27a:	bf00      	nop
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr
 800b284:	20009b7c 	.word	0x20009b7c

0800b288 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b290:	f000 f852 	bl	800b338 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b294:	4b06      	ldr	r3, [pc, #24]	; (800b2b0 <prvIdleTask+0x28>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d9f9      	bls.n	800b290 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b29c:	4b05      	ldr	r3, [pc, #20]	; (800b2b4 <prvIdleTask+0x2c>)
 800b29e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2a2:	601a      	str	r2, [r3, #0]
 800b2a4:	f3bf 8f4f 	dsb	sy
 800b2a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b2ac:	e7f0      	b.n	800b290 <prvIdleTask+0x8>
 800b2ae:	bf00      	nop
 800b2b0:	20009698 	.word	0x20009698
 800b2b4:	e000ed04 	.word	0xe000ed04

0800b2b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b2be:	2300      	movs	r3, #0
 800b2c0:	607b      	str	r3, [r7, #4]
 800b2c2:	e00c      	b.n	800b2de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	4613      	mov	r3, r2
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	4413      	add	r3, r2
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	4a12      	ldr	r2, [pc, #72]	; (800b318 <prvInitialiseTaskLists+0x60>)
 800b2d0:	4413      	add	r3, r2
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f7fe f85c 	bl	8009390 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	607b      	str	r3, [r7, #4]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2b37      	cmp	r3, #55	; 0x37
 800b2e2:	d9ef      	bls.n	800b2c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b2e4:	480d      	ldr	r0, [pc, #52]	; (800b31c <prvInitialiseTaskLists+0x64>)
 800b2e6:	f7fe f853 	bl	8009390 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b2ea:	480d      	ldr	r0, [pc, #52]	; (800b320 <prvInitialiseTaskLists+0x68>)
 800b2ec:	f7fe f850 	bl	8009390 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b2f0:	480c      	ldr	r0, [pc, #48]	; (800b324 <prvInitialiseTaskLists+0x6c>)
 800b2f2:	f7fe f84d 	bl	8009390 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b2f6:	480c      	ldr	r0, [pc, #48]	; (800b328 <prvInitialiseTaskLists+0x70>)
 800b2f8:	f7fe f84a 	bl	8009390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b2fc:	480b      	ldr	r0, [pc, #44]	; (800b32c <prvInitialiseTaskLists+0x74>)
 800b2fe:	f7fe f847 	bl	8009390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b302:	4b0b      	ldr	r3, [pc, #44]	; (800b330 <prvInitialiseTaskLists+0x78>)
 800b304:	4a05      	ldr	r2, [pc, #20]	; (800b31c <prvInitialiseTaskLists+0x64>)
 800b306:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b308:	4b0a      	ldr	r3, [pc, #40]	; (800b334 <prvInitialiseTaskLists+0x7c>)
 800b30a:	4a05      	ldr	r2, [pc, #20]	; (800b320 <prvInitialiseTaskLists+0x68>)
 800b30c:	601a      	str	r2, [r3, #0]
}
 800b30e:	bf00      	nop
 800b310:	3708      	adds	r7, #8
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	20009698 	.word	0x20009698
 800b31c:	20009af8 	.word	0x20009af8
 800b320:	20009b0c 	.word	0x20009b0c
 800b324:	20009b28 	.word	0x20009b28
 800b328:	20009b3c 	.word	0x20009b3c
 800b32c:	20009b54 	.word	0x20009b54
 800b330:	20009b20 	.word	0x20009b20
 800b334:	20009b24 	.word	0x20009b24

0800b338 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b33e:	e019      	b.n	800b374 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b340:	f000 fedc 	bl	800c0fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b344:	4b10      	ldr	r3, [pc, #64]	; (800b388 <prvCheckTasksWaitingTermination+0x50>)
 800b346:	68db      	ldr	r3, [r3, #12]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	3304      	adds	r3, #4
 800b350:	4618      	mov	r0, r3
 800b352:	f7fe f8a7 	bl	80094a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b356:	4b0d      	ldr	r3, [pc, #52]	; (800b38c <prvCheckTasksWaitingTermination+0x54>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	3b01      	subs	r3, #1
 800b35c:	4a0b      	ldr	r2, [pc, #44]	; (800b38c <prvCheckTasksWaitingTermination+0x54>)
 800b35e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b360:	4b0b      	ldr	r3, [pc, #44]	; (800b390 <prvCheckTasksWaitingTermination+0x58>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	3b01      	subs	r3, #1
 800b366:	4a0a      	ldr	r2, [pc, #40]	; (800b390 <prvCheckTasksWaitingTermination+0x58>)
 800b368:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b36a:	f000 fefb 	bl	800c164 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 f810 	bl	800b394 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b374:	4b06      	ldr	r3, [pc, #24]	; (800b390 <prvCheckTasksWaitingTermination+0x58>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d1e1      	bne.n	800b340 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b37c:	bf00      	nop
 800b37e:	bf00      	nop
 800b380:	3708      	adds	r7, #8
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	20009b3c 	.word	0x20009b3c
 800b38c:	20009b68 	.word	0x20009b68
 800b390:	20009b50 	.word	0x20009b50

0800b394 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d108      	bne.n	800b3b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f001 f89c 	bl	800c4e8 <vPortFree>
				vPortFree( pxTCB );
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f001 f899 	bl	800c4e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b3b6:	e01a      	b.n	800b3ee <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d103      	bne.n	800b3ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f001 f890 	bl	800c4e8 <vPortFree>
	}
 800b3c8:	e011      	b.n	800b3ee <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b3d0:	2b02      	cmp	r3, #2
 800b3d2:	d00c      	beq.n	800b3ee <prvDeleteTCB+0x5a>
	__asm volatile
 800b3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d8:	b672      	cpsid	i
 800b3da:	f383 8811 	msr	BASEPRI, r3
 800b3de:	f3bf 8f6f 	isb	sy
 800b3e2:	f3bf 8f4f 	dsb	sy
 800b3e6:	b662      	cpsie	i
 800b3e8:	60fb      	str	r3, [r7, #12]
}
 800b3ea:	bf00      	nop
 800b3ec:	e7fe      	b.n	800b3ec <prvDeleteTCB+0x58>
	}
 800b3ee:	bf00      	nop
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
	...

0800b3f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3fe:	4b0c      	ldr	r3, [pc, #48]	; (800b430 <prvResetNextTaskUnblockTime+0x38>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d104      	bne.n	800b412 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b408:	4b0a      	ldr	r3, [pc, #40]	; (800b434 <prvResetNextTaskUnblockTime+0x3c>)
 800b40a:	f04f 32ff 	mov.w	r2, #4294967295
 800b40e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b410:	e008      	b.n	800b424 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b412:	4b07      	ldr	r3, [pc, #28]	; (800b430 <prvResetNextTaskUnblockTime+0x38>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	68db      	ldr	r3, [r3, #12]
 800b418:	68db      	ldr	r3, [r3, #12]
 800b41a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	4a04      	ldr	r2, [pc, #16]	; (800b434 <prvResetNextTaskUnblockTime+0x3c>)
 800b422:	6013      	str	r3, [r2, #0]
}
 800b424:	bf00      	nop
 800b426:	370c      	adds	r7, #12
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr
 800b430:	20009b20 	.word	0x20009b20
 800b434:	20009b88 	.word	0x20009b88

0800b438 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b438:	b480      	push	{r7}
 800b43a:	b083      	sub	sp, #12
 800b43c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b43e:	4b05      	ldr	r3, [pc, #20]	; (800b454 <xTaskGetCurrentTaskHandle+0x1c>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b444:	687b      	ldr	r3, [r7, #4]
	}
 800b446:	4618      	mov	r0, r3
 800b448:	370c      	adds	r7, #12
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr
 800b452:	bf00      	nop
 800b454:	20009694 	.word	0x20009694

0800b458 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b458:	b480      	push	{r7}
 800b45a:	b083      	sub	sp, #12
 800b45c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b45e:	4b0b      	ldr	r3, [pc, #44]	; (800b48c <xTaskGetSchedulerState+0x34>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d102      	bne.n	800b46c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b466:	2301      	movs	r3, #1
 800b468:	607b      	str	r3, [r7, #4]
 800b46a:	e008      	b.n	800b47e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b46c:	4b08      	ldr	r3, [pc, #32]	; (800b490 <xTaskGetSchedulerState+0x38>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d102      	bne.n	800b47a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b474:	2302      	movs	r3, #2
 800b476:	607b      	str	r3, [r7, #4]
 800b478:	e001      	b.n	800b47e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b47a:	2300      	movs	r3, #0
 800b47c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b47e:	687b      	ldr	r3, [r7, #4]
	}
 800b480:	4618      	mov	r0, r3
 800b482:	370c      	adds	r7, #12
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr
 800b48c:	20009b74 	.word	0x20009b74
 800b490:	20009b90 	.word	0x20009b90

0800b494 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d051      	beq.n	800b54e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ae:	4b2a      	ldr	r3, [pc, #168]	; (800b558 <xTaskPriorityInherit+0xc4>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d241      	bcs.n	800b53c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	699b      	ldr	r3, [r3, #24]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	db06      	blt.n	800b4ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4c0:	4b25      	ldr	r3, [pc, #148]	; (800b558 <xTaskPriorityInherit+0xc4>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	6959      	ldr	r1, [r3, #20]
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4d6:	4613      	mov	r3, r2
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	4413      	add	r3, r2
 800b4dc:	009b      	lsls	r3, r3, #2
 800b4de:	4a1f      	ldr	r2, [pc, #124]	; (800b55c <xTaskPriorityInherit+0xc8>)
 800b4e0:	4413      	add	r3, r2
 800b4e2:	4299      	cmp	r1, r3
 800b4e4:	d122      	bne.n	800b52c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	3304      	adds	r3, #4
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7fd ffda 	bl	80094a4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b4f0:	4b19      	ldr	r3, [pc, #100]	; (800b558 <xTaskPriorityInherit+0xc4>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4fe:	4b18      	ldr	r3, [pc, #96]	; (800b560 <xTaskPriorityInherit+0xcc>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	429a      	cmp	r2, r3
 800b504:	d903      	bls.n	800b50e <xTaskPriorityInherit+0x7a>
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b50a:	4a15      	ldr	r2, [pc, #84]	; (800b560 <xTaskPriorityInherit+0xcc>)
 800b50c:	6013      	str	r3, [r2, #0]
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b512:	4613      	mov	r3, r2
 800b514:	009b      	lsls	r3, r3, #2
 800b516:	4413      	add	r3, r2
 800b518:	009b      	lsls	r3, r3, #2
 800b51a:	4a10      	ldr	r2, [pc, #64]	; (800b55c <xTaskPriorityInherit+0xc8>)
 800b51c:	441a      	add	r2, r3
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	3304      	adds	r3, #4
 800b522:	4619      	mov	r1, r3
 800b524:	4610      	mov	r0, r2
 800b526:	f7fd ff60 	bl	80093ea <vListInsertEnd>
 800b52a:	e004      	b.n	800b536 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b52c:	4b0a      	ldr	r3, [pc, #40]	; (800b558 <xTaskPriorityInherit+0xc4>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b536:	2301      	movs	r3, #1
 800b538:	60fb      	str	r3, [r7, #12]
 800b53a:	e008      	b.n	800b54e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b540:	4b05      	ldr	r3, [pc, #20]	; (800b558 <xTaskPriorityInherit+0xc4>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b546:	429a      	cmp	r2, r3
 800b548:	d201      	bcs.n	800b54e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b54a:	2301      	movs	r3, #1
 800b54c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b54e:	68fb      	ldr	r3, [r7, #12]
	}
 800b550:	4618      	mov	r0, r3
 800b552:	3710      	adds	r7, #16
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}
 800b558:	20009694 	.word	0x20009694
 800b55c:	20009698 	.word	0x20009698
 800b560:	20009b70 	.word	0x20009b70

0800b564 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b564:	b580      	push	{r7, lr}
 800b566:	b086      	sub	sp, #24
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b570:	2300      	movs	r3, #0
 800b572:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d05a      	beq.n	800b630 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b57a:	4b30      	ldr	r3, [pc, #192]	; (800b63c <xTaskPriorityDisinherit+0xd8>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	693a      	ldr	r2, [r7, #16]
 800b580:	429a      	cmp	r2, r3
 800b582:	d00c      	beq.n	800b59e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800b584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b588:	b672      	cpsid	i
 800b58a:	f383 8811 	msr	BASEPRI, r3
 800b58e:	f3bf 8f6f 	isb	sy
 800b592:	f3bf 8f4f 	dsb	sy
 800b596:	b662      	cpsie	i
 800b598:	60fb      	str	r3, [r7, #12]
}
 800b59a:	bf00      	nop
 800b59c:	e7fe      	b.n	800b59c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d10c      	bne.n	800b5c0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800b5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5aa:	b672      	cpsid	i
 800b5ac:	f383 8811 	msr	BASEPRI, r3
 800b5b0:	f3bf 8f6f 	isb	sy
 800b5b4:	f3bf 8f4f 	dsb	sy
 800b5b8:	b662      	cpsie	i
 800b5ba:	60bb      	str	r3, [r7, #8]
}
 800b5bc:	bf00      	nop
 800b5be:	e7fe      	b.n	800b5be <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5c4:	1e5a      	subs	r2, r3, #1
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d02c      	beq.n	800b630 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d128      	bne.n	800b630 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	3304      	adds	r3, #4
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7fd ff5e 	bl	80094a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b600:	4b0f      	ldr	r3, [pc, #60]	; (800b640 <xTaskPriorityDisinherit+0xdc>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	429a      	cmp	r2, r3
 800b606:	d903      	bls.n	800b610 <xTaskPriorityDisinherit+0xac>
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b60c:	4a0c      	ldr	r2, [pc, #48]	; (800b640 <xTaskPriorityDisinherit+0xdc>)
 800b60e:	6013      	str	r3, [r2, #0]
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b614:	4613      	mov	r3, r2
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	4413      	add	r3, r2
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	4a09      	ldr	r2, [pc, #36]	; (800b644 <xTaskPriorityDisinherit+0xe0>)
 800b61e:	441a      	add	r2, r3
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	3304      	adds	r3, #4
 800b624:	4619      	mov	r1, r3
 800b626:	4610      	mov	r0, r2
 800b628:	f7fd fedf 	bl	80093ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b62c:	2301      	movs	r3, #1
 800b62e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b630:	697b      	ldr	r3, [r7, #20]
	}
 800b632:	4618      	mov	r0, r3
 800b634:	3718      	adds	r7, #24
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	20009694 	.word	0x20009694
 800b640:	20009b70 	.word	0x20009b70
 800b644:	20009698 	.word	0x20009698

0800b648 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b088      	sub	sp, #32
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b656:	2301      	movs	r3, #1
 800b658:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d06e      	beq.n	800b73e <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b660:	69bb      	ldr	r3, [r7, #24]
 800b662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b664:	2b00      	cmp	r3, #0
 800b666:	d10c      	bne.n	800b682 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800b668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b66c:	b672      	cpsid	i
 800b66e:	f383 8811 	msr	BASEPRI, r3
 800b672:	f3bf 8f6f 	isb	sy
 800b676:	f3bf 8f4f 	dsb	sy
 800b67a:	b662      	cpsie	i
 800b67c:	60fb      	str	r3, [r7, #12]
}
 800b67e:	bf00      	nop
 800b680:	e7fe      	b.n	800b680 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b682:	69bb      	ldr	r3, [r7, #24]
 800b684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b686:	683a      	ldr	r2, [r7, #0]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d902      	bls.n	800b692 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	61fb      	str	r3, [r7, #28]
 800b690:	e002      	b.n	800b698 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b696:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b698:	69bb      	ldr	r3, [r7, #24]
 800b69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b69c:	69fa      	ldr	r2, [r7, #28]
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d04d      	beq.n	800b73e <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b6a2:	69bb      	ldr	r3, [r7, #24]
 800b6a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6a6:	697a      	ldr	r2, [r7, #20]
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d148      	bne.n	800b73e <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b6ac:	4b26      	ldr	r3, [pc, #152]	; (800b748 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	69ba      	ldr	r2, [r7, #24]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d10c      	bne.n	800b6d0 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800b6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ba:	b672      	cpsid	i
 800b6bc:	f383 8811 	msr	BASEPRI, r3
 800b6c0:	f3bf 8f6f 	isb	sy
 800b6c4:	f3bf 8f4f 	dsb	sy
 800b6c8:	b662      	cpsie	i
 800b6ca:	60bb      	str	r3, [r7, #8]
}
 800b6cc:	bf00      	nop
 800b6ce:	e7fe      	b.n	800b6ce <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	69fa      	ldr	r2, [r7, #28]
 800b6da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b6dc:	69bb      	ldr	r3, [r7, #24]
 800b6de:	699b      	ldr	r3, [r3, #24]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	db04      	blt.n	800b6ee <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b6ea:	69bb      	ldr	r3, [r7, #24]
 800b6ec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b6ee:	69bb      	ldr	r3, [r7, #24]
 800b6f0:	6959      	ldr	r1, [r3, #20]
 800b6f2:	693a      	ldr	r2, [r7, #16]
 800b6f4:	4613      	mov	r3, r2
 800b6f6:	009b      	lsls	r3, r3, #2
 800b6f8:	4413      	add	r3, r2
 800b6fa:	009b      	lsls	r3, r3, #2
 800b6fc:	4a13      	ldr	r2, [pc, #76]	; (800b74c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b6fe:	4413      	add	r3, r2
 800b700:	4299      	cmp	r1, r3
 800b702:	d11c      	bne.n	800b73e <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	3304      	adds	r3, #4
 800b708:	4618      	mov	r0, r3
 800b70a:	f7fd fecb 	bl	80094a4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b712:	4b0f      	ldr	r3, [pc, #60]	; (800b750 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	429a      	cmp	r2, r3
 800b718:	d903      	bls.n	800b722 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800b71a:	69bb      	ldr	r3, [r7, #24]
 800b71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b71e:	4a0c      	ldr	r2, [pc, #48]	; (800b750 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b720:	6013      	str	r3, [r2, #0]
 800b722:	69bb      	ldr	r3, [r7, #24]
 800b724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b726:	4613      	mov	r3, r2
 800b728:	009b      	lsls	r3, r3, #2
 800b72a:	4413      	add	r3, r2
 800b72c:	009b      	lsls	r3, r3, #2
 800b72e:	4a07      	ldr	r2, [pc, #28]	; (800b74c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b730:	441a      	add	r2, r3
 800b732:	69bb      	ldr	r3, [r7, #24]
 800b734:	3304      	adds	r3, #4
 800b736:	4619      	mov	r1, r3
 800b738:	4610      	mov	r0, r2
 800b73a:	f7fd fe56 	bl	80093ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b73e:	bf00      	nop
 800b740:	3720      	adds	r7, #32
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	20009694 	.word	0x20009694
 800b74c:	20009698 	.word	0x20009698
 800b750:	20009b70 	.word	0x20009b70

0800b754 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b754:	b480      	push	{r7}
 800b756:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b758:	4b07      	ldr	r3, [pc, #28]	; (800b778 <pvTaskIncrementMutexHeldCount+0x24>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d004      	beq.n	800b76a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b760:	4b05      	ldr	r3, [pc, #20]	; (800b778 <pvTaskIncrementMutexHeldCount+0x24>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b766:	3201      	adds	r2, #1
 800b768:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b76a:	4b03      	ldr	r3, [pc, #12]	; (800b778 <pvTaskIncrementMutexHeldCount+0x24>)
 800b76c:	681b      	ldr	r3, [r3, #0]
	}
 800b76e:	4618      	mov	r0, r3
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr
 800b778:	20009694 	.word	0x20009694

0800b77c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b786:	4b21      	ldr	r3, [pc, #132]	; (800b80c <prvAddCurrentTaskToDelayedList+0x90>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b78c:	4b20      	ldr	r3, [pc, #128]	; (800b810 <prvAddCurrentTaskToDelayedList+0x94>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	3304      	adds	r3, #4
 800b792:	4618      	mov	r0, r3
 800b794:	f7fd fe86 	bl	80094a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b79e:	d10a      	bne.n	800b7b6 <prvAddCurrentTaskToDelayedList+0x3a>
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d007      	beq.n	800b7b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7a6:	4b1a      	ldr	r3, [pc, #104]	; (800b810 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	3304      	adds	r3, #4
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	4819      	ldr	r0, [pc, #100]	; (800b814 <prvAddCurrentTaskToDelayedList+0x98>)
 800b7b0:	f7fd fe1b 	bl	80093ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b7b4:	e026      	b.n	800b804 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b7be:	4b14      	ldr	r3, [pc, #80]	; (800b810 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	68ba      	ldr	r2, [r7, #8]
 800b7c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b7c6:	68ba      	ldr	r2, [r7, #8]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d209      	bcs.n	800b7e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7ce:	4b12      	ldr	r3, [pc, #72]	; (800b818 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b7d0:	681a      	ldr	r2, [r3, #0]
 800b7d2:	4b0f      	ldr	r3, [pc, #60]	; (800b810 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	3304      	adds	r3, #4
 800b7d8:	4619      	mov	r1, r3
 800b7da:	4610      	mov	r0, r2
 800b7dc:	f7fd fe29 	bl	8009432 <vListInsert>
}
 800b7e0:	e010      	b.n	800b804 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7e2:	4b0e      	ldr	r3, [pc, #56]	; (800b81c <prvAddCurrentTaskToDelayedList+0xa0>)
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	4b0a      	ldr	r3, [pc, #40]	; (800b810 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	3304      	adds	r3, #4
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	4610      	mov	r0, r2
 800b7f0:	f7fd fe1f 	bl	8009432 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b7f4:	4b0a      	ldr	r3, [pc, #40]	; (800b820 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	68ba      	ldr	r2, [r7, #8]
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d202      	bcs.n	800b804 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b7fe:	4a08      	ldr	r2, [pc, #32]	; (800b820 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	6013      	str	r3, [r2, #0]
}
 800b804:	bf00      	nop
 800b806:	3710      	adds	r7, #16
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}
 800b80c:	20009b6c 	.word	0x20009b6c
 800b810:	20009694 	.word	0x20009694
 800b814:	20009b54 	.word	0x20009b54
 800b818:	20009b24 	.word	0x20009b24
 800b81c:	20009b20 	.word	0x20009b20
 800b820:	20009b88 	.word	0x20009b88

0800b824 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b08a      	sub	sp, #40	; 0x28
 800b828:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b82a:	2300      	movs	r3, #0
 800b82c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b82e:	f000 fb15 	bl	800be5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b832:	4b1d      	ldr	r3, [pc, #116]	; (800b8a8 <xTimerCreateTimerTask+0x84>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d021      	beq.n	800b87e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b83a:	2300      	movs	r3, #0
 800b83c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b83e:	2300      	movs	r3, #0
 800b840:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b842:	1d3a      	adds	r2, r7, #4
 800b844:	f107 0108 	add.w	r1, r7, #8
 800b848:	f107 030c 	add.w	r3, r7, #12
 800b84c:	4618      	mov	r0, r3
 800b84e:	f7fd fd85 	bl	800935c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b852:	6879      	ldr	r1, [r7, #4]
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	68fa      	ldr	r2, [r7, #12]
 800b858:	9202      	str	r2, [sp, #8]
 800b85a:	9301      	str	r3, [sp, #4]
 800b85c:	2302      	movs	r3, #2
 800b85e:	9300      	str	r3, [sp, #0]
 800b860:	2300      	movs	r3, #0
 800b862:	460a      	mov	r2, r1
 800b864:	4911      	ldr	r1, [pc, #68]	; (800b8ac <xTimerCreateTimerTask+0x88>)
 800b866:	4812      	ldr	r0, [pc, #72]	; (800b8b0 <xTimerCreateTimerTask+0x8c>)
 800b868:	f7fe ff96 	bl	800a798 <xTaskCreateStatic>
 800b86c:	4603      	mov	r3, r0
 800b86e:	4a11      	ldr	r2, [pc, #68]	; (800b8b4 <xTimerCreateTimerTask+0x90>)
 800b870:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b872:	4b10      	ldr	r3, [pc, #64]	; (800b8b4 <xTimerCreateTimerTask+0x90>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d001      	beq.n	800b87e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b87a:	2301      	movs	r3, #1
 800b87c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d10c      	bne.n	800b89e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800b884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b888:	b672      	cpsid	i
 800b88a:	f383 8811 	msr	BASEPRI, r3
 800b88e:	f3bf 8f6f 	isb	sy
 800b892:	f3bf 8f4f 	dsb	sy
 800b896:	b662      	cpsie	i
 800b898:	613b      	str	r3, [r7, #16]
}
 800b89a:	bf00      	nop
 800b89c:	e7fe      	b.n	800b89c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800b89e:	697b      	ldr	r3, [r7, #20]
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3718      	adds	r7, #24
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	20009bc4 	.word	0x20009bc4
 800b8ac:	0801c20c 	.word	0x0801c20c
 800b8b0:	0800b9f5 	.word	0x0800b9f5
 800b8b4:	20009bc8 	.word	0x20009bc8

0800b8b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b08a      	sub	sp, #40	; 0x28
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	607a      	str	r2, [r7, #4]
 800b8c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d10c      	bne.n	800b8ea <xTimerGenericCommand+0x32>
	__asm volatile
 800b8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d4:	b672      	cpsid	i
 800b8d6:	f383 8811 	msr	BASEPRI, r3
 800b8da:	f3bf 8f6f 	isb	sy
 800b8de:	f3bf 8f4f 	dsb	sy
 800b8e2:	b662      	cpsie	i
 800b8e4:	623b      	str	r3, [r7, #32]
}
 800b8e6:	bf00      	nop
 800b8e8:	e7fe      	b.n	800b8e8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b8ea:	4b1a      	ldr	r3, [pc, #104]	; (800b954 <xTimerGenericCommand+0x9c>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d02a      	beq.n	800b948 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	2b05      	cmp	r3, #5
 800b902:	dc18      	bgt.n	800b936 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b904:	f7ff fda8 	bl	800b458 <xTaskGetSchedulerState>
 800b908:	4603      	mov	r3, r0
 800b90a:	2b02      	cmp	r3, #2
 800b90c:	d109      	bne.n	800b922 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b90e:	4b11      	ldr	r3, [pc, #68]	; (800b954 <xTimerGenericCommand+0x9c>)
 800b910:	6818      	ldr	r0, [r3, #0]
 800b912:	f107 0110 	add.w	r1, r7, #16
 800b916:	2300      	movs	r3, #0
 800b918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b91a:	f7fe f86b 	bl	80099f4 <xQueueGenericSend>
 800b91e:	6278      	str	r0, [r7, #36]	; 0x24
 800b920:	e012      	b.n	800b948 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b922:	4b0c      	ldr	r3, [pc, #48]	; (800b954 <xTimerGenericCommand+0x9c>)
 800b924:	6818      	ldr	r0, [r3, #0]
 800b926:	f107 0110 	add.w	r1, r7, #16
 800b92a:	2300      	movs	r3, #0
 800b92c:	2200      	movs	r2, #0
 800b92e:	f7fe f861 	bl	80099f4 <xQueueGenericSend>
 800b932:	6278      	str	r0, [r7, #36]	; 0x24
 800b934:	e008      	b.n	800b948 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b936:	4b07      	ldr	r3, [pc, #28]	; (800b954 <xTimerGenericCommand+0x9c>)
 800b938:	6818      	ldr	r0, [r3, #0]
 800b93a:	f107 0110 	add.w	r1, r7, #16
 800b93e:	2300      	movs	r3, #0
 800b940:	683a      	ldr	r2, [r7, #0]
 800b942:	f7fe f95d 	bl	8009c00 <xQueueGenericSendFromISR>
 800b946:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3728      	adds	r7, #40	; 0x28
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
 800b952:	bf00      	nop
 800b954:	20009bc4 	.word	0x20009bc4

0800b958 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b088      	sub	sp, #32
 800b95c:	af02      	add	r7, sp, #8
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b962:	4b23      	ldr	r3, [pc, #140]	; (800b9f0 <prvProcessExpiredTimer+0x98>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	68db      	ldr	r3, [r3, #12]
 800b96a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	3304      	adds	r3, #4
 800b970:	4618      	mov	r0, r3
 800b972:	f7fd fd97 	bl	80094a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b97c:	f003 0304 	and.w	r3, r3, #4
 800b980:	2b00      	cmp	r3, #0
 800b982:	d024      	beq.n	800b9ce <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	699a      	ldr	r2, [r3, #24]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	18d1      	adds	r1, r2, r3
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	683a      	ldr	r2, [r7, #0]
 800b990:	6978      	ldr	r0, [r7, #20]
 800b992:	f000 f8d3 	bl	800bb3c <prvInsertTimerInActiveList>
 800b996:	4603      	mov	r3, r0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d021      	beq.n	800b9e0 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b99c:	2300      	movs	r3, #0
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	2100      	movs	r1, #0
 800b9a6:	6978      	ldr	r0, [r7, #20]
 800b9a8:	f7ff ff86 	bl	800b8b8 <xTimerGenericCommand>
 800b9ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d115      	bne.n	800b9e0 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800b9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b8:	b672      	cpsid	i
 800b9ba:	f383 8811 	msr	BASEPRI, r3
 800b9be:	f3bf 8f6f 	isb	sy
 800b9c2:	f3bf 8f4f 	dsb	sy
 800b9c6:	b662      	cpsie	i
 800b9c8:	60fb      	str	r3, [r7, #12]
}
 800b9ca:	bf00      	nop
 800b9cc:	e7fe      	b.n	800b9cc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9d4:	f023 0301 	bic.w	r3, r3, #1
 800b9d8:	b2da      	uxtb	r2, r3
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	6a1b      	ldr	r3, [r3, #32]
 800b9e4:	6978      	ldr	r0, [r7, #20]
 800b9e6:	4798      	blx	r3
}
 800b9e8:	bf00      	nop
 800b9ea:	3718      	adds	r7, #24
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}
 800b9f0:	20009bbc 	.word	0x20009bbc

0800b9f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b9fc:	f107 0308 	add.w	r3, r7, #8
 800ba00:	4618      	mov	r0, r3
 800ba02:	f000 f857 	bl	800bab4 <prvGetNextExpireTime>
 800ba06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	68f8      	ldr	r0, [r7, #12]
 800ba0e:	f000 f803 	bl	800ba18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ba12:	f000 f8d5 	bl	800bbc0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba16:	e7f1      	b.n	800b9fc <prvTimerTask+0x8>

0800ba18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ba22:	f7ff f903 	bl	800ac2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba26:	f107 0308 	add.w	r3, r7, #8
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f000 f866 	bl	800bafc <prvSampleTimeNow>
 800ba30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d130      	bne.n	800ba9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d10a      	bne.n	800ba54 <prvProcessTimerOrBlockTask+0x3c>
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d806      	bhi.n	800ba54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ba46:	f7ff f8ff 	bl	800ac48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ba4a:	68f9      	ldr	r1, [r7, #12]
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f7ff ff83 	bl	800b958 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ba52:	e024      	b.n	800ba9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d008      	beq.n	800ba6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ba5a:	4b13      	ldr	r3, [pc, #76]	; (800baa8 <prvProcessTimerOrBlockTask+0x90>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d101      	bne.n	800ba68 <prvProcessTimerOrBlockTask+0x50>
 800ba64:	2301      	movs	r3, #1
 800ba66:	e000      	b.n	800ba6a <prvProcessTimerOrBlockTask+0x52>
 800ba68:	2300      	movs	r3, #0
 800ba6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ba6c:	4b0f      	ldr	r3, [pc, #60]	; (800baac <prvProcessTimerOrBlockTask+0x94>)
 800ba6e:	6818      	ldr	r0, [r3, #0]
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	1ad3      	subs	r3, r2, r3
 800ba76:	683a      	ldr	r2, [r7, #0]
 800ba78:	4619      	mov	r1, r3
 800ba7a:	f7fe fe59 	bl	800a730 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ba7e:	f7ff f8e3 	bl	800ac48 <xTaskResumeAll>
 800ba82:	4603      	mov	r3, r0
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d10a      	bne.n	800ba9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ba88:	4b09      	ldr	r3, [pc, #36]	; (800bab0 <prvProcessTimerOrBlockTask+0x98>)
 800ba8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba8e:	601a      	str	r2, [r3, #0]
 800ba90:	f3bf 8f4f 	dsb	sy
 800ba94:	f3bf 8f6f 	isb	sy
}
 800ba98:	e001      	b.n	800ba9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ba9a:	f7ff f8d5 	bl	800ac48 <xTaskResumeAll>
}
 800ba9e:	bf00      	nop
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	20009bc0 	.word	0x20009bc0
 800baac:	20009bc4 	.word	0x20009bc4
 800bab0:	e000ed04 	.word	0xe000ed04

0800bab4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bab4:	b480      	push	{r7}
 800bab6:	b085      	sub	sp, #20
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800babc:	4b0e      	ldr	r3, [pc, #56]	; (800baf8 <prvGetNextExpireTime+0x44>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d101      	bne.n	800baca <prvGetNextExpireTime+0x16>
 800bac6:	2201      	movs	r2, #1
 800bac8:	e000      	b.n	800bacc <prvGetNextExpireTime+0x18>
 800baca:	2200      	movs	r2, #0
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d105      	bne.n	800bae4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bad8:	4b07      	ldr	r3, [pc, #28]	; (800baf8 <prvGetNextExpireTime+0x44>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	68db      	ldr	r3, [r3, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	60fb      	str	r3, [r7, #12]
 800bae2:	e001      	b.n	800bae8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bae4:	2300      	movs	r3, #0
 800bae6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bae8:	68fb      	ldr	r3, [r7, #12]
}
 800baea:	4618      	mov	r0, r3
 800baec:	3714      	adds	r7, #20
 800baee:	46bd      	mov	sp, r7
 800baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf4:	4770      	bx	lr
 800baf6:	bf00      	nop
 800baf8:	20009bbc 	.word	0x20009bbc

0800bafc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b084      	sub	sp, #16
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bb04:	f7ff f940 	bl	800ad88 <xTaskGetTickCount>
 800bb08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bb0a:	4b0b      	ldr	r3, [pc, #44]	; (800bb38 <prvSampleTimeNow+0x3c>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	68fa      	ldr	r2, [r7, #12]
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d205      	bcs.n	800bb20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bb14:	f000 f93c 	bl	800bd90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	601a      	str	r2, [r3, #0]
 800bb1e:	e002      	b.n	800bb26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2200      	movs	r2, #0
 800bb24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bb26:	4a04      	ldr	r2, [pc, #16]	; (800bb38 <prvSampleTimeNow+0x3c>)
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3710      	adds	r7, #16
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	20009bcc 	.word	0x20009bcc

0800bb3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b086      	sub	sp, #24
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	60b9      	str	r1, [r7, #8]
 800bb46:	607a      	str	r2, [r7, #4]
 800bb48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	68ba      	ldr	r2, [r7, #8]
 800bb52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	68fa      	ldr	r2, [r7, #12]
 800bb58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bb5a:	68ba      	ldr	r2, [r7, #8]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d812      	bhi.n	800bb88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	1ad2      	subs	r2, r2, r3
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	699b      	ldr	r3, [r3, #24]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d302      	bcc.n	800bb76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bb70:	2301      	movs	r3, #1
 800bb72:	617b      	str	r3, [r7, #20]
 800bb74:	e01b      	b.n	800bbae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bb76:	4b10      	ldr	r3, [pc, #64]	; (800bbb8 <prvInsertTimerInActiveList+0x7c>)
 800bb78:	681a      	ldr	r2, [r3, #0]
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	3304      	adds	r3, #4
 800bb7e:	4619      	mov	r1, r3
 800bb80:	4610      	mov	r0, r2
 800bb82:	f7fd fc56 	bl	8009432 <vListInsert>
 800bb86:	e012      	b.n	800bbae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d206      	bcs.n	800bb9e <prvInsertTimerInActiveList+0x62>
 800bb90:	68ba      	ldr	r2, [r7, #8]
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d302      	bcc.n	800bb9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bb98:	2301      	movs	r3, #1
 800bb9a:	617b      	str	r3, [r7, #20]
 800bb9c:	e007      	b.n	800bbae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb9e:	4b07      	ldr	r3, [pc, #28]	; (800bbbc <prvInsertTimerInActiveList+0x80>)
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	3304      	adds	r3, #4
 800bba6:	4619      	mov	r1, r3
 800bba8:	4610      	mov	r0, r2
 800bbaa:	f7fd fc42 	bl	8009432 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bbae:	697b      	ldr	r3, [r7, #20]
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3718      	adds	r7, #24
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	20009bc0 	.word	0x20009bc0
 800bbbc:	20009bbc 	.word	0x20009bbc

0800bbc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b08e      	sub	sp, #56	; 0x38
 800bbc4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bbc6:	e0d0      	b.n	800bd6a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	da1a      	bge.n	800bc04 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bbce:	1d3b      	adds	r3, r7, #4
 800bbd0:	3304      	adds	r3, #4
 800bbd2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d10c      	bne.n	800bbf4 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800bbda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbde:	b672      	cpsid	i
 800bbe0:	f383 8811 	msr	BASEPRI, r3
 800bbe4:	f3bf 8f6f 	isb	sy
 800bbe8:	f3bf 8f4f 	dsb	sy
 800bbec:	b662      	cpsie	i
 800bbee:	61fb      	str	r3, [r7, #28]
}
 800bbf0:	bf00      	nop
 800bbf2:	e7fe      	b.n	800bbf2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbfa:	6850      	ldr	r0, [r2, #4]
 800bbfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbfe:	6892      	ldr	r2, [r2, #8]
 800bc00:	4611      	mov	r1, r2
 800bc02:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	f2c0 80ae 	blt.w	800bd68 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc12:	695b      	ldr	r3, [r3, #20]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d004      	beq.n	800bc22 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc1a:	3304      	adds	r3, #4
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7fd fc41 	bl	80094a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc22:	463b      	mov	r3, r7
 800bc24:	4618      	mov	r0, r3
 800bc26:	f7ff ff69 	bl	800bafc <prvSampleTimeNow>
 800bc2a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2b09      	cmp	r3, #9
 800bc30:	f200 809b 	bhi.w	800bd6a <prvProcessReceivedCommands+0x1aa>
 800bc34:	a201      	add	r2, pc, #4	; (adr r2, 800bc3c <prvProcessReceivedCommands+0x7c>)
 800bc36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc3a:	bf00      	nop
 800bc3c:	0800bc65 	.word	0x0800bc65
 800bc40:	0800bc65 	.word	0x0800bc65
 800bc44:	0800bc65 	.word	0x0800bc65
 800bc48:	0800bcdd 	.word	0x0800bcdd
 800bc4c:	0800bcf1 	.word	0x0800bcf1
 800bc50:	0800bd3f 	.word	0x0800bd3f
 800bc54:	0800bc65 	.word	0x0800bc65
 800bc58:	0800bc65 	.word	0x0800bc65
 800bc5c:	0800bcdd 	.word	0x0800bcdd
 800bc60:	0800bcf1 	.word	0x0800bcf1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc6a:	f043 0301 	orr.w	r3, r3, #1
 800bc6e:	b2da      	uxtb	r2, r3
 800bc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bc76:	68ba      	ldr	r2, [r7, #8]
 800bc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7a:	699b      	ldr	r3, [r3, #24]
 800bc7c:	18d1      	adds	r1, r2, r3
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc84:	f7ff ff5a 	bl	800bb3c <prvInsertTimerInActiveList>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d06d      	beq.n	800bd6a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc90:	6a1b      	ldr	r3, [r3, #32]
 800bc92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc9c:	f003 0304 	and.w	r3, r3, #4
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d062      	beq.n	800bd6a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bca4:	68ba      	ldr	r2, [r7, #8]
 800bca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca8:	699b      	ldr	r3, [r3, #24]
 800bcaa:	441a      	add	r2, r3
 800bcac:	2300      	movs	r3, #0
 800bcae:	9300      	str	r3, [sp, #0]
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcb6:	f7ff fdff 	bl	800b8b8 <xTimerGenericCommand>
 800bcba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bcbc:	6a3b      	ldr	r3, [r7, #32]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d153      	bne.n	800bd6a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800bcc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc6:	b672      	cpsid	i
 800bcc8:	f383 8811 	msr	BASEPRI, r3
 800bccc:	f3bf 8f6f 	isb	sy
 800bcd0:	f3bf 8f4f 	dsb	sy
 800bcd4:	b662      	cpsie	i
 800bcd6:	61bb      	str	r3, [r7, #24]
}
 800bcd8:	bf00      	nop
 800bcda:	e7fe      	b.n	800bcda <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bcdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bce2:	f023 0301 	bic.w	r3, r3, #1
 800bce6:	b2da      	uxtb	r2, r3
 800bce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bcee:	e03c      	b.n	800bd6a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcf6:	f043 0301 	orr.w	r3, r3, #1
 800bcfa:	b2da      	uxtb	r2, r3
 800bcfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bd02:	68ba      	ldr	r2, [r7, #8]
 800bd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd06:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0a:	699b      	ldr	r3, [r3, #24]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d10c      	bne.n	800bd2a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800bd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd14:	b672      	cpsid	i
 800bd16:	f383 8811 	msr	BASEPRI, r3
 800bd1a:	f3bf 8f6f 	isb	sy
 800bd1e:	f3bf 8f4f 	dsb	sy
 800bd22:	b662      	cpsie	i
 800bd24:	617b      	str	r3, [r7, #20]
}
 800bd26:	bf00      	nop
 800bd28:	e7fe      	b.n	800bd28 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2c:	699a      	ldr	r2, [r3, #24]
 800bd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd30:	18d1      	adds	r1, r2, r3
 800bd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd38:	f7ff ff00 	bl	800bb3c <prvInsertTimerInActiveList>
					break;
 800bd3c:	e015      	b.n	800bd6a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd44:	f003 0302 	and.w	r3, r3, #2
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d103      	bne.n	800bd54 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800bd4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd4e:	f000 fbcb 	bl	800c4e8 <vPortFree>
 800bd52:	e00a      	b.n	800bd6a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd5a:	f023 0301 	bic.w	r3, r3, #1
 800bd5e:	b2da      	uxtb	r2, r3
 800bd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bd66:	e000      	b.n	800bd6a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bd68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd6a:	4b08      	ldr	r3, [pc, #32]	; (800bd8c <prvProcessReceivedCommands+0x1cc>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	1d39      	adds	r1, r7, #4
 800bd70:	2200      	movs	r2, #0
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7fe f87a 	bl	8009e6c <xQueueReceive>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	f47f af24 	bne.w	800bbc8 <prvProcessReceivedCommands+0x8>
	}
}
 800bd80:	bf00      	nop
 800bd82:	bf00      	nop
 800bd84:	3730      	adds	r7, #48	; 0x30
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	20009bc4 	.word	0x20009bc4

0800bd90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b088      	sub	sp, #32
 800bd94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bd96:	e04a      	b.n	800be2e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd98:	4b2e      	ldr	r3, [pc, #184]	; (800be54 <prvSwitchTimerLists+0xc4>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	68db      	ldr	r3, [r3, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bda2:	4b2c      	ldr	r3, [pc, #176]	; (800be54 <prvSwitchTimerLists+0xc4>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	68db      	ldr	r3, [r3, #12]
 800bdaa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	3304      	adds	r3, #4
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f7fd fb77 	bl	80094a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6a1b      	ldr	r3, [r3, #32]
 800bdba:	68f8      	ldr	r0, [r7, #12]
 800bdbc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdc4:	f003 0304 	and.w	r3, r3, #4
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d030      	beq.n	800be2e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	699b      	ldr	r3, [r3, #24]
 800bdd0:	693a      	ldr	r2, [r7, #16]
 800bdd2:	4413      	add	r3, r2
 800bdd4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bdd6:	68ba      	ldr	r2, [r7, #8]
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d90e      	bls.n	800bdfc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	68ba      	ldr	r2, [r7, #8]
 800bde2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	68fa      	ldr	r2, [r7, #12]
 800bde8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bdea:	4b1a      	ldr	r3, [pc, #104]	; (800be54 <prvSwitchTimerLists+0xc4>)
 800bdec:	681a      	ldr	r2, [r3, #0]
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	3304      	adds	r3, #4
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	4610      	mov	r0, r2
 800bdf6:	f7fd fb1c 	bl	8009432 <vListInsert>
 800bdfa:	e018      	b.n	800be2e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	9300      	str	r3, [sp, #0]
 800be00:	2300      	movs	r3, #0
 800be02:	693a      	ldr	r2, [r7, #16]
 800be04:	2100      	movs	r1, #0
 800be06:	68f8      	ldr	r0, [r7, #12]
 800be08:	f7ff fd56 	bl	800b8b8 <xTimerGenericCommand>
 800be0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d10c      	bne.n	800be2e <prvSwitchTimerLists+0x9e>
	__asm volatile
 800be14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be18:	b672      	cpsid	i
 800be1a:	f383 8811 	msr	BASEPRI, r3
 800be1e:	f3bf 8f6f 	isb	sy
 800be22:	f3bf 8f4f 	dsb	sy
 800be26:	b662      	cpsie	i
 800be28:	603b      	str	r3, [r7, #0]
}
 800be2a:	bf00      	nop
 800be2c:	e7fe      	b.n	800be2c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be2e:	4b09      	ldr	r3, [pc, #36]	; (800be54 <prvSwitchTimerLists+0xc4>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d1af      	bne.n	800bd98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800be38:	4b06      	ldr	r3, [pc, #24]	; (800be54 <prvSwitchTimerLists+0xc4>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800be3e:	4b06      	ldr	r3, [pc, #24]	; (800be58 <prvSwitchTimerLists+0xc8>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	4a04      	ldr	r2, [pc, #16]	; (800be54 <prvSwitchTimerLists+0xc4>)
 800be44:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800be46:	4a04      	ldr	r2, [pc, #16]	; (800be58 <prvSwitchTimerLists+0xc8>)
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	6013      	str	r3, [r2, #0]
}
 800be4c:	bf00      	nop
 800be4e:	3718      	adds	r7, #24
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	20009bbc 	.word	0x20009bbc
 800be58:	20009bc0 	.word	0x20009bc0

0800be5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b082      	sub	sp, #8
 800be60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800be62:	f000 f94b 	bl	800c0fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800be66:	4b15      	ldr	r3, [pc, #84]	; (800bebc <prvCheckForValidListAndQueue+0x60>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d120      	bne.n	800beb0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800be6e:	4814      	ldr	r0, [pc, #80]	; (800bec0 <prvCheckForValidListAndQueue+0x64>)
 800be70:	f7fd fa8e 	bl	8009390 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800be74:	4813      	ldr	r0, [pc, #76]	; (800bec4 <prvCheckForValidListAndQueue+0x68>)
 800be76:	f7fd fa8b 	bl	8009390 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800be7a:	4b13      	ldr	r3, [pc, #76]	; (800bec8 <prvCheckForValidListAndQueue+0x6c>)
 800be7c:	4a10      	ldr	r2, [pc, #64]	; (800bec0 <prvCheckForValidListAndQueue+0x64>)
 800be7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800be80:	4b12      	ldr	r3, [pc, #72]	; (800becc <prvCheckForValidListAndQueue+0x70>)
 800be82:	4a10      	ldr	r2, [pc, #64]	; (800bec4 <prvCheckForValidListAndQueue+0x68>)
 800be84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800be86:	2300      	movs	r3, #0
 800be88:	9300      	str	r3, [sp, #0]
 800be8a:	4b11      	ldr	r3, [pc, #68]	; (800bed0 <prvCheckForValidListAndQueue+0x74>)
 800be8c:	4a11      	ldr	r2, [pc, #68]	; (800bed4 <prvCheckForValidListAndQueue+0x78>)
 800be8e:	2110      	movs	r1, #16
 800be90:	200a      	movs	r0, #10
 800be92:	f7fd fb9b 	bl	80095cc <xQueueGenericCreateStatic>
 800be96:	4603      	mov	r3, r0
 800be98:	4a08      	ldr	r2, [pc, #32]	; (800bebc <prvCheckForValidListAndQueue+0x60>)
 800be9a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800be9c:	4b07      	ldr	r3, [pc, #28]	; (800bebc <prvCheckForValidListAndQueue+0x60>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d005      	beq.n	800beb0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bea4:	4b05      	ldr	r3, [pc, #20]	; (800bebc <prvCheckForValidListAndQueue+0x60>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	490b      	ldr	r1, [pc, #44]	; (800bed8 <prvCheckForValidListAndQueue+0x7c>)
 800beaa:	4618      	mov	r0, r3
 800beac:	f7fe fbec 	bl	800a688 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800beb0:	f000 f958 	bl	800c164 <vPortExitCritical>
}
 800beb4:	bf00      	nop
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	20009bc4 	.word	0x20009bc4
 800bec0:	20009b94 	.word	0x20009b94
 800bec4:	20009ba8 	.word	0x20009ba8
 800bec8:	20009bbc 	.word	0x20009bbc
 800becc:	20009bc0 	.word	0x20009bc0
 800bed0:	20009c70 	.word	0x20009c70
 800bed4:	20009bd0 	.word	0x20009bd0
 800bed8:	0801c214 	.word	0x0801c214

0800bedc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bedc:	b480      	push	{r7}
 800bede:	b085      	sub	sp, #20
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	60f8      	str	r0, [r7, #12]
 800bee4:	60b9      	str	r1, [r7, #8]
 800bee6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	3b04      	subs	r3, #4
 800beec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	3b04      	subs	r3, #4
 800befa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	f023 0201 	bic.w	r2, r3, #1
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	3b04      	subs	r3, #4
 800bf0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bf0c:	4a0c      	ldr	r2, [pc, #48]	; (800bf40 <pxPortInitialiseStack+0x64>)
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	3b14      	subs	r3, #20
 800bf16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	3b04      	subs	r3, #4
 800bf22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f06f 0202 	mvn.w	r2, #2
 800bf2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	3b20      	subs	r3, #32
 800bf30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bf32:	68fb      	ldr	r3, [r7, #12]
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3714      	adds	r7, #20
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr
 800bf40:	0800bf45 	.word	0x0800bf45

0800bf44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bf44:	b480      	push	{r7}
 800bf46:	b085      	sub	sp, #20
 800bf48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bf4e:	4b14      	ldr	r3, [pc, #80]	; (800bfa0 <prvTaskExitError+0x5c>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf56:	d00c      	beq.n	800bf72 <prvTaskExitError+0x2e>
	__asm volatile
 800bf58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5c:	b672      	cpsid	i
 800bf5e:	f383 8811 	msr	BASEPRI, r3
 800bf62:	f3bf 8f6f 	isb	sy
 800bf66:	f3bf 8f4f 	dsb	sy
 800bf6a:	b662      	cpsie	i
 800bf6c:	60fb      	str	r3, [r7, #12]
}
 800bf6e:	bf00      	nop
 800bf70:	e7fe      	b.n	800bf70 <prvTaskExitError+0x2c>
	__asm volatile
 800bf72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf76:	b672      	cpsid	i
 800bf78:	f383 8811 	msr	BASEPRI, r3
 800bf7c:	f3bf 8f6f 	isb	sy
 800bf80:	f3bf 8f4f 	dsb	sy
 800bf84:	b662      	cpsie	i
 800bf86:	60bb      	str	r3, [r7, #8]
}
 800bf88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bf8a:	bf00      	nop
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d0fc      	beq.n	800bf8c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bf92:	bf00      	nop
 800bf94:	bf00      	nop
 800bf96:	3714      	adds	r7, #20
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr
 800bfa0:	20000020 	.word	0x20000020
	...

0800bfb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bfb0:	4b07      	ldr	r3, [pc, #28]	; (800bfd0 <pxCurrentTCBConst2>)
 800bfb2:	6819      	ldr	r1, [r3, #0]
 800bfb4:	6808      	ldr	r0, [r1, #0]
 800bfb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfba:	f380 8809 	msr	PSP, r0
 800bfbe:	f3bf 8f6f 	isb	sy
 800bfc2:	f04f 0000 	mov.w	r0, #0
 800bfc6:	f380 8811 	msr	BASEPRI, r0
 800bfca:	4770      	bx	lr
 800bfcc:	f3af 8000 	nop.w

0800bfd0 <pxCurrentTCBConst2>:
 800bfd0:	20009694 	.word	0x20009694
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bfd4:	bf00      	nop
 800bfd6:	bf00      	nop

0800bfd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bfd8:	4808      	ldr	r0, [pc, #32]	; (800bffc <prvPortStartFirstTask+0x24>)
 800bfda:	6800      	ldr	r0, [r0, #0]
 800bfdc:	6800      	ldr	r0, [r0, #0]
 800bfde:	f380 8808 	msr	MSP, r0
 800bfe2:	f04f 0000 	mov.w	r0, #0
 800bfe6:	f380 8814 	msr	CONTROL, r0
 800bfea:	b662      	cpsie	i
 800bfec:	b661      	cpsie	f
 800bfee:	f3bf 8f4f 	dsb	sy
 800bff2:	f3bf 8f6f 	isb	sy
 800bff6:	df00      	svc	0
 800bff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bffa:	bf00      	nop
 800bffc:	e000ed08 	.word	0xe000ed08

0800c000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c006:	4b37      	ldr	r3, [pc, #220]	; (800c0e4 <xPortStartScheduler+0xe4>)
 800c008:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	b2db      	uxtb	r3, r3
 800c010:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	22ff      	movs	r2, #255	; 0xff
 800c016:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c020:	78fb      	ldrb	r3, [r7, #3]
 800c022:	b2db      	uxtb	r3, r3
 800c024:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c028:	b2da      	uxtb	r2, r3
 800c02a:	4b2f      	ldr	r3, [pc, #188]	; (800c0e8 <xPortStartScheduler+0xe8>)
 800c02c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c02e:	4b2f      	ldr	r3, [pc, #188]	; (800c0ec <xPortStartScheduler+0xec>)
 800c030:	2207      	movs	r2, #7
 800c032:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c034:	e009      	b.n	800c04a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c036:	4b2d      	ldr	r3, [pc, #180]	; (800c0ec <xPortStartScheduler+0xec>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	3b01      	subs	r3, #1
 800c03c:	4a2b      	ldr	r2, [pc, #172]	; (800c0ec <xPortStartScheduler+0xec>)
 800c03e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c040:	78fb      	ldrb	r3, [r7, #3]
 800c042:	b2db      	uxtb	r3, r3
 800c044:	005b      	lsls	r3, r3, #1
 800c046:	b2db      	uxtb	r3, r3
 800c048:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c04a:	78fb      	ldrb	r3, [r7, #3]
 800c04c:	b2db      	uxtb	r3, r3
 800c04e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c052:	2b80      	cmp	r3, #128	; 0x80
 800c054:	d0ef      	beq.n	800c036 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c056:	4b25      	ldr	r3, [pc, #148]	; (800c0ec <xPortStartScheduler+0xec>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f1c3 0307 	rsb	r3, r3, #7
 800c05e:	2b04      	cmp	r3, #4
 800c060:	d00c      	beq.n	800c07c <xPortStartScheduler+0x7c>
	__asm volatile
 800c062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c066:	b672      	cpsid	i
 800c068:	f383 8811 	msr	BASEPRI, r3
 800c06c:	f3bf 8f6f 	isb	sy
 800c070:	f3bf 8f4f 	dsb	sy
 800c074:	b662      	cpsie	i
 800c076:	60bb      	str	r3, [r7, #8]
}
 800c078:	bf00      	nop
 800c07a:	e7fe      	b.n	800c07a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c07c:	4b1b      	ldr	r3, [pc, #108]	; (800c0ec <xPortStartScheduler+0xec>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	021b      	lsls	r3, r3, #8
 800c082:	4a1a      	ldr	r2, [pc, #104]	; (800c0ec <xPortStartScheduler+0xec>)
 800c084:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c086:	4b19      	ldr	r3, [pc, #100]	; (800c0ec <xPortStartScheduler+0xec>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c08e:	4a17      	ldr	r2, [pc, #92]	; (800c0ec <xPortStartScheduler+0xec>)
 800c090:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	b2da      	uxtb	r2, r3
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c09a:	4b15      	ldr	r3, [pc, #84]	; (800c0f0 <xPortStartScheduler+0xf0>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	4a14      	ldr	r2, [pc, #80]	; (800c0f0 <xPortStartScheduler+0xf0>)
 800c0a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c0a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c0a6:	4b12      	ldr	r3, [pc, #72]	; (800c0f0 <xPortStartScheduler+0xf0>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a11      	ldr	r2, [pc, #68]	; (800c0f0 <xPortStartScheduler+0xf0>)
 800c0ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c0b0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c0b2:	f000 f8dd 	bl	800c270 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c0b6:	4b0f      	ldr	r3, [pc, #60]	; (800c0f4 <xPortStartScheduler+0xf4>)
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c0bc:	f000 f8fc 	bl	800c2b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c0c0:	4b0d      	ldr	r3, [pc, #52]	; (800c0f8 <xPortStartScheduler+0xf8>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4a0c      	ldr	r2, [pc, #48]	; (800c0f8 <xPortStartScheduler+0xf8>)
 800c0c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c0ca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c0cc:	f7ff ff84 	bl	800bfd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c0d0:	f7fe ff38 	bl	800af44 <vTaskSwitchContext>
	prvTaskExitError();
 800c0d4:	f7ff ff36 	bl	800bf44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c0d8:	2300      	movs	r3, #0
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3710      	adds	r7, #16
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	e000e400 	.word	0xe000e400
 800c0e8:	20009cc0 	.word	0x20009cc0
 800c0ec:	20009cc4 	.word	0x20009cc4
 800c0f0:	e000ed20 	.word	0xe000ed20
 800c0f4:	20000020 	.word	0x20000020
 800c0f8:	e000ef34 	.word	0xe000ef34

0800c0fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b083      	sub	sp, #12
 800c100:	af00      	add	r7, sp, #0
	__asm volatile
 800c102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c106:	b672      	cpsid	i
 800c108:	f383 8811 	msr	BASEPRI, r3
 800c10c:	f3bf 8f6f 	isb	sy
 800c110:	f3bf 8f4f 	dsb	sy
 800c114:	b662      	cpsie	i
 800c116:	607b      	str	r3, [r7, #4]
}
 800c118:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c11a:	4b10      	ldr	r3, [pc, #64]	; (800c15c <vPortEnterCritical+0x60>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	3301      	adds	r3, #1
 800c120:	4a0e      	ldr	r2, [pc, #56]	; (800c15c <vPortEnterCritical+0x60>)
 800c122:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c124:	4b0d      	ldr	r3, [pc, #52]	; (800c15c <vPortEnterCritical+0x60>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d111      	bne.n	800c150 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c12c:	4b0c      	ldr	r3, [pc, #48]	; (800c160 <vPortEnterCritical+0x64>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	b2db      	uxtb	r3, r3
 800c132:	2b00      	cmp	r3, #0
 800c134:	d00c      	beq.n	800c150 <vPortEnterCritical+0x54>
	__asm volatile
 800c136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c13a:	b672      	cpsid	i
 800c13c:	f383 8811 	msr	BASEPRI, r3
 800c140:	f3bf 8f6f 	isb	sy
 800c144:	f3bf 8f4f 	dsb	sy
 800c148:	b662      	cpsie	i
 800c14a:	603b      	str	r3, [r7, #0]
}
 800c14c:	bf00      	nop
 800c14e:	e7fe      	b.n	800c14e <vPortEnterCritical+0x52>
	}
}
 800c150:	bf00      	nop
 800c152:	370c      	adds	r7, #12
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr
 800c15c:	20000020 	.word	0x20000020
 800c160:	e000ed04 	.word	0xe000ed04

0800c164 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c164:	b480      	push	{r7}
 800c166:	b083      	sub	sp, #12
 800c168:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c16a:	4b13      	ldr	r3, [pc, #76]	; (800c1b8 <vPortExitCritical+0x54>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d10c      	bne.n	800c18c <vPortExitCritical+0x28>
	__asm volatile
 800c172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c176:	b672      	cpsid	i
 800c178:	f383 8811 	msr	BASEPRI, r3
 800c17c:	f3bf 8f6f 	isb	sy
 800c180:	f3bf 8f4f 	dsb	sy
 800c184:	b662      	cpsie	i
 800c186:	607b      	str	r3, [r7, #4]
}
 800c188:	bf00      	nop
 800c18a:	e7fe      	b.n	800c18a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c18c:	4b0a      	ldr	r3, [pc, #40]	; (800c1b8 <vPortExitCritical+0x54>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	3b01      	subs	r3, #1
 800c192:	4a09      	ldr	r2, [pc, #36]	; (800c1b8 <vPortExitCritical+0x54>)
 800c194:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c196:	4b08      	ldr	r3, [pc, #32]	; (800c1b8 <vPortExitCritical+0x54>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d105      	bne.n	800c1aa <vPortExitCritical+0x46>
 800c19e:	2300      	movs	r3, #0
 800c1a0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	f383 8811 	msr	BASEPRI, r3
}
 800c1a8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c1aa:	bf00      	nop
 800c1ac:	370c      	adds	r7, #12
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr
 800c1b6:	bf00      	nop
 800c1b8:	20000020 	.word	0x20000020
 800c1bc:	00000000 	.word	0x00000000

0800c1c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c1c0:	f3ef 8009 	mrs	r0, PSP
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	4b15      	ldr	r3, [pc, #84]	; (800c220 <pxCurrentTCBConst>)
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	f01e 0f10 	tst.w	lr, #16
 800c1d0:	bf08      	it	eq
 800c1d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c1d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1da:	6010      	str	r0, [r2, #0]
 800c1dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c1e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c1e4:	b672      	cpsid	i
 800c1e6:	f380 8811 	msr	BASEPRI, r0
 800c1ea:	f3bf 8f4f 	dsb	sy
 800c1ee:	f3bf 8f6f 	isb	sy
 800c1f2:	b662      	cpsie	i
 800c1f4:	f7fe fea6 	bl	800af44 <vTaskSwitchContext>
 800c1f8:	f04f 0000 	mov.w	r0, #0
 800c1fc:	f380 8811 	msr	BASEPRI, r0
 800c200:	bc09      	pop	{r0, r3}
 800c202:	6819      	ldr	r1, [r3, #0]
 800c204:	6808      	ldr	r0, [r1, #0]
 800c206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c20a:	f01e 0f10 	tst.w	lr, #16
 800c20e:	bf08      	it	eq
 800c210:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c214:	f380 8809 	msr	PSP, r0
 800c218:	f3bf 8f6f 	isb	sy
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop

0800c220 <pxCurrentTCBConst>:
 800c220:	20009694 	.word	0x20009694
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c224:	bf00      	nop
 800c226:	bf00      	nop

0800c228 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b082      	sub	sp, #8
 800c22c:	af00      	add	r7, sp, #0
	__asm volatile
 800c22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c232:	b672      	cpsid	i
 800c234:	f383 8811 	msr	BASEPRI, r3
 800c238:	f3bf 8f6f 	isb	sy
 800c23c:	f3bf 8f4f 	dsb	sy
 800c240:	b662      	cpsie	i
 800c242:	607b      	str	r3, [r7, #4]
}
 800c244:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c246:	f7fe fdc1 	bl	800adcc <xTaskIncrementTick>
 800c24a:	4603      	mov	r3, r0
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d003      	beq.n	800c258 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c250:	4b06      	ldr	r3, [pc, #24]	; (800c26c <SysTick_Handler+0x44>)
 800c252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c256:	601a      	str	r2, [r3, #0]
 800c258:	2300      	movs	r3, #0
 800c25a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	f383 8811 	msr	BASEPRI, r3
}
 800c262:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c264:	bf00      	nop
 800c266:	3708      	adds	r7, #8
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}
 800c26c:	e000ed04 	.word	0xe000ed04

0800c270 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c270:	b480      	push	{r7}
 800c272:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c274:	4b0b      	ldr	r3, [pc, #44]	; (800c2a4 <vPortSetupTimerInterrupt+0x34>)
 800c276:	2200      	movs	r2, #0
 800c278:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c27a:	4b0b      	ldr	r3, [pc, #44]	; (800c2a8 <vPortSetupTimerInterrupt+0x38>)
 800c27c:	2200      	movs	r2, #0
 800c27e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c280:	4b0a      	ldr	r3, [pc, #40]	; (800c2ac <vPortSetupTimerInterrupt+0x3c>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4a0a      	ldr	r2, [pc, #40]	; (800c2b0 <vPortSetupTimerInterrupt+0x40>)
 800c286:	fba2 2303 	umull	r2, r3, r2, r3
 800c28a:	099b      	lsrs	r3, r3, #6
 800c28c:	4a09      	ldr	r2, [pc, #36]	; (800c2b4 <vPortSetupTimerInterrupt+0x44>)
 800c28e:	3b01      	subs	r3, #1
 800c290:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c292:	4b04      	ldr	r3, [pc, #16]	; (800c2a4 <vPortSetupTimerInterrupt+0x34>)
 800c294:	2207      	movs	r2, #7
 800c296:	601a      	str	r2, [r3, #0]
}
 800c298:	bf00      	nop
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr
 800c2a2:	bf00      	nop
 800c2a4:	e000e010 	.word	0xe000e010
 800c2a8:	e000e018 	.word	0xe000e018
 800c2ac:	20000000 	.word	0x20000000
 800c2b0:	10624dd3 	.word	0x10624dd3
 800c2b4:	e000e014 	.word	0xe000e014

0800c2b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c2b8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c2c8 <vPortEnableVFP+0x10>
 800c2bc:	6801      	ldr	r1, [r0, #0]
 800c2be:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c2c2:	6001      	str	r1, [r0, #0]
 800c2c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c2c6:	bf00      	nop
 800c2c8:	e000ed88 	.word	0xe000ed88

0800c2cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b085      	sub	sp, #20
 800c2d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c2d2:	f3ef 8305 	mrs	r3, IPSR
 800c2d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2b0f      	cmp	r3, #15
 800c2dc:	d916      	bls.n	800c30c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c2de:	4a19      	ldr	r2, [pc, #100]	; (800c344 <vPortValidateInterruptPriority+0x78>)
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c2e8:	4b17      	ldr	r3, [pc, #92]	; (800c348 <vPortValidateInterruptPriority+0x7c>)
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	7afa      	ldrb	r2, [r7, #11]
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d20c      	bcs.n	800c30c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800c2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f6:	b672      	cpsid	i
 800c2f8:	f383 8811 	msr	BASEPRI, r3
 800c2fc:	f3bf 8f6f 	isb	sy
 800c300:	f3bf 8f4f 	dsb	sy
 800c304:	b662      	cpsie	i
 800c306:	607b      	str	r3, [r7, #4]
}
 800c308:	bf00      	nop
 800c30a:	e7fe      	b.n	800c30a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c30c:	4b0f      	ldr	r3, [pc, #60]	; (800c34c <vPortValidateInterruptPriority+0x80>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c314:	4b0e      	ldr	r3, [pc, #56]	; (800c350 <vPortValidateInterruptPriority+0x84>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	429a      	cmp	r2, r3
 800c31a:	d90c      	bls.n	800c336 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800c31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c320:	b672      	cpsid	i
 800c322:	f383 8811 	msr	BASEPRI, r3
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	b662      	cpsie	i
 800c330:	603b      	str	r3, [r7, #0]
}
 800c332:	bf00      	nop
 800c334:	e7fe      	b.n	800c334 <vPortValidateInterruptPriority+0x68>
	}
 800c336:	bf00      	nop
 800c338:	3714      	adds	r7, #20
 800c33a:	46bd      	mov	sp, r7
 800c33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c340:	4770      	bx	lr
 800c342:	bf00      	nop
 800c344:	e000e3f0 	.word	0xe000e3f0
 800c348:	20009cc0 	.word	0x20009cc0
 800c34c:	e000ed0c 	.word	0xe000ed0c
 800c350:	20009cc4 	.word	0x20009cc4

0800c354 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b08a      	sub	sp, #40	; 0x28
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c35c:	2300      	movs	r3, #0
 800c35e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c360:	f7fe fc64 	bl	800ac2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c364:	4b5b      	ldr	r3, [pc, #364]	; (800c4d4 <pvPortMalloc+0x180>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d101      	bne.n	800c370 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c36c:	f000 f91a 	bl	800c5a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c370:	4b59      	ldr	r3, [pc, #356]	; (800c4d8 <pvPortMalloc+0x184>)
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	4013      	ands	r3, r2
 800c378:	2b00      	cmp	r3, #0
 800c37a:	f040 8092 	bne.w	800c4a2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d01f      	beq.n	800c3c4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800c384:	2208      	movs	r2, #8
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	4413      	add	r3, r2
 800c38a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f003 0307 	and.w	r3, r3, #7
 800c392:	2b00      	cmp	r3, #0
 800c394:	d016      	beq.n	800c3c4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f023 0307 	bic.w	r3, r3, #7
 800c39c:	3308      	adds	r3, #8
 800c39e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f003 0307 	and.w	r3, r3, #7
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d00c      	beq.n	800c3c4 <pvPortMalloc+0x70>
	__asm volatile
 800c3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ae:	b672      	cpsid	i
 800c3b0:	f383 8811 	msr	BASEPRI, r3
 800c3b4:	f3bf 8f6f 	isb	sy
 800c3b8:	f3bf 8f4f 	dsb	sy
 800c3bc:	b662      	cpsie	i
 800c3be:	617b      	str	r3, [r7, #20]
}
 800c3c0:	bf00      	nop
 800c3c2:	e7fe      	b.n	800c3c2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d06b      	beq.n	800c4a2 <pvPortMalloc+0x14e>
 800c3ca:	4b44      	ldr	r3, [pc, #272]	; (800c4dc <pvPortMalloc+0x188>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	687a      	ldr	r2, [r7, #4]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d866      	bhi.n	800c4a2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c3d4:	4b42      	ldr	r3, [pc, #264]	; (800c4e0 <pvPortMalloc+0x18c>)
 800c3d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c3d8:	4b41      	ldr	r3, [pc, #260]	; (800c4e0 <pvPortMalloc+0x18c>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3de:	e004      	b.n	800c3ea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800c3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d903      	bls.n	800c3fc <pvPortMalloc+0xa8>
 800c3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d1f1      	bne.n	800c3e0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c3fc:	4b35      	ldr	r3, [pc, #212]	; (800c4d4 <pvPortMalloc+0x180>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c402:	429a      	cmp	r2, r3
 800c404:	d04d      	beq.n	800c4a2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c406:	6a3b      	ldr	r3, [r7, #32]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	2208      	movs	r2, #8
 800c40c:	4413      	add	r3, r2
 800c40e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c412:	681a      	ldr	r2, [r3, #0]
 800c414:	6a3b      	ldr	r3, [r7, #32]
 800c416:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41a:	685a      	ldr	r2, [r3, #4]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	1ad2      	subs	r2, r2, r3
 800c420:	2308      	movs	r3, #8
 800c422:	005b      	lsls	r3, r3, #1
 800c424:	429a      	cmp	r2, r3
 800c426:	d921      	bls.n	800c46c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	4413      	add	r3, r2
 800c42e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c430:	69bb      	ldr	r3, [r7, #24]
 800c432:	f003 0307 	and.w	r3, r3, #7
 800c436:	2b00      	cmp	r3, #0
 800c438:	d00c      	beq.n	800c454 <pvPortMalloc+0x100>
	__asm volatile
 800c43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43e:	b672      	cpsid	i
 800c440:	f383 8811 	msr	BASEPRI, r3
 800c444:	f3bf 8f6f 	isb	sy
 800c448:	f3bf 8f4f 	dsb	sy
 800c44c:	b662      	cpsie	i
 800c44e:	613b      	str	r3, [r7, #16]
}
 800c450:	bf00      	nop
 800c452:	e7fe      	b.n	800c452 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c456:	685a      	ldr	r2, [r3, #4]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	1ad2      	subs	r2, r2, r3
 800c45c:	69bb      	ldr	r3, [r7, #24]
 800c45e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c462:	687a      	ldr	r2, [r7, #4]
 800c464:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c466:	69b8      	ldr	r0, [r7, #24]
 800c468:	f000 f8fe 	bl	800c668 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c46c:	4b1b      	ldr	r3, [pc, #108]	; (800c4dc <pvPortMalloc+0x188>)
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	1ad3      	subs	r3, r2, r3
 800c476:	4a19      	ldr	r2, [pc, #100]	; (800c4dc <pvPortMalloc+0x188>)
 800c478:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c47a:	4b18      	ldr	r3, [pc, #96]	; (800c4dc <pvPortMalloc+0x188>)
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	4b19      	ldr	r3, [pc, #100]	; (800c4e4 <pvPortMalloc+0x190>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	429a      	cmp	r2, r3
 800c484:	d203      	bcs.n	800c48e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c486:	4b15      	ldr	r3, [pc, #84]	; (800c4dc <pvPortMalloc+0x188>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4a16      	ldr	r2, [pc, #88]	; (800c4e4 <pvPortMalloc+0x190>)
 800c48c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c490:	685a      	ldr	r2, [r3, #4]
 800c492:	4b11      	ldr	r3, [pc, #68]	; (800c4d8 <pvPortMalloc+0x184>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	431a      	orrs	r2, r3
 800c498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49e:	2200      	movs	r2, #0
 800c4a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c4a2:	f7fe fbd1 	bl	800ac48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4a6:	69fb      	ldr	r3, [r7, #28]
 800c4a8:	f003 0307 	and.w	r3, r3, #7
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d00c      	beq.n	800c4ca <pvPortMalloc+0x176>
	__asm volatile
 800c4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b4:	b672      	cpsid	i
 800c4b6:	f383 8811 	msr	BASEPRI, r3
 800c4ba:	f3bf 8f6f 	isb	sy
 800c4be:	f3bf 8f4f 	dsb	sy
 800c4c2:	b662      	cpsie	i
 800c4c4:	60fb      	str	r3, [r7, #12]
}
 800c4c6:	bf00      	nop
 800c4c8:	e7fe      	b.n	800c4c8 <pvPortMalloc+0x174>
	return pvReturn;
 800c4ca:	69fb      	ldr	r3, [r7, #28]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3728      	adds	r7, #40	; 0x28
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}
 800c4d4:	2000d8d0 	.word	0x2000d8d0
 800c4d8:	2000d8dc 	.word	0x2000d8dc
 800c4dc:	2000d8d4 	.word	0x2000d8d4
 800c4e0:	2000d8c8 	.word	0x2000d8c8
 800c4e4:	2000d8d8 	.word	0x2000d8d8

0800c4e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b086      	sub	sp, #24
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d04c      	beq.n	800c594 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c4fa:	2308      	movs	r3, #8
 800c4fc:	425b      	negs	r3, r3
 800c4fe:	697a      	ldr	r2, [r7, #20]
 800c500:	4413      	add	r3, r2
 800c502:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	685a      	ldr	r2, [r3, #4]
 800c50c:	4b23      	ldr	r3, [pc, #140]	; (800c59c <vPortFree+0xb4>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4013      	ands	r3, r2
 800c512:	2b00      	cmp	r3, #0
 800c514:	d10c      	bne.n	800c530 <vPortFree+0x48>
	__asm volatile
 800c516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51a:	b672      	cpsid	i
 800c51c:	f383 8811 	msr	BASEPRI, r3
 800c520:	f3bf 8f6f 	isb	sy
 800c524:	f3bf 8f4f 	dsb	sy
 800c528:	b662      	cpsie	i
 800c52a:	60fb      	str	r3, [r7, #12]
}
 800c52c:	bf00      	nop
 800c52e:	e7fe      	b.n	800c52e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d00c      	beq.n	800c552 <vPortFree+0x6a>
	__asm volatile
 800c538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53c:	b672      	cpsid	i
 800c53e:	f383 8811 	msr	BASEPRI, r3
 800c542:	f3bf 8f6f 	isb	sy
 800c546:	f3bf 8f4f 	dsb	sy
 800c54a:	b662      	cpsie	i
 800c54c:	60bb      	str	r3, [r7, #8]
}
 800c54e:	bf00      	nop
 800c550:	e7fe      	b.n	800c550 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	685a      	ldr	r2, [r3, #4]
 800c556:	4b11      	ldr	r3, [pc, #68]	; (800c59c <vPortFree+0xb4>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	4013      	ands	r3, r2
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d019      	beq.n	800c594 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d115      	bne.n	800c594 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	685a      	ldr	r2, [r3, #4]
 800c56c:	4b0b      	ldr	r3, [pc, #44]	; (800c59c <vPortFree+0xb4>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	43db      	mvns	r3, r3
 800c572:	401a      	ands	r2, r3
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c578:	f7fe fb58 	bl	800ac2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	685a      	ldr	r2, [r3, #4]
 800c580:	4b07      	ldr	r3, [pc, #28]	; (800c5a0 <vPortFree+0xb8>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	4413      	add	r3, r2
 800c586:	4a06      	ldr	r2, [pc, #24]	; (800c5a0 <vPortFree+0xb8>)
 800c588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c58a:	6938      	ldr	r0, [r7, #16]
 800c58c:	f000 f86c 	bl	800c668 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c590:	f7fe fb5a 	bl	800ac48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c594:	bf00      	nop
 800c596:	3718      	adds	r7, #24
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}
 800c59c:	2000d8dc 	.word	0x2000d8dc
 800c5a0:	2000d8d4 	.word	0x2000d8d4

0800c5a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b085      	sub	sp, #20
 800c5a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c5aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c5ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c5b0:	4b27      	ldr	r3, [pc, #156]	; (800c650 <prvHeapInit+0xac>)
 800c5b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f003 0307 	and.w	r3, r3, #7
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d00c      	beq.n	800c5d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	3307      	adds	r3, #7
 800c5c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f023 0307 	bic.w	r3, r3, #7
 800c5ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c5cc:	68ba      	ldr	r2, [r7, #8]
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	1ad3      	subs	r3, r2, r3
 800c5d2:	4a1f      	ldr	r2, [pc, #124]	; (800c650 <prvHeapInit+0xac>)
 800c5d4:	4413      	add	r3, r2
 800c5d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c5dc:	4a1d      	ldr	r2, [pc, #116]	; (800c654 <prvHeapInit+0xb0>)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c5e2:	4b1c      	ldr	r3, [pc, #112]	; (800c654 <prvHeapInit+0xb0>)
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	68ba      	ldr	r2, [r7, #8]
 800c5ec:	4413      	add	r3, r2
 800c5ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c5f0:	2208      	movs	r2, #8
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	1a9b      	subs	r3, r3, r2
 800c5f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f023 0307 	bic.w	r3, r3, #7
 800c5fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	4a15      	ldr	r2, [pc, #84]	; (800c658 <prvHeapInit+0xb4>)
 800c604:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c606:	4b14      	ldr	r3, [pc, #80]	; (800c658 <prvHeapInit+0xb4>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2200      	movs	r2, #0
 800c60c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c60e:	4b12      	ldr	r3, [pc, #72]	; (800c658 <prvHeapInit+0xb4>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	2200      	movs	r2, #0
 800c614:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	68fa      	ldr	r2, [r7, #12]
 800c61e:	1ad2      	subs	r2, r2, r3
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c624:	4b0c      	ldr	r3, [pc, #48]	; (800c658 <prvHeapInit+0xb4>)
 800c626:	681a      	ldr	r2, [r3, #0]
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	4a0a      	ldr	r2, [pc, #40]	; (800c65c <prvHeapInit+0xb8>)
 800c632:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	4a09      	ldr	r2, [pc, #36]	; (800c660 <prvHeapInit+0xbc>)
 800c63a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c63c:	4b09      	ldr	r3, [pc, #36]	; (800c664 <prvHeapInit+0xc0>)
 800c63e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c642:	601a      	str	r2, [r3, #0]
}
 800c644:	bf00      	nop
 800c646:	3714      	adds	r7, #20
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr
 800c650:	20009cc8 	.word	0x20009cc8
 800c654:	2000d8c8 	.word	0x2000d8c8
 800c658:	2000d8d0 	.word	0x2000d8d0
 800c65c:	2000d8d8 	.word	0x2000d8d8
 800c660:	2000d8d4 	.word	0x2000d8d4
 800c664:	2000d8dc 	.word	0x2000d8dc

0800c668 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c668:	b480      	push	{r7}
 800c66a:	b085      	sub	sp, #20
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c670:	4b28      	ldr	r3, [pc, #160]	; (800c714 <prvInsertBlockIntoFreeList+0xac>)
 800c672:	60fb      	str	r3, [r7, #12]
 800c674:	e002      	b.n	800c67c <prvInsertBlockIntoFreeList+0x14>
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	60fb      	str	r3, [r7, #12]
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	687a      	ldr	r2, [r7, #4]
 800c682:	429a      	cmp	r2, r3
 800c684:	d8f7      	bhi.n	800c676 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	68ba      	ldr	r2, [r7, #8]
 800c690:	4413      	add	r3, r2
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	429a      	cmp	r2, r3
 800c696:	d108      	bne.n	800c6aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	685a      	ldr	r2, [r3, #4]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	685b      	ldr	r3, [r3, #4]
 800c6a0:	441a      	add	r2, r3
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	68ba      	ldr	r2, [r7, #8]
 800c6b4:	441a      	add	r2, r3
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	d118      	bne.n	800c6f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681a      	ldr	r2, [r3, #0]
 800c6c2:	4b15      	ldr	r3, [pc, #84]	; (800c718 <prvInsertBlockIntoFreeList+0xb0>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d00d      	beq.n	800c6e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	685a      	ldr	r2, [r3, #4]
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	441a      	add	r2, r3
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	681a      	ldr	r2, [r3, #0]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	601a      	str	r2, [r3, #0]
 800c6e4:	e008      	b.n	800c6f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c6e6:	4b0c      	ldr	r3, [pc, #48]	; (800c718 <prvInsertBlockIntoFreeList+0xb0>)
 800c6e8:	681a      	ldr	r2, [r3, #0]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	601a      	str	r2, [r3, #0]
 800c6ee:	e003      	b.n	800c6f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c6f8:	68fa      	ldr	r2, [r7, #12]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d002      	beq.n	800c706 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	687a      	ldr	r2, [r7, #4]
 800c704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c706:	bf00      	nop
 800c708:	3714      	adds	r7, #20
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr
 800c712:	bf00      	nop
 800c714:	2000d8c8 	.word	0x2000d8c8
 800c718:	2000d8d0 	.word	0x2000d8d0

0800c71c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	330c      	adds	r3, #12
 800c72c:	461a      	mov	r2, r3
 800c72e:	6839      	ldr	r1, [r7, #0]
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f003 fac5 	bl	800fcc0 <tcpip_send_msg_wait_sem>
 800c736:	4603      	mov	r3, r0
 800c738:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c73a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d103      	bne.n	800c74a <netconn_apimsg+0x2e>
    return apimsg->err;
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c748:	e001      	b.n	800c74e <netconn_apimsg+0x32>
  }
  return err;
 800c74a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
	...

0800c758 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b08c      	sub	sp, #48	; 0x30
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	4603      	mov	r3, r0
 800c760:	603a      	str	r2, [r7, #0]
 800c762:	71fb      	strb	r3, [r7, #7]
 800c764:	460b      	mov	r3, r1
 800c766:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800c768:	79fb      	ldrb	r3, [r7, #7]
 800c76a:	6839      	ldr	r1, [r7, #0]
 800c76c:	4618      	mov	r0, r3
 800c76e:	f000 ff2f 	bl	800d5d0 <netconn_alloc>
 800c772:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800c774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c776:	2b00      	cmp	r3, #0
 800c778:	d054      	beq.n	800c824 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800c77a:	79bb      	ldrb	r3, [r7, #6]
 800c77c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800c77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c780:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800c782:	f107 0308 	add.w	r3, r7, #8
 800c786:	4619      	mov	r1, r3
 800c788:	4829      	ldr	r0, [pc, #164]	; (800c830 <netconn_new_with_proto_and_callback+0xd8>)
 800c78a:	f7ff ffc7 	bl	800c71c <netconn_apimsg>
 800c78e:	4603      	mov	r3, r0
 800c790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800c794:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d043      	beq.n	800c824 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800c79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d005      	beq.n	800c7b0 <netconn_new_with_proto_and_callback+0x58>
 800c7a4:	4b23      	ldr	r3, [pc, #140]	; (800c834 <netconn_new_with_proto_and_callback+0xdc>)
 800c7a6:	22a3      	movs	r2, #163	; 0xa3
 800c7a8:	4923      	ldr	r1, [pc, #140]	; (800c838 <netconn_new_with_proto_and_callback+0xe0>)
 800c7aa:	4824      	ldr	r0, [pc, #144]	; (800c83c <netconn_new_with_proto_and_callback+0xe4>)
 800c7ac:	f00e faa2 	bl	801acf4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800c7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b2:	3310      	adds	r3, #16
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f00e f92b 	bl	801aa10 <sys_mbox_valid>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d105      	bne.n	800c7cc <netconn_new_with_proto_and_callback+0x74>
 800c7c0:	4b1c      	ldr	r3, [pc, #112]	; (800c834 <netconn_new_with_proto_and_callback+0xdc>)
 800c7c2:	22a4      	movs	r2, #164	; 0xa4
 800c7c4:	491e      	ldr	r1, [pc, #120]	; (800c840 <netconn_new_with_proto_and_callback+0xe8>)
 800c7c6:	481d      	ldr	r0, [pc, #116]	; (800c83c <netconn_new_with_proto_and_callback+0xe4>)
 800c7c8:	f00e fa94 	bl	801acf4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800c7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ce:	3314      	adds	r3, #20
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f00e f91d 	bl	801aa10 <sys_mbox_valid>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d005      	beq.n	800c7e8 <netconn_new_with_proto_and_callback+0x90>
 800c7dc:	4b15      	ldr	r3, [pc, #84]	; (800c834 <netconn_new_with_proto_and_callback+0xdc>)
 800c7de:	22a6      	movs	r2, #166	; 0xa6
 800c7e0:	4918      	ldr	r1, [pc, #96]	; (800c844 <netconn_new_with_proto_and_callback+0xec>)
 800c7e2:	4816      	ldr	r0, [pc, #88]	; (800c83c <netconn_new_with_proto_and_callback+0xe4>)
 800c7e4:	f00e fa86 	bl	801acf4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800c7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ea:	330c      	adds	r3, #12
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f00e f99d 	bl	801ab2c <sys_sem_valid>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d105      	bne.n	800c804 <netconn_new_with_proto_and_callback+0xac>
 800c7f8:	4b0e      	ldr	r3, [pc, #56]	; (800c834 <netconn_new_with_proto_and_callback+0xdc>)
 800c7fa:	22a9      	movs	r2, #169	; 0xa9
 800c7fc:	4912      	ldr	r1, [pc, #72]	; (800c848 <netconn_new_with_proto_and_callback+0xf0>)
 800c7fe:	480f      	ldr	r0, [pc, #60]	; (800c83c <netconn_new_with_proto_and_callback+0xe4>)
 800c800:	f00e fa78 	bl	801acf4 <iprintf>
      sys_sem_free(&conn->op_completed);
 800c804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c806:	330c      	adds	r3, #12
 800c808:	4618      	mov	r0, r3
 800c80a:	f00e f982 	bl	801ab12 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800c80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c810:	3310      	adds	r3, #16
 800c812:	4618      	mov	r0, r3
 800c814:	f00e f888 	bl	801a928 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800c818:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c81a:	2007      	movs	r0, #7
 800c81c:	f003 fffe 	bl	801081c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800c820:	2300      	movs	r3, #0
 800c822:	e000      	b.n	800c826 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800c824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c826:	4618      	mov	r0, r3
 800c828:	3730      	adds	r7, #48	; 0x30
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}
 800c82e:	bf00      	nop
 800c830:	0800d5a5 	.word	0x0800d5a5
 800c834:	0801c21c 	.word	0x0801c21c
 800c838:	0801c250 	.word	0x0801c250
 800c83c:	0801c274 	.word	0x0801c274
 800c840:	0801c29c 	.word	0x0801c29c
 800c844:	0801c2b4 	.word	0x0801c2b4
 800c848:	0801c2d8 	.word	0x0801c2d8

0800c84c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b08c      	sub	sp, #48	; 0x30
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d101      	bne.n	800c85e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800c85a:	2300      	movs	r3, #0
 800c85c:	e014      	b.n	800c888 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800c862:	2329      	movs	r3, #41	; 0x29
 800c864:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800c866:	f107 030c 	add.w	r3, r7, #12
 800c86a:	4619      	mov	r1, r3
 800c86c:	4808      	ldr	r0, [pc, #32]	; (800c890 <netconn_prepare_delete+0x44>)
 800c86e:	f7ff ff55 	bl	800c71c <netconn_apimsg>
 800c872:	4603      	mov	r3, r0
 800c874:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800c878:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d002      	beq.n	800c886 <netconn_prepare_delete+0x3a>
    return err;
 800c880:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c884:	e000      	b.n	800c888 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800c886:	2300      	movs	r3, #0
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3730      	adds	r7, #48	; 0x30
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	0800db11 	.word	0x0800db11

0800c894 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b084      	sub	sp, #16
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d101      	bne.n	800c8a6 <netconn_delete+0x12>
    return ERR_OK;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	e00d      	b.n	800c8c2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f7ff ffd0 	bl	800c84c <netconn_prepare_delete>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800c8b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d102      	bne.n	800c8be <netconn_delete+0x2a>
    netconn_free(conn);
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f000 fef7 	bl	800d6ac <netconn_free>
  }
  return err;
 800c8be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3710      	adds	r7, #16
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
	...

0800c8cc <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b08e      	sub	sp, #56	; 0x38
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]
 800c8d8:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d109      	bne.n	800c8f4 <netconn_getaddr+0x28>
 800c8e0:	4b1d      	ldr	r3, [pc, #116]	; (800c958 <netconn_getaddr+0x8c>)
 800c8e2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c8e6:	491d      	ldr	r1, [pc, #116]	; (800c95c <netconn_getaddr+0x90>)
 800c8e8:	481d      	ldr	r0, [pc, #116]	; (800c960 <netconn_getaddr+0x94>)
 800c8ea:	f00e fa03 	bl	801acf4 <iprintf>
 800c8ee:	f06f 030f 	mvn.w	r3, #15
 800c8f2:	e02d      	b.n	800c950 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d109      	bne.n	800c90e <netconn_getaddr+0x42>
 800c8fa:	4b17      	ldr	r3, [pc, #92]	; (800c958 <netconn_getaddr+0x8c>)
 800c8fc:	f240 1213 	movw	r2, #275	; 0x113
 800c900:	4918      	ldr	r1, [pc, #96]	; (800c964 <netconn_getaddr+0x98>)
 800c902:	4817      	ldr	r0, [pc, #92]	; (800c960 <netconn_getaddr+0x94>)
 800c904:	f00e f9f6 	bl	801acf4 <iprintf>
 800c908:	f06f 030f 	mvn.w	r3, #15
 800c90c:	e020      	b.n	800c950 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d109      	bne.n	800c928 <netconn_getaddr+0x5c>
 800c914:	4b10      	ldr	r3, [pc, #64]	; (800c958 <netconn_getaddr+0x8c>)
 800c916:	f44f 728a 	mov.w	r2, #276	; 0x114
 800c91a:	4913      	ldr	r1, [pc, #76]	; (800c968 <netconn_getaddr+0x9c>)
 800c91c:	4810      	ldr	r0, [pc, #64]	; (800c960 <netconn_getaddr+0x94>)
 800c91e:	f00e f9e9 	bl	801acf4 <iprintf>
 800c922:	f06f 030f 	mvn.w	r3, #15
 800c926:	e013      	b.n	800c950 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800c92c:	78fb      	ldrb	r3, [r7, #3]
 800c92e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800c93a:	f107 0314 	add.w	r3, r7, #20
 800c93e:	4619      	mov	r1, r3
 800c940:	480a      	ldr	r0, [pc, #40]	; (800c96c <netconn_getaddr+0xa0>)
 800c942:	f7ff feeb 	bl	800c71c <netconn_apimsg>
 800c946:	4603      	mov	r3, r0
 800c948:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800c94c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c950:	4618      	mov	r0, r3
 800c952:	3738      	adds	r7, #56	; 0x38
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}
 800c958:	0801c21c 	.word	0x0801c21c
 800c95c:	0801c2f4 	.word	0x0801c2f4
 800c960:	0801c274 	.word	0x0801c274
 800c964:	0801c314 	.word	0x0801c314
 800c968:	0801c334 	.word	0x0801c334
 800c96c:	0800e151 	.word	0x0800e151

0800c970 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b08e      	sub	sp, #56	; 0x38
 800c974:	af00      	add	r7, sp, #0
 800c976:	60f8      	str	r0, [r7, #12]
 800c978:	60b9      	str	r1, [r7, #8]
 800c97a:	4613      	mov	r3, r2
 800c97c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d109      	bne.n	800c998 <netconn_bind+0x28>
 800c984:	4b11      	ldr	r3, [pc, #68]	; (800c9cc <netconn_bind+0x5c>)
 800c986:	f44f 729c 	mov.w	r2, #312	; 0x138
 800c98a:	4911      	ldr	r1, [pc, #68]	; (800c9d0 <netconn_bind+0x60>)
 800c98c:	4811      	ldr	r0, [pc, #68]	; (800c9d4 <netconn_bind+0x64>)
 800c98e:	f00e f9b1 	bl	801acf4 <iprintf>
 800c992:	f06f 030f 	mvn.w	r3, #15
 800c996:	e015      	b.n	800c9c4 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d101      	bne.n	800c9a2 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800c99e:	4b0e      	ldr	r3, [pc, #56]	; (800c9d8 <netconn_bind+0x68>)
 800c9a0:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800c9aa:	88fb      	ldrh	r3, [r7, #6]
 800c9ac:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800c9ae:	f107 0314 	add.w	r3, r7, #20
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	4809      	ldr	r0, [pc, #36]	; (800c9dc <netconn_bind+0x6c>)
 800c9b6:	f7ff feb1 	bl	800c71c <netconn_apimsg>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800c9c0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3738      	adds	r7, #56	; 0x38
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	0801c21c 	.word	0x0801c21c
 800c9d0:	0801c354 	.word	0x0801c354
 800c9d4:	0801c274 	.word	0x0801c274
 800c9d8:	0801fb14 	.word	0x0801fb14
 800c9dc:	0800dcd9 	.word	0x0800dcd9

0800c9e0 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b088      	sub	sp, #32
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	60f8      	str	r0, [r7, #12]
 800c9e8:	60b9      	str	r1, [r7, #8]
 800c9ea:	4613      	mov	r3, r2
 800c9ec:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d109      	bne.n	800ca0c <netconn_recv_data+0x2c>
 800c9f8:	4b58      	ldr	r3, [pc, #352]	; (800cb5c <netconn_recv_data+0x17c>)
 800c9fa:	f44f 7212 	mov.w	r2, #584	; 0x248
 800c9fe:	4958      	ldr	r1, [pc, #352]	; (800cb60 <netconn_recv_data+0x180>)
 800ca00:	4858      	ldr	r0, [pc, #352]	; (800cb64 <netconn_recv_data+0x184>)
 800ca02:	f00e f977 	bl	801acf4 <iprintf>
 800ca06:	f06f 030f 	mvn.w	r3, #15
 800ca0a:	e0a2      	b.n	800cb52 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d109      	bne.n	800ca2c <netconn_recv_data+0x4c>
 800ca18:	4b50      	ldr	r3, [pc, #320]	; (800cb5c <netconn_recv_data+0x17c>)
 800ca1a:	f240 224a 	movw	r2, #586	; 0x24a
 800ca1e:	4952      	ldr	r1, [pc, #328]	; (800cb68 <netconn_recv_data+0x188>)
 800ca20:	4850      	ldr	r0, [pc, #320]	; (800cb64 <netconn_recv_data+0x184>)
 800ca22:	f00e f967 	bl	801acf4 <iprintf>
 800ca26:	f06f 030f 	mvn.w	r3, #15
 800ca2a:	e092      	b.n	800cb52 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	3310      	adds	r3, #16
 800ca30:	4618      	mov	r0, r3
 800ca32:	f00d ffed 	bl	801aa10 <sys_mbox_valid>
 800ca36:	4603      	mov	r3, r0
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d10e      	bne.n	800ca5a <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800ca3c:	68f8      	ldr	r0, [r7, #12]
 800ca3e:	f000 fa01 	bl	800ce44 <netconn_err>
 800ca42:	4603      	mov	r3, r0
 800ca44:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800ca46:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d002      	beq.n	800ca54 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800ca4e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800ca52:	e07e      	b.n	800cb52 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800ca54:	f06f 030a 	mvn.w	r3, #10
 800ca58:	e07b      	b.n	800cb52 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	7f1b      	ldrb	r3, [r3, #28]
 800ca5e:	f003 0302 	and.w	r3, r3, #2
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d10f      	bne.n	800ca86 <netconn_recv_data+0xa6>
 800ca66:	79fb      	ldrb	r3, [r7, #7]
 800ca68:	f003 0304 	and.w	r3, r3, #4
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d10a      	bne.n	800ca86 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	7f1b      	ldrb	r3, [r3, #28]
 800ca74:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d104      	bne.n	800ca86 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d023      	beq.n	800cace <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	3310      	adds	r3, #16
 800ca8a:	f107 0218 	add.w	r2, r7, #24
 800ca8e:	4611      	mov	r1, r2
 800ca90:	4618      	mov	r0, r3
 800ca92:	f00d ffa6 	bl	801a9e2 <sys_arch_mbox_tryfetch>
 800ca96:	4603      	mov	r3, r0
 800ca98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca9c:	d11f      	bne.n	800cade <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800ca9e:	68f8      	ldr	r0, [r7, #12]
 800caa0:	f000 f9d0 	bl	800ce44 <netconn_err>
 800caa4:	4603      	mov	r3, r0
 800caa6:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800caa8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d002      	beq.n	800cab6 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800cab0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800cab4:	e04d      	b.n	800cb52 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	7f1b      	ldrb	r3, [r3, #28]
 800caba:	f003 0301 	and.w	r3, r3, #1
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d002      	beq.n	800cac8 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800cac2:	f06f 030a 	mvn.w	r3, #10
 800cac6:	e044      	b.n	800cb52 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800cac8:	f06f 0306 	mvn.w	r3, #6
 800cacc:	e041      	b.n	800cb52 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	3310      	adds	r3, #16
 800cad2:	f107 0118 	add.w	r1, r7, #24
 800cad6:	2200      	movs	r2, #0
 800cad8:	4618      	mov	r0, r3
 800cada:	f00d ff51 	bl	801a980 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cae6:	2b10      	cmp	r3, #16
 800cae8:	d117      	bne.n	800cb1a <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800caea:	69bb      	ldr	r3, [r7, #24]
 800caec:	f107 0217 	add.w	r2, r7, #23
 800caf0:	4611      	mov	r1, r2
 800caf2:	4618      	mov	r0, r3
 800caf4:	f000 f9f8 	bl	800cee8 <lwip_netconn_is_err_msg>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d009      	beq.n	800cb12 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800cafe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb02:	f113 0f0f 	cmn.w	r3, #15
 800cb06:	d101      	bne.n	800cb0c <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	e022      	b.n	800cb52 <netconn_recv_data+0x172>
      }
      return err;
 800cb0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb10:	e01f      	b.n	800cb52 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800cb12:	69bb      	ldr	r3, [r7, #24]
 800cb14:	891b      	ldrh	r3, [r3, #8]
 800cb16:	83fb      	strh	r3, [r7, #30]
 800cb18:	e00d      	b.n	800cb36 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800cb1a:	69bb      	ldr	r3, [r7, #24]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d106      	bne.n	800cb2e <netconn_recv_data+0x14e>
 800cb20:	4b0e      	ldr	r3, [pc, #56]	; (800cb5c <netconn_recv_data+0x17c>)
 800cb22:	f240 2291 	movw	r2, #657	; 0x291
 800cb26:	4911      	ldr	r1, [pc, #68]	; (800cb6c <netconn_recv_data+0x18c>)
 800cb28:	480e      	ldr	r0, [pc, #56]	; (800cb64 <netconn_recv_data+0x184>)
 800cb2a:	f00e f8e3 	bl	801acf4 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800cb2e:	69bb      	ldr	r3, [r7, #24]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	891b      	ldrh	r3, [r3, #8]
 800cb34:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d005      	beq.n	800cb4a <netconn_recv_data+0x16a>
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb42:	8bfa      	ldrh	r2, [r7, #30]
 800cb44:	2101      	movs	r1, #1
 800cb46:	68f8      	ldr	r0, [r7, #12]
 800cb48:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800cb4a:	69ba      	ldr	r2, [r7, #24]
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800cb50:	2300      	movs	r3, #0
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3720      	adds	r7, #32
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
 800cb5a:	bf00      	nop
 800cb5c:	0801c21c 	.word	0x0801c21c
 800cb60:	0801c434 	.word	0x0801c434
 800cb64:	0801c274 	.word	0x0801c274
 800cb68:	0801c454 	.word	0x0801c454
 800cb6c:	0801c470 	.word	0x0801c470

0800cb70 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	60f8      	str	r0, [r7, #12]
 800cb78:	60b9      	str	r1, [r7, #8]
 800cb7a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d005      	beq.n	800cb8e <netconn_tcp_recvd_msg+0x1e>
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb8a:	2b10      	cmp	r3, #16
 800cb8c:	d009      	beq.n	800cba2 <netconn_tcp_recvd_msg+0x32>
 800cb8e:	4b0c      	ldr	r3, [pc, #48]	; (800cbc0 <netconn_tcp_recvd_msg+0x50>)
 800cb90:	f240 22a7 	movw	r2, #679	; 0x2a7
 800cb94:	490b      	ldr	r1, [pc, #44]	; (800cbc4 <netconn_tcp_recvd_msg+0x54>)
 800cb96:	480c      	ldr	r0, [pc, #48]	; (800cbc8 <netconn_tcp_recvd_msg+0x58>)
 800cb98:	f00e f8ac 	bl	801acf4 <iprintf>
 800cb9c:	f06f 030f 	mvn.w	r3, #15
 800cba0:	e00a      	b.n	800cbb8 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	68fa      	ldr	r2, [r7, #12]
 800cba6:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	68ba      	ldr	r2, [r7, #8]
 800cbac:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800cbae:	6879      	ldr	r1, [r7, #4]
 800cbb0:	4806      	ldr	r0, [pc, #24]	; (800cbcc <netconn_tcp_recvd_msg+0x5c>)
 800cbb2:	f7ff fdb3 	bl	800c71c <netconn_apimsg>
 800cbb6:	4603      	mov	r3, r0
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3710      	adds	r7, #16
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}
 800cbc0:	0801c21c 	.word	0x0801c21c
 800cbc4:	0801c47c 	.word	0x0801c47c
 800cbc8:	0801c274 	.word	0x0801c274
 800cbcc:	0800dd4d 	.word	0x0800dd4d

0800cbd0 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b08c      	sub	sp, #48	; 0x30
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d005      	beq.n	800cbec <netconn_tcp_recvd+0x1c>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbe8:	2b10      	cmp	r3, #16
 800cbea:	d009      	beq.n	800cc00 <netconn_tcp_recvd+0x30>
 800cbec:	4b0c      	ldr	r3, [pc, #48]	; (800cc20 <netconn_tcp_recvd+0x50>)
 800cbee:	f240 22b5 	movw	r2, #693	; 0x2b5
 800cbf2:	490c      	ldr	r1, [pc, #48]	; (800cc24 <netconn_tcp_recvd+0x54>)
 800cbf4:	480c      	ldr	r0, [pc, #48]	; (800cc28 <netconn_tcp_recvd+0x58>)
 800cbf6:	f00e f87d 	bl	801acf4 <iprintf>
 800cbfa:	f06f 030f 	mvn.w	r3, #15
 800cbfe:	e00b      	b.n	800cc18 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800cc00:	f107 030c 	add.w	r3, r7, #12
 800cc04:	461a      	mov	r2, r3
 800cc06:	6839      	ldr	r1, [r7, #0]
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f7ff ffb1 	bl	800cb70 <netconn_tcp_recvd_msg>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800cc14:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3730      	adds	r7, #48	; 0x30
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	0801c21c 	.word	0x0801c21c
 800cc24:	0801c47c 	.word	0x0801c47c
 800cc28:	0801c274 	.word	0x0801c274

0800cc2c <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b090      	sub	sp, #64	; 0x40
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	60b9      	str	r1, [r7, #8]
 800cc36:	4613      	mov	r3, r2
 800cc38:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	3310      	adds	r3, #16
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f00d fee6 	bl	801aa10 <sys_mbox_valid>
 800cc44:	4603      	mov	r3, r0
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d102      	bne.n	800cc50 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800cc4a:	f06f 030a 	mvn.w	r3, #10
 800cc4e:	e06d      	b.n	800cd2c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	7f1b      	ldrb	r3, [r3, #28]
 800cc54:	b25b      	sxtb	r3, r3
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	da07      	bge.n	800cc6a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	7f1b      	ldrb	r3, [r3, #28]
 800cc5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc62:	b2da      	uxtb	r2, r3
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800cc68:	e039      	b.n	800ccde <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800cc6a:	79fb      	ldrb	r3, [r7, #7]
 800cc6c:	461a      	mov	r2, r3
 800cc6e:	68b9      	ldr	r1, [r7, #8]
 800cc70:	68f8      	ldr	r0, [r7, #12]
 800cc72:	f7ff feb5 	bl	800c9e0 <netconn_recv_data>
 800cc76:	4603      	mov	r3, r0
 800cc78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800cc7c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d002      	beq.n	800cc8a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800cc84:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cc88:	e050      	b.n	800cd2c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800cc90:	79fb      	ldrb	r3, [r7, #7]
 800cc92:	f003 0308 	and.w	r3, r3, #8
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d10e      	bne.n	800ccb8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800cc9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d002      	beq.n	800cca6 <netconn_recv_data_tcp+0x7a>
 800cca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca2:	891b      	ldrh	r3, [r3, #8]
 800cca4:	e000      	b.n	800cca8 <netconn_recv_data_tcp+0x7c>
 800cca6:	2301      	movs	r3, #1
 800cca8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800ccaa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ccac:	f107 0214 	add.w	r2, r7, #20
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	68f8      	ldr	r0, [r7, #12]
 800ccb4:	f7ff ff5c 	bl	800cb70 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800ccb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d134      	bne.n	800cd28 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800ccbe:	79fb      	ldrb	r3, [r7, #7]
 800ccc0:	f003 0310 	and.w	r3, r3, #16
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d009      	beq.n	800ccdc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	7f1b      	ldrb	r3, [r3, #28]
 800cccc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ccd0:	b2da      	uxtb	r2, r3
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800ccd6:	f06f 0306 	mvn.w	r3, #6
 800ccda:	e027      	b.n	800cd2c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800ccdc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d005      	beq.n	800ccf2 <netconn_recv_data_tcp+0xc6>
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccea:	2200      	movs	r2, #0
 800ccec:	2101      	movs	r1, #1
 800ccee:	68f8      	ldr	r0, [r7, #12]
 800ccf0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d10f      	bne.n	800cd1a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800ccfa:	68f8      	ldr	r0, [r7, #12]
 800ccfc:	f000 f8a2 	bl	800ce44 <netconn_err>
 800cd00:	4603      	mov	r3, r0
 800cd02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800cd06:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d002      	beq.n	800cd14 <netconn_recv_data_tcp+0xe8>
          return err;
 800cd0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cd12:	e00b      	b.n	800cd2c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800cd14:	f06f 030d 	mvn.w	r3, #13
 800cd18:	e008      	b.n	800cd2c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800cd1a:	2101      	movs	r1, #1
 800cd1c:	68f8      	ldr	r0, [r7, #12]
 800cd1e:	f000 f861 	bl	800cde4 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800cd22:	f06f 030e 	mvn.w	r3, #14
 800cd26:	e001      	b.n	800cd2c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800cd28:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3740      	adds	r7, #64	; 0x40
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}

0800cd34 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b084      	sub	sp, #16
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	60b9      	str	r1, [r7, #8]
 800cd3e:	4613      	mov	r3, r2
 800cd40:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d005      	beq.n	800cd54 <netconn_recv_tcp_pbuf_flags+0x20>
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	781b      	ldrb	r3, [r3, #0]
 800cd4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd50:	2b10      	cmp	r3, #16
 800cd52:	d009      	beq.n	800cd68 <netconn_recv_tcp_pbuf_flags+0x34>
 800cd54:	4b0a      	ldr	r3, [pc, #40]	; (800cd80 <netconn_recv_tcp_pbuf_flags+0x4c>)
 800cd56:	f240 3225 	movw	r2, #805	; 0x325
 800cd5a:	490a      	ldr	r1, [pc, #40]	; (800cd84 <netconn_recv_tcp_pbuf_flags+0x50>)
 800cd5c:	480a      	ldr	r0, [pc, #40]	; (800cd88 <netconn_recv_tcp_pbuf_flags+0x54>)
 800cd5e:	f00d ffc9 	bl	801acf4 <iprintf>
 800cd62:	f06f 030f 	mvn.w	r3, #15
 800cd66:	e006      	b.n	800cd76 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800cd68:	79fb      	ldrb	r3, [r7, #7]
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	68b9      	ldr	r1, [r7, #8]
 800cd6e:	68f8      	ldr	r0, [r7, #12]
 800cd70:	f7ff ff5c 	bl	800cc2c <netconn_recv_data_tcp>
 800cd74:	4603      	mov	r3, r0
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3710      	adds	r7, #16
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}
 800cd7e:	bf00      	nop
 800cd80:	0801c21c 	.word	0x0801c21c
 800cd84:	0801c47c 	.word	0x0801c47c
 800cd88:	0801c274 	.word	0x0801c274

0800cd8c <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	60b9      	str	r1, [r7, #8]
 800cd96:	4613      	mov	r3, r2
 800cd98:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d005      	beq.n	800cdac <netconn_recv_udp_raw_netbuf_flags+0x20>
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cda8:	2b10      	cmp	r3, #16
 800cdaa:	d109      	bne.n	800cdc0 <netconn_recv_udp_raw_netbuf_flags+0x34>
 800cdac:	4b0a      	ldr	r3, [pc, #40]	; (800cdd8 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800cdae:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800cdb2:	490a      	ldr	r1, [pc, #40]	; (800cddc <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800cdb4:	480a      	ldr	r0, [pc, #40]	; (800cde0 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800cdb6:	f00d ff9d 	bl	801acf4 <iprintf>
 800cdba:	f06f 030f 	mvn.w	r3, #15
 800cdbe:	e006      	b.n	800cdce <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800cdc0:	79fb      	ldrb	r3, [r7, #7]
 800cdc2:	461a      	mov	r2, r3
 800cdc4:	68b9      	ldr	r1, [r7, #8]
 800cdc6:	68f8      	ldr	r0, [r7, #12]
 800cdc8:	f7ff fe0a 	bl	800c9e0 <netconn_recv_data>
 800cdcc:	4603      	mov	r3, r0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3710      	adds	r7, #16
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
 800cdd6:	bf00      	nop
 800cdd8:	0801c21c 	.word	0x0801c21c
 800cddc:	0801c4a0 	.word	0x0801c4a0
 800cde0:	0801c274 	.word	0x0801c274

0800cde4 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b08c      	sub	sp, #48	; 0x30
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	460b      	mov	r3, r1
 800cdee:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d109      	bne.n	800ce0a <netconn_close_shutdown+0x26>
 800cdf6:	4b0f      	ldr	r3, [pc, #60]	; (800ce34 <netconn_close_shutdown+0x50>)
 800cdf8:	f240 4247 	movw	r2, #1095	; 0x447
 800cdfc:	490e      	ldr	r1, [pc, #56]	; (800ce38 <netconn_close_shutdown+0x54>)
 800cdfe:	480f      	ldr	r0, [pc, #60]	; (800ce3c <netconn_close_shutdown+0x58>)
 800ce00:	f00d ff78 	bl	801acf4 <iprintf>
 800ce04:	f06f 030f 	mvn.w	r3, #15
 800ce08:	e010      	b.n	800ce2c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800ce0e:	78fb      	ldrb	r3, [r7, #3]
 800ce10:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800ce12:	2329      	movs	r3, #41	; 0x29
 800ce14:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800ce16:	f107 030c 	add.w	r3, r7, #12
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	4808      	ldr	r0, [pc, #32]	; (800ce40 <netconn_close_shutdown+0x5c>)
 800ce1e:	f7ff fc7d 	bl	800c71c <netconn_apimsg>
 800ce22:	4603      	mov	r3, r0
 800ce24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ce28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3730      	adds	r7, #48	; 0x30
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}
 800ce34:	0801c21c 	.word	0x0801c21c
 800ce38:	0801c558 	.word	0x0801c558
 800ce3c:	0801c274 	.word	0x0801c274
 800ce40:	0800e25d 	.word	0x0800e25d

0800ce44 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b084      	sub	sp, #16
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d101      	bne.n	800ce56 <netconn_err+0x12>
    return ERR_OK;
 800ce52:	2300      	movs	r3, #0
 800ce54:	e00d      	b.n	800ce72 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800ce56:	f00d fee5 	bl	801ac24 <sys_arch_protect>
 800ce5a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	7a1b      	ldrb	r3, [r3, #8]
 800ce60:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2200      	movs	r2, #0
 800ce66:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800ce68:	68f8      	ldr	r0, [r7, #12]
 800ce6a:	f00d fee9 	bl	801ac40 <sys_arch_unprotect>
  return err;
 800ce6e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3710      	adds	r7, #16
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
	...

0800ce7c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	4603      	mov	r3, r0
 800ce84:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800ce86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce8a:	f113 0f0d 	cmn.w	r3, #13
 800ce8e:	d009      	beq.n	800cea4 <lwip_netconn_err_to_msg+0x28>
 800ce90:	f113 0f0d 	cmn.w	r3, #13
 800ce94:	dc0c      	bgt.n	800ceb0 <lwip_netconn_err_to_msg+0x34>
 800ce96:	f113 0f0f 	cmn.w	r3, #15
 800ce9a:	d007      	beq.n	800ceac <lwip_netconn_err_to_msg+0x30>
 800ce9c:	f113 0f0e 	cmn.w	r3, #14
 800cea0:	d002      	beq.n	800cea8 <lwip_netconn_err_to_msg+0x2c>
 800cea2:	e005      	b.n	800ceb0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800cea4:	4b0a      	ldr	r3, [pc, #40]	; (800ced0 <lwip_netconn_err_to_msg+0x54>)
 800cea6:	e00e      	b.n	800cec6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800cea8:	4b0a      	ldr	r3, [pc, #40]	; (800ced4 <lwip_netconn_err_to_msg+0x58>)
 800ceaa:	e00c      	b.n	800cec6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800ceac:	4b0a      	ldr	r3, [pc, #40]	; (800ced8 <lwip_netconn_err_to_msg+0x5c>)
 800ceae:	e00a      	b.n	800cec6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800ceb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d005      	beq.n	800cec4 <lwip_netconn_err_to_msg+0x48>
 800ceb8:	4b08      	ldr	r3, [pc, #32]	; (800cedc <lwip_netconn_err_to_msg+0x60>)
 800ceba:	227d      	movs	r2, #125	; 0x7d
 800cebc:	4908      	ldr	r1, [pc, #32]	; (800cee0 <lwip_netconn_err_to_msg+0x64>)
 800cebe:	4809      	ldr	r0, [pc, #36]	; (800cee4 <lwip_netconn_err_to_msg+0x68>)
 800cec0:	f00d ff18 	bl	801acf4 <iprintf>
      return NULL;
 800cec4:	2300      	movs	r3, #0
  }
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3708      	adds	r7, #8
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
 800cece:	bf00      	nop
 800ced0:	0801f9bc 	.word	0x0801f9bc
 800ced4:	0801f9bd 	.word	0x0801f9bd
 800ced8:	0801f9be 	.word	0x0801f9be
 800cedc:	0801c574 	.word	0x0801c574
 800cee0:	0801c5a8 	.word	0x0801c5a8
 800cee4:	0801c5b8 	.word	0x0801c5b8

0800cee8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b082      	sub	sp, #8
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d105      	bne.n	800cf04 <lwip_netconn_is_err_msg+0x1c>
 800cef8:	4b12      	ldr	r3, [pc, #72]	; (800cf44 <lwip_netconn_is_err_msg+0x5c>)
 800cefa:	2285      	movs	r2, #133	; 0x85
 800cefc:	4912      	ldr	r1, [pc, #72]	; (800cf48 <lwip_netconn_is_err_msg+0x60>)
 800cefe:	4813      	ldr	r0, [pc, #76]	; (800cf4c <lwip_netconn_is_err_msg+0x64>)
 800cf00:	f00d fef8 	bl	801acf4 <iprintf>

  if (msg == &netconn_aborted) {
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	4a12      	ldr	r2, [pc, #72]	; (800cf50 <lwip_netconn_is_err_msg+0x68>)
 800cf08:	4293      	cmp	r3, r2
 800cf0a:	d104      	bne.n	800cf16 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	22f3      	movs	r2, #243	; 0xf3
 800cf10:	701a      	strb	r2, [r3, #0]
    return 1;
 800cf12:	2301      	movs	r3, #1
 800cf14:	e012      	b.n	800cf3c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	4a0e      	ldr	r2, [pc, #56]	; (800cf54 <lwip_netconn_is_err_msg+0x6c>)
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d104      	bne.n	800cf28 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	22f2      	movs	r2, #242	; 0xf2
 800cf22:	701a      	strb	r2, [r3, #0]
    return 1;
 800cf24:	2301      	movs	r3, #1
 800cf26:	e009      	b.n	800cf3c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	4a0b      	ldr	r2, [pc, #44]	; (800cf58 <lwip_netconn_is_err_msg+0x70>)
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d104      	bne.n	800cf3a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	22f1      	movs	r2, #241	; 0xf1
 800cf34:	701a      	strb	r2, [r3, #0]
    return 1;
 800cf36:	2301      	movs	r3, #1
 800cf38:	e000      	b.n	800cf3c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800cf3a:	2300      	movs	r3, #0
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3708      	adds	r7, #8
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}
 800cf44:	0801c574 	.word	0x0801c574
 800cf48:	0801c5e0 	.word	0x0801c5e0
 800cf4c:	0801c5b8 	.word	0x0801c5b8
 800cf50:	0801f9bc 	.word	0x0801f9bc
 800cf54:	0801f9bd 	.word	0x0801f9bd
 800cf58:	0801f9be 	.word	0x0801f9be

0800cf5c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b088      	sub	sp, #32
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	607a      	str	r2, [r7, #4]
 800cf68:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d105      	bne.n	800cf7c <recv_udp+0x20>
 800cf70:	4b34      	ldr	r3, [pc, #208]	; (800d044 <recv_udp+0xe8>)
 800cf72:	22e5      	movs	r2, #229	; 0xe5
 800cf74:	4934      	ldr	r1, [pc, #208]	; (800d048 <recv_udp+0xec>)
 800cf76:	4835      	ldr	r0, [pc, #212]	; (800d04c <recv_udp+0xf0>)
 800cf78:	f00d febc 	bl	801acf4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d105      	bne.n	800cf8e <recv_udp+0x32>
 800cf82:	4b30      	ldr	r3, [pc, #192]	; (800d044 <recv_udp+0xe8>)
 800cf84:	22e6      	movs	r2, #230	; 0xe6
 800cf86:	4932      	ldr	r1, [pc, #200]	; (800d050 <recv_udp+0xf4>)
 800cf88:	4830      	ldr	r0, [pc, #192]	; (800d04c <recv_udp+0xf0>)
 800cf8a:	f00d feb3 	bl	801acf4 <iprintf>
  conn = (struct netconn *)arg;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800cf92:	69fb      	ldr	r3, [r7, #28]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d103      	bne.n	800cfa0 <recv_udp+0x44>
    pbuf_free(p);
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f004 fb15 	bl	80115c8 <pbuf_free>
    return;
 800cf9e:	e04d      	b.n	800d03c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800cfa0:	69fb      	ldr	r3, [r7, #28]
 800cfa2:	685b      	ldr	r3, [r3, #4]
 800cfa4:	68ba      	ldr	r2, [r7, #8]
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d005      	beq.n	800cfb6 <recv_udp+0x5a>
 800cfaa:	4b26      	ldr	r3, [pc, #152]	; (800d044 <recv_udp+0xe8>)
 800cfac:	22ee      	movs	r2, #238	; 0xee
 800cfae:	4929      	ldr	r1, [pc, #164]	; (800d054 <recv_udp+0xf8>)
 800cfb0:	4826      	ldr	r0, [pc, #152]	; (800d04c <recv_udp+0xf0>)
 800cfb2:	f00d fe9f 	bl	801acf4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800cfb6:	69fb      	ldr	r3, [r7, #28]
 800cfb8:	3310      	adds	r3, #16
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f00d fd28 	bl	801aa10 <sys_mbox_valid>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d103      	bne.n	800cfce <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f004 fafe 	bl	80115c8 <pbuf_free>
    return;
 800cfcc:	e036      	b.n	800d03c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800cfce:	2006      	movs	r0, #6
 800cfd0:	f003 fbae 	bl	8010730 <memp_malloc>
 800cfd4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800cfd6:	69bb      	ldr	r3, [r7, #24]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d103      	bne.n	800cfe4 <recv_udp+0x88>
    pbuf_free(p);
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f004 faf3 	bl	80115c8 <pbuf_free>
    return;
 800cfe2:	e02b      	b.n	800d03c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800cfe4:	69bb      	ldr	r3, [r7, #24]
 800cfe6:	687a      	ldr	r2, [r7, #4]
 800cfe8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800cfea:	69bb      	ldr	r3, [r7, #24]
 800cfec:	687a      	ldr	r2, [r7, #4]
 800cfee:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d002      	beq.n	800cffc <recv_udp+0xa0>
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	e000      	b.n	800cffe <recv_udp+0xa2>
 800cffc:	2300      	movs	r3, #0
 800cffe:	69ba      	ldr	r2, [r7, #24]
 800d000:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800d002:	69bb      	ldr	r3, [r7, #24]
 800d004:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d006:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	891b      	ldrh	r3, [r3, #8]
 800d00c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800d00e:	69fb      	ldr	r3, [r7, #28]
 800d010:	3310      	adds	r3, #16
 800d012:	69b9      	ldr	r1, [r7, #24]
 800d014:	4618      	mov	r0, r3
 800d016:	f00d fc99 	bl	801a94c <sys_mbox_trypost>
 800d01a:	4603      	mov	r3, r0
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d003      	beq.n	800d028 <recv_udp+0xcc>
    netbuf_delete(buf);
 800d020:	69b8      	ldr	r0, [r7, #24]
 800d022:	f001 f9c5 	bl	800e3b0 <netbuf_delete>
    return;
 800d026:	e009      	b.n	800d03c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d028:	69fb      	ldr	r3, [r7, #28]
 800d02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d005      	beq.n	800d03c <recv_udp+0xe0>
 800d030:	69fb      	ldr	r3, [r7, #28]
 800d032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d034:	8afa      	ldrh	r2, [r7, #22]
 800d036:	2100      	movs	r1, #0
 800d038:	69f8      	ldr	r0, [r7, #28]
 800d03a:	4798      	blx	r3
  }
}
 800d03c:	3720      	adds	r7, #32
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	0801c574 	.word	0x0801c574
 800d048:	0801c5ec 	.word	0x0801c5ec
 800d04c:	0801c5b8 	.word	0x0801c5b8
 800d050:	0801c610 	.word	0x0801c610
 800d054:	0801c630 	.word	0x0801c630

0800d058 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b088      	sub	sp, #32
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	60f8      	str	r0, [r7, #12]
 800d060:	60b9      	str	r1, [r7, #8]
 800d062:	607a      	str	r2, [r7, #4]
 800d064:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d106      	bne.n	800d07a <recv_tcp+0x22>
 800d06c:	4b36      	ldr	r3, [pc, #216]	; (800d148 <recv_tcp+0xf0>)
 800d06e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d072:	4936      	ldr	r1, [pc, #216]	; (800d14c <recv_tcp+0xf4>)
 800d074:	4836      	ldr	r0, [pc, #216]	; (800d150 <recv_tcp+0xf8>)
 800d076:	f00d fe3d 	bl	801acf4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d106      	bne.n	800d08e <recv_tcp+0x36>
 800d080:	4b31      	ldr	r3, [pc, #196]	; (800d148 <recv_tcp+0xf0>)
 800d082:	f240 122d 	movw	r2, #301	; 0x12d
 800d086:	4933      	ldr	r1, [pc, #204]	; (800d154 <recv_tcp+0xfc>)
 800d088:	4831      	ldr	r0, [pc, #196]	; (800d150 <recv_tcp+0xf8>)
 800d08a:	f00d fe33 	bl	801acf4 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800d08e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d006      	beq.n	800d0a4 <recv_tcp+0x4c>
 800d096:	4b2c      	ldr	r3, [pc, #176]	; (800d148 <recv_tcp+0xf0>)
 800d098:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800d09c:	492e      	ldr	r1, [pc, #184]	; (800d158 <recv_tcp+0x100>)
 800d09e:	482c      	ldr	r0, [pc, #176]	; (800d150 <recv_tcp+0xf8>)
 800d0a0:	f00d fe28 	bl	801acf4 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d102      	bne.n	800d0b4 <recv_tcp+0x5c>
    return ERR_VAL;
 800d0ae:	f06f 0305 	mvn.w	r3, #5
 800d0b2:	e045      	b.n	800d140 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	68ba      	ldr	r2, [r7, #8]
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d006      	beq.n	800d0cc <recv_tcp+0x74>
 800d0be:	4b22      	ldr	r3, [pc, #136]	; (800d148 <recv_tcp+0xf0>)
 800d0c0:	f240 1235 	movw	r2, #309	; 0x135
 800d0c4:	4925      	ldr	r1, [pc, #148]	; (800d15c <recv_tcp+0x104>)
 800d0c6:	4822      	ldr	r0, [pc, #136]	; (800d150 <recv_tcp+0xf8>)
 800d0c8:	f00d fe14 	bl	801acf4 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	3310      	adds	r3, #16
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f00d fc9d 	bl	801aa10 <sys_mbox_valid>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d10d      	bne.n	800d0f8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d008      	beq.n	800d0f4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	891b      	ldrh	r3, [r3, #8]
 800d0e6:	4619      	mov	r1, r3
 800d0e8:	68b8      	ldr	r0, [r7, #8]
 800d0ea:	f005 f95b 	bl	80123a4 <tcp_recved>
      pbuf_free(p);
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f004 fa6a 	bl	80115c8 <pbuf_free>
    }
    return ERR_OK;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	e023      	b.n	800d140 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d005      	beq.n	800d10a <recv_tcp+0xb2>
    msg = p;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	891b      	ldrh	r3, [r3, #8]
 800d106:	83fb      	strh	r3, [r7, #30]
 800d108:	e003      	b.n	800d112 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800d10a:	4b15      	ldr	r3, [pc, #84]	; (800d160 <recv_tcp+0x108>)
 800d10c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800d10e:	2300      	movs	r3, #0
 800d110:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	3310      	adds	r3, #16
 800d116:	69b9      	ldr	r1, [r7, #24]
 800d118:	4618      	mov	r0, r3
 800d11a:	f00d fc17 	bl	801a94c <sys_mbox_trypost>
 800d11e:	4603      	mov	r3, r0
 800d120:	2b00      	cmp	r3, #0
 800d122:	d002      	beq.n	800d12a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800d124:	f04f 33ff 	mov.w	r3, #4294967295
 800d128:	e00a      	b.n	800d140 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d005      	beq.n	800d13e <recv_tcp+0xe6>
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d136:	8bfa      	ldrh	r2, [r7, #30]
 800d138:	2100      	movs	r1, #0
 800d13a:	6978      	ldr	r0, [r7, #20]
 800d13c:	4798      	blx	r3
  }

  return ERR_OK;
 800d13e:	2300      	movs	r3, #0
}
 800d140:	4618      	mov	r0, r3
 800d142:	3720      	adds	r7, #32
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}
 800d148:	0801c574 	.word	0x0801c574
 800d14c:	0801c650 	.word	0x0801c650
 800d150:	0801c5b8 	.word	0x0801c5b8
 800d154:	0801c674 	.word	0x0801c674
 800d158:	0801c694 	.word	0x0801c694
 800d15c:	0801c6ac 	.word	0x0801c6ac
 800d160:	0801f9be 	.word	0x0801f9be

0800d164 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b084      	sub	sp, #16
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d106      	bne.n	800d186 <poll_tcp+0x22>
 800d178:	4b29      	ldr	r3, [pc, #164]	; (800d220 <poll_tcp+0xbc>)
 800d17a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800d17e:	4929      	ldr	r1, [pc, #164]	; (800d224 <poll_tcp+0xc0>)
 800d180:	4829      	ldr	r0, [pc, #164]	; (800d228 <poll_tcp+0xc4>)
 800d182:	f00d fdb7 	bl	801acf4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	785b      	ldrb	r3, [r3, #1]
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d104      	bne.n	800d198 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d18e:	2101      	movs	r1, #1
 800d190:	68f8      	ldr	r0, [r7, #12]
 800d192:	f000 fe11 	bl	800ddb8 <lwip_netconn_do_writemore>
 800d196:	e016      	b.n	800d1c6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	785b      	ldrb	r3, [r3, #1]
 800d19c:	2b04      	cmp	r3, #4
 800d19e:	d112      	bne.n	800d1c6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	6a1b      	ldr	r3, [r3, #32]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d00a      	beq.n	800d1be <poll_tcp+0x5a>
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	6a1b      	ldr	r3, [r3, #32]
 800d1ac:	7a5b      	ldrb	r3, [r3, #9]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d005      	beq.n	800d1be <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	6a1b      	ldr	r3, [r3, #32]
 800d1b6:	7a5a      	ldrb	r2, [r3, #9]
 800d1b8:	3a01      	subs	r2, #1
 800d1ba:	b2d2      	uxtb	r2, r2
 800d1bc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d1be:	2101      	movs	r1, #1
 800d1c0:	68f8      	ldr	r0, [r7, #12]
 800d1c2:	f000 fb3b 	bl	800d83c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	7f1b      	ldrb	r3, [r3, #28]
 800d1ca:	f003 0310 	and.w	r3, r3, #16
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d021      	beq.n	800d216 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d01d      	beq.n	800d216 <poll_tcp+0xb2>
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d1e2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d1e6:	d316      	bcc.n	800d216 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	685b      	ldr	r3, [r3, #4]
 800d1ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d1f0:	2b04      	cmp	r3, #4
 800d1f2:	d810      	bhi.n	800d216 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	7f1b      	ldrb	r3, [r3, #28]
 800d1f8:	f023 0310 	bic.w	r3, r3, #16
 800d1fc:	b2da      	uxtb	r2, r3
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d206:	2b00      	cmp	r3, #0
 800d208:	d005      	beq.n	800d216 <poll_tcp+0xb2>
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d20e:	2200      	movs	r2, #0
 800d210:	2102      	movs	r1, #2
 800d212:	68f8      	ldr	r0, [r7, #12]
 800d214:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d216:	2300      	movs	r3, #0
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3710      	adds	r7, #16
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}
 800d220:	0801c574 	.word	0x0801c574
 800d224:	0801c6cc 	.word	0x0801c6cc
 800d228:	0801c5b8 	.word	0x0801c5b8

0800d22c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b086      	sub	sp, #24
 800d230:	af00      	add	r7, sp, #0
 800d232:	60f8      	str	r0, [r7, #12]
 800d234:	60b9      	str	r1, [r7, #8]
 800d236:	4613      	mov	r3, r2
 800d238:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d106      	bne.n	800d252 <sent_tcp+0x26>
 800d244:	4b20      	ldr	r3, [pc, #128]	; (800d2c8 <sent_tcp+0x9c>)
 800d246:	f240 1293 	movw	r2, #403	; 0x193
 800d24a:	4920      	ldr	r1, [pc, #128]	; (800d2cc <sent_tcp+0xa0>)
 800d24c:	4820      	ldr	r0, [pc, #128]	; (800d2d0 <sent_tcp+0xa4>)
 800d24e:	f00d fd51 	bl	801acf4 <iprintf>

  if (conn) {
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d032      	beq.n	800d2be <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	785b      	ldrb	r3, [r3, #1]
 800d25c:	2b01      	cmp	r3, #1
 800d25e:	d104      	bne.n	800d26a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d260:	2101      	movs	r1, #1
 800d262:	6978      	ldr	r0, [r7, #20]
 800d264:	f000 fda8 	bl	800ddb8 <lwip_netconn_do_writemore>
 800d268:	e007      	b.n	800d27a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	785b      	ldrb	r3, [r3, #1]
 800d26e:	2b04      	cmp	r3, #4
 800d270:	d103      	bne.n	800d27a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d272:	2101      	movs	r1, #1
 800d274:	6978      	ldr	r0, [r7, #20]
 800d276:	f000 fae1 	bl	800d83c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	685b      	ldr	r3, [r3, #4]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d01d      	beq.n	800d2be <sent_tcp+0x92>
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	685b      	ldr	r3, [r3, #4]
 800d286:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d28a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d28e:	d316      	bcc.n	800d2be <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d298:	2b04      	cmp	r3, #4
 800d29a:	d810      	bhi.n	800d2be <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	7f1b      	ldrb	r3, [r3, #28]
 800d2a0:	f023 0310 	bic.w	r3, r3, #16
 800d2a4:	b2da      	uxtb	r2, r3
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d005      	beq.n	800d2be <sent_tcp+0x92>
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2b6:	88fa      	ldrh	r2, [r7, #6]
 800d2b8:	2102      	movs	r1, #2
 800d2ba:	6978      	ldr	r0, [r7, #20]
 800d2bc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d2be:	2300      	movs	r3, #0
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3718      	adds	r7, #24
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	0801c574 	.word	0x0801c574
 800d2cc:	0801c6cc 	.word	0x0801c6cc
 800d2d0:	0801c5b8 	.word	0x0801c5b8

0800d2d4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b088      	sub	sp, #32
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	460b      	mov	r3, r1
 800d2de:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d2e4:	69fb      	ldr	r3, [r7, #28]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d106      	bne.n	800d2f8 <err_tcp+0x24>
 800d2ea:	4b5f      	ldr	r3, [pc, #380]	; (800d468 <err_tcp+0x194>)
 800d2ec:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800d2f0:	495e      	ldr	r1, [pc, #376]	; (800d46c <err_tcp+0x198>)
 800d2f2:	485f      	ldr	r0, [pc, #380]	; (800d470 <err_tcp+0x19c>)
 800d2f4:	f00d fcfe 	bl	801acf4 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800d2f8:	f00d fc94 	bl	801ac24 <sys_arch_protect>
 800d2fc:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800d2fe:	69fb      	ldr	r3, [r7, #28]
 800d300:	2200      	movs	r2, #0
 800d302:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800d304:	69fb      	ldr	r3, [r7, #28]
 800d306:	78fa      	ldrb	r2, [r7, #3]
 800d308:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800d30a:	69fb      	ldr	r3, [r7, #28]
 800d30c:	7f1b      	ldrb	r3, [r3, #28]
 800d30e:	f043 0301 	orr.w	r3, r3, #1
 800d312:	b2da      	uxtb	r2, r3
 800d314:	69fb      	ldr	r3, [r7, #28]
 800d316:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800d318:	69fb      	ldr	r3, [r7, #28]
 800d31a:	785b      	ldrb	r3, [r3, #1]
 800d31c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800d31e:	69fb      	ldr	r3, [r7, #28]
 800d320:	2200      	movs	r2, #0
 800d322:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800d324:	69b8      	ldr	r0, [r7, #24]
 800d326:	f00d fc8b 	bl	801ac40 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d32a:	69fb      	ldr	r3, [r7, #28]
 800d32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d005      	beq.n	800d33e <err_tcp+0x6a>
 800d332:	69fb      	ldr	r3, [r7, #28]
 800d334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d336:	2200      	movs	r2, #0
 800d338:	2104      	movs	r1, #4
 800d33a:	69f8      	ldr	r0, [r7, #28]
 800d33c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d33e:	69fb      	ldr	r3, [r7, #28]
 800d340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d342:	2b00      	cmp	r3, #0
 800d344:	d005      	beq.n	800d352 <err_tcp+0x7e>
 800d346:	69fb      	ldr	r3, [r7, #28]
 800d348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d34a:	2200      	movs	r2, #0
 800d34c:	2100      	movs	r1, #0
 800d34e:	69f8      	ldr	r0, [r7, #28]
 800d350:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d352:	69fb      	ldr	r3, [r7, #28]
 800d354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d356:	2b00      	cmp	r3, #0
 800d358:	d005      	beq.n	800d366 <err_tcp+0x92>
 800d35a:	69fb      	ldr	r3, [r7, #28]
 800d35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d35e:	2200      	movs	r2, #0
 800d360:	2102      	movs	r1, #2
 800d362:	69f8      	ldr	r0, [r7, #28]
 800d364:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800d366:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d36a:	4618      	mov	r0, r3
 800d36c:	f7ff fd86 	bl	800ce7c <lwip_netconn_err_to_msg>
 800d370:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d372:	69fb      	ldr	r3, [r7, #28]
 800d374:	3310      	adds	r3, #16
 800d376:	4618      	mov	r0, r3
 800d378:	f00d fb4a 	bl	801aa10 <sys_mbox_valid>
 800d37c:	4603      	mov	r3, r0
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d005      	beq.n	800d38e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800d382:	69fb      	ldr	r3, [r7, #28]
 800d384:	3310      	adds	r3, #16
 800d386:	6939      	ldr	r1, [r7, #16]
 800d388:	4618      	mov	r0, r3
 800d38a:	f00d fadf 	bl	801a94c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800d38e:	69fb      	ldr	r3, [r7, #28]
 800d390:	3314      	adds	r3, #20
 800d392:	4618      	mov	r0, r3
 800d394:	f00d fb3c 	bl	801aa10 <sys_mbox_valid>
 800d398:	4603      	mov	r3, r0
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d005      	beq.n	800d3aa <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800d39e:	69fb      	ldr	r3, [r7, #28]
 800d3a0:	3314      	adds	r3, #20
 800d3a2:	6939      	ldr	r1, [r7, #16]
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f00d fad1 	bl	801a94c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800d3aa:	7dfb      	ldrb	r3, [r7, #23]
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d005      	beq.n	800d3bc <err_tcp+0xe8>
 800d3b0:	7dfb      	ldrb	r3, [r7, #23]
 800d3b2:	2b04      	cmp	r3, #4
 800d3b4:	d002      	beq.n	800d3bc <err_tcp+0xe8>
 800d3b6:	7dfb      	ldrb	r3, [r7, #23]
 800d3b8:	2b03      	cmp	r3, #3
 800d3ba:	d143      	bne.n	800d444 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	7f1b      	ldrb	r3, [r3, #28]
 800d3c0:	f003 0304 	and.w	r3, r3, #4
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	bf14      	ite	ne
 800d3c8:	2301      	movne	r3, #1
 800d3ca:	2300      	moveq	r3, #0
 800d3cc:	b2db      	uxtb	r3, r3
 800d3ce:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800d3d0:	69fb      	ldr	r3, [r7, #28]
 800d3d2:	7f1b      	ldrb	r3, [r3, #28]
 800d3d4:	f023 0304 	bic.w	r3, r3, #4
 800d3d8:	b2da      	uxtb	r2, r3
 800d3da:	69fb      	ldr	r3, [r7, #28]
 800d3dc:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d13b      	bne.n	800d45c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d3e4:	69fb      	ldr	r3, [r7, #28]
 800d3e6:	6a1b      	ldr	r3, [r3, #32]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d106      	bne.n	800d3fa <err_tcp+0x126>
 800d3ec:	4b1e      	ldr	r3, [pc, #120]	; (800d468 <err_tcp+0x194>)
 800d3ee:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d3f2:	4920      	ldr	r1, [pc, #128]	; (800d474 <err_tcp+0x1a0>)
 800d3f4:	481e      	ldr	r0, [pc, #120]	; (800d470 <err_tcp+0x19c>)
 800d3f6:	f00d fc7d 	bl	801acf4 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800d3fa:	7dfb      	ldrb	r3, [r7, #23]
 800d3fc:	2b04      	cmp	r3, #4
 800d3fe:	d104      	bne.n	800d40a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	6a1b      	ldr	r3, [r3, #32]
 800d404:	2200      	movs	r2, #0
 800d406:	711a      	strb	r2, [r3, #4]
 800d408:	e003      	b.n	800d412 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800d40a:	69fb      	ldr	r3, [r7, #28]
 800d40c:	6a1b      	ldr	r3, [r3, #32]
 800d40e:	78fa      	ldrb	r2, [r7, #3]
 800d410:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d412:	69fb      	ldr	r3, [r7, #28]
 800d414:	6a1b      	ldr	r3, [r3, #32]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	330c      	adds	r3, #12
 800d41a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800d41c:	68b8      	ldr	r0, [r7, #8]
 800d41e:	f00d fb85 	bl	801ab2c <sys_sem_valid>
 800d422:	4603      	mov	r3, r0
 800d424:	2b00      	cmp	r3, #0
 800d426:	d106      	bne.n	800d436 <err_tcp+0x162>
 800d428:	4b0f      	ldr	r3, [pc, #60]	; (800d468 <err_tcp+0x194>)
 800d42a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800d42e:	4912      	ldr	r1, [pc, #72]	; (800d478 <err_tcp+0x1a4>)
 800d430:	480f      	ldr	r0, [pc, #60]	; (800d470 <err_tcp+0x19c>)
 800d432:	f00d fc5f 	bl	801acf4 <iprintf>
      conn->current_msg = NULL;
 800d436:	69fb      	ldr	r3, [r7, #28]
 800d438:	2200      	movs	r2, #0
 800d43a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800d43c:	68b8      	ldr	r0, [r7, #8]
 800d43e:	f00d fb5b 	bl	801aaf8 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800d442:	e00b      	b.n	800d45c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800d444:	69fb      	ldr	r3, [r7, #28]
 800d446:	6a1b      	ldr	r3, [r3, #32]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d008      	beq.n	800d45e <err_tcp+0x18a>
 800d44c:	4b06      	ldr	r3, [pc, #24]	; (800d468 <err_tcp+0x194>)
 800d44e:	f240 12f7 	movw	r2, #503	; 0x1f7
 800d452:	490a      	ldr	r1, [pc, #40]	; (800d47c <err_tcp+0x1a8>)
 800d454:	4806      	ldr	r0, [pc, #24]	; (800d470 <err_tcp+0x19c>)
 800d456:	f00d fc4d 	bl	801acf4 <iprintf>
  }
}
 800d45a:	e000      	b.n	800d45e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800d45c:	bf00      	nop
}
 800d45e:	bf00      	nop
 800d460:	3720      	adds	r7, #32
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	0801c574 	.word	0x0801c574
 800d46c:	0801c6cc 	.word	0x0801c6cc
 800d470:	0801c5b8 	.word	0x0801c5b8
 800d474:	0801c6dc 	.word	0x0801c6dc
 800d478:	0801c6f8 	.word	0x0801c6f8
 800d47c:	0801c714 	.word	0x0801c714

0800d480 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b084      	sub	sp, #16
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800d48e:	6879      	ldr	r1, [r7, #4]
 800d490:	68f8      	ldr	r0, [r7, #12]
 800d492:	f005 fe4d 	bl	8013130 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800d496:	490a      	ldr	r1, [pc, #40]	; (800d4c0 <setup_tcp+0x40>)
 800d498:	68f8      	ldr	r0, [r7, #12]
 800d49a:	f005 fe5b 	bl	8013154 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800d49e:	4909      	ldr	r1, [pc, #36]	; (800d4c4 <setup_tcp+0x44>)
 800d4a0:	68f8      	ldr	r0, [r7, #12]
 800d4a2:	f005 fe79 	bl	8013198 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800d4a6:	2202      	movs	r2, #2
 800d4a8:	4907      	ldr	r1, [pc, #28]	; (800d4c8 <setup_tcp+0x48>)
 800d4aa:	68f8      	ldr	r0, [r7, #12]
 800d4ac:	f005 fed0 	bl	8013250 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800d4b0:	4906      	ldr	r1, [pc, #24]	; (800d4cc <setup_tcp+0x4c>)
 800d4b2:	68f8      	ldr	r0, [r7, #12]
 800d4b4:	f005 fe92 	bl	80131dc <tcp_err>
}
 800d4b8:	bf00      	nop
 800d4ba:	3710      	adds	r7, #16
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	0800d059 	.word	0x0800d059
 800d4c4:	0800d22d 	.word	0x0800d22d
 800d4c8:	0800d165 	.word	0x0800d165
 800d4cc:	0800d2d5 	.word	0x0800d2d5

0800d4d0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800d4d0:	b590      	push	{r4, r7, lr}
 800d4d2:	b085      	sub	sp, #20
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	685b      	ldr	r3, [r3, #4]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d006      	beq.n	800d4f4 <pcb_new+0x24>
 800d4e6:	4b2b      	ldr	r3, [pc, #172]	; (800d594 <pcb_new+0xc4>)
 800d4e8:	f240 2265 	movw	r2, #613	; 0x265
 800d4ec:	492a      	ldr	r1, [pc, #168]	; (800d598 <pcb_new+0xc8>)
 800d4ee:	482b      	ldr	r0, [pc, #172]	; (800d59c <pcb_new+0xcc>)
 800d4f0:	f00d fc00 	bl	801acf4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	781b      	ldrb	r3, [r3, #0]
 800d4fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d4fe:	2b10      	cmp	r3, #16
 800d500:	d022      	beq.n	800d548 <pcb_new+0x78>
 800d502:	2b20      	cmp	r3, #32
 800d504:	d133      	bne.n	800d56e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681c      	ldr	r4, [r3, #0]
 800d50a:	7bfb      	ldrb	r3, [r7, #15]
 800d50c:	4618      	mov	r0, r3
 800d50e:	f00a feee 	bl	80182ee <udp_new_ip_type>
 800d512:	4603      	mov	r3, r0
 800d514:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	685b      	ldr	r3, [r3, #4]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d02a      	beq.n	800d576 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	781b      	ldrb	r3, [r3, #0]
 800d526:	2b22      	cmp	r3, #34	; 0x22
 800d528:	d104      	bne.n	800d534 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	2201      	movs	r2, #1
 800d532:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	6858      	ldr	r0, [r3, #4]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	461a      	mov	r2, r3
 800d540:	4917      	ldr	r1, [pc, #92]	; (800d5a0 <pcb_new+0xd0>)
 800d542:	f00a fe5b 	bl	80181fc <udp_recv>
      }
      break;
 800d546:	e016      	b.n	800d576 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681c      	ldr	r4, [r3, #0]
 800d54c:	7bfb      	ldrb	r3, [r7, #15]
 800d54e:	4618      	mov	r0, r3
 800d550:	f005 fde0 	bl	8013114 <tcp_new_ip_type>
 800d554:	4603      	mov	r3, r0
 800d556:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d00b      	beq.n	800d57a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	4618      	mov	r0, r3
 800d568:	f7ff ff8a 	bl	800d480 <setup_tcp>
      }
      break;
 800d56c:	e005      	b.n	800d57a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	22fa      	movs	r2, #250	; 0xfa
 800d572:	711a      	strb	r2, [r3, #4]
      return;
 800d574:	e00a      	b.n	800d58c <pcb_new+0xbc>
      break;
 800d576:	bf00      	nop
 800d578:	e000      	b.n	800d57c <pcb_new+0xac>
      break;
 800d57a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	685b      	ldr	r3, [r3, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d102      	bne.n	800d58c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	22ff      	movs	r2, #255	; 0xff
 800d58a:	711a      	strb	r2, [r3, #4]
  }
}
 800d58c:	3714      	adds	r7, #20
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd90      	pop	{r4, r7, pc}
 800d592:	bf00      	nop
 800d594:	0801c574 	.word	0x0801c574
 800d598:	0801c758 	.word	0x0801c758
 800d59c:	0801c5b8 	.word	0x0801c5b8
 800d5a0:	0800cf5d 	.word	0x0800cf5d

0800d5a4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b084      	sub	sp, #16
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	685b      	ldr	r3, [r3, #4]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d102      	bne.n	800d5c6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800d5c0:	68f8      	ldr	r0, [r7, #12]
 800d5c2:	f7ff ff85 	bl	800d4d0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800d5c6:	bf00      	nop
 800d5c8:	3710      	adds	r7, #16
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}
	...

0800d5d0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b086      	sub	sp, #24
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	6039      	str	r1, [r7, #0]
 800d5da:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800d5e0:	2007      	movs	r0, #7
 800d5e2:	f003 f8a5 	bl	8010730 <memp_malloc>
 800d5e6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d101      	bne.n	800d5f2 <netconn_alloc+0x22>
    return NULL;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	e052      	b.n	800d698 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	79fa      	ldrb	r2, [r7, #7]
 800d5fc:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	2200      	movs	r2, #0
 800d602:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800d604:	79fb      	ldrb	r3, [r7, #7]
 800d606:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d60a:	2b10      	cmp	r3, #16
 800d60c:	d004      	beq.n	800d618 <netconn_alloc+0x48>
 800d60e:	2b20      	cmp	r3, #32
 800d610:	d105      	bne.n	800d61e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800d612:	2306      	movs	r3, #6
 800d614:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800d616:	e00a      	b.n	800d62e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800d618:	2306      	movs	r3, #6
 800d61a:	617b      	str	r3, [r7, #20]
      break;
 800d61c:	e007      	b.n	800d62e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800d61e:	4b20      	ldr	r3, [pc, #128]	; (800d6a0 <netconn_alloc+0xd0>)
 800d620:	f240 22e5 	movw	r2, #741	; 0x2e5
 800d624:	491f      	ldr	r1, [pc, #124]	; (800d6a4 <netconn_alloc+0xd4>)
 800d626:	4820      	ldr	r0, [pc, #128]	; (800d6a8 <netconn_alloc+0xd8>)
 800d628:	f00d fb64 	bl	801acf4 <iprintf>
      goto free_and_return;
 800d62c:	e02f      	b.n	800d68e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	3310      	adds	r3, #16
 800d632:	6979      	ldr	r1, [r7, #20]
 800d634:	4618      	mov	r0, r3
 800d636:	f00d f95d 	bl	801a8f4 <sys_mbox_new>
 800d63a:	4603      	mov	r3, r0
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d125      	bne.n	800d68c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	330c      	adds	r3, #12
 800d644:	2100      	movs	r1, #0
 800d646:	4618      	mov	r0, r3
 800d648:	f00d fa00 	bl	801aa4c <sys_sem_new>
 800d64c:	4603      	mov	r3, r0
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d005      	beq.n	800d65e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	3310      	adds	r3, #16
 800d656:	4618      	mov	r0, r3
 800d658:	f00d f966 	bl	801a928 <sys_mbox_free>
    goto free_and_return;
 800d65c:	e017      	b.n	800d68e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	3314      	adds	r3, #20
 800d662:	4618      	mov	r0, r3
 800d664:	f00d f9e5 	bl	801aa32 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2200      	movs	r2, #0
 800d66c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f04f 32ff 	mov.w	r2, #4294967295
 800d674:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	683a      	ldr	r2, [r7, #0]
 800d67a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	2200      	movs	r2, #0
 800d680:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	7cfa      	ldrb	r2, [r7, #19]
 800d686:	771a      	strb	r2, [r3, #28]
  return conn;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	e005      	b.n	800d698 <netconn_alloc+0xc8>
    goto free_and_return;
 800d68c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800d68e:	68f9      	ldr	r1, [r7, #12]
 800d690:	2007      	movs	r0, #7
 800d692:	f003 f8c3 	bl	801081c <memp_free>
  return NULL;
 800d696:	2300      	movs	r3, #0
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3718      	adds	r7, #24
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}
 800d6a0:	0801c574 	.word	0x0801c574
 800d6a4:	0801c778 	.word	0x0801c778
 800d6a8:	0801c5b8 	.word	0x0801c5b8

0800d6ac <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	685b      	ldr	r3, [r3, #4]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d006      	beq.n	800d6ca <netconn_free+0x1e>
 800d6bc:	4b1b      	ldr	r3, [pc, #108]	; (800d72c <netconn_free+0x80>)
 800d6be:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d6c2:	491b      	ldr	r1, [pc, #108]	; (800d730 <netconn_free+0x84>)
 800d6c4:	481b      	ldr	r0, [pc, #108]	; (800d734 <netconn_free+0x88>)
 800d6c6:	f00d fb15 	bl	801acf4 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	3310      	adds	r3, #16
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f00d f99e 	bl	801aa10 <sys_mbox_valid>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d006      	beq.n	800d6e8 <netconn_free+0x3c>
 800d6da:	4b14      	ldr	r3, [pc, #80]	; (800d72c <netconn_free+0x80>)
 800d6dc:	f240 3223 	movw	r2, #803	; 0x323
 800d6e0:	4915      	ldr	r1, [pc, #84]	; (800d738 <netconn_free+0x8c>)
 800d6e2:	4814      	ldr	r0, [pc, #80]	; (800d734 <netconn_free+0x88>)
 800d6e4:	f00d fb06 	bl	801acf4 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	3314      	adds	r3, #20
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f00d f98f 	bl	801aa10 <sys_mbox_valid>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d006      	beq.n	800d706 <netconn_free+0x5a>
 800d6f8:	4b0c      	ldr	r3, [pc, #48]	; (800d72c <netconn_free+0x80>)
 800d6fa:	f240 3226 	movw	r2, #806	; 0x326
 800d6fe:	490f      	ldr	r1, [pc, #60]	; (800d73c <netconn_free+0x90>)
 800d700:	480c      	ldr	r0, [pc, #48]	; (800d734 <netconn_free+0x88>)
 800d702:	f00d faf7 	bl	801acf4 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	330c      	adds	r3, #12
 800d70a:	4618      	mov	r0, r3
 800d70c:	f00d fa01 	bl	801ab12 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	330c      	adds	r3, #12
 800d714:	4618      	mov	r0, r3
 800d716:	f00d fa1a 	bl	801ab4e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800d71a:	6879      	ldr	r1, [r7, #4]
 800d71c:	2007      	movs	r0, #7
 800d71e:	f003 f87d 	bl	801081c <memp_free>
}
 800d722:	bf00      	nop
 800d724:	3708      	adds	r7, #8
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
 800d72a:	bf00      	nop
 800d72c:	0801c574 	.word	0x0801c574
 800d730:	0801c7a0 	.word	0x0801c7a0
 800d734:	0801c5b8 	.word	0x0801c5b8
 800d738:	0801c7d0 	.word	0x0801c7d0
 800d73c:	0801c80c 	.word	0x0801c80c

0800d740 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b086      	sub	sp, #24
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	3310      	adds	r3, #16
 800d74c:	4618      	mov	r0, r3
 800d74e:	f00d f95f 	bl	801aa10 <sys_mbox_valid>
 800d752:	4603      	mov	r3, r0
 800d754:	2b00      	cmp	r3, #0
 800d756:	d02f      	beq.n	800d7b8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d758:	e018      	b.n	800d78c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d762:	2b10      	cmp	r3, #16
 800d764:	d10e      	bne.n	800d784 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	f107 020f 	add.w	r2, r7, #15
 800d76c:	4611      	mov	r1, r2
 800d76e:	4618      	mov	r0, r3
 800d770:	f7ff fbba 	bl	800cee8 <lwip_netconn_is_err_msg>
 800d774:	4603      	mov	r3, r0
 800d776:	2b00      	cmp	r3, #0
 800d778:	d108      	bne.n	800d78c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	4618      	mov	r0, r3
 800d77e:	f003 ff23 	bl	80115c8 <pbuf_free>
 800d782:	e003      	b.n	800d78c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	4618      	mov	r0, r3
 800d788:	f000 fe12 	bl	800e3b0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	3310      	adds	r3, #16
 800d790:	f107 0210 	add.w	r2, r7, #16
 800d794:	4611      	mov	r1, r2
 800d796:	4618      	mov	r0, r3
 800d798:	f00d f923 	bl	801a9e2 <sys_arch_mbox_tryfetch>
 800d79c:	4603      	mov	r3, r0
 800d79e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7a2:	d1da      	bne.n	800d75a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	3310      	adds	r3, #16
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f00d f8bd 	bl	801a928 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	3310      	adds	r3, #16
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f00d f93d 	bl	801aa32 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	3314      	adds	r3, #20
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f00d f927 	bl	801aa10 <sys_mbox_valid>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d034      	beq.n	800d832 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d7c8:	e01d      	b.n	800d806 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	f107 020e 	add.w	r2, r7, #14
 800d7d0:	4611      	mov	r1, r2
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7ff fb88 	bl	800cee8 <lwip_netconn_is_err_msg>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d113      	bne.n	800d806 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800d7e2:	6978      	ldr	r0, [r7, #20]
 800d7e4:	f7ff ffac 	bl	800d740 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	685b      	ldr	r3, [r3, #4]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d007      	beq.n	800d800 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f004 fcd7 	bl	80121a8 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800d800:	6978      	ldr	r0, [r7, #20]
 800d802:	f7ff ff53 	bl	800d6ac <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	3314      	adds	r3, #20
 800d80a:	f107 0210 	add.w	r2, r7, #16
 800d80e:	4611      	mov	r1, r2
 800d810:	4618      	mov	r0, r3
 800d812:	f00d f8e6 	bl	801a9e2 <sys_arch_mbox_tryfetch>
 800d816:	4603      	mov	r3, r0
 800d818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d81c:	d1d5      	bne.n	800d7ca <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	3314      	adds	r3, #20
 800d822:	4618      	mov	r0, r3
 800d824:	f00d f880 	bl	801a928 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	3314      	adds	r3, #20
 800d82c:	4618      	mov	r0, r3
 800d82e:	f00d f900 	bl	801aa32 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800d832:	bf00      	nop
 800d834:	3718      	adds	r7, #24
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
	...

0800d83c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b086      	sub	sp, #24
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
 800d844:	460b      	mov	r3, r1
 800d846:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800d848:	2300      	movs	r3, #0
 800d84a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d106      	bne.n	800d860 <lwip_netconn_do_close_internal+0x24>
 800d852:	4b87      	ldr	r3, [pc, #540]	; (800da70 <lwip_netconn_do_close_internal+0x234>)
 800d854:	f240 32a2 	movw	r2, #930	; 0x3a2
 800d858:	4986      	ldr	r1, [pc, #536]	; (800da74 <lwip_netconn_do_close_internal+0x238>)
 800d85a:	4887      	ldr	r0, [pc, #540]	; (800da78 <lwip_netconn_do_close_internal+0x23c>)
 800d85c:	f00d fa4a 	bl	801acf4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	781b      	ldrb	r3, [r3, #0]
 800d864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d868:	2b10      	cmp	r3, #16
 800d86a:	d006      	beq.n	800d87a <lwip_netconn_do_close_internal+0x3e>
 800d86c:	4b80      	ldr	r3, [pc, #512]	; (800da70 <lwip_netconn_do_close_internal+0x234>)
 800d86e:	f240 32a3 	movw	r2, #931	; 0x3a3
 800d872:	4982      	ldr	r1, [pc, #520]	; (800da7c <lwip_netconn_do_close_internal+0x240>)
 800d874:	4880      	ldr	r0, [pc, #512]	; (800da78 <lwip_netconn_do_close_internal+0x23c>)
 800d876:	f00d fa3d 	bl	801acf4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	785b      	ldrb	r3, [r3, #1]
 800d87e:	2b04      	cmp	r3, #4
 800d880:	d006      	beq.n	800d890 <lwip_netconn_do_close_internal+0x54>
 800d882:	4b7b      	ldr	r3, [pc, #492]	; (800da70 <lwip_netconn_do_close_internal+0x234>)
 800d884:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800d888:	497d      	ldr	r1, [pc, #500]	; (800da80 <lwip_netconn_do_close_internal+0x244>)
 800d88a:	487b      	ldr	r0, [pc, #492]	; (800da78 <lwip_netconn_do_close_internal+0x23c>)
 800d88c:	f00d fa32 	bl	801acf4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	685b      	ldr	r3, [r3, #4]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d106      	bne.n	800d8a6 <lwip_netconn_do_close_internal+0x6a>
 800d898:	4b75      	ldr	r3, [pc, #468]	; (800da70 <lwip_netconn_do_close_internal+0x234>)
 800d89a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800d89e:	4979      	ldr	r1, [pc, #484]	; (800da84 <lwip_netconn_do_close_internal+0x248>)
 800d8a0:	4875      	ldr	r0, [pc, #468]	; (800da78 <lwip_netconn_do_close_internal+0x23c>)
 800d8a2:	f00d fa27 	bl	801acf4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6a1b      	ldr	r3, [r3, #32]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d106      	bne.n	800d8bc <lwip_netconn_do_close_internal+0x80>
 800d8ae:	4b70      	ldr	r3, [pc, #448]	; (800da70 <lwip_netconn_do_close_internal+0x234>)
 800d8b0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d8b4:	4974      	ldr	r1, [pc, #464]	; (800da88 <lwip_netconn_do_close_internal+0x24c>)
 800d8b6:	4870      	ldr	r0, [pc, #448]	; (800da78 <lwip_netconn_do_close_internal+0x23c>)
 800d8b8:	f00d fa1c 	bl	801acf4 <iprintf>

  tpcb = conn->pcb.tcp;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6a1b      	ldr	r3, [r3, #32]
 800d8c6:	7a1b      	ldrb	r3, [r3, #8]
 800d8c8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800d8ca:	7bfb      	ldrb	r3, [r7, #15]
 800d8cc:	f003 0301 	and.w	r3, r3, #1
 800d8d0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800d8d2:	7bfb      	ldrb	r3, [r7, #15]
 800d8d4:	f003 0302 	and.w	r3, r3, #2
 800d8d8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800d8da:	7bfb      	ldrb	r3, [r7, #15]
 800d8dc:	2b03      	cmp	r3, #3
 800d8de:	d102      	bne.n	800d8e6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	75bb      	strb	r3, [r7, #22]
 800d8e4:	e01f      	b.n	800d926 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800d8e6:	7bbb      	ldrb	r3, [r7, #14]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d00e      	beq.n	800d90a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800d8f0:	2b05      	cmp	r3, #5
 800d8f2:	d007      	beq.n	800d904 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800d8f8:	2b06      	cmp	r3, #6
 800d8fa:	d003      	beq.n	800d904 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800d900:	2b08      	cmp	r3, #8
 800d902:	d102      	bne.n	800d90a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800d904:	2301      	movs	r3, #1
 800d906:	75bb      	strb	r3, [r7, #22]
 800d908:	e00d      	b.n	800d926 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800d90a:	7b7b      	ldrb	r3, [r7, #13]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d008      	beq.n	800d922 <lwip_netconn_do_close_internal+0xe6>
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	8b5b      	ldrh	r3, [r3, #26]
 800d914:	f003 0310 	and.w	r3, r3, #16
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d002      	beq.n	800d922 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800d91c:	2301      	movs	r3, #1
 800d91e:	75bb      	strb	r3, [r7, #22]
 800d920:	e001      	b.n	800d926 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800d922:	2300      	movs	r3, #0
 800d924:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800d926:	7dbb      	ldrb	r3, [r7, #22]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d003      	beq.n	800d934 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800d92c:	2100      	movs	r1, #0
 800d92e:	6938      	ldr	r0, [r7, #16]
 800d930:	f005 fbfe 	bl	8013130 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800d934:	693b      	ldr	r3, [r7, #16]
 800d936:	7d1b      	ldrb	r3, [r3, #20]
 800d938:	2b01      	cmp	r3, #1
 800d93a:	d104      	bne.n	800d946 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800d93c:	2100      	movs	r1, #0
 800d93e:	6938      	ldr	r0, [r7, #16]
 800d940:	f005 fc6e 	bl	8013220 <tcp_accept>
 800d944:	e01d      	b.n	800d982 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800d946:	7bbb      	ldrb	r3, [r7, #14]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d007      	beq.n	800d95c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800d94c:	2100      	movs	r1, #0
 800d94e:	6938      	ldr	r0, [r7, #16]
 800d950:	f005 fc00 	bl	8013154 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800d954:	2100      	movs	r1, #0
 800d956:	6938      	ldr	r0, [r7, #16]
 800d958:	f005 fc62 	bl	8013220 <tcp_accept>
    }
    if (shut_tx) {
 800d95c:	7b7b      	ldrb	r3, [r7, #13]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d003      	beq.n	800d96a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800d962:	2100      	movs	r1, #0
 800d964:	6938      	ldr	r0, [r7, #16]
 800d966:	f005 fc17 	bl	8013198 <tcp_sent>
    }
    if (shut_close) {
 800d96a:	7dbb      	ldrb	r3, [r7, #22]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d008      	beq.n	800d982 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800d970:	2200      	movs	r2, #0
 800d972:	2100      	movs	r1, #0
 800d974:	6938      	ldr	r0, [r7, #16]
 800d976:	f005 fc6b 	bl	8013250 <tcp_poll>
      tcp_err(tpcb, NULL);
 800d97a:	2100      	movs	r1, #0
 800d97c:	6938      	ldr	r0, [r7, #16]
 800d97e:	f005 fc2d 	bl	80131dc <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800d982:	7dbb      	ldrb	r3, [r7, #22]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d005      	beq.n	800d994 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800d988:	6938      	ldr	r0, [r7, #16]
 800d98a:	f004 fac7 	bl	8011f1c <tcp_close>
 800d98e:	4603      	mov	r3, r0
 800d990:	75fb      	strb	r3, [r7, #23]
 800d992:	e007      	b.n	800d9a4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800d994:	7bbb      	ldrb	r3, [r7, #14]
 800d996:	7b7a      	ldrb	r2, [r7, #13]
 800d998:	4619      	mov	r1, r3
 800d99a:	6938      	ldr	r0, [r7, #16]
 800d99c:	f004 faea 	bl	8011f74 <tcp_shutdown>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800d9a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d102      	bne.n	800d9b2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	757b      	strb	r3, [r7, #21]
 800d9b0:	e016      	b.n	800d9e0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800d9b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d9b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ba:	d10f      	bne.n	800d9dc <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6a1b      	ldr	r3, [r3, #32]
 800d9c0:	7a5b      	ldrb	r3, [r3, #9]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d10c      	bne.n	800d9e0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800d9ca:	7dbb      	ldrb	r3, [r7, #22]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d007      	beq.n	800d9e0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800d9d0:	6938      	ldr	r0, [r7, #16]
 800d9d2:	f004 fbe9 	bl	80121a8 <tcp_abort>
          err = ERR_OK;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	75fb      	strb	r3, [r7, #23]
 800d9da:	e001      	b.n	800d9e0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800d9dc:	2301      	movs	r3, #1
 800d9de:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800d9e0:	7d7b      	ldrb	r3, [r7, #21]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d052      	beq.n	800da8c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6a1b      	ldr	r3, [r3, #32]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	330c      	adds	r3, #12
 800d9ee:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6a1b      	ldr	r3, [r3, #32]
 800d9f4:	7dfa      	ldrb	r2, [r7, #23]
 800d9f6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2200      	movs	r2, #0
 800da02:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800da04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d129      	bne.n	800da60 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800da0c:	7dbb      	ldrb	r3, [r7, #22]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d00c      	beq.n	800da2c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2200      	movs	r2, #0
 800da16:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d005      	beq.n	800da2c <lwip_netconn_do_close_internal+0x1f0>
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da24:	2200      	movs	r2, #0
 800da26:	2104      	movs	r1, #4
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	4798      	blx	r3
      }
      if (shut_rx) {
 800da2c:	7bbb      	ldrb	r3, [r7, #14]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d009      	beq.n	800da46 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da36:	2b00      	cmp	r3, #0
 800da38:	d005      	beq.n	800da46 <lwip_netconn_do_close_internal+0x20a>
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da3e:	2200      	movs	r2, #0
 800da40:	2100      	movs	r1, #0
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	4798      	blx	r3
      }
      if (shut_tx) {
 800da46:	7b7b      	ldrb	r3, [r7, #13]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d009      	beq.n	800da60 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da50:	2b00      	cmp	r3, #0
 800da52:	d005      	beq.n	800da60 <lwip_netconn_do_close_internal+0x224>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da58:	2200      	movs	r2, #0
 800da5a:	2102      	movs	r1, #2
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800da60:	78fb      	ldrb	r3, [r7, #3]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d002      	beq.n	800da6c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800da66:	68b8      	ldr	r0, [r7, #8]
 800da68:	f00d f846 	bl	801aaf8 <sys_sem_signal>
    }
    return ERR_OK;
 800da6c:	2300      	movs	r3, #0
 800da6e:	e03c      	b.n	800daea <lwip_netconn_do_close_internal+0x2ae>
 800da70:	0801c574 	.word	0x0801c574
 800da74:	0801c848 	.word	0x0801c848
 800da78:	0801c5b8 	.word	0x0801c5b8
 800da7c:	0801c858 	.word	0x0801c858
 800da80:	0801c878 	.word	0x0801c878
 800da84:	0801c89c 	.word	0x0801c89c
 800da88:	0801c6dc 	.word	0x0801c6dc
  }
  if (!close_finished) {
 800da8c:	7d7b      	ldrb	r3, [r7, #21]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d11e      	bne.n	800dad0 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	7d1b      	ldrb	r3, [r3, #20]
 800da96:	2b01      	cmp	r3, #1
 800da98:	d106      	bne.n	800daa8 <lwip_netconn_do_close_internal+0x26c>
 800da9a:	4b16      	ldr	r3, [pc, #88]	; (800daf4 <lwip_netconn_do_close_internal+0x2b8>)
 800da9c:	f240 4241 	movw	r2, #1089	; 0x441
 800daa0:	4915      	ldr	r1, [pc, #84]	; (800daf8 <lwip_netconn_do_close_internal+0x2bc>)
 800daa2:	4816      	ldr	r0, [pc, #88]	; (800dafc <lwip_netconn_do_close_internal+0x2c0>)
 800daa4:	f00d f926 	bl	801acf4 <iprintf>
    if (shut_tx) {
 800daa8:	7b7b      	ldrb	r3, [r7, #13]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d003      	beq.n	800dab6 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800daae:	4914      	ldr	r1, [pc, #80]	; (800db00 <lwip_netconn_do_close_internal+0x2c4>)
 800dab0:	6938      	ldr	r0, [r7, #16]
 800dab2:	f005 fb71 	bl	8013198 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800dab6:	2201      	movs	r2, #1
 800dab8:	4912      	ldr	r1, [pc, #72]	; (800db04 <lwip_netconn_do_close_internal+0x2c8>)
 800daba:	6938      	ldr	r0, [r7, #16]
 800dabc:	f005 fbc8 	bl	8013250 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800dac0:	4911      	ldr	r1, [pc, #68]	; (800db08 <lwip_netconn_do_close_internal+0x2cc>)
 800dac2:	6938      	ldr	r0, [r7, #16]
 800dac4:	f005 fb8a 	bl	80131dc <tcp_err>
    tcp_arg(tpcb, conn);
 800dac8:	6879      	ldr	r1, [r7, #4]
 800daca:	6938      	ldr	r0, [r7, #16]
 800dacc:	f005 fb30 	bl	8013130 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800dad0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d106      	bne.n	800dae6 <lwip_netconn_do_close_internal+0x2aa>
 800dad8:	4b06      	ldr	r3, [pc, #24]	; (800daf4 <lwip_netconn_do_close_internal+0x2b8>)
 800dada:	f240 424d 	movw	r2, #1101	; 0x44d
 800dade:	490b      	ldr	r1, [pc, #44]	; (800db0c <lwip_netconn_do_close_internal+0x2d0>)
 800dae0:	4806      	ldr	r0, [pc, #24]	; (800dafc <lwip_netconn_do_close_internal+0x2c0>)
 800dae2:	f00d f907 	bl	801acf4 <iprintf>
  return err;
 800dae6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800daea:	4618      	mov	r0, r3
 800daec:	3718      	adds	r7, #24
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}
 800daf2:	bf00      	nop
 800daf4:	0801c574 	.word	0x0801c574
 800daf8:	0801c8b0 	.word	0x0801c8b0
 800dafc:	0801c5b8 	.word	0x0801c5b8
 800db00:	0800d22d 	.word	0x0800d22d
 800db04:	0800d165 	.word	0x0800d165
 800db08:	0800d2d5 	.word	0x0800d2d5
 800db0c:	0801c8d4 	.word	0x0801c8d4

0800db10 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b084      	sub	sp, #16
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	785b      	ldrb	r3, [r3, #1]
 800db22:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800db24:	7afb      	ldrb	r3, [r7, #11]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d00d      	beq.n	800db46 <lwip_netconn_do_delconn+0x36>
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800db34:	2b10      	cmp	r3, #16
 800db36:	d006      	beq.n	800db46 <lwip_netconn_do_delconn+0x36>
 800db38:	4b60      	ldr	r3, [pc, #384]	; (800dcbc <lwip_netconn_do_delconn+0x1ac>)
 800db3a:	f240 425e 	movw	r2, #1118	; 0x45e
 800db3e:	4960      	ldr	r1, [pc, #384]	; (800dcc0 <lwip_netconn_do_delconn+0x1b0>)
 800db40:	4860      	ldr	r0, [pc, #384]	; (800dcc4 <lwip_netconn_do_delconn+0x1b4>)
 800db42:	f00d f8d7 	bl	801acf4 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800db46:	7afb      	ldrb	r3, [r7, #11]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d005      	beq.n	800db58 <lwip_netconn_do_delconn+0x48>
 800db4c:	7afb      	ldrb	r3, [r7, #11]
 800db4e:	2b02      	cmp	r3, #2
 800db50:	d002      	beq.n	800db58 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800db52:	7afb      	ldrb	r3, [r7, #11]
 800db54:	2b03      	cmp	r3, #3
 800db56:	d109      	bne.n	800db6c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800db58:	7afb      	ldrb	r3, [r7, #11]
 800db5a:	2b03      	cmp	r3, #3
 800db5c:	d10a      	bne.n	800db74 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	7f1b      	ldrb	r3, [r3, #28]
 800db64:	f003 0304 	and.w	r3, r3, #4
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d103      	bne.n	800db74 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	22fb      	movs	r2, #251	; 0xfb
 800db70:	711a      	strb	r2, [r3, #4]
 800db72:	e097      	b.n	800dca4 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800db74:	7afb      	ldrb	r3, [r7, #11]
 800db76:	2b03      	cmp	r3, #3
 800db78:	d10d      	bne.n	800db96 <lwip_netconn_do_delconn+0x86>
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	7f1b      	ldrb	r3, [r3, #28]
 800db80:	f003 0304 	and.w	r3, r3, #4
 800db84:	2b00      	cmp	r3, #0
 800db86:	d106      	bne.n	800db96 <lwip_netconn_do_delconn+0x86>
 800db88:	4b4c      	ldr	r3, [pc, #304]	; (800dcbc <lwip_netconn_do_delconn+0x1ac>)
 800db8a:	f240 427a 	movw	r2, #1146	; 0x47a
 800db8e:	494e      	ldr	r1, [pc, #312]	; (800dcc8 <lwip_netconn_do_delconn+0x1b8>)
 800db90:	484c      	ldr	r0, [pc, #304]	; (800dcc4 <lwip_netconn_do_delconn+0x1b4>)
 800db92:	f00d f8af 	bl	801acf4 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	2200      	movs	r2, #0
 800db9a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	4618      	mov	r0, r3
 800dba2:	f7ff fdcd 	bl	800d740 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	685b      	ldr	r3, [r3, #4]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d05f      	beq.n	800dc70 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	781b      	ldrb	r3, [r3, #0]
 800dbb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dbba:	2b10      	cmp	r3, #16
 800dbbc:	d00d      	beq.n	800dbda <lwip_netconn_do_delconn+0xca>
 800dbbe:	2b20      	cmp	r3, #32
 800dbc0:	d151      	bne.n	800dc66 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	685b      	ldr	r3, [r3, #4]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	685b      	ldr	r3, [r3, #4]
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f00a fb32 	bl	801823c <udp_remove>
          break;
 800dbd8:	e046      	b.n	800dc68 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	6a1b      	ldr	r3, [r3, #32]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d006      	beq.n	800dbf2 <lwip_netconn_do_delconn+0xe2>
 800dbe4:	4b35      	ldr	r3, [pc, #212]	; (800dcbc <lwip_netconn_do_delconn+0x1ac>)
 800dbe6:	f240 4294 	movw	r2, #1172	; 0x494
 800dbea:	4938      	ldr	r1, [pc, #224]	; (800dccc <lwip_netconn_do_delconn+0x1bc>)
 800dbec:	4835      	ldr	r0, [pc, #212]	; (800dcc4 <lwip_netconn_do_delconn+0x1b4>)
 800dbee:	f00d f881 	bl	801acf4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	2204      	movs	r2, #4
 800dbf8:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	2203      	movs	r2, #3
 800dbfe:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	68fa      	ldr	r2, [r7, #12]
 800dc06:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	2100      	movs	r1, #0
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7ff fe14 	bl	800d83c <lwip_netconn_do_close_internal>
 800dc14:	4603      	mov	r3, r0
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d04b      	beq.n	800dcb2 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	785b      	ldrb	r3, [r3, #1]
 800dc20:	2b04      	cmp	r3, #4
 800dc22:	d006      	beq.n	800dc32 <lwip_netconn_do_delconn+0x122>
 800dc24:	4b25      	ldr	r3, [pc, #148]	; (800dcbc <lwip_netconn_do_delconn+0x1ac>)
 800dc26:	f240 429a 	movw	r2, #1178	; 0x49a
 800dc2a:	4929      	ldr	r1, [pc, #164]	; (800dcd0 <lwip_netconn_do_delconn+0x1c0>)
 800dc2c:	4825      	ldr	r0, [pc, #148]	; (800dcc4 <lwip_netconn_do_delconn+0x1b4>)
 800dc2e:	f00d f861 	bl	801acf4 <iprintf>
            UNLOCK_TCPIP_CORE();
 800dc32:	4828      	ldr	r0, [pc, #160]	; (800dcd4 <lwip_netconn_do_delconn+0x1c4>)
 800dc34:	f00c ffc9 	bl	801abca <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	330c      	adds	r3, #12
 800dc3e:	2100      	movs	r1, #0
 800dc40:	4618      	mov	r0, r3
 800dc42:	f00c ff28 	bl	801aa96 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800dc46:	4823      	ldr	r0, [pc, #140]	; (800dcd4 <lwip_netconn_do_delconn+0x1c4>)
 800dc48:	f00c ffb0 	bl	801abac <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	785b      	ldrb	r3, [r3, #1]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d02d      	beq.n	800dcb2 <lwip_netconn_do_delconn+0x1a2>
 800dc56:	4b19      	ldr	r3, [pc, #100]	; (800dcbc <lwip_netconn_do_delconn+0x1ac>)
 800dc58:	f240 429e 	movw	r2, #1182	; 0x49e
 800dc5c:	491c      	ldr	r1, [pc, #112]	; (800dcd0 <lwip_netconn_do_delconn+0x1c0>)
 800dc5e:	4819      	ldr	r0, [pc, #100]	; (800dcc4 <lwip_netconn_do_delconn+0x1b4>)
 800dc60:	f00d f848 	bl	801acf4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800dc64:	e025      	b.n	800dcb2 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800dc66:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d007      	beq.n	800dc8a <lwip_netconn_do_delconn+0x17a>
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc80:	68fa      	ldr	r2, [r7, #12]
 800dc82:	6810      	ldr	r0, [r2, #0]
 800dc84:	2200      	movs	r2, #0
 800dc86:	2100      	movs	r1, #0
 800dc88:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d007      	beq.n	800dca4 <lwip_netconn_do_delconn+0x194>
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc9a:	68fa      	ldr	r2, [r7, #12]
 800dc9c:	6810      	ldr	r0, [r2, #0]
 800dc9e:	2200      	movs	r2, #0
 800dca0:	2102      	movs	r1, #2
 800dca2:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	330c      	adds	r3, #12
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f00c ff3e 	bl	801ab2c <sys_sem_valid>
 800dcb0:	e000      	b.n	800dcb4 <lwip_netconn_do_delconn+0x1a4>
          return;
 800dcb2:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800dcb4:	3710      	adds	r7, #16
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}
 800dcba:	bf00      	nop
 800dcbc:	0801c574 	.word	0x0801c574
 800dcc0:	0801c8e4 	.word	0x0801c8e4
 800dcc4:	0801c5b8 	.word	0x0801c5b8
 800dcc8:	0801c8f8 	.word	0x0801c8f8
 800dccc:	0801c918 	.word	0x0801c918
 800dcd0:	0801c934 	.word	0x0801c934
 800dcd4:	2000d930 	.word	0x2000d930

0800dcd8 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b084      	sub	sp, #16
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d025      	beq.n	800dd3a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	781b      	ldrb	r3, [r3, #0]
 800dcf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dcf8:	2b10      	cmp	r3, #16
 800dcfa:	d00e      	beq.n	800dd1a <lwip_netconn_do_bind+0x42>
 800dcfc:	2b20      	cmp	r3, #32
 800dcfe:	d119      	bne.n	800dd34 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	6858      	ldr	r0, [r3, #4]
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	6899      	ldr	r1, [r3, #8]
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	899b      	ldrh	r3, [r3, #12]
 800dd0e:	461a      	mov	r2, r3
 800dd10:	f00a f9ec 	bl	80180ec <udp_bind>
 800dd14:	4603      	mov	r3, r0
 800dd16:	73fb      	strb	r3, [r7, #15]
        break;
 800dd18:	e011      	b.n	800dd3e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	6858      	ldr	r0, [r3, #4]
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	6899      	ldr	r1, [r3, #8]
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	899b      	ldrh	r3, [r3, #12]
 800dd28:	461a      	mov	r2, r3
 800dd2a:	f004 fa49 	bl	80121c0 <tcp_bind>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	73fb      	strb	r3, [r7, #15]
        break;
 800dd32:	e004      	b.n	800dd3e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800dd34:	23fa      	movs	r3, #250	; 0xfa
 800dd36:	73fb      	strb	r3, [r7, #15]
        break;
 800dd38:	e001      	b.n	800dd3e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800dd3a:	23fa      	movs	r3, #250	; 0xfa
 800dd3c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	7bfa      	ldrb	r2, [r7, #15]
 800dd42:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800dd44:	bf00      	nop
 800dd46:	3710      	adds	r7, #16
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}

0800dd4c <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b086      	sub	sp, #24
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	685b      	ldr	r3, [r3, #4]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d022      	beq.n	800ddae <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	781b      	ldrb	r3, [r3, #0]
 800dd6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dd72:	2b10      	cmp	r3, #16
 800dd74:	d11b      	bne.n	800ddae <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800dd76:	693b      	ldr	r3, [r7, #16]
 800dd78:	689b      	ldr	r3, [r3, #8]
 800dd7a:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800dd7c:	697b      	ldr	r3, [r7, #20]
 800dd7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd82:	d202      	bcs.n	800dd8a <lwip_netconn_do_recv+0x3e>
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	b29b      	uxth	r3, r3
 800dd88:	e001      	b.n	800dd8e <lwip_netconn_do_recv+0x42>
 800dd8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dd8e:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	685b      	ldr	r3, [r3, #4]
 800dd96:	89fa      	ldrh	r2, [r7, #14]
 800dd98:	4611      	mov	r1, r2
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f004 fb02 	bl	80123a4 <tcp_recved>
        remaining -= recved;
 800dda0:	89fb      	ldrh	r3, [r7, #14]
 800dda2:	697a      	ldr	r2, [r7, #20]
 800dda4:	1ad3      	subs	r3, r2, r3
 800dda6:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d1e6      	bne.n	800dd7c <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ddae:	bf00      	nop
 800ddb0:	3718      	adds	r7, #24
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
	...

0800ddb8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b088      	sub	sp, #32
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
 800ddc0:	460b      	mov	r3, r1
 800ddc2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d106      	bne.n	800dddc <lwip_netconn_do_writemore+0x24>
 800ddce:	4b96      	ldr	r3, [pc, #600]	; (800e028 <lwip_netconn_do_writemore+0x270>)
 800ddd0:	f240 6273 	movw	r2, #1651	; 0x673
 800ddd4:	4995      	ldr	r1, [pc, #596]	; (800e02c <lwip_netconn_do_writemore+0x274>)
 800ddd6:	4896      	ldr	r0, [pc, #600]	; (800e030 <lwip_netconn_do_writemore+0x278>)
 800ddd8:	f00c ff8c 	bl	801acf4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	785b      	ldrb	r3, [r3, #1]
 800dde0:	2b01      	cmp	r3, #1
 800dde2:	d006      	beq.n	800ddf2 <lwip_netconn_do_writemore+0x3a>
 800dde4:	4b90      	ldr	r3, [pc, #576]	; (800e028 <lwip_netconn_do_writemore+0x270>)
 800dde6:	f240 6274 	movw	r2, #1652	; 0x674
 800ddea:	4992      	ldr	r1, [pc, #584]	; (800e034 <lwip_netconn_do_writemore+0x27c>)
 800ddec:	4890      	ldr	r0, [pc, #576]	; (800e030 <lwip_netconn_do_writemore+0x278>)
 800ddee:	f00c ff81 	bl	801acf4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6a1b      	ldr	r3, [r3, #32]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d106      	bne.n	800de08 <lwip_netconn_do_writemore+0x50>
 800ddfa:	4b8b      	ldr	r3, [pc, #556]	; (800e028 <lwip_netconn_do_writemore+0x270>)
 800ddfc:	f240 6275 	movw	r2, #1653	; 0x675
 800de00:	498d      	ldr	r1, [pc, #564]	; (800e038 <lwip_netconn_do_writemore+0x280>)
 800de02:	488b      	ldr	r0, [pc, #556]	; (800e030 <lwip_netconn_do_writemore+0x278>)
 800de04:	f00c ff76 	bl	801acf4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	685b      	ldr	r3, [r3, #4]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d106      	bne.n	800de1e <lwip_netconn_do_writemore+0x66>
 800de10:	4b85      	ldr	r3, [pc, #532]	; (800e028 <lwip_netconn_do_writemore+0x270>)
 800de12:	f240 6276 	movw	r2, #1654	; 0x676
 800de16:	4989      	ldr	r1, [pc, #548]	; (800e03c <lwip_netconn_do_writemore+0x284>)
 800de18:	4885      	ldr	r0, [pc, #532]	; (800e030 <lwip_netconn_do_writemore+0x278>)
 800de1a:	f00c ff6b 	bl	801acf4 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6a1b      	ldr	r3, [r3, #32]
 800de22:	699a      	ldr	r2, [r3, #24]
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6a1b      	ldr	r3, [r3, #32]
 800de28:	695b      	ldr	r3, [r3, #20]
 800de2a:	429a      	cmp	r2, r3
 800de2c:	d306      	bcc.n	800de3c <lwip_netconn_do_writemore+0x84>
 800de2e:	4b7e      	ldr	r3, [pc, #504]	; (800e028 <lwip_netconn_do_writemore+0x270>)
 800de30:	f240 6277 	movw	r2, #1655	; 0x677
 800de34:	4982      	ldr	r1, [pc, #520]	; (800e040 <lwip_netconn_do_writemore+0x288>)
 800de36:	487e      	ldr	r0, [pc, #504]	; (800e030 <lwip_netconn_do_writemore+0x278>)
 800de38:	f00c ff5c 	bl	801acf4 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6a1b      	ldr	r3, [r3, #32]
 800de40:	899b      	ldrh	r3, [r3, #12]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d106      	bne.n	800de54 <lwip_netconn_do_writemore+0x9c>
 800de46:	4b78      	ldr	r3, [pc, #480]	; (800e028 <lwip_netconn_do_writemore+0x270>)
 800de48:	f240 6279 	movw	r2, #1657	; 0x679
 800de4c:	497d      	ldr	r1, [pc, #500]	; (800e044 <lwip_netconn_do_writemore+0x28c>)
 800de4e:	4878      	ldr	r0, [pc, #480]	; (800e030 <lwip_netconn_do_writemore+0x278>)
 800de50:	f00c ff50 	bl	801acf4 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6a1b      	ldr	r3, [r3, #32]
 800de58:	7f1b      	ldrb	r3, [r3, #28]
 800de5a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	7f1b      	ldrb	r3, [r3, #28]
 800de60:	f003 0302 	and.w	r3, r3, #2
 800de64:	2b00      	cmp	r3, #0
 800de66:	d104      	bne.n	800de72 <lwip_netconn_do_writemore+0xba>
 800de68:	7ebb      	ldrb	r3, [r7, #26]
 800de6a:	f003 0304 	and.w	r3, r3, #4
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d001      	beq.n	800de76 <lwip_netconn_do_writemore+0xbe>
 800de72:	2301      	movs	r3, #1
 800de74:	e000      	b.n	800de78 <lwip_netconn_do_writemore+0xc0>
 800de76:	2300      	movs	r3, #0
 800de78:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6a1b      	ldr	r3, [r3, #32]
 800de7e:	689b      	ldr	r3, [r3, #8]
 800de80:	681a      	ldr	r2, [r3, #0]
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6a1b      	ldr	r3, [r3, #32]
 800de86:	691b      	ldr	r3, [r3, #16]
 800de88:	4413      	add	r3, r2
 800de8a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	6a1b      	ldr	r3, [r3, #32]
 800de90:	689b      	ldr	r3, [r3, #8]
 800de92:	685a      	ldr	r2, [r3, #4]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6a1b      	ldr	r3, [r3, #32]
 800de98:	691b      	ldr	r3, [r3, #16]
 800de9a:	1ad3      	subs	r3, r2, r3
 800de9c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dea4:	d307      	bcc.n	800deb6 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800dea6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800deaa:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800deac:	7ebb      	ldrb	r3, [r7, #26]
 800deae:	f043 0302 	orr.w	r3, r3, #2
 800deb2:	76bb      	strb	r3, [r7, #26]
 800deb4:	e001      	b.n	800deba <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dec2:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800dec4:	89fa      	ldrh	r2, [r7, #14]
 800dec6:	8bbb      	ldrh	r3, [r7, #28]
 800dec8:	429a      	cmp	r2, r3
 800deca:	d216      	bcs.n	800defa <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800decc:	89fb      	ldrh	r3, [r7, #14]
 800dece:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800ded0:	7e3b      	ldrb	r3, [r7, #24]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d00d      	beq.n	800def2 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800ded6:	8bbb      	ldrh	r3, [r7, #28]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d10e      	bne.n	800defa <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6a1b      	ldr	r3, [r3, #32]
 800dee0:	699b      	ldr	r3, [r3, #24]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d102      	bne.n	800deec <lwip_netconn_do_writemore+0x134>
 800dee6:	f06f 0306 	mvn.w	r3, #6
 800deea:	e000      	b.n	800deee <lwip_netconn_do_writemore+0x136>
 800deec:	2300      	movs	r3, #0
 800deee:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800def0:	e07d      	b.n	800dfee <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800def2:	7ebb      	ldrb	r3, [r7, #26]
 800def4:	f043 0302 	orr.w	r3, r3, #2
 800def8:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6a1b      	ldr	r3, [r3, #32]
 800defe:	691a      	ldr	r2, [r3, #16]
 800df00:	8bbb      	ldrh	r3, [r7, #28]
 800df02:	441a      	add	r2, r3
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6a1b      	ldr	r3, [r3, #32]
 800df08:	689b      	ldr	r3, [r3, #8]
 800df0a:	685b      	ldr	r3, [r3, #4]
 800df0c:	429a      	cmp	r2, r3
 800df0e:	d906      	bls.n	800df1e <lwip_netconn_do_writemore+0x166>
 800df10:	4b45      	ldr	r3, [pc, #276]	; (800e028 <lwip_netconn_do_writemore+0x270>)
 800df12:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800df16:	494c      	ldr	r1, [pc, #304]	; (800e048 <lwip_netconn_do_writemore+0x290>)
 800df18:	4845      	ldr	r0, [pc, #276]	; (800e030 <lwip_netconn_do_writemore+0x278>)
 800df1a:	f00c feeb 	bl	801acf4 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800df1e:	8bbb      	ldrh	r3, [r7, #28]
 800df20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df24:	4293      	cmp	r3, r2
 800df26:	d103      	bne.n	800df30 <lwip_netconn_do_writemore+0x178>
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df2e:	d209      	bcs.n	800df44 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800df34:	8bba      	ldrh	r2, [r7, #28]
 800df36:	429a      	cmp	r2, r3
 800df38:	d10b      	bne.n	800df52 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6a1b      	ldr	r3, [r3, #32]
 800df3e:	899b      	ldrh	r3, [r3, #12]
 800df40:	2b01      	cmp	r3, #1
 800df42:	d906      	bls.n	800df52 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800df44:	2301      	movs	r3, #1
 800df46:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800df48:	7ebb      	ldrb	r3, [r7, #26]
 800df4a:	f043 0302 	orr.w	r3, r3, #2
 800df4e:	76bb      	strb	r3, [r7, #26]
 800df50:	e001      	b.n	800df56 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800df52:	2300      	movs	r3, #0
 800df54:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6858      	ldr	r0, [r3, #4]
 800df5a:	7ebb      	ldrb	r3, [r7, #26]
 800df5c:	8bba      	ldrh	r2, [r7, #28]
 800df5e:	6979      	ldr	r1, [r7, #20]
 800df60:	f008 f828 	bl	8015fb4 <tcp_write>
 800df64:	4603      	mov	r3, r0
 800df66:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800df68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d12c      	bne.n	800dfca <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6a1b      	ldr	r3, [r3, #32]
 800df74:	6999      	ldr	r1, [r3, #24]
 800df76:	8bba      	ldrh	r2, [r7, #28]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6a1b      	ldr	r3, [r3, #32]
 800df7c:	440a      	add	r2, r1
 800df7e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6a1b      	ldr	r3, [r3, #32]
 800df84:	6919      	ldr	r1, [r3, #16]
 800df86:	8bba      	ldrh	r2, [r7, #28]
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6a1b      	ldr	r3, [r3, #32]
 800df8c:	440a      	add	r2, r1
 800df8e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	6a1b      	ldr	r3, [r3, #32]
 800df94:	691a      	ldr	r2, [r3, #16]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6a1b      	ldr	r3, [r3, #32]
 800df9a:	689b      	ldr	r3, [r3, #8]
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	d113      	bne.n	800dfca <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6a1b      	ldr	r3, [r3, #32]
 800dfa6:	899a      	ldrh	r2, [r3, #12]
 800dfa8:	3a01      	subs	r2, #1
 800dfaa:	b292      	uxth	r2, r2
 800dfac:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	6a1b      	ldr	r3, [r3, #32]
 800dfb2:	899b      	ldrh	r3, [r3, #12]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d008      	beq.n	800dfca <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6a1b      	ldr	r3, [r3, #32]
 800dfbc:	689a      	ldr	r2, [r3, #8]
 800dfbe:	3208      	adds	r2, #8
 800dfc0:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6a1b      	ldr	r3, [r3, #32]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800dfca:	7e7b      	ldrb	r3, [r7, #25]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d004      	beq.n	800dfda <lwip_netconn_do_writemore+0x222>
 800dfd0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	f43f af50 	beq.w	800de7a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800dfda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d004      	beq.n	800dfec <lwip_netconn_do_writemore+0x234>
 800dfe2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dfe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfea:	d146      	bne.n	800e07a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800dfec:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800dfee:	7e3b      	ldrb	r3, [r7, #24]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d02b      	beq.n	800e04c <lwip_netconn_do_writemore+0x294>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6a1b      	ldr	r3, [r3, #32]
 800dff8:	699a      	ldr	r2, [r3, #24]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6a1b      	ldr	r3, [r3, #32]
 800dffe:	695b      	ldr	r3, [r3, #20]
 800e000:	429a      	cmp	r2, r3
 800e002:	d223      	bcs.n	800e04c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d005      	beq.n	800e018 <lwip_netconn_do_writemore+0x260>
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e010:	2200      	movs	r2, #0
 800e012:	2103      	movs	r1, #3
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	7f1b      	ldrb	r3, [r3, #28]
 800e01c:	f043 0310 	orr.w	r3, r3, #16
 800e020:	b2da      	uxtb	r2, r3
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	771a      	strb	r2, [r3, #28]
 800e026:	e028      	b.n	800e07a <lwip_netconn_do_writemore+0x2c2>
 800e028:	0801c574 	.word	0x0801c574
 800e02c:	0801c6cc 	.word	0x0801c6cc
 800e030:	0801c5b8 	.word	0x0801c5b8
 800e034:	0801c9d4 	.word	0x0801c9d4
 800e038:	0801c6dc 	.word	0x0801c6dc
 800e03c:	0801c9f4 	.word	0x0801c9f4
 800e040:	0801ca0c 	.word	0x0801ca0c
 800e044:	0801ca4c 	.word	0x0801ca4c
 800e048:	0801ca74 	.word	0x0801ca74
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	685b      	ldr	r3, [r3, #4]
 800e050:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e054:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e058:	d305      	bcc.n	800e066 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	685b      	ldr	r3, [r3, #4]
 800e05e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e062:	2b04      	cmp	r3, #4
 800e064:	d909      	bls.n	800e07a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d005      	beq.n	800e07a <lwip_netconn_do_writemore+0x2c2>
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e072:	2200      	movs	r2, #0
 800e074:	2103      	movs	r1, #3
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800e07a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d11d      	bne.n	800e0be <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6a1b      	ldr	r3, [r3, #32]
 800e086:	699a      	ldr	r2, [r3, #24]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6a1b      	ldr	r3, [r3, #32]
 800e08c:	695b      	ldr	r3, [r3, #20]
 800e08e:	429a      	cmp	r2, r3
 800e090:	d002      	beq.n	800e098 <lwip_netconn_do_writemore+0x2e0>
 800e092:	7e3b      	ldrb	r3, [r7, #24]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d001      	beq.n	800e09c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800e098:	2301      	movs	r3, #1
 800e09a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f008 fd71 	bl	8016b88 <tcp_output>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800e0aa:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800e0ae:	f113 0f04 	cmn.w	r3, #4
 800e0b2:	d12c      	bne.n	800e10e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e0b4:	7b3b      	ldrb	r3, [r7, #12]
 800e0b6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	76fb      	strb	r3, [r7, #27]
 800e0bc:	e027      	b.n	800e10e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800e0be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0c6:	d120      	bne.n	800e10a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	685b      	ldr	r3, [r3, #4]
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f008 fd5b 	bl	8016b88 <tcp_output>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800e0d6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e0da:	f113 0f04 	cmn.w	r3, #4
 800e0de:	d104      	bne.n	800e0ea <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e0e0:	7b7b      	ldrb	r3, [r7, #13]
 800e0e2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	76fb      	strb	r3, [r7, #27]
 800e0e8:	e011      	b.n	800e10e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800e0ea:	7e3b      	ldrb	r3, [r7, #24]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d00e      	beq.n	800e10e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6a1b      	ldr	r3, [r3, #32]
 800e0f4:	699b      	ldr	r3, [r3, #24]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d102      	bne.n	800e100 <lwip_netconn_do_writemore+0x348>
 800e0fa:	f06f 0306 	mvn.w	r3, #6
 800e0fe:	e000      	b.n	800e102 <lwip_netconn_do_writemore+0x34a>
 800e100:	2300      	movs	r3, #0
 800e102:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e104:	2301      	movs	r3, #1
 800e106:	76fb      	strb	r3, [r7, #27]
 800e108:	e001      	b.n	800e10e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800e10a:	2301      	movs	r3, #1
 800e10c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800e10e:	7efb      	ldrb	r3, [r7, #27]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d015      	beq.n	800e140 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6a1b      	ldr	r3, [r3, #32]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	330c      	adds	r3, #12
 800e11c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6a1b      	ldr	r3, [r3, #32]
 800e122:	7ffa      	ldrb	r2, [r7, #31]
 800e124:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2200      	movs	r2, #0
 800e12a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2200      	movs	r2, #0
 800e130:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e132:	78fb      	ldrb	r3, [r7, #3]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d006      	beq.n	800e146 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800e138:	68b8      	ldr	r0, [r7, #8]
 800e13a:	f00c fcdd 	bl	801aaf8 <sys_sem_signal>
 800e13e:	e002      	b.n	800e146 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800e140:	f04f 33ff 	mov.w	r3, #4294967295
 800e144:	e000      	b.n	800e148 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800e146:	2300      	movs	r3, #0
}
 800e148:	4618      	mov	r0, r3
 800e14a:	3720      	adds	r7, #32
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b084      	sub	sp, #16
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d06b      	beq.n	800e23e <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	7c1b      	ldrb	r3, [r3, #16]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d007      	beq.n	800e17e <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	685a      	ldr	r2, [r3, #4]
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	689b      	ldr	r3, [r3, #8]
 800e178:	6812      	ldr	r2, [r2, #0]
 800e17a:	601a      	str	r2, [r3, #0]
 800e17c:	e006      	b.n	800e18c <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	685a      	ldr	r2, [r3, #4]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	689b      	ldr	r3, [r3, #8]
 800e188:	6852      	ldr	r2, [r2, #4]
 800e18a:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2200      	movs	r2, #0
 800e190:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e19c:	2b10      	cmp	r3, #16
 800e19e:	d021      	beq.n	800e1e4 <lwip_netconn_do_getaddr+0x94>
 800e1a0:	2b20      	cmp	r3, #32
 800e1a2:	d144      	bne.n	800e22e <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	7c1b      	ldrb	r3, [r3, #16]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d007      	beq.n	800e1bc <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	685a      	ldr	r2, [r3, #4]
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	68db      	ldr	r3, [r3, #12]
 800e1b6:	8a52      	ldrh	r2, [r2, #18]
 800e1b8:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800e1ba:	e044      	b.n	800e246 <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	685b      	ldr	r3, [r3, #4]
 800e1c2:	7c1b      	ldrb	r3, [r3, #16]
 800e1c4:	f003 0304 	and.w	r3, r3, #4
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d103      	bne.n	800e1d4 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	22f5      	movs	r2, #245	; 0xf5
 800e1d0:	711a      	strb	r2, [r3, #4]
        break;
 800e1d2:	e038      	b.n	800e246 <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	685a      	ldr	r2, [r3, #4]
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	68db      	ldr	r3, [r3, #12]
 800e1de:	8a92      	ldrh	r2, [r2, #20]
 800e1e0:	801a      	strh	r2, [r3, #0]
        break;
 800e1e2:	e030      	b.n	800e246 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	7c1b      	ldrb	r3, [r3, #16]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d10f      	bne.n	800e20c <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	685b      	ldr	r3, [r3, #4]
 800e1f2:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d005      	beq.n	800e204 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	685b      	ldr	r3, [r3, #4]
 800e1fe:	7d1b      	ldrb	r3, [r3, #20]
 800e200:	2b01      	cmp	r3, #1
 800e202:	d103      	bne.n	800e20c <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	22f5      	movs	r2, #245	; 0xf5
 800e208:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800e20a:	e01c      	b.n	800e246 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	7c1b      	ldrb	r3, [r3, #16]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d004      	beq.n	800e21e <lwip_netconn_do_getaddr+0xce>
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	8adb      	ldrh	r3, [r3, #22]
 800e21c:	e003      	b.n	800e226 <lwip_netconn_do_getaddr+0xd6>
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	685b      	ldr	r3, [r3, #4]
 800e224:	8b1b      	ldrh	r3, [r3, #24]
 800e226:	68fa      	ldr	r2, [r7, #12]
 800e228:	68d2      	ldr	r2, [r2, #12]
 800e22a:	8013      	strh	r3, [r2, #0]
        break;
 800e22c:	e00b      	b.n	800e246 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800e22e:	4b08      	ldr	r3, [pc, #32]	; (800e250 <lwip_netconn_do_getaddr+0x100>)
 800e230:	f240 727d 	movw	r2, #1917	; 0x77d
 800e234:	4907      	ldr	r1, [pc, #28]	; (800e254 <lwip_netconn_do_getaddr+0x104>)
 800e236:	4808      	ldr	r0, [pc, #32]	; (800e258 <lwip_netconn_do_getaddr+0x108>)
 800e238:	f00c fd5c 	bl	801acf4 <iprintf>
        break;
 800e23c:	e003      	b.n	800e246 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	22f5      	movs	r2, #245	; 0xf5
 800e242:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e244:	bf00      	nop
 800e246:	bf00      	nop
 800e248:	3710      	adds	r7, #16
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop
 800e250:	0801c574 	.word	0x0801c574
 800e254:	0801cab4 	.word	0x0801cab4
 800e258:	0801c5b8 	.word	0x0801c5b8

0800e25c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b084      	sub	sp, #16
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	785b      	ldrb	r3, [r3, #1]
 800e26e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d069      	beq.n	800e34e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800e284:	2b10      	cmp	r3, #16
 800e286:	d162      	bne.n	800e34e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e28c:	2b03      	cmp	r3, #3
 800e28e:	d002      	beq.n	800e296 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e290:	7afb      	ldrb	r3, [r7, #11]
 800e292:	2b02      	cmp	r3, #2
 800e294:	d05b      	beq.n	800e34e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800e296:	7afb      	ldrb	r3, [r7, #11]
 800e298:	2b03      	cmp	r3, #3
 800e29a:	d103      	bne.n	800e2a4 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	22f5      	movs	r2, #245	; 0xf5
 800e2a0:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e2a2:	e059      	b.n	800e358 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800e2a4:	7afb      	ldrb	r3, [r7, #11]
 800e2a6:	2b01      	cmp	r3, #1
 800e2a8:	d103      	bne.n	800e2b2 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	22fb      	movs	r2, #251	; 0xfb
 800e2ae:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e2b0:	e052      	b.n	800e358 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	7a1b      	ldrb	r3, [r3, #8]
 800e2b6:	f003 0301 	and.w	r3, r3, #1
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d004      	beq.n	800e2c8 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f7ff fa3c 	bl	800d740 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	6a1b      	ldr	r3, [r3, #32]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d006      	beq.n	800e2e0 <lwip_netconn_do_close+0x84>
 800e2d2:	4b23      	ldr	r3, [pc, #140]	; (800e360 <lwip_netconn_do_close+0x104>)
 800e2d4:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800e2d8:	4922      	ldr	r1, [pc, #136]	; (800e364 <lwip_netconn_do_close+0x108>)
 800e2da:	4823      	ldr	r0, [pc, #140]	; (800e368 <lwip_netconn_do_close+0x10c>)
 800e2dc:	f00c fd0a 	bl	801acf4 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	2204      	movs	r2, #4
 800e2e6:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	68fa      	ldr	r2, [r7, #12]
 800e2ee:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	2100      	movs	r1, #0
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f7ff faa0 	bl	800d83c <lwip_netconn_do_close_internal>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d029      	beq.n	800e356 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	785b      	ldrb	r3, [r3, #1]
 800e308:	2b04      	cmp	r3, #4
 800e30a:	d006      	beq.n	800e31a <lwip_netconn_do_close+0xbe>
 800e30c:	4b14      	ldr	r3, [pc, #80]	; (800e360 <lwip_netconn_do_close+0x104>)
 800e30e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800e312:	4916      	ldr	r1, [pc, #88]	; (800e36c <lwip_netconn_do_close+0x110>)
 800e314:	4814      	ldr	r0, [pc, #80]	; (800e368 <lwip_netconn_do_close+0x10c>)
 800e316:	f00c fced 	bl	801acf4 <iprintf>
        UNLOCK_TCPIP_CORE();
 800e31a:	4815      	ldr	r0, [pc, #84]	; (800e370 <lwip_netconn_do_close+0x114>)
 800e31c:	f00c fc55 	bl	801abca <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	330c      	adds	r3, #12
 800e326:	2100      	movs	r1, #0
 800e328:	4618      	mov	r0, r3
 800e32a:	f00c fbb4 	bl	801aa96 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800e32e:	4810      	ldr	r0, [pc, #64]	; (800e370 <lwip_netconn_do_close+0x114>)
 800e330:	f00c fc3c 	bl	801abac <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	785b      	ldrb	r3, [r3, #1]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d00b      	beq.n	800e356 <lwip_netconn_do_close+0xfa>
 800e33e:	4b08      	ldr	r3, [pc, #32]	; (800e360 <lwip_netconn_do_close+0x104>)
 800e340:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800e344:	4909      	ldr	r1, [pc, #36]	; (800e36c <lwip_netconn_do_close+0x110>)
 800e346:	4808      	ldr	r0, [pc, #32]	; (800e368 <lwip_netconn_do_close+0x10c>)
 800e348:	f00c fcd4 	bl	801acf4 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800e34c:	e003      	b.n	800e356 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	22f5      	movs	r2, #245	; 0xf5
 800e352:	711a      	strb	r2, [r3, #4]
 800e354:	e000      	b.n	800e358 <lwip_netconn_do_close+0xfc>
      return;
 800e356:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e358:	3710      	adds	r7, #16
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}
 800e35e:	bf00      	nop
 800e360:	0801c574 	.word	0x0801c574
 800e364:	0801c918 	.word	0x0801c918
 800e368:	0801c5b8 	.word	0x0801c5b8
 800e36c:	0801c934 	.word	0x0801c934
 800e370:	2000d930 	.word	0x2000d930

0800e374 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800e374:	b480      	push	{r7}
 800e376:	b083      	sub	sp, #12
 800e378:	af00      	add	r7, sp, #0
 800e37a:	4603      	mov	r3, r0
 800e37c:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800e37e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e382:	2b00      	cmp	r3, #0
 800e384:	dc04      	bgt.n	800e390 <err_to_errno+0x1c>
 800e386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e38a:	f113 0f10 	cmn.w	r3, #16
 800e38e:	da01      	bge.n	800e394 <err_to_errno+0x20>
    return EIO;
 800e390:	2305      	movs	r3, #5
 800e392:	e005      	b.n	800e3a0 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800e394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e398:	425b      	negs	r3, r3
 800e39a:	4a04      	ldr	r2, [pc, #16]	; (800e3ac <err_to_errno+0x38>)
 800e39c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	370c      	adds	r7, #12
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3aa:	4770      	bx	lr
 800e3ac:	0801f9c0 	.word	0x0801f9c0

0800e3b0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b082      	sub	sp, #8
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d013      	beq.n	800e3e6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d00b      	beq.n	800e3de <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f003 f8fc 	bl	80115c8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	605a      	str	r2, [r3, #4]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	685a      	ldr	r2, [r3, #4]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800e3de:	6879      	ldr	r1, [r7, #4]
 800e3e0:	2006      	movs	r0, #6
 800e3e2:	f002 fa1b 	bl	801081c <memp_free>
  }
}
 800e3e6:	bf00      	nop
 800e3e8:	3708      	adds	r7, #8
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
	...

0800e3f0 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b085      	sub	sp, #20
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	db02      	blt.n	800e408 <tryget_socket_unconn_nouse+0x18>
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	2b03      	cmp	r3, #3
 800e406:	dd01      	ble.n	800e40c <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800e408:	2300      	movs	r3, #0
 800e40a:	e003      	b.n	800e414 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	011b      	lsls	r3, r3, #4
 800e410:	4a03      	ldr	r2, [pc, #12]	; (800e420 <tryget_socket_unconn_nouse+0x30>)
 800e412:	4413      	add	r3, r2
}
 800e414:	4618      	mov	r0, r3
 800e416:	3714      	adds	r7, #20
 800e418:	46bd      	mov	sp, r7
 800e41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41e:	4770      	bx	lr
 800e420:	2000d8e0 	.word	0x2000d8e0

0800e424 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b084      	sub	sp, #16
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f7ff ffdf 	bl	800e3f0 <tryget_socket_unconn_nouse>
 800e432:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800e434:	68fb      	ldr	r3, [r7, #12]
}
 800e436:	4618      	mov	r0, r3
 800e438:	3710      	adds	r7, #16
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}

0800e43e <tryget_socket_unconn_locked>:

/* Like tryget_socket_unconn(), but called under SYS_ARCH_PROTECT lock. */
static struct lwip_sock *
tryget_socket_unconn_locked(int fd)
{
 800e43e:	b580      	push	{r7, lr}
 800e440:	b084      	sub	sp, #16
 800e442:	af00      	add	r7, sp, #0
 800e444:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f7ff ffd2 	bl	800e3f0 <tryget_socket_unconn_nouse>
 800e44c:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used_locked(ret)) {
      return NULL;
    }
  }
  return ret;
 800e44e:	68fb      	ldr	r3, [r7, #12]
}
 800e450:	4618      	mov	r0, r3
 800e452:	3710      	adds	r7, #16
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}

0800e458 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b084      	sub	sp, #16
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f7ff ffdf 	bl	800e424 <tryget_socket_unconn>
 800e466:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d005      	beq.n	800e47a <tryget_socket+0x22>
    if (sock->conn) {
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d001      	beq.n	800e47a <tryget_socket+0x22>
      return sock;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	e000      	b.n	800e47c <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800e47a:	2300      	movs	r3, #0
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	3710      	adds	r7, #16
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}

0800e484 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b084      	sub	sp, #16
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f7ff ffe3 	bl	800e458 <tryget_socket>
 800e492:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d104      	bne.n	800e4a4 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800e49a:	4b05      	ldr	r3, [pc, #20]	; (800e4b0 <get_socket+0x2c>)
 800e49c:	2209      	movs	r2, #9
 800e49e:	601a      	str	r2, [r3, #0]
    return NULL;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	e000      	b.n	800e4a6 <get_socket+0x22>
  }
  return sock;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3710      	adds	r7, #16
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}
 800e4ae:	bf00      	nop
 800e4b0:	200111e4 	.word	0x200111e4

0800e4b4 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b084      	sub	sp, #16
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
 800e4bc:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800e4be:	2300      	movs	r3, #0
 800e4c0:	60fb      	str	r3, [r7, #12]
 800e4c2:	e052      	b.n	800e56a <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800e4c4:	f00c fbae 	bl	801ac24 <sys_arch_protect>
 800e4c8:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800e4ca:	4a2c      	ldr	r2, [pc, #176]	; (800e57c <alloc_socket+0xc8>)
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	011b      	lsls	r3, r3, #4
 800e4d0:	4413      	add	r3, r2
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d142      	bne.n	800e55e <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800e4d8:	4a28      	ldr	r2, [pc, #160]	; (800e57c <alloc_socket+0xc8>)
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	011b      	lsls	r3, r3, #4
 800e4de:	4413      	add	r3, r2
 800e4e0:	687a      	ldr	r2, [r7, #4]
 800e4e2:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800e4e4:	68b8      	ldr	r0, [r7, #8]
 800e4e6:	f00c fbab 	bl	801ac40 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800e4ea:	4a24      	ldr	r2, [pc, #144]	; (800e57c <alloc_socket+0xc8>)
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	011b      	lsls	r3, r3, #4
 800e4f0:	4413      	add	r3, r2
 800e4f2:	3304      	adds	r3, #4
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800e4f8:	4a20      	ldr	r2, [pc, #128]	; (800e57c <alloc_socket+0xc8>)
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	011b      	lsls	r3, r3, #4
 800e4fe:	4413      	add	r3, r2
 800e500:	330e      	adds	r3, #14
 800e502:	781b      	ldrb	r3, [r3, #0]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d006      	beq.n	800e516 <alloc_socket+0x62>
 800e508:	4b1d      	ldr	r3, [pc, #116]	; (800e580 <alloc_socket+0xcc>)
 800e50a:	f240 220e 	movw	r2, #526	; 0x20e
 800e50e:	491d      	ldr	r1, [pc, #116]	; (800e584 <alloc_socket+0xd0>)
 800e510:	481d      	ldr	r0, [pc, #116]	; (800e588 <alloc_socket+0xd4>)
 800e512:	f00c fbef 	bl	801acf4 <iprintf>
      sockets[i].rcvevent   = 0;
 800e516:	4a19      	ldr	r2, [pc, #100]	; (800e57c <alloc_socket+0xc8>)
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	011b      	lsls	r3, r3, #4
 800e51c:	4413      	add	r3, r2
 800e51e:	3308      	adds	r3, #8
 800e520:	2200      	movs	r2, #0
 800e522:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	781b      	ldrb	r3, [r3, #0]
 800e528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e52c:	2b10      	cmp	r3, #16
 800e52e:	d102      	bne.n	800e536 <alloc_socket+0x82>
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d001      	beq.n	800e53a <alloc_socket+0x86>
 800e536:	2301      	movs	r3, #1
 800e538:	e000      	b.n	800e53c <alloc_socket+0x88>
 800e53a:	2300      	movs	r3, #0
 800e53c:	b299      	uxth	r1, r3
 800e53e:	4a0f      	ldr	r2, [pc, #60]	; (800e57c <alloc_socket+0xc8>)
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	011b      	lsls	r3, r3, #4
 800e544:	4413      	add	r3, r2
 800e546:	330a      	adds	r3, #10
 800e548:	460a      	mov	r2, r1
 800e54a:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800e54c:	4a0b      	ldr	r2, [pc, #44]	; (800e57c <alloc_socket+0xc8>)
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	011b      	lsls	r3, r3, #4
 800e552:	4413      	add	r3, r2
 800e554:	330c      	adds	r3, #12
 800e556:	2200      	movs	r2, #0
 800e558:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	e00a      	b.n	800e574 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800e55e:	68b8      	ldr	r0, [r7, #8]
 800e560:	f00c fb6e 	bl	801ac40 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	3301      	adds	r3, #1
 800e568:	60fb      	str	r3, [r7, #12]
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	2b03      	cmp	r3, #3
 800e56e:	dda9      	ble.n	800e4c4 <alloc_socket+0x10>
  }
  return -1;
 800e570:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e574:	4618      	mov	r0, r3
 800e576:	3710      	adds	r7, #16
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}
 800e57c:	2000d8e0 	.word	0x2000d8e0
 800e580:	0801cacc 	.word	0x0801cacc
 800e584:	0801cb00 	.word	0x0801cb00
 800e588:	0801cb20 	.word	0x0801cb20

0800e58c <lwip_bind>:
  return newsock;
}

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b08a      	sub	sp, #40	; 0x28
 800e590:	af00      	add	r7, sp, #0
 800e592:	60f8      	str	r0, [r7, #12]
 800e594:	60b9      	str	r1, [r7, #8]
 800e596:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800e598:	68f8      	ldr	r0, [r7, #12]
 800e59a:	f7ff ff73 	bl	800e484 <get_socket>
 800e59e:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800e5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d102      	bne.n	800e5ac <lwip_bind+0x20>
    return -1;
 800e5a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e5aa:	e051      	b.n	800e650 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2b10      	cmp	r3, #16
 800e5b0:	d108      	bne.n	800e5c4 <lwip_bind+0x38>
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	785b      	ldrb	r3, [r3, #1]
 800e5b6:	2b02      	cmp	r3, #2
 800e5b8:	d104      	bne.n	800e5c4 <lwip_bind+0x38>
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	f003 0303 	and.w	r3, r3, #3
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d014      	beq.n	800e5ee <lwip_bind+0x62>
 800e5c4:	4b24      	ldr	r3, [pc, #144]	; (800e658 <lwip_bind+0xcc>)
 800e5c6:	f240 22e2 	movw	r2, #738	; 0x2e2
 800e5ca:	4924      	ldr	r1, [pc, #144]	; (800e65c <lwip_bind+0xd0>)
 800e5cc:	4824      	ldr	r0, [pc, #144]	; (800e660 <lwip_bind+0xd4>)
 800e5ce:	f00c fb91 	bl	801acf4 <iprintf>
 800e5d2:	f06f 000f 	mvn.w	r0, #15
 800e5d6:	f7ff fecd 	bl	800e374 <err_to_errno>
 800e5da:	6178      	str	r0, [r7, #20]
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d002      	beq.n	800e5e8 <lwip_bind+0x5c>
 800e5e2:	4a20      	ldr	r2, [pc, #128]	; (800e664 <lwip_bind+0xd8>)
 800e5e4:	697b      	ldr	r3, [r7, #20]
 800e5e6:	6013      	str	r3, [r2, #0]
 800e5e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e5ec:	e030      	b.n	800e650 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	685b      	ldr	r3, [r3, #4]
 800e5f2:	613b      	str	r3, [r7, #16]
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	885b      	ldrh	r3, [r3, #2]
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f001 fbc1 	bl	800fd80 <lwip_htons>
 800e5fe:	4603      	mov	r3, r0
 800e600:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800e602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e608:	f107 0110 	add.w	r1, r7, #16
 800e60c:	4618      	mov	r0, r3
 800e60e:	f7fe f9af 	bl	800c970 <netconn_bind>
 800e612:	4603      	mov	r3, r0
 800e614:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 800e618:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d00e      	beq.n	800e63e <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800e620:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800e624:	4618      	mov	r0, r3
 800e626:	f7ff fea5 	bl	800e374 <err_to_errno>
 800e62a:	61b8      	str	r0, [r7, #24]
 800e62c:	69bb      	ldr	r3, [r7, #24]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d002      	beq.n	800e638 <lwip_bind+0xac>
 800e632:	4a0c      	ldr	r2, [pc, #48]	; (800e664 <lwip_bind+0xd8>)
 800e634:	69bb      	ldr	r3, [r7, #24]
 800e636:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800e638:	f04f 33ff 	mov.w	r3, #4294967295
 800e63c:	e008      	b.n	800e650 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800e63e:	2300      	movs	r3, #0
 800e640:	61fb      	str	r3, [r7, #28]
 800e642:	69fb      	ldr	r3, [r7, #28]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d002      	beq.n	800e64e <lwip_bind+0xc2>
 800e648:	4a06      	ldr	r2, [pc, #24]	; (800e664 <lwip_bind+0xd8>)
 800e64a:	69fb      	ldr	r3, [r7, #28]
 800e64c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800e64e:	2300      	movs	r3, #0
}
 800e650:	4618      	mov	r0, r3
 800e652:	3728      	adds	r7, #40	; 0x28
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}
 800e658:	0801cacc 	.word	0x0801cacc
 800e65c:	0801cb70 	.word	0x0801cb70
 800e660:	0801cb20 	.word	0x0801cb20
 800e664:	200111e4 	.word	0x200111e4

0800e668 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b08c      	sub	sp, #48	; 0x30
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	60f8      	str	r0, [r7, #12]
 800e670:	60b9      	str	r1, [r7, #8]
 800e672:	607a      	str	r2, [r7, #4]
 800e674:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800e676:	2308      	movs	r3, #8
 800e678:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 800e67c:	2300      	movs	r3, #0
 800e67e:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2b00      	cmp	r3, #0
 800e684:	db01      	blt.n	800e68a <lwip_recv_tcp+0x22>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	e001      	b.n	800e68e <lwip_recv_tcp+0x26>
 800e68a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e68e:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d106      	bne.n	800e6a4 <lwip_recv_tcp+0x3c>
 800e696:	4b74      	ldr	r3, [pc, #464]	; (800e868 <lwip_recv_tcp+0x200>)
 800e698:	f240 329e 	movw	r2, #926	; 0x39e
 800e69c:	4973      	ldr	r1, [pc, #460]	; (800e86c <lwip_recv_tcp+0x204>)
 800e69e:	4874      	ldr	r0, [pc, #464]	; (800e870 <lwip_recv_tcp+0x208>)
 800e6a0:	f00c fb28 	bl	801acf4 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	781b      	ldrb	r3, [r3, #0]
 800e6aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e6ae:	2b10      	cmp	r3, #16
 800e6b0:	d006      	beq.n	800e6c0 <lwip_recv_tcp+0x58>
 800e6b2:	4b6d      	ldr	r3, [pc, #436]	; (800e868 <lwip_recv_tcp+0x200>)
 800e6b4:	f240 329f 	movw	r2, #927	; 0x39f
 800e6b8:	496e      	ldr	r1, [pc, #440]	; (800e874 <lwip_recv_tcp+0x20c>)
 800e6ba:	486d      	ldr	r0, [pc, #436]	; (800e870 <lwip_recv_tcp+0x208>)
 800e6bc:	f00c fb1a 	bl	801acf4 <iprintf>

  if (flags & MSG_DONTWAIT) {
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	f003 0308 	and.w	r3, r3, #8
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d005      	beq.n	800e6d6 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800e6ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e6ce:	f043 0304 	orr.w	r3, r3, #4
 800e6d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	685b      	ldr	r3, [r3, #4]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d003      	beq.n	800e6e6 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	685b      	ldr	r3, [r3, #4]
 800e6e2:	617b      	str	r3, [r7, #20]
 800e6e4:	e036      	b.n	800e754 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e6ee:	f107 0114 	add.w	r1, r7, #20
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7fe fb1e 	bl	800cd34 <netconn_recv_tcp_pbuf_flags>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800e6fe:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800e702:	2b00      	cmp	r3, #0
 800e704:	d019      	beq.n	800e73a <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800e706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e708:	2b00      	cmp	r3, #0
 800e70a:	f300 808d 	bgt.w	800e828 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800e70e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800e712:	4618      	mov	r0, r3
 800e714:	f7ff fe2e 	bl	800e374 <err_to_errno>
 800e718:	61f8      	str	r0, [r7, #28]
 800e71a:	69fb      	ldr	r3, [r7, #28]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d002      	beq.n	800e726 <lwip_recv_tcp+0xbe>
 800e720:	4a55      	ldr	r2, [pc, #340]	; (800e878 <lwip_recv_tcp+0x210>)
 800e722:	69fb      	ldr	r3, [r7, #28]
 800e724:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800e726:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800e72a:	f113 0f0f 	cmn.w	r3, #15
 800e72e:	d101      	bne.n	800e734 <lwip_recv_tcp+0xcc>
          return 0;
 800e730:	2300      	movs	r3, #0
 800e732:	e094      	b.n	800e85e <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800e734:	f04f 33ff 	mov.w	r3, #4294967295
 800e738:	e091      	b.n	800e85e <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d106      	bne.n	800e74e <lwip_recv_tcp+0xe6>
 800e740:	4b49      	ldr	r3, [pc, #292]	; (800e868 <lwip_recv_tcp+0x200>)
 800e742:	f240 32c5 	movw	r2, #965	; 0x3c5
 800e746:	494d      	ldr	r1, [pc, #308]	; (800e87c <lwip_recv_tcp+0x214>)
 800e748:	4849      	ldr	r0, [pc, #292]	; (800e870 <lwip_recv_tcp+0x208>)
 800e74a:	f00c fad3 	bl	801acf4 <iprintf>
      sock->lastdata.pbuf = p;
 800e74e:	697a      	ldr	r2, [r7, #20]
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	891b      	ldrh	r3, [r3, #8]
 800e758:	461a      	mov	r2, r3
 800e75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e75c:	4293      	cmp	r3, r2
 800e75e:	dd03      	ble.n	800e768 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	891b      	ldrh	r3, [r3, #8]
 800e764:	847b      	strh	r3, [r7, #34]	; 0x22
 800e766:	e001      	b.n	800e76c <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800e768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e76a:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 800e76c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e770:	4413      	add	r3, r2
 800e772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e774:	429a      	cmp	r2, r3
 800e776:	dd03      	ble.n	800e780 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800e778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e77a:	b29b      	uxth	r3, r3
 800e77c:	43db      	mvns	r3, r3
 800e77e:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800e780:	6978      	ldr	r0, [r7, #20]
 800e782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e784:	68ba      	ldr	r2, [r7, #8]
 800e786:	18d1      	adds	r1, r2, r3
 800e788:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e78a:	2300      	movs	r3, #0
 800e78c:	f003 f912 	bl	80119b4 <pbuf_copy_partial>

    recvd += copylen;
 800e790:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e794:	4413      	add	r3, r2
 800e796:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800e798:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e79a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e79c:	429a      	cmp	r2, r3
 800e79e:	da06      	bge.n	800e7ae <lwip_recv_tcp+0x146>
 800e7a0:	4b31      	ldr	r3, [pc, #196]	; (800e868 <lwip_recv_tcp+0x200>)
 800e7a2:	f240 32dd 	movw	r2, #989	; 0x3dd
 800e7a6:	4936      	ldr	r1, [pc, #216]	; (800e880 <lwip_recv_tcp+0x218>)
 800e7a8:	4831      	ldr	r0, [pc, #196]	; (800e870 <lwip_recv_tcp+0x208>)
 800e7aa:	f00c faa3 	bl	801acf4 <iprintf>
    recv_left -= copylen;
 800e7ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e7b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7b2:	1ad3      	subs	r3, r2, r3
 800e7b4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	f003 0301 	and.w	r3, r3, #1
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d123      	bne.n	800e808 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	891b      	ldrh	r3, [r3, #8]
 800e7c4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e7c6:	429a      	cmp	r2, r3
 800e7c8:	d906      	bls.n	800e7d8 <lwip_recv_tcp+0x170>
 800e7ca:	4b27      	ldr	r3, [pc, #156]	; (800e868 <lwip_recv_tcp+0x200>)
 800e7cc:	f240 32e3 	movw	r2, #995	; 0x3e3
 800e7d0:	492c      	ldr	r1, [pc, #176]	; (800e884 <lwip_recv_tcp+0x21c>)
 800e7d2:	4827      	ldr	r0, [pc, #156]	; (800e870 <lwip_recv_tcp+0x208>)
 800e7d4:	f00c fa8e 	bl	801acf4 <iprintf>
      if (p->tot_len - copylen > 0) {
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	891b      	ldrh	r3, [r3, #8]
 800e7dc:	461a      	mov	r2, r3
 800e7de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e7e0:	1ad3      	subs	r3, r2, r3
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	dd09      	ble.n	800e7fa <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e7ea:	4611      	mov	r1, r2
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f002 feb8 	bl	8011562 <pbuf_free_header>
 800e7f2:	4602      	mov	r2, r0
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	605a      	str	r2, [r3, #4]
 800e7f8:	e006      	b.n	800e808 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	4618      	mov	r0, r3
 800e804:	f002 fee0 	bl	80115c8 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800e808:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e80c:	f043 0314 	orr.w	r3, r3, #20
 800e810:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800e814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e816:	2b00      	cmp	r3, #0
 800e818:	dd08      	ble.n	800e82c <lwip_recv_tcp+0x1c4>
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	f003 0301 	and.w	r3, r3, #1
 800e820:	2b00      	cmp	r3, #0
 800e822:	f43f af58 	beq.w	800e6d6 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800e826:	e001      	b.n	800e82c <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800e828:	bf00      	nop
 800e82a:	e000      	b.n	800e82e <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800e82c:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800e82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e830:	2b00      	cmp	r3, #0
 800e832:	dd0b      	ble.n	800e84c <lwip_recv_tcp+0x1e4>
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	f003 0301 	and.w	r3, r3, #1
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d106      	bne.n	800e84c <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e844:	4611      	mov	r1, r2
 800e846:	4618      	mov	r0, r3
 800e848:	f7fe f9c2 	bl	800cbd0 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800e84c:	2300      	movs	r3, #0
 800e84e:	61bb      	str	r3, [r7, #24]
 800e850:	69bb      	ldr	r3, [r7, #24]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d002      	beq.n	800e85c <lwip_recv_tcp+0x1f4>
 800e856:	4a08      	ldr	r2, [pc, #32]	; (800e878 <lwip_recv_tcp+0x210>)
 800e858:	69bb      	ldr	r3, [r7, #24]
 800e85a:	6013      	str	r3, [r2, #0]
  return recvd;
 800e85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800e85e:	4618      	mov	r0, r3
 800e860:	3730      	adds	r7, #48	; 0x30
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}
 800e866:	bf00      	nop
 800e868:	0801cacc 	.word	0x0801cacc
 800e86c:	0801cbc4 	.word	0x0801cbc4
 800e870:	0801cb20 	.word	0x0801cb20
 800e874:	0801cbd4 	.word	0x0801cbd4
 800e878:	200111e4 	.word	0x200111e4
 800e87c:	0801cbf8 	.word	0x0801cbf8
 800e880:	0801cc04 	.word	0x0801cc04
 800e884:	0801cc2c 	.word	0x0801cc2c

0800e888 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800e888:	b590      	push	{r4, r7, lr}
 800e88a:	b08b      	sub	sp, #44	; 0x2c
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	60f8      	str	r0, [r7, #12]
 800e890:	60b9      	str	r1, [r7, #8]
 800e892:	603b      	str	r3, [r7, #0]
 800e894:	4613      	mov	r3, r2
 800e896:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800e898:	2300      	movs	r3, #0
 800e89a:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d106      	bne.n	800e8b0 <lwip_sock_make_addr+0x28>
 800e8a2:	4b2b      	ldr	r3, [pc, #172]	; (800e950 <lwip_sock_make_addr+0xc8>)
 800e8a4:	f240 4207 	movw	r2, #1031	; 0x407
 800e8a8:	492a      	ldr	r1, [pc, #168]	; (800e954 <lwip_sock_make_addr+0xcc>)
 800e8aa:	482b      	ldr	r0, [pc, #172]	; (800e958 <lwip_sock_make_addr+0xd0>)
 800e8ac:	f00c fa22 	bl	801acf4 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d106      	bne.n	800e8c4 <lwip_sock_make_addr+0x3c>
 800e8b6:	4b26      	ldr	r3, [pc, #152]	; (800e950 <lwip_sock_make_addr+0xc8>)
 800e8b8:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800e8bc:	4927      	ldr	r1, [pc, #156]	; (800e95c <lwip_sock_make_addr+0xd4>)
 800e8be:	4826      	ldr	r0, [pc, #152]	; (800e958 <lwip_sock_make_addr+0xd0>)
 800e8c0:	f00c fa18 	bl	801acf4 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800e8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d106      	bne.n	800e8d8 <lwip_sock_make_addr+0x50>
 800e8ca:	4b21      	ldr	r3, [pc, #132]	; (800e950 <lwip_sock_make_addr+0xc8>)
 800e8cc:	f240 4209 	movw	r2, #1033	; 0x409
 800e8d0:	4923      	ldr	r1, [pc, #140]	; (800e960 <lwip_sock_make_addr+0xd8>)
 800e8d2:	4821      	ldr	r0, [pc, #132]	; (800e958 <lwip_sock_make_addr+0xd0>)
 800e8d4:	f00c fa0e 	bl	801acf4 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800e8d8:	f107 0314 	add.w	r3, r7, #20
 800e8dc:	2210      	movs	r2, #16
 800e8de:	701a      	strb	r2, [r3, #0]
 800e8e0:	f107 0314 	add.w	r3, r7, #20
 800e8e4:	2202      	movs	r2, #2
 800e8e6:	705a      	strb	r2, [r3, #1]
 800e8e8:	f107 0414 	add.w	r4, r7, #20
 800e8ec:	88fb      	ldrh	r3, [r7, #6]
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f001 fa46 	bl	800fd80 <lwip_htons>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	8063      	strh	r3, [r4, #2]
 800e8f8:	f107 0314 	add.w	r3, r7, #20
 800e8fc:	68ba      	ldr	r2, [r7, #8]
 800e8fe:	6812      	ldr	r2, [r2, #0]
 800e900:	605a      	str	r2, [r3, #4]
 800e902:	f107 0314 	add.w	r3, r7, #20
 800e906:	3308      	adds	r3, #8
 800e908:	2208      	movs	r2, #8
 800e90a:	2100      	movs	r1, #0
 800e90c:	4618      	mov	r0, r3
 800e90e:	f00c f9e9 	bl	801ace4 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800e912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	7d3a      	ldrb	r2, [r7, #20]
 800e918:	4293      	cmp	r3, r2
 800e91a:	d202      	bcs.n	800e922 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800e91c:	2301      	movs	r3, #1
 800e91e:	627b      	str	r3, [r7, #36]	; 0x24
 800e920:	e008      	b.n	800e934 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800e922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	7d3a      	ldrb	r2, [r7, #20]
 800e928:	4293      	cmp	r3, r2
 800e92a:	d903      	bls.n	800e934 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800e92c:	7d3b      	ldrb	r3, [r7, #20]
 800e92e:	461a      	mov	r2, r3
 800e930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e932:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800e934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e936:	681a      	ldr	r2, [r3, #0]
 800e938:	f107 0314 	add.w	r3, r7, #20
 800e93c:	4619      	mov	r1, r3
 800e93e:	6838      	ldr	r0, [r7, #0]
 800e940:	f00c f9c2 	bl	801acc8 <memcpy>
  return truncated;
 800e944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e946:	4618      	mov	r0, r3
 800e948:	372c      	adds	r7, #44	; 0x2c
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd90      	pop	{r4, r7, pc}
 800e94e:	bf00      	nop
 800e950:	0801cacc 	.word	0x0801cacc
 800e954:	0801cc3c 	.word	0x0801cc3c
 800e958:	0801cb20 	.word	0x0801cb20
 800e95c:	0801cc50 	.word	0x0801cc50
 800e960:	0801cc60 	.word	0x0801cc60

0800e964 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b088      	sub	sp, #32
 800e968:	af02      	add	r7, sp, #8
 800e96a:	60f8      	str	r0, [r7, #12]
 800e96c:	60b9      	str	r1, [r7, #8]
 800e96e:	607a      	str	r2, [r7, #4]
 800e970:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d101      	bne.n	800e97c <lwip_recv_tcp_from+0x18>
    return 0;
 800e978:	2300      	movs	r3, #0
 800e97a:	e021      	b.n	800e9c0 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800e97c:	68bb      	ldr	r3, [r7, #8]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d01d      	beq.n	800e9be <lwip_recv_tcp_from+0x5a>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d01a      	beq.n	800e9be <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	6818      	ldr	r0, [r3, #0]
 800e98c:	f107 0216 	add.w	r2, r7, #22
 800e990:	f107 0110 	add.w	r1, r7, #16
 800e994:	2300      	movs	r3, #0
 800e996:	f7fd ff99 	bl	800c8cc <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800e99a:	68bb      	ldr	r3, [r7, #8]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d00e      	beq.n	800e9be <lwip_recv_tcp_from+0x5a>
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d00b      	beq.n	800e9be <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	6818      	ldr	r0, [r3, #0]
 800e9aa:	8afa      	ldrh	r2, [r7, #22]
 800e9ac:	f107 0110 	add.w	r1, r7, #16
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	9300      	str	r3, [sp, #0]
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	f7ff ff67 	bl	800e888 <lwip_sock_make_addr>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	e000      	b.n	800e9c0 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800e9be:	2300      	movs	r3, #0
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3718      	adds	r7, #24
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800e9c8:	b590      	push	{r4, r7, lr}
 800e9ca:	b08d      	sub	sp, #52	; 0x34
 800e9cc:	af02      	add	r7, sp, #8
 800e9ce:	60f8      	str	r0, [r7, #12]
 800e9d0:	60b9      	str	r1, [r7, #8]
 800e9d2:	607a      	str	r2, [r7, #4]
 800e9d4:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	689b      	ldr	r3, [r3, #8]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d10d      	bne.n	800e9fa <lwip_recvfrom_udp_raw+0x32>
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	68db      	ldr	r3, [r3, #12]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	dd09      	ble.n	800e9fa <lwip_recvfrom_udp_raw+0x32>
 800e9e6:	4b5e      	ldr	r3, [pc, #376]	; (800eb60 <lwip_recvfrom_udp_raw+0x198>)
 800e9e8:	f240 4249 	movw	r2, #1097	; 0x449
 800e9ec:	495d      	ldr	r1, [pc, #372]	; (800eb64 <lwip_recvfrom_udp_raw+0x19c>)
 800e9ee:	485e      	ldr	r0, [pc, #376]	; (800eb68 <lwip_recvfrom_udp_raw+0x1a0>)
 800e9f0:	f00c f980 	bl	801acf4 <iprintf>
 800e9f4:	f06f 030f 	mvn.w	r3, #15
 800e9f8:	e0ad      	b.n	800eb56 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	f003 0308 	and.w	r3, r3, #8
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d003      	beq.n	800ea0c <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800ea04:	2304      	movs	r3, #4
 800ea06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ea0a:	e002      	b.n	800ea12 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	685b      	ldr	r3, [r3, #4]
 800ea16:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d11e      	bne.n	800ea5c <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ea26:	f107 0110 	add.w	r1, r7, #16
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7fe f9ae 	bl	800cd8c <netconn_recv_udp_raw_netbuf_flags>
 800ea30:	4603      	mov	r3, r0
 800ea32:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800ea34:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d002      	beq.n	800ea42 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800ea3c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ea40:	e089      	b.n	800eb56 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d106      	bne.n	800ea56 <lwip_recvfrom_udp_raw+0x8e>
 800ea48:	4b45      	ldr	r3, [pc, #276]	; (800eb60 <lwip_recvfrom_udp_raw+0x198>)
 800ea4a:	f240 425e 	movw	r2, #1118	; 0x45e
 800ea4e:	4947      	ldr	r1, [pc, #284]	; (800eb6c <lwip_recvfrom_udp_raw+0x1a4>)
 800ea50:	4845      	ldr	r0, [pc, #276]	; (800eb68 <lwip_recvfrom_udp_raw+0x1a0>)
 800ea52:	f00c f94f 	bl	801acf4 <iprintf>
    sock->lastdata.netbuf = buf;
 800ea56:	693a      	ldr	r2, [r7, #16]
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800ea5c:	693b      	ldr	r3, [r7, #16]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	891b      	ldrh	r3, [r3, #8]
 800ea62:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800ea64:	2300      	movs	r3, #0
 800ea66:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800ea68:	2300      	movs	r3, #0
 800ea6a:	61fb      	str	r3, [r7, #28]
 800ea6c:	e029      	b.n	800eac2 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800ea6e:	8b3a      	ldrh	r2, [r7, #24]
 800ea70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea72:	1ad3      	subs	r3, r2, r3
 800ea74:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	689a      	ldr	r2, [r3, #8]
 800ea7a:	69fb      	ldr	r3, [r7, #28]
 800ea7c:	00db      	lsls	r3, r3, #3
 800ea7e:	4413      	add	r3, r2
 800ea80:	685a      	ldr	r2, [r3, #4]
 800ea82:	8afb      	ldrh	r3, [r7, #22]
 800ea84:	429a      	cmp	r2, r3
 800ea86:	d902      	bls.n	800ea8e <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800ea88:	8afb      	ldrh	r3, [r7, #22]
 800ea8a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ea8c:	e006      	b.n	800ea9c <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	689a      	ldr	r2, [r3, #8]
 800ea92:	69fb      	ldr	r3, [r7, #28]
 800ea94:	00db      	lsls	r3, r3, #3
 800ea96:	4413      	add	r3, r2
 800ea98:	685b      	ldr	r3, [r3, #4]
 800ea9a:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800ea9c:	693b      	ldr	r3, [r7, #16]
 800ea9e:	6818      	ldr	r0, [r3, #0]
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	689a      	ldr	r2, [r3, #8]
 800eaa4:	69fb      	ldr	r3, [r7, #28]
 800eaa6:	00db      	lsls	r3, r3, #3
 800eaa8:	4413      	add	r3, r2
 800eaaa:	6819      	ldr	r1, [r3, #0]
 800eaac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eaae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eab0:	f002 ff80 	bl	80119b4 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800eab4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800eab6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eab8:	4413      	add	r3, r2
 800eaba:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800eabc:	69fb      	ldr	r3, [r7, #28]
 800eabe:	3301      	adds	r3, #1
 800eac0:	61fb      	str	r3, [r7, #28]
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	68db      	ldr	r3, [r3, #12]
 800eac6:	69fa      	ldr	r2, [r7, #28]
 800eac8:	429a      	cmp	r2, r3
 800eaca:	da03      	bge.n	800ead4 <lwip_recvfrom_udp_raw+0x10c>
 800eacc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800eace:	8b3b      	ldrh	r3, [r7, #24]
 800ead0:	429a      	cmp	r2, r3
 800ead2:	d3cc      	bcc.n	800ea6e <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d01a      	beq.n	800eb12 <lwip_recvfrom_udp_raw+0x14a>
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	685b      	ldr	r3, [r3, #4]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d016      	beq.n	800eb12 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d012      	beq.n	800eb12 <lwip_recvfrom_udp_raw+0x14a>
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	685b      	ldr	r3, [r3, #4]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d00e      	beq.n	800eb12 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	6818      	ldr	r0, [r3, #0]
 800eaf8:	693b      	ldr	r3, [r7, #16]
 800eafa:	f103 0108 	add.w	r1, r3, #8
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	3304      	adds	r3, #4
 800eb0a:	9300      	str	r3, [sp, #0]
 800eb0c:	4623      	mov	r3, r4
 800eb0e:	f7ff febb 	bl	800e888 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2200      	movs	r2, #0
 800eb16:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	691b      	ldr	r3, [r3, #16]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d007      	beq.n	800eb30 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800eb20:	2300      	movs	r3, #0
 800eb22:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800eb24:	7d7b      	ldrb	r3, [r7, #21]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d102      	bne.n	800eb30 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	f003 0301 	and.w	r3, r3, #1
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d106      	bne.n	800eb48 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800eb40:	693b      	ldr	r3, [r7, #16]
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7ff fc34 	bl	800e3b0 <netbuf_delete>
  }
  if (datagram_len) {
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d002      	beq.n	800eb54 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	8b3a      	ldrh	r2, [r7, #24]
 800eb52:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800eb54:	2300      	movs	r3, #0
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	372c      	adds	r7, #44	; 0x2c
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd90      	pop	{r4, r7, pc}
 800eb5e:	bf00      	nop
 800eb60:	0801cacc 	.word	0x0801cacc
 800eb64:	0801cc70 	.word	0x0801cc70
 800eb68:	0801cb20 	.word	0x0801cb20
 800eb6c:	0801cc9c 	.word	0x0801cc9c

0800eb70 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b096      	sub	sp, #88	; 0x58
 800eb74:	af02      	add	r7, sp, #8
 800eb76:	60f8      	str	r0, [r7, #12]
 800eb78:	60b9      	str	r1, [r7, #8]
 800eb7a:	607a      	str	r2, [r7, #4]
 800eb7c:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800eb7e:	68f8      	ldr	r0, [r7, #12]
 800eb80:	f7ff fc80 	bl	800e484 <get_socket>
 800eb84:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800eb86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d102      	bne.n	800eb92 <lwip_recvfrom+0x22>
    return -1;
 800eb8c:	f04f 33ff 	mov.w	r3, #4294967295
 800eb90:	e078      	b.n	800ec84 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800eb92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	781b      	ldrb	r3, [r3, #0]
 800eb98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eb9c:	2b10      	cmp	r3, #16
 800eb9e:	d112      	bne.n	800ebc6 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	687a      	ldr	r2, [r7, #4]
 800eba4:	68b9      	ldr	r1, [r7, #8]
 800eba6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800eba8:	f7ff fd5e 	bl	800e668 <lwip_recv_tcp>
 800ebac:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800ebae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebb0:	9301      	str	r3, [sp, #4]
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	9300      	str	r3, [sp, #0]
 800ebb6:	4b35      	ldr	r3, [pc, #212]	; (800ec8c <lwip_recvfrom+0x11c>)
 800ebb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ebba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ebbc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ebbe:	f7ff fed1 	bl	800e964 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800ebc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebc4:	e05e      	b.n	800ec84 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800ebda:	2300      	movs	r3, #0
 800ebdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800ebde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ebe2:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800ebe8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebea:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800ebec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d002      	beq.n	800ebf8 <lwip_recvfrom+0x88>
 800ebf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	e000      	b.n	800ebfa <lwip_recvfrom+0x8a>
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800ebfc:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800ec00:	f107 0214 	add.w	r2, r7, #20
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	9300      	str	r3, [sp, #0]
 800ec08:	460b      	mov	r3, r1
 800ec0a:	6839      	ldr	r1, [r7, #0]
 800ec0c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ec0e:	f7ff fedb 	bl	800e9c8 <lwip_recvfrom_udp_raw>
 800ec12:	4603      	mov	r3, r0
 800ec14:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800ec18:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d00e      	beq.n	800ec3e <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800ec20:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800ec24:	4618      	mov	r0, r3
 800ec26:	f7ff fba5 	bl	800e374 <err_to_errno>
 800ec2a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800ec2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d002      	beq.n	800ec38 <lwip_recvfrom+0xc8>
 800ec32:	4a17      	ldr	r2, [pc, #92]	; (800ec90 <lwip_recvfrom+0x120>)
 800ec34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec36:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800ec38:	f04f 33ff 	mov.w	r3, #4294967295
 800ec3c:	e022      	b.n	800ec84 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800ec3e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ec40:	461a      	mov	r2, r3
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	4293      	cmp	r3, r2
 800ec46:	bf28      	it	cs
 800ec48:	4613      	movcs	r3, r2
 800ec4a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800ec4e:	4293      	cmp	r3, r2
 800ec50:	d206      	bcs.n	800ec60 <lwip_recvfrom+0xf0>
 800ec52:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ec54:	461a      	mov	r2, r3
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	bf28      	it	cs
 800ec5c:	4613      	movcs	r3, r2
 800ec5e:	e001      	b.n	800ec64 <lwip_recvfrom+0xf4>
 800ec60:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ec64:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800ec66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d002      	beq.n	800ec72 <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800ec6c:	69ba      	ldr	r2, [r7, #24]
 800ec6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec70:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800ec72:	2300      	movs	r3, #0
 800ec74:	643b      	str	r3, [r7, #64]	; 0x40
 800ec76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d002      	beq.n	800ec82 <lwip_recvfrom+0x112>
 800ec7c:	4a04      	ldr	r2, [pc, #16]	; (800ec90 <lwip_recvfrom+0x120>)
 800ec7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec80:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800ec82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800ec84:	4618      	mov	r0, r3
 800ec86:	3750      	adds	r7, #80	; 0x50
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}
 800ec8c:	0801cca8 	.word	0x0801cca8
 800ec90:	200111e4 	.word	0x200111e4

0800ec94 <lwip_socket>:
  return (err == ERR_OK ? short_size : -1);
}

int
lwip_socket(int domain, int type, int protocol)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b086      	sub	sp, #24
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	60f8      	str	r0, [r7, #12]
 800ec9c:	60b9      	str	r1, [r7, #8]
 800ec9e:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	2b03      	cmp	r3, #3
 800eca4:	d009      	beq.n	800ecba <lwip_socket+0x26>
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	2b03      	cmp	r3, #3
 800ecaa:	dc23      	bgt.n	800ecf4 <lwip_socket+0x60>
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	2b01      	cmp	r3, #1
 800ecb0:	d019      	beq.n	800ece6 <lwip_socket+0x52>
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	2b02      	cmp	r3, #2
 800ecb6:	d009      	beq.n	800eccc <lwip_socket+0x38>
 800ecb8:	e01c      	b.n	800ecf4 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	b2db      	uxtb	r3, r3
 800ecbe:	4a22      	ldr	r2, [pc, #136]	; (800ed48 <lwip_socket+0xb4>)
 800ecc0:	4619      	mov	r1, r3
 800ecc2:	2040      	movs	r0, #64	; 0x40
 800ecc4:	f7fd fd48 	bl	800c758 <netconn_new_with_proto_and_callback>
 800ecc8:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800ecca:	e019      	b.n	800ed00 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2b88      	cmp	r3, #136	; 0x88
 800ecd0:	d101      	bne.n	800ecd6 <lwip_socket+0x42>
 800ecd2:	2321      	movs	r3, #33	; 0x21
 800ecd4:	e000      	b.n	800ecd8 <lwip_socket+0x44>
 800ecd6:	2320      	movs	r3, #32
 800ecd8:	4a1b      	ldr	r2, [pc, #108]	; (800ed48 <lwip_socket+0xb4>)
 800ecda:	2100      	movs	r1, #0
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f7fd fd3b 	bl	800c758 <netconn_new_with_proto_and_callback>
 800ece2:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800ece4:	e00c      	b.n	800ed00 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800ece6:	4a18      	ldr	r2, [pc, #96]	; (800ed48 <lwip_socket+0xb4>)
 800ece8:	2100      	movs	r1, #0
 800ecea:	2010      	movs	r0, #16
 800ecec:	f7fd fd34 	bl	800c758 <netconn_new_with_proto_and_callback>
 800ecf0:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800ecf2:	e005      	b.n	800ed00 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800ecf4:	4b15      	ldr	r3, [pc, #84]	; (800ed4c <lwip_socket+0xb8>)
 800ecf6:	2216      	movs	r2, #22
 800ecf8:	601a      	str	r2, [r3, #0]
      return -1;
 800ecfa:	f04f 33ff 	mov.w	r3, #4294967295
 800ecfe:	e01e      	b.n	800ed3e <lwip_socket+0xaa>
  }

  if (!conn) {
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d105      	bne.n	800ed12 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800ed06:	4b11      	ldr	r3, [pc, #68]	; (800ed4c <lwip_socket+0xb8>)
 800ed08:	2269      	movs	r2, #105	; 0x69
 800ed0a:	601a      	str	r2, [r3, #0]
    return -1;
 800ed0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ed10:	e015      	b.n	800ed3e <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800ed12:	2100      	movs	r1, #0
 800ed14:	6978      	ldr	r0, [r7, #20]
 800ed16:	f7ff fbcd 	bl	800e4b4 <alloc_socket>
 800ed1a:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800ed1c:	693b      	ldr	r3, [r7, #16]
 800ed1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed22:	d108      	bne.n	800ed36 <lwip_socket+0xa2>
    netconn_delete(conn);
 800ed24:	6978      	ldr	r0, [r7, #20]
 800ed26:	f7fd fdb5 	bl	800c894 <netconn_delete>
    set_errno(ENFILE);
 800ed2a:	4b08      	ldr	r3, [pc, #32]	; (800ed4c <lwip_socket+0xb8>)
 800ed2c:	2217      	movs	r2, #23
 800ed2e:	601a      	str	r2, [r3, #0]
    return -1;
 800ed30:	f04f 33ff 	mov.w	r3, #4294967295
 800ed34:	e003      	b.n	800ed3e <lwip_socket+0xaa>
  }
  conn->socket = i;
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	693a      	ldr	r2, [r7, #16]
 800ed3a:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800ed3c:	693b      	ldr	r3, [r7, #16]
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3718      	adds	r7, #24
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}
 800ed46:	bf00      	nop
 800ed48:	0800f605 	.word	0x0800f605
 800ed4c:	200111e4 	.word	0x200111e4

0800ed50 <lwip_link_select_cb>:

#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
/* Add select_cb to select_cb_list. */
static void
lwip_link_select_cb(struct lwip_select_cb *select_cb)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b082      	sub	sp, #8
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
  LWIP_SOCKET_SELECT_DECL_PROTECT(lev);

  /* Protect the select_cb_list */
  LWIP_SOCKET_SELECT_PROTECT(lev);
 800ed58:	480c      	ldr	r0, [pc, #48]	; (800ed8c <lwip_link_select_cb+0x3c>)
 800ed5a:	f00b ff27 	bl	801abac <sys_mutex_lock>

  /* Put this select_cb on top of list */
  select_cb->next = select_cb_list;
 800ed5e:	4b0c      	ldr	r3, [pc, #48]	; (800ed90 <lwip_link_select_cb+0x40>)
 800ed60:	681a      	ldr	r2, [r3, #0]
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	601a      	str	r2, [r3, #0]
  if (select_cb_list != NULL) {
 800ed66:	4b0a      	ldr	r3, [pc, #40]	; (800ed90 <lwip_link_select_cb+0x40>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d003      	beq.n	800ed76 <lwip_link_select_cb+0x26>
    select_cb_list->prev = select_cb;
 800ed6e:	4b08      	ldr	r3, [pc, #32]	; (800ed90 <lwip_link_select_cb+0x40>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	687a      	ldr	r2, [r7, #4]
 800ed74:	605a      	str	r2, [r3, #4]
  }
  select_cb_list = select_cb;
 800ed76:	4a06      	ldr	r2, [pc, #24]	; (800ed90 <lwip_link_select_cb+0x40>)
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	6013      	str	r3, [r2, #0]
  /* Increasing this counter tells select_check_waiters that the list has changed. */
  select_cb_ctr++;
#endif

  /* Now we can safely unprotect */
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 800ed7c:	4803      	ldr	r0, [pc, #12]	; (800ed8c <lwip_link_select_cb+0x3c>)
 800ed7e:	f00b ff24 	bl	801abca <sys_mutex_unlock>
}
 800ed82:	bf00      	nop
 800ed84:	3708      	adds	r7, #8
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}
 800ed8a:	bf00      	nop
 800ed8c:	2000d930 	.word	0x2000d930
 800ed90:	2000d920 	.word	0x2000d920

0800ed94 <lwip_unlink_select_cb>:

/* Remove select_cb from select_cb_list. */
static void
lwip_unlink_select_cb(struct lwip_select_cb *select_cb)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b082      	sub	sp, #8
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
  LWIP_SOCKET_SELECT_DECL_PROTECT(lev);

  /* Take us off the list */
  LWIP_SOCKET_SELECT_PROTECT(lev);
 800ed9c:	481b      	ldr	r0, [pc, #108]	; (800ee0c <lwip_unlink_select_cb+0x78>)
 800ed9e:	f00b ff05 	bl	801abac <sys_mutex_lock>
  if (select_cb->next != NULL) {
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d004      	beq.n	800edb4 <lwip_unlink_select_cb+0x20>
    select_cb->next->prev = select_cb->prev;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	687a      	ldr	r2, [r7, #4]
 800edb0:	6852      	ldr	r2, [r2, #4]
 800edb2:	605a      	str	r2, [r3, #4]
  }
  if (select_cb_list == select_cb) {
 800edb4:	4b16      	ldr	r3, [pc, #88]	; (800ee10 <lwip_unlink_select_cb+0x7c>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	687a      	ldr	r2, [r7, #4]
 800edba:	429a      	cmp	r2, r3
 800edbc:	d10f      	bne.n	800edde <lwip_unlink_select_cb+0x4a>
    LWIP_ASSERT("select_cb->prev == NULL", select_cb->prev == NULL);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	685b      	ldr	r3, [r3, #4]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d006      	beq.n	800edd4 <lwip_unlink_select_cb+0x40>
 800edc6:	4b13      	ldr	r3, [pc, #76]	; (800ee14 <lwip_unlink_select_cb+0x80>)
 800edc8:	f240 720d 	movw	r2, #1805	; 0x70d
 800edcc:	4912      	ldr	r1, [pc, #72]	; (800ee18 <lwip_unlink_select_cb+0x84>)
 800edce:	4813      	ldr	r0, [pc, #76]	; (800ee1c <lwip_unlink_select_cb+0x88>)
 800edd0:	f00b ff90 	bl	801acf4 <iprintf>
    select_cb_list = select_cb->next;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4a0d      	ldr	r2, [pc, #52]	; (800ee10 <lwip_unlink_select_cb+0x7c>)
 800edda:	6013      	str	r3, [r2, #0]
 800eddc:	e00f      	b.n	800edfe <lwip_unlink_select_cb+0x6a>
  } else {
    LWIP_ASSERT("select_cb->prev != NULL", select_cb->prev != NULL);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	685b      	ldr	r3, [r3, #4]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d106      	bne.n	800edf4 <lwip_unlink_select_cb+0x60>
 800ede6:	4b0b      	ldr	r3, [pc, #44]	; (800ee14 <lwip_unlink_select_cb+0x80>)
 800ede8:	f44f 62e2 	mov.w	r2, #1808	; 0x710
 800edec:	490c      	ldr	r1, [pc, #48]	; (800ee20 <lwip_unlink_select_cb+0x8c>)
 800edee:	480b      	ldr	r0, [pc, #44]	; (800ee1c <lwip_unlink_select_cb+0x88>)
 800edf0:	f00b ff80 	bl	801acf4 <iprintf>
    select_cb->prev->next = select_cb->next;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	685b      	ldr	r3, [r3, #4]
 800edf8:	687a      	ldr	r2, [r7, #4]
 800edfa:	6812      	ldr	r2, [r2, #0]
 800edfc:	601a      	str	r2, [r3, #0]
  }
#if !LWIP_TCPIP_CORE_LOCKING
  /* Increasing this counter tells select_check_waiters that the list has changed. */
  select_cb_ctr++;
#endif
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 800edfe:	4803      	ldr	r0, [pc, #12]	; (800ee0c <lwip_unlink_select_cb+0x78>)
 800ee00:	f00b fee3 	bl	801abca <sys_mutex_unlock>
}
 800ee04:	bf00      	nop
 800ee06:	3708      	adds	r7, #8
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}
 800ee0c:	2000d930 	.word	0x2000d930
 800ee10:	2000d920 	.word	0x2000d920
 800ee14:	0801cacc 	.word	0x0801cacc
 800ee18:	0801cdcc 	.word	0x0801cdcc
 800ee1c:	0801cb20 	.word	0x0801cb20
 800ee20:	0801cde4 	.word	0x0801cde4

0800ee24 <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b098      	sub	sp, #96	; 0x60
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	60f8      	str	r0, [r7, #12]
 800ee2c:	60b9      	str	r1, [r7, #8]
 800ee2e:	607a      	str	r2, [r7, #4]
 800ee30:	603b      	str	r3, [r7, #0]
  int i, nready = 0;
 800ee32:	2300      	movs	r3, #0
 800ee34:	65bb      	str	r3, [r7, #88]	; 0x58
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_sock *sock;
  SYS_ARCH_DECL_PROTECT(lev);

  FD_ZERO(&lreadset);
 800ee36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ee3a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ee3c:	2302      	movs	r3, #2
 800ee3e:	657b      	str	r3, [r7, #84]	; 0x54
 800ee40:	e007      	b.n	800ee52 <lwip_selscan+0x2e>
 800ee42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee44:	3b01      	subs	r3, #1
 800ee46:	657b      	str	r3, [r7, #84]	; 0x54
 800ee48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee4a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ee4c:	2100      	movs	r1, #0
 800ee4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ee52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d1f4      	bne.n	800ee42 <lwip_selscan+0x1e>
  FD_ZERO(&lwriteset);
 800ee58:	f107 031c 	add.w	r3, r7, #28
 800ee5c:	647b      	str	r3, [r7, #68]	; 0x44
 800ee5e:	2302      	movs	r3, #2
 800ee60:	653b      	str	r3, [r7, #80]	; 0x50
 800ee62:	e007      	b.n	800ee74 <lwip_selscan+0x50>
 800ee64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee66:	3b01      	subs	r3, #1
 800ee68:	653b      	str	r3, [r7, #80]	; 0x50
 800ee6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ee6e:	2100      	movs	r1, #0
 800ee70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ee74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d1f4      	bne.n	800ee64 <lwip_selscan+0x40>
  FD_ZERO(&lexceptset);
 800ee7a:	f107 0314 	add.w	r3, r7, #20
 800ee7e:	643b      	str	r3, [r7, #64]	; 0x40
 800ee80:	2302      	movs	r3, #2
 800ee82:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ee84:	e007      	b.n	800ee96 <lwip_selscan+0x72>
 800ee86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee88:	3b01      	subs	r3, #1
 800ee8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ee8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ee90:	2100      	movs	r1, #0
 800ee92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ee96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d1f4      	bne.n	800ee86 <lwip_selscan+0x62>

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eea0:	e12c      	b.n	800f0fc <lwip_selscan+0x2d8>
    /* if this FD is not in the set, continue */
    if (!(readset_in && FD_ISSET(i, readset_in)) &&
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d016      	beq.n	800eed6 <lwip_selscan+0xb2>
 800eea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	da00      	bge.n	800eeb0 <lwip_selscan+0x8c>
 800eeae:	331f      	adds	r3, #31
 800eeb0:	115b      	asrs	r3, r3, #5
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800eeba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eebc:	4259      	negs	r1, r3
 800eebe:	f003 031f 	and.w	r3, r3, #31
 800eec2:	f001 011f 	and.w	r1, r1, #31
 800eec6:	bf58      	it	pl
 800eec8:	424b      	negpl	r3, r1
 800eeca:	fa22 f303 	lsr.w	r3, r2, r3
 800eece:	f003 0301 	and.w	r3, r3, #1
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d135      	bne.n	800ef42 <lwip_selscan+0x11e>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d016      	beq.n	800ef0a <lwip_selscan+0xe6>
        !(writeset_in && FD_ISSET(i, writeset_in)) &&
 800eedc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eede:	2b00      	cmp	r3, #0
 800eee0:	da00      	bge.n	800eee4 <lwip_selscan+0xc0>
 800eee2:	331f      	adds	r3, #31
 800eee4:	115b      	asrs	r3, r3, #5
 800eee6:	461a      	mov	r2, r3
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800eeee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eef0:	4259      	negs	r1, r3
 800eef2:	f003 031f 	and.w	r3, r3, #31
 800eef6:	f001 011f 	and.w	r1, r1, #31
 800eefa:	bf58      	it	pl
 800eefc:	424b      	negpl	r3, r1
 800eefe:	fa22 f303 	lsr.w	r3, r2, r3
 800ef02:	f003 0301 	and.w	r3, r3, #1
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d11b      	bne.n	800ef42 <lwip_selscan+0x11e>
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	f000 80f1 	beq.w	800f0f4 <lwip_selscan+0x2d0>
        !(exceptset_in && FD_ISSET(i, exceptset_in))) {
 800ef12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	da00      	bge.n	800ef1a <lwip_selscan+0xf6>
 800ef18:	331f      	adds	r3, #31
 800ef1a:	115b      	asrs	r3, r3, #5
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	683b      	ldr	r3, [r7, #0]
 800ef20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ef24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef26:	4259      	negs	r1, r3
 800ef28:	f003 031f 	and.w	r3, r3, #31
 800ef2c:	f001 011f 	and.w	r1, r1, #31
 800ef30:	bf58      	it	pl
 800ef32:	424b      	negpl	r3, r1
 800ef34:	fa22 f303 	lsr.w	r3, r2, r3
 800ef38:	f003 0301 	and.w	r3, r3, #1
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	f000 80d9 	beq.w	800f0f4 <lwip_selscan+0x2d0>
      continue;
    }
    /* First get the socket's status (protected)... */
    SYS_ARCH_PROTECT(lev);
 800ef42:	f00b fe6f 	bl	801ac24 <sys_arch_protect>
 800ef46:	63f8      	str	r0, [r7, #60]	; 0x3c
    sock = tryget_socket_unconn_locked(i);
 800ef48:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ef4a:	f7ff fa78 	bl	800e43e <tryget_socket_unconn_locked>
 800ef4e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (sock != NULL) {
 800ef50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	f000 80c8 	beq.w	800f0e8 <lwip_selscan+0x2c4>
      void *lastdata = sock->lastdata.pbuf;
 800ef58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	637b      	str	r3, [r7, #52]	; 0x34
      s16_t rcvevent = sock->rcvevent;
 800ef5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef60:	891b      	ldrh	r3, [r3, #8]
 800ef62:	867b      	strh	r3, [r7, #50]	; 0x32
      u16_t sendevent = sock->sendevent;
 800ef64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef66:	895b      	ldrh	r3, [r3, #10]
 800ef68:	863b      	strh	r3, [r7, #48]	; 0x30
      u16_t errevent = sock->errevent;
 800ef6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef6c:	899b      	ldrh	r3, [r3, #12]
 800ef6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      SYS_ARCH_UNPROTECT(lev);
 800ef70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ef72:	f00b fe65 	bl	801ac40 <sys_arch_unprotect>

      /* ... then examine it: */
      /* See if netconn of this socket is ready for read */
      if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d03c      	beq.n	800eff6 <lwip_selscan+0x1d2>
 800ef7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	da00      	bge.n	800ef84 <lwip_selscan+0x160>
 800ef82:	331f      	adds	r3, #31
 800ef84:	115b      	asrs	r3, r3, #5
 800ef86:	461a      	mov	r2, r3
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ef8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef90:	4259      	negs	r1, r3
 800ef92:	f003 031f 	and.w	r3, r3, #31
 800ef96:	f001 011f 	and.w	r1, r1, #31
 800ef9a:	bf58      	it	pl
 800ef9c:	424b      	negpl	r3, r1
 800ef9e:	fa22 f303 	lsr.w	r3, r2, r3
 800efa2:	f003 0301 	and.w	r3, r3, #1
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d025      	beq.n	800eff6 <lwip_selscan+0x1d2>
 800efaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efac:	2b00      	cmp	r3, #0
 800efae:	d103      	bne.n	800efb8 <lwip_selscan+0x194>
 800efb0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	dd1e      	ble.n	800eff6 <lwip_selscan+0x1d2>
        FD_SET(i, &lreadset);
 800efb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800efba:	2b00      	cmp	r3, #0
 800efbc:	da00      	bge.n	800efc0 <lwip_selscan+0x19c>
 800efbe:	331f      	adds	r3, #31
 800efc0:	115b      	asrs	r3, r3, #5
 800efc2:	461a      	mov	r2, r3
 800efc4:	0093      	lsls	r3, r2, #2
 800efc6:	3360      	adds	r3, #96	; 0x60
 800efc8:	443b      	add	r3, r7
 800efca:	f853 1c3c 	ldr.w	r1, [r3, #-60]
 800efce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800efd0:	4258      	negs	r0, r3
 800efd2:	f003 031f 	and.w	r3, r3, #31
 800efd6:	f000 001f 	and.w	r0, r0, #31
 800efda:	bf58      	it	pl
 800efdc:	4243      	negpl	r3, r0
 800efde:	2001      	movs	r0, #1
 800efe0:	fa00 f303 	lsl.w	r3, r0, r3
 800efe4:	4319      	orrs	r1, r3
 800efe6:	0093      	lsls	r3, r2, #2
 800efe8:	3360      	adds	r3, #96	; 0x60
 800efea:	443b      	add	r3, r7
 800efec:	f843 1c3c 	str.w	r1, [r3, #-60]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
        nready++;
 800eff0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eff2:	3301      	adds	r3, #1
 800eff4:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      /* See if netconn of this socket is ready for write */
      if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d038      	beq.n	800f06e <lwip_selscan+0x24a>
 800effc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800effe:	2b00      	cmp	r3, #0
 800f000:	da00      	bge.n	800f004 <lwip_selscan+0x1e0>
 800f002:	331f      	adds	r3, #31
 800f004:	115b      	asrs	r3, r3, #5
 800f006:	461a      	mov	r2, r3
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f00e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f010:	4259      	negs	r1, r3
 800f012:	f003 031f 	and.w	r3, r3, #31
 800f016:	f001 011f 	and.w	r1, r1, #31
 800f01a:	bf58      	it	pl
 800f01c:	424b      	negpl	r3, r1
 800f01e:	fa22 f303 	lsr.w	r3, r2, r3
 800f022:	f003 0301 	and.w	r3, r3, #1
 800f026:	2b00      	cmp	r3, #0
 800f028:	d021      	beq.n	800f06e <lwip_selscan+0x24a>
 800f02a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d01e      	beq.n	800f06e <lwip_selscan+0x24a>
        FD_SET(i, &lwriteset);
 800f030:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f032:	2b00      	cmp	r3, #0
 800f034:	da00      	bge.n	800f038 <lwip_selscan+0x214>
 800f036:	331f      	adds	r3, #31
 800f038:	115b      	asrs	r3, r3, #5
 800f03a:	461a      	mov	r2, r3
 800f03c:	0093      	lsls	r3, r2, #2
 800f03e:	3360      	adds	r3, #96	; 0x60
 800f040:	443b      	add	r3, r7
 800f042:	f853 1c44 	ldr.w	r1, [r3, #-68]
 800f046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f048:	4258      	negs	r0, r3
 800f04a:	f003 031f 	and.w	r3, r3, #31
 800f04e:	f000 001f 	and.w	r0, r0, #31
 800f052:	bf58      	it	pl
 800f054:	4243      	negpl	r3, r0
 800f056:	2001      	movs	r0, #1
 800f058:	fa00 f303 	lsl.w	r3, r0, r3
 800f05c:	4319      	orrs	r1, r3
 800f05e:	0093      	lsls	r3, r2, #2
 800f060:	3360      	adds	r3, #96	; 0x60
 800f062:	443b      	add	r3, r7
 800f064:	f843 1c44 	str.w	r1, [r3, #-68]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
 800f068:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f06a:	3301      	adds	r3, #1
 800f06c:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      /* See if netconn of this socket had an error */
      if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d040      	beq.n	800f0f6 <lwip_selscan+0x2d2>
 800f074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f076:	2b00      	cmp	r3, #0
 800f078:	da00      	bge.n	800f07c <lwip_selscan+0x258>
 800f07a:	331f      	adds	r3, #31
 800f07c:	115b      	asrs	r3, r3, #5
 800f07e:	461a      	mov	r2, r3
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f088:	4259      	negs	r1, r3
 800f08a:	f003 031f 	and.w	r3, r3, #31
 800f08e:	f001 011f 	and.w	r1, r1, #31
 800f092:	bf58      	it	pl
 800f094:	424b      	negpl	r3, r1
 800f096:	fa22 f303 	lsr.w	r3, r2, r3
 800f09a:	f003 0301 	and.w	r3, r3, #1
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d029      	beq.n	800f0f6 <lwip_selscan+0x2d2>
 800f0a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d026      	beq.n	800f0f6 <lwip_selscan+0x2d2>
        FD_SET(i, &lexceptset);
 800f0a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	da00      	bge.n	800f0b0 <lwip_selscan+0x28c>
 800f0ae:	331f      	adds	r3, #31
 800f0b0:	115b      	asrs	r3, r3, #5
 800f0b2:	461a      	mov	r2, r3
 800f0b4:	0093      	lsls	r3, r2, #2
 800f0b6:	3360      	adds	r3, #96	; 0x60
 800f0b8:	443b      	add	r3, r7
 800f0ba:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 800f0be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0c0:	4258      	negs	r0, r3
 800f0c2:	f003 031f 	and.w	r3, r3, #31
 800f0c6:	f000 001f 	and.w	r0, r0, #31
 800f0ca:	bf58      	it	pl
 800f0cc:	4243      	negpl	r3, r0
 800f0ce:	2001      	movs	r0, #1
 800f0d0:	fa00 f303 	lsl.w	r3, r0, r3
 800f0d4:	4319      	orrs	r1, r3
 800f0d6:	0093      	lsls	r3, r2, #2
 800f0d8:	3360      	adds	r3, #96	; 0x60
 800f0da:	443b      	add	r3, r7
 800f0dc:	f843 1c4c 	str.w	r1, [r3, #-76]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
        nready++;
 800f0e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0e2:	3301      	adds	r3, #1
 800f0e4:	65bb      	str	r3, [r7, #88]	; 0x58
 800f0e6:	e006      	b.n	800f0f6 <lwip_selscan+0x2d2>
      }
      done_socket(sock);
    } else {
      SYS_ARCH_UNPROTECT(lev);
 800f0e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f0ea:	f00b fda9 	bl	801ac40 <sys_arch_unprotect>
      /* no a valid open socket */
      return -1;
 800f0ee:	f04f 33ff 	mov.w	r3, #4294967295
 800f0f2:	e02b      	b.n	800f14c <lwip_selscan+0x328>
      continue;
 800f0f4:	bf00      	nop
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800f0f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0f8:	3301      	adds	r3, #1
 800f0fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f0fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	429a      	cmp	r2, r3
 800f102:	f6ff aece 	blt.w	800eea2 <lwip_selscan+0x7e>
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
 800f106:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f108:	461a      	mov	r2, r3
 800f10a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f10e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f112:	e882 0003 	stmia.w	r2, {r0, r1}
  *writeset_out = lwriteset;
 800f116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f118:	461a      	mov	r2, r3
 800f11a:	f107 031c 	add.w	r3, r7, #28
 800f11e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f122:	e882 0003 	stmia.w	r2, {r0, r1}
  *exceptset_out = lexceptset;
 800f126:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f128:	461a      	mov	r2, r3
 800f12a:	f107 0314 	add.w	r3, r7, #20
 800f12e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f132:	e882 0003 	stmia.w	r2, {r0, r1}

  LWIP_ASSERT("nready >= 0", nready >= 0);
 800f136:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f138:	2b00      	cmp	r3, #0
 800f13a:	da06      	bge.n	800f14a <lwip_selscan+0x326>
 800f13c:	4b05      	ldr	r3, [pc, #20]	; (800f154 <lwip_selscan+0x330>)
 800f13e:	f240 7269 	movw	r2, #1897	; 0x769
 800f142:	4905      	ldr	r1, [pc, #20]	; (800f158 <lwip_selscan+0x334>)
 800f144:	4805      	ldr	r0, [pc, #20]	; (800f15c <lwip_selscan+0x338>)
 800f146:	f00b fdd5 	bl	801acf4 <iprintf>
  return nready;
 800f14a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	3760      	adds	r7, #96	; 0x60
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}
 800f154:	0801cacc 	.word	0x0801cacc
 800f158:	0801cdfc 	.word	0x0801cdfc
 800f15c:	0801cb20 	.word	0x0801cb20

0800f160 <lwip_select>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

int
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
            struct timeval *timeout)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b0a0      	sub	sp, #128	; 0x80
 800f164:	af04      	add	r7, sp, #16
 800f166:	60f8      	str	r0, [r7, #12]
 800f168:	60b9      	str	r1, [r7, #8]
 800f16a:	607a      	str	r2, [r7, #4]
 800f16c:	603b      	str	r3, [r7, #0]
  u32_t waitres = 0;
 800f16e:	2300      	movs	r3, #0
 800f170:	66fb      	str	r3, [r7, #108]	; 0x6c
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select(%d, %p, %p, %p, tvsec=%"S32_F" tvusec=%"S32_F")\n",
                              maxfdp1, (void *)readset, (void *) writeset, (void *) exceptset,
                              timeout ? (s32_t)timeout->tv_sec : (s32_t) - 1,
                              timeout ? (s32_t)timeout->tv_usec : (s32_t) - 1));

  if ((maxfdp1 < 0) || (maxfdp1 > LWIP_SELECT_MAXNFDS)) {
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	2b00      	cmp	r3, #0
 800f176:	db02      	blt.n	800f17e <lwip_select+0x1e>
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	2b40      	cmp	r3, #64	; 0x40
 800f17c:	dd05      	ble.n	800f18a <lwip_select+0x2a>
    set_errno(EINVAL);
 800f17e:	4b92      	ldr	r3, [pc, #584]	; (800f3c8 <lwip_select+0x268>)
 800f180:	2216      	movs	r2, #22
 800f182:	601a      	str	r2, [r3, #0]
    return -1;
 800f184:	f04f 33ff 	mov.w	r3, #4294967295
 800f188:	e1eb      	b.n	800f562 <lwip_select+0x402>

  lwip_select_inc_sockets_used(maxfdp1, readset, writeset, exceptset, &used_sockets);

  /* Go through each socket in each list to count number of sockets which
     currently match */
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 800f18a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f18e:	9302      	str	r3, [sp, #8]
 800f190:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f194:	9301      	str	r3, [sp, #4]
 800f196:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f19a:	9300      	str	r3, [sp, #0]
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	687a      	ldr	r2, [r7, #4]
 800f1a0:	68b9      	ldr	r1, [r7, #8]
 800f1a2:	68f8      	ldr	r0, [r7, #12]
 800f1a4:	f7ff fe3e 	bl	800ee24 <lwip_selscan>
 800f1a8:	66b8      	str	r0, [r7, #104]	; 0x68

  if (nready < 0) {
 800f1aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	da05      	bge.n	800f1bc <lwip_select+0x5c>
    /* one of the sockets in one of the fd_sets was invalid */
    set_errno(EBADF);
 800f1b0:	4b85      	ldr	r3, [pc, #532]	; (800f3c8 <lwip_select+0x268>)
 800f1b2:	2209      	movs	r2, #9
 800f1b4:	601a      	str	r2, [r3, #0]
    lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
    return -1;
 800f1b6:	f04f 33ff 	mov.w	r3, #4294967295
 800f1ba:	e1d2      	b.n	800f562 <lwip_select+0x402>
  } else if (nready > 0) {
 800f1bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	f300 81ad 	bgt.w	800f51e <lwip_select+0x3be>
    /* one or more sockets are set, no need to wait */
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
  } else {
    /* If we don't have any current events, then suspend if we are supposed to */
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
 800f1c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d009      	beq.n	800f1de <lwip_select+0x7e>
 800f1ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d0:	4313      	orrs	r3, r2
 800f1d2:	d104      	bne.n	800f1de <lwip_select+0x7e>
 800f1d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f1d6:	689b      	ldr	r3, [r3, #8]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	f000 81a0 	beq.w	800f51e <lwip_select+0x3be>
         list is only valid while we are in this function, so it's ok
         to use local variables (unless we're running in MPU compatible
         mode). */
      API_SELECT_CB_VAR_DECLARE(select_cb);
      API_SELECT_CB_VAR_ALLOC(select_cb, set_errno(ENOMEM); lwip_select_dec_sockets_used(maxfdp1, &used_sockets); return -1);
      memset(&API_SELECT_CB_VAR_REF(select_cb), 0, sizeof(struct lwip_select_cb));
 800f1de:	f107 0310 	add.w	r3, r7, #16
 800f1e2:	2224      	movs	r2, #36	; 0x24
 800f1e4:	2100      	movs	r1, #0
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f00b fd7c 	bl	801ace4 <memset>

      API_SELECT_CB_VAR_REF(select_cb).readset = readset;
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	61bb      	str	r3, [r7, #24]
      API_SELECT_CB_VAR_REF(select_cb).writeset = writeset;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	61fb      	str	r3, [r7, #28]
      API_SELECT_CB_VAR_REF(select_cb).exceptset = exceptset;
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	623b      	str	r3, [r7, #32]
#if LWIP_NETCONN_SEM_PER_THREAD
      API_SELECT_CB_VAR_REF(select_cb).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD */
      if (sys_sem_new(&API_SELECT_CB_VAR_REF(select_cb).sem, 0) != ERR_OK) {
 800f1f8:	f107 0310 	add.w	r3, r7, #16
 800f1fc:	3320      	adds	r3, #32
 800f1fe:	2100      	movs	r1, #0
 800f200:	4618      	mov	r0, r3
 800f202:	f00b fc23 	bl	801aa4c <sys_sem_new>
 800f206:	4603      	mov	r3, r0
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d005      	beq.n	800f218 <lwip_select+0xb8>
        /* failed to create semaphore */
        set_errno(ENOMEM);
 800f20c:	4b6e      	ldr	r3, [pc, #440]	; (800f3c8 <lwip_select+0x268>)
 800f20e:	220c      	movs	r2, #12
 800f210:	601a      	str	r2, [r3, #0]
        lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
        API_SELECT_CB_VAR_FREE(select_cb);
        return -1;
 800f212:	f04f 33ff 	mov.w	r3, #4294967295
 800f216:	e1a4      	b.n	800f562 <lwip_select+0x402>
      }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

      lwip_link_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 800f218:	f107 0310 	add.w	r3, r7, #16
 800f21c:	4618      	mov	r0, r3
 800f21e:	f7ff fd97 	bl	800ed50 <lwip_link_select_cb>

      /* Increase select_waiting for each socket we are interested in */
      maxfdp2 = maxfdp1;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	65fb      	str	r3, [r7, #92]	; 0x5c
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800f226:	2300      	movs	r3, #0
 800f228:	663b      	str	r3, [r7, #96]	; 0x60
 800f22a:	e086      	b.n	800f33a <lwip_select+0x1da>
        if ((readset && FD_ISSET(i, readset)) ||
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d016      	beq.n	800f260 <lwip_select+0x100>
 800f232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f234:	2b00      	cmp	r3, #0
 800f236:	da00      	bge.n	800f23a <lwip_select+0xda>
 800f238:	331f      	adds	r3, #31
 800f23a:	115b      	asrs	r3, r3, #5
 800f23c:	461a      	mov	r2, r3
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f244:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f246:	4259      	negs	r1, r3
 800f248:	f003 031f 	and.w	r3, r3, #31
 800f24c:	f001 011f 	and.w	r1, r1, #31
 800f250:	bf58      	it	pl
 800f252:	424b      	negpl	r3, r1
 800f254:	fa22 f303 	lsr.w	r3, r2, r3
 800f258:	f003 0301 	and.w	r3, r3, #1
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d133      	bne.n	800f2c8 <lwip_select+0x168>
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d016      	beq.n	800f294 <lwip_select+0x134>
            (writeset && FD_ISSET(i, writeset)) ||
 800f266:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f268:	2b00      	cmp	r3, #0
 800f26a:	da00      	bge.n	800f26e <lwip_select+0x10e>
 800f26c:	331f      	adds	r3, #31
 800f26e:	115b      	asrs	r3, r3, #5
 800f270:	461a      	mov	r2, r3
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f278:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f27a:	4259      	negs	r1, r3
 800f27c:	f003 031f 	and.w	r3, r3, #31
 800f280:	f001 011f 	and.w	r1, r1, #31
 800f284:	bf58      	it	pl
 800f286:	424b      	negpl	r3, r1
 800f288:	fa22 f303 	lsr.w	r3, r2, r3
 800f28c:	f003 0301 	and.w	r3, r3, #1
 800f290:	2b00      	cmp	r3, #0
 800f292:	d119      	bne.n	800f2c8 <lwip_select+0x168>
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d04c      	beq.n	800f334 <lwip_select+0x1d4>
            (exceptset && FD_ISSET(i, exceptset))) {
 800f29a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	da00      	bge.n	800f2a2 <lwip_select+0x142>
 800f2a0:	331f      	adds	r3, #31
 800f2a2:	115b      	asrs	r3, r3, #5
 800f2a4:	461a      	mov	r2, r3
 800f2a6:	683b      	ldr	r3, [r7, #0]
 800f2a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f2ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f2ae:	4259      	negs	r1, r3
 800f2b0:	f003 031f 	and.w	r3, r3, #31
 800f2b4:	f001 011f 	and.w	r1, r1, #31
 800f2b8:	bf58      	it	pl
 800f2ba:	424b      	negpl	r3, r1
 800f2bc:	fa22 f303 	lsr.w	r3, r2, r3
 800f2c0:	f003 0301 	and.w	r3, r3, #1
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d035      	beq.n	800f334 <lwip_select+0x1d4>
          struct lwip_sock *sock;
          SYS_ARCH_PROTECT(lev);
 800f2c8:	f00b fcac 	bl	801ac24 <sys_arch_protect>
 800f2cc:	65b8      	str	r0, [r7, #88]	; 0x58
          sock = tryget_socket_unconn_locked(i);
 800f2ce:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f2d0:	f7ff f8b5 	bl	800e43e <tryget_socket_unconn_locked>
 800f2d4:	6578      	str	r0, [r7, #84]	; 0x54
          if (sock != NULL) {
 800f2d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d01f      	beq.n	800f31c <lwip_select+0x1bc>
            sock->select_waiting++;
 800f2dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2de:	7b9b      	ldrb	r3, [r3, #14]
 800f2e0:	3301      	adds	r3, #1
 800f2e2:	b2da      	uxtb	r2, r3
 800f2e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2e6:	739a      	strb	r2, [r3, #14]
            if (sock->select_waiting == 0) {
 800f2e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2ea:	7b9b      	ldrb	r3, [r3, #14]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d111      	bne.n	800f314 <lwip_select+0x1b4>
              /* overflow - too many threads waiting */
              sock->select_waiting--;
 800f2f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2f2:	7b9b      	ldrb	r3, [r3, #14]
 800f2f4:	3b01      	subs	r3, #1
 800f2f6:	b2da      	uxtb	r2, r3
 800f2f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2fa:	739a      	strb	r2, [r3, #14]
              nready = -1;
 800f2fc:	f04f 33ff 	mov.w	r3, #4294967295
 800f300:	66bb      	str	r3, [r7, #104]	; 0x68
              maxfdp2 = i;
 800f302:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f304:	65fb      	str	r3, [r7, #92]	; 0x5c
              SYS_ARCH_UNPROTECT(lev);
 800f306:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f308:	f00b fc9a 	bl	801ac40 <sys_arch_unprotect>
              done_socket(sock);
              set_errno(EBUSY);
 800f30c:	4b2e      	ldr	r3, [pc, #184]	; (800f3c8 <lwip_select+0x268>)
 800f30e:	2210      	movs	r2, #16
 800f310:	601a      	str	r2, [r3, #0]
              break;
 800f312:	e017      	b.n	800f344 <lwip_select+0x1e4>
            }
            SYS_ARCH_UNPROTECT(lev);
 800f314:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f316:	f00b fc93 	bl	801ac40 <sys_arch_unprotect>
 800f31a:	e00b      	b.n	800f334 <lwip_select+0x1d4>
            done_socket(sock);
          } else {
            /* Not a valid socket */
            nready = -1;
 800f31c:	f04f 33ff 	mov.w	r3, #4294967295
 800f320:	66bb      	str	r3, [r7, #104]	; 0x68
            maxfdp2 = i;
 800f322:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f324:	65fb      	str	r3, [r7, #92]	; 0x5c
            SYS_ARCH_UNPROTECT(lev);
 800f326:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f328:	f00b fc8a 	bl	801ac40 <sys_arch_unprotect>
            set_errno(EBADF);
 800f32c:	4b26      	ldr	r3, [pc, #152]	; (800f3c8 <lwip_select+0x268>)
 800f32e:	2209      	movs	r2, #9
 800f330:	601a      	str	r2, [r3, #0]
            break;
 800f332:	e007      	b.n	800f344 <lwip_select+0x1e4>
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800f334:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f336:	3301      	adds	r3, #1
 800f338:	663b      	str	r3, [r7, #96]	; 0x60
 800f33a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	429a      	cmp	r2, r3
 800f340:	f6ff af74 	blt.w	800f22c <lwip_select+0xcc>
          }
        }
      }

      if (nready >= 0) {
 800f344:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f346:	2b00      	cmp	r3, #0
 800f348:	db3b      	blt.n	800f3c2 <lwip_select+0x262>
        /* Call lwip_selscan again: there could have been events between
           the last scan (without us on the list) and putting us on the list! */
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 800f34a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f34e:	9302      	str	r3, [sp, #8]
 800f350:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f354:	9301      	str	r3, [sp, #4]
 800f356:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f35a:	9300      	str	r3, [sp, #0]
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	687a      	ldr	r2, [r7, #4]
 800f360:	68b9      	ldr	r1, [r7, #8]
 800f362:	68f8      	ldr	r0, [r7, #12]
 800f364:	f7ff fd5e 	bl	800ee24 <lwip_selscan>
 800f368:	66b8      	str	r0, [r7, #104]	; 0x68
        if (!nready) {
 800f36a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d128      	bne.n	800f3c2 <lwip_select+0x262>
          /* Still none ready, just wait to be woken */
          if (timeout == 0) {
 800f370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f372:	2b00      	cmp	r3, #0
 800f374:	d102      	bne.n	800f37c <lwip_select+0x21c>
            /* Wait forever */
            msectimeout = 0;
 800f376:	2300      	movs	r3, #0
 800f378:	667b      	str	r3, [r7, #100]	; 0x64
 800f37a:	e01a      	b.n	800f3b2 <lwip_select+0x252>
          } else {
            long msecs_long = ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500) / 1000));
 800f37c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f386:	fb03 f202 	mul.w	r2, r3, r2
 800f38a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f38c:	689b      	ldr	r3, [r3, #8]
 800f38e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f392:	490e      	ldr	r1, [pc, #56]	; (800f3cc <lwip_select+0x26c>)
 800f394:	fb81 0103 	smull	r0, r1, r1, r3
 800f398:	1189      	asrs	r1, r1, #6
 800f39a:	17db      	asrs	r3, r3, #31
 800f39c:	1acb      	subs	r3, r1, r3
 800f39e:	4413      	add	r3, r2
 800f3a0:	653b      	str	r3, [r7, #80]	; 0x50
            if (msecs_long <= 0) {
 800f3a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	dc02      	bgt.n	800f3ae <lwip_select+0x24e>
              /* Wait 1ms at least (0 means wait forever) */
              msectimeout = 1;
 800f3a8:	2301      	movs	r3, #1
 800f3aa:	667b      	str	r3, [r7, #100]	; 0x64
 800f3ac:	e001      	b.n	800f3b2 <lwip_select+0x252>
            } else {
              msectimeout = (u32_t)msecs_long;
 800f3ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3b0:	667b      	str	r3, [r7, #100]	; 0x64
            }
          }

          waitres = sys_arch_sem_wait(SELECT_SEM_PTR(API_SELECT_CB_VAR_REF(select_cb).sem), msectimeout);
 800f3b2:	f107 0310 	add.w	r3, r7, #16
 800f3b6:	3320      	adds	r3, #32
 800f3b8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f00b fb6b 	bl	801aa96 <sys_arch_sem_wait>
 800f3c0:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif
        }
      }

      /* Decrease select_waiting for each socket we are interested in */
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	663b      	str	r3, [r7, #96]	; 0x60
 800f3c6:	e080      	b.n	800f4ca <lwip_select+0x36a>
 800f3c8:	200111e4 	.word	0x200111e4
 800f3cc:	10624dd3 	.word	0x10624dd3
        if ((readset && FD_ISSET(i, readset)) ||
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d016      	beq.n	800f404 <lwip_select+0x2a4>
 800f3d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	da00      	bge.n	800f3de <lwip_select+0x27e>
 800f3dc:	331f      	adds	r3, #31
 800f3de:	115b      	asrs	r3, r3, #5
 800f3e0:	461a      	mov	r2, r3
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f3e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f3ea:	4259      	negs	r1, r3
 800f3ec:	f003 031f 	and.w	r3, r3, #31
 800f3f0:	f001 011f 	and.w	r1, r1, #31
 800f3f4:	bf58      	it	pl
 800f3f6:	424b      	negpl	r3, r1
 800f3f8:	fa22 f303 	lsr.w	r3, r2, r3
 800f3fc:	f003 0301 	and.w	r3, r3, #1
 800f400:	2b00      	cmp	r3, #0
 800f402:	d133      	bne.n	800f46c <lwip_select+0x30c>
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d016      	beq.n	800f438 <lwip_select+0x2d8>
            (writeset && FD_ISSET(i, writeset)) ||
 800f40a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	da00      	bge.n	800f412 <lwip_select+0x2b2>
 800f410:	331f      	adds	r3, #31
 800f412:	115b      	asrs	r3, r3, #5
 800f414:	461a      	mov	r2, r3
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f41c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f41e:	4259      	negs	r1, r3
 800f420:	f003 031f 	and.w	r3, r3, #31
 800f424:	f001 011f 	and.w	r1, r1, #31
 800f428:	bf58      	it	pl
 800f42a:	424b      	negpl	r3, r1
 800f42c:	fa22 f303 	lsr.w	r3, r2, r3
 800f430:	f003 0301 	and.w	r3, r3, #1
 800f434:	2b00      	cmp	r3, #0
 800f436:	d119      	bne.n	800f46c <lwip_select+0x30c>
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d042      	beq.n	800f4c4 <lwip_select+0x364>
            (exceptset && FD_ISSET(i, exceptset))) {
 800f43e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f440:	2b00      	cmp	r3, #0
 800f442:	da00      	bge.n	800f446 <lwip_select+0x2e6>
 800f444:	331f      	adds	r3, #31
 800f446:	115b      	asrs	r3, r3, #5
 800f448:	461a      	mov	r2, r3
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f450:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f452:	4259      	negs	r1, r3
 800f454:	f003 031f 	and.w	r3, r3, #31
 800f458:	f001 011f 	and.w	r1, r1, #31
 800f45c:	bf58      	it	pl
 800f45e:	424b      	negpl	r3, r1
 800f460:	fa22 f303 	lsr.w	r3, r2, r3
 800f464:	f003 0301 	and.w	r3, r3, #1
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d02b      	beq.n	800f4c4 <lwip_select+0x364>
          struct lwip_sock *sock;
          SYS_ARCH_PROTECT(lev);
 800f46c:	f00b fbda 	bl	801ac24 <sys_arch_protect>
 800f470:	65b8      	str	r0, [r7, #88]	; 0x58
          sock = tryget_socket_unconn_locked(i);
 800f472:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f474:	f7fe ffe3 	bl	800e43e <tryget_socket_unconn_locked>
 800f478:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (sock != NULL) {
 800f47a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d018      	beq.n	800f4b2 <lwip_select+0x352>
            /* for now, handle select_waiting==0... */
            LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
 800f480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f482:	7b9b      	ldrb	r3, [r3, #14]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d106      	bne.n	800f496 <lwip_select+0x336>
 800f488:	4b38      	ldr	r3, [pc, #224]	; (800f56c <lwip_select+0x40c>)
 800f48a:	f640 023c 	movw	r2, #2108	; 0x83c
 800f48e:	4938      	ldr	r1, [pc, #224]	; (800f570 <lwip_select+0x410>)
 800f490:	4838      	ldr	r0, [pc, #224]	; (800f574 <lwip_select+0x414>)
 800f492:	f00b fc2f 	bl	801acf4 <iprintf>
            if (sock->select_waiting > 0) {
 800f496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f498:	7b9b      	ldrb	r3, [r3, #14]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d005      	beq.n	800f4aa <lwip_select+0x34a>
              sock->select_waiting--;
 800f49e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4a0:	7b9b      	ldrb	r3, [r3, #14]
 800f4a2:	3b01      	subs	r3, #1
 800f4a4:	b2da      	uxtb	r2, r3
 800f4a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4a8:	739a      	strb	r2, [r3, #14]
            }
            SYS_ARCH_UNPROTECT(lev);
 800f4aa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f4ac:	f00b fbc8 	bl	801ac40 <sys_arch_unprotect>
 800f4b0:	e008      	b.n	800f4c4 <lwip_select+0x364>
            done_socket(sock);
          } else {
            SYS_ARCH_UNPROTECT(lev);
 800f4b2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f4b4:	f00b fbc4 	bl	801ac40 <sys_arch_unprotect>
            /* Not a valid socket */
            nready = -1;
 800f4b8:	f04f 33ff 	mov.w	r3, #4294967295
 800f4bc:	66bb      	str	r3, [r7, #104]	; 0x68
            set_errno(EBADF);
 800f4be:	4b2e      	ldr	r3, [pc, #184]	; (800f578 <lwip_select+0x418>)
 800f4c0:	2209      	movs	r2, #9
 800f4c2:	601a      	str	r2, [r3, #0]
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 800f4c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f4c6:	3301      	adds	r3, #1
 800f4c8:	663b      	str	r3, [r7, #96]	; 0x60
 800f4ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f4cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	f6ff af7e 	blt.w	800f3d0 <lwip_select+0x270>
          }
        }
      }

      lwip_unlink_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 800f4d4:	f107 0310 	add.w	r3, r7, #16
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f7ff fc5b 	bl	800ed94 <lwip_unlink_select_cb>
      if (API_SELECT_CB_VAR_REF(select_cb).sem_signalled && (!waited || (waitres == SYS_ARCH_TIMEOUT))) {
        /* don't leave the thread-local semaphore signalled */
        sys_arch_sem_wait(API_SELECT_CB_VAR_REF(select_cb).sem, 1);
      }
#else /* LWIP_NETCONN_SEM_PER_THREAD */
      sys_sem_free(&API_SELECT_CB_VAR_REF(select_cb).sem);
 800f4de:	f107 0310 	add.w	r3, r7, #16
 800f4e2:	3320      	adds	r3, #32
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f00b fb14 	bl	801ab12 <sys_sem_free>
#endif /* LWIP_NETCONN_SEM_PER_THREAD */
      API_SELECT_CB_VAR_FREE(select_cb);

      if (nready < 0) {
 800f4ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	da02      	bge.n	800f4f6 <lwip_select+0x396>
        /* This happens when a socket got closed while waiting */
        lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
        return -1;
 800f4f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f4f4:	e035      	b.n	800f562 <lwip_select+0x402>
      }

      if (waitres == SYS_ARCH_TIMEOUT) {
 800f4f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4fc:	d00f      	beq.n	800f51e <lwip_select+0x3be>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: timeout expired\n"));
        /* This is OK as the local fdsets are empty and nready is zero,
           or we would have returned earlier. */
      } else {
        /* See what's set now after waiting */
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 800f4fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f502:	9302      	str	r3, [sp, #8]
 800f504:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f508:	9301      	str	r3, [sp, #4]
 800f50a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f50e:	9300      	str	r3, [sp, #0]
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	687a      	ldr	r2, [r7, #4]
 800f514:	68b9      	ldr	r1, [r7, #8]
 800f516:	68f8      	ldr	r0, [r7, #12]
 800f518:	f7ff fc84 	bl	800ee24 <lwip_selscan>
 800f51c:	66b8      	str	r0, [r7, #104]	; 0x68
    }
  }

  lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
  set_errno(0);
  if (readset) {
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d007      	beq.n	800f534 <lwip_select+0x3d4>
    *readset = lreadset;
 800f524:	68bb      	ldr	r3, [r7, #8]
 800f526:	461a      	mov	r2, r3
 800f528:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f52c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f530:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  if (writeset) {
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d007      	beq.n	800f54a <lwip_select+0x3ea>
    *writeset = lwriteset;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	461a      	mov	r2, r3
 800f53e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f542:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f546:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  if (exceptset) {
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d007      	beq.n	800f560 <lwip_select+0x400>
    *exceptset = lexceptset;
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	461a      	mov	r2, r3
 800f554:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f558:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f55c:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  return nready;
 800f560:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 800f562:	4618      	mov	r0, r3
 800f564:	3770      	adds	r7, #112	; 0x70
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}
 800f56a:	bf00      	nop
 800f56c:	0801cacc 	.word	0x0801cacc
 800f570:	0801ce08 	.word	0x0801ce08
 800f574:	0801cb20 	.word	0x0801cb20
 800f578:	200111e4 	.word	0x200111e4

0800f57c <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800f57c:	b480      	push	{r7}
 800f57e:	b087      	sub	sp, #28
 800f580:	af00      	add	r7, sp, #0
 800f582:	60f8      	str	r0, [r7, #12]
 800f584:	60b9      	str	r1, [r7, #8]
 800f586:	607a      	str	r2, [r7, #4]
 800f588:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800f58a:	2300      	movs	r3, #0
 800f58c:	617b      	str	r3, [r7, #20]
 800f58e:	e02c      	b.n	800f5ea <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	695a      	ldr	r2, [r3, #20]
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	00db      	lsls	r3, r3, #3
 800f598:	4413      	add	r3, r2
 800f59a:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800f59c:	693b      	ldr	r3, [r7, #16]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	68ba      	ldr	r2, [r7, #8]
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d11e      	bne.n	800f5e4 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d009      	beq.n	800f5c0 <lwip_poll_should_wake+0x44>
 800f5ac:	693b      	ldr	r3, [r7, #16]
 800f5ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f5b2:	b29b      	uxth	r3, r3
 800f5b4:	f003 0301 	and.w	r3, r3, #1
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d001      	beq.n	800f5c0 <lwip_poll_should_wake+0x44>
        return 1;
 800f5bc:	2301      	movs	r3, #1
 800f5be:	e01a      	b.n	800f5f6 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d009      	beq.n	800f5da <lwip_poll_should_wake+0x5e>
 800f5c6:	693b      	ldr	r3, [r7, #16]
 800f5c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f5cc:	b29b      	uxth	r3, r3
 800f5ce:	f003 0302 	and.w	r3, r3, #2
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d001      	beq.n	800f5da <lwip_poll_should_wake+0x5e>
        return 1;
 800f5d6:	2301      	movs	r3, #1
 800f5d8:	e00d      	b.n	800f5f6 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800f5da:	6a3b      	ldr	r3, [r7, #32]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d001      	beq.n	800f5e4 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	e008      	b.n	800f5f6 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	3301      	adds	r3, #1
 800f5e8:	617b      	str	r3, [r7, #20]
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	699b      	ldr	r3, [r3, #24]
 800f5ee:	697a      	ldr	r2, [r7, #20]
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	d3cd      	bcc.n	800f590 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800f5f4:	2300      	movs	r3, #0
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	371c      	adds	r7, #28
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f600:	4770      	bx	lr
	...

0800f604 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b08a      	sub	sp, #40	; 0x28
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
 800f60c:	460b      	mov	r3, r1
 800f60e:	70fb      	strb	r3, [r7, #3]
 800f610:	4613      	mov	r3, r2
 800f612:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2b00      	cmp	r3, #0
 800f618:	f000 80a4 	beq.w	800f764 <event_callback+0x160>
    s = conn->socket;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	699b      	ldr	r3, [r3, #24]
 800f620:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800f622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f624:	2b00      	cmp	r3, #0
 800f626:	da18      	bge.n	800f65a <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800f628:	f00b fafc 	bl	801ac24 <sys_arch_protect>
 800f62c:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	699b      	ldr	r3, [r3, #24]
 800f632:	2b00      	cmp	r3, #0
 800f634:	da0b      	bge.n	800f64e <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800f636:	78fb      	ldrb	r3, [r7, #3]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d104      	bne.n	800f646 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	699b      	ldr	r3, [r3, #24]
 800f640:	1e5a      	subs	r2, r3, #1
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800f646:	69f8      	ldr	r0, [r7, #28]
 800f648:	f00b fafa 	bl	801ac40 <sys_arch_unprotect>
        return;
 800f64c:	e08d      	b.n	800f76a <event_callback+0x166>
      }
      s = conn->socket;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	699b      	ldr	r3, [r3, #24]
 800f652:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800f654:	69f8      	ldr	r0, [r7, #28]
 800f656:	f00b faf3 	bl	801ac40 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800f65a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f65c:	f7fe ff12 	bl	800e484 <get_socket>
 800f660:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800f662:	69bb      	ldr	r3, [r7, #24]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d07f      	beq.n	800f768 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800f668:	2301      	movs	r3, #1
 800f66a:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800f66c:	f00b fada 	bl	801ac24 <sys_arch_protect>
 800f670:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800f672:	78fb      	ldrb	r3, [r7, #3]
 800f674:	2b04      	cmp	r3, #4
 800f676:	d83e      	bhi.n	800f6f6 <event_callback+0xf2>
 800f678:	a201      	add	r2, pc, #4	; (adr r2, 800f680 <event_callback+0x7c>)
 800f67a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f67e:	bf00      	nop
 800f680:	0800f695 	.word	0x0800f695
 800f684:	0800f6b7 	.word	0x0800f6b7
 800f688:	0800f6cf 	.word	0x0800f6cf
 800f68c:	0800f6e3 	.word	0x0800f6e3
 800f690:	0800f6ef 	.word	0x0800f6ef
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800f694:	69bb      	ldr	r3, [r7, #24]
 800f696:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f69a:	b29b      	uxth	r3, r3
 800f69c:	3301      	adds	r3, #1
 800f69e:	b29b      	uxth	r3, r3
 800f6a0:	b21a      	sxth	r2, r3
 800f6a2:	69bb      	ldr	r3, [r7, #24]
 800f6a4:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800f6a6:	69bb      	ldr	r3, [r7, #24]
 800f6a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f6ac:	2b01      	cmp	r3, #1
 800f6ae:	dd2a      	ble.n	800f706 <event_callback+0x102>
        check_waiters = 0;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	623b      	str	r3, [r7, #32]
      }
      break;
 800f6b4:	e027      	b.n	800f706 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800f6b6:	69bb      	ldr	r3, [r7, #24]
 800f6b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f6bc:	b29b      	uxth	r3, r3
 800f6be:	3b01      	subs	r3, #1
 800f6c0:	b29b      	uxth	r3, r3
 800f6c2:	b21a      	sxth	r2, r3
 800f6c4:	69bb      	ldr	r3, [r7, #24]
 800f6c6:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	623b      	str	r3, [r7, #32]
      break;
 800f6cc:	e01c      	b.n	800f708 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800f6ce:	69bb      	ldr	r3, [r7, #24]
 800f6d0:	895b      	ldrh	r3, [r3, #10]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d001      	beq.n	800f6da <event_callback+0xd6>
        check_waiters = 0;
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800f6da:	69bb      	ldr	r3, [r7, #24]
 800f6dc:	2201      	movs	r2, #1
 800f6de:	815a      	strh	r2, [r3, #10]
      break;
 800f6e0:	e012      	b.n	800f708 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800f6e2:	69bb      	ldr	r3, [r7, #24]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	623b      	str	r3, [r7, #32]
      break;
 800f6ec:	e00c      	b.n	800f708 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800f6ee:	69bb      	ldr	r3, [r7, #24]
 800f6f0:	2201      	movs	r2, #1
 800f6f2:	819a      	strh	r2, [r3, #12]
      break;
 800f6f4:	e008      	b.n	800f708 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800f6f6:	4b1e      	ldr	r3, [pc, #120]	; (800f770 <event_callback+0x16c>)
 800f6f8:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800f6fc:	491d      	ldr	r1, [pc, #116]	; (800f774 <event_callback+0x170>)
 800f6fe:	481e      	ldr	r0, [pc, #120]	; (800f778 <event_callback+0x174>)
 800f700:	f00b faf8 	bl	801acf4 <iprintf>
      break;
 800f704:	e000      	b.n	800f708 <event_callback+0x104>
      break;
 800f706:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800f708:	69bb      	ldr	r3, [r7, #24]
 800f70a:	7b9b      	ldrb	r3, [r3, #14]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d025      	beq.n	800f75c <event_callback+0x158>
 800f710:	6a3b      	ldr	r3, [r7, #32]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d022      	beq.n	800f75c <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800f716:	69bb      	ldr	r3, [r7, #24]
 800f718:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	bfcc      	ite	gt
 800f720:	2301      	movgt	r3, #1
 800f722:	2300      	movle	r3, #0
 800f724:	b2db      	uxtb	r3, r3
 800f726:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800f728:	69bb      	ldr	r3, [r7, #24]
 800f72a:	895b      	ldrh	r3, [r3, #10]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	bf14      	ite	ne
 800f730:	2301      	movne	r3, #1
 800f732:	2300      	moveq	r3, #0
 800f734:	b2db      	uxtb	r3, r3
 800f736:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800f738:	69bb      	ldr	r3, [r7, #24]
 800f73a:	899b      	ldrh	r3, [r3, #12]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	bf14      	ite	ne
 800f740:	2301      	movne	r3, #1
 800f742:	2300      	moveq	r3, #0
 800f744:	b2db      	uxtb	r3, r3
 800f746:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800f748:	69f8      	ldr	r0, [r7, #28]
 800f74a:	f00b fa79 	bl	801ac40 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	693a      	ldr	r2, [r7, #16]
 800f752:	6979      	ldr	r1, [r7, #20]
 800f754:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f756:	f000 f811 	bl	800f77c <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800f75a:	e006      	b.n	800f76a <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800f75c:	69f8      	ldr	r0, [r7, #28]
 800f75e:	f00b fa6f 	bl	801ac40 <sys_arch_unprotect>
 800f762:	e002      	b.n	800f76a <event_callback+0x166>
    return;
 800f764:	bf00      	nop
 800f766:	e000      	b.n	800f76a <event_callback+0x166>
      return;
 800f768:	bf00      	nop
  }
  done_socket(sock);
}
 800f76a:	3728      	adds	r7, #40	; 0x28
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}
 800f770:	0801cacc 	.word	0x0801cacc
 800f774:	0801ce48 	.word	0x0801ce48
 800f778:	0801cb20 	.word	0x0801cb20

0800f77c <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b088      	sub	sp, #32
 800f780:	af02      	add	r7, sp, #8
 800f782:	60f8      	str	r0, [r7, #12]
 800f784:	60b9      	str	r1, [r7, #8]
 800f786:	607a      	str	r2, [r7, #4]
 800f788:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800f78a:	4b4b      	ldr	r3, [pc, #300]	; (800f8b8 <select_check_waiters+0x13c>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	617b      	str	r3, [r7, #20]
 800f790:	e088      	b.n	800f8a4 <select_check_waiters+0x128>
    if (scb->sem_signalled == 0) {
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	69db      	ldr	r3, [r3, #28]
 800f796:	2b00      	cmp	r3, #0
 800f798:	f040 8081 	bne.w	800f89e <select_check_waiters+0x122>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800f79c:	2300      	movs	r3, #0
 800f79e:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	695b      	ldr	r3, [r3, #20]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d009      	beq.n	800f7bc <select_check_waiters+0x40>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	9300      	str	r3, [sp, #0]
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	68ba      	ldr	r2, [r7, #8]
 800f7b0:	68f9      	ldr	r1, [r7, #12]
 800f7b2:	6978      	ldr	r0, [r7, #20]
 800f7b4:	f7ff fee2 	bl	800f57c <lwip_poll_should_wake>
 800f7b8:	6138      	str	r0, [r7, #16]
 800f7ba:	e065      	b.n	800f888 <select_check_waiters+0x10c>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800f7bc:	68bb      	ldr	r3, [r7, #8]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d01c      	beq.n	800f7fc <select_check_waiters+0x80>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	689b      	ldr	r3, [r3, #8]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d018      	beq.n	800f7fc <select_check_waiters+0x80>
 800f7ca:	697b      	ldr	r3, [r7, #20]
 800f7cc:	689a      	ldr	r2, [r3, #8]
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	da00      	bge.n	800f7d6 <select_check_waiters+0x5a>
 800f7d4:	331f      	adds	r3, #31
 800f7d6:	115b      	asrs	r3, r3, #5
 800f7d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	4259      	negs	r1, r3
 800f7e0:	f003 031f 	and.w	r3, r3, #31
 800f7e4:	f001 011f 	and.w	r1, r1, #31
 800f7e8:	bf58      	it	pl
 800f7ea:	424b      	negpl	r3, r1
 800f7ec:	fa22 f303 	lsr.w	r3, r2, r3
 800f7f0:	f003 0301 	and.w	r3, r3, #1
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d001      	beq.n	800f7fc <select_check_waiters+0x80>
            do_signal = 1;
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d01f      	beq.n	800f842 <select_check_waiters+0xc6>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800f802:	693b      	ldr	r3, [r7, #16]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d11c      	bne.n	800f842 <select_check_waiters+0xc6>
 800f808:	697b      	ldr	r3, [r7, #20]
 800f80a:	68db      	ldr	r3, [r3, #12]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d018      	beq.n	800f842 <select_check_waiters+0xc6>
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	68da      	ldr	r2, [r3, #12]
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	2b00      	cmp	r3, #0
 800f818:	da00      	bge.n	800f81c <select_check_waiters+0xa0>
 800f81a:	331f      	adds	r3, #31
 800f81c:	115b      	asrs	r3, r3, #5
 800f81e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	4259      	negs	r1, r3
 800f826:	f003 031f 	and.w	r3, r3, #31
 800f82a:	f001 011f 	and.w	r1, r1, #31
 800f82e:	bf58      	it	pl
 800f830:	424b      	negpl	r3, r1
 800f832:	fa22 f303 	lsr.w	r3, r2, r3
 800f836:	f003 0301 	and.w	r3, r3, #1
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d001      	beq.n	800f842 <select_check_waiters+0xc6>
            do_signal = 1;
 800f83e:	2301      	movs	r3, #1
 800f840:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d01f      	beq.n	800f888 <select_check_waiters+0x10c>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800f848:	693b      	ldr	r3, [r7, #16]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d11c      	bne.n	800f888 <select_check_waiters+0x10c>
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	691b      	ldr	r3, [r3, #16]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d018      	beq.n	800f888 <select_check_waiters+0x10c>
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	691a      	ldr	r2, [r3, #16]
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	da00      	bge.n	800f862 <select_check_waiters+0xe6>
 800f860:	331f      	adds	r3, #31
 800f862:	115b      	asrs	r3, r3, #5
 800f864:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	4259      	negs	r1, r3
 800f86c:	f003 031f 	and.w	r3, r3, #31
 800f870:	f001 011f 	and.w	r1, r1, #31
 800f874:	bf58      	it	pl
 800f876:	424b      	negpl	r3, r1
 800f878:	fa22 f303 	lsr.w	r3, r2, r3
 800f87c:	f003 0301 	and.w	r3, r3, #1
 800f880:	2b00      	cmp	r3, #0
 800f882:	d001      	beq.n	800f888 <select_check_waiters+0x10c>
            do_signal = 1;
 800f884:	2301      	movs	r3, #1
 800f886:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800f888:	693b      	ldr	r3, [r7, #16]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d007      	beq.n	800f89e <select_check_waiters+0x122>
        scb->sem_signalled = 1;
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	2201      	movs	r2, #1
 800f892:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	3320      	adds	r3, #32
 800f898:	4618      	mov	r0, r3
 800f89a:	f00b f92d 	bl	801aaf8 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800f89e:	697b      	ldr	r3, [r7, #20]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	617b      	str	r3, [r7, #20]
 800f8a4:	697b      	ldr	r3, [r7, #20]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	f47f af73 	bne.w	800f792 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800f8ac:	bf00      	nop
 800f8ae:	bf00      	nop
 800f8b0:	3718      	adds	r7, #24
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}
 800f8b6:	bf00      	nop
 800f8b8:	2000d920 	.word	0x2000d920

0800f8bc <lwip_fcntl>:
 * The flag O_NONBLOCK and access modes are supported for F_GETFL, only
 * the flag O_NONBLOCK is implemented for F_SETFL.
 */
int
lwip_fcntl(int s, int cmd, int val)
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b08c      	sub	sp, #48	; 0x30
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	60f8      	str	r0, [r7, #12]
 800f8c4:	60b9      	str	r1, [r7, #8]
 800f8c6:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock = get_socket(s);
 800f8c8:	68f8      	ldr	r0, [r7, #12]
 800f8ca:	f7fe fddb 	bl	800e484 <get_socket>
 800f8ce:	6278      	str	r0, [r7, #36]	; 0x24
  int ret = -1;
 800f8d0:	f04f 33ff 	mov.w	r3, #4294967295
 800f8d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int op_mode = 0;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (!sock) {
 800f8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d102      	bne.n	800f8e6 <lwip_fcntl+0x2a>
    return -1;
 800f8e0:	f04f 33ff 	mov.w	r3, #4294967295
 800f8e4:	e08b      	b.n	800f9fe <lwip_fcntl+0x142>
  }

  switch (cmd) {
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	2b03      	cmp	r3, #3
 800f8ea:	d003      	beq.n	800f8f4 <lwip_fcntl+0x38>
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	2b04      	cmp	r3, #4
 800f8f0:	d043      	beq.n	800f97a <lwip_fcntl+0xbe>
 800f8f2:	e077      	b.n	800f9e4 <lwip_fcntl+0x128>
    case F_GETFL:
      ret = netconn_is_nonblocking(sock->conn) ? O_NONBLOCK : 0;
 800f8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	7f1b      	ldrb	r3, [r3, #28]
 800f8fa:	105b      	asrs	r3, r3, #1
 800f8fc:	f003 0301 	and.w	r3, r3, #1
 800f900:	62fb      	str	r3, [r7, #44]	; 0x2c
      sock_set_errno(sock, 0);
 800f902:	2300      	movs	r3, #0
 800f904:	61bb      	str	r3, [r7, #24]
 800f906:	69bb      	ldr	r3, [r7, #24]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d002      	beq.n	800f912 <lwip_fcntl+0x56>
 800f90c:	4a3e      	ldr	r2, [pc, #248]	; (800fa08 <lwip_fcntl+0x14c>)
 800f90e:	69bb      	ldr	r3, [r7, #24]
 800f910:	6013      	str	r3, [r2, #0]

      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800f912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f91c:	2b10      	cmp	r3, #16
 800f91e:	d123      	bne.n	800f968 <lwip_fcntl+0xac>
#if LWIP_TCPIP_CORE_LOCKING
        LOCK_TCPIP_CORE();
 800f920:	483a      	ldr	r0, [pc, #232]	; (800fa0c <lwip_fcntl+0x150>)
 800f922:	f00b f943 	bl	801abac <sys_mutex_lock>
        /* the proper thing to do here would be to get into the tcpip_thread,
           but locking should be OK as well since we only *read* some flags */
        SYS_ARCH_PROTECT(lev);
#endif
#if LWIP_TCP
        if (sock->conn->pcb.tcp) {
 800f926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	685b      	ldr	r3, [r3, #4]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d017      	beq.n	800f960 <lwip_fcntl+0xa4>
          if (!(sock->conn->pcb.tcp->flags & TF_RXCLOSED)) {
 800f930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	685b      	ldr	r3, [r3, #4]
 800f936:	8b5b      	ldrh	r3, [r3, #26]
 800f938:	f003 0310 	and.w	r3, r3, #16
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d103      	bne.n	800f948 <lwip_fcntl+0x8c>
            op_mode |= O_RDONLY;
 800f940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f942:	f043 0302 	orr.w	r3, r3, #2
 800f946:	62bb      	str	r3, [r7, #40]	; 0x28
          }
          if (!(sock->conn->pcb.tcp->flags & TF_FIN)) {
 800f948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	685b      	ldr	r3, [r3, #4]
 800f94e:	8b5b      	ldrh	r3, [r3, #26]
 800f950:	f003 0320 	and.w	r3, r3, #32
 800f954:	2b00      	cmp	r3, #0
 800f956:	d103      	bne.n	800f960 <lwip_fcntl+0xa4>
            op_mode |= O_WRONLY;
 800f958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f95a:	f043 0304 	orr.w	r3, r3, #4
 800f95e:	62bb      	str	r3, [r7, #40]	; 0x28
          }
        }
#endif
#if LWIP_TCPIP_CORE_LOCKING
        UNLOCK_TCPIP_CORE();
 800f960:	482a      	ldr	r0, [pc, #168]	; (800fa0c <lwip_fcntl+0x150>)
 800f962:	f00b f932 	bl	801abca <sys_mutex_unlock>
 800f966:	e003      	b.n	800f970 <lwip_fcntl+0xb4>
#else
        SYS_ARCH_UNPROTECT(lev);
#endif
      } else {
        op_mode |= O_RDWR;
 800f968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f96a:	f043 0306 	orr.w	r3, r3, #6
 800f96e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* ensure O_RDWR for (O_RDONLY|O_WRONLY) != O_RDWR cases */
      ret |= (op_mode == (O_RDONLY | O_WRONLY)) ? O_RDWR : op_mode;
 800f970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f974:	4313      	orrs	r3, r2
 800f976:	62fb      	str	r3, [r7, #44]	; 0x2c

      break;
 800f978:	e040      	b.n	800f9fc <lwip_fcntl+0x140>
    case F_SETFL:
      /* Bits corresponding to the file access mode and the file creation flags [..] that are set in arg shall be ignored */
      val &= ~(O_RDONLY | O_WRONLY | O_RDWR);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f023 0306 	bic.w	r3, r3, #6
 800f980:	607b      	str	r3, [r7, #4]
      if ((val & ~O_NONBLOCK) == 0) {
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	f023 0301 	bic.w	r3, r3, #1
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d122      	bne.n	800f9d2 <lwip_fcntl+0x116>
        /* only O_NONBLOCK, all other bits are zero */
        netconn_set_nonblocking(sock->conn, val & O_NONBLOCK);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f003 0301 	and.w	r3, r3, #1
 800f992:	2b00      	cmp	r3, #0
 800f994:	d009      	beq.n	800f9aa <lwip_fcntl+0xee>
 800f996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	7f1a      	ldrb	r2, [r3, #28]
 800f99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	f042 0202 	orr.w	r2, r2, #2
 800f9a4:	b2d2      	uxtb	r2, r2
 800f9a6:	771a      	strb	r2, [r3, #28]
 800f9a8:	e008      	b.n	800f9bc <lwip_fcntl+0x100>
 800f9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	7f1a      	ldrb	r2, [r3, #28]
 800f9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	f022 0202 	bic.w	r2, r2, #2
 800f9b8:	b2d2      	uxtb	r2, r2
 800f9ba:	771a      	strb	r2, [r3, #28]
        ret = 0;
 800f9bc:	2300      	movs	r3, #0
 800f9be:	62fb      	str	r3, [r7, #44]	; 0x2c
        sock_set_errno(sock, 0);
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	61fb      	str	r3, [r7, #28]
 800f9c4:	69fb      	ldr	r3, [r7, #28]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d015      	beq.n	800f9f6 <lwip_fcntl+0x13a>
 800f9ca:	4a0f      	ldr	r2, [pc, #60]	; (800fa08 <lwip_fcntl+0x14c>)
 800f9cc:	69fb      	ldr	r3, [r7, #28]
 800f9ce:	6013      	str	r3, [r2, #0]
      } else {
        sock_set_errno(sock, ENOSYS); /* not yet implemented */
      }
      break;
 800f9d0:	e011      	b.n	800f9f6 <lwip_fcntl+0x13a>
        sock_set_errno(sock, ENOSYS); /* not yet implemented */
 800f9d2:	2326      	movs	r3, #38	; 0x26
 800f9d4:	623b      	str	r3, [r7, #32]
 800f9d6:	6a3b      	ldr	r3, [r7, #32]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d00c      	beq.n	800f9f6 <lwip_fcntl+0x13a>
 800f9dc:	4a0a      	ldr	r2, [pc, #40]	; (800fa08 <lwip_fcntl+0x14c>)
 800f9de:	6a3b      	ldr	r3, [r7, #32]
 800f9e0:	6013      	str	r3, [r2, #0]
      break;
 800f9e2:	e008      	b.n	800f9f6 <lwip_fcntl+0x13a>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_fcntl(%d, UNIMPL: %d, %d)\n", s, cmd, val));
      sock_set_errno(sock, ENOSYS); /* not yet implemented */
 800f9e4:	2326      	movs	r3, #38	; 0x26
 800f9e6:	617b      	str	r3, [r7, #20]
 800f9e8:	697b      	ldr	r3, [r7, #20]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d005      	beq.n	800f9fa <lwip_fcntl+0x13e>
 800f9ee:	4a06      	ldr	r2, [pc, #24]	; (800fa08 <lwip_fcntl+0x14c>)
 800f9f0:	697b      	ldr	r3, [r7, #20]
 800f9f2:	6013      	str	r3, [r2, #0]
      break;
 800f9f4:	e001      	b.n	800f9fa <lwip_fcntl+0x13e>
      break;
 800f9f6:	bf00      	nop
 800f9f8:	e000      	b.n	800f9fc <lwip_fcntl+0x140>
      break;
 800f9fa:	bf00      	nop
  }
  done_socket(sock);
  return ret;
 800f9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	3730      	adds	r7, #48	; 0x30
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}
 800fa06:	bf00      	nop
 800fa08:	200111e4 	.word	0x200111e4
 800fa0c:	2000d930 	.word	0x2000d930

0800fa10 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b084      	sub	sp, #16
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800fa1a:	f008 f96d 	bl	8017cf8 <sys_timeouts_sleeptime>
 800fa1e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa26:	d10b      	bne.n	800fa40 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800fa28:	4813      	ldr	r0, [pc, #76]	; (800fa78 <tcpip_timeouts_mbox_fetch+0x68>)
 800fa2a:	f00b f8ce 	bl	801abca <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800fa2e:	2200      	movs	r2, #0
 800fa30:	6839      	ldr	r1, [r7, #0]
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f00a ffa4 	bl	801a980 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800fa38:	480f      	ldr	r0, [pc, #60]	; (800fa78 <tcpip_timeouts_mbox_fetch+0x68>)
 800fa3a:	f00b f8b7 	bl	801abac <sys_mutex_lock>
    return;
 800fa3e:	e018      	b.n	800fa72 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d102      	bne.n	800fa4c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800fa46:	f008 f91d 	bl	8017c84 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800fa4a:	e7e6      	b.n	800fa1a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800fa4c:	480a      	ldr	r0, [pc, #40]	; (800fa78 <tcpip_timeouts_mbox_fetch+0x68>)
 800fa4e:	f00b f8bc 	bl	801abca <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800fa52:	68fa      	ldr	r2, [r7, #12]
 800fa54:	6839      	ldr	r1, [r7, #0]
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f00a ff92 	bl	801a980 <sys_arch_mbox_fetch>
 800fa5c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800fa5e:	4806      	ldr	r0, [pc, #24]	; (800fa78 <tcpip_timeouts_mbox_fetch+0x68>)
 800fa60:	f00b f8a4 	bl	801abac <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa6a:	d102      	bne.n	800fa72 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800fa6c:	f008 f90a 	bl	8017c84 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800fa70:	e7d3      	b.n	800fa1a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800fa72:	3710      	adds	r7, #16
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd80      	pop	{r7, pc}
 800fa78:	2000d930 	.word	0x2000d930

0800fa7c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b084      	sub	sp, #16
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800fa84:	4810      	ldr	r0, [pc, #64]	; (800fac8 <tcpip_thread+0x4c>)
 800fa86:	f00b f891 	bl	801abac <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800fa8a:	4b10      	ldr	r3, [pc, #64]	; (800facc <tcpip_thread+0x50>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d005      	beq.n	800fa9e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800fa92:	4b0e      	ldr	r3, [pc, #56]	; (800facc <tcpip_thread+0x50>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	4a0e      	ldr	r2, [pc, #56]	; (800fad0 <tcpip_thread+0x54>)
 800fa98:	6812      	ldr	r2, [r2, #0]
 800fa9a:	4610      	mov	r0, r2
 800fa9c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800fa9e:	f107 030c 	add.w	r3, r7, #12
 800faa2:	4619      	mov	r1, r3
 800faa4:	480b      	ldr	r0, [pc, #44]	; (800fad4 <tcpip_thread+0x58>)
 800faa6:	f7ff ffb3 	bl	800fa10 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d106      	bne.n	800fabe <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800fab0:	4b09      	ldr	r3, [pc, #36]	; (800fad8 <tcpip_thread+0x5c>)
 800fab2:	2291      	movs	r2, #145	; 0x91
 800fab4:	4909      	ldr	r1, [pc, #36]	; (800fadc <tcpip_thread+0x60>)
 800fab6:	480a      	ldr	r0, [pc, #40]	; (800fae0 <tcpip_thread+0x64>)
 800fab8:	f00b f91c 	bl	801acf4 <iprintf>
      continue;
 800fabc:	e003      	b.n	800fac6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	4618      	mov	r0, r3
 800fac2:	f000 f80f 	bl	800fae4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800fac6:	e7ea      	b.n	800fa9e <tcpip_thread+0x22>
 800fac8:	2000d930 	.word	0x2000d930
 800facc:	2000d924 	.word	0x2000d924
 800fad0:	2000d928 	.word	0x2000d928
 800fad4:	2000d92c 	.word	0x2000d92c
 800fad8:	0801ce9c 	.word	0x0801ce9c
 800fadc:	0801cecc 	.word	0x0801cecc
 800fae0:	0801ceec 	.word	0x0801ceec

0800fae4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b082      	sub	sp, #8
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	781b      	ldrb	r3, [r3, #0]
 800faf0:	2b02      	cmp	r3, #2
 800faf2:	d026      	beq.n	800fb42 <tcpip_thread_handle_msg+0x5e>
 800faf4:	2b02      	cmp	r3, #2
 800faf6:	dc2b      	bgt.n	800fb50 <tcpip_thread_handle_msg+0x6c>
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d002      	beq.n	800fb02 <tcpip_thread_handle_msg+0x1e>
 800fafc:	2b01      	cmp	r3, #1
 800fafe:	d015      	beq.n	800fb2c <tcpip_thread_handle_msg+0x48>
 800fb00:	e026      	b.n	800fb50 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	68db      	ldr	r3, [r3, #12]
 800fb06:	687a      	ldr	r2, [r7, #4]
 800fb08:	6850      	ldr	r0, [r2, #4]
 800fb0a:	687a      	ldr	r2, [r7, #4]
 800fb0c:	6892      	ldr	r2, [r2, #8]
 800fb0e:	4611      	mov	r1, r2
 800fb10:	4798      	blx	r3
 800fb12:	4603      	mov	r3, r0
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d004      	beq.n	800fb22 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	685b      	ldr	r3, [r3, #4]
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f001 fd53 	bl	80115c8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800fb22:	6879      	ldr	r1, [r7, #4]
 800fb24:	2009      	movs	r0, #9
 800fb26:	f000 fe79 	bl	801081c <memp_free>
      break;
 800fb2a:	e018      	b.n	800fb5e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	685b      	ldr	r3, [r3, #4]
 800fb30:	687a      	ldr	r2, [r7, #4]
 800fb32:	6892      	ldr	r2, [r2, #8]
 800fb34:	4610      	mov	r0, r2
 800fb36:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800fb38:	6879      	ldr	r1, [r7, #4]
 800fb3a:	2008      	movs	r0, #8
 800fb3c:	f000 fe6e 	bl	801081c <memp_free>
      break;
 800fb40:	e00d      	b.n	800fb5e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	685b      	ldr	r3, [r3, #4]
 800fb46:	687a      	ldr	r2, [r7, #4]
 800fb48:	6892      	ldr	r2, [r2, #8]
 800fb4a:	4610      	mov	r0, r2
 800fb4c:	4798      	blx	r3
      break;
 800fb4e:	e006      	b.n	800fb5e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800fb50:	4b05      	ldr	r3, [pc, #20]	; (800fb68 <tcpip_thread_handle_msg+0x84>)
 800fb52:	22cf      	movs	r2, #207	; 0xcf
 800fb54:	4905      	ldr	r1, [pc, #20]	; (800fb6c <tcpip_thread_handle_msg+0x88>)
 800fb56:	4806      	ldr	r0, [pc, #24]	; (800fb70 <tcpip_thread_handle_msg+0x8c>)
 800fb58:	f00b f8cc 	bl	801acf4 <iprintf>
      break;
 800fb5c:	bf00      	nop
  }
}
 800fb5e:	bf00      	nop
 800fb60:	3708      	adds	r7, #8
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}
 800fb66:	bf00      	nop
 800fb68:	0801ce9c 	.word	0x0801ce9c
 800fb6c:	0801cecc 	.word	0x0801cecc
 800fb70:	0801ceec 	.word	0x0801ceec

0800fb74 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b086      	sub	sp, #24
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	60f8      	str	r0, [r7, #12]
 800fb7c:	60b9      	str	r1, [r7, #8]
 800fb7e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800fb80:	481a      	ldr	r0, [pc, #104]	; (800fbec <tcpip_inpkt+0x78>)
 800fb82:	f00a ff45 	bl	801aa10 <sys_mbox_valid>
 800fb86:	4603      	mov	r3, r0
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d105      	bne.n	800fb98 <tcpip_inpkt+0x24>
 800fb8c:	4b18      	ldr	r3, [pc, #96]	; (800fbf0 <tcpip_inpkt+0x7c>)
 800fb8e:	22fc      	movs	r2, #252	; 0xfc
 800fb90:	4918      	ldr	r1, [pc, #96]	; (800fbf4 <tcpip_inpkt+0x80>)
 800fb92:	4819      	ldr	r0, [pc, #100]	; (800fbf8 <tcpip_inpkt+0x84>)
 800fb94:	f00b f8ae 	bl	801acf4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800fb98:	2009      	movs	r0, #9
 800fb9a:	f000 fdc9 	bl	8010730 <memp_malloc>
 800fb9e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800fba0:	697b      	ldr	r3, [r7, #20]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d102      	bne.n	800fbac <tcpip_inpkt+0x38>
    return ERR_MEM;
 800fba6:	f04f 33ff 	mov.w	r3, #4294967295
 800fbaa:	e01a      	b.n	800fbe2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	2200      	movs	r2, #0
 800fbb0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	68fa      	ldr	r2, [r7, #12]
 800fbb6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	68ba      	ldr	r2, [r7, #8]
 800fbbc:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	687a      	ldr	r2, [r7, #4]
 800fbc2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800fbc4:	6979      	ldr	r1, [r7, #20]
 800fbc6:	4809      	ldr	r0, [pc, #36]	; (800fbec <tcpip_inpkt+0x78>)
 800fbc8:	f00a fec0 	bl	801a94c <sys_mbox_trypost>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d006      	beq.n	800fbe0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800fbd2:	6979      	ldr	r1, [r7, #20]
 800fbd4:	2009      	movs	r0, #9
 800fbd6:	f000 fe21 	bl	801081c <memp_free>
    return ERR_MEM;
 800fbda:	f04f 33ff 	mov.w	r3, #4294967295
 800fbde:	e000      	b.n	800fbe2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800fbe0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	3718      	adds	r7, #24
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
 800fbea:	bf00      	nop
 800fbec:	2000d92c 	.word	0x2000d92c
 800fbf0:	0801ce9c 	.word	0x0801ce9c
 800fbf4:	0801cf14 	.word	0x0801cf14
 800fbf8:	0801ceec 	.word	0x0801ceec

0800fbfc <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b082      	sub	sp, #8
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
 800fc04:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800fc06:	683b      	ldr	r3, [r7, #0]
 800fc08:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc0c:	f003 0318 	and.w	r3, r3, #24
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d006      	beq.n	800fc22 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800fc14:	4a08      	ldr	r2, [pc, #32]	; (800fc38 <tcpip_input+0x3c>)
 800fc16:	6839      	ldr	r1, [r7, #0]
 800fc18:	6878      	ldr	r0, [r7, #4]
 800fc1a:	f7ff ffab 	bl	800fb74 <tcpip_inpkt>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	e005      	b.n	800fc2e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800fc22:	4a06      	ldr	r2, [pc, #24]	; (800fc3c <tcpip_input+0x40>)
 800fc24:	6839      	ldr	r1, [r7, #0]
 800fc26:	6878      	ldr	r0, [r7, #4]
 800fc28:	f7ff ffa4 	bl	800fb74 <tcpip_inpkt>
 800fc2c:	4603      	mov	r3, r0
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3708      	adds	r7, #8
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}
 800fc36:	bf00      	nop
 800fc38:	0801a749 	.word	0x0801a749
 800fc3c:	08019651 	.word	0x08019651

0800fc40 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b084      	sub	sp, #16
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
 800fc48:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800fc4a:	4819      	ldr	r0, [pc, #100]	; (800fcb0 <tcpip_try_callback+0x70>)
 800fc4c:	f00a fee0 	bl	801aa10 <sys_mbox_valid>
 800fc50:	4603      	mov	r3, r0
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d106      	bne.n	800fc64 <tcpip_try_callback+0x24>
 800fc56:	4b17      	ldr	r3, [pc, #92]	; (800fcb4 <tcpip_try_callback+0x74>)
 800fc58:	f240 125d 	movw	r2, #349	; 0x15d
 800fc5c:	4916      	ldr	r1, [pc, #88]	; (800fcb8 <tcpip_try_callback+0x78>)
 800fc5e:	4817      	ldr	r0, [pc, #92]	; (800fcbc <tcpip_try_callback+0x7c>)
 800fc60:	f00b f848 	bl	801acf4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800fc64:	2008      	movs	r0, #8
 800fc66:	f000 fd63 	bl	8010730 <memp_malloc>
 800fc6a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d102      	bne.n	800fc78 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800fc72:	f04f 33ff 	mov.w	r3, #4294967295
 800fc76:	e017      	b.n	800fca8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	687a      	ldr	r2, [r7, #4]
 800fc82:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	683a      	ldr	r2, [r7, #0]
 800fc88:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800fc8a:	68f9      	ldr	r1, [r7, #12]
 800fc8c:	4808      	ldr	r0, [pc, #32]	; (800fcb0 <tcpip_try_callback+0x70>)
 800fc8e:	f00a fe5d 	bl	801a94c <sys_mbox_trypost>
 800fc92:	4603      	mov	r3, r0
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d006      	beq.n	800fca6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800fc98:	68f9      	ldr	r1, [r7, #12]
 800fc9a:	2008      	movs	r0, #8
 800fc9c:	f000 fdbe 	bl	801081c <memp_free>
    return ERR_MEM;
 800fca0:	f04f 33ff 	mov.w	r3, #4294967295
 800fca4:	e000      	b.n	800fca8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800fca6:	2300      	movs	r3, #0
}
 800fca8:	4618      	mov	r0, r3
 800fcaa:	3710      	adds	r7, #16
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}
 800fcb0:	2000d92c 	.word	0x2000d92c
 800fcb4:	0801ce9c 	.word	0x0801ce9c
 800fcb8:	0801cf14 	.word	0x0801cf14
 800fcbc:	0801ceec 	.word	0x0801ceec

0800fcc0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b084      	sub	sp, #16
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	60f8      	str	r0, [r7, #12]
 800fcc8:	60b9      	str	r1, [r7, #8]
 800fcca:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800fccc:	4806      	ldr	r0, [pc, #24]	; (800fce8 <tcpip_send_msg_wait_sem+0x28>)
 800fcce:	f00a ff6d 	bl	801abac <sys_mutex_lock>
  fn(apimsg);
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	68b8      	ldr	r0, [r7, #8]
 800fcd6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800fcd8:	4803      	ldr	r0, [pc, #12]	; (800fce8 <tcpip_send_msg_wait_sem+0x28>)
 800fcda:	f00a ff76 	bl	801abca <sys_mutex_unlock>
  return ERR_OK;
 800fcde:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800fce0:	4618      	mov	r0, r3
 800fce2:	3710      	adds	r7, #16
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}
 800fce8:	2000d930 	.word	0x2000d930

0800fcec <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b084      	sub	sp, #16
 800fcf0:	af02      	add	r7, sp, #8
 800fcf2:	6078      	str	r0, [r7, #4]
 800fcf4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800fcf6:	f000 f871 	bl	800fddc <lwip_init>

  tcpip_init_done = initfunc;
 800fcfa:	4a17      	ldr	r2, [pc, #92]	; (800fd58 <tcpip_init+0x6c>)
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800fd00:	4a16      	ldr	r2, [pc, #88]	; (800fd5c <tcpip_init+0x70>)
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800fd06:	2106      	movs	r1, #6
 800fd08:	4815      	ldr	r0, [pc, #84]	; (800fd60 <tcpip_init+0x74>)
 800fd0a:	f00a fdf3 	bl	801a8f4 <sys_mbox_new>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d006      	beq.n	800fd22 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800fd14:	4b13      	ldr	r3, [pc, #76]	; (800fd64 <tcpip_init+0x78>)
 800fd16:	f240 2261 	movw	r2, #609	; 0x261
 800fd1a:	4913      	ldr	r1, [pc, #76]	; (800fd68 <tcpip_init+0x7c>)
 800fd1c:	4813      	ldr	r0, [pc, #76]	; (800fd6c <tcpip_init+0x80>)
 800fd1e:	f00a ffe9 	bl	801acf4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800fd22:	4813      	ldr	r0, [pc, #76]	; (800fd70 <tcpip_init+0x84>)
 800fd24:	f00a ff2c 	bl	801ab80 <sys_mutex_new>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d006      	beq.n	800fd3c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800fd2e:	4b0d      	ldr	r3, [pc, #52]	; (800fd64 <tcpip_init+0x78>)
 800fd30:	f240 2265 	movw	r2, #613	; 0x265
 800fd34:	490f      	ldr	r1, [pc, #60]	; (800fd74 <tcpip_init+0x88>)
 800fd36:	480d      	ldr	r0, [pc, #52]	; (800fd6c <tcpip_init+0x80>)
 800fd38:	f00a ffdc 	bl	801acf4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800fd3c:	2318      	movs	r3, #24
 800fd3e:	9300      	str	r3, [sp, #0]
 800fd40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fd44:	2200      	movs	r2, #0
 800fd46:	490c      	ldr	r1, [pc, #48]	; (800fd78 <tcpip_init+0x8c>)
 800fd48:	480c      	ldr	r0, [pc, #48]	; (800fd7c <tcpip_init+0x90>)
 800fd4a:	f00a ff4b 	bl	801abe4 <sys_thread_new>
}
 800fd4e:	bf00      	nop
 800fd50:	3708      	adds	r7, #8
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
 800fd56:	bf00      	nop
 800fd58:	2000d924 	.word	0x2000d924
 800fd5c:	2000d928 	.word	0x2000d928
 800fd60:	2000d92c 	.word	0x2000d92c
 800fd64:	0801ce9c 	.word	0x0801ce9c
 800fd68:	0801cf24 	.word	0x0801cf24
 800fd6c:	0801ceec 	.word	0x0801ceec
 800fd70:	2000d930 	.word	0x2000d930
 800fd74:	0801cf48 	.word	0x0801cf48
 800fd78:	0800fa7d 	.word	0x0800fa7d
 800fd7c:	0801cf6c 	.word	0x0801cf6c

0800fd80 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800fd80:	b480      	push	{r7}
 800fd82:	b083      	sub	sp, #12
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	4603      	mov	r3, r0
 800fd88:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800fd8a:	88fb      	ldrh	r3, [r7, #6]
 800fd8c:	021b      	lsls	r3, r3, #8
 800fd8e:	b21a      	sxth	r2, r3
 800fd90:	88fb      	ldrh	r3, [r7, #6]
 800fd92:	0a1b      	lsrs	r3, r3, #8
 800fd94:	b29b      	uxth	r3, r3
 800fd96:	b21b      	sxth	r3, r3
 800fd98:	4313      	orrs	r3, r2
 800fd9a:	b21b      	sxth	r3, r3
 800fd9c:	b29b      	uxth	r3, r3
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	370c      	adds	r7, #12
 800fda2:	46bd      	mov	sp, r7
 800fda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda8:	4770      	bx	lr

0800fdaa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800fdaa:	b480      	push	{r7}
 800fdac:	b083      	sub	sp, #12
 800fdae:	af00      	add	r7, sp, #0
 800fdb0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	061a      	lsls	r2, r3, #24
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	021b      	lsls	r3, r3, #8
 800fdba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fdbe:	431a      	orrs	r2, r3
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	0a1b      	lsrs	r3, r3, #8
 800fdc4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fdc8:	431a      	orrs	r2, r3
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	0e1b      	lsrs	r3, r3, #24
 800fdce:	4313      	orrs	r3, r2
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	370c      	adds	r7, #12
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdda:	4770      	bx	lr

0800fddc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b082      	sub	sp, #8
 800fde0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800fde2:	2300      	movs	r3, #0
 800fde4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800fde6:	f00a febf 	bl	801ab68 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800fdea:	f000 f8d5 	bl	800ff98 <mem_init>
  memp_init();
 800fdee:	f000 fc31 	bl	8010654 <memp_init>
  pbuf_init();
  netif_init();
 800fdf2:	f000 fd3d 	bl	8010870 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800fdf6:	f007 ffb7 	bl	8017d68 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800fdfa:	f001 fe7f 	bl	8011afc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800fdfe:	f007 fef9 	bl	8017bf4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800fe02:	bf00      	nop
 800fe04:	3708      	adds	r7, #8
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}
	...

0800fe0c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800fe0c:	b480      	push	{r7}
 800fe0e:	b083      	sub	sp, #12
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	4603      	mov	r3, r0
 800fe14:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800fe16:	4b05      	ldr	r3, [pc, #20]	; (800fe2c <ptr_to_mem+0x20>)
 800fe18:	681a      	ldr	r2, [r3, #0]
 800fe1a:	88fb      	ldrh	r3, [r7, #6]
 800fe1c:	4413      	add	r3, r2
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	370c      	adds	r7, #12
 800fe22:	46bd      	mov	sp, r7
 800fe24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe28:	4770      	bx	lr
 800fe2a:	bf00      	nop
 800fe2c:	2000dfa0 	.word	0x2000dfa0

0800fe30 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800fe30:	b480      	push	{r7}
 800fe32:	b083      	sub	sp, #12
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800fe38:	4b05      	ldr	r3, [pc, #20]	; (800fe50 <mem_to_ptr+0x20>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	687a      	ldr	r2, [r7, #4]
 800fe3e:	1ad3      	subs	r3, r2, r3
 800fe40:	b29b      	uxth	r3, r3
}
 800fe42:	4618      	mov	r0, r3
 800fe44:	370c      	adds	r7, #12
 800fe46:	46bd      	mov	sp, r7
 800fe48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4c:	4770      	bx	lr
 800fe4e:	bf00      	nop
 800fe50:	2000dfa0 	.word	0x2000dfa0

0800fe54 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800fe54:	b590      	push	{r4, r7, lr}
 800fe56:	b085      	sub	sp, #20
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800fe5c:	4b45      	ldr	r3, [pc, #276]	; (800ff74 <plug_holes+0x120>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	687a      	ldr	r2, [r7, #4]
 800fe62:	429a      	cmp	r2, r3
 800fe64:	d206      	bcs.n	800fe74 <plug_holes+0x20>
 800fe66:	4b44      	ldr	r3, [pc, #272]	; (800ff78 <plug_holes+0x124>)
 800fe68:	f240 12df 	movw	r2, #479	; 0x1df
 800fe6c:	4943      	ldr	r1, [pc, #268]	; (800ff7c <plug_holes+0x128>)
 800fe6e:	4844      	ldr	r0, [pc, #272]	; (800ff80 <plug_holes+0x12c>)
 800fe70:	f00a ff40 	bl	801acf4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800fe74:	4b43      	ldr	r3, [pc, #268]	; (800ff84 <plug_holes+0x130>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	687a      	ldr	r2, [r7, #4]
 800fe7a:	429a      	cmp	r2, r3
 800fe7c:	d306      	bcc.n	800fe8c <plug_holes+0x38>
 800fe7e:	4b3e      	ldr	r3, [pc, #248]	; (800ff78 <plug_holes+0x124>)
 800fe80:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800fe84:	4940      	ldr	r1, [pc, #256]	; (800ff88 <plug_holes+0x134>)
 800fe86:	483e      	ldr	r0, [pc, #248]	; (800ff80 <plug_holes+0x12c>)
 800fe88:	f00a ff34 	bl	801acf4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	791b      	ldrb	r3, [r3, #4]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d006      	beq.n	800fea2 <plug_holes+0x4e>
 800fe94:	4b38      	ldr	r3, [pc, #224]	; (800ff78 <plug_holes+0x124>)
 800fe96:	f240 12e1 	movw	r2, #481	; 0x1e1
 800fe9a:	493c      	ldr	r1, [pc, #240]	; (800ff8c <plug_holes+0x138>)
 800fe9c:	4838      	ldr	r0, [pc, #224]	; (800ff80 <plug_holes+0x12c>)
 800fe9e:	f00a ff29 	bl	801acf4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	881b      	ldrh	r3, [r3, #0]
 800fea6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800feaa:	d906      	bls.n	800feba <plug_holes+0x66>
 800feac:	4b32      	ldr	r3, [pc, #200]	; (800ff78 <plug_holes+0x124>)
 800feae:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800feb2:	4937      	ldr	r1, [pc, #220]	; (800ff90 <plug_holes+0x13c>)
 800feb4:	4832      	ldr	r0, [pc, #200]	; (800ff80 <plug_holes+0x12c>)
 800feb6:	f00a ff1d 	bl	801acf4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	881b      	ldrh	r3, [r3, #0]
 800febe:	4618      	mov	r0, r3
 800fec0:	f7ff ffa4 	bl	800fe0c <ptr_to_mem>
 800fec4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800fec6:	687a      	ldr	r2, [r7, #4]
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	429a      	cmp	r2, r3
 800fecc:	d024      	beq.n	800ff18 <plug_holes+0xc4>
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	791b      	ldrb	r3, [r3, #4]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d120      	bne.n	800ff18 <plug_holes+0xc4>
 800fed6:	4b2b      	ldr	r3, [pc, #172]	; (800ff84 <plug_holes+0x130>)
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	68fa      	ldr	r2, [r7, #12]
 800fedc:	429a      	cmp	r2, r3
 800fede:	d01b      	beq.n	800ff18 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800fee0:	4b2c      	ldr	r3, [pc, #176]	; (800ff94 <plug_holes+0x140>)
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	68fa      	ldr	r2, [r7, #12]
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d102      	bne.n	800fef0 <plug_holes+0x9c>
      lfree = mem;
 800feea:	4a2a      	ldr	r2, [pc, #168]	; (800ff94 <plug_holes+0x140>)
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	881a      	ldrh	r2, [r3, #0]
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	881b      	ldrh	r3, [r3, #0]
 800fefc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ff00:	d00a      	beq.n	800ff18 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	881b      	ldrh	r3, [r3, #0]
 800ff06:	4618      	mov	r0, r3
 800ff08:	f7ff ff80 	bl	800fe0c <ptr_to_mem>
 800ff0c:	4604      	mov	r4, r0
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f7ff ff8e 	bl	800fe30 <mem_to_ptr>
 800ff14:	4603      	mov	r3, r0
 800ff16:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	885b      	ldrh	r3, [r3, #2]
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f7ff ff75 	bl	800fe0c <ptr_to_mem>
 800ff22:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ff24:	68ba      	ldr	r2, [r7, #8]
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	429a      	cmp	r2, r3
 800ff2a:	d01f      	beq.n	800ff6c <plug_holes+0x118>
 800ff2c:	68bb      	ldr	r3, [r7, #8]
 800ff2e:	791b      	ldrb	r3, [r3, #4]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d11b      	bne.n	800ff6c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ff34:	4b17      	ldr	r3, [pc, #92]	; (800ff94 <plug_holes+0x140>)
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	687a      	ldr	r2, [r7, #4]
 800ff3a:	429a      	cmp	r2, r3
 800ff3c:	d102      	bne.n	800ff44 <plug_holes+0xf0>
      lfree = pmem;
 800ff3e:	4a15      	ldr	r2, [pc, #84]	; (800ff94 <plug_holes+0x140>)
 800ff40:	68bb      	ldr	r3, [r7, #8]
 800ff42:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	881a      	ldrh	r2, [r3, #0]
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	881b      	ldrh	r3, [r3, #0]
 800ff50:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ff54:	d00a      	beq.n	800ff6c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	881b      	ldrh	r3, [r3, #0]
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f7ff ff56 	bl	800fe0c <ptr_to_mem>
 800ff60:	4604      	mov	r4, r0
 800ff62:	68b8      	ldr	r0, [r7, #8]
 800ff64:	f7ff ff64 	bl	800fe30 <mem_to_ptr>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ff6c:	bf00      	nop
 800ff6e:	3714      	adds	r7, #20
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd90      	pop	{r4, r7, pc}
 800ff74:	2000dfa0 	.word	0x2000dfa0
 800ff78:	0801cf7c 	.word	0x0801cf7c
 800ff7c:	0801cfac 	.word	0x0801cfac
 800ff80:	0801cfc4 	.word	0x0801cfc4
 800ff84:	2000dfa4 	.word	0x2000dfa4
 800ff88:	0801cfec 	.word	0x0801cfec
 800ff8c:	0801d008 	.word	0x0801d008
 800ff90:	0801d024 	.word	0x0801d024
 800ff94:	2000dfac 	.word	0x2000dfac

0800ff98 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b082      	sub	sp, #8
 800ff9c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ff9e:	4b1f      	ldr	r3, [pc, #124]	; (801001c <mem_init+0x84>)
 800ffa0:	3303      	adds	r3, #3
 800ffa2:	f023 0303 	bic.w	r3, r3, #3
 800ffa6:	461a      	mov	r2, r3
 800ffa8:	4b1d      	ldr	r3, [pc, #116]	; (8010020 <mem_init+0x88>)
 800ffaa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ffac:	4b1c      	ldr	r3, [pc, #112]	; (8010020 <mem_init+0x88>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ffb8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ffc6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800ffca:	f7ff ff1f 	bl	800fe0c <ptr_to_mem>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	4a14      	ldr	r2, [pc, #80]	; (8010024 <mem_init+0x8c>)
 800ffd2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ffd4:	4b13      	ldr	r3, [pc, #76]	; (8010024 <mem_init+0x8c>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	2201      	movs	r2, #1
 800ffda:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ffdc:	4b11      	ldr	r3, [pc, #68]	; (8010024 <mem_init+0x8c>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ffe4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ffe6:	4b0f      	ldr	r3, [pc, #60]	; (8010024 <mem_init+0x8c>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ffee:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800fff0:	4b0b      	ldr	r3, [pc, #44]	; (8010020 <mem_init+0x88>)
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	4a0c      	ldr	r2, [pc, #48]	; (8010028 <mem_init+0x90>)
 800fff6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800fff8:	480c      	ldr	r0, [pc, #48]	; (801002c <mem_init+0x94>)
 800fffa:	f00a fdc1 	bl	801ab80 <sys_mutex_new>
 800fffe:	4603      	mov	r3, r0
 8010000:	2b00      	cmp	r3, #0
 8010002:	d006      	beq.n	8010012 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8010004:	4b0a      	ldr	r3, [pc, #40]	; (8010030 <mem_init+0x98>)
 8010006:	f240 221f 	movw	r2, #543	; 0x21f
 801000a:	490a      	ldr	r1, [pc, #40]	; (8010034 <mem_init+0x9c>)
 801000c:	480a      	ldr	r0, [pc, #40]	; (8010038 <mem_init+0xa0>)
 801000e:	f00a fe71 	bl	801acf4 <iprintf>
  }
}
 8010012:	bf00      	nop
 8010014:	3708      	adds	r7, #8
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}
 801001a:	bf00      	nop
 801001c:	2000d94c 	.word	0x2000d94c
 8010020:	2000dfa0 	.word	0x2000dfa0
 8010024:	2000dfa4 	.word	0x2000dfa4
 8010028:	2000dfac 	.word	0x2000dfac
 801002c:	2000dfa8 	.word	0x2000dfa8
 8010030:	0801cf7c 	.word	0x0801cf7c
 8010034:	0801d050 	.word	0x0801d050
 8010038:	0801cfc4 	.word	0x0801cfc4

0801003c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b086      	sub	sp, #24
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f7ff fef3 	bl	800fe30 <mem_to_ptr>
 801004a:	4603      	mov	r3, r0
 801004c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	881b      	ldrh	r3, [r3, #0]
 8010052:	4618      	mov	r0, r3
 8010054:	f7ff feda 	bl	800fe0c <ptr_to_mem>
 8010058:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	885b      	ldrh	r3, [r3, #2]
 801005e:	4618      	mov	r0, r3
 8010060:	f7ff fed4 	bl	800fe0c <ptr_to_mem>
 8010064:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	881b      	ldrh	r3, [r3, #0]
 801006a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801006e:	d818      	bhi.n	80100a2 <mem_link_valid+0x66>
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	885b      	ldrh	r3, [r3, #2]
 8010074:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010078:	d813      	bhi.n	80100a2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801007e:	8afa      	ldrh	r2, [r7, #22]
 8010080:	429a      	cmp	r2, r3
 8010082:	d004      	beq.n	801008e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	881b      	ldrh	r3, [r3, #0]
 8010088:	8afa      	ldrh	r2, [r7, #22]
 801008a:	429a      	cmp	r2, r3
 801008c:	d109      	bne.n	80100a2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801008e:	4b08      	ldr	r3, [pc, #32]	; (80100b0 <mem_link_valid+0x74>)
 8010090:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010092:	693a      	ldr	r2, [r7, #16]
 8010094:	429a      	cmp	r2, r3
 8010096:	d006      	beq.n	80100a6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010098:	693b      	ldr	r3, [r7, #16]
 801009a:	885b      	ldrh	r3, [r3, #2]
 801009c:	8afa      	ldrh	r2, [r7, #22]
 801009e:	429a      	cmp	r2, r3
 80100a0:	d001      	beq.n	80100a6 <mem_link_valid+0x6a>
    return 0;
 80100a2:	2300      	movs	r3, #0
 80100a4:	e000      	b.n	80100a8 <mem_link_valid+0x6c>
  }
  return 1;
 80100a6:	2301      	movs	r3, #1
}
 80100a8:	4618      	mov	r0, r3
 80100aa:	3718      	adds	r7, #24
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd80      	pop	{r7, pc}
 80100b0:	2000dfa4 	.word	0x2000dfa4

080100b4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b088      	sub	sp, #32
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d070      	beq.n	80101a4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f003 0303 	and.w	r3, r3, #3
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d00d      	beq.n	80100e8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80100cc:	4b37      	ldr	r3, [pc, #220]	; (80101ac <mem_free+0xf8>)
 80100ce:	f240 2273 	movw	r2, #627	; 0x273
 80100d2:	4937      	ldr	r1, [pc, #220]	; (80101b0 <mem_free+0xfc>)
 80100d4:	4837      	ldr	r0, [pc, #220]	; (80101b4 <mem_free+0x100>)
 80100d6:	f00a fe0d 	bl	801acf4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80100da:	f00a fda3 	bl	801ac24 <sys_arch_protect>
 80100de:	60f8      	str	r0, [r7, #12]
 80100e0:	68f8      	ldr	r0, [r7, #12]
 80100e2:	f00a fdad 	bl	801ac40 <sys_arch_unprotect>
    return;
 80100e6:	e05e      	b.n	80101a6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	3b08      	subs	r3, #8
 80100ec:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80100ee:	4b32      	ldr	r3, [pc, #200]	; (80101b8 <mem_free+0x104>)
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	69fa      	ldr	r2, [r7, #28]
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d306      	bcc.n	8010106 <mem_free+0x52>
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	f103 020c 	add.w	r2, r3, #12
 80100fe:	4b2f      	ldr	r3, [pc, #188]	; (80101bc <mem_free+0x108>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	429a      	cmp	r2, r3
 8010104:	d90d      	bls.n	8010122 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8010106:	4b29      	ldr	r3, [pc, #164]	; (80101ac <mem_free+0xf8>)
 8010108:	f240 227f 	movw	r2, #639	; 0x27f
 801010c:	492c      	ldr	r1, [pc, #176]	; (80101c0 <mem_free+0x10c>)
 801010e:	4829      	ldr	r0, [pc, #164]	; (80101b4 <mem_free+0x100>)
 8010110:	f00a fdf0 	bl	801acf4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010114:	f00a fd86 	bl	801ac24 <sys_arch_protect>
 8010118:	6138      	str	r0, [r7, #16]
 801011a:	6938      	ldr	r0, [r7, #16]
 801011c:	f00a fd90 	bl	801ac40 <sys_arch_unprotect>
    return;
 8010120:	e041      	b.n	80101a6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010122:	4828      	ldr	r0, [pc, #160]	; (80101c4 <mem_free+0x110>)
 8010124:	f00a fd42 	bl	801abac <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8010128:	69fb      	ldr	r3, [r7, #28]
 801012a:	791b      	ldrb	r3, [r3, #4]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d110      	bne.n	8010152 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8010130:	4b1e      	ldr	r3, [pc, #120]	; (80101ac <mem_free+0xf8>)
 8010132:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8010136:	4924      	ldr	r1, [pc, #144]	; (80101c8 <mem_free+0x114>)
 8010138:	481e      	ldr	r0, [pc, #120]	; (80101b4 <mem_free+0x100>)
 801013a:	f00a fddb 	bl	801acf4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801013e:	4821      	ldr	r0, [pc, #132]	; (80101c4 <mem_free+0x110>)
 8010140:	f00a fd43 	bl	801abca <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010144:	f00a fd6e 	bl	801ac24 <sys_arch_protect>
 8010148:	6178      	str	r0, [r7, #20]
 801014a:	6978      	ldr	r0, [r7, #20]
 801014c:	f00a fd78 	bl	801ac40 <sys_arch_unprotect>
    return;
 8010150:	e029      	b.n	80101a6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8010152:	69f8      	ldr	r0, [r7, #28]
 8010154:	f7ff ff72 	bl	801003c <mem_link_valid>
 8010158:	4603      	mov	r3, r0
 801015a:	2b00      	cmp	r3, #0
 801015c:	d110      	bne.n	8010180 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801015e:	4b13      	ldr	r3, [pc, #76]	; (80101ac <mem_free+0xf8>)
 8010160:	f240 2295 	movw	r2, #661	; 0x295
 8010164:	4919      	ldr	r1, [pc, #100]	; (80101cc <mem_free+0x118>)
 8010166:	4813      	ldr	r0, [pc, #76]	; (80101b4 <mem_free+0x100>)
 8010168:	f00a fdc4 	bl	801acf4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801016c:	4815      	ldr	r0, [pc, #84]	; (80101c4 <mem_free+0x110>)
 801016e:	f00a fd2c 	bl	801abca <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010172:	f00a fd57 	bl	801ac24 <sys_arch_protect>
 8010176:	61b8      	str	r0, [r7, #24]
 8010178:	69b8      	ldr	r0, [r7, #24]
 801017a:	f00a fd61 	bl	801ac40 <sys_arch_unprotect>
    return;
 801017e:	e012      	b.n	80101a6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8010180:	69fb      	ldr	r3, [r7, #28]
 8010182:	2200      	movs	r2, #0
 8010184:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8010186:	4b12      	ldr	r3, [pc, #72]	; (80101d0 <mem_free+0x11c>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	69fa      	ldr	r2, [r7, #28]
 801018c:	429a      	cmp	r2, r3
 801018e:	d202      	bcs.n	8010196 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8010190:	4a0f      	ldr	r2, [pc, #60]	; (80101d0 <mem_free+0x11c>)
 8010192:	69fb      	ldr	r3, [r7, #28]
 8010194:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8010196:	69f8      	ldr	r0, [r7, #28]
 8010198:	f7ff fe5c 	bl	800fe54 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801019c:	4809      	ldr	r0, [pc, #36]	; (80101c4 <mem_free+0x110>)
 801019e:	f00a fd14 	bl	801abca <sys_mutex_unlock>
 80101a2:	e000      	b.n	80101a6 <mem_free+0xf2>
    return;
 80101a4:	bf00      	nop
}
 80101a6:	3720      	adds	r7, #32
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bd80      	pop	{r7, pc}
 80101ac:	0801cf7c 	.word	0x0801cf7c
 80101b0:	0801d06c 	.word	0x0801d06c
 80101b4:	0801cfc4 	.word	0x0801cfc4
 80101b8:	2000dfa0 	.word	0x2000dfa0
 80101bc:	2000dfa4 	.word	0x2000dfa4
 80101c0:	0801d090 	.word	0x0801d090
 80101c4:	2000dfa8 	.word	0x2000dfa8
 80101c8:	0801d0ac 	.word	0x0801d0ac
 80101cc:	0801d0d4 	.word	0x0801d0d4
 80101d0:	2000dfac 	.word	0x2000dfac

080101d4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b088      	sub	sp, #32
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	460b      	mov	r3, r1
 80101de:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80101e0:	887b      	ldrh	r3, [r7, #2]
 80101e2:	3303      	adds	r3, #3
 80101e4:	b29b      	uxth	r3, r3
 80101e6:	f023 0303 	bic.w	r3, r3, #3
 80101ea:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80101ec:	8bfb      	ldrh	r3, [r7, #30]
 80101ee:	2b0b      	cmp	r3, #11
 80101f0:	d801      	bhi.n	80101f6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80101f2:	230c      	movs	r3, #12
 80101f4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80101f6:	8bfb      	ldrh	r3, [r7, #30]
 80101f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80101fc:	d803      	bhi.n	8010206 <mem_trim+0x32>
 80101fe:	8bfa      	ldrh	r2, [r7, #30]
 8010200:	887b      	ldrh	r3, [r7, #2]
 8010202:	429a      	cmp	r2, r3
 8010204:	d201      	bcs.n	801020a <mem_trim+0x36>
    return NULL;
 8010206:	2300      	movs	r3, #0
 8010208:	e0d8      	b.n	80103bc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801020a:	4b6e      	ldr	r3, [pc, #440]	; (80103c4 <mem_trim+0x1f0>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	687a      	ldr	r2, [r7, #4]
 8010210:	429a      	cmp	r2, r3
 8010212:	d304      	bcc.n	801021e <mem_trim+0x4a>
 8010214:	4b6c      	ldr	r3, [pc, #432]	; (80103c8 <mem_trim+0x1f4>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	687a      	ldr	r2, [r7, #4]
 801021a:	429a      	cmp	r2, r3
 801021c:	d306      	bcc.n	801022c <mem_trim+0x58>
 801021e:	4b6b      	ldr	r3, [pc, #428]	; (80103cc <mem_trim+0x1f8>)
 8010220:	f240 22d1 	movw	r2, #721	; 0x2d1
 8010224:	496a      	ldr	r1, [pc, #424]	; (80103d0 <mem_trim+0x1fc>)
 8010226:	486b      	ldr	r0, [pc, #428]	; (80103d4 <mem_trim+0x200>)
 8010228:	f00a fd64 	bl	801acf4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801022c:	4b65      	ldr	r3, [pc, #404]	; (80103c4 <mem_trim+0x1f0>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	687a      	ldr	r2, [r7, #4]
 8010232:	429a      	cmp	r2, r3
 8010234:	d304      	bcc.n	8010240 <mem_trim+0x6c>
 8010236:	4b64      	ldr	r3, [pc, #400]	; (80103c8 <mem_trim+0x1f4>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	687a      	ldr	r2, [r7, #4]
 801023c:	429a      	cmp	r2, r3
 801023e:	d307      	bcc.n	8010250 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010240:	f00a fcf0 	bl	801ac24 <sys_arch_protect>
 8010244:	60b8      	str	r0, [r7, #8]
 8010246:	68b8      	ldr	r0, [r7, #8]
 8010248:	f00a fcfa 	bl	801ac40 <sys_arch_unprotect>
    return rmem;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	e0b5      	b.n	80103bc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	3b08      	subs	r3, #8
 8010254:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8010256:	69b8      	ldr	r0, [r7, #24]
 8010258:	f7ff fdea 	bl	800fe30 <mem_to_ptr>
 801025c:	4603      	mov	r3, r0
 801025e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8010260:	69bb      	ldr	r3, [r7, #24]
 8010262:	881a      	ldrh	r2, [r3, #0]
 8010264:	8afb      	ldrh	r3, [r7, #22]
 8010266:	1ad3      	subs	r3, r2, r3
 8010268:	b29b      	uxth	r3, r3
 801026a:	3b08      	subs	r3, #8
 801026c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801026e:	8bfa      	ldrh	r2, [r7, #30]
 8010270:	8abb      	ldrh	r3, [r7, #20]
 8010272:	429a      	cmp	r2, r3
 8010274:	d906      	bls.n	8010284 <mem_trim+0xb0>
 8010276:	4b55      	ldr	r3, [pc, #340]	; (80103cc <mem_trim+0x1f8>)
 8010278:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801027c:	4956      	ldr	r1, [pc, #344]	; (80103d8 <mem_trim+0x204>)
 801027e:	4855      	ldr	r0, [pc, #340]	; (80103d4 <mem_trim+0x200>)
 8010280:	f00a fd38 	bl	801acf4 <iprintf>
  if (newsize > size) {
 8010284:	8bfa      	ldrh	r2, [r7, #30]
 8010286:	8abb      	ldrh	r3, [r7, #20]
 8010288:	429a      	cmp	r2, r3
 801028a:	d901      	bls.n	8010290 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 801028c:	2300      	movs	r3, #0
 801028e:	e095      	b.n	80103bc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8010290:	8bfa      	ldrh	r2, [r7, #30]
 8010292:	8abb      	ldrh	r3, [r7, #20]
 8010294:	429a      	cmp	r2, r3
 8010296:	d101      	bne.n	801029c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	e08f      	b.n	80103bc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801029c:	484f      	ldr	r0, [pc, #316]	; (80103dc <mem_trim+0x208>)
 801029e:	f00a fc85 	bl	801abac <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80102a2:	69bb      	ldr	r3, [r7, #24]
 80102a4:	881b      	ldrh	r3, [r3, #0]
 80102a6:	4618      	mov	r0, r3
 80102a8:	f7ff fdb0 	bl	800fe0c <ptr_to_mem>
 80102ac:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80102ae:	693b      	ldr	r3, [r7, #16]
 80102b0:	791b      	ldrb	r3, [r3, #4]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d13f      	bne.n	8010336 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80102b6:	69bb      	ldr	r3, [r7, #24]
 80102b8:	881b      	ldrh	r3, [r3, #0]
 80102ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80102be:	d106      	bne.n	80102ce <mem_trim+0xfa>
 80102c0:	4b42      	ldr	r3, [pc, #264]	; (80103cc <mem_trim+0x1f8>)
 80102c2:	f240 22f5 	movw	r2, #757	; 0x2f5
 80102c6:	4946      	ldr	r1, [pc, #280]	; (80103e0 <mem_trim+0x20c>)
 80102c8:	4842      	ldr	r0, [pc, #264]	; (80103d4 <mem_trim+0x200>)
 80102ca:	f00a fd13 	bl	801acf4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80102ce:	693b      	ldr	r3, [r7, #16]
 80102d0:	881b      	ldrh	r3, [r3, #0]
 80102d2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80102d4:	8afa      	ldrh	r2, [r7, #22]
 80102d6:	8bfb      	ldrh	r3, [r7, #30]
 80102d8:	4413      	add	r3, r2
 80102da:	b29b      	uxth	r3, r3
 80102dc:	3308      	adds	r3, #8
 80102de:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80102e0:	4b40      	ldr	r3, [pc, #256]	; (80103e4 <mem_trim+0x210>)
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	693a      	ldr	r2, [r7, #16]
 80102e6:	429a      	cmp	r2, r3
 80102e8:	d106      	bne.n	80102f8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80102ea:	89fb      	ldrh	r3, [r7, #14]
 80102ec:	4618      	mov	r0, r3
 80102ee:	f7ff fd8d 	bl	800fe0c <ptr_to_mem>
 80102f2:	4603      	mov	r3, r0
 80102f4:	4a3b      	ldr	r2, [pc, #236]	; (80103e4 <mem_trim+0x210>)
 80102f6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80102f8:	89fb      	ldrh	r3, [r7, #14]
 80102fa:	4618      	mov	r0, r3
 80102fc:	f7ff fd86 	bl	800fe0c <ptr_to_mem>
 8010300:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8010302:	693b      	ldr	r3, [r7, #16]
 8010304:	2200      	movs	r2, #0
 8010306:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8010308:	693b      	ldr	r3, [r7, #16]
 801030a:	89ba      	ldrh	r2, [r7, #12]
 801030c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801030e:	693b      	ldr	r3, [r7, #16]
 8010310:	8afa      	ldrh	r2, [r7, #22]
 8010312:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8010314:	69bb      	ldr	r3, [r7, #24]
 8010316:	89fa      	ldrh	r2, [r7, #14]
 8010318:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801031a:	693b      	ldr	r3, [r7, #16]
 801031c:	881b      	ldrh	r3, [r3, #0]
 801031e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010322:	d047      	beq.n	80103b4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010324:	693b      	ldr	r3, [r7, #16]
 8010326:	881b      	ldrh	r3, [r3, #0]
 8010328:	4618      	mov	r0, r3
 801032a:	f7ff fd6f 	bl	800fe0c <ptr_to_mem>
 801032e:	4602      	mov	r2, r0
 8010330:	89fb      	ldrh	r3, [r7, #14]
 8010332:	8053      	strh	r3, [r2, #2]
 8010334:	e03e      	b.n	80103b4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8010336:	8bfb      	ldrh	r3, [r7, #30]
 8010338:	f103 0214 	add.w	r2, r3, #20
 801033c:	8abb      	ldrh	r3, [r7, #20]
 801033e:	429a      	cmp	r2, r3
 8010340:	d838      	bhi.n	80103b4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010342:	8afa      	ldrh	r2, [r7, #22]
 8010344:	8bfb      	ldrh	r3, [r7, #30]
 8010346:	4413      	add	r3, r2
 8010348:	b29b      	uxth	r3, r3
 801034a:	3308      	adds	r3, #8
 801034c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801034e:	69bb      	ldr	r3, [r7, #24]
 8010350:	881b      	ldrh	r3, [r3, #0]
 8010352:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010356:	d106      	bne.n	8010366 <mem_trim+0x192>
 8010358:	4b1c      	ldr	r3, [pc, #112]	; (80103cc <mem_trim+0x1f8>)
 801035a:	f240 3216 	movw	r2, #790	; 0x316
 801035e:	4920      	ldr	r1, [pc, #128]	; (80103e0 <mem_trim+0x20c>)
 8010360:	481c      	ldr	r0, [pc, #112]	; (80103d4 <mem_trim+0x200>)
 8010362:	f00a fcc7 	bl	801acf4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8010366:	89fb      	ldrh	r3, [r7, #14]
 8010368:	4618      	mov	r0, r3
 801036a:	f7ff fd4f 	bl	800fe0c <ptr_to_mem>
 801036e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8010370:	4b1c      	ldr	r3, [pc, #112]	; (80103e4 <mem_trim+0x210>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	693a      	ldr	r2, [r7, #16]
 8010376:	429a      	cmp	r2, r3
 8010378:	d202      	bcs.n	8010380 <mem_trim+0x1ac>
      lfree = mem2;
 801037a:	4a1a      	ldr	r2, [pc, #104]	; (80103e4 <mem_trim+0x210>)
 801037c:	693b      	ldr	r3, [r7, #16]
 801037e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8010380:	693b      	ldr	r3, [r7, #16]
 8010382:	2200      	movs	r2, #0
 8010384:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8010386:	69bb      	ldr	r3, [r7, #24]
 8010388:	881a      	ldrh	r2, [r3, #0]
 801038a:	693b      	ldr	r3, [r7, #16]
 801038c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801038e:	693b      	ldr	r3, [r7, #16]
 8010390:	8afa      	ldrh	r2, [r7, #22]
 8010392:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010394:	69bb      	ldr	r3, [r7, #24]
 8010396:	89fa      	ldrh	r2, [r7, #14]
 8010398:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801039a:	693b      	ldr	r3, [r7, #16]
 801039c:	881b      	ldrh	r3, [r3, #0]
 801039e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80103a2:	d007      	beq.n	80103b4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80103a4:	693b      	ldr	r3, [r7, #16]
 80103a6:	881b      	ldrh	r3, [r3, #0]
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7ff fd2f 	bl	800fe0c <ptr_to_mem>
 80103ae:	4602      	mov	r2, r0
 80103b0:	89fb      	ldrh	r3, [r7, #14]
 80103b2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80103b4:	4809      	ldr	r0, [pc, #36]	; (80103dc <mem_trim+0x208>)
 80103b6:	f00a fc08 	bl	801abca <sys_mutex_unlock>
  return rmem;
 80103ba:	687b      	ldr	r3, [r7, #4]
}
 80103bc:	4618      	mov	r0, r3
 80103be:	3720      	adds	r7, #32
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}
 80103c4:	2000dfa0 	.word	0x2000dfa0
 80103c8:	2000dfa4 	.word	0x2000dfa4
 80103cc:	0801cf7c 	.word	0x0801cf7c
 80103d0:	0801d108 	.word	0x0801d108
 80103d4:	0801cfc4 	.word	0x0801cfc4
 80103d8:	0801d120 	.word	0x0801d120
 80103dc:	2000dfa8 	.word	0x2000dfa8
 80103e0:	0801d140 	.word	0x0801d140
 80103e4:	2000dfac 	.word	0x2000dfac

080103e8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b088      	sub	sp, #32
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	4603      	mov	r3, r0
 80103f0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80103f2:	88fb      	ldrh	r3, [r7, #6]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d101      	bne.n	80103fc <mem_malloc+0x14>
    return NULL;
 80103f8:	2300      	movs	r3, #0
 80103fa:	e0e2      	b.n	80105c2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80103fc:	88fb      	ldrh	r3, [r7, #6]
 80103fe:	3303      	adds	r3, #3
 8010400:	b29b      	uxth	r3, r3
 8010402:	f023 0303 	bic.w	r3, r3, #3
 8010406:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8010408:	8bbb      	ldrh	r3, [r7, #28]
 801040a:	2b0b      	cmp	r3, #11
 801040c:	d801      	bhi.n	8010412 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801040e:	230c      	movs	r3, #12
 8010410:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8010412:	8bbb      	ldrh	r3, [r7, #28]
 8010414:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010418:	d803      	bhi.n	8010422 <mem_malloc+0x3a>
 801041a:	8bba      	ldrh	r2, [r7, #28]
 801041c:	88fb      	ldrh	r3, [r7, #6]
 801041e:	429a      	cmp	r2, r3
 8010420:	d201      	bcs.n	8010426 <mem_malloc+0x3e>
    return NULL;
 8010422:	2300      	movs	r3, #0
 8010424:	e0cd      	b.n	80105c2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8010426:	4869      	ldr	r0, [pc, #420]	; (80105cc <mem_malloc+0x1e4>)
 8010428:	f00a fbc0 	bl	801abac <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801042c:	4b68      	ldr	r3, [pc, #416]	; (80105d0 <mem_malloc+0x1e8>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	4618      	mov	r0, r3
 8010432:	f7ff fcfd 	bl	800fe30 <mem_to_ptr>
 8010436:	4603      	mov	r3, r0
 8010438:	83fb      	strh	r3, [r7, #30]
 801043a:	e0b7      	b.n	80105ac <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801043c:	8bfb      	ldrh	r3, [r7, #30]
 801043e:	4618      	mov	r0, r3
 8010440:	f7ff fce4 	bl	800fe0c <ptr_to_mem>
 8010444:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010446:	697b      	ldr	r3, [r7, #20]
 8010448:	791b      	ldrb	r3, [r3, #4]
 801044a:	2b00      	cmp	r3, #0
 801044c:	f040 80a7 	bne.w	801059e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8010450:	697b      	ldr	r3, [r7, #20]
 8010452:	881b      	ldrh	r3, [r3, #0]
 8010454:	461a      	mov	r2, r3
 8010456:	8bfb      	ldrh	r3, [r7, #30]
 8010458:	1ad3      	subs	r3, r2, r3
 801045a:	f1a3 0208 	sub.w	r2, r3, #8
 801045e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8010460:	429a      	cmp	r2, r3
 8010462:	f0c0 809c 	bcc.w	801059e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010466:	697b      	ldr	r3, [r7, #20]
 8010468:	881b      	ldrh	r3, [r3, #0]
 801046a:	461a      	mov	r2, r3
 801046c:	8bfb      	ldrh	r3, [r7, #30]
 801046e:	1ad3      	subs	r3, r2, r3
 8010470:	f1a3 0208 	sub.w	r2, r3, #8
 8010474:	8bbb      	ldrh	r3, [r7, #28]
 8010476:	3314      	adds	r3, #20
 8010478:	429a      	cmp	r2, r3
 801047a:	d333      	bcc.n	80104e4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801047c:	8bfa      	ldrh	r2, [r7, #30]
 801047e:	8bbb      	ldrh	r3, [r7, #28]
 8010480:	4413      	add	r3, r2
 8010482:	b29b      	uxth	r3, r3
 8010484:	3308      	adds	r3, #8
 8010486:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8010488:	8a7b      	ldrh	r3, [r7, #18]
 801048a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801048e:	d106      	bne.n	801049e <mem_malloc+0xb6>
 8010490:	4b50      	ldr	r3, [pc, #320]	; (80105d4 <mem_malloc+0x1ec>)
 8010492:	f240 3287 	movw	r2, #903	; 0x387
 8010496:	4950      	ldr	r1, [pc, #320]	; (80105d8 <mem_malloc+0x1f0>)
 8010498:	4850      	ldr	r0, [pc, #320]	; (80105dc <mem_malloc+0x1f4>)
 801049a:	f00a fc2b 	bl	801acf4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801049e:	8a7b      	ldrh	r3, [r7, #18]
 80104a0:	4618      	mov	r0, r3
 80104a2:	f7ff fcb3 	bl	800fe0c <ptr_to_mem>
 80104a6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	2200      	movs	r2, #0
 80104ac:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80104ae:	697b      	ldr	r3, [r7, #20]
 80104b0:	881a      	ldrh	r2, [r3, #0]
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	8bfa      	ldrh	r2, [r7, #30]
 80104ba:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80104bc:	697b      	ldr	r3, [r7, #20]
 80104be:	8a7a      	ldrh	r2, [r7, #18]
 80104c0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80104c2:	697b      	ldr	r3, [r7, #20]
 80104c4:	2201      	movs	r2, #1
 80104c6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	881b      	ldrh	r3, [r3, #0]
 80104cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80104d0:	d00b      	beq.n	80104ea <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	881b      	ldrh	r3, [r3, #0]
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7ff fc98 	bl	800fe0c <ptr_to_mem>
 80104dc:	4602      	mov	r2, r0
 80104de:	8a7b      	ldrh	r3, [r7, #18]
 80104e0:	8053      	strh	r3, [r2, #2]
 80104e2:	e002      	b.n	80104ea <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80104e4:	697b      	ldr	r3, [r7, #20]
 80104e6:	2201      	movs	r2, #1
 80104e8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80104ea:	4b39      	ldr	r3, [pc, #228]	; (80105d0 <mem_malloc+0x1e8>)
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	697a      	ldr	r2, [r7, #20]
 80104f0:	429a      	cmp	r2, r3
 80104f2:	d127      	bne.n	8010544 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80104f4:	4b36      	ldr	r3, [pc, #216]	; (80105d0 <mem_malloc+0x1e8>)
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80104fa:	e005      	b.n	8010508 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80104fc:	69bb      	ldr	r3, [r7, #24]
 80104fe:	881b      	ldrh	r3, [r3, #0]
 8010500:	4618      	mov	r0, r3
 8010502:	f7ff fc83 	bl	800fe0c <ptr_to_mem>
 8010506:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8010508:	69bb      	ldr	r3, [r7, #24]
 801050a:	791b      	ldrb	r3, [r3, #4]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d004      	beq.n	801051a <mem_malloc+0x132>
 8010510:	4b33      	ldr	r3, [pc, #204]	; (80105e0 <mem_malloc+0x1f8>)
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	69ba      	ldr	r2, [r7, #24]
 8010516:	429a      	cmp	r2, r3
 8010518:	d1f0      	bne.n	80104fc <mem_malloc+0x114>
          }
          lfree = cur;
 801051a:	4a2d      	ldr	r2, [pc, #180]	; (80105d0 <mem_malloc+0x1e8>)
 801051c:	69bb      	ldr	r3, [r7, #24]
 801051e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010520:	4b2b      	ldr	r3, [pc, #172]	; (80105d0 <mem_malloc+0x1e8>)
 8010522:	681a      	ldr	r2, [r3, #0]
 8010524:	4b2e      	ldr	r3, [pc, #184]	; (80105e0 <mem_malloc+0x1f8>)
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	429a      	cmp	r2, r3
 801052a:	d00b      	beq.n	8010544 <mem_malloc+0x15c>
 801052c:	4b28      	ldr	r3, [pc, #160]	; (80105d0 <mem_malloc+0x1e8>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	791b      	ldrb	r3, [r3, #4]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d006      	beq.n	8010544 <mem_malloc+0x15c>
 8010536:	4b27      	ldr	r3, [pc, #156]	; (80105d4 <mem_malloc+0x1ec>)
 8010538:	f240 32b5 	movw	r2, #949	; 0x3b5
 801053c:	4929      	ldr	r1, [pc, #164]	; (80105e4 <mem_malloc+0x1fc>)
 801053e:	4827      	ldr	r0, [pc, #156]	; (80105dc <mem_malloc+0x1f4>)
 8010540:	f00a fbd8 	bl	801acf4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8010544:	4821      	ldr	r0, [pc, #132]	; (80105cc <mem_malloc+0x1e4>)
 8010546:	f00a fb40 	bl	801abca <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801054a:	8bba      	ldrh	r2, [r7, #28]
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	4413      	add	r3, r2
 8010550:	3308      	adds	r3, #8
 8010552:	4a23      	ldr	r2, [pc, #140]	; (80105e0 <mem_malloc+0x1f8>)
 8010554:	6812      	ldr	r2, [r2, #0]
 8010556:	4293      	cmp	r3, r2
 8010558:	d906      	bls.n	8010568 <mem_malloc+0x180>
 801055a:	4b1e      	ldr	r3, [pc, #120]	; (80105d4 <mem_malloc+0x1ec>)
 801055c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8010560:	4921      	ldr	r1, [pc, #132]	; (80105e8 <mem_malloc+0x200>)
 8010562:	481e      	ldr	r0, [pc, #120]	; (80105dc <mem_malloc+0x1f4>)
 8010564:	f00a fbc6 	bl	801acf4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	f003 0303 	and.w	r3, r3, #3
 801056e:	2b00      	cmp	r3, #0
 8010570:	d006      	beq.n	8010580 <mem_malloc+0x198>
 8010572:	4b18      	ldr	r3, [pc, #96]	; (80105d4 <mem_malloc+0x1ec>)
 8010574:	f240 32bb 	movw	r2, #955	; 0x3bb
 8010578:	491c      	ldr	r1, [pc, #112]	; (80105ec <mem_malloc+0x204>)
 801057a:	4818      	ldr	r0, [pc, #96]	; (80105dc <mem_malloc+0x1f4>)
 801057c:	f00a fbba 	bl	801acf4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010580:	697b      	ldr	r3, [r7, #20]
 8010582:	f003 0303 	and.w	r3, r3, #3
 8010586:	2b00      	cmp	r3, #0
 8010588:	d006      	beq.n	8010598 <mem_malloc+0x1b0>
 801058a:	4b12      	ldr	r3, [pc, #72]	; (80105d4 <mem_malloc+0x1ec>)
 801058c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8010590:	4917      	ldr	r1, [pc, #92]	; (80105f0 <mem_malloc+0x208>)
 8010592:	4812      	ldr	r0, [pc, #72]	; (80105dc <mem_malloc+0x1f4>)
 8010594:	f00a fbae 	bl	801acf4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010598:	697b      	ldr	r3, [r7, #20]
 801059a:	3308      	adds	r3, #8
 801059c:	e011      	b.n	80105c2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801059e:	8bfb      	ldrh	r3, [r7, #30]
 80105a0:	4618      	mov	r0, r3
 80105a2:	f7ff fc33 	bl	800fe0c <ptr_to_mem>
 80105a6:	4603      	mov	r3, r0
 80105a8:	881b      	ldrh	r3, [r3, #0]
 80105aa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80105ac:	8bfa      	ldrh	r2, [r7, #30]
 80105ae:	8bbb      	ldrh	r3, [r7, #28]
 80105b0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80105b4:	429a      	cmp	r2, r3
 80105b6:	f4ff af41 	bcc.w	801043c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80105ba:	4804      	ldr	r0, [pc, #16]	; (80105cc <mem_malloc+0x1e4>)
 80105bc:	f00a fb05 	bl	801abca <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80105c0:	2300      	movs	r3, #0
}
 80105c2:	4618      	mov	r0, r3
 80105c4:	3720      	adds	r7, #32
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}
 80105ca:	bf00      	nop
 80105cc:	2000dfa8 	.word	0x2000dfa8
 80105d0:	2000dfac 	.word	0x2000dfac
 80105d4:	0801cf7c 	.word	0x0801cf7c
 80105d8:	0801d140 	.word	0x0801d140
 80105dc:	0801cfc4 	.word	0x0801cfc4
 80105e0:	2000dfa4 	.word	0x2000dfa4
 80105e4:	0801d154 	.word	0x0801d154
 80105e8:	0801d170 	.word	0x0801d170
 80105ec:	0801d1a0 	.word	0x0801d1a0
 80105f0:	0801d1d0 	.word	0x0801d1d0

080105f4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80105f4:	b480      	push	{r7}
 80105f6:	b085      	sub	sp, #20
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	689b      	ldr	r3, [r3, #8]
 8010600:	2200      	movs	r2, #0
 8010602:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	685b      	ldr	r3, [r3, #4]
 8010608:	3303      	adds	r3, #3
 801060a:	f023 0303 	bic.w	r3, r3, #3
 801060e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010610:	2300      	movs	r3, #0
 8010612:	60fb      	str	r3, [r7, #12]
 8010614:	e011      	b.n	801063a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	689b      	ldr	r3, [r3, #8]
 801061a:	681a      	ldr	r2, [r3, #0]
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	689b      	ldr	r3, [r3, #8]
 8010624:	68ba      	ldr	r2, [r7, #8]
 8010626:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	881b      	ldrh	r3, [r3, #0]
 801062c:	461a      	mov	r2, r3
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	4413      	add	r3, r2
 8010632:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	3301      	adds	r3, #1
 8010638:	60fb      	str	r3, [r7, #12]
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	885b      	ldrh	r3, [r3, #2]
 801063e:	461a      	mov	r2, r3
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	4293      	cmp	r3, r2
 8010644:	dbe7      	blt.n	8010616 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8010646:	bf00      	nop
 8010648:	bf00      	nop
 801064a:	3714      	adds	r7, #20
 801064c:	46bd      	mov	sp, r7
 801064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010652:	4770      	bx	lr

08010654 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b082      	sub	sp, #8
 8010658:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801065a:	2300      	movs	r3, #0
 801065c:	80fb      	strh	r3, [r7, #6]
 801065e:	e009      	b.n	8010674 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010660:	88fb      	ldrh	r3, [r7, #6]
 8010662:	4a08      	ldr	r2, [pc, #32]	; (8010684 <memp_init+0x30>)
 8010664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010668:	4618      	mov	r0, r3
 801066a:	f7ff ffc3 	bl	80105f4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801066e:	88fb      	ldrh	r3, [r7, #6]
 8010670:	3301      	adds	r3, #1
 8010672:	80fb      	strh	r3, [r7, #6]
 8010674:	88fb      	ldrh	r3, [r7, #6]
 8010676:	2b0c      	cmp	r3, #12
 8010678:	d9f2      	bls.n	8010660 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801067a:	bf00      	nop
 801067c:	bf00      	nop
 801067e:	3708      	adds	r7, #8
 8010680:	46bd      	mov	sp, r7
 8010682:	bd80      	pop	{r7, pc}
 8010684:	0801faa0 	.word	0x0801faa0

08010688 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b084      	sub	sp, #16
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8010690:	f00a fac8 	bl	801ac24 <sys_arch_protect>
 8010694:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	689b      	ldr	r3, [r3, #8]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d015      	beq.n	80106d0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	689b      	ldr	r3, [r3, #8]
 80106a8:	68ba      	ldr	r2, [r7, #8]
 80106aa:	6812      	ldr	r2, [r2, #0]
 80106ac:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80106ae:	68bb      	ldr	r3, [r7, #8]
 80106b0:	f003 0303 	and.w	r3, r3, #3
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d006      	beq.n	80106c6 <do_memp_malloc_pool+0x3e>
 80106b8:	4b09      	ldr	r3, [pc, #36]	; (80106e0 <do_memp_malloc_pool+0x58>)
 80106ba:	f44f 728c 	mov.w	r2, #280	; 0x118
 80106be:	4909      	ldr	r1, [pc, #36]	; (80106e4 <do_memp_malloc_pool+0x5c>)
 80106c0:	4809      	ldr	r0, [pc, #36]	; (80106e8 <do_memp_malloc_pool+0x60>)
 80106c2:	f00a fb17 	bl	801acf4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80106c6:	68f8      	ldr	r0, [r7, #12]
 80106c8:	f00a faba 	bl	801ac40 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	e003      	b.n	80106d8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80106d0:	68f8      	ldr	r0, [r7, #12]
 80106d2:	f00a fab5 	bl	801ac40 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80106d6:	2300      	movs	r3, #0
}
 80106d8:	4618      	mov	r0, r3
 80106da:	3710      	adds	r7, #16
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd80      	pop	{r7, pc}
 80106e0:	0801d1f4 	.word	0x0801d1f4
 80106e4:	0801d224 	.word	0x0801d224
 80106e8:	0801d248 	.word	0x0801d248

080106ec <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b082      	sub	sp, #8
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d106      	bne.n	8010708 <memp_malloc_pool+0x1c>
 80106fa:	4b0a      	ldr	r3, [pc, #40]	; (8010724 <memp_malloc_pool+0x38>)
 80106fc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8010700:	4909      	ldr	r1, [pc, #36]	; (8010728 <memp_malloc_pool+0x3c>)
 8010702:	480a      	ldr	r0, [pc, #40]	; (801072c <memp_malloc_pool+0x40>)
 8010704:	f00a faf6 	bl	801acf4 <iprintf>
  if (desc == NULL) {
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d101      	bne.n	8010712 <memp_malloc_pool+0x26>
    return NULL;
 801070e:	2300      	movs	r3, #0
 8010710:	e003      	b.n	801071a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8010712:	6878      	ldr	r0, [r7, #4]
 8010714:	f7ff ffb8 	bl	8010688 <do_memp_malloc_pool>
 8010718:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801071a:	4618      	mov	r0, r3
 801071c:	3708      	adds	r7, #8
 801071e:	46bd      	mov	sp, r7
 8010720:	bd80      	pop	{r7, pc}
 8010722:	bf00      	nop
 8010724:	0801d1f4 	.word	0x0801d1f4
 8010728:	0801d270 	.word	0x0801d270
 801072c:	0801d248 	.word	0x0801d248

08010730 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b084      	sub	sp, #16
 8010734:	af00      	add	r7, sp, #0
 8010736:	4603      	mov	r3, r0
 8010738:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801073a:	79fb      	ldrb	r3, [r7, #7]
 801073c:	2b0c      	cmp	r3, #12
 801073e:	d908      	bls.n	8010752 <memp_malloc+0x22>
 8010740:	4b0a      	ldr	r3, [pc, #40]	; (801076c <memp_malloc+0x3c>)
 8010742:	f240 1257 	movw	r2, #343	; 0x157
 8010746:	490a      	ldr	r1, [pc, #40]	; (8010770 <memp_malloc+0x40>)
 8010748:	480a      	ldr	r0, [pc, #40]	; (8010774 <memp_malloc+0x44>)
 801074a:	f00a fad3 	bl	801acf4 <iprintf>
 801074e:	2300      	movs	r3, #0
 8010750:	e008      	b.n	8010764 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8010752:	79fb      	ldrb	r3, [r7, #7]
 8010754:	4a08      	ldr	r2, [pc, #32]	; (8010778 <memp_malloc+0x48>)
 8010756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801075a:	4618      	mov	r0, r3
 801075c:	f7ff ff94 	bl	8010688 <do_memp_malloc_pool>
 8010760:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8010762:	68fb      	ldr	r3, [r7, #12]
}
 8010764:	4618      	mov	r0, r3
 8010766:	3710      	adds	r7, #16
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}
 801076c:	0801d1f4 	.word	0x0801d1f4
 8010770:	0801d284 	.word	0x0801d284
 8010774:	0801d248 	.word	0x0801d248
 8010778:	0801faa0 	.word	0x0801faa0

0801077c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b084      	sub	sp, #16
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	f003 0303 	and.w	r3, r3, #3
 801078c:	2b00      	cmp	r3, #0
 801078e:	d006      	beq.n	801079e <do_memp_free_pool+0x22>
 8010790:	4b0d      	ldr	r3, [pc, #52]	; (80107c8 <do_memp_free_pool+0x4c>)
 8010792:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8010796:	490d      	ldr	r1, [pc, #52]	; (80107cc <do_memp_free_pool+0x50>)
 8010798:	480d      	ldr	r0, [pc, #52]	; (80107d0 <do_memp_free_pool+0x54>)
 801079a:	f00a faab 	bl	801acf4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801079e:	683b      	ldr	r3, [r7, #0]
 80107a0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80107a2:	f00a fa3f 	bl	801ac24 <sys_arch_protect>
 80107a6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	689b      	ldr	r3, [r3, #8]
 80107ac:	681a      	ldr	r2, [r3, #0]
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	689b      	ldr	r3, [r3, #8]
 80107b6:	68fa      	ldr	r2, [r7, #12]
 80107b8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80107ba:	68b8      	ldr	r0, [r7, #8]
 80107bc:	f00a fa40 	bl	801ac40 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80107c0:	bf00      	nop
 80107c2:	3710      	adds	r7, #16
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bd80      	pop	{r7, pc}
 80107c8:	0801d1f4 	.word	0x0801d1f4
 80107cc:	0801d2a4 	.word	0x0801d2a4
 80107d0:	0801d248 	.word	0x0801d248

080107d4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b082      	sub	sp, #8
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
 80107dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d106      	bne.n	80107f2 <memp_free_pool+0x1e>
 80107e4:	4b0a      	ldr	r3, [pc, #40]	; (8010810 <memp_free_pool+0x3c>)
 80107e6:	f240 1295 	movw	r2, #405	; 0x195
 80107ea:	490a      	ldr	r1, [pc, #40]	; (8010814 <memp_free_pool+0x40>)
 80107ec:	480a      	ldr	r0, [pc, #40]	; (8010818 <memp_free_pool+0x44>)
 80107ee:	f00a fa81 	bl	801acf4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d007      	beq.n	8010808 <memp_free_pool+0x34>
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d004      	beq.n	8010808 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80107fe:	6839      	ldr	r1, [r7, #0]
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f7ff ffbb 	bl	801077c <do_memp_free_pool>
 8010806:	e000      	b.n	801080a <memp_free_pool+0x36>
    return;
 8010808:	bf00      	nop
}
 801080a:	3708      	adds	r7, #8
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}
 8010810:	0801d1f4 	.word	0x0801d1f4
 8010814:	0801d270 	.word	0x0801d270
 8010818:	0801d248 	.word	0x0801d248

0801081c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b082      	sub	sp, #8
 8010820:	af00      	add	r7, sp, #0
 8010822:	4603      	mov	r3, r0
 8010824:	6039      	str	r1, [r7, #0]
 8010826:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010828:	79fb      	ldrb	r3, [r7, #7]
 801082a:	2b0c      	cmp	r3, #12
 801082c:	d907      	bls.n	801083e <memp_free+0x22>
 801082e:	4b0c      	ldr	r3, [pc, #48]	; (8010860 <memp_free+0x44>)
 8010830:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8010834:	490b      	ldr	r1, [pc, #44]	; (8010864 <memp_free+0x48>)
 8010836:	480c      	ldr	r0, [pc, #48]	; (8010868 <memp_free+0x4c>)
 8010838:	f00a fa5c 	bl	801acf4 <iprintf>
 801083c:	e00c      	b.n	8010858 <memp_free+0x3c>

  if (mem == NULL) {
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d008      	beq.n	8010856 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010844:	79fb      	ldrb	r3, [r7, #7]
 8010846:	4a09      	ldr	r2, [pc, #36]	; (801086c <memp_free+0x50>)
 8010848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801084c:	6839      	ldr	r1, [r7, #0]
 801084e:	4618      	mov	r0, r3
 8010850:	f7ff ff94 	bl	801077c <do_memp_free_pool>
 8010854:	e000      	b.n	8010858 <memp_free+0x3c>
    return;
 8010856:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010858:	3708      	adds	r7, #8
 801085a:	46bd      	mov	sp, r7
 801085c:	bd80      	pop	{r7, pc}
 801085e:	bf00      	nop
 8010860:	0801d1f4 	.word	0x0801d1f4
 8010864:	0801d2c4 	.word	0x0801d2c4
 8010868:	0801d248 	.word	0x0801d248
 801086c:	0801faa0 	.word	0x0801faa0

08010870 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010870:	b480      	push	{r7}
 8010872:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8010874:	bf00      	nop
 8010876:	46bd      	mov	sp, r7
 8010878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087c:	4770      	bx	lr
	...

08010880 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b086      	sub	sp, #24
 8010884:	af00      	add	r7, sp, #0
 8010886:	60f8      	str	r0, [r7, #12]
 8010888:	60b9      	str	r1, [r7, #8]
 801088a:	607a      	str	r2, [r7, #4]
 801088c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d108      	bne.n	80108a6 <netif_add+0x26>
 8010894:	4b57      	ldr	r3, [pc, #348]	; (80109f4 <netif_add+0x174>)
 8010896:	f240 1227 	movw	r2, #295	; 0x127
 801089a:	4957      	ldr	r1, [pc, #348]	; (80109f8 <netif_add+0x178>)
 801089c:	4857      	ldr	r0, [pc, #348]	; (80109fc <netif_add+0x17c>)
 801089e:	f00a fa29 	bl	801acf4 <iprintf>
 80108a2:	2300      	movs	r3, #0
 80108a4:	e0a2      	b.n	80109ec <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80108a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d108      	bne.n	80108be <netif_add+0x3e>
 80108ac:	4b51      	ldr	r3, [pc, #324]	; (80109f4 <netif_add+0x174>)
 80108ae:	f44f 7294 	mov.w	r2, #296	; 0x128
 80108b2:	4953      	ldr	r1, [pc, #332]	; (8010a00 <netif_add+0x180>)
 80108b4:	4851      	ldr	r0, [pc, #324]	; (80109fc <netif_add+0x17c>)
 80108b6:	f00a fa1d 	bl	801acf4 <iprintf>
 80108ba:	2300      	movs	r3, #0
 80108bc:	e096      	b.n	80109ec <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80108be:	68bb      	ldr	r3, [r7, #8]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d101      	bne.n	80108c8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80108c4:	4b4f      	ldr	r3, [pc, #316]	; (8010a04 <netif_add+0x184>)
 80108c6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d101      	bne.n	80108d2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80108ce:	4b4d      	ldr	r3, [pc, #308]	; (8010a04 <netif_add+0x184>)
 80108d0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d101      	bne.n	80108dc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80108d8:	4b4a      	ldr	r3, [pc, #296]	; (8010a04 <netif_add+0x184>)
 80108da:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	2200      	movs	r2, #0
 80108e0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	2200      	movs	r2, #0
 80108e6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	2200      	movs	r2, #0
 80108ec:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	4a45      	ldr	r2, [pc, #276]	; (8010a08 <netif_add+0x188>)
 80108f2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	2200      	movs	r2, #0
 80108f8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	2200      	movs	r2, #0
 80108fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	2200      	movs	r2, #0
 8010906:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	6a3a      	ldr	r2, [r7, #32]
 801090c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801090e:	4b3f      	ldr	r3, [pc, #252]	; (8010a0c <netif_add+0x18c>)
 8010910:	781a      	ldrb	r2, [r3, #0]
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801091c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	687a      	ldr	r2, [r7, #4]
 8010922:	68b9      	ldr	r1, [r7, #8]
 8010924:	68f8      	ldr	r0, [r7, #12]
 8010926:	f000 f913 	bl	8010b50 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801092c:	68f8      	ldr	r0, [r7, #12]
 801092e:	4798      	blx	r3
 8010930:	4603      	mov	r3, r0
 8010932:	2b00      	cmp	r3, #0
 8010934:	d001      	beq.n	801093a <netif_add+0xba>
    return NULL;
 8010936:	2300      	movs	r3, #0
 8010938:	e058      	b.n	80109ec <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010940:	2bff      	cmp	r3, #255	; 0xff
 8010942:	d103      	bne.n	801094c <netif_add+0xcc>
        netif->num = 0;
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	2200      	movs	r2, #0
 8010948:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 801094c:	2300      	movs	r3, #0
 801094e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010950:	4b2f      	ldr	r3, [pc, #188]	; (8010a10 <netif_add+0x190>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	617b      	str	r3, [r7, #20]
 8010956:	e02b      	b.n	80109b0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010958:	697a      	ldr	r2, [r7, #20]
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	429a      	cmp	r2, r3
 801095e:	d106      	bne.n	801096e <netif_add+0xee>
 8010960:	4b24      	ldr	r3, [pc, #144]	; (80109f4 <netif_add+0x174>)
 8010962:	f240 128b 	movw	r2, #395	; 0x18b
 8010966:	492b      	ldr	r1, [pc, #172]	; (8010a14 <netif_add+0x194>)
 8010968:	4824      	ldr	r0, [pc, #144]	; (80109fc <netif_add+0x17c>)
 801096a:	f00a f9c3 	bl	801acf4 <iprintf>
        num_netifs++;
 801096e:	693b      	ldr	r3, [r7, #16]
 8010970:	3301      	adds	r3, #1
 8010972:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8010974:	693b      	ldr	r3, [r7, #16]
 8010976:	2bff      	cmp	r3, #255	; 0xff
 8010978:	dd06      	ble.n	8010988 <netif_add+0x108>
 801097a:	4b1e      	ldr	r3, [pc, #120]	; (80109f4 <netif_add+0x174>)
 801097c:	f240 128d 	movw	r2, #397	; 0x18d
 8010980:	4925      	ldr	r1, [pc, #148]	; (8010a18 <netif_add+0x198>)
 8010982:	481e      	ldr	r0, [pc, #120]	; (80109fc <netif_add+0x17c>)
 8010984:	f00a f9b6 	bl	801acf4 <iprintf>
        if (netif2->num == netif->num) {
 8010988:	697b      	ldr	r3, [r7, #20]
 801098a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010994:	429a      	cmp	r2, r3
 8010996:	d108      	bne.n	80109aa <netif_add+0x12a>
          netif->num++;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801099e:	3301      	adds	r3, #1
 80109a0:	b2da      	uxtb	r2, r3
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80109a8:	e005      	b.n	80109b6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80109aa:	697b      	ldr	r3, [r7, #20]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	617b      	str	r3, [r7, #20]
 80109b0:	697b      	ldr	r3, [r7, #20]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d1d0      	bne.n	8010958 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80109b6:	697b      	ldr	r3, [r7, #20]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d1be      	bne.n	801093a <netif_add+0xba>
  }
  if (netif->num == 254) {
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80109c2:	2bfe      	cmp	r3, #254	; 0xfe
 80109c4:	d103      	bne.n	80109ce <netif_add+0x14e>
    netif_num = 0;
 80109c6:	4b11      	ldr	r3, [pc, #68]	; (8010a0c <netif_add+0x18c>)
 80109c8:	2200      	movs	r2, #0
 80109ca:	701a      	strb	r2, [r3, #0]
 80109cc:	e006      	b.n	80109dc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80109d4:	3301      	adds	r3, #1
 80109d6:	b2da      	uxtb	r2, r3
 80109d8:	4b0c      	ldr	r3, [pc, #48]	; (8010a0c <netif_add+0x18c>)
 80109da:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80109dc:	4b0c      	ldr	r3, [pc, #48]	; (8010a10 <netif_add+0x190>)
 80109de:	681a      	ldr	r2, [r3, #0]
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80109e4:	4a0a      	ldr	r2, [pc, #40]	; (8010a10 <netif_add+0x190>)
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80109ea:	68fb      	ldr	r3, [r7, #12]
}
 80109ec:	4618      	mov	r0, r3
 80109ee:	3718      	adds	r7, #24
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bd80      	pop	{r7, pc}
 80109f4:	0801d2e0 	.word	0x0801d2e0
 80109f8:	0801d374 	.word	0x0801d374
 80109fc:	0801d330 	.word	0x0801d330
 8010a00:	0801d390 	.word	0x0801d390
 8010a04:	0801fb14 	.word	0x0801fb14
 8010a08:	08010e2b 	.word	0x08010e2b
 8010a0c:	20011084 	.word	0x20011084
 8010a10:	2001107c 	.word	0x2001107c
 8010a14:	0801d3b4 	.word	0x0801d3b4
 8010a18:	0801d3c8 	.word	0x0801d3c8

08010a1c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b082      	sub	sp, #8
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8010a26:	6839      	ldr	r1, [r7, #0]
 8010a28:	6878      	ldr	r0, [r7, #4]
 8010a2a:	f002 fdb7 	bl	801359c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010a2e:	6839      	ldr	r1, [r7, #0]
 8010a30:	6878      	ldr	r0, [r7, #4]
 8010a32:	f007 fc69 	bl	8018308 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8010a36:	bf00      	nop
 8010a38:	3708      	adds	r7, #8
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bd80      	pop	{r7, pc}
	...

08010a40 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b086      	sub	sp, #24
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	60f8      	str	r0, [r7, #12]
 8010a48:	60b9      	str	r1, [r7, #8]
 8010a4a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d106      	bne.n	8010a60 <netif_do_set_ipaddr+0x20>
 8010a52:	4b1d      	ldr	r3, [pc, #116]	; (8010ac8 <netif_do_set_ipaddr+0x88>)
 8010a54:	f240 12cb 	movw	r2, #459	; 0x1cb
 8010a58:	491c      	ldr	r1, [pc, #112]	; (8010acc <netif_do_set_ipaddr+0x8c>)
 8010a5a:	481d      	ldr	r0, [pc, #116]	; (8010ad0 <netif_do_set_ipaddr+0x90>)
 8010a5c:	f00a f94a 	bl	801acf4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d106      	bne.n	8010a74 <netif_do_set_ipaddr+0x34>
 8010a66:	4b18      	ldr	r3, [pc, #96]	; (8010ac8 <netif_do_set_ipaddr+0x88>)
 8010a68:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8010a6c:	4917      	ldr	r1, [pc, #92]	; (8010acc <netif_do_set_ipaddr+0x8c>)
 8010a6e:	4818      	ldr	r0, [pc, #96]	; (8010ad0 <netif_do_set_ipaddr+0x90>)
 8010a70:	f00a f940 	bl	801acf4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8010a74:	68bb      	ldr	r3, [r7, #8]
 8010a76:	681a      	ldr	r2, [r3, #0]
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	3304      	adds	r3, #4
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	429a      	cmp	r2, r3
 8010a80:	d01c      	beq.n	8010abc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8010a82:	68bb      	ldr	r3, [r7, #8]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	3304      	adds	r3, #4
 8010a8c:	681a      	ldr	r2, [r3, #0]
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8010a92:	f107 0314 	add.w	r3, r7, #20
 8010a96:	4619      	mov	r1, r3
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f7ff ffbf 	bl	8010a1c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8010a9e:	68bb      	ldr	r3, [r7, #8]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d002      	beq.n	8010aaa <netif_do_set_ipaddr+0x6a>
 8010aa4:	68bb      	ldr	r3, [r7, #8]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	e000      	b.n	8010aac <netif_do_set_ipaddr+0x6c>
 8010aaa:	2300      	movs	r3, #0
 8010aac:	68fa      	ldr	r2, [r7, #12]
 8010aae:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010ab0:	2101      	movs	r1, #1
 8010ab2:	68f8      	ldr	r0, [r7, #12]
 8010ab4:	f000 f8d2 	bl	8010c5c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8010ab8:	2301      	movs	r3, #1
 8010aba:	e000      	b.n	8010abe <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010abc:	2300      	movs	r3, #0
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3718      	adds	r7, #24
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd80      	pop	{r7, pc}
 8010ac6:	bf00      	nop
 8010ac8:	0801d2e0 	.word	0x0801d2e0
 8010acc:	0801d3f8 	.word	0x0801d3f8
 8010ad0:	0801d330 	.word	0x0801d330

08010ad4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010ad4:	b480      	push	{r7}
 8010ad6:	b085      	sub	sp, #20
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	60f8      	str	r0, [r7, #12]
 8010adc:	60b9      	str	r1, [r7, #8]
 8010ade:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010ae0:	68bb      	ldr	r3, [r7, #8]
 8010ae2:	681a      	ldr	r2, [r3, #0]
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	3308      	adds	r3, #8
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	429a      	cmp	r2, r3
 8010aec:	d00a      	beq.n	8010b04 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010aee:	68bb      	ldr	r3, [r7, #8]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d002      	beq.n	8010afa <netif_do_set_netmask+0x26>
 8010af4:	68bb      	ldr	r3, [r7, #8]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	e000      	b.n	8010afc <netif_do_set_netmask+0x28>
 8010afa:	2300      	movs	r3, #0
 8010afc:	68fa      	ldr	r2, [r7, #12]
 8010afe:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010b00:	2301      	movs	r3, #1
 8010b02:	e000      	b.n	8010b06 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010b04:	2300      	movs	r3, #0
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3714      	adds	r7, #20
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b10:	4770      	bx	lr

08010b12 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8010b12:	b480      	push	{r7}
 8010b14:	b085      	sub	sp, #20
 8010b16:	af00      	add	r7, sp, #0
 8010b18:	60f8      	str	r0, [r7, #12]
 8010b1a:	60b9      	str	r1, [r7, #8]
 8010b1c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010b1e:	68bb      	ldr	r3, [r7, #8]
 8010b20:	681a      	ldr	r2, [r3, #0]
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	330c      	adds	r3, #12
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	429a      	cmp	r2, r3
 8010b2a:	d00a      	beq.n	8010b42 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d002      	beq.n	8010b38 <netif_do_set_gw+0x26>
 8010b32:	68bb      	ldr	r3, [r7, #8]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	e000      	b.n	8010b3a <netif_do_set_gw+0x28>
 8010b38:	2300      	movs	r3, #0
 8010b3a:	68fa      	ldr	r2, [r7, #12]
 8010b3c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010b3e:	2301      	movs	r3, #1
 8010b40:	e000      	b.n	8010b44 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8010b42:	2300      	movs	r3, #0
}
 8010b44:	4618      	mov	r0, r3
 8010b46:	3714      	adds	r7, #20
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4e:	4770      	bx	lr

08010b50 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b088      	sub	sp, #32
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	60f8      	str	r0, [r7, #12]
 8010b58:	60b9      	str	r1, [r7, #8]
 8010b5a:	607a      	str	r2, [r7, #4]
 8010b5c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8010b62:	2300      	movs	r3, #0
 8010b64:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010b66:	68bb      	ldr	r3, [r7, #8]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d101      	bne.n	8010b70 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010b6c:	4b1c      	ldr	r3, [pc, #112]	; (8010be0 <netif_set_addr+0x90>)
 8010b6e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d101      	bne.n	8010b7a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8010b76:	4b1a      	ldr	r3, [pc, #104]	; (8010be0 <netif_set_addr+0x90>)
 8010b78:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d101      	bne.n	8010b84 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8010b80:	4b17      	ldr	r3, [pc, #92]	; (8010be0 <netif_set_addr+0x90>)
 8010b82:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d003      	beq.n	8010b92 <netif_set_addr+0x42>
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d101      	bne.n	8010b96 <netif_set_addr+0x46>
 8010b92:	2301      	movs	r3, #1
 8010b94:	e000      	b.n	8010b98 <netif_set_addr+0x48>
 8010b96:	2300      	movs	r3, #0
 8010b98:	617b      	str	r3, [r7, #20]
  if (remove) {
 8010b9a:	697b      	ldr	r3, [r7, #20]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d006      	beq.n	8010bae <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010ba0:	f107 0310 	add.w	r3, r7, #16
 8010ba4:	461a      	mov	r2, r3
 8010ba6:	68b9      	ldr	r1, [r7, #8]
 8010ba8:	68f8      	ldr	r0, [r7, #12]
 8010baa:	f7ff ff49 	bl	8010a40 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010bae:	69fa      	ldr	r2, [r7, #28]
 8010bb0:	6879      	ldr	r1, [r7, #4]
 8010bb2:	68f8      	ldr	r0, [r7, #12]
 8010bb4:	f7ff ff8e 	bl	8010ad4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8010bb8:	69ba      	ldr	r2, [r7, #24]
 8010bba:	6839      	ldr	r1, [r7, #0]
 8010bbc:	68f8      	ldr	r0, [r7, #12]
 8010bbe:	f7ff ffa8 	bl	8010b12 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8010bc2:	697b      	ldr	r3, [r7, #20]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d106      	bne.n	8010bd6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010bc8:	f107 0310 	add.w	r3, r7, #16
 8010bcc:	461a      	mov	r2, r3
 8010bce:	68b9      	ldr	r1, [r7, #8]
 8010bd0:	68f8      	ldr	r0, [r7, #12]
 8010bd2:	f7ff ff35 	bl	8010a40 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8010bd6:	bf00      	nop
 8010bd8:	3720      	adds	r7, #32
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}
 8010bde:	bf00      	nop
 8010be0:	0801fb14 	.word	0x0801fb14

08010be4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010be4:	b480      	push	{r7}
 8010be6:	b083      	sub	sp, #12
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010bec:	4a04      	ldr	r2, [pc, #16]	; (8010c00 <netif_set_default+0x1c>)
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010bf2:	bf00      	nop
 8010bf4:	370c      	adds	r7, #12
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfc:	4770      	bx	lr
 8010bfe:	bf00      	nop
 8010c00:	20011080 	.word	0x20011080

08010c04 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b082      	sub	sp, #8
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d107      	bne.n	8010c22 <netif_set_up+0x1e>
 8010c12:	4b0f      	ldr	r3, [pc, #60]	; (8010c50 <netif_set_up+0x4c>)
 8010c14:	f44f 7254 	mov.w	r2, #848	; 0x350
 8010c18:	490e      	ldr	r1, [pc, #56]	; (8010c54 <netif_set_up+0x50>)
 8010c1a:	480f      	ldr	r0, [pc, #60]	; (8010c58 <netif_set_up+0x54>)
 8010c1c:	f00a f86a 	bl	801acf4 <iprintf>
 8010c20:	e013      	b.n	8010c4a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c28:	f003 0301 	and.w	r3, r3, #1
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d10c      	bne.n	8010c4a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c36:	f043 0301 	orr.w	r3, r3, #1
 8010c3a:	b2da      	uxtb	r2, r3
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010c42:	2103      	movs	r1, #3
 8010c44:	6878      	ldr	r0, [r7, #4]
 8010c46:	f000 f809 	bl	8010c5c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8010c4a:	3708      	adds	r7, #8
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}
 8010c50:	0801d2e0 	.word	0x0801d2e0
 8010c54:	0801d468 	.word	0x0801d468
 8010c58:	0801d330 	.word	0x0801d330

08010c5c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b082      	sub	sp, #8
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
 8010c64:	460b      	mov	r3, r1
 8010c66:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d106      	bne.n	8010c7c <netif_issue_reports+0x20>
 8010c6e:	4b18      	ldr	r3, [pc, #96]	; (8010cd0 <netif_issue_reports+0x74>)
 8010c70:	f240 326d 	movw	r2, #877	; 0x36d
 8010c74:	4917      	ldr	r1, [pc, #92]	; (8010cd4 <netif_issue_reports+0x78>)
 8010c76:	4818      	ldr	r0, [pc, #96]	; (8010cd8 <netif_issue_reports+0x7c>)
 8010c78:	f00a f83c 	bl	801acf4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c82:	f003 0304 	and.w	r3, r3, #4
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d01e      	beq.n	8010cc8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c90:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d017      	beq.n	8010cc8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010c98:	78fb      	ldrb	r3, [r7, #3]
 8010c9a:	f003 0301 	and.w	r3, r3, #1
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d013      	beq.n	8010cca <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	3304      	adds	r3, #4
 8010ca6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d00e      	beq.n	8010cca <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010cb2:	f003 0308 	and.w	r3, r3, #8
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d007      	beq.n	8010cca <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	3304      	adds	r3, #4
 8010cbe:	4619      	mov	r1, r3
 8010cc0:	6878      	ldr	r0, [r7, #4]
 8010cc2:	f008 fa8b 	bl	80191dc <etharp_request>
 8010cc6:	e000      	b.n	8010cca <netif_issue_reports+0x6e>
    return;
 8010cc8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8010cca:	3708      	adds	r7, #8
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd80      	pop	{r7, pc}
 8010cd0:	0801d2e0 	.word	0x0801d2e0
 8010cd4:	0801d484 	.word	0x0801d484
 8010cd8:	0801d330 	.word	0x0801d330

08010cdc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b082      	sub	sp, #8
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d107      	bne.n	8010cfa <netif_set_down+0x1e>
 8010cea:	4b12      	ldr	r3, [pc, #72]	; (8010d34 <netif_set_down+0x58>)
 8010cec:	f240 329b 	movw	r2, #923	; 0x39b
 8010cf0:	4911      	ldr	r1, [pc, #68]	; (8010d38 <netif_set_down+0x5c>)
 8010cf2:	4812      	ldr	r0, [pc, #72]	; (8010d3c <netif_set_down+0x60>)
 8010cf4:	f009 fffe 	bl	801acf4 <iprintf>
 8010cf8:	e019      	b.n	8010d2e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d00:	f003 0301 	and.w	r3, r3, #1
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d012      	beq.n	8010d2e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d0e:	f023 0301 	bic.w	r3, r3, #1
 8010d12:	b2da      	uxtb	r2, r3
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d20:	f003 0308 	and.w	r3, r3, #8
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d002      	beq.n	8010d2e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010d28:	6878      	ldr	r0, [r7, #4]
 8010d2a:	f007 fe15 	bl	8018958 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010d2e:	3708      	adds	r7, #8
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd80      	pop	{r7, pc}
 8010d34:	0801d2e0 	.word	0x0801d2e0
 8010d38:	0801d4a8 	.word	0x0801d4a8
 8010d3c:	0801d330 	.word	0x0801d330

08010d40 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b082      	sub	sp, #8
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d107      	bne.n	8010d5e <netif_set_link_up+0x1e>
 8010d4e:	4b13      	ldr	r3, [pc, #76]	; (8010d9c <netif_set_link_up+0x5c>)
 8010d50:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8010d54:	4912      	ldr	r1, [pc, #72]	; (8010da0 <netif_set_link_up+0x60>)
 8010d56:	4813      	ldr	r0, [pc, #76]	; (8010da4 <netif_set_link_up+0x64>)
 8010d58:	f009 ffcc 	bl	801acf4 <iprintf>
 8010d5c:	e01b      	b.n	8010d96 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d64:	f003 0304 	and.w	r3, r3, #4
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d114      	bne.n	8010d96 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d72:	f043 0304 	orr.w	r3, r3, #4
 8010d76:	b2da      	uxtb	r2, r3
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010d7e:	2103      	movs	r1, #3
 8010d80:	6878      	ldr	r0, [r7, #4]
 8010d82:	f7ff ff6b 	bl	8010c5c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	69db      	ldr	r3, [r3, #28]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d003      	beq.n	8010d96 <netif_set_link_up+0x56>
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	69db      	ldr	r3, [r3, #28]
 8010d92:	6878      	ldr	r0, [r7, #4]
 8010d94:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010d96:	3708      	adds	r7, #8
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}
 8010d9c:	0801d2e0 	.word	0x0801d2e0
 8010da0:	0801d4c8 	.word	0x0801d4c8
 8010da4:	0801d330 	.word	0x0801d330

08010da8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b082      	sub	sp, #8
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d107      	bne.n	8010dc6 <netif_set_link_down+0x1e>
 8010db6:	4b11      	ldr	r3, [pc, #68]	; (8010dfc <netif_set_link_down+0x54>)
 8010db8:	f240 4206 	movw	r2, #1030	; 0x406
 8010dbc:	4910      	ldr	r1, [pc, #64]	; (8010e00 <netif_set_link_down+0x58>)
 8010dbe:	4811      	ldr	r0, [pc, #68]	; (8010e04 <netif_set_link_down+0x5c>)
 8010dc0:	f009 ff98 	bl	801acf4 <iprintf>
 8010dc4:	e017      	b.n	8010df6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010dcc:	f003 0304 	and.w	r3, r3, #4
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d010      	beq.n	8010df6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010dda:	f023 0304 	bic.w	r3, r3, #4
 8010dde:	b2da      	uxtb	r2, r3
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	69db      	ldr	r3, [r3, #28]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d003      	beq.n	8010df6 <netif_set_link_down+0x4e>
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	69db      	ldr	r3, [r3, #28]
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010df6:	3708      	adds	r7, #8
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}
 8010dfc:	0801d2e0 	.word	0x0801d2e0
 8010e00:	0801d4ec 	.word	0x0801d4ec
 8010e04:	0801d330 	.word	0x0801d330

08010e08 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010e08:	b480      	push	{r7}
 8010e0a:	b083      	sub	sp, #12
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
 8010e10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d002      	beq.n	8010e1e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	683a      	ldr	r2, [r7, #0]
 8010e1c:	61da      	str	r2, [r3, #28]
  }
}
 8010e1e:	bf00      	nop
 8010e20:	370c      	adds	r7, #12
 8010e22:	46bd      	mov	sp, r7
 8010e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e28:	4770      	bx	lr

08010e2a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010e2a:	b480      	push	{r7}
 8010e2c:	b085      	sub	sp, #20
 8010e2e:	af00      	add	r7, sp, #0
 8010e30:	60f8      	str	r0, [r7, #12]
 8010e32:	60b9      	str	r1, [r7, #8]
 8010e34:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010e36:	f06f 030b 	mvn.w	r3, #11
}
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	3714      	adds	r7, #20
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e44:	4770      	bx	lr
	...

08010e48 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010e48:	b480      	push	{r7}
 8010e4a:	b085      	sub	sp, #20
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	4603      	mov	r3, r0
 8010e50:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8010e52:	79fb      	ldrb	r3, [r7, #7]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d013      	beq.n	8010e80 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010e58:	4b0d      	ldr	r3, [pc, #52]	; (8010e90 <netif_get_by_index+0x48>)
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	60fb      	str	r3, [r7, #12]
 8010e5e:	e00c      	b.n	8010e7a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e66:	3301      	adds	r3, #1
 8010e68:	b2db      	uxtb	r3, r3
 8010e6a:	79fa      	ldrb	r2, [r7, #7]
 8010e6c:	429a      	cmp	r2, r3
 8010e6e:	d101      	bne.n	8010e74 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	e006      	b.n	8010e82 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	60fb      	str	r3, [r7, #12]
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d1ef      	bne.n	8010e60 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8010e80:	2300      	movs	r3, #0
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	3714      	adds	r7, #20
 8010e86:	46bd      	mov	sp, r7
 8010e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8c:	4770      	bx	lr
 8010e8e:	bf00      	nop
 8010e90:	2001107c 	.word	0x2001107c

08010e94 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b082      	sub	sp, #8
 8010e98:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8010e9a:	f009 fec3 	bl	801ac24 <sys_arch_protect>
 8010e9e:	6038      	str	r0, [r7, #0]
 8010ea0:	4b0d      	ldr	r3, [pc, #52]	; (8010ed8 <pbuf_free_ooseq+0x44>)
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	701a      	strb	r2, [r3, #0]
 8010ea6:	6838      	ldr	r0, [r7, #0]
 8010ea8:	f009 feca 	bl	801ac40 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010eac:	4b0b      	ldr	r3, [pc, #44]	; (8010edc <pbuf_free_ooseq+0x48>)
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	607b      	str	r3, [r7, #4]
 8010eb2:	e00a      	b.n	8010eca <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d003      	beq.n	8010ec4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f002 fbab 	bl	8013618 <tcp_free_ooseq>
      return;
 8010ec2:	e005      	b.n	8010ed0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	68db      	ldr	r3, [r3, #12]
 8010ec8:	607b      	str	r3, [r7, #4]
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d1f1      	bne.n	8010eb4 <pbuf_free_ooseq+0x20>
    }
  }
}
 8010ed0:	3708      	adds	r7, #8
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}
 8010ed6:	bf00      	nop
 8010ed8:	20011085 	.word	0x20011085
 8010edc:	20011094 	.word	0x20011094

08010ee0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b082      	sub	sp, #8
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010ee8:	f7ff ffd4 	bl	8010e94 <pbuf_free_ooseq>
}
 8010eec:	bf00      	nop
 8010eee:	3708      	adds	r7, #8
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	bd80      	pop	{r7, pc}

08010ef4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b082      	sub	sp, #8
 8010ef8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8010efa:	f009 fe93 	bl	801ac24 <sys_arch_protect>
 8010efe:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010f00:	4b0f      	ldr	r3, [pc, #60]	; (8010f40 <pbuf_pool_is_empty+0x4c>)
 8010f02:	781b      	ldrb	r3, [r3, #0]
 8010f04:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8010f06:	4b0e      	ldr	r3, [pc, #56]	; (8010f40 <pbuf_pool_is_empty+0x4c>)
 8010f08:	2201      	movs	r2, #1
 8010f0a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010f0c:	6878      	ldr	r0, [r7, #4]
 8010f0e:	f009 fe97 	bl	801ac40 <sys_arch_unprotect>

  if (!queued) {
 8010f12:	78fb      	ldrb	r3, [r7, #3]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d10f      	bne.n	8010f38 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010f18:	2100      	movs	r1, #0
 8010f1a:	480a      	ldr	r0, [pc, #40]	; (8010f44 <pbuf_pool_is_empty+0x50>)
 8010f1c:	f7fe fe90 	bl	800fc40 <tcpip_try_callback>
 8010f20:	4603      	mov	r3, r0
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d008      	beq.n	8010f38 <pbuf_pool_is_empty+0x44>
 8010f26:	f009 fe7d 	bl	801ac24 <sys_arch_protect>
 8010f2a:	6078      	str	r0, [r7, #4]
 8010f2c:	4b04      	ldr	r3, [pc, #16]	; (8010f40 <pbuf_pool_is_empty+0x4c>)
 8010f2e:	2200      	movs	r2, #0
 8010f30:	701a      	strb	r2, [r3, #0]
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	f009 fe84 	bl	801ac40 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010f38:	bf00      	nop
 8010f3a:	3708      	adds	r7, #8
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}
 8010f40:	20011085 	.word	0x20011085
 8010f44:	08010ee1 	.word	0x08010ee1

08010f48 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010f48:	b480      	push	{r7}
 8010f4a:	b085      	sub	sp, #20
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	60f8      	str	r0, [r7, #12]
 8010f50:	60b9      	str	r1, [r7, #8]
 8010f52:	4611      	mov	r1, r2
 8010f54:	461a      	mov	r2, r3
 8010f56:	460b      	mov	r3, r1
 8010f58:	80fb      	strh	r3, [r7, #6]
 8010f5a:	4613      	mov	r3, r2
 8010f5c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	2200      	movs	r2, #0
 8010f62:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	68ba      	ldr	r2, [r7, #8]
 8010f68:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	88fa      	ldrh	r2, [r7, #6]
 8010f6e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	88ba      	ldrh	r2, [r7, #4]
 8010f74:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010f76:	8b3b      	ldrh	r3, [r7, #24]
 8010f78:	b2da      	uxtb	r2, r3
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	7f3a      	ldrb	r2, [r7, #28]
 8010f82:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	2201      	movs	r2, #1
 8010f88:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	73da      	strb	r2, [r3, #15]
}
 8010f90:	bf00      	nop
 8010f92:	3714      	adds	r7, #20
 8010f94:	46bd      	mov	sp, r7
 8010f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9a:	4770      	bx	lr

08010f9c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b08c      	sub	sp, #48	; 0x30
 8010fa0:	af02      	add	r7, sp, #8
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	71fb      	strb	r3, [r7, #7]
 8010fa6:	460b      	mov	r3, r1
 8010fa8:	80bb      	strh	r3, [r7, #4]
 8010faa:	4613      	mov	r3, r2
 8010fac:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010fae:	79fb      	ldrb	r3, [r7, #7]
 8010fb0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010fb2:	887b      	ldrh	r3, [r7, #2]
 8010fb4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010fb8:	d07f      	beq.n	80110ba <pbuf_alloc+0x11e>
 8010fba:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010fbe:	f300 80c8 	bgt.w	8011152 <pbuf_alloc+0x1b6>
 8010fc2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010fc6:	d010      	beq.n	8010fea <pbuf_alloc+0x4e>
 8010fc8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010fcc:	f300 80c1 	bgt.w	8011152 <pbuf_alloc+0x1b6>
 8010fd0:	2b01      	cmp	r3, #1
 8010fd2:	d002      	beq.n	8010fda <pbuf_alloc+0x3e>
 8010fd4:	2b41      	cmp	r3, #65	; 0x41
 8010fd6:	f040 80bc 	bne.w	8011152 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8010fda:	887a      	ldrh	r2, [r7, #2]
 8010fdc:	88bb      	ldrh	r3, [r7, #4]
 8010fde:	4619      	mov	r1, r3
 8010fe0:	2000      	movs	r0, #0
 8010fe2:	f000 f8d1 	bl	8011188 <pbuf_alloc_reference>
 8010fe6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8010fe8:	e0bd      	b.n	8011166 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010fea:	2300      	movs	r3, #0
 8010fec:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010ff2:	88bb      	ldrh	r3, [r7, #4]
 8010ff4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010ff6:	200c      	movs	r0, #12
 8010ff8:	f7ff fb9a 	bl	8010730 <memp_malloc>
 8010ffc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8010ffe:	693b      	ldr	r3, [r7, #16]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d109      	bne.n	8011018 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8011004:	f7ff ff76 	bl	8010ef4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8011008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801100a:	2b00      	cmp	r3, #0
 801100c:	d002      	beq.n	8011014 <pbuf_alloc+0x78>
            pbuf_free(p);
 801100e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011010:	f000 fada 	bl	80115c8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8011014:	2300      	movs	r3, #0
 8011016:	e0a7      	b.n	8011168 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8011018:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801101a:	3303      	adds	r3, #3
 801101c:	b29b      	uxth	r3, r3
 801101e:	f023 0303 	bic.w	r3, r3, #3
 8011022:	b29b      	uxth	r3, r3
 8011024:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8011028:	b29b      	uxth	r3, r3
 801102a:	8b7a      	ldrh	r2, [r7, #26]
 801102c:	4293      	cmp	r3, r2
 801102e:	bf28      	it	cs
 8011030:	4613      	movcs	r3, r2
 8011032:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8011034:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011036:	3310      	adds	r3, #16
 8011038:	693a      	ldr	r2, [r7, #16]
 801103a:	4413      	add	r3, r2
 801103c:	3303      	adds	r3, #3
 801103e:	f023 0303 	bic.w	r3, r3, #3
 8011042:	4618      	mov	r0, r3
 8011044:	89f9      	ldrh	r1, [r7, #14]
 8011046:	8b7a      	ldrh	r2, [r7, #26]
 8011048:	2300      	movs	r3, #0
 801104a:	9301      	str	r3, [sp, #4]
 801104c:	887b      	ldrh	r3, [r7, #2]
 801104e:	9300      	str	r3, [sp, #0]
 8011050:	460b      	mov	r3, r1
 8011052:	4601      	mov	r1, r0
 8011054:	6938      	ldr	r0, [r7, #16]
 8011056:	f7ff ff77 	bl	8010f48 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801105a:	693b      	ldr	r3, [r7, #16]
 801105c:	685b      	ldr	r3, [r3, #4]
 801105e:	f003 0303 	and.w	r3, r3, #3
 8011062:	2b00      	cmp	r3, #0
 8011064:	d006      	beq.n	8011074 <pbuf_alloc+0xd8>
 8011066:	4b42      	ldr	r3, [pc, #264]	; (8011170 <pbuf_alloc+0x1d4>)
 8011068:	f44f 7280 	mov.w	r2, #256	; 0x100
 801106c:	4941      	ldr	r1, [pc, #260]	; (8011174 <pbuf_alloc+0x1d8>)
 801106e:	4842      	ldr	r0, [pc, #264]	; (8011178 <pbuf_alloc+0x1dc>)
 8011070:	f009 fe40 	bl	801acf4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8011074:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011076:	3303      	adds	r3, #3
 8011078:	f023 0303 	bic.w	r3, r3, #3
 801107c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8011080:	d106      	bne.n	8011090 <pbuf_alloc+0xf4>
 8011082:	4b3b      	ldr	r3, [pc, #236]	; (8011170 <pbuf_alloc+0x1d4>)
 8011084:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011088:	493c      	ldr	r1, [pc, #240]	; (801117c <pbuf_alloc+0x1e0>)
 801108a:	483b      	ldr	r0, [pc, #236]	; (8011178 <pbuf_alloc+0x1dc>)
 801108c:	f009 fe32 	bl	801acf4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8011090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011092:	2b00      	cmp	r3, #0
 8011094:	d102      	bne.n	801109c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8011096:	693b      	ldr	r3, [r7, #16]
 8011098:	627b      	str	r3, [r7, #36]	; 0x24
 801109a:	e002      	b.n	80110a2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801109c:	69fb      	ldr	r3, [r7, #28]
 801109e:	693a      	ldr	r2, [r7, #16]
 80110a0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80110a2:	693b      	ldr	r3, [r7, #16]
 80110a4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80110a6:	8b7a      	ldrh	r2, [r7, #26]
 80110a8:	89fb      	ldrh	r3, [r7, #14]
 80110aa:	1ad3      	subs	r3, r2, r3
 80110ac:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80110ae:	2300      	movs	r3, #0
 80110b0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80110b2:	8b7b      	ldrh	r3, [r7, #26]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d19e      	bne.n	8010ff6 <pbuf_alloc+0x5a>
      break;
 80110b8:	e055      	b.n	8011166 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80110ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80110bc:	3303      	adds	r3, #3
 80110be:	b29b      	uxth	r3, r3
 80110c0:	f023 0303 	bic.w	r3, r3, #3
 80110c4:	b29a      	uxth	r2, r3
 80110c6:	88bb      	ldrh	r3, [r7, #4]
 80110c8:	3303      	adds	r3, #3
 80110ca:	b29b      	uxth	r3, r3
 80110cc:	f023 0303 	bic.w	r3, r3, #3
 80110d0:	b29b      	uxth	r3, r3
 80110d2:	4413      	add	r3, r2
 80110d4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80110d6:	8b3b      	ldrh	r3, [r7, #24]
 80110d8:	3310      	adds	r3, #16
 80110da:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80110dc:	8b3a      	ldrh	r2, [r7, #24]
 80110de:	88bb      	ldrh	r3, [r7, #4]
 80110e0:	3303      	adds	r3, #3
 80110e2:	f023 0303 	bic.w	r3, r3, #3
 80110e6:	429a      	cmp	r2, r3
 80110e8:	d306      	bcc.n	80110f8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80110ea:	8afa      	ldrh	r2, [r7, #22]
 80110ec:	88bb      	ldrh	r3, [r7, #4]
 80110ee:	3303      	adds	r3, #3
 80110f0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80110f4:	429a      	cmp	r2, r3
 80110f6:	d201      	bcs.n	80110fc <pbuf_alloc+0x160>
        return NULL;
 80110f8:	2300      	movs	r3, #0
 80110fa:	e035      	b.n	8011168 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80110fc:	8afb      	ldrh	r3, [r7, #22]
 80110fe:	4618      	mov	r0, r3
 8011100:	f7ff f972 	bl	80103e8 <mem_malloc>
 8011104:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8011106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011108:	2b00      	cmp	r3, #0
 801110a:	d101      	bne.n	8011110 <pbuf_alloc+0x174>
        return NULL;
 801110c:	2300      	movs	r3, #0
 801110e:	e02b      	b.n	8011168 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8011110:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011112:	3310      	adds	r3, #16
 8011114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011116:	4413      	add	r3, r2
 8011118:	3303      	adds	r3, #3
 801111a:	f023 0303 	bic.w	r3, r3, #3
 801111e:	4618      	mov	r0, r3
 8011120:	88b9      	ldrh	r1, [r7, #4]
 8011122:	88ba      	ldrh	r2, [r7, #4]
 8011124:	2300      	movs	r3, #0
 8011126:	9301      	str	r3, [sp, #4]
 8011128:	887b      	ldrh	r3, [r7, #2]
 801112a:	9300      	str	r3, [sp, #0]
 801112c:	460b      	mov	r3, r1
 801112e:	4601      	mov	r1, r0
 8011130:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011132:	f7ff ff09 	bl	8010f48 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8011136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011138:	685b      	ldr	r3, [r3, #4]
 801113a:	f003 0303 	and.w	r3, r3, #3
 801113e:	2b00      	cmp	r3, #0
 8011140:	d010      	beq.n	8011164 <pbuf_alloc+0x1c8>
 8011142:	4b0b      	ldr	r3, [pc, #44]	; (8011170 <pbuf_alloc+0x1d4>)
 8011144:	f44f 7291 	mov.w	r2, #290	; 0x122
 8011148:	490d      	ldr	r1, [pc, #52]	; (8011180 <pbuf_alloc+0x1e4>)
 801114a:	480b      	ldr	r0, [pc, #44]	; (8011178 <pbuf_alloc+0x1dc>)
 801114c:	f009 fdd2 	bl	801acf4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8011150:	e008      	b.n	8011164 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8011152:	4b07      	ldr	r3, [pc, #28]	; (8011170 <pbuf_alloc+0x1d4>)
 8011154:	f240 1227 	movw	r2, #295	; 0x127
 8011158:	490a      	ldr	r1, [pc, #40]	; (8011184 <pbuf_alloc+0x1e8>)
 801115a:	4807      	ldr	r0, [pc, #28]	; (8011178 <pbuf_alloc+0x1dc>)
 801115c:	f009 fdca 	bl	801acf4 <iprintf>
      return NULL;
 8011160:	2300      	movs	r3, #0
 8011162:	e001      	b.n	8011168 <pbuf_alloc+0x1cc>
      break;
 8011164:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8011166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011168:	4618      	mov	r0, r3
 801116a:	3728      	adds	r7, #40	; 0x28
 801116c:	46bd      	mov	sp, r7
 801116e:	bd80      	pop	{r7, pc}
 8011170:	0801d510 	.word	0x0801d510
 8011174:	0801d540 	.word	0x0801d540
 8011178:	0801d570 	.word	0x0801d570
 801117c:	0801d598 	.word	0x0801d598
 8011180:	0801d5cc 	.word	0x0801d5cc
 8011184:	0801d5f8 	.word	0x0801d5f8

08011188 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b086      	sub	sp, #24
 801118c:	af02      	add	r7, sp, #8
 801118e:	6078      	str	r0, [r7, #4]
 8011190:	460b      	mov	r3, r1
 8011192:	807b      	strh	r3, [r7, #2]
 8011194:	4613      	mov	r3, r2
 8011196:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8011198:	883b      	ldrh	r3, [r7, #0]
 801119a:	2b41      	cmp	r3, #65	; 0x41
 801119c:	d009      	beq.n	80111b2 <pbuf_alloc_reference+0x2a>
 801119e:	883b      	ldrh	r3, [r7, #0]
 80111a0:	2b01      	cmp	r3, #1
 80111a2:	d006      	beq.n	80111b2 <pbuf_alloc_reference+0x2a>
 80111a4:	4b0f      	ldr	r3, [pc, #60]	; (80111e4 <pbuf_alloc_reference+0x5c>)
 80111a6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80111aa:	490f      	ldr	r1, [pc, #60]	; (80111e8 <pbuf_alloc_reference+0x60>)
 80111ac:	480f      	ldr	r0, [pc, #60]	; (80111ec <pbuf_alloc_reference+0x64>)
 80111ae:	f009 fda1 	bl	801acf4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80111b2:	200b      	movs	r0, #11
 80111b4:	f7ff fabc 	bl	8010730 <memp_malloc>
 80111b8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d101      	bne.n	80111c4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80111c0:	2300      	movs	r3, #0
 80111c2:	e00b      	b.n	80111dc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80111c4:	8879      	ldrh	r1, [r7, #2]
 80111c6:	887a      	ldrh	r2, [r7, #2]
 80111c8:	2300      	movs	r3, #0
 80111ca:	9301      	str	r3, [sp, #4]
 80111cc:	883b      	ldrh	r3, [r7, #0]
 80111ce:	9300      	str	r3, [sp, #0]
 80111d0:	460b      	mov	r3, r1
 80111d2:	6879      	ldr	r1, [r7, #4]
 80111d4:	68f8      	ldr	r0, [r7, #12]
 80111d6:	f7ff feb7 	bl	8010f48 <pbuf_init_alloced_pbuf>
  return p;
 80111da:	68fb      	ldr	r3, [r7, #12]
}
 80111dc:	4618      	mov	r0, r3
 80111de:	3710      	adds	r7, #16
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}
 80111e4:	0801d510 	.word	0x0801d510
 80111e8:	0801d614 	.word	0x0801d614
 80111ec:	0801d570 	.word	0x0801d570

080111f0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b088      	sub	sp, #32
 80111f4:	af02      	add	r7, sp, #8
 80111f6:	607b      	str	r3, [r7, #4]
 80111f8:	4603      	mov	r3, r0
 80111fa:	73fb      	strb	r3, [r7, #15]
 80111fc:	460b      	mov	r3, r1
 80111fe:	81bb      	strh	r3, [r7, #12]
 8011200:	4613      	mov	r3, r2
 8011202:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8011204:	7bfb      	ldrb	r3, [r7, #15]
 8011206:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8011208:	8a7b      	ldrh	r3, [r7, #18]
 801120a:	3303      	adds	r3, #3
 801120c:	f023 0203 	bic.w	r2, r3, #3
 8011210:	89bb      	ldrh	r3, [r7, #12]
 8011212:	441a      	add	r2, r3
 8011214:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011216:	429a      	cmp	r2, r3
 8011218:	d901      	bls.n	801121e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801121a:	2300      	movs	r3, #0
 801121c:	e018      	b.n	8011250 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801121e:	6a3b      	ldr	r3, [r7, #32]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d007      	beq.n	8011234 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8011224:	8a7b      	ldrh	r3, [r7, #18]
 8011226:	3303      	adds	r3, #3
 8011228:	f023 0303 	bic.w	r3, r3, #3
 801122c:	6a3a      	ldr	r2, [r7, #32]
 801122e:	4413      	add	r3, r2
 8011230:	617b      	str	r3, [r7, #20]
 8011232:	e001      	b.n	8011238 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8011234:	2300      	movs	r3, #0
 8011236:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8011238:	6878      	ldr	r0, [r7, #4]
 801123a:	89b9      	ldrh	r1, [r7, #12]
 801123c:	89ba      	ldrh	r2, [r7, #12]
 801123e:	2302      	movs	r3, #2
 8011240:	9301      	str	r3, [sp, #4]
 8011242:	897b      	ldrh	r3, [r7, #10]
 8011244:	9300      	str	r3, [sp, #0]
 8011246:	460b      	mov	r3, r1
 8011248:	6979      	ldr	r1, [r7, #20]
 801124a:	f7ff fe7d 	bl	8010f48 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801124e:	687b      	ldr	r3, [r7, #4]
}
 8011250:	4618      	mov	r0, r3
 8011252:	3718      	adds	r7, #24
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}

08011258 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b084      	sub	sp, #16
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
 8011260:	460b      	mov	r3, r1
 8011262:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d106      	bne.n	8011278 <pbuf_realloc+0x20>
 801126a:	4b3a      	ldr	r3, [pc, #232]	; (8011354 <pbuf_realloc+0xfc>)
 801126c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8011270:	4939      	ldr	r1, [pc, #228]	; (8011358 <pbuf_realloc+0x100>)
 8011272:	483a      	ldr	r0, [pc, #232]	; (801135c <pbuf_realloc+0x104>)
 8011274:	f009 fd3e 	bl	801acf4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	891b      	ldrh	r3, [r3, #8]
 801127c:	887a      	ldrh	r2, [r7, #2]
 801127e:	429a      	cmp	r2, r3
 8011280:	d263      	bcs.n	801134a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	891a      	ldrh	r2, [r3, #8]
 8011286:	887b      	ldrh	r3, [r7, #2]
 8011288:	1ad3      	subs	r3, r2, r3
 801128a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801128c:	887b      	ldrh	r3, [r7, #2]
 801128e:	817b      	strh	r3, [r7, #10]
  q = p;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8011294:	e018      	b.n	80112c8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	895b      	ldrh	r3, [r3, #10]
 801129a:	897a      	ldrh	r2, [r7, #10]
 801129c:	1ad3      	subs	r3, r2, r3
 801129e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	891a      	ldrh	r2, [r3, #8]
 80112a4:	893b      	ldrh	r3, [r7, #8]
 80112a6:	1ad3      	subs	r3, r2, r3
 80112a8:	b29a      	uxth	r2, r3
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d106      	bne.n	80112c8 <pbuf_realloc+0x70>
 80112ba:	4b26      	ldr	r3, [pc, #152]	; (8011354 <pbuf_realloc+0xfc>)
 80112bc:	f240 12af 	movw	r2, #431	; 0x1af
 80112c0:	4927      	ldr	r1, [pc, #156]	; (8011360 <pbuf_realloc+0x108>)
 80112c2:	4826      	ldr	r0, [pc, #152]	; (801135c <pbuf_realloc+0x104>)
 80112c4:	f009 fd16 	bl	801acf4 <iprintf>
  while (rem_len > q->len) {
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	895b      	ldrh	r3, [r3, #10]
 80112cc:	897a      	ldrh	r2, [r7, #10]
 80112ce:	429a      	cmp	r2, r3
 80112d0:	d8e1      	bhi.n	8011296 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	7b1b      	ldrb	r3, [r3, #12]
 80112d6:	f003 030f 	and.w	r3, r3, #15
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d121      	bne.n	8011322 <pbuf_realloc+0xca>
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	895b      	ldrh	r3, [r3, #10]
 80112e2:	897a      	ldrh	r2, [r7, #10]
 80112e4:	429a      	cmp	r2, r3
 80112e6:	d01c      	beq.n	8011322 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	7b5b      	ldrb	r3, [r3, #13]
 80112ec:	f003 0302 	and.w	r3, r3, #2
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d116      	bne.n	8011322 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	685a      	ldr	r2, [r3, #4]
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	1ad3      	subs	r3, r2, r3
 80112fc:	b29a      	uxth	r2, r3
 80112fe:	897b      	ldrh	r3, [r7, #10]
 8011300:	4413      	add	r3, r2
 8011302:	b29b      	uxth	r3, r3
 8011304:	4619      	mov	r1, r3
 8011306:	68f8      	ldr	r0, [r7, #12]
 8011308:	f7fe ff64 	bl	80101d4 <mem_trim>
 801130c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d106      	bne.n	8011322 <pbuf_realloc+0xca>
 8011314:	4b0f      	ldr	r3, [pc, #60]	; (8011354 <pbuf_realloc+0xfc>)
 8011316:	f240 12bd 	movw	r2, #445	; 0x1bd
 801131a:	4912      	ldr	r1, [pc, #72]	; (8011364 <pbuf_realloc+0x10c>)
 801131c:	480f      	ldr	r0, [pc, #60]	; (801135c <pbuf_realloc+0x104>)
 801131e:	f009 fce9 	bl	801acf4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	897a      	ldrh	r2, [r7, #10]
 8011326:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	895a      	ldrh	r2, [r3, #10]
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d004      	beq.n	8011342 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	4618      	mov	r0, r3
 801133e:	f000 f943 	bl	80115c8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	2200      	movs	r2, #0
 8011346:	601a      	str	r2, [r3, #0]
 8011348:	e000      	b.n	801134c <pbuf_realloc+0xf4>
    return;
 801134a:	bf00      	nop

}
 801134c:	3710      	adds	r7, #16
 801134e:	46bd      	mov	sp, r7
 8011350:	bd80      	pop	{r7, pc}
 8011352:	bf00      	nop
 8011354:	0801d510 	.word	0x0801d510
 8011358:	0801d628 	.word	0x0801d628
 801135c:	0801d570 	.word	0x0801d570
 8011360:	0801d640 	.word	0x0801d640
 8011364:	0801d658 	.word	0x0801d658

08011368 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8011368:	b580      	push	{r7, lr}
 801136a:	b086      	sub	sp, #24
 801136c:	af00      	add	r7, sp, #0
 801136e:	60f8      	str	r0, [r7, #12]
 8011370:	60b9      	str	r1, [r7, #8]
 8011372:	4613      	mov	r3, r2
 8011374:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d106      	bne.n	801138a <pbuf_add_header_impl+0x22>
 801137c:	4b2b      	ldr	r3, [pc, #172]	; (801142c <pbuf_add_header_impl+0xc4>)
 801137e:	f240 12df 	movw	r2, #479	; 0x1df
 8011382:	492b      	ldr	r1, [pc, #172]	; (8011430 <pbuf_add_header_impl+0xc8>)
 8011384:	482b      	ldr	r0, [pc, #172]	; (8011434 <pbuf_add_header_impl+0xcc>)
 8011386:	f009 fcb5 	bl	801acf4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d003      	beq.n	8011398 <pbuf_add_header_impl+0x30>
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011396:	d301      	bcc.n	801139c <pbuf_add_header_impl+0x34>
    return 1;
 8011398:	2301      	movs	r3, #1
 801139a:	e043      	b.n	8011424 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801139c:	68bb      	ldr	r3, [r7, #8]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d101      	bne.n	80113a6 <pbuf_add_header_impl+0x3e>
    return 0;
 80113a2:	2300      	movs	r3, #0
 80113a4:	e03e      	b.n	8011424 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80113a6:	68bb      	ldr	r3, [r7, #8]
 80113a8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	891a      	ldrh	r2, [r3, #8]
 80113ae:	8a7b      	ldrh	r3, [r7, #18]
 80113b0:	4413      	add	r3, r2
 80113b2:	b29b      	uxth	r3, r3
 80113b4:	8a7a      	ldrh	r2, [r7, #18]
 80113b6:	429a      	cmp	r2, r3
 80113b8:	d901      	bls.n	80113be <pbuf_add_header_impl+0x56>
    return 1;
 80113ba:	2301      	movs	r3, #1
 80113bc:	e032      	b.n	8011424 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	7b1b      	ldrb	r3, [r3, #12]
 80113c2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80113c4:	8a3b      	ldrh	r3, [r7, #16]
 80113c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d00c      	beq.n	80113e8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	685a      	ldr	r2, [r3, #4]
 80113d2:	68bb      	ldr	r3, [r7, #8]
 80113d4:	425b      	negs	r3, r3
 80113d6:	4413      	add	r3, r2
 80113d8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	3310      	adds	r3, #16
 80113de:	697a      	ldr	r2, [r7, #20]
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d20d      	bcs.n	8011400 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80113e4:	2301      	movs	r3, #1
 80113e6:	e01d      	b.n	8011424 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80113e8:	79fb      	ldrb	r3, [r7, #7]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d006      	beq.n	80113fc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	685a      	ldr	r2, [r3, #4]
 80113f2:	68bb      	ldr	r3, [r7, #8]
 80113f4:	425b      	negs	r3, r3
 80113f6:	4413      	add	r3, r2
 80113f8:	617b      	str	r3, [r7, #20]
 80113fa:	e001      	b.n	8011400 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80113fc:	2301      	movs	r3, #1
 80113fe:	e011      	b.n	8011424 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	697a      	ldr	r2, [r7, #20]
 8011404:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	895a      	ldrh	r2, [r3, #10]
 801140a:	8a7b      	ldrh	r3, [r7, #18]
 801140c:	4413      	add	r3, r2
 801140e:	b29a      	uxth	r2, r3
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	891a      	ldrh	r2, [r3, #8]
 8011418:	8a7b      	ldrh	r3, [r7, #18]
 801141a:	4413      	add	r3, r2
 801141c:	b29a      	uxth	r2, r3
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	811a      	strh	r2, [r3, #8]


  return 0;
 8011422:	2300      	movs	r3, #0
}
 8011424:	4618      	mov	r0, r3
 8011426:	3718      	adds	r7, #24
 8011428:	46bd      	mov	sp, r7
 801142a:	bd80      	pop	{r7, pc}
 801142c:	0801d510 	.word	0x0801d510
 8011430:	0801d674 	.word	0x0801d674
 8011434:	0801d570 	.word	0x0801d570

08011438 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b082      	sub	sp, #8
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
 8011440:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8011442:	2200      	movs	r2, #0
 8011444:	6839      	ldr	r1, [r7, #0]
 8011446:	6878      	ldr	r0, [r7, #4]
 8011448:	f7ff ff8e 	bl	8011368 <pbuf_add_header_impl>
 801144c:	4603      	mov	r3, r0
}
 801144e:	4618      	mov	r0, r3
 8011450:	3708      	adds	r7, #8
 8011452:	46bd      	mov	sp, r7
 8011454:	bd80      	pop	{r7, pc}
	...

08011458 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b084      	sub	sp, #16
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
 8011460:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d106      	bne.n	8011476 <pbuf_remove_header+0x1e>
 8011468:	4b20      	ldr	r3, [pc, #128]	; (80114ec <pbuf_remove_header+0x94>)
 801146a:	f240 224b 	movw	r2, #587	; 0x24b
 801146e:	4920      	ldr	r1, [pc, #128]	; (80114f0 <pbuf_remove_header+0x98>)
 8011470:	4820      	ldr	r0, [pc, #128]	; (80114f4 <pbuf_remove_header+0x9c>)
 8011472:	f009 fc3f 	bl	801acf4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d003      	beq.n	8011484 <pbuf_remove_header+0x2c>
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011482:	d301      	bcc.n	8011488 <pbuf_remove_header+0x30>
    return 1;
 8011484:	2301      	movs	r3, #1
 8011486:	e02c      	b.n	80114e2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d101      	bne.n	8011492 <pbuf_remove_header+0x3a>
    return 0;
 801148e:	2300      	movs	r3, #0
 8011490:	e027      	b.n	80114e2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	895b      	ldrh	r3, [r3, #10]
 801149a:	89fa      	ldrh	r2, [r7, #14]
 801149c:	429a      	cmp	r2, r3
 801149e:	d908      	bls.n	80114b2 <pbuf_remove_header+0x5a>
 80114a0:	4b12      	ldr	r3, [pc, #72]	; (80114ec <pbuf_remove_header+0x94>)
 80114a2:	f240 2255 	movw	r2, #597	; 0x255
 80114a6:	4914      	ldr	r1, [pc, #80]	; (80114f8 <pbuf_remove_header+0xa0>)
 80114a8:	4812      	ldr	r0, [pc, #72]	; (80114f4 <pbuf_remove_header+0x9c>)
 80114aa:	f009 fc23 	bl	801acf4 <iprintf>
 80114ae:	2301      	movs	r3, #1
 80114b0:	e017      	b.n	80114e2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	685b      	ldr	r3, [r3, #4]
 80114b6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	685a      	ldr	r2, [r3, #4]
 80114bc:	683b      	ldr	r3, [r7, #0]
 80114be:	441a      	add	r2, r3
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	895a      	ldrh	r2, [r3, #10]
 80114c8:	89fb      	ldrh	r3, [r7, #14]
 80114ca:	1ad3      	subs	r3, r2, r3
 80114cc:	b29a      	uxth	r2, r3
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	891a      	ldrh	r2, [r3, #8]
 80114d6:	89fb      	ldrh	r3, [r7, #14]
 80114d8:	1ad3      	subs	r3, r2, r3
 80114da:	b29a      	uxth	r2, r3
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80114e0:	2300      	movs	r3, #0
}
 80114e2:	4618      	mov	r0, r3
 80114e4:	3710      	adds	r7, #16
 80114e6:	46bd      	mov	sp, r7
 80114e8:	bd80      	pop	{r7, pc}
 80114ea:	bf00      	nop
 80114ec:	0801d510 	.word	0x0801d510
 80114f0:	0801d674 	.word	0x0801d674
 80114f4:	0801d570 	.word	0x0801d570
 80114f8:	0801d680 	.word	0x0801d680

080114fc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b082      	sub	sp, #8
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
 8011504:	460b      	mov	r3, r1
 8011506:	807b      	strh	r3, [r7, #2]
 8011508:	4613      	mov	r3, r2
 801150a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801150c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011510:	2b00      	cmp	r3, #0
 8011512:	da08      	bge.n	8011526 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8011514:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011518:	425b      	negs	r3, r3
 801151a:	4619      	mov	r1, r3
 801151c:	6878      	ldr	r0, [r7, #4]
 801151e:	f7ff ff9b 	bl	8011458 <pbuf_remove_header>
 8011522:	4603      	mov	r3, r0
 8011524:	e007      	b.n	8011536 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8011526:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801152a:	787a      	ldrb	r2, [r7, #1]
 801152c:	4619      	mov	r1, r3
 801152e:	6878      	ldr	r0, [r7, #4]
 8011530:	f7ff ff1a 	bl	8011368 <pbuf_add_header_impl>
 8011534:	4603      	mov	r3, r0
  }
}
 8011536:	4618      	mov	r0, r3
 8011538:	3708      	adds	r7, #8
 801153a:	46bd      	mov	sp, r7
 801153c:	bd80      	pop	{r7, pc}

0801153e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801153e:	b580      	push	{r7, lr}
 8011540:	b082      	sub	sp, #8
 8011542:	af00      	add	r7, sp, #0
 8011544:	6078      	str	r0, [r7, #4]
 8011546:	460b      	mov	r3, r1
 8011548:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801154a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801154e:	2201      	movs	r2, #1
 8011550:	4619      	mov	r1, r3
 8011552:	6878      	ldr	r0, [r7, #4]
 8011554:	f7ff ffd2 	bl	80114fc <pbuf_header_impl>
 8011558:	4603      	mov	r3, r0
}
 801155a:	4618      	mov	r0, r3
 801155c:	3708      	adds	r7, #8
 801155e:	46bd      	mov	sp, r7
 8011560:	bd80      	pop	{r7, pc}

08011562 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 8011562:	b580      	push	{r7, lr}
 8011564:	b086      	sub	sp, #24
 8011566:	af00      	add	r7, sp, #0
 8011568:	6078      	str	r0, [r7, #4]
 801156a:	460b      	mov	r3, r1
 801156c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 8011572:	887b      	ldrh	r3, [r7, #2]
 8011574:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8011576:	e01c      	b.n	80115b2 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 8011578:	697b      	ldr	r3, [r7, #20]
 801157a:	895b      	ldrh	r3, [r3, #10]
 801157c:	8a7a      	ldrh	r2, [r7, #18]
 801157e:	429a      	cmp	r2, r3
 8011580:	d310      	bcc.n	80115a4 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 8011582:	697b      	ldr	r3, [r7, #20]
 8011584:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 8011586:	697b      	ldr	r3, [r7, #20]
 8011588:	895b      	ldrh	r3, [r3, #10]
 801158a:	8a7a      	ldrh	r2, [r7, #18]
 801158c:	1ad3      	subs	r3, r2, r3
 801158e:	827b      	strh	r3, [r7, #18]
      p = p->next;
 8011590:	697b      	ldr	r3, [r7, #20]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	617b      	str	r3, [r7, #20]
      f->next = 0;
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	2200      	movs	r2, #0
 801159a:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 801159c:	68f8      	ldr	r0, [r7, #12]
 801159e:	f000 f813 	bl	80115c8 <pbuf_free>
 80115a2:	e006      	b.n	80115b2 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 80115a4:	8a7b      	ldrh	r3, [r7, #18]
 80115a6:	4619      	mov	r1, r3
 80115a8:	6978      	ldr	r0, [r7, #20]
 80115aa:	f7ff ff55 	bl	8011458 <pbuf_remove_header>
      free_left = 0;
 80115ae:	2300      	movs	r3, #0
 80115b0:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 80115b2:	8a7b      	ldrh	r3, [r7, #18]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d002      	beq.n	80115be <pbuf_free_header+0x5c>
 80115b8:	697b      	ldr	r3, [r7, #20]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d1dc      	bne.n	8011578 <pbuf_free_header+0x16>
    }
  }
  return p;
 80115be:	697b      	ldr	r3, [r7, #20]
}
 80115c0:	4618      	mov	r0, r3
 80115c2:	3718      	adds	r7, #24
 80115c4:	46bd      	mov	sp, r7
 80115c6:	bd80      	pop	{r7, pc}

080115c8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b088      	sub	sp, #32
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d10b      	bne.n	80115ee <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d106      	bne.n	80115ea <pbuf_free+0x22>
 80115dc:	4b3b      	ldr	r3, [pc, #236]	; (80116cc <pbuf_free+0x104>)
 80115de:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80115e2:	493b      	ldr	r1, [pc, #236]	; (80116d0 <pbuf_free+0x108>)
 80115e4:	483b      	ldr	r0, [pc, #236]	; (80116d4 <pbuf_free+0x10c>)
 80115e6:	f009 fb85 	bl	801acf4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80115ea:	2300      	movs	r3, #0
 80115ec:	e069      	b.n	80116c2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80115ee:	2300      	movs	r3, #0
 80115f0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80115f2:	e062      	b.n	80116ba <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80115f4:	f009 fb16 	bl	801ac24 <sys_arch_protect>
 80115f8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	7b9b      	ldrb	r3, [r3, #14]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d106      	bne.n	8011610 <pbuf_free+0x48>
 8011602:	4b32      	ldr	r3, [pc, #200]	; (80116cc <pbuf_free+0x104>)
 8011604:	f240 22f1 	movw	r2, #753	; 0x2f1
 8011608:	4933      	ldr	r1, [pc, #204]	; (80116d8 <pbuf_free+0x110>)
 801160a:	4832      	ldr	r0, [pc, #200]	; (80116d4 <pbuf_free+0x10c>)
 801160c:	f009 fb72 	bl	801acf4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	7b9b      	ldrb	r3, [r3, #14]
 8011614:	3b01      	subs	r3, #1
 8011616:	b2da      	uxtb	r2, r3
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	739a      	strb	r2, [r3, #14]
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	7b9b      	ldrb	r3, [r3, #14]
 8011620:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8011622:	69b8      	ldr	r0, [r7, #24]
 8011624:	f009 fb0c 	bl	801ac40 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8011628:	7dfb      	ldrb	r3, [r7, #23]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d143      	bne.n	80116b6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	7b1b      	ldrb	r3, [r3, #12]
 8011638:	f003 030f 	and.w	r3, r3, #15
 801163c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	7b5b      	ldrb	r3, [r3, #13]
 8011642:	f003 0302 	and.w	r3, r3, #2
 8011646:	2b00      	cmp	r3, #0
 8011648:	d011      	beq.n	801166e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	691b      	ldr	r3, [r3, #16]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d106      	bne.n	8011664 <pbuf_free+0x9c>
 8011656:	4b1d      	ldr	r3, [pc, #116]	; (80116cc <pbuf_free+0x104>)
 8011658:	f240 22ff 	movw	r2, #767	; 0x2ff
 801165c:	491f      	ldr	r1, [pc, #124]	; (80116dc <pbuf_free+0x114>)
 801165e:	481d      	ldr	r0, [pc, #116]	; (80116d4 <pbuf_free+0x10c>)
 8011660:	f009 fb48 	bl	801acf4 <iprintf>
        pc->custom_free_function(p);
 8011664:	68bb      	ldr	r3, [r7, #8]
 8011666:	691b      	ldr	r3, [r3, #16]
 8011668:	6878      	ldr	r0, [r7, #4]
 801166a:	4798      	blx	r3
 801166c:	e01d      	b.n	80116aa <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801166e:	7bfb      	ldrb	r3, [r7, #15]
 8011670:	2b02      	cmp	r3, #2
 8011672:	d104      	bne.n	801167e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8011674:	6879      	ldr	r1, [r7, #4]
 8011676:	200c      	movs	r0, #12
 8011678:	f7ff f8d0 	bl	801081c <memp_free>
 801167c:	e015      	b.n	80116aa <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801167e:	7bfb      	ldrb	r3, [r7, #15]
 8011680:	2b01      	cmp	r3, #1
 8011682:	d104      	bne.n	801168e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8011684:	6879      	ldr	r1, [r7, #4]
 8011686:	200b      	movs	r0, #11
 8011688:	f7ff f8c8 	bl	801081c <memp_free>
 801168c:	e00d      	b.n	80116aa <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801168e:	7bfb      	ldrb	r3, [r7, #15]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d103      	bne.n	801169c <pbuf_free+0xd4>
          mem_free(p);
 8011694:	6878      	ldr	r0, [r7, #4]
 8011696:	f7fe fd0d 	bl	80100b4 <mem_free>
 801169a:	e006      	b.n	80116aa <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801169c:	4b0b      	ldr	r3, [pc, #44]	; (80116cc <pbuf_free+0x104>)
 801169e:	f240 320f 	movw	r2, #783	; 0x30f
 80116a2:	490f      	ldr	r1, [pc, #60]	; (80116e0 <pbuf_free+0x118>)
 80116a4:	480b      	ldr	r0, [pc, #44]	; (80116d4 <pbuf_free+0x10c>)
 80116a6:	f009 fb25 	bl	801acf4 <iprintf>
        }
      }
      count++;
 80116aa:	7ffb      	ldrb	r3, [r7, #31]
 80116ac:	3301      	adds	r3, #1
 80116ae:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80116b0:	693b      	ldr	r3, [r7, #16]
 80116b2:	607b      	str	r3, [r7, #4]
 80116b4:	e001      	b.n	80116ba <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80116b6:	2300      	movs	r3, #0
 80116b8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d199      	bne.n	80115f4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80116c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80116c2:	4618      	mov	r0, r3
 80116c4:	3720      	adds	r7, #32
 80116c6:	46bd      	mov	sp, r7
 80116c8:	bd80      	pop	{r7, pc}
 80116ca:	bf00      	nop
 80116cc:	0801d510 	.word	0x0801d510
 80116d0:	0801d674 	.word	0x0801d674
 80116d4:	0801d570 	.word	0x0801d570
 80116d8:	0801d6a0 	.word	0x0801d6a0
 80116dc:	0801d6b8 	.word	0x0801d6b8
 80116e0:	0801d6dc 	.word	0x0801d6dc

080116e4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80116e4:	b480      	push	{r7}
 80116e6:	b085      	sub	sp, #20
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80116ec:	2300      	movs	r3, #0
 80116ee:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80116f0:	e005      	b.n	80116fe <pbuf_clen+0x1a>
    ++len;
 80116f2:	89fb      	ldrh	r3, [r7, #14]
 80116f4:	3301      	adds	r3, #1
 80116f6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d1f6      	bne.n	80116f2 <pbuf_clen+0xe>
  }
  return len;
 8011704:	89fb      	ldrh	r3, [r7, #14]
}
 8011706:	4618      	mov	r0, r3
 8011708:	3714      	adds	r7, #20
 801170a:	46bd      	mov	sp, r7
 801170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011710:	4770      	bx	lr
	...

08011714 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b084      	sub	sp, #16
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d016      	beq.n	8011750 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8011722:	f009 fa7f 	bl	801ac24 <sys_arch_protect>
 8011726:	60f8      	str	r0, [r7, #12]
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	7b9b      	ldrb	r3, [r3, #14]
 801172c:	3301      	adds	r3, #1
 801172e:	b2da      	uxtb	r2, r3
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	739a      	strb	r2, [r3, #14]
 8011734:	68f8      	ldr	r0, [r7, #12]
 8011736:	f009 fa83 	bl	801ac40 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	7b9b      	ldrb	r3, [r3, #14]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d106      	bne.n	8011750 <pbuf_ref+0x3c>
 8011742:	4b05      	ldr	r3, [pc, #20]	; (8011758 <pbuf_ref+0x44>)
 8011744:	f240 3242 	movw	r2, #834	; 0x342
 8011748:	4904      	ldr	r1, [pc, #16]	; (801175c <pbuf_ref+0x48>)
 801174a:	4805      	ldr	r0, [pc, #20]	; (8011760 <pbuf_ref+0x4c>)
 801174c:	f009 fad2 	bl	801acf4 <iprintf>
  }
}
 8011750:	bf00      	nop
 8011752:	3710      	adds	r7, #16
 8011754:	46bd      	mov	sp, r7
 8011756:	bd80      	pop	{r7, pc}
 8011758:	0801d510 	.word	0x0801d510
 801175c:	0801d6f0 	.word	0x0801d6f0
 8011760:	0801d570 	.word	0x0801d570

08011764 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b084      	sub	sp, #16
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d002      	beq.n	801177a <pbuf_cat+0x16>
 8011774:	683b      	ldr	r3, [r7, #0]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d107      	bne.n	801178a <pbuf_cat+0x26>
 801177a:	4b20      	ldr	r3, [pc, #128]	; (80117fc <pbuf_cat+0x98>)
 801177c:	f240 3259 	movw	r2, #857	; 0x359
 8011780:	491f      	ldr	r1, [pc, #124]	; (8011800 <pbuf_cat+0x9c>)
 8011782:	4820      	ldr	r0, [pc, #128]	; (8011804 <pbuf_cat+0xa0>)
 8011784:	f009 fab6 	bl	801acf4 <iprintf>
 8011788:	e034      	b.n	80117f4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	60fb      	str	r3, [r7, #12]
 801178e:	e00a      	b.n	80117a6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	891a      	ldrh	r2, [r3, #8]
 8011794:	683b      	ldr	r3, [r7, #0]
 8011796:	891b      	ldrh	r3, [r3, #8]
 8011798:	4413      	add	r3, r2
 801179a:	b29a      	uxth	r2, r3
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	60fb      	str	r3, [r7, #12]
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d1f0      	bne.n	8011790 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	891a      	ldrh	r2, [r3, #8]
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	895b      	ldrh	r3, [r3, #10]
 80117b6:	429a      	cmp	r2, r3
 80117b8:	d006      	beq.n	80117c8 <pbuf_cat+0x64>
 80117ba:	4b10      	ldr	r3, [pc, #64]	; (80117fc <pbuf_cat+0x98>)
 80117bc:	f240 3262 	movw	r2, #866	; 0x362
 80117c0:	4911      	ldr	r1, [pc, #68]	; (8011808 <pbuf_cat+0xa4>)
 80117c2:	4810      	ldr	r0, [pc, #64]	; (8011804 <pbuf_cat+0xa0>)
 80117c4:	f009 fa96 	bl	801acf4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d006      	beq.n	80117de <pbuf_cat+0x7a>
 80117d0:	4b0a      	ldr	r3, [pc, #40]	; (80117fc <pbuf_cat+0x98>)
 80117d2:	f240 3263 	movw	r2, #867	; 0x363
 80117d6:	490d      	ldr	r1, [pc, #52]	; (801180c <pbuf_cat+0xa8>)
 80117d8:	480a      	ldr	r0, [pc, #40]	; (8011804 <pbuf_cat+0xa0>)
 80117da:	f009 fa8b 	bl	801acf4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	891a      	ldrh	r2, [r3, #8]
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	891b      	ldrh	r3, [r3, #8]
 80117e6:	4413      	add	r3, r2
 80117e8:	b29a      	uxth	r2, r3
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	683a      	ldr	r2, [r7, #0]
 80117f2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80117f4:	3710      	adds	r7, #16
 80117f6:	46bd      	mov	sp, r7
 80117f8:	bd80      	pop	{r7, pc}
 80117fa:	bf00      	nop
 80117fc:	0801d510 	.word	0x0801d510
 8011800:	0801d704 	.word	0x0801d704
 8011804:	0801d570 	.word	0x0801d570
 8011808:	0801d73c 	.word	0x0801d73c
 801180c:	0801d76c 	.word	0x0801d76c

08011810 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b086      	sub	sp, #24
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
 8011818:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801181a:	2300      	movs	r3, #0
 801181c:	617b      	str	r3, [r7, #20]
 801181e:	2300      	movs	r3, #0
 8011820:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d008      	beq.n	801183a <pbuf_copy+0x2a>
 8011828:	683b      	ldr	r3, [r7, #0]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d005      	beq.n	801183a <pbuf_copy+0x2a>
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	891a      	ldrh	r2, [r3, #8]
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	891b      	ldrh	r3, [r3, #8]
 8011836:	429a      	cmp	r2, r3
 8011838:	d209      	bcs.n	801184e <pbuf_copy+0x3e>
 801183a:	4b57      	ldr	r3, [pc, #348]	; (8011998 <pbuf_copy+0x188>)
 801183c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8011840:	4956      	ldr	r1, [pc, #344]	; (801199c <pbuf_copy+0x18c>)
 8011842:	4857      	ldr	r0, [pc, #348]	; (80119a0 <pbuf_copy+0x190>)
 8011844:	f009 fa56 	bl	801acf4 <iprintf>
 8011848:	f06f 030f 	mvn.w	r3, #15
 801184c:	e09f      	b.n	801198e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	895b      	ldrh	r3, [r3, #10]
 8011852:	461a      	mov	r2, r3
 8011854:	697b      	ldr	r3, [r7, #20]
 8011856:	1ad2      	subs	r2, r2, r3
 8011858:	683b      	ldr	r3, [r7, #0]
 801185a:	895b      	ldrh	r3, [r3, #10]
 801185c:	4619      	mov	r1, r3
 801185e:	693b      	ldr	r3, [r7, #16]
 8011860:	1acb      	subs	r3, r1, r3
 8011862:	429a      	cmp	r2, r3
 8011864:	d306      	bcc.n	8011874 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8011866:	683b      	ldr	r3, [r7, #0]
 8011868:	895b      	ldrh	r3, [r3, #10]
 801186a:	461a      	mov	r2, r3
 801186c:	693b      	ldr	r3, [r7, #16]
 801186e:	1ad3      	subs	r3, r2, r3
 8011870:	60fb      	str	r3, [r7, #12]
 8011872:	e005      	b.n	8011880 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	895b      	ldrh	r3, [r3, #10]
 8011878:	461a      	mov	r2, r3
 801187a:	697b      	ldr	r3, [r7, #20]
 801187c:	1ad3      	subs	r3, r2, r3
 801187e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	685a      	ldr	r2, [r3, #4]
 8011884:	697b      	ldr	r3, [r7, #20]
 8011886:	18d0      	adds	r0, r2, r3
 8011888:	683b      	ldr	r3, [r7, #0]
 801188a:	685a      	ldr	r2, [r3, #4]
 801188c:	693b      	ldr	r3, [r7, #16]
 801188e:	4413      	add	r3, r2
 8011890:	68fa      	ldr	r2, [r7, #12]
 8011892:	4619      	mov	r1, r3
 8011894:	f009 fa18 	bl	801acc8 <memcpy>
    offset_to += len;
 8011898:	697a      	ldr	r2, [r7, #20]
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	4413      	add	r3, r2
 801189e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80118a0:	693a      	ldr	r2, [r7, #16]
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	4413      	add	r3, r2
 80118a6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	895b      	ldrh	r3, [r3, #10]
 80118ac:	461a      	mov	r2, r3
 80118ae:	697b      	ldr	r3, [r7, #20]
 80118b0:	4293      	cmp	r3, r2
 80118b2:	d906      	bls.n	80118c2 <pbuf_copy+0xb2>
 80118b4:	4b38      	ldr	r3, [pc, #224]	; (8011998 <pbuf_copy+0x188>)
 80118b6:	f240 32d9 	movw	r2, #985	; 0x3d9
 80118ba:	493a      	ldr	r1, [pc, #232]	; (80119a4 <pbuf_copy+0x194>)
 80118bc:	4838      	ldr	r0, [pc, #224]	; (80119a0 <pbuf_copy+0x190>)
 80118be:	f009 fa19 	bl	801acf4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80118c2:	683b      	ldr	r3, [r7, #0]
 80118c4:	895b      	ldrh	r3, [r3, #10]
 80118c6:	461a      	mov	r2, r3
 80118c8:	693b      	ldr	r3, [r7, #16]
 80118ca:	4293      	cmp	r3, r2
 80118cc:	d906      	bls.n	80118dc <pbuf_copy+0xcc>
 80118ce:	4b32      	ldr	r3, [pc, #200]	; (8011998 <pbuf_copy+0x188>)
 80118d0:	f240 32da 	movw	r2, #986	; 0x3da
 80118d4:	4934      	ldr	r1, [pc, #208]	; (80119a8 <pbuf_copy+0x198>)
 80118d6:	4832      	ldr	r0, [pc, #200]	; (80119a0 <pbuf_copy+0x190>)
 80118d8:	f009 fa0c 	bl	801acf4 <iprintf>
    if (offset_from >= p_from->len) {
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	895b      	ldrh	r3, [r3, #10]
 80118e0:	461a      	mov	r2, r3
 80118e2:	693b      	ldr	r3, [r7, #16]
 80118e4:	4293      	cmp	r3, r2
 80118e6:	d304      	bcc.n	80118f2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80118e8:	2300      	movs	r3, #0
 80118ea:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80118ec:	683b      	ldr	r3, [r7, #0]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	895b      	ldrh	r3, [r3, #10]
 80118f6:	461a      	mov	r2, r3
 80118f8:	697b      	ldr	r3, [r7, #20]
 80118fa:	4293      	cmp	r3, r2
 80118fc:	d114      	bne.n	8011928 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80118fe:	2300      	movs	r3, #0
 8011900:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d10c      	bne.n	8011928 <pbuf_copy+0x118>
 801190e:	683b      	ldr	r3, [r7, #0]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d009      	beq.n	8011928 <pbuf_copy+0x118>
 8011914:	4b20      	ldr	r3, [pc, #128]	; (8011998 <pbuf_copy+0x188>)
 8011916:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801191a:	4924      	ldr	r1, [pc, #144]	; (80119ac <pbuf_copy+0x19c>)
 801191c:	4820      	ldr	r0, [pc, #128]	; (80119a0 <pbuf_copy+0x190>)
 801191e:	f009 f9e9 	bl	801acf4 <iprintf>
 8011922:	f06f 030f 	mvn.w	r3, #15
 8011926:	e032      	b.n	801198e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d013      	beq.n	8011956 <pbuf_copy+0x146>
 801192e:	683b      	ldr	r3, [r7, #0]
 8011930:	895a      	ldrh	r2, [r3, #10]
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	891b      	ldrh	r3, [r3, #8]
 8011936:	429a      	cmp	r2, r3
 8011938:	d10d      	bne.n	8011956 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801193a:	683b      	ldr	r3, [r7, #0]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d009      	beq.n	8011956 <pbuf_copy+0x146>
 8011942:	4b15      	ldr	r3, [pc, #84]	; (8011998 <pbuf_copy+0x188>)
 8011944:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8011948:	4919      	ldr	r1, [pc, #100]	; (80119b0 <pbuf_copy+0x1a0>)
 801194a:	4815      	ldr	r0, [pc, #84]	; (80119a0 <pbuf_copy+0x190>)
 801194c:	f009 f9d2 	bl	801acf4 <iprintf>
 8011950:	f06f 0305 	mvn.w	r3, #5
 8011954:	e01b      	b.n	801198e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d013      	beq.n	8011984 <pbuf_copy+0x174>
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	895a      	ldrh	r2, [r3, #10]
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	891b      	ldrh	r3, [r3, #8]
 8011964:	429a      	cmp	r2, r3
 8011966:	d10d      	bne.n	8011984 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d009      	beq.n	8011984 <pbuf_copy+0x174>
 8011970:	4b09      	ldr	r3, [pc, #36]	; (8011998 <pbuf_copy+0x188>)
 8011972:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8011976:	490e      	ldr	r1, [pc, #56]	; (80119b0 <pbuf_copy+0x1a0>)
 8011978:	4809      	ldr	r0, [pc, #36]	; (80119a0 <pbuf_copy+0x190>)
 801197a:	f009 f9bb 	bl	801acf4 <iprintf>
 801197e:	f06f 0305 	mvn.w	r3, #5
 8011982:	e004      	b.n	801198e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011984:	683b      	ldr	r3, [r7, #0]
 8011986:	2b00      	cmp	r3, #0
 8011988:	f47f af61 	bne.w	801184e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801198c:	2300      	movs	r3, #0
}
 801198e:	4618      	mov	r0, r3
 8011990:	3718      	adds	r7, #24
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}
 8011996:	bf00      	nop
 8011998:	0801d510 	.word	0x0801d510
 801199c:	0801d7b8 	.word	0x0801d7b8
 80119a0:	0801d570 	.word	0x0801d570
 80119a4:	0801d7e8 	.word	0x0801d7e8
 80119a8:	0801d800 	.word	0x0801d800
 80119ac:	0801d81c 	.word	0x0801d81c
 80119b0:	0801d82c 	.word	0x0801d82c

080119b4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b088      	sub	sp, #32
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	60f8      	str	r0, [r7, #12]
 80119bc:	60b9      	str	r1, [r7, #8]
 80119be:	4611      	mov	r1, r2
 80119c0:	461a      	mov	r2, r3
 80119c2:	460b      	mov	r3, r1
 80119c4:	80fb      	strh	r3, [r7, #6]
 80119c6:	4613      	mov	r3, r2
 80119c8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80119ca:	2300      	movs	r3, #0
 80119cc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80119ce:	2300      	movs	r3, #0
 80119d0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d108      	bne.n	80119ea <pbuf_copy_partial+0x36>
 80119d8:	4b2b      	ldr	r3, [pc, #172]	; (8011a88 <pbuf_copy_partial+0xd4>)
 80119da:	f240 420a 	movw	r2, #1034	; 0x40a
 80119de:	492b      	ldr	r1, [pc, #172]	; (8011a8c <pbuf_copy_partial+0xd8>)
 80119e0:	482b      	ldr	r0, [pc, #172]	; (8011a90 <pbuf_copy_partial+0xdc>)
 80119e2:	f009 f987 	bl	801acf4 <iprintf>
 80119e6:	2300      	movs	r3, #0
 80119e8:	e04a      	b.n	8011a80 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d108      	bne.n	8011a02 <pbuf_copy_partial+0x4e>
 80119f0:	4b25      	ldr	r3, [pc, #148]	; (8011a88 <pbuf_copy_partial+0xd4>)
 80119f2:	f240 420b 	movw	r2, #1035	; 0x40b
 80119f6:	4927      	ldr	r1, [pc, #156]	; (8011a94 <pbuf_copy_partial+0xe0>)
 80119f8:	4825      	ldr	r0, [pc, #148]	; (8011a90 <pbuf_copy_partial+0xdc>)
 80119fa:	f009 f97b 	bl	801acf4 <iprintf>
 80119fe:	2300      	movs	r3, #0
 8011a00:	e03e      	b.n	8011a80 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	61fb      	str	r3, [r7, #28]
 8011a06:	e034      	b.n	8011a72 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011a08:	88bb      	ldrh	r3, [r7, #4]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d00a      	beq.n	8011a24 <pbuf_copy_partial+0x70>
 8011a0e:	69fb      	ldr	r3, [r7, #28]
 8011a10:	895b      	ldrh	r3, [r3, #10]
 8011a12:	88ba      	ldrh	r2, [r7, #4]
 8011a14:	429a      	cmp	r2, r3
 8011a16:	d305      	bcc.n	8011a24 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011a18:	69fb      	ldr	r3, [r7, #28]
 8011a1a:	895b      	ldrh	r3, [r3, #10]
 8011a1c:	88ba      	ldrh	r2, [r7, #4]
 8011a1e:	1ad3      	subs	r3, r2, r3
 8011a20:	80bb      	strh	r3, [r7, #4]
 8011a22:	e023      	b.n	8011a6c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011a24:	69fb      	ldr	r3, [r7, #28]
 8011a26:	895a      	ldrh	r2, [r3, #10]
 8011a28:	88bb      	ldrh	r3, [r7, #4]
 8011a2a:	1ad3      	subs	r3, r2, r3
 8011a2c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8011a2e:	8b3a      	ldrh	r2, [r7, #24]
 8011a30:	88fb      	ldrh	r3, [r7, #6]
 8011a32:	429a      	cmp	r2, r3
 8011a34:	d901      	bls.n	8011a3a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8011a36:	88fb      	ldrh	r3, [r7, #6]
 8011a38:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8011a3a:	8b7b      	ldrh	r3, [r7, #26]
 8011a3c:	68ba      	ldr	r2, [r7, #8]
 8011a3e:	18d0      	adds	r0, r2, r3
 8011a40:	69fb      	ldr	r3, [r7, #28]
 8011a42:	685a      	ldr	r2, [r3, #4]
 8011a44:	88bb      	ldrh	r3, [r7, #4]
 8011a46:	4413      	add	r3, r2
 8011a48:	8b3a      	ldrh	r2, [r7, #24]
 8011a4a:	4619      	mov	r1, r3
 8011a4c:	f009 f93c 	bl	801acc8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011a50:	8afa      	ldrh	r2, [r7, #22]
 8011a52:	8b3b      	ldrh	r3, [r7, #24]
 8011a54:	4413      	add	r3, r2
 8011a56:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8011a58:	8b7a      	ldrh	r2, [r7, #26]
 8011a5a:	8b3b      	ldrh	r3, [r7, #24]
 8011a5c:	4413      	add	r3, r2
 8011a5e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8011a60:	88fa      	ldrh	r2, [r7, #6]
 8011a62:	8b3b      	ldrh	r3, [r7, #24]
 8011a64:	1ad3      	subs	r3, r2, r3
 8011a66:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8011a68:	2300      	movs	r3, #0
 8011a6a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011a6c:	69fb      	ldr	r3, [r7, #28]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	61fb      	str	r3, [r7, #28]
 8011a72:	88fb      	ldrh	r3, [r7, #6]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d002      	beq.n	8011a7e <pbuf_copy_partial+0xca>
 8011a78:	69fb      	ldr	r3, [r7, #28]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d1c4      	bne.n	8011a08 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8011a7e:	8afb      	ldrh	r3, [r7, #22]
}
 8011a80:	4618      	mov	r0, r3
 8011a82:	3720      	adds	r7, #32
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bd80      	pop	{r7, pc}
 8011a88:	0801d510 	.word	0x0801d510
 8011a8c:	0801d858 	.word	0x0801d858
 8011a90:	0801d570 	.word	0x0801d570
 8011a94:	0801d878 	.word	0x0801d878

08011a98 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b084      	sub	sp, #16
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	603a      	str	r2, [r7, #0]
 8011aa2:	71fb      	strb	r3, [r7, #7]
 8011aa4:	460b      	mov	r3, r1
 8011aa6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011aa8:	683b      	ldr	r3, [r7, #0]
 8011aaa:	8919      	ldrh	r1, [r3, #8]
 8011aac:	88ba      	ldrh	r2, [r7, #4]
 8011aae:	79fb      	ldrb	r3, [r7, #7]
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	f7ff fa73 	bl	8010f9c <pbuf_alloc>
 8011ab6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d101      	bne.n	8011ac2 <pbuf_clone+0x2a>
    return NULL;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	e011      	b.n	8011ae6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8011ac2:	6839      	ldr	r1, [r7, #0]
 8011ac4:	68f8      	ldr	r0, [r7, #12]
 8011ac6:	f7ff fea3 	bl	8011810 <pbuf_copy>
 8011aca:	4603      	mov	r3, r0
 8011acc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011ace:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d006      	beq.n	8011ae4 <pbuf_clone+0x4c>
 8011ad6:	4b06      	ldr	r3, [pc, #24]	; (8011af0 <pbuf_clone+0x58>)
 8011ad8:	f240 5224 	movw	r2, #1316	; 0x524
 8011adc:	4905      	ldr	r1, [pc, #20]	; (8011af4 <pbuf_clone+0x5c>)
 8011ade:	4806      	ldr	r0, [pc, #24]	; (8011af8 <pbuf_clone+0x60>)
 8011ae0:	f009 f908 	bl	801acf4 <iprintf>
  return q;
 8011ae4:	68fb      	ldr	r3, [r7, #12]
}
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	3710      	adds	r7, #16
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd80      	pop	{r7, pc}
 8011aee:	bf00      	nop
 8011af0:	0801d510 	.word	0x0801d510
 8011af4:	0801d984 	.word	0x0801d984
 8011af8:	0801d570 	.word	0x0801d570

08011afc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011b00:	f009 f99c 	bl	801ae3c <rand>
 8011b04:	4603      	mov	r3, r0
 8011b06:	b29b      	uxth	r3, r3
 8011b08:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011b0c:	b29b      	uxth	r3, r3
 8011b0e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011b12:	b29a      	uxth	r2, r3
 8011b14:	4b01      	ldr	r3, [pc, #4]	; (8011b1c <tcp_init+0x20>)
 8011b16:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011b18:	bf00      	nop
 8011b1a:	bd80      	pop	{r7, pc}
 8011b1c:	20000024 	.word	0x20000024

08011b20 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b082      	sub	sp, #8
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	7d1b      	ldrb	r3, [r3, #20]
 8011b2c:	2b01      	cmp	r3, #1
 8011b2e:	d105      	bne.n	8011b3c <tcp_free+0x1c>
 8011b30:	4b06      	ldr	r3, [pc, #24]	; (8011b4c <tcp_free+0x2c>)
 8011b32:	22d4      	movs	r2, #212	; 0xd4
 8011b34:	4906      	ldr	r1, [pc, #24]	; (8011b50 <tcp_free+0x30>)
 8011b36:	4807      	ldr	r0, [pc, #28]	; (8011b54 <tcp_free+0x34>)
 8011b38:	f009 f8dc 	bl	801acf4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011b3c:	6879      	ldr	r1, [r7, #4]
 8011b3e:	2001      	movs	r0, #1
 8011b40:	f7fe fe6c 	bl	801081c <memp_free>
}
 8011b44:	bf00      	nop
 8011b46:	3708      	adds	r7, #8
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	bd80      	pop	{r7, pc}
 8011b4c:	0801da10 	.word	0x0801da10
 8011b50:	0801da40 	.word	0x0801da40
 8011b54:	0801da54 	.word	0x0801da54

08011b58 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b082      	sub	sp, #8
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	7d1b      	ldrb	r3, [r3, #20]
 8011b64:	2b01      	cmp	r3, #1
 8011b66:	d105      	bne.n	8011b74 <tcp_free_listen+0x1c>
 8011b68:	4b06      	ldr	r3, [pc, #24]	; (8011b84 <tcp_free_listen+0x2c>)
 8011b6a:	22df      	movs	r2, #223	; 0xdf
 8011b6c:	4906      	ldr	r1, [pc, #24]	; (8011b88 <tcp_free_listen+0x30>)
 8011b6e:	4807      	ldr	r0, [pc, #28]	; (8011b8c <tcp_free_listen+0x34>)
 8011b70:	f009 f8c0 	bl	801acf4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011b74:	6879      	ldr	r1, [r7, #4]
 8011b76:	2002      	movs	r0, #2
 8011b78:	f7fe fe50 	bl	801081c <memp_free>
}
 8011b7c:	bf00      	nop
 8011b7e:	3708      	adds	r7, #8
 8011b80:	46bd      	mov	sp, r7
 8011b82:	bd80      	pop	{r7, pc}
 8011b84:	0801da10 	.word	0x0801da10
 8011b88:	0801da7c 	.word	0x0801da7c
 8011b8c:	0801da54 	.word	0x0801da54

08011b90 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011b94:	f000 ffdc 	bl	8012b50 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011b98:	4b07      	ldr	r3, [pc, #28]	; (8011bb8 <tcp_tmr+0x28>)
 8011b9a:	781b      	ldrb	r3, [r3, #0]
 8011b9c:	3301      	adds	r3, #1
 8011b9e:	b2da      	uxtb	r2, r3
 8011ba0:	4b05      	ldr	r3, [pc, #20]	; (8011bb8 <tcp_tmr+0x28>)
 8011ba2:	701a      	strb	r2, [r3, #0]
 8011ba4:	4b04      	ldr	r3, [pc, #16]	; (8011bb8 <tcp_tmr+0x28>)
 8011ba6:	781b      	ldrb	r3, [r3, #0]
 8011ba8:	f003 0301 	and.w	r3, r3, #1
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d001      	beq.n	8011bb4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011bb0:	f000 fc8e 	bl	80124d0 <tcp_slowtmr>
  }
}
 8011bb4:	bf00      	nop
 8011bb6:	bd80      	pop	{r7, pc}
 8011bb8:	2001109d 	.word	0x2001109d

08011bbc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b084      	sub	sp, #16
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
 8011bc4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d105      	bne.n	8011bd8 <tcp_remove_listener+0x1c>
 8011bcc:	4b0d      	ldr	r3, [pc, #52]	; (8011c04 <tcp_remove_listener+0x48>)
 8011bce:	22ff      	movs	r2, #255	; 0xff
 8011bd0:	490d      	ldr	r1, [pc, #52]	; (8011c08 <tcp_remove_listener+0x4c>)
 8011bd2:	480e      	ldr	r0, [pc, #56]	; (8011c0c <tcp_remove_listener+0x50>)
 8011bd4:	f009 f88e 	bl	801acf4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	60fb      	str	r3, [r7, #12]
 8011bdc:	e00a      	b.n	8011bf4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011be2:	683a      	ldr	r2, [r7, #0]
 8011be4:	429a      	cmp	r2, r3
 8011be6:	d102      	bne.n	8011bee <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	2200      	movs	r2, #0
 8011bec:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	68db      	ldr	r3, [r3, #12]
 8011bf2:	60fb      	str	r3, [r7, #12]
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d1f1      	bne.n	8011bde <tcp_remove_listener+0x22>
    }
  }
}
 8011bfa:	bf00      	nop
 8011bfc:	bf00      	nop
 8011bfe:	3710      	adds	r7, #16
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}
 8011c04:	0801da10 	.word	0x0801da10
 8011c08:	0801da98 	.word	0x0801da98
 8011c0c:	0801da54 	.word	0x0801da54

08011c10 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b084      	sub	sp, #16
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d106      	bne.n	8011c2c <tcp_listen_closed+0x1c>
 8011c1e:	4b14      	ldr	r3, [pc, #80]	; (8011c70 <tcp_listen_closed+0x60>)
 8011c20:	f240 1211 	movw	r2, #273	; 0x111
 8011c24:	4913      	ldr	r1, [pc, #76]	; (8011c74 <tcp_listen_closed+0x64>)
 8011c26:	4814      	ldr	r0, [pc, #80]	; (8011c78 <tcp_listen_closed+0x68>)
 8011c28:	f009 f864 	bl	801acf4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	7d1b      	ldrb	r3, [r3, #20]
 8011c30:	2b01      	cmp	r3, #1
 8011c32:	d006      	beq.n	8011c42 <tcp_listen_closed+0x32>
 8011c34:	4b0e      	ldr	r3, [pc, #56]	; (8011c70 <tcp_listen_closed+0x60>)
 8011c36:	f44f 7289 	mov.w	r2, #274	; 0x112
 8011c3a:	4910      	ldr	r1, [pc, #64]	; (8011c7c <tcp_listen_closed+0x6c>)
 8011c3c:	480e      	ldr	r0, [pc, #56]	; (8011c78 <tcp_listen_closed+0x68>)
 8011c3e:	f009 f859 	bl	801acf4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011c42:	2301      	movs	r3, #1
 8011c44:	60fb      	str	r3, [r7, #12]
 8011c46:	e00b      	b.n	8011c60 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011c48:	4a0d      	ldr	r2, [pc, #52]	; (8011c80 <tcp_listen_closed+0x70>)
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	6879      	ldr	r1, [r7, #4]
 8011c54:	4618      	mov	r0, r3
 8011c56:	f7ff ffb1 	bl	8011bbc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	3301      	adds	r3, #1
 8011c5e:	60fb      	str	r3, [r7, #12]
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	2b03      	cmp	r3, #3
 8011c64:	d9f0      	bls.n	8011c48 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8011c66:	bf00      	nop
 8011c68:	bf00      	nop
 8011c6a:	3710      	adds	r7, #16
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bd80      	pop	{r7, pc}
 8011c70:	0801da10 	.word	0x0801da10
 8011c74:	0801dac0 	.word	0x0801dac0
 8011c78:	0801da54 	.word	0x0801da54
 8011c7c:	0801dacc 	.word	0x0801dacc
 8011c80:	0801faec 	.word	0x0801faec

08011c84 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011c84:	b5b0      	push	{r4, r5, r7, lr}
 8011c86:	b088      	sub	sp, #32
 8011c88:	af04      	add	r7, sp, #16
 8011c8a:	6078      	str	r0, [r7, #4]
 8011c8c:	460b      	mov	r3, r1
 8011c8e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d106      	bne.n	8011ca4 <tcp_close_shutdown+0x20>
 8011c96:	4b63      	ldr	r3, [pc, #396]	; (8011e24 <tcp_close_shutdown+0x1a0>)
 8011c98:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8011c9c:	4962      	ldr	r1, [pc, #392]	; (8011e28 <tcp_close_shutdown+0x1a4>)
 8011c9e:	4863      	ldr	r0, [pc, #396]	; (8011e2c <tcp_close_shutdown+0x1a8>)
 8011ca0:	f009 f828 	bl	801acf4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011ca4:	78fb      	ldrb	r3, [r7, #3]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d066      	beq.n	8011d78 <tcp_close_shutdown+0xf4>
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	7d1b      	ldrb	r3, [r3, #20]
 8011cae:	2b04      	cmp	r3, #4
 8011cb0:	d003      	beq.n	8011cba <tcp_close_shutdown+0x36>
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	7d1b      	ldrb	r3, [r3, #20]
 8011cb6:	2b07      	cmp	r3, #7
 8011cb8:	d15e      	bne.n	8011d78 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d104      	bne.n	8011ccc <tcp_close_shutdown+0x48>
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011cc6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011cca:	d055      	beq.n	8011d78 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	8b5b      	ldrh	r3, [r3, #26]
 8011cd0:	f003 0310 	and.w	r3, r3, #16
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d106      	bne.n	8011ce6 <tcp_close_shutdown+0x62>
 8011cd8:	4b52      	ldr	r3, [pc, #328]	; (8011e24 <tcp_close_shutdown+0x1a0>)
 8011cda:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8011cde:	4954      	ldr	r1, [pc, #336]	; (8011e30 <tcp_close_shutdown+0x1ac>)
 8011ce0:	4852      	ldr	r0, [pc, #328]	; (8011e2c <tcp_close_shutdown+0x1a8>)
 8011ce2:	f009 f807 	bl	801acf4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011cee:	687d      	ldr	r5, [r7, #4]
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	3304      	adds	r3, #4
 8011cf4:	687a      	ldr	r2, [r7, #4]
 8011cf6:	8ad2      	ldrh	r2, [r2, #22]
 8011cf8:	6879      	ldr	r1, [r7, #4]
 8011cfa:	8b09      	ldrh	r1, [r1, #24]
 8011cfc:	9102      	str	r1, [sp, #8]
 8011cfe:	9201      	str	r2, [sp, #4]
 8011d00:	9300      	str	r3, [sp, #0]
 8011d02:	462b      	mov	r3, r5
 8011d04:	4622      	mov	r2, r4
 8011d06:	4601      	mov	r1, r0
 8011d08:	6878      	ldr	r0, [r7, #4]
 8011d0a:	f005 fcf1 	bl	80176f0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f001 face 	bl	80132b0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011d14:	4b47      	ldr	r3, [pc, #284]	; (8011e34 <tcp_close_shutdown+0x1b0>)
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	687a      	ldr	r2, [r7, #4]
 8011d1a:	429a      	cmp	r2, r3
 8011d1c:	d105      	bne.n	8011d2a <tcp_close_shutdown+0xa6>
 8011d1e:	4b45      	ldr	r3, [pc, #276]	; (8011e34 <tcp_close_shutdown+0x1b0>)
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	68db      	ldr	r3, [r3, #12]
 8011d24:	4a43      	ldr	r2, [pc, #268]	; (8011e34 <tcp_close_shutdown+0x1b0>)
 8011d26:	6013      	str	r3, [r2, #0]
 8011d28:	e013      	b.n	8011d52 <tcp_close_shutdown+0xce>
 8011d2a:	4b42      	ldr	r3, [pc, #264]	; (8011e34 <tcp_close_shutdown+0x1b0>)
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	60fb      	str	r3, [r7, #12]
 8011d30:	e00c      	b.n	8011d4c <tcp_close_shutdown+0xc8>
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	68db      	ldr	r3, [r3, #12]
 8011d36:	687a      	ldr	r2, [r7, #4]
 8011d38:	429a      	cmp	r2, r3
 8011d3a:	d104      	bne.n	8011d46 <tcp_close_shutdown+0xc2>
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	68da      	ldr	r2, [r3, #12]
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	60da      	str	r2, [r3, #12]
 8011d44:	e005      	b.n	8011d52 <tcp_close_shutdown+0xce>
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	68db      	ldr	r3, [r3, #12]
 8011d4a:	60fb      	str	r3, [r7, #12]
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d1ef      	bne.n	8011d32 <tcp_close_shutdown+0xae>
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	2200      	movs	r2, #0
 8011d56:	60da      	str	r2, [r3, #12]
 8011d58:	4b37      	ldr	r3, [pc, #220]	; (8011e38 <tcp_close_shutdown+0x1b4>)
 8011d5a:	2201      	movs	r2, #1
 8011d5c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011d5e:	4b37      	ldr	r3, [pc, #220]	; (8011e3c <tcp_close_shutdown+0x1b8>)
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	687a      	ldr	r2, [r7, #4]
 8011d64:	429a      	cmp	r2, r3
 8011d66:	d102      	bne.n	8011d6e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8011d68:	f003 ff66 	bl	8015c38 <tcp_trigger_input_pcb_close>
 8011d6c:	e002      	b.n	8011d74 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	f7ff fed6 	bl	8011b20 <tcp_free>
      }
      return ERR_OK;
 8011d74:	2300      	movs	r3, #0
 8011d76:	e050      	b.n	8011e1a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	7d1b      	ldrb	r3, [r3, #20]
 8011d7c:	2b02      	cmp	r3, #2
 8011d7e:	d03b      	beq.n	8011df8 <tcp_close_shutdown+0x174>
 8011d80:	2b02      	cmp	r3, #2
 8011d82:	dc44      	bgt.n	8011e0e <tcp_close_shutdown+0x18a>
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d002      	beq.n	8011d8e <tcp_close_shutdown+0x10a>
 8011d88:	2b01      	cmp	r3, #1
 8011d8a:	d02a      	beq.n	8011de2 <tcp_close_shutdown+0x15e>
 8011d8c:	e03f      	b.n	8011e0e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	8adb      	ldrh	r3, [r3, #22]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d021      	beq.n	8011dda <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011d96:	4b2a      	ldr	r3, [pc, #168]	; (8011e40 <tcp_close_shutdown+0x1bc>)
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	687a      	ldr	r2, [r7, #4]
 8011d9c:	429a      	cmp	r2, r3
 8011d9e:	d105      	bne.n	8011dac <tcp_close_shutdown+0x128>
 8011da0:	4b27      	ldr	r3, [pc, #156]	; (8011e40 <tcp_close_shutdown+0x1bc>)
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	68db      	ldr	r3, [r3, #12]
 8011da6:	4a26      	ldr	r2, [pc, #152]	; (8011e40 <tcp_close_shutdown+0x1bc>)
 8011da8:	6013      	str	r3, [r2, #0]
 8011daa:	e013      	b.n	8011dd4 <tcp_close_shutdown+0x150>
 8011dac:	4b24      	ldr	r3, [pc, #144]	; (8011e40 <tcp_close_shutdown+0x1bc>)
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	60bb      	str	r3, [r7, #8]
 8011db2:	e00c      	b.n	8011dce <tcp_close_shutdown+0x14a>
 8011db4:	68bb      	ldr	r3, [r7, #8]
 8011db6:	68db      	ldr	r3, [r3, #12]
 8011db8:	687a      	ldr	r2, [r7, #4]
 8011dba:	429a      	cmp	r2, r3
 8011dbc:	d104      	bne.n	8011dc8 <tcp_close_shutdown+0x144>
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	68da      	ldr	r2, [r3, #12]
 8011dc2:	68bb      	ldr	r3, [r7, #8]
 8011dc4:	60da      	str	r2, [r3, #12]
 8011dc6:	e005      	b.n	8011dd4 <tcp_close_shutdown+0x150>
 8011dc8:	68bb      	ldr	r3, [r7, #8]
 8011dca:	68db      	ldr	r3, [r3, #12]
 8011dcc:	60bb      	str	r3, [r7, #8]
 8011dce:	68bb      	ldr	r3, [r7, #8]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d1ef      	bne.n	8011db4 <tcp_close_shutdown+0x130>
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011dda:	6878      	ldr	r0, [r7, #4]
 8011ddc:	f7ff fea0 	bl	8011b20 <tcp_free>
      break;
 8011de0:	e01a      	b.n	8011e18 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f7ff ff14 	bl	8011c10 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011de8:	6879      	ldr	r1, [r7, #4]
 8011dea:	4816      	ldr	r0, [pc, #88]	; (8011e44 <tcp_close_shutdown+0x1c0>)
 8011dec:	f001 fab0 	bl	8013350 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011df0:	6878      	ldr	r0, [r7, #4]
 8011df2:	f7ff feb1 	bl	8011b58 <tcp_free_listen>
      break;
 8011df6:	e00f      	b.n	8011e18 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011df8:	6879      	ldr	r1, [r7, #4]
 8011dfa:	480e      	ldr	r0, [pc, #56]	; (8011e34 <tcp_close_shutdown+0x1b0>)
 8011dfc:	f001 faa8 	bl	8013350 <tcp_pcb_remove>
 8011e00:	4b0d      	ldr	r3, [pc, #52]	; (8011e38 <tcp_close_shutdown+0x1b4>)
 8011e02:	2201      	movs	r2, #1
 8011e04:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011e06:	6878      	ldr	r0, [r7, #4]
 8011e08:	f7ff fe8a 	bl	8011b20 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011e0c:	e004      	b.n	8011e18 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011e0e:	6878      	ldr	r0, [r7, #4]
 8011e10:	f000 f81a 	bl	8011e48 <tcp_close_shutdown_fin>
 8011e14:	4603      	mov	r3, r0
 8011e16:	e000      	b.n	8011e1a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8011e18:	2300      	movs	r3, #0
}
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	3710      	adds	r7, #16
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	bdb0      	pop	{r4, r5, r7, pc}
 8011e22:	bf00      	nop
 8011e24:	0801da10 	.word	0x0801da10
 8011e28:	0801dae4 	.word	0x0801dae4
 8011e2c:	0801da54 	.word	0x0801da54
 8011e30:	0801db04 	.word	0x0801db04
 8011e34:	20011094 	.word	0x20011094
 8011e38:	2001109c 	.word	0x2001109c
 8011e3c:	200110d4 	.word	0x200110d4
 8011e40:	2001108c 	.word	0x2001108c
 8011e44:	20011090 	.word	0x20011090

08011e48 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b084      	sub	sp, #16
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d106      	bne.n	8011e64 <tcp_close_shutdown_fin+0x1c>
 8011e56:	4b2e      	ldr	r3, [pc, #184]	; (8011f10 <tcp_close_shutdown_fin+0xc8>)
 8011e58:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8011e5c:	492d      	ldr	r1, [pc, #180]	; (8011f14 <tcp_close_shutdown_fin+0xcc>)
 8011e5e:	482e      	ldr	r0, [pc, #184]	; (8011f18 <tcp_close_shutdown_fin+0xd0>)
 8011e60:	f008 ff48 	bl	801acf4 <iprintf>

  switch (pcb->state) {
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	7d1b      	ldrb	r3, [r3, #20]
 8011e68:	2b07      	cmp	r3, #7
 8011e6a:	d020      	beq.n	8011eae <tcp_close_shutdown_fin+0x66>
 8011e6c:	2b07      	cmp	r3, #7
 8011e6e:	dc2b      	bgt.n	8011ec8 <tcp_close_shutdown_fin+0x80>
 8011e70:	2b03      	cmp	r3, #3
 8011e72:	d002      	beq.n	8011e7a <tcp_close_shutdown_fin+0x32>
 8011e74:	2b04      	cmp	r3, #4
 8011e76:	d00d      	beq.n	8011e94 <tcp_close_shutdown_fin+0x4c>
 8011e78:	e026      	b.n	8011ec8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	f004 fd46 	bl	801690c <tcp_send_fin>
 8011e80:	4603      	mov	r3, r0
 8011e82:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d11f      	bne.n	8011ecc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	2205      	movs	r2, #5
 8011e90:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011e92:	e01b      	b.n	8011ecc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011e94:	6878      	ldr	r0, [r7, #4]
 8011e96:	f004 fd39 	bl	801690c <tcp_send_fin>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d114      	bne.n	8011ed0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	2205      	movs	r2, #5
 8011eaa:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011eac:	e010      	b.n	8011ed0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011eae:	6878      	ldr	r0, [r7, #4]
 8011eb0:	f004 fd2c 	bl	801690c <tcp_send_fin>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d109      	bne.n	8011ed4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	2209      	movs	r2, #9
 8011ec4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011ec6:	e005      	b.n	8011ed4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011ec8:	2300      	movs	r3, #0
 8011eca:	e01c      	b.n	8011f06 <tcp_close_shutdown_fin+0xbe>
      break;
 8011ecc:	bf00      	nop
 8011ece:	e002      	b.n	8011ed6 <tcp_close_shutdown_fin+0x8e>
      break;
 8011ed0:	bf00      	nop
 8011ed2:	e000      	b.n	8011ed6 <tcp_close_shutdown_fin+0x8e>
      break;
 8011ed4:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d103      	bne.n	8011ee6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011ede:	6878      	ldr	r0, [r7, #4]
 8011ee0:	f004 fe52 	bl	8016b88 <tcp_output>
 8011ee4:	e00d      	b.n	8011f02 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8011ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011eee:	d108      	bne.n	8011f02 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	8b5b      	ldrh	r3, [r3, #26]
 8011ef4:	f043 0308 	orr.w	r3, r3, #8
 8011ef8:	b29a      	uxth	r2, r3
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011efe:	2300      	movs	r3, #0
 8011f00:	e001      	b.n	8011f06 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8011f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011f06:	4618      	mov	r0, r3
 8011f08:	3710      	adds	r7, #16
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bd80      	pop	{r7, pc}
 8011f0e:	bf00      	nop
 8011f10:	0801da10 	.word	0x0801da10
 8011f14:	0801dac0 	.word	0x0801dac0
 8011f18:	0801da54 	.word	0x0801da54

08011f1c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b082      	sub	sp, #8
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d109      	bne.n	8011f3e <tcp_close+0x22>
 8011f2a:	4b0f      	ldr	r3, [pc, #60]	; (8011f68 <tcp_close+0x4c>)
 8011f2c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011f30:	490e      	ldr	r1, [pc, #56]	; (8011f6c <tcp_close+0x50>)
 8011f32:	480f      	ldr	r0, [pc, #60]	; (8011f70 <tcp_close+0x54>)
 8011f34:	f008 fede 	bl	801acf4 <iprintf>
 8011f38:	f06f 030f 	mvn.w	r3, #15
 8011f3c:	e00f      	b.n	8011f5e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	7d1b      	ldrb	r3, [r3, #20]
 8011f42:	2b01      	cmp	r3, #1
 8011f44:	d006      	beq.n	8011f54 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	8b5b      	ldrh	r3, [r3, #26]
 8011f4a:	f043 0310 	orr.w	r3, r3, #16
 8011f4e:	b29a      	uxth	r2, r3
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011f54:	2101      	movs	r1, #1
 8011f56:	6878      	ldr	r0, [r7, #4]
 8011f58:	f7ff fe94 	bl	8011c84 <tcp_close_shutdown>
 8011f5c:	4603      	mov	r3, r0
}
 8011f5e:	4618      	mov	r0, r3
 8011f60:	3708      	adds	r7, #8
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}
 8011f66:	bf00      	nop
 8011f68:	0801da10 	.word	0x0801da10
 8011f6c:	0801db20 	.word	0x0801db20
 8011f70:	0801da54 	.word	0x0801da54

08011f74 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b084      	sub	sp, #16
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	60f8      	str	r0, [r7, #12]
 8011f7c:	60b9      	str	r1, [r7, #8]
 8011f7e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d109      	bne.n	8011f9a <tcp_shutdown+0x26>
 8011f86:	4b26      	ldr	r3, [pc, #152]	; (8012020 <tcp_shutdown+0xac>)
 8011f88:	f240 2207 	movw	r2, #519	; 0x207
 8011f8c:	4925      	ldr	r1, [pc, #148]	; (8012024 <tcp_shutdown+0xb0>)
 8011f8e:	4826      	ldr	r0, [pc, #152]	; (8012028 <tcp_shutdown+0xb4>)
 8011f90:	f008 feb0 	bl	801acf4 <iprintf>
 8011f94:	f06f 030f 	mvn.w	r3, #15
 8011f98:	e03d      	b.n	8012016 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	7d1b      	ldrb	r3, [r3, #20]
 8011f9e:	2b01      	cmp	r3, #1
 8011fa0:	d102      	bne.n	8011fa8 <tcp_shutdown+0x34>
    return ERR_CONN;
 8011fa2:	f06f 030a 	mvn.w	r3, #10
 8011fa6:	e036      	b.n	8012016 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8011fa8:	68bb      	ldr	r3, [r7, #8]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d01b      	beq.n	8011fe6 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	8b5b      	ldrh	r3, [r3, #26]
 8011fb2:	f043 0310 	orr.w	r3, r3, #16
 8011fb6:	b29a      	uxth	r2, r3
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d005      	beq.n	8011fce <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8011fc2:	2101      	movs	r1, #1
 8011fc4:	68f8      	ldr	r0, [r7, #12]
 8011fc6:	f7ff fe5d 	bl	8011c84 <tcp_close_shutdown>
 8011fca:	4603      	mov	r3, r0
 8011fcc:	e023      	b.n	8012016 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d007      	beq.n	8011fe6 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011fda:	4618      	mov	r0, r3
 8011fdc:	f7ff faf4 	bl	80115c8 <pbuf_free>
      pcb->refused_data = NULL;
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d013      	beq.n	8012014 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	7d1b      	ldrb	r3, [r3, #20]
 8011ff0:	2b04      	cmp	r3, #4
 8011ff2:	dc02      	bgt.n	8011ffa <tcp_shutdown+0x86>
 8011ff4:	2b03      	cmp	r3, #3
 8011ff6:	da02      	bge.n	8011ffe <tcp_shutdown+0x8a>
 8011ff8:	e009      	b.n	801200e <tcp_shutdown+0x9a>
 8011ffa:	2b07      	cmp	r3, #7
 8011ffc:	d107      	bne.n	801200e <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8011ffe:	68bb      	ldr	r3, [r7, #8]
 8012000:	b2db      	uxtb	r3, r3
 8012002:	4619      	mov	r1, r3
 8012004:	68f8      	ldr	r0, [r7, #12]
 8012006:	f7ff fe3d 	bl	8011c84 <tcp_close_shutdown>
 801200a:	4603      	mov	r3, r0
 801200c:	e003      	b.n	8012016 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801200e:	f06f 030a 	mvn.w	r3, #10
 8012012:	e000      	b.n	8012016 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8012014:	2300      	movs	r3, #0
}
 8012016:	4618      	mov	r0, r3
 8012018:	3710      	adds	r7, #16
 801201a:	46bd      	mov	sp, r7
 801201c:	bd80      	pop	{r7, pc}
 801201e:	bf00      	nop
 8012020:	0801da10 	.word	0x0801da10
 8012024:	0801db38 	.word	0x0801db38
 8012028:	0801da54 	.word	0x0801da54

0801202c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b08e      	sub	sp, #56	; 0x38
 8012030:	af04      	add	r7, sp, #16
 8012032:	6078      	str	r0, [r7, #4]
 8012034:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d107      	bne.n	801204c <tcp_abandon+0x20>
 801203c:	4b52      	ldr	r3, [pc, #328]	; (8012188 <tcp_abandon+0x15c>)
 801203e:	f240 223d 	movw	r2, #573	; 0x23d
 8012042:	4952      	ldr	r1, [pc, #328]	; (801218c <tcp_abandon+0x160>)
 8012044:	4852      	ldr	r0, [pc, #328]	; (8012190 <tcp_abandon+0x164>)
 8012046:	f008 fe55 	bl	801acf4 <iprintf>
 801204a:	e099      	b.n	8012180 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	7d1b      	ldrb	r3, [r3, #20]
 8012050:	2b01      	cmp	r3, #1
 8012052:	d106      	bne.n	8012062 <tcp_abandon+0x36>
 8012054:	4b4c      	ldr	r3, [pc, #304]	; (8012188 <tcp_abandon+0x15c>)
 8012056:	f44f 7210 	mov.w	r2, #576	; 0x240
 801205a:	494e      	ldr	r1, [pc, #312]	; (8012194 <tcp_abandon+0x168>)
 801205c:	484c      	ldr	r0, [pc, #304]	; (8012190 <tcp_abandon+0x164>)
 801205e:	f008 fe49 	bl	801acf4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	7d1b      	ldrb	r3, [r3, #20]
 8012066:	2b0a      	cmp	r3, #10
 8012068:	d107      	bne.n	801207a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801206a:	6879      	ldr	r1, [r7, #4]
 801206c:	484a      	ldr	r0, [pc, #296]	; (8012198 <tcp_abandon+0x16c>)
 801206e:	f001 f96f 	bl	8013350 <tcp_pcb_remove>
    tcp_free(pcb);
 8012072:	6878      	ldr	r0, [r7, #4]
 8012074:	f7ff fd54 	bl	8011b20 <tcp_free>
 8012078:	e082      	b.n	8012180 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801207a:	2300      	movs	r3, #0
 801207c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801207e:	2300      	movs	r3, #0
 8012080:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012086:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801208c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012094:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	691b      	ldr	r3, [r3, #16]
 801209a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	7d1b      	ldrb	r3, [r3, #20]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d126      	bne.n	80120f2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	8adb      	ldrh	r3, [r3, #22]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d02e      	beq.n	801210a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80120ac:	4b3b      	ldr	r3, [pc, #236]	; (801219c <tcp_abandon+0x170>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	687a      	ldr	r2, [r7, #4]
 80120b2:	429a      	cmp	r2, r3
 80120b4:	d105      	bne.n	80120c2 <tcp_abandon+0x96>
 80120b6:	4b39      	ldr	r3, [pc, #228]	; (801219c <tcp_abandon+0x170>)
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	68db      	ldr	r3, [r3, #12]
 80120bc:	4a37      	ldr	r2, [pc, #220]	; (801219c <tcp_abandon+0x170>)
 80120be:	6013      	str	r3, [r2, #0]
 80120c0:	e013      	b.n	80120ea <tcp_abandon+0xbe>
 80120c2:	4b36      	ldr	r3, [pc, #216]	; (801219c <tcp_abandon+0x170>)
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	61fb      	str	r3, [r7, #28]
 80120c8:	e00c      	b.n	80120e4 <tcp_abandon+0xb8>
 80120ca:	69fb      	ldr	r3, [r7, #28]
 80120cc:	68db      	ldr	r3, [r3, #12]
 80120ce:	687a      	ldr	r2, [r7, #4]
 80120d0:	429a      	cmp	r2, r3
 80120d2:	d104      	bne.n	80120de <tcp_abandon+0xb2>
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	68da      	ldr	r2, [r3, #12]
 80120d8:	69fb      	ldr	r3, [r7, #28]
 80120da:	60da      	str	r2, [r3, #12]
 80120dc:	e005      	b.n	80120ea <tcp_abandon+0xbe>
 80120de:	69fb      	ldr	r3, [r7, #28]
 80120e0:	68db      	ldr	r3, [r3, #12]
 80120e2:	61fb      	str	r3, [r7, #28]
 80120e4:	69fb      	ldr	r3, [r7, #28]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d1ef      	bne.n	80120ca <tcp_abandon+0x9e>
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	2200      	movs	r2, #0
 80120ee:	60da      	str	r2, [r3, #12]
 80120f0:	e00b      	b.n	801210a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80120f2:	683b      	ldr	r3, [r7, #0]
 80120f4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	8adb      	ldrh	r3, [r3, #22]
 80120fa:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80120fc:	6879      	ldr	r1, [r7, #4]
 80120fe:	4828      	ldr	r0, [pc, #160]	; (80121a0 <tcp_abandon+0x174>)
 8012100:	f001 f926 	bl	8013350 <tcp_pcb_remove>
 8012104:	4b27      	ldr	r3, [pc, #156]	; (80121a4 <tcp_abandon+0x178>)
 8012106:	2201      	movs	r2, #1
 8012108:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801210e:	2b00      	cmp	r3, #0
 8012110:	d004      	beq.n	801211c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012116:	4618      	mov	r0, r3
 8012118:	f000 fdfa 	bl	8012d10 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012120:	2b00      	cmp	r3, #0
 8012122:	d004      	beq.n	801212e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012128:	4618      	mov	r0, r3
 801212a:	f000 fdf1 	bl	8012d10 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012132:	2b00      	cmp	r3, #0
 8012134:	d004      	beq.n	8012140 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801213a:	4618      	mov	r0, r3
 801213c:	f000 fde8 	bl	8012d10 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012142:	2b00      	cmp	r3, #0
 8012144:	d00e      	beq.n	8012164 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8012146:	6879      	ldr	r1, [r7, #4]
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	3304      	adds	r3, #4
 801214c:	687a      	ldr	r2, [r7, #4]
 801214e:	8b12      	ldrh	r2, [r2, #24]
 8012150:	9202      	str	r2, [sp, #8]
 8012152:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012154:	9201      	str	r2, [sp, #4]
 8012156:	9300      	str	r3, [sp, #0]
 8012158:	460b      	mov	r3, r1
 801215a:	697a      	ldr	r2, [r7, #20]
 801215c:	69b9      	ldr	r1, [r7, #24]
 801215e:	6878      	ldr	r0, [r7, #4]
 8012160:	f005 fac6 	bl	80176f0 <tcp_rst>
    }
    last_state = pcb->state;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	7d1b      	ldrb	r3, [r3, #20]
 8012168:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801216a:	6878      	ldr	r0, [r7, #4]
 801216c:	f7ff fcd8 	bl	8011b20 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012170:	693b      	ldr	r3, [r7, #16]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d004      	beq.n	8012180 <tcp_abandon+0x154>
 8012176:	693b      	ldr	r3, [r7, #16]
 8012178:	f06f 010c 	mvn.w	r1, #12
 801217c:	68f8      	ldr	r0, [r7, #12]
 801217e:	4798      	blx	r3
  }
}
 8012180:	3728      	adds	r7, #40	; 0x28
 8012182:	46bd      	mov	sp, r7
 8012184:	bd80      	pop	{r7, pc}
 8012186:	bf00      	nop
 8012188:	0801da10 	.word	0x0801da10
 801218c:	0801db54 	.word	0x0801db54
 8012190:	0801da54 	.word	0x0801da54
 8012194:	0801db70 	.word	0x0801db70
 8012198:	20011098 	.word	0x20011098
 801219c:	2001108c 	.word	0x2001108c
 80121a0:	20011094 	.word	0x20011094
 80121a4:	2001109c 	.word	0x2001109c

080121a8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b082      	sub	sp, #8
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80121b0:	2101      	movs	r1, #1
 80121b2:	6878      	ldr	r0, [r7, #4]
 80121b4:	f7ff ff3a 	bl	801202c <tcp_abandon>
}
 80121b8:	bf00      	nop
 80121ba:	3708      	adds	r7, #8
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd80      	pop	{r7, pc}

080121c0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b088      	sub	sp, #32
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	60f8      	str	r0, [r7, #12]
 80121c8:	60b9      	str	r1, [r7, #8]
 80121ca:	4613      	mov	r3, r2
 80121cc:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80121ce:	2304      	movs	r3, #4
 80121d0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80121d2:	68bb      	ldr	r3, [r7, #8]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d101      	bne.n	80121dc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80121d8:	4b3e      	ldr	r3, [pc, #248]	; (80122d4 <tcp_bind+0x114>)
 80121da:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d109      	bne.n	80121f6 <tcp_bind+0x36>
 80121e2:	4b3d      	ldr	r3, [pc, #244]	; (80122d8 <tcp_bind+0x118>)
 80121e4:	f240 22a9 	movw	r2, #681	; 0x2a9
 80121e8:	493c      	ldr	r1, [pc, #240]	; (80122dc <tcp_bind+0x11c>)
 80121ea:	483d      	ldr	r0, [pc, #244]	; (80122e0 <tcp_bind+0x120>)
 80121ec:	f008 fd82 	bl	801acf4 <iprintf>
 80121f0:	f06f 030f 	mvn.w	r3, #15
 80121f4:	e06a      	b.n	80122cc <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	7d1b      	ldrb	r3, [r3, #20]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d009      	beq.n	8012212 <tcp_bind+0x52>
 80121fe:	4b36      	ldr	r3, [pc, #216]	; (80122d8 <tcp_bind+0x118>)
 8012200:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012204:	4937      	ldr	r1, [pc, #220]	; (80122e4 <tcp_bind+0x124>)
 8012206:	4836      	ldr	r0, [pc, #216]	; (80122e0 <tcp_bind+0x120>)
 8012208:	f008 fd74 	bl	801acf4 <iprintf>
 801220c:	f06f 0305 	mvn.w	r3, #5
 8012210:	e05c      	b.n	80122cc <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8012212:	88fb      	ldrh	r3, [r7, #6]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d109      	bne.n	801222c <tcp_bind+0x6c>
    port = tcp_new_port();
 8012218:	f000 f914 	bl	8012444 <tcp_new_port>
 801221c:	4603      	mov	r3, r0
 801221e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012220:	88fb      	ldrh	r3, [r7, #6]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d135      	bne.n	8012292 <tcp_bind+0xd2>
      return ERR_BUF;
 8012226:	f06f 0301 	mvn.w	r3, #1
 801222a:	e04f      	b.n	80122cc <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 801222c:	2300      	movs	r3, #0
 801222e:	61fb      	str	r3, [r7, #28]
 8012230:	e02b      	b.n	801228a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8012232:	4a2d      	ldr	r2, [pc, #180]	; (80122e8 <tcp_bind+0x128>)
 8012234:	69fb      	ldr	r3, [r7, #28]
 8012236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	61bb      	str	r3, [r7, #24]
 801223e:	e01e      	b.n	801227e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8012240:	69bb      	ldr	r3, [r7, #24]
 8012242:	8adb      	ldrh	r3, [r3, #22]
 8012244:	88fa      	ldrh	r2, [r7, #6]
 8012246:	429a      	cmp	r2, r3
 8012248:	d116      	bne.n	8012278 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801224a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801224c:	2b00      	cmp	r3, #0
 801224e:	d010      	beq.n	8012272 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8012250:	69bb      	ldr	r3, [r7, #24]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d00c      	beq.n	8012272 <tcp_bind+0xb2>
 8012258:	68bb      	ldr	r3, [r7, #8]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d009      	beq.n	8012272 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801225e:	68bb      	ldr	r3, [r7, #8]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d005      	beq.n	8012272 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8012266:	69bb      	ldr	r3, [r7, #24]
 8012268:	681a      	ldr	r2, [r3, #0]
 801226a:	68bb      	ldr	r3, [r7, #8]
 801226c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801226e:	429a      	cmp	r2, r3
 8012270:	d102      	bne.n	8012278 <tcp_bind+0xb8>
              return ERR_USE;
 8012272:	f06f 0307 	mvn.w	r3, #7
 8012276:	e029      	b.n	80122cc <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8012278:	69bb      	ldr	r3, [r7, #24]
 801227a:	68db      	ldr	r3, [r3, #12]
 801227c:	61bb      	str	r3, [r7, #24]
 801227e:	69bb      	ldr	r3, [r7, #24]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d1dd      	bne.n	8012240 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8012284:	69fb      	ldr	r3, [r7, #28]
 8012286:	3301      	adds	r3, #1
 8012288:	61fb      	str	r3, [r7, #28]
 801228a:	69fa      	ldr	r2, [r7, #28]
 801228c:	697b      	ldr	r3, [r7, #20]
 801228e:	429a      	cmp	r2, r3
 8012290:	dbcf      	blt.n	8012232 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8012292:	68bb      	ldr	r3, [r7, #8]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d00c      	beq.n	80122b2 <tcp_bind+0xf2>
 8012298:	68bb      	ldr	r3, [r7, #8]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d008      	beq.n	80122b2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80122a0:	68bb      	ldr	r3, [r7, #8]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d002      	beq.n	80122ac <tcp_bind+0xec>
 80122a6:	68bb      	ldr	r3, [r7, #8]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	e000      	b.n	80122ae <tcp_bind+0xee>
 80122ac:	2300      	movs	r3, #0
 80122ae:	68fa      	ldr	r2, [r7, #12]
 80122b0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	88fa      	ldrh	r2, [r7, #6]
 80122b6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80122b8:	4b0c      	ldr	r3, [pc, #48]	; (80122ec <tcp_bind+0x12c>)
 80122ba:	681a      	ldr	r2, [r3, #0]
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	60da      	str	r2, [r3, #12]
 80122c0:	4a0a      	ldr	r2, [pc, #40]	; (80122ec <tcp_bind+0x12c>)
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	6013      	str	r3, [r2, #0]
 80122c6:	f005 fbd5 	bl	8017a74 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80122ca:	2300      	movs	r3, #0
}
 80122cc:	4618      	mov	r0, r3
 80122ce:	3720      	adds	r7, #32
 80122d0:	46bd      	mov	sp, r7
 80122d2:	bd80      	pop	{r7, pc}
 80122d4:	0801fb14 	.word	0x0801fb14
 80122d8:	0801da10 	.word	0x0801da10
 80122dc:	0801dba4 	.word	0x0801dba4
 80122e0:	0801da54 	.word	0x0801da54
 80122e4:	0801dbbc 	.word	0x0801dbbc
 80122e8:	0801faec 	.word	0x0801faec
 80122ec:	2001108c 	.word	0x2001108c

080122f0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b084      	sub	sp, #16
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d106      	bne.n	801230c <tcp_update_rcv_ann_wnd+0x1c>
 80122fe:	4b25      	ldr	r3, [pc, #148]	; (8012394 <tcp_update_rcv_ann_wnd+0xa4>)
 8012300:	f240 32a6 	movw	r2, #934	; 0x3a6
 8012304:	4924      	ldr	r1, [pc, #144]	; (8012398 <tcp_update_rcv_ann_wnd+0xa8>)
 8012306:	4825      	ldr	r0, [pc, #148]	; (801239c <tcp_update_rcv_ann_wnd+0xac>)
 8012308:	f008 fcf4 	bl	801acf4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012310:	687a      	ldr	r2, [r7, #4]
 8012312:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8012314:	4413      	add	r3, r2
 8012316:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801231c:	687a      	ldr	r2, [r7, #4]
 801231e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8012320:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8012324:	bf28      	it	cs
 8012326:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801232a:	b292      	uxth	r2, r2
 801232c:	4413      	add	r3, r2
 801232e:	68fa      	ldr	r2, [r7, #12]
 8012330:	1ad3      	subs	r3, r2, r3
 8012332:	2b00      	cmp	r3, #0
 8012334:	db08      	blt.n	8012348 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012342:	68fa      	ldr	r2, [r7, #12]
 8012344:	1ad3      	subs	r3, r2, r3
 8012346:	e020      	b.n	801238a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012350:	1ad3      	subs	r3, r2, r3
 8012352:	2b00      	cmp	r3, #0
 8012354:	dd03      	ble.n	801235e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	2200      	movs	r2, #0
 801235a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801235c:	e014      	b.n	8012388 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012366:	1ad3      	subs	r3, r2, r3
 8012368:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012370:	d306      	bcc.n	8012380 <tcp_update_rcv_ann_wnd+0x90>
 8012372:	4b08      	ldr	r3, [pc, #32]	; (8012394 <tcp_update_rcv_ann_wnd+0xa4>)
 8012374:	f240 32b6 	movw	r2, #950	; 0x3b6
 8012378:	4909      	ldr	r1, [pc, #36]	; (80123a0 <tcp_update_rcv_ann_wnd+0xb0>)
 801237a:	4808      	ldr	r0, [pc, #32]	; (801239c <tcp_update_rcv_ann_wnd+0xac>)
 801237c:	f008 fcba 	bl	801acf4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012380:	68bb      	ldr	r3, [r7, #8]
 8012382:	b29a      	uxth	r2, r3
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8012388:	2300      	movs	r3, #0
  }
}
 801238a:	4618      	mov	r0, r3
 801238c:	3710      	adds	r7, #16
 801238e:	46bd      	mov	sp, r7
 8012390:	bd80      	pop	{r7, pc}
 8012392:	bf00      	nop
 8012394:	0801da10 	.word	0x0801da10
 8012398:	0801dc6c 	.word	0x0801dc6c
 801239c:	0801da54 	.word	0x0801da54
 80123a0:	0801dc90 	.word	0x0801dc90

080123a4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b084      	sub	sp, #16
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
 80123ac:	460b      	mov	r3, r1
 80123ae:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d107      	bne.n	80123c6 <tcp_recved+0x22>
 80123b6:	4b1f      	ldr	r3, [pc, #124]	; (8012434 <tcp_recved+0x90>)
 80123b8:	f240 32cf 	movw	r2, #975	; 0x3cf
 80123bc:	491e      	ldr	r1, [pc, #120]	; (8012438 <tcp_recved+0x94>)
 80123be:	481f      	ldr	r0, [pc, #124]	; (801243c <tcp_recved+0x98>)
 80123c0:	f008 fc98 	bl	801acf4 <iprintf>
 80123c4:	e032      	b.n	801242c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	7d1b      	ldrb	r3, [r3, #20]
 80123ca:	2b01      	cmp	r3, #1
 80123cc:	d106      	bne.n	80123dc <tcp_recved+0x38>
 80123ce:	4b19      	ldr	r3, [pc, #100]	; (8012434 <tcp_recved+0x90>)
 80123d0:	f240 32d2 	movw	r2, #978	; 0x3d2
 80123d4:	491a      	ldr	r1, [pc, #104]	; (8012440 <tcp_recved+0x9c>)
 80123d6:	4819      	ldr	r0, [pc, #100]	; (801243c <tcp_recved+0x98>)
 80123d8:	f008 fc8c 	bl	801acf4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80123e0:	887b      	ldrh	r3, [r7, #2]
 80123e2:	4413      	add	r3, r2
 80123e4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80123e6:	89fb      	ldrh	r3, [r7, #14]
 80123e8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80123ec:	d804      	bhi.n	80123f8 <tcp_recved+0x54>
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80123f2:	89fa      	ldrh	r2, [r7, #14]
 80123f4:	429a      	cmp	r2, r3
 80123f6:	d204      	bcs.n	8012402 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80123fe:	851a      	strh	r2, [r3, #40]	; 0x28
 8012400:	e002      	b.n	8012408 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	89fa      	ldrh	r2, [r7, #14]
 8012406:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8012408:	6878      	ldr	r0, [r7, #4]
 801240a:	f7ff ff71 	bl	80122f0 <tcp_update_rcv_ann_wnd>
 801240e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012416:	d309      	bcc.n	801242c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	8b5b      	ldrh	r3, [r3, #26]
 801241c:	f043 0302 	orr.w	r3, r3, #2
 8012420:	b29a      	uxth	r2, r3
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012426:	6878      	ldr	r0, [r7, #4]
 8012428:	f004 fbae 	bl	8016b88 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801242c:	3710      	adds	r7, #16
 801242e:	46bd      	mov	sp, r7
 8012430:	bd80      	pop	{r7, pc}
 8012432:	bf00      	nop
 8012434:	0801da10 	.word	0x0801da10
 8012438:	0801dcac 	.word	0x0801dcac
 801243c:	0801da54 	.word	0x0801da54
 8012440:	0801dcc4 	.word	0x0801dcc4

08012444 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8012444:	b480      	push	{r7}
 8012446:	b083      	sub	sp, #12
 8012448:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801244a:	2300      	movs	r3, #0
 801244c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801244e:	4b1e      	ldr	r3, [pc, #120]	; (80124c8 <tcp_new_port+0x84>)
 8012450:	881b      	ldrh	r3, [r3, #0]
 8012452:	3301      	adds	r3, #1
 8012454:	b29a      	uxth	r2, r3
 8012456:	4b1c      	ldr	r3, [pc, #112]	; (80124c8 <tcp_new_port+0x84>)
 8012458:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801245a:	4b1b      	ldr	r3, [pc, #108]	; (80124c8 <tcp_new_port+0x84>)
 801245c:	881b      	ldrh	r3, [r3, #0]
 801245e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012462:	4293      	cmp	r3, r2
 8012464:	d103      	bne.n	801246e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8012466:	4b18      	ldr	r3, [pc, #96]	; (80124c8 <tcp_new_port+0x84>)
 8012468:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801246c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801246e:	2300      	movs	r3, #0
 8012470:	71fb      	strb	r3, [r7, #7]
 8012472:	e01e      	b.n	80124b2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012474:	79fb      	ldrb	r3, [r7, #7]
 8012476:	4a15      	ldr	r2, [pc, #84]	; (80124cc <tcp_new_port+0x88>)
 8012478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	603b      	str	r3, [r7, #0]
 8012480:	e011      	b.n	80124a6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8012482:	683b      	ldr	r3, [r7, #0]
 8012484:	8ada      	ldrh	r2, [r3, #22]
 8012486:	4b10      	ldr	r3, [pc, #64]	; (80124c8 <tcp_new_port+0x84>)
 8012488:	881b      	ldrh	r3, [r3, #0]
 801248a:	429a      	cmp	r2, r3
 801248c:	d108      	bne.n	80124a0 <tcp_new_port+0x5c>
        n++;
 801248e:	88bb      	ldrh	r3, [r7, #4]
 8012490:	3301      	adds	r3, #1
 8012492:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8012494:	88bb      	ldrh	r3, [r7, #4]
 8012496:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801249a:	d3d8      	bcc.n	801244e <tcp_new_port+0xa>
          return 0;
 801249c:	2300      	movs	r3, #0
 801249e:	e00d      	b.n	80124bc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80124a0:	683b      	ldr	r3, [r7, #0]
 80124a2:	68db      	ldr	r3, [r3, #12]
 80124a4:	603b      	str	r3, [r7, #0]
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d1ea      	bne.n	8012482 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80124ac:	79fb      	ldrb	r3, [r7, #7]
 80124ae:	3301      	adds	r3, #1
 80124b0:	71fb      	strb	r3, [r7, #7]
 80124b2:	79fb      	ldrb	r3, [r7, #7]
 80124b4:	2b03      	cmp	r3, #3
 80124b6:	d9dd      	bls.n	8012474 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80124b8:	4b03      	ldr	r3, [pc, #12]	; (80124c8 <tcp_new_port+0x84>)
 80124ba:	881b      	ldrh	r3, [r3, #0]
}
 80124bc:	4618      	mov	r0, r3
 80124be:	370c      	adds	r7, #12
 80124c0:	46bd      	mov	sp, r7
 80124c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c6:	4770      	bx	lr
 80124c8:	20000024 	.word	0x20000024
 80124cc:	0801faec 	.word	0x0801faec

080124d0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80124d0:	b5b0      	push	{r4, r5, r7, lr}
 80124d2:	b090      	sub	sp, #64	; 0x40
 80124d4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80124d6:	2300      	movs	r3, #0
 80124d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80124dc:	4b94      	ldr	r3, [pc, #592]	; (8012730 <tcp_slowtmr+0x260>)
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	3301      	adds	r3, #1
 80124e2:	4a93      	ldr	r2, [pc, #588]	; (8012730 <tcp_slowtmr+0x260>)
 80124e4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80124e6:	4b93      	ldr	r3, [pc, #588]	; (8012734 <tcp_slowtmr+0x264>)
 80124e8:	781b      	ldrb	r3, [r3, #0]
 80124ea:	3301      	adds	r3, #1
 80124ec:	b2da      	uxtb	r2, r3
 80124ee:	4b91      	ldr	r3, [pc, #580]	; (8012734 <tcp_slowtmr+0x264>)
 80124f0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80124f2:	2300      	movs	r3, #0
 80124f4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80124f6:	4b90      	ldr	r3, [pc, #576]	; (8012738 <tcp_slowtmr+0x268>)
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80124fc:	e29d      	b.n	8012a3a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80124fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012500:	7d1b      	ldrb	r3, [r3, #20]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d106      	bne.n	8012514 <tcp_slowtmr+0x44>
 8012506:	4b8d      	ldr	r3, [pc, #564]	; (801273c <tcp_slowtmr+0x26c>)
 8012508:	f240 42be 	movw	r2, #1214	; 0x4be
 801250c:	498c      	ldr	r1, [pc, #560]	; (8012740 <tcp_slowtmr+0x270>)
 801250e:	488d      	ldr	r0, [pc, #564]	; (8012744 <tcp_slowtmr+0x274>)
 8012510:	f008 fbf0 	bl	801acf4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8012514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012516:	7d1b      	ldrb	r3, [r3, #20]
 8012518:	2b01      	cmp	r3, #1
 801251a:	d106      	bne.n	801252a <tcp_slowtmr+0x5a>
 801251c:	4b87      	ldr	r3, [pc, #540]	; (801273c <tcp_slowtmr+0x26c>)
 801251e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8012522:	4989      	ldr	r1, [pc, #548]	; (8012748 <tcp_slowtmr+0x278>)
 8012524:	4887      	ldr	r0, [pc, #540]	; (8012744 <tcp_slowtmr+0x274>)
 8012526:	f008 fbe5 	bl	801acf4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801252a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801252c:	7d1b      	ldrb	r3, [r3, #20]
 801252e:	2b0a      	cmp	r3, #10
 8012530:	d106      	bne.n	8012540 <tcp_slowtmr+0x70>
 8012532:	4b82      	ldr	r3, [pc, #520]	; (801273c <tcp_slowtmr+0x26c>)
 8012534:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8012538:	4984      	ldr	r1, [pc, #528]	; (801274c <tcp_slowtmr+0x27c>)
 801253a:	4882      	ldr	r0, [pc, #520]	; (8012744 <tcp_slowtmr+0x274>)
 801253c:	f008 fbda 	bl	801acf4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012542:	7f9a      	ldrb	r2, [r3, #30]
 8012544:	4b7b      	ldr	r3, [pc, #492]	; (8012734 <tcp_slowtmr+0x264>)
 8012546:	781b      	ldrb	r3, [r3, #0]
 8012548:	429a      	cmp	r2, r3
 801254a:	d105      	bne.n	8012558 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801254c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801254e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012552:	68db      	ldr	r3, [r3, #12]
 8012554:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8012556:	e270      	b.n	8012a3a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8012558:	4b76      	ldr	r3, [pc, #472]	; (8012734 <tcp_slowtmr+0x264>)
 801255a:	781a      	ldrb	r2, [r3, #0]
 801255c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801255e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8012560:	2300      	movs	r3, #0
 8012562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8012566:	2300      	movs	r3, #0
 8012568:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801256e:	7d1b      	ldrb	r3, [r3, #20]
 8012570:	2b02      	cmp	r3, #2
 8012572:	d10a      	bne.n	801258a <tcp_slowtmr+0xba>
 8012574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012576:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801257a:	2b05      	cmp	r3, #5
 801257c:	d905      	bls.n	801258a <tcp_slowtmr+0xba>
      ++pcb_remove;
 801257e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012582:	3301      	adds	r3, #1
 8012584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012588:	e11e      	b.n	80127c8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801258a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801258c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012590:	2b0b      	cmp	r3, #11
 8012592:	d905      	bls.n	80125a0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8012594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012598:	3301      	adds	r3, #1
 801259a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801259e:	e113      	b.n	80127c8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80125a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d075      	beq.n	8012696 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80125aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d006      	beq.n	80125c0 <tcp_slowtmr+0xf0>
 80125b2:	4b62      	ldr	r3, [pc, #392]	; (801273c <tcp_slowtmr+0x26c>)
 80125b4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80125b8:	4965      	ldr	r1, [pc, #404]	; (8012750 <tcp_slowtmr+0x280>)
 80125ba:	4862      	ldr	r0, [pc, #392]	; (8012744 <tcp_slowtmr+0x274>)
 80125bc:	f008 fb9a 	bl	801acf4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80125c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d106      	bne.n	80125d6 <tcp_slowtmr+0x106>
 80125c8:	4b5c      	ldr	r3, [pc, #368]	; (801273c <tcp_slowtmr+0x26c>)
 80125ca:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80125ce:	4961      	ldr	r1, [pc, #388]	; (8012754 <tcp_slowtmr+0x284>)
 80125d0:	485c      	ldr	r0, [pc, #368]	; (8012744 <tcp_slowtmr+0x274>)
 80125d2:	f008 fb8f 	bl	801acf4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80125d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125d8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80125dc:	2b0b      	cmp	r3, #11
 80125de:	d905      	bls.n	80125ec <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80125e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125e4:	3301      	adds	r3, #1
 80125e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80125ea:	e0ed      	b.n	80127c8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80125ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80125f2:	3b01      	subs	r3, #1
 80125f4:	4a58      	ldr	r2, [pc, #352]	; (8012758 <tcp_slowtmr+0x288>)
 80125f6:	5cd3      	ldrb	r3, [r2, r3]
 80125f8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80125fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125fc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012600:	7c7a      	ldrb	r2, [r7, #17]
 8012602:	429a      	cmp	r2, r3
 8012604:	d907      	bls.n	8012616 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8012606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012608:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801260c:	3301      	adds	r3, #1
 801260e:	b2da      	uxtb	r2, r3
 8012610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012612:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8012616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012618:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801261c:	7c7a      	ldrb	r2, [r7, #17]
 801261e:	429a      	cmp	r2, r3
 8012620:	f200 80d2 	bhi.w	80127c8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8012624:	2301      	movs	r3, #1
 8012626:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8012628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801262a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801262e:	2b00      	cmp	r3, #0
 8012630:	d108      	bne.n	8012644 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8012632:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012634:	f005 f950 	bl	80178d8 <tcp_zero_window_probe>
 8012638:	4603      	mov	r3, r0
 801263a:	2b00      	cmp	r3, #0
 801263c:	d014      	beq.n	8012668 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801263e:	2300      	movs	r3, #0
 8012640:	623b      	str	r3, [r7, #32]
 8012642:	e011      	b.n	8012668 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8012644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012646:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801264a:	4619      	mov	r1, r3
 801264c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801264e:	f004 f815 	bl	801667c <tcp_split_unsent_seg>
 8012652:	4603      	mov	r3, r0
 8012654:	2b00      	cmp	r3, #0
 8012656:	d107      	bne.n	8012668 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8012658:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801265a:	f004 fa95 	bl	8016b88 <tcp_output>
 801265e:	4603      	mov	r3, r0
 8012660:	2b00      	cmp	r3, #0
 8012662:	d101      	bne.n	8012668 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8012664:	2300      	movs	r3, #0
 8012666:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8012668:	6a3b      	ldr	r3, [r7, #32]
 801266a:	2b00      	cmp	r3, #0
 801266c:	f000 80ac 	beq.w	80127c8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8012670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012672:	2200      	movs	r2, #0
 8012674:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8012678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801267a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801267e:	2b06      	cmp	r3, #6
 8012680:	f200 80a2 	bhi.w	80127c8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8012684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012686:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801268a:	3301      	adds	r3, #1
 801268c:	b2da      	uxtb	r2, r3
 801268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012690:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8012694:	e098      	b.n	80127c8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8012696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012698:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801269c:	2b00      	cmp	r3, #0
 801269e:	db0f      	blt.n	80126c0 <tcp_slowtmr+0x1f0>
 80126a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126a2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80126a6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80126aa:	4293      	cmp	r3, r2
 80126ac:	d008      	beq.n	80126c0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80126ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80126b4:	b29b      	uxth	r3, r3
 80126b6:	3301      	adds	r3, #1
 80126b8:	b29b      	uxth	r3, r3
 80126ba:	b21a      	sxth	r2, r3
 80126bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126be:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80126c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126c2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80126c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126c8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80126cc:	429a      	cmp	r2, r3
 80126ce:	db7b      	blt.n	80127c8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80126d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80126d2:	f004 fd4b 	bl	801716c <tcp_rexmit_rto_prepare>
 80126d6:	4603      	mov	r3, r0
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d007      	beq.n	80126ec <tcp_slowtmr+0x21c>
 80126dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d171      	bne.n	80127c8 <tcp_slowtmr+0x2f8>
 80126e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d06d      	beq.n	80127c8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80126ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126ee:	7d1b      	ldrb	r3, [r3, #20]
 80126f0:	2b02      	cmp	r3, #2
 80126f2:	d03a      	beq.n	801276a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80126f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80126fa:	2b0c      	cmp	r3, #12
 80126fc:	bf28      	it	cs
 80126fe:	230c      	movcs	r3, #12
 8012700:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8012702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012704:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012708:	10db      	asrs	r3, r3, #3
 801270a:	b21b      	sxth	r3, r3
 801270c:	461a      	mov	r2, r3
 801270e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012710:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012714:	4413      	add	r3, r2
 8012716:	7efa      	ldrb	r2, [r7, #27]
 8012718:	4910      	ldr	r1, [pc, #64]	; (801275c <tcp_slowtmr+0x28c>)
 801271a:	5c8a      	ldrb	r2, [r1, r2]
 801271c:	4093      	lsls	r3, r2
 801271e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8012720:	697b      	ldr	r3, [r7, #20]
 8012722:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8012726:	4293      	cmp	r3, r2
 8012728:	dc1a      	bgt.n	8012760 <tcp_slowtmr+0x290>
 801272a:	697b      	ldr	r3, [r7, #20]
 801272c:	b21a      	sxth	r2, r3
 801272e:	e019      	b.n	8012764 <tcp_slowtmr+0x294>
 8012730:	20011088 	.word	0x20011088
 8012734:	2001109e 	.word	0x2001109e
 8012738:	20011094 	.word	0x20011094
 801273c:	0801da10 	.word	0x0801da10
 8012740:	0801dd54 	.word	0x0801dd54
 8012744:	0801da54 	.word	0x0801da54
 8012748:	0801dd80 	.word	0x0801dd80
 801274c:	0801ddac 	.word	0x0801ddac
 8012750:	0801dddc 	.word	0x0801dddc
 8012754:	0801de10 	.word	0x0801de10
 8012758:	0801fae4 	.word	0x0801fae4
 801275c:	0801fad4 	.word	0x0801fad4
 8012760:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012766:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801276a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801276c:	2200      	movs	r2, #0
 801276e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8012770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012772:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012778:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801277c:	4293      	cmp	r3, r2
 801277e:	bf28      	it	cs
 8012780:	4613      	movcs	r3, r2
 8012782:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8012784:	8a7b      	ldrh	r3, [r7, #18]
 8012786:	085b      	lsrs	r3, r3, #1
 8012788:	b29a      	uxth	r2, r3
 801278a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801278c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8012790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012792:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012798:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801279a:	005b      	lsls	r3, r3, #1
 801279c:	b29b      	uxth	r3, r3
 801279e:	429a      	cmp	r2, r3
 80127a0:	d206      	bcs.n	80127b0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80127a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80127a6:	005b      	lsls	r3, r3, #1
 80127a8:	b29a      	uxth	r2, r3
 80127aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80127b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127b2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80127b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80127ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127bc:	2200      	movs	r2, #0
 80127be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80127c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80127c4:	f004 fd42 	bl	801724c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80127c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ca:	7d1b      	ldrb	r3, [r3, #20]
 80127cc:	2b06      	cmp	r3, #6
 80127ce:	d111      	bne.n	80127f4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80127d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127d2:	8b5b      	ldrh	r3, [r3, #26]
 80127d4:	f003 0310 	and.w	r3, r3, #16
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d00b      	beq.n	80127f4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80127dc:	4b9c      	ldr	r3, [pc, #624]	; (8012a50 <tcp_slowtmr+0x580>)
 80127de:	681a      	ldr	r2, [r3, #0]
 80127e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127e2:	6a1b      	ldr	r3, [r3, #32]
 80127e4:	1ad3      	subs	r3, r2, r3
 80127e6:	2b28      	cmp	r3, #40	; 0x28
 80127e8:	d904      	bls.n	80127f4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80127ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80127ee:	3301      	adds	r3, #1
 80127f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80127f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127f6:	7a5b      	ldrb	r3, [r3, #9]
 80127f8:	f003 0308 	and.w	r3, r3, #8
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d04a      	beq.n	8012896 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8012800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012802:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012804:	2b04      	cmp	r3, #4
 8012806:	d003      	beq.n	8012810 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8012808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801280a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801280c:	2b07      	cmp	r3, #7
 801280e:	d142      	bne.n	8012896 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012810:	4b8f      	ldr	r3, [pc, #572]	; (8012a50 <tcp_slowtmr+0x580>)
 8012812:	681a      	ldr	r2, [r3, #0]
 8012814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012816:	6a1b      	ldr	r3, [r3, #32]
 8012818:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801281a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801281c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8012820:	4b8c      	ldr	r3, [pc, #560]	; (8012a54 <tcp_slowtmr+0x584>)
 8012822:	440b      	add	r3, r1
 8012824:	498c      	ldr	r1, [pc, #560]	; (8012a58 <tcp_slowtmr+0x588>)
 8012826:	fba1 1303 	umull	r1, r3, r1, r3
 801282a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801282c:	429a      	cmp	r2, r3
 801282e:	d90a      	bls.n	8012846 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8012830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012834:	3301      	adds	r3, #1
 8012836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801283a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801283e:	3301      	adds	r3, #1
 8012840:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012844:	e027      	b.n	8012896 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012846:	4b82      	ldr	r3, [pc, #520]	; (8012a50 <tcp_slowtmr+0x580>)
 8012848:	681a      	ldr	r2, [r3, #0]
 801284a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801284c:	6a1b      	ldr	r3, [r3, #32]
 801284e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8012850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012852:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8012856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012858:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801285c:	4618      	mov	r0, r3
 801285e:	4b7f      	ldr	r3, [pc, #508]	; (8012a5c <tcp_slowtmr+0x58c>)
 8012860:	fb00 f303 	mul.w	r3, r0, r3
 8012864:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8012866:	497c      	ldr	r1, [pc, #496]	; (8012a58 <tcp_slowtmr+0x588>)
 8012868:	fba1 1303 	umull	r1, r3, r1, r3
 801286c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801286e:	429a      	cmp	r2, r3
 8012870:	d911      	bls.n	8012896 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8012872:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012874:	f004 fff0 	bl	8017858 <tcp_keepalive>
 8012878:	4603      	mov	r3, r0
 801287a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801287e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012882:	2b00      	cmp	r3, #0
 8012884:	d107      	bne.n	8012896 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8012886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012888:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801288c:	3301      	adds	r3, #1
 801288e:	b2da      	uxtb	r2, r3
 8012890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012892:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8012896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801289a:	2b00      	cmp	r3, #0
 801289c:	d011      	beq.n	80128c2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801289e:	4b6c      	ldr	r3, [pc, #432]	; (8012a50 <tcp_slowtmr+0x580>)
 80128a0:	681a      	ldr	r2, [r3, #0]
 80128a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128a4:	6a1b      	ldr	r3, [r3, #32]
 80128a6:	1ad2      	subs	r2, r2, r3
 80128a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128aa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80128ae:	4619      	mov	r1, r3
 80128b0:	460b      	mov	r3, r1
 80128b2:	005b      	lsls	r3, r3, #1
 80128b4:	440b      	add	r3, r1
 80128b6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80128b8:	429a      	cmp	r2, r3
 80128ba:	d302      	bcc.n	80128c2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80128bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80128be:	f000 feab 	bl	8013618 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80128c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128c4:	7d1b      	ldrb	r3, [r3, #20]
 80128c6:	2b03      	cmp	r3, #3
 80128c8:	d10b      	bne.n	80128e2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80128ca:	4b61      	ldr	r3, [pc, #388]	; (8012a50 <tcp_slowtmr+0x580>)
 80128cc:	681a      	ldr	r2, [r3, #0]
 80128ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128d0:	6a1b      	ldr	r3, [r3, #32]
 80128d2:	1ad3      	subs	r3, r2, r3
 80128d4:	2b28      	cmp	r3, #40	; 0x28
 80128d6:	d904      	bls.n	80128e2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80128d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128dc:	3301      	adds	r3, #1
 80128de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80128e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128e4:	7d1b      	ldrb	r3, [r3, #20]
 80128e6:	2b09      	cmp	r3, #9
 80128e8:	d10b      	bne.n	8012902 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80128ea:	4b59      	ldr	r3, [pc, #356]	; (8012a50 <tcp_slowtmr+0x580>)
 80128ec:	681a      	ldr	r2, [r3, #0]
 80128ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128f0:	6a1b      	ldr	r3, [r3, #32]
 80128f2:	1ad3      	subs	r3, r2, r3
 80128f4:	2bf0      	cmp	r3, #240	; 0xf0
 80128f6:	d904      	bls.n	8012902 <tcp_slowtmr+0x432>
        ++pcb_remove;
 80128f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128fc:	3301      	adds	r3, #1
 80128fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012902:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012906:	2b00      	cmp	r3, #0
 8012908:	d060      	beq.n	80129cc <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801290c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012910:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8012912:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012914:	f000 fccc 	bl	80132b0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8012918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801291a:	2b00      	cmp	r3, #0
 801291c:	d010      	beq.n	8012940 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801291e:	4b50      	ldr	r3, [pc, #320]	; (8012a60 <tcp_slowtmr+0x590>)
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012924:	429a      	cmp	r2, r3
 8012926:	d106      	bne.n	8012936 <tcp_slowtmr+0x466>
 8012928:	4b4e      	ldr	r3, [pc, #312]	; (8012a64 <tcp_slowtmr+0x594>)
 801292a:	f240 526d 	movw	r2, #1389	; 0x56d
 801292e:	494e      	ldr	r1, [pc, #312]	; (8012a68 <tcp_slowtmr+0x598>)
 8012930:	484e      	ldr	r0, [pc, #312]	; (8012a6c <tcp_slowtmr+0x59c>)
 8012932:	f008 f9df 	bl	801acf4 <iprintf>
        prev->next = pcb->next;
 8012936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012938:	68da      	ldr	r2, [r3, #12]
 801293a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801293c:	60da      	str	r2, [r3, #12]
 801293e:	e00f      	b.n	8012960 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8012940:	4b47      	ldr	r3, [pc, #284]	; (8012a60 <tcp_slowtmr+0x590>)
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012946:	429a      	cmp	r2, r3
 8012948:	d006      	beq.n	8012958 <tcp_slowtmr+0x488>
 801294a:	4b46      	ldr	r3, [pc, #280]	; (8012a64 <tcp_slowtmr+0x594>)
 801294c:	f240 5271 	movw	r2, #1393	; 0x571
 8012950:	4947      	ldr	r1, [pc, #284]	; (8012a70 <tcp_slowtmr+0x5a0>)
 8012952:	4846      	ldr	r0, [pc, #280]	; (8012a6c <tcp_slowtmr+0x59c>)
 8012954:	f008 f9ce 	bl	801acf4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8012958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801295a:	68db      	ldr	r3, [r3, #12]
 801295c:	4a40      	ldr	r2, [pc, #256]	; (8012a60 <tcp_slowtmr+0x590>)
 801295e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8012960:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012964:	2b00      	cmp	r3, #0
 8012966:	d013      	beq.n	8012990 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801296a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801296c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801296e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8012970:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8012972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012974:	3304      	adds	r3, #4
 8012976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012978:	8ad2      	ldrh	r2, [r2, #22]
 801297a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801297c:	8b09      	ldrh	r1, [r1, #24]
 801297e:	9102      	str	r1, [sp, #8]
 8012980:	9201      	str	r2, [sp, #4]
 8012982:	9300      	str	r3, [sp, #0]
 8012984:	462b      	mov	r3, r5
 8012986:	4622      	mov	r2, r4
 8012988:	4601      	mov	r1, r0
 801298a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801298c:	f004 feb0 	bl	80176f0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8012990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012992:	691b      	ldr	r3, [r3, #16]
 8012994:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012998:	7d1b      	ldrb	r3, [r3, #20]
 801299a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801299c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801299e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80129a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129a2:	68db      	ldr	r3, [r3, #12]
 80129a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80129a6:	6838      	ldr	r0, [r7, #0]
 80129a8:	f7ff f8ba 	bl	8011b20 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80129ac:	4b31      	ldr	r3, [pc, #196]	; (8012a74 <tcp_slowtmr+0x5a4>)
 80129ae:	2200      	movs	r2, #0
 80129b0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d004      	beq.n	80129c2 <tcp_slowtmr+0x4f2>
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	f06f 010c 	mvn.w	r1, #12
 80129be:	68b8      	ldr	r0, [r7, #8]
 80129c0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80129c2:	4b2c      	ldr	r3, [pc, #176]	; (8012a74 <tcp_slowtmr+0x5a4>)
 80129c4:	781b      	ldrb	r3, [r3, #0]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d037      	beq.n	8012a3a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80129ca:	e592      	b.n	80124f2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80129cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ce:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80129d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d2:	68db      	ldr	r3, [r3, #12]
 80129d4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80129d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129d8:	7f1b      	ldrb	r3, [r3, #28]
 80129da:	3301      	adds	r3, #1
 80129dc:	b2da      	uxtb	r2, r3
 80129de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129e0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80129e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129e4:	7f1a      	ldrb	r2, [r3, #28]
 80129e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129e8:	7f5b      	ldrb	r3, [r3, #29]
 80129ea:	429a      	cmp	r2, r3
 80129ec:	d325      	bcc.n	8012a3a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80129ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129f0:	2200      	movs	r2, #0
 80129f2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80129f4:	4b1f      	ldr	r3, [pc, #124]	; (8012a74 <tcp_slowtmr+0x5a4>)
 80129f6:	2200      	movs	r2, #0
 80129f8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80129fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d00b      	beq.n	8012a1c <tcp_slowtmr+0x54c>
 8012a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a0c:	6912      	ldr	r2, [r2, #16]
 8012a0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012a10:	4610      	mov	r0, r2
 8012a12:	4798      	blx	r3
 8012a14:	4603      	mov	r3, r0
 8012a16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8012a1a:	e002      	b.n	8012a22 <tcp_slowtmr+0x552>
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8012a22:	4b14      	ldr	r3, [pc, #80]	; (8012a74 <tcp_slowtmr+0x5a4>)
 8012a24:	781b      	ldrb	r3, [r3, #0]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d000      	beq.n	8012a2c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8012a2a:	e562      	b.n	80124f2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012a2c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d102      	bne.n	8012a3a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8012a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a36:	f004 f8a7 	bl	8016b88 <tcp_output>
  while (pcb != NULL) {
 8012a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	f47f ad5e 	bne.w	80124fe <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8012a42:	2300      	movs	r3, #0
 8012a44:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8012a46:	4b0c      	ldr	r3, [pc, #48]	; (8012a78 <tcp_slowtmr+0x5a8>)
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012a4c:	e069      	b.n	8012b22 <tcp_slowtmr+0x652>
 8012a4e:	bf00      	nop
 8012a50:	20011088 	.word	0x20011088
 8012a54:	000a4cb8 	.word	0x000a4cb8
 8012a58:	10624dd3 	.word	0x10624dd3
 8012a5c:	000124f8 	.word	0x000124f8
 8012a60:	20011094 	.word	0x20011094
 8012a64:	0801da10 	.word	0x0801da10
 8012a68:	0801de48 	.word	0x0801de48
 8012a6c:	0801da54 	.word	0x0801da54
 8012a70:	0801de74 	.word	0x0801de74
 8012a74:	2001109c 	.word	0x2001109c
 8012a78:	20011098 	.word	0x20011098
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a7e:	7d1b      	ldrb	r3, [r3, #20]
 8012a80:	2b0a      	cmp	r3, #10
 8012a82:	d006      	beq.n	8012a92 <tcp_slowtmr+0x5c2>
 8012a84:	4b2b      	ldr	r3, [pc, #172]	; (8012b34 <tcp_slowtmr+0x664>)
 8012a86:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8012a8a:	492b      	ldr	r1, [pc, #172]	; (8012b38 <tcp_slowtmr+0x668>)
 8012a8c:	482b      	ldr	r0, [pc, #172]	; (8012b3c <tcp_slowtmr+0x66c>)
 8012a8e:	f008 f931 	bl	801acf4 <iprintf>
    pcb_remove = 0;
 8012a92:	2300      	movs	r3, #0
 8012a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012a98:	4b29      	ldr	r3, [pc, #164]	; (8012b40 <tcp_slowtmr+0x670>)
 8012a9a:	681a      	ldr	r2, [r3, #0]
 8012a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a9e:	6a1b      	ldr	r3, [r3, #32]
 8012aa0:	1ad3      	subs	r3, r2, r3
 8012aa2:	2bf0      	cmp	r3, #240	; 0xf0
 8012aa4:	d904      	bls.n	8012ab0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8012aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012aaa:	3301      	adds	r3, #1
 8012aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d02f      	beq.n	8012b18 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012ab8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012aba:	f000 fbf9 	bl	80132b0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d010      	beq.n	8012ae6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012ac4:	4b1f      	ldr	r3, [pc, #124]	; (8012b44 <tcp_slowtmr+0x674>)
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012aca:	429a      	cmp	r2, r3
 8012acc:	d106      	bne.n	8012adc <tcp_slowtmr+0x60c>
 8012ace:	4b19      	ldr	r3, [pc, #100]	; (8012b34 <tcp_slowtmr+0x664>)
 8012ad0:	f240 52af 	movw	r2, #1455	; 0x5af
 8012ad4:	491c      	ldr	r1, [pc, #112]	; (8012b48 <tcp_slowtmr+0x678>)
 8012ad6:	4819      	ldr	r0, [pc, #100]	; (8012b3c <tcp_slowtmr+0x66c>)
 8012ad8:	f008 f90c 	bl	801acf4 <iprintf>
        prev->next = pcb->next;
 8012adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ade:	68da      	ldr	r2, [r3, #12]
 8012ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ae2:	60da      	str	r2, [r3, #12]
 8012ae4:	e00f      	b.n	8012b06 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8012ae6:	4b17      	ldr	r3, [pc, #92]	; (8012b44 <tcp_slowtmr+0x674>)
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012aec:	429a      	cmp	r2, r3
 8012aee:	d006      	beq.n	8012afe <tcp_slowtmr+0x62e>
 8012af0:	4b10      	ldr	r3, [pc, #64]	; (8012b34 <tcp_slowtmr+0x664>)
 8012af2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8012af6:	4915      	ldr	r1, [pc, #84]	; (8012b4c <tcp_slowtmr+0x67c>)
 8012af8:	4810      	ldr	r0, [pc, #64]	; (8012b3c <tcp_slowtmr+0x66c>)
 8012afa:	f008 f8fb 	bl	801acf4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b00:	68db      	ldr	r3, [r3, #12]
 8012b02:	4a10      	ldr	r2, [pc, #64]	; (8012b44 <tcp_slowtmr+0x674>)
 8012b04:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8012b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b08:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8012b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b0c:	68db      	ldr	r3, [r3, #12]
 8012b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012b10:	69f8      	ldr	r0, [r7, #28]
 8012b12:	f7ff f805 	bl	8011b20 <tcp_free>
 8012b16:	e004      	b.n	8012b22 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8012b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b1a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b1e:	68db      	ldr	r3, [r3, #12]
 8012b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d1a9      	bne.n	8012a7c <tcp_slowtmr+0x5ac>
    }
  }
}
 8012b28:	bf00      	nop
 8012b2a:	bf00      	nop
 8012b2c:	3730      	adds	r7, #48	; 0x30
 8012b2e:	46bd      	mov	sp, r7
 8012b30:	bdb0      	pop	{r4, r5, r7, pc}
 8012b32:	bf00      	nop
 8012b34:	0801da10 	.word	0x0801da10
 8012b38:	0801dea0 	.word	0x0801dea0
 8012b3c:	0801da54 	.word	0x0801da54
 8012b40:	20011088 	.word	0x20011088
 8012b44:	20011098 	.word	0x20011098
 8012b48:	0801ded0 	.word	0x0801ded0
 8012b4c:	0801def8 	.word	0x0801def8

08012b50 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b082      	sub	sp, #8
 8012b54:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012b56:	4b2d      	ldr	r3, [pc, #180]	; (8012c0c <tcp_fasttmr+0xbc>)
 8012b58:	781b      	ldrb	r3, [r3, #0]
 8012b5a:	3301      	adds	r3, #1
 8012b5c:	b2da      	uxtb	r2, r3
 8012b5e:	4b2b      	ldr	r3, [pc, #172]	; (8012c0c <tcp_fasttmr+0xbc>)
 8012b60:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012b62:	4b2b      	ldr	r3, [pc, #172]	; (8012c10 <tcp_fasttmr+0xc0>)
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012b68:	e048      	b.n	8012bfc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	7f9a      	ldrb	r2, [r3, #30]
 8012b6e:	4b27      	ldr	r3, [pc, #156]	; (8012c0c <tcp_fasttmr+0xbc>)
 8012b70:	781b      	ldrb	r3, [r3, #0]
 8012b72:	429a      	cmp	r2, r3
 8012b74:	d03f      	beq.n	8012bf6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012b76:	4b25      	ldr	r3, [pc, #148]	; (8012c0c <tcp_fasttmr+0xbc>)
 8012b78:	781a      	ldrb	r2, [r3, #0]
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	8b5b      	ldrh	r3, [r3, #26]
 8012b82:	f003 0301 	and.w	r3, r3, #1
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d010      	beq.n	8012bac <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	8b5b      	ldrh	r3, [r3, #26]
 8012b8e:	f043 0302 	orr.w	r3, r3, #2
 8012b92:	b29a      	uxth	r2, r3
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012b98:	6878      	ldr	r0, [r7, #4]
 8012b9a:	f003 fff5 	bl	8016b88 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	8b5b      	ldrh	r3, [r3, #26]
 8012ba2:	f023 0303 	bic.w	r3, r3, #3
 8012ba6:	b29a      	uxth	r2, r3
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	8b5b      	ldrh	r3, [r3, #26]
 8012bb0:	f003 0308 	and.w	r3, r3, #8
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d009      	beq.n	8012bcc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	8b5b      	ldrh	r3, [r3, #26]
 8012bbc:	f023 0308 	bic.w	r3, r3, #8
 8012bc0:	b29a      	uxth	r2, r3
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8012bc6:	6878      	ldr	r0, [r7, #4]
 8012bc8:	f7ff f93e 	bl	8011e48 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	68db      	ldr	r3, [r3, #12]
 8012bd0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d00a      	beq.n	8012bf0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8012bda:	4b0e      	ldr	r3, [pc, #56]	; (8012c14 <tcp_fasttmr+0xc4>)
 8012bdc:	2200      	movs	r2, #0
 8012bde:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012be0:	6878      	ldr	r0, [r7, #4]
 8012be2:	f000 f819 	bl	8012c18 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8012be6:	4b0b      	ldr	r3, [pc, #44]	; (8012c14 <tcp_fasttmr+0xc4>)
 8012be8:	781b      	ldrb	r3, [r3, #0]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d000      	beq.n	8012bf0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012bee:	e7b8      	b.n	8012b62 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012bf0:	683b      	ldr	r3, [r7, #0]
 8012bf2:	607b      	str	r3, [r7, #4]
 8012bf4:	e002      	b.n	8012bfc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	68db      	ldr	r3, [r3, #12]
 8012bfa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d1b3      	bne.n	8012b6a <tcp_fasttmr+0x1a>
    }
  }
}
 8012c02:	bf00      	nop
 8012c04:	bf00      	nop
 8012c06:	3708      	adds	r7, #8
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	bd80      	pop	{r7, pc}
 8012c0c:	2001109e 	.word	0x2001109e
 8012c10:	20011094 	.word	0x20011094
 8012c14:	2001109c 	.word	0x2001109c

08012c18 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012c18:	b590      	push	{r4, r7, lr}
 8012c1a:	b085      	sub	sp, #20
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d109      	bne.n	8012c3a <tcp_process_refused_data+0x22>
 8012c26:	4b37      	ldr	r3, [pc, #220]	; (8012d04 <tcp_process_refused_data+0xec>)
 8012c28:	f240 6209 	movw	r2, #1545	; 0x609
 8012c2c:	4936      	ldr	r1, [pc, #216]	; (8012d08 <tcp_process_refused_data+0xf0>)
 8012c2e:	4837      	ldr	r0, [pc, #220]	; (8012d0c <tcp_process_refused_data+0xf4>)
 8012c30:	f008 f860 	bl	801acf4 <iprintf>
 8012c34:	f06f 030f 	mvn.w	r3, #15
 8012c38:	e060      	b.n	8012cfc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c3e:	7b5b      	ldrb	r3, [r3, #13]
 8012c40:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c46:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d00b      	beq.n	8012c70 <tcp_process_refused_data+0x58>
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	6918      	ldr	r0, [r3, #16]
 8012c62:	2300      	movs	r3, #0
 8012c64:	68ba      	ldr	r2, [r7, #8]
 8012c66:	6879      	ldr	r1, [r7, #4]
 8012c68:	47a0      	blx	r4
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	73fb      	strb	r3, [r7, #15]
 8012c6e:	e007      	b.n	8012c80 <tcp_process_refused_data+0x68>
 8012c70:	2300      	movs	r3, #0
 8012c72:	68ba      	ldr	r2, [r7, #8]
 8012c74:	6879      	ldr	r1, [r7, #4]
 8012c76:	2000      	movs	r0, #0
 8012c78:	f000 f8a4 	bl	8012dc4 <tcp_recv_null>
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d12a      	bne.n	8012cde <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012c88:	7bbb      	ldrb	r3, [r7, #14]
 8012c8a:	f003 0320 	and.w	r3, r3, #32
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d033      	beq.n	8012cfa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c96:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012c9a:	d005      	beq.n	8012ca8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ca0:	3301      	adds	r3, #1
 8012ca2:	b29a      	uxth	r2, r3
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d00b      	beq.n	8012cca <tcp_process_refused_data+0xb2>
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	6918      	ldr	r0, [r3, #16]
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	6879      	ldr	r1, [r7, #4]
 8012cc2:	47a0      	blx	r4
 8012cc4:	4603      	mov	r3, r0
 8012cc6:	73fb      	strb	r3, [r7, #15]
 8012cc8:	e001      	b.n	8012cce <tcp_process_refused_data+0xb6>
 8012cca:	2300      	movs	r3, #0
 8012ccc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012cd2:	f113 0f0d 	cmn.w	r3, #13
 8012cd6:	d110      	bne.n	8012cfa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8012cd8:	f06f 030c 	mvn.w	r3, #12
 8012cdc:	e00e      	b.n	8012cfc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8012cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ce2:	f113 0f0d 	cmn.w	r3, #13
 8012ce6:	d102      	bne.n	8012cee <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012ce8:	f06f 030c 	mvn.w	r3, #12
 8012cec:	e006      	b.n	8012cfc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	68ba      	ldr	r2, [r7, #8]
 8012cf2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8012cf4:	f06f 0304 	mvn.w	r3, #4
 8012cf8:	e000      	b.n	8012cfc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8012cfa:	2300      	movs	r3, #0
}
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	3714      	adds	r7, #20
 8012d00:	46bd      	mov	sp, r7
 8012d02:	bd90      	pop	{r4, r7, pc}
 8012d04:	0801da10 	.word	0x0801da10
 8012d08:	0801df20 	.word	0x0801df20
 8012d0c:	0801da54 	.word	0x0801da54

08012d10 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b084      	sub	sp, #16
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012d18:	e007      	b.n	8012d2a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012d20:	6878      	ldr	r0, [r7, #4]
 8012d22:	f000 f80a 	bl	8012d3a <tcp_seg_free>
    seg = next;
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d1f4      	bne.n	8012d1a <tcp_segs_free+0xa>
  }
}
 8012d30:	bf00      	nop
 8012d32:	bf00      	nop
 8012d34:	3710      	adds	r7, #16
 8012d36:	46bd      	mov	sp, r7
 8012d38:	bd80      	pop	{r7, pc}

08012d3a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012d3a:	b580      	push	{r7, lr}
 8012d3c:	b082      	sub	sp, #8
 8012d3e:	af00      	add	r7, sp, #0
 8012d40:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d00c      	beq.n	8012d62 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	685b      	ldr	r3, [r3, #4]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d004      	beq.n	8012d5a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	685b      	ldr	r3, [r3, #4]
 8012d54:	4618      	mov	r0, r3
 8012d56:	f7fe fc37 	bl	80115c8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012d5a:	6879      	ldr	r1, [r7, #4]
 8012d5c:	2003      	movs	r0, #3
 8012d5e:	f7fd fd5d 	bl	801081c <memp_free>
  }
}
 8012d62:	bf00      	nop
 8012d64:	3708      	adds	r7, #8
 8012d66:	46bd      	mov	sp, r7
 8012d68:	bd80      	pop	{r7, pc}
	...

08012d6c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b084      	sub	sp, #16
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d106      	bne.n	8012d88 <tcp_seg_copy+0x1c>
 8012d7a:	4b0f      	ldr	r3, [pc, #60]	; (8012db8 <tcp_seg_copy+0x4c>)
 8012d7c:	f240 6282 	movw	r2, #1666	; 0x682
 8012d80:	490e      	ldr	r1, [pc, #56]	; (8012dbc <tcp_seg_copy+0x50>)
 8012d82:	480f      	ldr	r0, [pc, #60]	; (8012dc0 <tcp_seg_copy+0x54>)
 8012d84:	f007 ffb6 	bl	801acf4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012d88:	2003      	movs	r0, #3
 8012d8a:	f7fd fcd1 	bl	8010730 <memp_malloc>
 8012d8e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d101      	bne.n	8012d9a <tcp_seg_copy+0x2e>
    return NULL;
 8012d96:	2300      	movs	r3, #0
 8012d98:	e00a      	b.n	8012db0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012d9a:	2210      	movs	r2, #16
 8012d9c:	6879      	ldr	r1, [r7, #4]
 8012d9e:	68f8      	ldr	r0, [r7, #12]
 8012da0:	f007 ff92 	bl	801acc8 <memcpy>
  pbuf_ref(cseg->p);
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	685b      	ldr	r3, [r3, #4]
 8012da8:	4618      	mov	r0, r3
 8012daa:	f7fe fcb3 	bl	8011714 <pbuf_ref>
  return cseg;
 8012dae:	68fb      	ldr	r3, [r7, #12]
}
 8012db0:	4618      	mov	r0, r3
 8012db2:	3710      	adds	r7, #16
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bd80      	pop	{r7, pc}
 8012db8:	0801da10 	.word	0x0801da10
 8012dbc:	0801df64 	.word	0x0801df64
 8012dc0:	0801da54 	.word	0x0801da54

08012dc4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b084      	sub	sp, #16
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	60f8      	str	r0, [r7, #12]
 8012dcc:	60b9      	str	r1, [r7, #8]
 8012dce:	607a      	str	r2, [r7, #4]
 8012dd0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8012dd2:	68bb      	ldr	r3, [r7, #8]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d109      	bne.n	8012dec <tcp_recv_null+0x28>
 8012dd8:	4b12      	ldr	r3, [pc, #72]	; (8012e24 <tcp_recv_null+0x60>)
 8012dda:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012dde:	4912      	ldr	r1, [pc, #72]	; (8012e28 <tcp_recv_null+0x64>)
 8012de0:	4812      	ldr	r0, [pc, #72]	; (8012e2c <tcp_recv_null+0x68>)
 8012de2:	f007 ff87 	bl	801acf4 <iprintf>
 8012de6:	f06f 030f 	mvn.w	r3, #15
 8012dea:	e016      	b.n	8012e1a <tcp_recv_null+0x56>

  if (p != NULL) {
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d009      	beq.n	8012e06 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	891b      	ldrh	r3, [r3, #8]
 8012df6:	4619      	mov	r1, r3
 8012df8:	68b8      	ldr	r0, [r7, #8]
 8012dfa:	f7ff fad3 	bl	80123a4 <tcp_recved>
    pbuf_free(p);
 8012dfe:	6878      	ldr	r0, [r7, #4]
 8012e00:	f7fe fbe2 	bl	80115c8 <pbuf_free>
 8012e04:	e008      	b.n	8012e18 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8012e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d104      	bne.n	8012e18 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012e0e:	68b8      	ldr	r0, [r7, #8]
 8012e10:	f7ff f884 	bl	8011f1c <tcp_close>
 8012e14:	4603      	mov	r3, r0
 8012e16:	e000      	b.n	8012e1a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012e18:	2300      	movs	r3, #0
}
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	3710      	adds	r7, #16
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	bd80      	pop	{r7, pc}
 8012e22:	bf00      	nop
 8012e24:	0801da10 	.word	0x0801da10
 8012e28:	0801df80 	.word	0x0801df80
 8012e2c:	0801da54 	.word	0x0801da54

08012e30 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012e30:	b580      	push	{r7, lr}
 8012e32:	b086      	sub	sp, #24
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	4603      	mov	r3, r0
 8012e38:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	db01      	blt.n	8012e46 <tcp_kill_prio+0x16>
 8012e42:	79fb      	ldrb	r3, [r7, #7]
 8012e44:	e000      	b.n	8012e48 <tcp_kill_prio+0x18>
 8012e46:	237f      	movs	r3, #127	; 0x7f
 8012e48:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8012e4a:	7afb      	ldrb	r3, [r7, #11]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d034      	beq.n	8012eba <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012e50:	7afb      	ldrb	r3, [r7, #11]
 8012e52:	3b01      	subs	r3, #1
 8012e54:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8012e56:	2300      	movs	r3, #0
 8012e58:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e5e:	4b19      	ldr	r3, [pc, #100]	; (8012ec4 <tcp_kill_prio+0x94>)
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	617b      	str	r3, [r7, #20]
 8012e64:	e01f      	b.n	8012ea6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8012e66:	697b      	ldr	r3, [r7, #20]
 8012e68:	7d5b      	ldrb	r3, [r3, #21]
 8012e6a:	7afa      	ldrb	r2, [r7, #11]
 8012e6c:	429a      	cmp	r2, r3
 8012e6e:	d80c      	bhi.n	8012e8a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012e70:	697b      	ldr	r3, [r7, #20]
 8012e72:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012e74:	7afa      	ldrb	r2, [r7, #11]
 8012e76:	429a      	cmp	r2, r3
 8012e78:	d112      	bne.n	8012ea0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012e7a:	4b13      	ldr	r3, [pc, #76]	; (8012ec8 <tcp_kill_prio+0x98>)
 8012e7c:	681a      	ldr	r2, [r3, #0]
 8012e7e:	697b      	ldr	r3, [r7, #20]
 8012e80:	6a1b      	ldr	r3, [r3, #32]
 8012e82:	1ad3      	subs	r3, r2, r3
 8012e84:	68fa      	ldr	r2, [r7, #12]
 8012e86:	429a      	cmp	r2, r3
 8012e88:	d80a      	bhi.n	8012ea0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8012e8a:	4b0f      	ldr	r3, [pc, #60]	; (8012ec8 <tcp_kill_prio+0x98>)
 8012e8c:	681a      	ldr	r2, [r3, #0]
 8012e8e:	697b      	ldr	r3, [r7, #20]
 8012e90:	6a1b      	ldr	r3, [r3, #32]
 8012e92:	1ad3      	subs	r3, r2, r3
 8012e94:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8012e96:	697b      	ldr	r3, [r7, #20]
 8012e98:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8012e9a:	697b      	ldr	r3, [r7, #20]
 8012e9c:	7d5b      	ldrb	r3, [r3, #21]
 8012e9e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012ea0:	697b      	ldr	r3, [r7, #20]
 8012ea2:	68db      	ldr	r3, [r3, #12]
 8012ea4:	617b      	str	r3, [r7, #20]
 8012ea6:	697b      	ldr	r3, [r7, #20]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d1dc      	bne.n	8012e66 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012eac:	693b      	ldr	r3, [r7, #16]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d004      	beq.n	8012ebc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012eb2:	6938      	ldr	r0, [r7, #16]
 8012eb4:	f7ff f978 	bl	80121a8 <tcp_abort>
 8012eb8:	e000      	b.n	8012ebc <tcp_kill_prio+0x8c>
    return;
 8012eba:	bf00      	nop
  }
}
 8012ebc:	3718      	adds	r7, #24
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	bd80      	pop	{r7, pc}
 8012ec2:	bf00      	nop
 8012ec4:	20011094 	.word	0x20011094
 8012ec8:	20011088 	.word	0x20011088

08012ecc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b086      	sub	sp, #24
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8012ed6:	79fb      	ldrb	r3, [r7, #7]
 8012ed8:	2b08      	cmp	r3, #8
 8012eda:	d009      	beq.n	8012ef0 <tcp_kill_state+0x24>
 8012edc:	79fb      	ldrb	r3, [r7, #7]
 8012ede:	2b09      	cmp	r3, #9
 8012ee0:	d006      	beq.n	8012ef0 <tcp_kill_state+0x24>
 8012ee2:	4b1a      	ldr	r3, [pc, #104]	; (8012f4c <tcp_kill_state+0x80>)
 8012ee4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8012ee8:	4919      	ldr	r1, [pc, #100]	; (8012f50 <tcp_kill_state+0x84>)
 8012eea:	481a      	ldr	r0, [pc, #104]	; (8012f54 <tcp_kill_state+0x88>)
 8012eec:	f007 ff02 	bl	801acf4 <iprintf>

  inactivity = 0;
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012ef8:	4b17      	ldr	r3, [pc, #92]	; (8012f58 <tcp_kill_state+0x8c>)
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	617b      	str	r3, [r7, #20]
 8012efe:	e017      	b.n	8012f30 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012f00:	697b      	ldr	r3, [r7, #20]
 8012f02:	7d1b      	ldrb	r3, [r3, #20]
 8012f04:	79fa      	ldrb	r2, [r7, #7]
 8012f06:	429a      	cmp	r2, r3
 8012f08:	d10f      	bne.n	8012f2a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012f0a:	4b14      	ldr	r3, [pc, #80]	; (8012f5c <tcp_kill_state+0x90>)
 8012f0c:	681a      	ldr	r2, [r3, #0]
 8012f0e:	697b      	ldr	r3, [r7, #20]
 8012f10:	6a1b      	ldr	r3, [r3, #32]
 8012f12:	1ad3      	subs	r3, r2, r3
 8012f14:	68fa      	ldr	r2, [r7, #12]
 8012f16:	429a      	cmp	r2, r3
 8012f18:	d807      	bhi.n	8012f2a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012f1a:	4b10      	ldr	r3, [pc, #64]	; (8012f5c <tcp_kill_state+0x90>)
 8012f1c:	681a      	ldr	r2, [r3, #0]
 8012f1e:	697b      	ldr	r3, [r7, #20]
 8012f20:	6a1b      	ldr	r3, [r3, #32]
 8012f22:	1ad3      	subs	r3, r2, r3
 8012f24:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012f26:	697b      	ldr	r3, [r7, #20]
 8012f28:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f2a:	697b      	ldr	r3, [r7, #20]
 8012f2c:	68db      	ldr	r3, [r3, #12]
 8012f2e:	617b      	str	r3, [r7, #20]
 8012f30:	697b      	ldr	r3, [r7, #20]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d1e4      	bne.n	8012f00 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012f36:	693b      	ldr	r3, [r7, #16]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d003      	beq.n	8012f44 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012f3c:	2100      	movs	r1, #0
 8012f3e:	6938      	ldr	r0, [r7, #16]
 8012f40:	f7ff f874 	bl	801202c <tcp_abandon>
  }
}
 8012f44:	bf00      	nop
 8012f46:	3718      	adds	r7, #24
 8012f48:	46bd      	mov	sp, r7
 8012f4a:	bd80      	pop	{r7, pc}
 8012f4c:	0801da10 	.word	0x0801da10
 8012f50:	0801df9c 	.word	0x0801df9c
 8012f54:	0801da54 	.word	0x0801da54
 8012f58:	20011094 	.word	0x20011094
 8012f5c:	20011088 	.word	0x20011088

08012f60 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b084      	sub	sp, #16
 8012f64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8012f66:	2300      	movs	r3, #0
 8012f68:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f6e:	4b12      	ldr	r3, [pc, #72]	; (8012fb8 <tcp_kill_timewait+0x58>)
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	60fb      	str	r3, [r7, #12]
 8012f74:	e012      	b.n	8012f9c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012f76:	4b11      	ldr	r3, [pc, #68]	; (8012fbc <tcp_kill_timewait+0x5c>)
 8012f78:	681a      	ldr	r2, [r3, #0]
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	6a1b      	ldr	r3, [r3, #32]
 8012f7e:	1ad3      	subs	r3, r2, r3
 8012f80:	687a      	ldr	r2, [r7, #4]
 8012f82:	429a      	cmp	r2, r3
 8012f84:	d807      	bhi.n	8012f96 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8012f86:	4b0d      	ldr	r3, [pc, #52]	; (8012fbc <tcp_kill_timewait+0x5c>)
 8012f88:	681a      	ldr	r2, [r3, #0]
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	6a1b      	ldr	r3, [r3, #32]
 8012f8e:	1ad3      	subs	r3, r2, r3
 8012f90:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	68db      	ldr	r3, [r3, #12]
 8012f9a:	60fb      	str	r3, [r7, #12]
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d1e9      	bne.n	8012f76 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8012fa2:	68bb      	ldr	r3, [r7, #8]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d002      	beq.n	8012fae <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012fa8:	68b8      	ldr	r0, [r7, #8]
 8012faa:	f7ff f8fd 	bl	80121a8 <tcp_abort>
  }
}
 8012fae:	bf00      	nop
 8012fb0:	3710      	adds	r7, #16
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd80      	pop	{r7, pc}
 8012fb6:	bf00      	nop
 8012fb8:	20011098 	.word	0x20011098
 8012fbc:	20011088 	.word	0x20011088

08012fc0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b082      	sub	sp, #8
 8012fc4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8012fc6:	4b10      	ldr	r3, [pc, #64]	; (8013008 <tcp_handle_closepend+0x48>)
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012fcc:	e014      	b.n	8012ff8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	68db      	ldr	r3, [r3, #12]
 8012fd2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	8b5b      	ldrh	r3, [r3, #26]
 8012fd8:	f003 0308 	and.w	r3, r3, #8
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d009      	beq.n	8012ff4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	8b5b      	ldrh	r3, [r3, #26]
 8012fe4:	f023 0308 	bic.w	r3, r3, #8
 8012fe8:	b29a      	uxth	r2, r3
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8012fee:	6878      	ldr	r0, [r7, #4]
 8012ff0:	f7fe ff2a 	bl	8011e48 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8012ff4:	683b      	ldr	r3, [r7, #0]
 8012ff6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d1e7      	bne.n	8012fce <tcp_handle_closepend+0xe>
  }
}
 8012ffe:	bf00      	nop
 8013000:	bf00      	nop
 8013002:	3708      	adds	r7, #8
 8013004:	46bd      	mov	sp, r7
 8013006:	bd80      	pop	{r7, pc}
 8013008:	20011094 	.word	0x20011094

0801300c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801300c:	b580      	push	{r7, lr}
 801300e:	b084      	sub	sp, #16
 8013010:	af00      	add	r7, sp, #0
 8013012:	4603      	mov	r3, r0
 8013014:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013016:	2001      	movs	r0, #1
 8013018:	f7fd fb8a 	bl	8010730 <memp_malloc>
 801301c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d126      	bne.n	8013072 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8013024:	f7ff ffcc 	bl	8012fc0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013028:	f7ff ff9a 	bl	8012f60 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801302c:	2001      	movs	r0, #1
 801302e:	f7fd fb7f 	bl	8010730 <memp_malloc>
 8013032:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	2b00      	cmp	r3, #0
 8013038:	d11b      	bne.n	8013072 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801303a:	2009      	movs	r0, #9
 801303c:	f7ff ff46 	bl	8012ecc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013040:	2001      	movs	r0, #1
 8013042:	f7fd fb75 	bl	8010730 <memp_malloc>
 8013046:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d111      	bne.n	8013072 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801304e:	2008      	movs	r0, #8
 8013050:	f7ff ff3c 	bl	8012ecc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013054:	2001      	movs	r0, #1
 8013056:	f7fd fb6b 	bl	8010730 <memp_malloc>
 801305a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d107      	bne.n	8013072 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8013062:	79fb      	ldrb	r3, [r7, #7]
 8013064:	4618      	mov	r0, r3
 8013066:	f7ff fee3 	bl	8012e30 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801306a:	2001      	movs	r0, #1
 801306c:	f7fd fb60 	bl	8010730 <memp_malloc>
 8013070:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d03f      	beq.n	80130f8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013078:	229c      	movs	r2, #156	; 0x9c
 801307a:	2100      	movs	r1, #0
 801307c:	68f8      	ldr	r0, [r7, #12]
 801307e:	f007 fe31 	bl	801ace4 <memset>
    pcb->prio = prio;
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	79fa      	ldrb	r2, [r7, #7]
 8013086:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801308e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8013098:	855a      	strh	r2, [r3, #42]	; 0x2a
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	22ff      	movs	r2, #255	; 0xff
 80130a6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	f44f 7206 	mov.w	r2, #536	; 0x218
 80130ae:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	2206      	movs	r2, #6
 80130b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	2206      	movs	r2, #6
 80130bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80130c4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	2201      	movs	r2, #1
 80130ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80130ce:	4b0d      	ldr	r3, [pc, #52]	; (8013104 <tcp_alloc+0xf8>)
 80130d0:	681a      	ldr	r2, [r3, #0]
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80130d6:	4b0c      	ldr	r3, [pc, #48]	; (8013108 <tcp_alloc+0xfc>)
 80130d8:	781a      	ldrb	r2, [r3, #0]
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80130e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	4a08      	ldr	r2, [pc, #32]	; (801310c <tcp_alloc+0x100>)
 80130ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	4a07      	ldr	r2, [pc, #28]	; (8013110 <tcp_alloc+0x104>)
 80130f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80130f8:	68fb      	ldr	r3, [r7, #12]
}
 80130fa:	4618      	mov	r0, r3
 80130fc:	3710      	adds	r7, #16
 80130fe:	46bd      	mov	sp, r7
 8013100:	bd80      	pop	{r7, pc}
 8013102:	bf00      	nop
 8013104:	20011088 	.word	0x20011088
 8013108:	2001109e 	.word	0x2001109e
 801310c:	08012dc5 	.word	0x08012dc5
 8013110:	006ddd00 	.word	0x006ddd00

08013114 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8013114:	b580      	push	{r7, lr}
 8013116:	b084      	sub	sp, #16
 8013118:	af00      	add	r7, sp, #0
 801311a:	4603      	mov	r3, r0
 801311c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801311e:	2040      	movs	r0, #64	; 0x40
 8013120:	f7ff ff74 	bl	801300c <tcp_alloc>
 8013124:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8013126:	68fb      	ldr	r3, [r7, #12]
}
 8013128:	4618      	mov	r0, r3
 801312a:	3710      	adds	r7, #16
 801312c:	46bd      	mov	sp, r7
 801312e:	bd80      	pop	{r7, pc}

08013130 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8013130:	b480      	push	{r7}
 8013132:	b083      	sub	sp, #12
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
 8013138:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d002      	beq.n	8013146 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	683a      	ldr	r2, [r7, #0]
 8013144:	611a      	str	r2, [r3, #16]
  }
}
 8013146:	bf00      	nop
 8013148:	370c      	adds	r7, #12
 801314a:	46bd      	mov	sp, r7
 801314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013150:	4770      	bx	lr
	...

08013154 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8013154:	b580      	push	{r7, lr}
 8013156:	b082      	sub	sp, #8
 8013158:	af00      	add	r7, sp, #0
 801315a:	6078      	str	r0, [r7, #4]
 801315c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d00e      	beq.n	8013182 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	7d1b      	ldrb	r3, [r3, #20]
 8013168:	2b01      	cmp	r3, #1
 801316a:	d106      	bne.n	801317a <tcp_recv+0x26>
 801316c:	4b07      	ldr	r3, [pc, #28]	; (801318c <tcp_recv+0x38>)
 801316e:	f240 72df 	movw	r2, #2015	; 0x7df
 8013172:	4907      	ldr	r1, [pc, #28]	; (8013190 <tcp_recv+0x3c>)
 8013174:	4807      	ldr	r0, [pc, #28]	; (8013194 <tcp_recv+0x40>)
 8013176:	f007 fdbd 	bl	801acf4 <iprintf>
    pcb->recv = recv;
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	683a      	ldr	r2, [r7, #0]
 801317e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8013182:	bf00      	nop
 8013184:	3708      	adds	r7, #8
 8013186:	46bd      	mov	sp, r7
 8013188:	bd80      	pop	{r7, pc}
 801318a:	bf00      	nop
 801318c:	0801da10 	.word	0x0801da10
 8013190:	0801dfac 	.word	0x0801dfac
 8013194:	0801da54 	.word	0x0801da54

08013198 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b082      	sub	sp, #8
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
 80131a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d00e      	beq.n	80131c6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	7d1b      	ldrb	r3, [r3, #20]
 80131ac:	2b01      	cmp	r3, #1
 80131ae:	d106      	bne.n	80131be <tcp_sent+0x26>
 80131b0:	4b07      	ldr	r3, [pc, #28]	; (80131d0 <tcp_sent+0x38>)
 80131b2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80131b6:	4907      	ldr	r1, [pc, #28]	; (80131d4 <tcp_sent+0x3c>)
 80131b8:	4807      	ldr	r0, [pc, #28]	; (80131d8 <tcp_sent+0x40>)
 80131ba:	f007 fd9b 	bl	801acf4 <iprintf>
    pcb->sent = sent;
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	683a      	ldr	r2, [r7, #0]
 80131c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80131c6:	bf00      	nop
 80131c8:	3708      	adds	r7, #8
 80131ca:	46bd      	mov	sp, r7
 80131cc:	bd80      	pop	{r7, pc}
 80131ce:	bf00      	nop
 80131d0:	0801da10 	.word	0x0801da10
 80131d4:	0801dfd4 	.word	0x0801dfd4
 80131d8:	0801da54 	.word	0x0801da54

080131dc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b082      	sub	sp, #8
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
 80131e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d00e      	beq.n	801320a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	7d1b      	ldrb	r3, [r3, #20]
 80131f0:	2b01      	cmp	r3, #1
 80131f2:	d106      	bne.n	8013202 <tcp_err+0x26>
 80131f4:	4b07      	ldr	r3, [pc, #28]	; (8013214 <tcp_err+0x38>)
 80131f6:	f640 020d 	movw	r2, #2061	; 0x80d
 80131fa:	4907      	ldr	r1, [pc, #28]	; (8013218 <tcp_err+0x3c>)
 80131fc:	4807      	ldr	r0, [pc, #28]	; (801321c <tcp_err+0x40>)
 80131fe:	f007 fd79 	bl	801acf4 <iprintf>
    pcb->errf = err;
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	683a      	ldr	r2, [r7, #0]
 8013206:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801320a:	bf00      	nop
 801320c:	3708      	adds	r7, #8
 801320e:	46bd      	mov	sp, r7
 8013210:	bd80      	pop	{r7, pc}
 8013212:	bf00      	nop
 8013214:	0801da10 	.word	0x0801da10
 8013218:	0801dffc 	.word	0x0801dffc
 801321c:	0801da54 	.word	0x0801da54

08013220 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8013220:	b480      	push	{r7}
 8013222:	b085      	sub	sp, #20
 8013224:	af00      	add	r7, sp, #0
 8013226:	6078      	str	r0, [r7, #4]
 8013228:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d008      	beq.n	8013242 <tcp_accept+0x22>
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	7d1b      	ldrb	r3, [r3, #20]
 8013234:	2b01      	cmp	r3, #1
 8013236:	d104      	bne.n	8013242 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	683a      	ldr	r2, [r7, #0]
 8013240:	619a      	str	r2, [r3, #24]
  }
}
 8013242:	bf00      	nop
 8013244:	3714      	adds	r7, #20
 8013246:	46bd      	mov	sp, r7
 8013248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801324c:	4770      	bx	lr
	...

08013250 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b084      	sub	sp, #16
 8013254:	af00      	add	r7, sp, #0
 8013256:	60f8      	str	r0, [r7, #12]
 8013258:	60b9      	str	r1, [r7, #8]
 801325a:	4613      	mov	r3, r2
 801325c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d107      	bne.n	8013274 <tcp_poll+0x24>
 8013264:	4b0e      	ldr	r3, [pc, #56]	; (80132a0 <tcp_poll+0x50>)
 8013266:	f640 023d 	movw	r2, #2109	; 0x83d
 801326a:	490e      	ldr	r1, [pc, #56]	; (80132a4 <tcp_poll+0x54>)
 801326c:	480e      	ldr	r0, [pc, #56]	; (80132a8 <tcp_poll+0x58>)
 801326e:	f007 fd41 	bl	801acf4 <iprintf>
 8013272:	e011      	b.n	8013298 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	7d1b      	ldrb	r3, [r3, #20]
 8013278:	2b01      	cmp	r3, #1
 801327a:	d106      	bne.n	801328a <tcp_poll+0x3a>
 801327c:	4b08      	ldr	r3, [pc, #32]	; (80132a0 <tcp_poll+0x50>)
 801327e:	f640 023e 	movw	r2, #2110	; 0x83e
 8013282:	490a      	ldr	r1, [pc, #40]	; (80132ac <tcp_poll+0x5c>)
 8013284:	4808      	ldr	r0, [pc, #32]	; (80132a8 <tcp_poll+0x58>)
 8013286:	f007 fd35 	bl	801acf4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	68ba      	ldr	r2, [r7, #8]
 801328e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	79fa      	ldrb	r2, [r7, #7]
 8013296:	775a      	strb	r2, [r3, #29]
}
 8013298:	3710      	adds	r7, #16
 801329a:	46bd      	mov	sp, r7
 801329c:	bd80      	pop	{r7, pc}
 801329e:	bf00      	nop
 80132a0:	0801da10 	.word	0x0801da10
 80132a4:	0801e024 	.word	0x0801e024
 80132a8:	0801da54 	.word	0x0801da54
 80132ac:	0801e03c 	.word	0x0801e03c

080132b0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b082      	sub	sp, #8
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d107      	bne.n	80132ce <tcp_pcb_purge+0x1e>
 80132be:	4b21      	ldr	r3, [pc, #132]	; (8013344 <tcp_pcb_purge+0x94>)
 80132c0:	f640 0251 	movw	r2, #2129	; 0x851
 80132c4:	4920      	ldr	r1, [pc, #128]	; (8013348 <tcp_pcb_purge+0x98>)
 80132c6:	4821      	ldr	r0, [pc, #132]	; (801334c <tcp_pcb_purge+0x9c>)
 80132c8:	f007 fd14 	bl	801acf4 <iprintf>
 80132cc:	e037      	b.n	801333e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	7d1b      	ldrb	r3, [r3, #20]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d033      	beq.n	801333e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80132da:	2b0a      	cmp	r3, #10
 80132dc:	d02f      	beq.n	801333e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80132e2:	2b01      	cmp	r3, #1
 80132e4:	d02b      	beq.n	801333e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d007      	beq.n	80132fe <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80132f2:	4618      	mov	r0, r3
 80132f4:	f7fe f968 	bl	80115c8 <pbuf_free>
      pcb->refused_data = NULL;
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	2200      	movs	r2, #0
 80132fc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013302:	2b00      	cmp	r3, #0
 8013304:	d002      	beq.n	801330c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8013306:	6878      	ldr	r0, [r7, #4]
 8013308:	f000 f986 	bl	8013618 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013312:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013318:	4618      	mov	r0, r3
 801331a:	f7ff fcf9 	bl	8012d10 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013322:	4618      	mov	r0, r3
 8013324:	f7ff fcf4 	bl	8012d10 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2200      	movs	r2, #0
 801332c:	66da      	str	r2, [r3, #108]	; 0x6c
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	2200      	movs	r2, #0
 801333a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801333e:	3708      	adds	r7, #8
 8013340:	46bd      	mov	sp, r7
 8013342:	bd80      	pop	{r7, pc}
 8013344:	0801da10 	.word	0x0801da10
 8013348:	0801e05c 	.word	0x0801e05c
 801334c:	0801da54 	.word	0x0801da54

08013350 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b084      	sub	sp, #16
 8013354:	af00      	add	r7, sp, #0
 8013356:	6078      	str	r0, [r7, #4]
 8013358:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801335a:	683b      	ldr	r3, [r7, #0]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d106      	bne.n	801336e <tcp_pcb_remove+0x1e>
 8013360:	4b3e      	ldr	r3, [pc, #248]	; (801345c <tcp_pcb_remove+0x10c>)
 8013362:	f640 0283 	movw	r2, #2179	; 0x883
 8013366:	493e      	ldr	r1, [pc, #248]	; (8013460 <tcp_pcb_remove+0x110>)
 8013368:	483e      	ldr	r0, [pc, #248]	; (8013464 <tcp_pcb_remove+0x114>)
 801336a:	f007 fcc3 	bl	801acf4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d106      	bne.n	8013382 <tcp_pcb_remove+0x32>
 8013374:	4b39      	ldr	r3, [pc, #228]	; (801345c <tcp_pcb_remove+0x10c>)
 8013376:	f640 0284 	movw	r2, #2180	; 0x884
 801337a:	493b      	ldr	r1, [pc, #236]	; (8013468 <tcp_pcb_remove+0x118>)
 801337c:	4839      	ldr	r0, [pc, #228]	; (8013464 <tcp_pcb_remove+0x114>)
 801337e:	f007 fcb9 	bl	801acf4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	683a      	ldr	r2, [r7, #0]
 8013388:	429a      	cmp	r2, r3
 801338a:	d105      	bne.n	8013398 <tcp_pcb_remove+0x48>
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	68da      	ldr	r2, [r3, #12]
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	601a      	str	r2, [r3, #0]
 8013396:	e013      	b.n	80133c0 <tcp_pcb_remove+0x70>
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	60fb      	str	r3, [r7, #12]
 801339e:	e00c      	b.n	80133ba <tcp_pcb_remove+0x6a>
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	68db      	ldr	r3, [r3, #12]
 80133a4:	683a      	ldr	r2, [r7, #0]
 80133a6:	429a      	cmp	r2, r3
 80133a8:	d104      	bne.n	80133b4 <tcp_pcb_remove+0x64>
 80133aa:	683b      	ldr	r3, [r7, #0]
 80133ac:	68da      	ldr	r2, [r3, #12]
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	60da      	str	r2, [r3, #12]
 80133b2:	e005      	b.n	80133c0 <tcp_pcb_remove+0x70>
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	68db      	ldr	r3, [r3, #12]
 80133b8:	60fb      	str	r3, [r7, #12]
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d1ef      	bne.n	80133a0 <tcp_pcb_remove+0x50>
 80133c0:	683b      	ldr	r3, [r7, #0]
 80133c2:	2200      	movs	r2, #0
 80133c4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80133c6:	6838      	ldr	r0, [r7, #0]
 80133c8:	f7ff ff72 	bl	80132b0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80133cc:	683b      	ldr	r3, [r7, #0]
 80133ce:	7d1b      	ldrb	r3, [r3, #20]
 80133d0:	2b0a      	cmp	r3, #10
 80133d2:	d013      	beq.n	80133fc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80133d4:	683b      	ldr	r3, [r7, #0]
 80133d6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80133d8:	2b01      	cmp	r3, #1
 80133da:	d00f      	beq.n	80133fc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80133dc:	683b      	ldr	r3, [r7, #0]
 80133de:	8b5b      	ldrh	r3, [r3, #26]
 80133e0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d009      	beq.n	80133fc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80133e8:	683b      	ldr	r3, [r7, #0]
 80133ea:	8b5b      	ldrh	r3, [r3, #26]
 80133ec:	f043 0302 	orr.w	r3, r3, #2
 80133f0:	b29a      	uxth	r2, r3
 80133f2:	683b      	ldr	r3, [r7, #0]
 80133f4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80133f6:	6838      	ldr	r0, [r7, #0]
 80133f8:	f003 fbc6 	bl	8016b88 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80133fc:	683b      	ldr	r3, [r7, #0]
 80133fe:	7d1b      	ldrb	r3, [r3, #20]
 8013400:	2b01      	cmp	r3, #1
 8013402:	d020      	beq.n	8013446 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013408:	2b00      	cmp	r3, #0
 801340a:	d006      	beq.n	801341a <tcp_pcb_remove+0xca>
 801340c:	4b13      	ldr	r3, [pc, #76]	; (801345c <tcp_pcb_remove+0x10c>)
 801340e:	f640 0293 	movw	r2, #2195	; 0x893
 8013412:	4916      	ldr	r1, [pc, #88]	; (801346c <tcp_pcb_remove+0x11c>)
 8013414:	4813      	ldr	r0, [pc, #76]	; (8013464 <tcp_pcb_remove+0x114>)
 8013416:	f007 fc6d 	bl	801acf4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801341a:	683b      	ldr	r3, [r7, #0]
 801341c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801341e:	2b00      	cmp	r3, #0
 8013420:	d006      	beq.n	8013430 <tcp_pcb_remove+0xe0>
 8013422:	4b0e      	ldr	r3, [pc, #56]	; (801345c <tcp_pcb_remove+0x10c>)
 8013424:	f640 0294 	movw	r2, #2196	; 0x894
 8013428:	4911      	ldr	r1, [pc, #68]	; (8013470 <tcp_pcb_remove+0x120>)
 801342a:	480e      	ldr	r0, [pc, #56]	; (8013464 <tcp_pcb_remove+0x114>)
 801342c:	f007 fc62 	bl	801acf4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013430:	683b      	ldr	r3, [r7, #0]
 8013432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013434:	2b00      	cmp	r3, #0
 8013436:	d006      	beq.n	8013446 <tcp_pcb_remove+0xf6>
 8013438:	4b08      	ldr	r3, [pc, #32]	; (801345c <tcp_pcb_remove+0x10c>)
 801343a:	f640 0296 	movw	r2, #2198	; 0x896
 801343e:	490d      	ldr	r1, [pc, #52]	; (8013474 <tcp_pcb_remove+0x124>)
 8013440:	4808      	ldr	r0, [pc, #32]	; (8013464 <tcp_pcb_remove+0x114>)
 8013442:	f007 fc57 	bl	801acf4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8013446:	683b      	ldr	r3, [r7, #0]
 8013448:	2200      	movs	r2, #0
 801344a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801344c:	683b      	ldr	r3, [r7, #0]
 801344e:	2200      	movs	r2, #0
 8013450:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8013452:	bf00      	nop
 8013454:	3710      	adds	r7, #16
 8013456:	46bd      	mov	sp, r7
 8013458:	bd80      	pop	{r7, pc}
 801345a:	bf00      	nop
 801345c:	0801da10 	.word	0x0801da10
 8013460:	0801e078 	.word	0x0801e078
 8013464:	0801da54 	.word	0x0801da54
 8013468:	0801e094 	.word	0x0801e094
 801346c:	0801e0b4 	.word	0x0801e0b4
 8013470:	0801e0cc 	.word	0x0801e0cc
 8013474:	0801e0e8 	.word	0x0801e0e8

08013478 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013478:	b580      	push	{r7, lr}
 801347a:	b082      	sub	sp, #8
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d106      	bne.n	8013494 <tcp_next_iss+0x1c>
 8013486:	4b0a      	ldr	r3, [pc, #40]	; (80134b0 <tcp_next_iss+0x38>)
 8013488:	f640 02af 	movw	r2, #2223	; 0x8af
 801348c:	4909      	ldr	r1, [pc, #36]	; (80134b4 <tcp_next_iss+0x3c>)
 801348e:	480a      	ldr	r0, [pc, #40]	; (80134b8 <tcp_next_iss+0x40>)
 8013490:	f007 fc30 	bl	801acf4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013494:	4b09      	ldr	r3, [pc, #36]	; (80134bc <tcp_next_iss+0x44>)
 8013496:	681a      	ldr	r2, [r3, #0]
 8013498:	4b09      	ldr	r3, [pc, #36]	; (80134c0 <tcp_next_iss+0x48>)
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	4413      	add	r3, r2
 801349e:	4a07      	ldr	r2, [pc, #28]	; (80134bc <tcp_next_iss+0x44>)
 80134a0:	6013      	str	r3, [r2, #0]
  return iss;
 80134a2:	4b06      	ldr	r3, [pc, #24]	; (80134bc <tcp_next_iss+0x44>)
 80134a4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80134a6:	4618      	mov	r0, r3
 80134a8:	3708      	adds	r7, #8
 80134aa:	46bd      	mov	sp, r7
 80134ac:	bd80      	pop	{r7, pc}
 80134ae:	bf00      	nop
 80134b0:	0801da10 	.word	0x0801da10
 80134b4:	0801e100 	.word	0x0801e100
 80134b8:	0801da54 	.word	0x0801da54
 80134bc:	20000028 	.word	0x20000028
 80134c0:	20011088 	.word	0x20011088

080134c4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b086      	sub	sp, #24
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	4603      	mov	r3, r0
 80134cc:	60b9      	str	r1, [r7, #8]
 80134ce:	607a      	str	r2, [r7, #4]
 80134d0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d106      	bne.n	80134e6 <tcp_eff_send_mss_netif+0x22>
 80134d8:	4b14      	ldr	r3, [pc, #80]	; (801352c <tcp_eff_send_mss_netif+0x68>)
 80134da:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80134de:	4914      	ldr	r1, [pc, #80]	; (8013530 <tcp_eff_send_mss_netif+0x6c>)
 80134e0:	4814      	ldr	r0, [pc, #80]	; (8013534 <tcp_eff_send_mss_netif+0x70>)
 80134e2:	f007 fc07 	bl	801acf4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80134e6:	68bb      	ldr	r3, [r7, #8]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d101      	bne.n	80134f0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80134ec:	89fb      	ldrh	r3, [r7, #14]
 80134ee:	e019      	b.n	8013524 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80134f0:	68bb      	ldr	r3, [r7, #8]
 80134f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80134f4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80134f6:	8afb      	ldrh	r3, [r7, #22]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d012      	beq.n	8013522 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80134fc:	2328      	movs	r3, #40	; 0x28
 80134fe:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8013500:	8afa      	ldrh	r2, [r7, #22]
 8013502:	8abb      	ldrh	r3, [r7, #20]
 8013504:	429a      	cmp	r2, r3
 8013506:	d904      	bls.n	8013512 <tcp_eff_send_mss_netif+0x4e>
 8013508:	8afa      	ldrh	r2, [r7, #22]
 801350a:	8abb      	ldrh	r3, [r7, #20]
 801350c:	1ad3      	subs	r3, r2, r3
 801350e:	b29b      	uxth	r3, r3
 8013510:	e000      	b.n	8013514 <tcp_eff_send_mss_netif+0x50>
 8013512:	2300      	movs	r3, #0
 8013514:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8013516:	8a7a      	ldrh	r2, [r7, #18]
 8013518:	89fb      	ldrh	r3, [r7, #14]
 801351a:	4293      	cmp	r3, r2
 801351c:	bf28      	it	cs
 801351e:	4613      	movcs	r3, r2
 8013520:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8013522:	89fb      	ldrh	r3, [r7, #14]
}
 8013524:	4618      	mov	r0, r3
 8013526:	3718      	adds	r7, #24
 8013528:	46bd      	mov	sp, r7
 801352a:	bd80      	pop	{r7, pc}
 801352c:	0801da10 	.word	0x0801da10
 8013530:	0801e11c 	.word	0x0801e11c
 8013534:	0801da54 	.word	0x0801da54

08013538 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8013538:	b580      	push	{r7, lr}
 801353a:	b084      	sub	sp, #16
 801353c:	af00      	add	r7, sp, #0
 801353e:	6078      	str	r0, [r7, #4]
 8013540:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8013542:	683b      	ldr	r3, [r7, #0]
 8013544:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d119      	bne.n	8013580 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801354c:	4b10      	ldr	r3, [pc, #64]	; (8013590 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801354e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8013552:	4910      	ldr	r1, [pc, #64]	; (8013594 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8013554:	4810      	ldr	r0, [pc, #64]	; (8013598 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8013556:	f007 fbcd 	bl	801acf4 <iprintf>

  while (pcb != NULL) {
 801355a:	e011      	b.n	8013580 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	681a      	ldr	r2, [r3, #0]
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	429a      	cmp	r2, r3
 8013566:	d108      	bne.n	801357a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	68db      	ldr	r3, [r3, #12]
 801356c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801356e:	68f8      	ldr	r0, [r7, #12]
 8013570:	f7fe fe1a 	bl	80121a8 <tcp_abort>
      pcb = next;
 8013574:	68bb      	ldr	r3, [r7, #8]
 8013576:	60fb      	str	r3, [r7, #12]
 8013578:	e002      	b.n	8013580 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	68db      	ldr	r3, [r3, #12]
 801357e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d1ea      	bne.n	801355c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8013586:	bf00      	nop
 8013588:	bf00      	nop
 801358a:	3710      	adds	r7, #16
 801358c:	46bd      	mov	sp, r7
 801358e:	bd80      	pop	{r7, pc}
 8013590:	0801da10 	.word	0x0801da10
 8013594:	0801e144 	.word	0x0801e144
 8013598:	0801da54 	.word	0x0801da54

0801359c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b084      	sub	sp, #16
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
 80135a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d02a      	beq.n	8013602 <tcp_netif_ip_addr_changed+0x66>
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d026      	beq.n	8013602 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80135b4:	4b15      	ldr	r3, [pc, #84]	; (801360c <tcp_netif_ip_addr_changed+0x70>)
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	4619      	mov	r1, r3
 80135ba:	6878      	ldr	r0, [r7, #4]
 80135bc:	f7ff ffbc 	bl	8013538 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80135c0:	4b13      	ldr	r3, [pc, #76]	; (8013610 <tcp_netif_ip_addr_changed+0x74>)
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	4619      	mov	r1, r3
 80135c6:	6878      	ldr	r0, [r7, #4]
 80135c8:	f7ff ffb6 	bl	8013538 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80135cc:	683b      	ldr	r3, [r7, #0]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d017      	beq.n	8013602 <tcp_netif_ip_addr_changed+0x66>
 80135d2:	683b      	ldr	r3, [r7, #0]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d013      	beq.n	8013602 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80135da:	4b0e      	ldr	r3, [pc, #56]	; (8013614 <tcp_netif_ip_addr_changed+0x78>)
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	60fb      	str	r3, [r7, #12]
 80135e0:	e00c      	b.n	80135fc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	681a      	ldr	r2, [r3, #0]
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	429a      	cmp	r2, r3
 80135ec:	d103      	bne.n	80135f6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80135ee:	683b      	ldr	r3, [r7, #0]
 80135f0:	681a      	ldr	r2, [r3, #0]
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	68db      	ldr	r3, [r3, #12]
 80135fa:	60fb      	str	r3, [r7, #12]
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d1ef      	bne.n	80135e2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8013602:	bf00      	nop
 8013604:	3710      	adds	r7, #16
 8013606:	46bd      	mov	sp, r7
 8013608:	bd80      	pop	{r7, pc}
 801360a:	bf00      	nop
 801360c:	20011094 	.word	0x20011094
 8013610:	2001108c 	.word	0x2001108c
 8013614:	20011090 	.word	0x20011090

08013618 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b082      	sub	sp, #8
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013624:	2b00      	cmp	r3, #0
 8013626:	d007      	beq.n	8013638 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801362c:	4618      	mov	r0, r3
 801362e:	f7ff fb6f 	bl	8012d10 <tcp_segs_free>
    pcb->ooseq = NULL;
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	2200      	movs	r2, #0
 8013636:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8013638:	bf00      	nop
 801363a:	3708      	adds	r7, #8
 801363c:	46bd      	mov	sp, r7
 801363e:	bd80      	pop	{r7, pc}

08013640 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8013640:	b590      	push	{r4, r7, lr}
 8013642:	b08d      	sub	sp, #52	; 0x34
 8013644:	af04      	add	r7, sp, #16
 8013646:	6078      	str	r0, [r7, #4]
 8013648:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d105      	bne.n	801365c <tcp_input+0x1c>
 8013650:	4b9b      	ldr	r3, [pc, #620]	; (80138c0 <tcp_input+0x280>)
 8013652:	2283      	movs	r2, #131	; 0x83
 8013654:	499b      	ldr	r1, [pc, #620]	; (80138c4 <tcp_input+0x284>)
 8013656:	489c      	ldr	r0, [pc, #624]	; (80138c8 <tcp_input+0x288>)
 8013658:	f007 fb4c 	bl	801acf4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	685b      	ldr	r3, [r3, #4]
 8013660:	4a9a      	ldr	r2, [pc, #616]	; (80138cc <tcp_input+0x28c>)
 8013662:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	895b      	ldrh	r3, [r3, #10]
 8013668:	2b13      	cmp	r3, #19
 801366a:	f240 83d1 	bls.w	8013e10 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801366e:	4b98      	ldr	r3, [pc, #608]	; (80138d0 <tcp_input+0x290>)
 8013670:	695b      	ldr	r3, [r3, #20]
 8013672:	4a97      	ldr	r2, [pc, #604]	; (80138d0 <tcp_input+0x290>)
 8013674:	6812      	ldr	r2, [r2, #0]
 8013676:	4611      	mov	r1, r2
 8013678:	4618      	mov	r0, r3
 801367a:	f006 f9e5 	bl	8019a48 <ip4_addr_isbroadcast_u32>
 801367e:	4603      	mov	r3, r0
 8013680:	2b00      	cmp	r3, #0
 8013682:	f040 83c7 	bne.w	8013e14 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8013686:	4b92      	ldr	r3, [pc, #584]	; (80138d0 <tcp_input+0x290>)
 8013688:	695b      	ldr	r3, [r3, #20]
 801368a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801368e:	2be0      	cmp	r3, #224	; 0xe0
 8013690:	f000 83c0 	beq.w	8013e14 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8013694:	4b8d      	ldr	r3, [pc, #564]	; (80138cc <tcp_input+0x28c>)
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	899b      	ldrh	r3, [r3, #12]
 801369a:	b29b      	uxth	r3, r3
 801369c:	4618      	mov	r0, r3
 801369e:	f7fc fb6f 	bl	800fd80 <lwip_htons>
 80136a2:	4603      	mov	r3, r0
 80136a4:	0b1b      	lsrs	r3, r3, #12
 80136a6:	b29b      	uxth	r3, r3
 80136a8:	b2db      	uxtb	r3, r3
 80136aa:	009b      	lsls	r3, r3, #2
 80136ac:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80136ae:	7cbb      	ldrb	r3, [r7, #18]
 80136b0:	2b13      	cmp	r3, #19
 80136b2:	f240 83b1 	bls.w	8013e18 <tcp_input+0x7d8>
 80136b6:	7cbb      	ldrb	r3, [r7, #18]
 80136b8:	b29a      	uxth	r2, r3
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	891b      	ldrh	r3, [r3, #8]
 80136be:	429a      	cmp	r2, r3
 80136c0:	f200 83aa 	bhi.w	8013e18 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80136c4:	7cbb      	ldrb	r3, [r7, #18]
 80136c6:	b29b      	uxth	r3, r3
 80136c8:	3b14      	subs	r3, #20
 80136ca:	b29a      	uxth	r2, r3
 80136cc:	4b81      	ldr	r3, [pc, #516]	; (80138d4 <tcp_input+0x294>)
 80136ce:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80136d0:	4b81      	ldr	r3, [pc, #516]	; (80138d8 <tcp_input+0x298>)
 80136d2:	2200      	movs	r2, #0
 80136d4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	895a      	ldrh	r2, [r3, #10]
 80136da:	7cbb      	ldrb	r3, [r7, #18]
 80136dc:	b29b      	uxth	r3, r3
 80136de:	429a      	cmp	r2, r3
 80136e0:	d309      	bcc.n	80136f6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80136e2:	4b7c      	ldr	r3, [pc, #496]	; (80138d4 <tcp_input+0x294>)
 80136e4:	881a      	ldrh	r2, [r3, #0]
 80136e6:	4b7d      	ldr	r3, [pc, #500]	; (80138dc <tcp_input+0x29c>)
 80136e8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80136ea:	7cbb      	ldrb	r3, [r7, #18]
 80136ec:	4619      	mov	r1, r3
 80136ee:	6878      	ldr	r0, [r7, #4]
 80136f0:	f7fd feb2 	bl	8011458 <pbuf_remove_header>
 80136f4:	e04e      	b.n	8013794 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d105      	bne.n	801370a <tcp_input+0xca>
 80136fe:	4b70      	ldr	r3, [pc, #448]	; (80138c0 <tcp_input+0x280>)
 8013700:	22c2      	movs	r2, #194	; 0xc2
 8013702:	4977      	ldr	r1, [pc, #476]	; (80138e0 <tcp_input+0x2a0>)
 8013704:	4870      	ldr	r0, [pc, #448]	; (80138c8 <tcp_input+0x288>)
 8013706:	f007 faf5 	bl	801acf4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801370a:	2114      	movs	r1, #20
 801370c:	6878      	ldr	r0, [r7, #4]
 801370e:	f7fd fea3 	bl	8011458 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	895a      	ldrh	r2, [r3, #10]
 8013716:	4b71      	ldr	r3, [pc, #452]	; (80138dc <tcp_input+0x29c>)
 8013718:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801371a:	4b6e      	ldr	r3, [pc, #440]	; (80138d4 <tcp_input+0x294>)
 801371c:	881a      	ldrh	r2, [r3, #0]
 801371e:	4b6f      	ldr	r3, [pc, #444]	; (80138dc <tcp_input+0x29c>)
 8013720:	881b      	ldrh	r3, [r3, #0]
 8013722:	1ad3      	subs	r3, r2, r3
 8013724:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8013726:	4b6d      	ldr	r3, [pc, #436]	; (80138dc <tcp_input+0x29c>)
 8013728:	881b      	ldrh	r3, [r3, #0]
 801372a:	4619      	mov	r1, r3
 801372c:	6878      	ldr	r0, [r7, #4]
 801372e:	f7fd fe93 	bl	8011458 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	895b      	ldrh	r3, [r3, #10]
 8013738:	8a3a      	ldrh	r2, [r7, #16]
 801373a:	429a      	cmp	r2, r3
 801373c:	f200 836e 	bhi.w	8013e1c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	685b      	ldr	r3, [r3, #4]
 8013746:	4a64      	ldr	r2, [pc, #400]	; (80138d8 <tcp_input+0x298>)
 8013748:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	8a3a      	ldrh	r2, [r7, #16]
 8013750:	4611      	mov	r1, r2
 8013752:	4618      	mov	r0, r3
 8013754:	f7fd fe80 	bl	8011458 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	891a      	ldrh	r2, [r3, #8]
 801375c:	8a3b      	ldrh	r3, [r7, #16]
 801375e:	1ad3      	subs	r3, r2, r3
 8013760:	b29a      	uxth	r2, r3
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	895b      	ldrh	r3, [r3, #10]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d005      	beq.n	801377a <tcp_input+0x13a>
 801376e:	4b54      	ldr	r3, [pc, #336]	; (80138c0 <tcp_input+0x280>)
 8013770:	22df      	movs	r2, #223	; 0xdf
 8013772:	495c      	ldr	r1, [pc, #368]	; (80138e4 <tcp_input+0x2a4>)
 8013774:	4854      	ldr	r0, [pc, #336]	; (80138c8 <tcp_input+0x288>)
 8013776:	f007 fabd 	bl	801acf4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	891a      	ldrh	r2, [r3, #8]
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	891b      	ldrh	r3, [r3, #8]
 8013784:	429a      	cmp	r2, r3
 8013786:	d005      	beq.n	8013794 <tcp_input+0x154>
 8013788:	4b4d      	ldr	r3, [pc, #308]	; (80138c0 <tcp_input+0x280>)
 801378a:	22e0      	movs	r2, #224	; 0xe0
 801378c:	4956      	ldr	r1, [pc, #344]	; (80138e8 <tcp_input+0x2a8>)
 801378e:	484e      	ldr	r0, [pc, #312]	; (80138c8 <tcp_input+0x288>)
 8013790:	f007 fab0 	bl	801acf4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013794:	4b4d      	ldr	r3, [pc, #308]	; (80138cc <tcp_input+0x28c>)
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	881b      	ldrh	r3, [r3, #0]
 801379a:	b29b      	uxth	r3, r3
 801379c:	4a4b      	ldr	r2, [pc, #300]	; (80138cc <tcp_input+0x28c>)
 801379e:	6814      	ldr	r4, [r2, #0]
 80137a0:	4618      	mov	r0, r3
 80137a2:	f7fc faed 	bl	800fd80 <lwip_htons>
 80137a6:	4603      	mov	r3, r0
 80137a8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80137aa:	4b48      	ldr	r3, [pc, #288]	; (80138cc <tcp_input+0x28c>)
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	885b      	ldrh	r3, [r3, #2]
 80137b0:	b29b      	uxth	r3, r3
 80137b2:	4a46      	ldr	r2, [pc, #280]	; (80138cc <tcp_input+0x28c>)
 80137b4:	6814      	ldr	r4, [r2, #0]
 80137b6:	4618      	mov	r0, r3
 80137b8:	f7fc fae2 	bl	800fd80 <lwip_htons>
 80137bc:	4603      	mov	r3, r0
 80137be:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80137c0:	4b42      	ldr	r3, [pc, #264]	; (80138cc <tcp_input+0x28c>)
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	685b      	ldr	r3, [r3, #4]
 80137c6:	4a41      	ldr	r2, [pc, #260]	; (80138cc <tcp_input+0x28c>)
 80137c8:	6814      	ldr	r4, [r2, #0]
 80137ca:	4618      	mov	r0, r3
 80137cc:	f7fc faed 	bl	800fdaa <lwip_htonl>
 80137d0:	4603      	mov	r3, r0
 80137d2:	6063      	str	r3, [r4, #4]
 80137d4:	6863      	ldr	r3, [r4, #4]
 80137d6:	4a45      	ldr	r2, [pc, #276]	; (80138ec <tcp_input+0x2ac>)
 80137d8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80137da:	4b3c      	ldr	r3, [pc, #240]	; (80138cc <tcp_input+0x28c>)
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	689b      	ldr	r3, [r3, #8]
 80137e0:	4a3a      	ldr	r2, [pc, #232]	; (80138cc <tcp_input+0x28c>)
 80137e2:	6814      	ldr	r4, [r2, #0]
 80137e4:	4618      	mov	r0, r3
 80137e6:	f7fc fae0 	bl	800fdaa <lwip_htonl>
 80137ea:	4603      	mov	r3, r0
 80137ec:	60a3      	str	r3, [r4, #8]
 80137ee:	68a3      	ldr	r3, [r4, #8]
 80137f0:	4a3f      	ldr	r2, [pc, #252]	; (80138f0 <tcp_input+0x2b0>)
 80137f2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80137f4:	4b35      	ldr	r3, [pc, #212]	; (80138cc <tcp_input+0x28c>)
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	89db      	ldrh	r3, [r3, #14]
 80137fa:	b29b      	uxth	r3, r3
 80137fc:	4a33      	ldr	r2, [pc, #204]	; (80138cc <tcp_input+0x28c>)
 80137fe:	6814      	ldr	r4, [r2, #0]
 8013800:	4618      	mov	r0, r3
 8013802:	f7fc fabd 	bl	800fd80 <lwip_htons>
 8013806:	4603      	mov	r3, r0
 8013808:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801380a:	4b30      	ldr	r3, [pc, #192]	; (80138cc <tcp_input+0x28c>)
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	899b      	ldrh	r3, [r3, #12]
 8013810:	b29b      	uxth	r3, r3
 8013812:	4618      	mov	r0, r3
 8013814:	f7fc fab4 	bl	800fd80 <lwip_htons>
 8013818:	4603      	mov	r3, r0
 801381a:	b2db      	uxtb	r3, r3
 801381c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013820:	b2da      	uxtb	r2, r3
 8013822:	4b34      	ldr	r3, [pc, #208]	; (80138f4 <tcp_input+0x2b4>)
 8013824:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	891a      	ldrh	r2, [r3, #8]
 801382a:	4b33      	ldr	r3, [pc, #204]	; (80138f8 <tcp_input+0x2b8>)
 801382c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801382e:	4b31      	ldr	r3, [pc, #196]	; (80138f4 <tcp_input+0x2b4>)
 8013830:	781b      	ldrb	r3, [r3, #0]
 8013832:	f003 0303 	and.w	r3, r3, #3
 8013836:	2b00      	cmp	r3, #0
 8013838:	d00c      	beq.n	8013854 <tcp_input+0x214>
    tcplen++;
 801383a:	4b2f      	ldr	r3, [pc, #188]	; (80138f8 <tcp_input+0x2b8>)
 801383c:	881b      	ldrh	r3, [r3, #0]
 801383e:	3301      	adds	r3, #1
 8013840:	b29a      	uxth	r2, r3
 8013842:	4b2d      	ldr	r3, [pc, #180]	; (80138f8 <tcp_input+0x2b8>)
 8013844:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	891a      	ldrh	r2, [r3, #8]
 801384a:	4b2b      	ldr	r3, [pc, #172]	; (80138f8 <tcp_input+0x2b8>)
 801384c:	881b      	ldrh	r3, [r3, #0]
 801384e:	429a      	cmp	r2, r3
 8013850:	f200 82e6 	bhi.w	8013e20 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8013854:	2300      	movs	r3, #0
 8013856:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013858:	4b28      	ldr	r3, [pc, #160]	; (80138fc <tcp_input+0x2bc>)
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	61fb      	str	r3, [r7, #28]
 801385e:	e09d      	b.n	801399c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8013860:	69fb      	ldr	r3, [r7, #28]
 8013862:	7d1b      	ldrb	r3, [r3, #20]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d105      	bne.n	8013874 <tcp_input+0x234>
 8013868:	4b15      	ldr	r3, [pc, #84]	; (80138c0 <tcp_input+0x280>)
 801386a:	22fb      	movs	r2, #251	; 0xfb
 801386c:	4924      	ldr	r1, [pc, #144]	; (8013900 <tcp_input+0x2c0>)
 801386e:	4816      	ldr	r0, [pc, #88]	; (80138c8 <tcp_input+0x288>)
 8013870:	f007 fa40 	bl	801acf4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8013874:	69fb      	ldr	r3, [r7, #28]
 8013876:	7d1b      	ldrb	r3, [r3, #20]
 8013878:	2b0a      	cmp	r3, #10
 801387a:	d105      	bne.n	8013888 <tcp_input+0x248>
 801387c:	4b10      	ldr	r3, [pc, #64]	; (80138c0 <tcp_input+0x280>)
 801387e:	22fc      	movs	r2, #252	; 0xfc
 8013880:	4920      	ldr	r1, [pc, #128]	; (8013904 <tcp_input+0x2c4>)
 8013882:	4811      	ldr	r0, [pc, #68]	; (80138c8 <tcp_input+0x288>)
 8013884:	f007 fa36 	bl	801acf4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8013888:	69fb      	ldr	r3, [r7, #28]
 801388a:	7d1b      	ldrb	r3, [r3, #20]
 801388c:	2b01      	cmp	r3, #1
 801388e:	d105      	bne.n	801389c <tcp_input+0x25c>
 8013890:	4b0b      	ldr	r3, [pc, #44]	; (80138c0 <tcp_input+0x280>)
 8013892:	22fd      	movs	r2, #253	; 0xfd
 8013894:	491c      	ldr	r1, [pc, #112]	; (8013908 <tcp_input+0x2c8>)
 8013896:	480c      	ldr	r0, [pc, #48]	; (80138c8 <tcp_input+0x288>)
 8013898:	f007 fa2c 	bl	801acf4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801389c:	69fb      	ldr	r3, [r7, #28]
 801389e:	7a1b      	ldrb	r3, [r3, #8]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d033      	beq.n	801390c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80138a4:	69fb      	ldr	r3, [r7, #28]
 80138a6:	7a1a      	ldrb	r2, [r3, #8]
 80138a8:	4b09      	ldr	r3, [pc, #36]	; (80138d0 <tcp_input+0x290>)
 80138aa:	685b      	ldr	r3, [r3, #4]
 80138ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80138b0:	3301      	adds	r3, #1
 80138b2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80138b4:	429a      	cmp	r2, r3
 80138b6:	d029      	beq.n	801390c <tcp_input+0x2cc>
      prev = pcb;
 80138b8:	69fb      	ldr	r3, [r7, #28]
 80138ba:	61bb      	str	r3, [r7, #24]
      continue;
 80138bc:	e06b      	b.n	8013996 <tcp_input+0x356>
 80138be:	bf00      	nop
 80138c0:	0801e178 	.word	0x0801e178
 80138c4:	0801e1ac 	.word	0x0801e1ac
 80138c8:	0801e1c4 	.word	0x0801e1c4
 80138cc:	200110b0 	.word	0x200110b0
 80138d0:	2000d934 	.word	0x2000d934
 80138d4:	200110b4 	.word	0x200110b4
 80138d8:	200110b8 	.word	0x200110b8
 80138dc:	200110b6 	.word	0x200110b6
 80138e0:	0801e1ec 	.word	0x0801e1ec
 80138e4:	0801e1fc 	.word	0x0801e1fc
 80138e8:	0801e208 	.word	0x0801e208
 80138ec:	200110c0 	.word	0x200110c0
 80138f0:	200110c4 	.word	0x200110c4
 80138f4:	200110cc 	.word	0x200110cc
 80138f8:	200110ca 	.word	0x200110ca
 80138fc:	20011094 	.word	0x20011094
 8013900:	0801e228 	.word	0x0801e228
 8013904:	0801e250 	.word	0x0801e250
 8013908:	0801e27c 	.word	0x0801e27c
    }

    if (pcb->remote_port == tcphdr->src &&
 801390c:	69fb      	ldr	r3, [r7, #28]
 801390e:	8b1a      	ldrh	r2, [r3, #24]
 8013910:	4b72      	ldr	r3, [pc, #456]	; (8013adc <tcp_input+0x49c>)
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	881b      	ldrh	r3, [r3, #0]
 8013916:	b29b      	uxth	r3, r3
 8013918:	429a      	cmp	r2, r3
 801391a:	d13a      	bne.n	8013992 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801391c:	69fb      	ldr	r3, [r7, #28]
 801391e:	8ada      	ldrh	r2, [r3, #22]
 8013920:	4b6e      	ldr	r3, [pc, #440]	; (8013adc <tcp_input+0x49c>)
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	885b      	ldrh	r3, [r3, #2]
 8013926:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8013928:	429a      	cmp	r2, r3
 801392a:	d132      	bne.n	8013992 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801392c:	69fb      	ldr	r3, [r7, #28]
 801392e:	685a      	ldr	r2, [r3, #4]
 8013930:	4b6b      	ldr	r3, [pc, #428]	; (8013ae0 <tcp_input+0x4a0>)
 8013932:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8013934:	429a      	cmp	r2, r3
 8013936:	d12c      	bne.n	8013992 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013938:	69fb      	ldr	r3, [r7, #28]
 801393a:	681a      	ldr	r2, [r3, #0]
 801393c:	4b68      	ldr	r3, [pc, #416]	; (8013ae0 <tcp_input+0x4a0>)
 801393e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013940:	429a      	cmp	r2, r3
 8013942:	d126      	bne.n	8013992 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8013944:	69fb      	ldr	r3, [r7, #28]
 8013946:	68db      	ldr	r3, [r3, #12]
 8013948:	69fa      	ldr	r2, [r7, #28]
 801394a:	429a      	cmp	r2, r3
 801394c:	d106      	bne.n	801395c <tcp_input+0x31c>
 801394e:	4b65      	ldr	r3, [pc, #404]	; (8013ae4 <tcp_input+0x4a4>)
 8013950:	f240 120d 	movw	r2, #269	; 0x10d
 8013954:	4964      	ldr	r1, [pc, #400]	; (8013ae8 <tcp_input+0x4a8>)
 8013956:	4865      	ldr	r0, [pc, #404]	; (8013aec <tcp_input+0x4ac>)
 8013958:	f007 f9cc 	bl	801acf4 <iprintf>
      if (prev != NULL) {
 801395c:	69bb      	ldr	r3, [r7, #24]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d00a      	beq.n	8013978 <tcp_input+0x338>
        prev->next = pcb->next;
 8013962:	69fb      	ldr	r3, [r7, #28]
 8013964:	68da      	ldr	r2, [r3, #12]
 8013966:	69bb      	ldr	r3, [r7, #24]
 8013968:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801396a:	4b61      	ldr	r3, [pc, #388]	; (8013af0 <tcp_input+0x4b0>)
 801396c:	681a      	ldr	r2, [r3, #0]
 801396e:	69fb      	ldr	r3, [r7, #28]
 8013970:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8013972:	4a5f      	ldr	r2, [pc, #380]	; (8013af0 <tcp_input+0x4b0>)
 8013974:	69fb      	ldr	r3, [r7, #28]
 8013976:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013978:	69fb      	ldr	r3, [r7, #28]
 801397a:	68db      	ldr	r3, [r3, #12]
 801397c:	69fa      	ldr	r2, [r7, #28]
 801397e:	429a      	cmp	r2, r3
 8013980:	d111      	bne.n	80139a6 <tcp_input+0x366>
 8013982:	4b58      	ldr	r3, [pc, #352]	; (8013ae4 <tcp_input+0x4a4>)
 8013984:	f240 1215 	movw	r2, #277	; 0x115
 8013988:	495a      	ldr	r1, [pc, #360]	; (8013af4 <tcp_input+0x4b4>)
 801398a:	4858      	ldr	r0, [pc, #352]	; (8013aec <tcp_input+0x4ac>)
 801398c:	f007 f9b2 	bl	801acf4 <iprintf>
      break;
 8013990:	e009      	b.n	80139a6 <tcp_input+0x366>
    }
    prev = pcb;
 8013992:	69fb      	ldr	r3, [r7, #28]
 8013994:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013996:	69fb      	ldr	r3, [r7, #28]
 8013998:	68db      	ldr	r3, [r3, #12]
 801399a:	61fb      	str	r3, [r7, #28]
 801399c:	69fb      	ldr	r3, [r7, #28]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	f47f af5e 	bne.w	8013860 <tcp_input+0x220>
 80139a4:	e000      	b.n	80139a8 <tcp_input+0x368>
      break;
 80139a6:	bf00      	nop
  }

  if (pcb == NULL) {
 80139a8:	69fb      	ldr	r3, [r7, #28]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	f040 80aa 	bne.w	8013b04 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80139b0:	4b51      	ldr	r3, [pc, #324]	; (8013af8 <tcp_input+0x4b8>)
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	61fb      	str	r3, [r7, #28]
 80139b6:	e03f      	b.n	8013a38 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80139b8:	69fb      	ldr	r3, [r7, #28]
 80139ba:	7d1b      	ldrb	r3, [r3, #20]
 80139bc:	2b0a      	cmp	r3, #10
 80139be:	d006      	beq.n	80139ce <tcp_input+0x38e>
 80139c0:	4b48      	ldr	r3, [pc, #288]	; (8013ae4 <tcp_input+0x4a4>)
 80139c2:	f240 121f 	movw	r2, #287	; 0x11f
 80139c6:	494d      	ldr	r1, [pc, #308]	; (8013afc <tcp_input+0x4bc>)
 80139c8:	4848      	ldr	r0, [pc, #288]	; (8013aec <tcp_input+0x4ac>)
 80139ca:	f007 f993 	bl	801acf4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80139ce:	69fb      	ldr	r3, [r7, #28]
 80139d0:	7a1b      	ldrb	r3, [r3, #8]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d009      	beq.n	80139ea <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80139d6:	69fb      	ldr	r3, [r7, #28]
 80139d8:	7a1a      	ldrb	r2, [r3, #8]
 80139da:	4b41      	ldr	r3, [pc, #260]	; (8013ae0 <tcp_input+0x4a0>)
 80139dc:	685b      	ldr	r3, [r3, #4]
 80139de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80139e2:	3301      	adds	r3, #1
 80139e4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80139e6:	429a      	cmp	r2, r3
 80139e8:	d122      	bne.n	8013a30 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80139ea:	69fb      	ldr	r3, [r7, #28]
 80139ec:	8b1a      	ldrh	r2, [r3, #24]
 80139ee:	4b3b      	ldr	r3, [pc, #236]	; (8013adc <tcp_input+0x49c>)
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	881b      	ldrh	r3, [r3, #0]
 80139f4:	b29b      	uxth	r3, r3
 80139f6:	429a      	cmp	r2, r3
 80139f8:	d11b      	bne.n	8013a32 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80139fa:	69fb      	ldr	r3, [r7, #28]
 80139fc:	8ada      	ldrh	r2, [r3, #22]
 80139fe:	4b37      	ldr	r3, [pc, #220]	; (8013adc <tcp_input+0x49c>)
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	885b      	ldrh	r3, [r3, #2]
 8013a04:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8013a06:	429a      	cmp	r2, r3
 8013a08:	d113      	bne.n	8013a32 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013a0a:	69fb      	ldr	r3, [r7, #28]
 8013a0c:	685a      	ldr	r2, [r3, #4]
 8013a0e:	4b34      	ldr	r3, [pc, #208]	; (8013ae0 <tcp_input+0x4a0>)
 8013a10:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8013a12:	429a      	cmp	r2, r3
 8013a14:	d10d      	bne.n	8013a32 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013a16:	69fb      	ldr	r3, [r7, #28]
 8013a18:	681a      	ldr	r2, [r3, #0]
 8013a1a:	4b31      	ldr	r3, [pc, #196]	; (8013ae0 <tcp_input+0x4a0>)
 8013a1c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013a1e:	429a      	cmp	r2, r3
 8013a20:	d107      	bne.n	8013a32 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8013a22:	69f8      	ldr	r0, [r7, #28]
 8013a24:	f000 fb56 	bl	80140d4 <tcp_timewait_input>
        }
        pbuf_free(p);
 8013a28:	6878      	ldr	r0, [r7, #4]
 8013a2a:	f7fd fdcd 	bl	80115c8 <pbuf_free>
        return;
 8013a2e:	e1fd      	b.n	8013e2c <tcp_input+0x7ec>
        continue;
 8013a30:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a32:	69fb      	ldr	r3, [r7, #28]
 8013a34:	68db      	ldr	r3, [r3, #12]
 8013a36:	61fb      	str	r3, [r7, #28]
 8013a38:	69fb      	ldr	r3, [r7, #28]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d1bc      	bne.n	80139b8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013a3e:	2300      	movs	r3, #0
 8013a40:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013a42:	4b2f      	ldr	r3, [pc, #188]	; (8013b00 <tcp_input+0x4c0>)
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	617b      	str	r3, [r7, #20]
 8013a48:	e02a      	b.n	8013aa0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013a4a:	697b      	ldr	r3, [r7, #20]
 8013a4c:	7a1b      	ldrb	r3, [r3, #8]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d00c      	beq.n	8013a6c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013a52:	697b      	ldr	r3, [r7, #20]
 8013a54:	7a1a      	ldrb	r2, [r3, #8]
 8013a56:	4b22      	ldr	r3, [pc, #136]	; (8013ae0 <tcp_input+0x4a0>)
 8013a58:	685b      	ldr	r3, [r3, #4]
 8013a5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013a5e:	3301      	adds	r3, #1
 8013a60:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013a62:	429a      	cmp	r2, r3
 8013a64:	d002      	beq.n	8013a6c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8013a66:	697b      	ldr	r3, [r7, #20]
 8013a68:	61bb      	str	r3, [r7, #24]
        continue;
 8013a6a:	e016      	b.n	8013a9a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013a6c:	697b      	ldr	r3, [r7, #20]
 8013a6e:	8ada      	ldrh	r2, [r3, #22]
 8013a70:	4b1a      	ldr	r3, [pc, #104]	; (8013adc <tcp_input+0x49c>)
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	885b      	ldrh	r3, [r3, #2]
 8013a76:	b29b      	uxth	r3, r3
 8013a78:	429a      	cmp	r2, r3
 8013a7a:	d10c      	bne.n	8013a96 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013a7c:	697b      	ldr	r3, [r7, #20]
 8013a7e:	681a      	ldr	r2, [r3, #0]
 8013a80:	4b17      	ldr	r3, [pc, #92]	; (8013ae0 <tcp_input+0x4a0>)
 8013a82:	695b      	ldr	r3, [r3, #20]
 8013a84:	429a      	cmp	r2, r3
 8013a86:	d00f      	beq.n	8013aa8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013a88:	697b      	ldr	r3, [r7, #20]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d00d      	beq.n	8013aaa <tcp_input+0x46a>
 8013a8e:	697b      	ldr	r3, [r7, #20]
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d009      	beq.n	8013aaa <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8013a96:	697b      	ldr	r3, [r7, #20]
 8013a98:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013a9a:	697b      	ldr	r3, [r7, #20]
 8013a9c:	68db      	ldr	r3, [r3, #12]
 8013a9e:	617b      	str	r3, [r7, #20]
 8013aa0:	697b      	ldr	r3, [r7, #20]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d1d1      	bne.n	8013a4a <tcp_input+0x40a>
 8013aa6:	e000      	b.n	8013aaa <tcp_input+0x46a>
            break;
 8013aa8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013aaa:	697b      	ldr	r3, [r7, #20]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d029      	beq.n	8013b04 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013ab0:	69bb      	ldr	r3, [r7, #24]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d00a      	beq.n	8013acc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013ab6:	697b      	ldr	r3, [r7, #20]
 8013ab8:	68da      	ldr	r2, [r3, #12]
 8013aba:	69bb      	ldr	r3, [r7, #24]
 8013abc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013abe:	4b10      	ldr	r3, [pc, #64]	; (8013b00 <tcp_input+0x4c0>)
 8013ac0:	681a      	ldr	r2, [r3, #0]
 8013ac2:	697b      	ldr	r3, [r7, #20]
 8013ac4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013ac6:	4a0e      	ldr	r2, [pc, #56]	; (8013b00 <tcp_input+0x4c0>)
 8013ac8:	697b      	ldr	r3, [r7, #20]
 8013aca:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013acc:	6978      	ldr	r0, [r7, #20]
 8013ace:	f000 fa03 	bl	8013ed8 <tcp_listen_input>
      }
      pbuf_free(p);
 8013ad2:	6878      	ldr	r0, [r7, #4]
 8013ad4:	f7fd fd78 	bl	80115c8 <pbuf_free>
      return;
 8013ad8:	e1a8      	b.n	8013e2c <tcp_input+0x7ec>
 8013ada:	bf00      	nop
 8013adc:	200110b0 	.word	0x200110b0
 8013ae0:	2000d934 	.word	0x2000d934
 8013ae4:	0801e178 	.word	0x0801e178
 8013ae8:	0801e2a4 	.word	0x0801e2a4
 8013aec:	0801e1c4 	.word	0x0801e1c4
 8013af0:	20011094 	.word	0x20011094
 8013af4:	0801e2d0 	.word	0x0801e2d0
 8013af8:	20011098 	.word	0x20011098
 8013afc:	0801e2fc 	.word	0x0801e2fc
 8013b00:	20011090 	.word	0x20011090
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8013b04:	69fb      	ldr	r3, [r7, #28]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	f000 8158 	beq.w	8013dbc <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013b0c:	4b95      	ldr	r3, [pc, #596]	; (8013d64 <tcp_input+0x724>)
 8013b0e:	2200      	movs	r2, #0
 8013b10:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	891a      	ldrh	r2, [r3, #8]
 8013b16:	4b93      	ldr	r3, [pc, #588]	; (8013d64 <tcp_input+0x724>)
 8013b18:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013b1a:	4a92      	ldr	r2, [pc, #584]	; (8013d64 <tcp_input+0x724>)
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013b20:	4b91      	ldr	r3, [pc, #580]	; (8013d68 <tcp_input+0x728>)
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	4a8f      	ldr	r2, [pc, #572]	; (8013d64 <tcp_input+0x724>)
 8013b26:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013b28:	4b90      	ldr	r3, [pc, #576]	; (8013d6c <tcp_input+0x72c>)
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013b2e:	4b90      	ldr	r3, [pc, #576]	; (8013d70 <tcp_input+0x730>)
 8013b30:	2200      	movs	r2, #0
 8013b32:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013b34:	4b8f      	ldr	r3, [pc, #572]	; (8013d74 <tcp_input+0x734>)
 8013b36:	2200      	movs	r2, #0
 8013b38:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013b3a:	4b8f      	ldr	r3, [pc, #572]	; (8013d78 <tcp_input+0x738>)
 8013b3c:	781b      	ldrb	r3, [r3, #0]
 8013b3e:	f003 0308 	and.w	r3, r3, #8
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d006      	beq.n	8013b54 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	7b5b      	ldrb	r3, [r3, #13]
 8013b4a:	f043 0301 	orr.w	r3, r3, #1
 8013b4e:	b2da      	uxtb	r2, r3
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013b54:	69fb      	ldr	r3, [r7, #28]
 8013b56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d017      	beq.n	8013b8c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013b5c:	69f8      	ldr	r0, [r7, #28]
 8013b5e:	f7ff f85b 	bl	8012c18 <tcp_process_refused_data>
 8013b62:	4603      	mov	r3, r0
 8013b64:	f113 0f0d 	cmn.w	r3, #13
 8013b68:	d007      	beq.n	8013b7a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013b6a:	69fb      	ldr	r3, [r7, #28]
 8013b6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d00c      	beq.n	8013b8c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013b72:	4b82      	ldr	r3, [pc, #520]	; (8013d7c <tcp_input+0x73c>)
 8013b74:	881b      	ldrh	r3, [r3, #0]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d008      	beq.n	8013b8c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013b7a:	69fb      	ldr	r3, [r7, #28]
 8013b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	f040 80e3 	bne.w	8013d4a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013b84:	69f8      	ldr	r0, [r7, #28]
 8013b86:	f003 fe05 	bl	8017794 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013b8a:	e0de      	b.n	8013d4a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8013b8c:	4a7c      	ldr	r2, [pc, #496]	; (8013d80 <tcp_input+0x740>)
 8013b8e:	69fb      	ldr	r3, [r7, #28]
 8013b90:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8013b92:	69f8      	ldr	r0, [r7, #28]
 8013b94:	f000 fb18 	bl	80141c8 <tcp_process>
 8013b98:	4603      	mov	r3, r0
 8013b9a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013b9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013ba0:	f113 0f0d 	cmn.w	r3, #13
 8013ba4:	f000 80d3 	beq.w	8013d4e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8013ba8:	4b71      	ldr	r3, [pc, #452]	; (8013d70 <tcp_input+0x730>)
 8013baa:	781b      	ldrb	r3, [r3, #0]
 8013bac:	f003 0308 	and.w	r3, r3, #8
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d015      	beq.n	8013be0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013bb4:	69fb      	ldr	r3, [r7, #28]
 8013bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d008      	beq.n	8013bd0 <tcp_input+0x590>
 8013bbe:	69fb      	ldr	r3, [r7, #28]
 8013bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013bc4:	69fa      	ldr	r2, [r7, #28]
 8013bc6:	6912      	ldr	r2, [r2, #16]
 8013bc8:	f06f 010d 	mvn.w	r1, #13
 8013bcc:	4610      	mov	r0, r2
 8013bce:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013bd0:	69f9      	ldr	r1, [r7, #28]
 8013bd2:	486c      	ldr	r0, [pc, #432]	; (8013d84 <tcp_input+0x744>)
 8013bd4:	f7ff fbbc 	bl	8013350 <tcp_pcb_remove>
        tcp_free(pcb);
 8013bd8:	69f8      	ldr	r0, [r7, #28]
 8013bda:	f7fd ffa1 	bl	8011b20 <tcp_free>
 8013bde:	e0da      	b.n	8013d96 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8013be0:	2300      	movs	r3, #0
 8013be2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013be4:	4b63      	ldr	r3, [pc, #396]	; (8013d74 <tcp_input+0x734>)
 8013be6:	881b      	ldrh	r3, [r3, #0]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d01d      	beq.n	8013c28 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013bec:	4b61      	ldr	r3, [pc, #388]	; (8013d74 <tcp_input+0x734>)
 8013bee:	881b      	ldrh	r3, [r3, #0]
 8013bf0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013bf2:	69fb      	ldr	r3, [r7, #28]
 8013bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d00a      	beq.n	8013c12 <tcp_input+0x5d2>
 8013bfc:	69fb      	ldr	r3, [r7, #28]
 8013bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013c02:	69fa      	ldr	r2, [r7, #28]
 8013c04:	6910      	ldr	r0, [r2, #16]
 8013c06:	89fa      	ldrh	r2, [r7, #14]
 8013c08:	69f9      	ldr	r1, [r7, #28]
 8013c0a:	4798      	blx	r3
 8013c0c:	4603      	mov	r3, r0
 8013c0e:	74fb      	strb	r3, [r7, #19]
 8013c10:	e001      	b.n	8013c16 <tcp_input+0x5d6>
 8013c12:	2300      	movs	r3, #0
 8013c14:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013c16:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013c1a:	f113 0f0d 	cmn.w	r3, #13
 8013c1e:	f000 8098 	beq.w	8013d52 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013c22:	4b54      	ldr	r3, [pc, #336]	; (8013d74 <tcp_input+0x734>)
 8013c24:	2200      	movs	r2, #0
 8013c26:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013c28:	69f8      	ldr	r0, [r7, #28]
 8013c2a:	f000 f915 	bl	8013e58 <tcp_input_delayed_close>
 8013c2e:	4603      	mov	r3, r0
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	f040 8090 	bne.w	8013d56 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013c36:	4b4d      	ldr	r3, [pc, #308]	; (8013d6c <tcp_input+0x72c>)
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d041      	beq.n	8013cc2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013c3e:	69fb      	ldr	r3, [r7, #28]
 8013c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d006      	beq.n	8013c54 <tcp_input+0x614>
 8013c46:	4b50      	ldr	r3, [pc, #320]	; (8013d88 <tcp_input+0x748>)
 8013c48:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013c4c:	494f      	ldr	r1, [pc, #316]	; (8013d8c <tcp_input+0x74c>)
 8013c4e:	4850      	ldr	r0, [pc, #320]	; (8013d90 <tcp_input+0x750>)
 8013c50:	f007 f850 	bl	801acf4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013c54:	69fb      	ldr	r3, [r7, #28]
 8013c56:	8b5b      	ldrh	r3, [r3, #26]
 8013c58:	f003 0310 	and.w	r3, r3, #16
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d008      	beq.n	8013c72 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013c60:	4b42      	ldr	r3, [pc, #264]	; (8013d6c <tcp_input+0x72c>)
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	4618      	mov	r0, r3
 8013c66:	f7fd fcaf 	bl	80115c8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013c6a:	69f8      	ldr	r0, [r7, #28]
 8013c6c:	f7fe fa9c 	bl	80121a8 <tcp_abort>
            goto aborted;
 8013c70:	e091      	b.n	8013d96 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013c72:	69fb      	ldr	r3, [r7, #28]
 8013c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d00c      	beq.n	8013c96 <tcp_input+0x656>
 8013c7c:	69fb      	ldr	r3, [r7, #28]
 8013c7e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013c82:	69fb      	ldr	r3, [r7, #28]
 8013c84:	6918      	ldr	r0, [r3, #16]
 8013c86:	4b39      	ldr	r3, [pc, #228]	; (8013d6c <tcp_input+0x72c>)
 8013c88:	681a      	ldr	r2, [r3, #0]
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	69f9      	ldr	r1, [r7, #28]
 8013c8e:	47a0      	blx	r4
 8013c90:	4603      	mov	r3, r0
 8013c92:	74fb      	strb	r3, [r7, #19]
 8013c94:	e008      	b.n	8013ca8 <tcp_input+0x668>
 8013c96:	4b35      	ldr	r3, [pc, #212]	; (8013d6c <tcp_input+0x72c>)
 8013c98:	681a      	ldr	r2, [r3, #0]
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	69f9      	ldr	r1, [r7, #28]
 8013c9e:	2000      	movs	r0, #0
 8013ca0:	f7ff f890 	bl	8012dc4 <tcp_recv_null>
 8013ca4:	4603      	mov	r3, r0
 8013ca6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013ca8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013cac:	f113 0f0d 	cmn.w	r3, #13
 8013cb0:	d053      	beq.n	8013d5a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013cb2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d003      	beq.n	8013cc2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013cba:	4b2c      	ldr	r3, [pc, #176]	; (8013d6c <tcp_input+0x72c>)
 8013cbc:	681a      	ldr	r2, [r3, #0]
 8013cbe:	69fb      	ldr	r3, [r7, #28]
 8013cc0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013cc2:	4b2b      	ldr	r3, [pc, #172]	; (8013d70 <tcp_input+0x730>)
 8013cc4:	781b      	ldrb	r3, [r3, #0]
 8013cc6:	f003 0320 	and.w	r3, r3, #32
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d030      	beq.n	8013d30 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8013cce:	69fb      	ldr	r3, [r7, #28]
 8013cd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d009      	beq.n	8013cea <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013cd6:	69fb      	ldr	r3, [r7, #28]
 8013cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013cda:	7b5a      	ldrb	r2, [r3, #13]
 8013cdc:	69fb      	ldr	r3, [r7, #28]
 8013cde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013ce0:	f042 0220 	orr.w	r2, r2, #32
 8013ce4:	b2d2      	uxtb	r2, r2
 8013ce6:	735a      	strb	r2, [r3, #13]
 8013ce8:	e022      	b.n	8013d30 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013cea:	69fb      	ldr	r3, [r7, #28]
 8013cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013cee:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013cf2:	d005      	beq.n	8013d00 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8013cf4:	69fb      	ldr	r3, [r7, #28]
 8013cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013cf8:	3301      	adds	r3, #1
 8013cfa:	b29a      	uxth	r2, r3
 8013cfc:	69fb      	ldr	r3, [r7, #28]
 8013cfe:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013d00:	69fb      	ldr	r3, [r7, #28]
 8013d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d00b      	beq.n	8013d22 <tcp_input+0x6e2>
 8013d0a:	69fb      	ldr	r3, [r7, #28]
 8013d0c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013d10:	69fb      	ldr	r3, [r7, #28]
 8013d12:	6918      	ldr	r0, [r3, #16]
 8013d14:	2300      	movs	r3, #0
 8013d16:	2200      	movs	r2, #0
 8013d18:	69f9      	ldr	r1, [r7, #28]
 8013d1a:	47a0      	blx	r4
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	74fb      	strb	r3, [r7, #19]
 8013d20:	e001      	b.n	8013d26 <tcp_input+0x6e6>
 8013d22:	2300      	movs	r3, #0
 8013d24:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013d26:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013d2a:	f113 0f0d 	cmn.w	r3, #13
 8013d2e:	d016      	beq.n	8013d5e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013d30:	4b13      	ldr	r3, [pc, #76]	; (8013d80 <tcp_input+0x740>)
 8013d32:	2200      	movs	r2, #0
 8013d34:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013d36:	69f8      	ldr	r0, [r7, #28]
 8013d38:	f000 f88e 	bl	8013e58 <tcp_input_delayed_close>
 8013d3c:	4603      	mov	r3, r0
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d128      	bne.n	8013d94 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8013d42:	69f8      	ldr	r0, [r7, #28]
 8013d44:	f002 ff20 	bl	8016b88 <tcp_output>
 8013d48:	e025      	b.n	8013d96 <tcp_input+0x756>
        goto aborted;
 8013d4a:	bf00      	nop
 8013d4c:	e023      	b.n	8013d96 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013d4e:	bf00      	nop
 8013d50:	e021      	b.n	8013d96 <tcp_input+0x756>
              goto aborted;
 8013d52:	bf00      	nop
 8013d54:	e01f      	b.n	8013d96 <tcp_input+0x756>
          goto aborted;
 8013d56:	bf00      	nop
 8013d58:	e01d      	b.n	8013d96 <tcp_input+0x756>
            goto aborted;
 8013d5a:	bf00      	nop
 8013d5c:	e01b      	b.n	8013d96 <tcp_input+0x756>
              goto aborted;
 8013d5e:	bf00      	nop
 8013d60:	e019      	b.n	8013d96 <tcp_input+0x756>
 8013d62:	bf00      	nop
 8013d64:	200110a0 	.word	0x200110a0
 8013d68:	200110b0 	.word	0x200110b0
 8013d6c:	200110d0 	.word	0x200110d0
 8013d70:	200110cd 	.word	0x200110cd
 8013d74:	200110c8 	.word	0x200110c8
 8013d78:	200110cc 	.word	0x200110cc
 8013d7c:	200110ca 	.word	0x200110ca
 8013d80:	200110d4 	.word	0x200110d4
 8013d84:	20011094 	.word	0x20011094
 8013d88:	0801e178 	.word	0x0801e178
 8013d8c:	0801e32c 	.word	0x0801e32c
 8013d90:	0801e1c4 	.word	0x0801e1c4
          goto aborted;
 8013d94:	bf00      	nop
    tcp_input_pcb = NULL;
 8013d96:	4b27      	ldr	r3, [pc, #156]	; (8013e34 <tcp_input+0x7f4>)
 8013d98:	2200      	movs	r2, #0
 8013d9a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013d9c:	4b26      	ldr	r3, [pc, #152]	; (8013e38 <tcp_input+0x7f8>)
 8013d9e:	2200      	movs	r2, #0
 8013da0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8013da2:	4b26      	ldr	r3, [pc, #152]	; (8013e3c <tcp_input+0x7fc>)
 8013da4:	685b      	ldr	r3, [r3, #4]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d03f      	beq.n	8013e2a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8013daa:	4b24      	ldr	r3, [pc, #144]	; (8013e3c <tcp_input+0x7fc>)
 8013dac:	685b      	ldr	r3, [r3, #4]
 8013dae:	4618      	mov	r0, r3
 8013db0:	f7fd fc0a 	bl	80115c8 <pbuf_free>
      inseg.p = NULL;
 8013db4:	4b21      	ldr	r3, [pc, #132]	; (8013e3c <tcp_input+0x7fc>)
 8013db6:	2200      	movs	r2, #0
 8013db8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013dba:	e036      	b.n	8013e2a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013dbc:	4b20      	ldr	r3, [pc, #128]	; (8013e40 <tcp_input+0x800>)
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	899b      	ldrh	r3, [r3, #12]
 8013dc2:	b29b      	uxth	r3, r3
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	f7fb ffdb 	bl	800fd80 <lwip_htons>
 8013dca:	4603      	mov	r3, r0
 8013dcc:	b2db      	uxtb	r3, r3
 8013dce:	f003 0304 	and.w	r3, r3, #4
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d118      	bne.n	8013e08 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013dd6:	4b1b      	ldr	r3, [pc, #108]	; (8013e44 <tcp_input+0x804>)
 8013dd8:	6819      	ldr	r1, [r3, #0]
 8013dda:	4b1b      	ldr	r3, [pc, #108]	; (8013e48 <tcp_input+0x808>)
 8013ddc:	881b      	ldrh	r3, [r3, #0]
 8013dde:	461a      	mov	r2, r3
 8013de0:	4b1a      	ldr	r3, [pc, #104]	; (8013e4c <tcp_input+0x80c>)
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013de6:	4b16      	ldr	r3, [pc, #88]	; (8013e40 <tcp_input+0x800>)
 8013de8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013dea:	885b      	ldrh	r3, [r3, #2]
 8013dec:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013dee:	4a14      	ldr	r2, [pc, #80]	; (8013e40 <tcp_input+0x800>)
 8013df0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013df2:	8812      	ldrh	r2, [r2, #0]
 8013df4:	b292      	uxth	r2, r2
 8013df6:	9202      	str	r2, [sp, #8]
 8013df8:	9301      	str	r3, [sp, #4]
 8013dfa:	4b15      	ldr	r3, [pc, #84]	; (8013e50 <tcp_input+0x810>)
 8013dfc:	9300      	str	r3, [sp, #0]
 8013dfe:	4b15      	ldr	r3, [pc, #84]	; (8013e54 <tcp_input+0x814>)
 8013e00:	4602      	mov	r2, r0
 8013e02:	2000      	movs	r0, #0
 8013e04:	f003 fc74 	bl	80176f0 <tcp_rst>
    pbuf_free(p);
 8013e08:	6878      	ldr	r0, [r7, #4]
 8013e0a:	f7fd fbdd 	bl	80115c8 <pbuf_free>
  return;
 8013e0e:	e00c      	b.n	8013e2a <tcp_input+0x7ea>
    goto dropped;
 8013e10:	bf00      	nop
 8013e12:	e006      	b.n	8013e22 <tcp_input+0x7e2>
    goto dropped;
 8013e14:	bf00      	nop
 8013e16:	e004      	b.n	8013e22 <tcp_input+0x7e2>
    goto dropped;
 8013e18:	bf00      	nop
 8013e1a:	e002      	b.n	8013e22 <tcp_input+0x7e2>
      goto dropped;
 8013e1c:	bf00      	nop
 8013e1e:	e000      	b.n	8013e22 <tcp_input+0x7e2>
      goto dropped;
 8013e20:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013e22:	6878      	ldr	r0, [r7, #4]
 8013e24:	f7fd fbd0 	bl	80115c8 <pbuf_free>
 8013e28:	e000      	b.n	8013e2c <tcp_input+0x7ec>
  return;
 8013e2a:	bf00      	nop
}
 8013e2c:	3724      	adds	r7, #36	; 0x24
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	bd90      	pop	{r4, r7, pc}
 8013e32:	bf00      	nop
 8013e34:	200110d4 	.word	0x200110d4
 8013e38:	200110d0 	.word	0x200110d0
 8013e3c:	200110a0 	.word	0x200110a0
 8013e40:	200110b0 	.word	0x200110b0
 8013e44:	200110c4 	.word	0x200110c4
 8013e48:	200110ca 	.word	0x200110ca
 8013e4c:	200110c0 	.word	0x200110c0
 8013e50:	2000d944 	.word	0x2000d944
 8013e54:	2000d948 	.word	0x2000d948

08013e58 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	b082      	sub	sp, #8
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d106      	bne.n	8013e74 <tcp_input_delayed_close+0x1c>
 8013e66:	4b17      	ldr	r3, [pc, #92]	; (8013ec4 <tcp_input_delayed_close+0x6c>)
 8013e68:	f240 225a 	movw	r2, #602	; 0x25a
 8013e6c:	4916      	ldr	r1, [pc, #88]	; (8013ec8 <tcp_input_delayed_close+0x70>)
 8013e6e:	4817      	ldr	r0, [pc, #92]	; (8013ecc <tcp_input_delayed_close+0x74>)
 8013e70:	f006 ff40 	bl	801acf4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8013e74:	4b16      	ldr	r3, [pc, #88]	; (8013ed0 <tcp_input_delayed_close+0x78>)
 8013e76:	781b      	ldrb	r3, [r3, #0]
 8013e78:	f003 0310 	and.w	r3, r3, #16
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d01c      	beq.n	8013eba <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	8b5b      	ldrh	r3, [r3, #26]
 8013e84:	f003 0310 	and.w	r3, r3, #16
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d10d      	bne.n	8013ea8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d008      	beq.n	8013ea8 <tcp_input_delayed_close+0x50>
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013e9c:	687a      	ldr	r2, [r7, #4]
 8013e9e:	6912      	ldr	r2, [r2, #16]
 8013ea0:	f06f 010e 	mvn.w	r1, #14
 8013ea4:	4610      	mov	r0, r2
 8013ea6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013ea8:	6879      	ldr	r1, [r7, #4]
 8013eaa:	480a      	ldr	r0, [pc, #40]	; (8013ed4 <tcp_input_delayed_close+0x7c>)
 8013eac:	f7ff fa50 	bl	8013350 <tcp_pcb_remove>
    tcp_free(pcb);
 8013eb0:	6878      	ldr	r0, [r7, #4]
 8013eb2:	f7fd fe35 	bl	8011b20 <tcp_free>
    return 1;
 8013eb6:	2301      	movs	r3, #1
 8013eb8:	e000      	b.n	8013ebc <tcp_input_delayed_close+0x64>
  }
  return 0;
 8013eba:	2300      	movs	r3, #0
}
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	3708      	adds	r7, #8
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	bd80      	pop	{r7, pc}
 8013ec4:	0801e178 	.word	0x0801e178
 8013ec8:	0801e348 	.word	0x0801e348
 8013ecc:	0801e1c4 	.word	0x0801e1c4
 8013ed0:	200110cd 	.word	0x200110cd
 8013ed4:	20011094 	.word	0x20011094

08013ed8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013ed8:	b590      	push	{r4, r7, lr}
 8013eda:	b08b      	sub	sp, #44	; 0x2c
 8013edc:	af04      	add	r7, sp, #16
 8013ede:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013ee0:	4b6f      	ldr	r3, [pc, #444]	; (80140a0 <tcp_listen_input+0x1c8>)
 8013ee2:	781b      	ldrb	r3, [r3, #0]
 8013ee4:	f003 0304 	and.w	r3, r3, #4
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	f040 80d2 	bne.w	8014092 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d106      	bne.n	8013f02 <tcp_listen_input+0x2a>
 8013ef4:	4b6b      	ldr	r3, [pc, #428]	; (80140a4 <tcp_listen_input+0x1cc>)
 8013ef6:	f240 2281 	movw	r2, #641	; 0x281
 8013efa:	496b      	ldr	r1, [pc, #428]	; (80140a8 <tcp_listen_input+0x1d0>)
 8013efc:	486b      	ldr	r0, [pc, #428]	; (80140ac <tcp_listen_input+0x1d4>)
 8013efe:	f006 fef9 	bl	801acf4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013f02:	4b67      	ldr	r3, [pc, #412]	; (80140a0 <tcp_listen_input+0x1c8>)
 8013f04:	781b      	ldrb	r3, [r3, #0]
 8013f06:	f003 0310 	and.w	r3, r3, #16
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d019      	beq.n	8013f42 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013f0e:	4b68      	ldr	r3, [pc, #416]	; (80140b0 <tcp_listen_input+0x1d8>)
 8013f10:	6819      	ldr	r1, [r3, #0]
 8013f12:	4b68      	ldr	r3, [pc, #416]	; (80140b4 <tcp_listen_input+0x1dc>)
 8013f14:	881b      	ldrh	r3, [r3, #0]
 8013f16:	461a      	mov	r2, r3
 8013f18:	4b67      	ldr	r3, [pc, #412]	; (80140b8 <tcp_listen_input+0x1e0>)
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013f1e:	4b67      	ldr	r3, [pc, #412]	; (80140bc <tcp_listen_input+0x1e4>)
 8013f20:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013f22:	885b      	ldrh	r3, [r3, #2]
 8013f24:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013f26:	4a65      	ldr	r2, [pc, #404]	; (80140bc <tcp_listen_input+0x1e4>)
 8013f28:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013f2a:	8812      	ldrh	r2, [r2, #0]
 8013f2c:	b292      	uxth	r2, r2
 8013f2e:	9202      	str	r2, [sp, #8]
 8013f30:	9301      	str	r3, [sp, #4]
 8013f32:	4b63      	ldr	r3, [pc, #396]	; (80140c0 <tcp_listen_input+0x1e8>)
 8013f34:	9300      	str	r3, [sp, #0]
 8013f36:	4b63      	ldr	r3, [pc, #396]	; (80140c4 <tcp_listen_input+0x1ec>)
 8013f38:	4602      	mov	r2, r0
 8013f3a:	6878      	ldr	r0, [r7, #4]
 8013f3c:	f003 fbd8 	bl	80176f0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013f40:	e0a9      	b.n	8014096 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8013f42:	4b57      	ldr	r3, [pc, #348]	; (80140a0 <tcp_listen_input+0x1c8>)
 8013f44:	781b      	ldrb	r3, [r3, #0]
 8013f46:	f003 0302 	and.w	r3, r3, #2
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	f000 80a3 	beq.w	8014096 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	7d5b      	ldrb	r3, [r3, #21]
 8013f54:	4618      	mov	r0, r3
 8013f56:	f7ff f859 	bl	801300c <tcp_alloc>
 8013f5a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013f5c:	697b      	ldr	r3, [r7, #20]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d111      	bne.n	8013f86 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	699b      	ldr	r3, [r3, #24]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d00a      	beq.n	8013f80 <tcp_listen_input+0xa8>
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	699b      	ldr	r3, [r3, #24]
 8013f6e:	687a      	ldr	r2, [r7, #4]
 8013f70:	6910      	ldr	r0, [r2, #16]
 8013f72:	f04f 32ff 	mov.w	r2, #4294967295
 8013f76:	2100      	movs	r1, #0
 8013f78:	4798      	blx	r3
 8013f7a:	4603      	mov	r3, r0
 8013f7c:	73bb      	strb	r3, [r7, #14]
      return;
 8013f7e:	e08b      	b.n	8014098 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013f80:	23f0      	movs	r3, #240	; 0xf0
 8013f82:	73bb      	strb	r3, [r7, #14]
      return;
 8013f84:	e088      	b.n	8014098 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8013f86:	4b50      	ldr	r3, [pc, #320]	; (80140c8 <tcp_listen_input+0x1f0>)
 8013f88:	695a      	ldr	r2, [r3, #20]
 8013f8a:	697b      	ldr	r3, [r7, #20]
 8013f8c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8013f8e:	4b4e      	ldr	r3, [pc, #312]	; (80140c8 <tcp_listen_input+0x1f0>)
 8013f90:	691a      	ldr	r2, [r3, #16]
 8013f92:	697b      	ldr	r3, [r7, #20]
 8013f94:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	8ada      	ldrh	r2, [r3, #22]
 8013f9a:	697b      	ldr	r3, [r7, #20]
 8013f9c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8013f9e:	4b47      	ldr	r3, [pc, #284]	; (80140bc <tcp_listen_input+0x1e4>)
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	881b      	ldrh	r3, [r3, #0]
 8013fa4:	b29a      	uxth	r2, r3
 8013fa6:	697b      	ldr	r3, [r7, #20]
 8013fa8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013faa:	697b      	ldr	r3, [r7, #20]
 8013fac:	2203      	movs	r2, #3
 8013fae:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013fb0:	4b41      	ldr	r3, [pc, #260]	; (80140b8 <tcp_listen_input+0x1e0>)
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	1c5a      	adds	r2, r3, #1
 8013fb6:	697b      	ldr	r3, [r7, #20]
 8013fb8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8013fba:	697b      	ldr	r3, [r7, #20]
 8013fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013fbe:	697b      	ldr	r3, [r7, #20]
 8013fc0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8013fc2:	6978      	ldr	r0, [r7, #20]
 8013fc4:	f7ff fa58 	bl	8013478 <tcp_next_iss>
 8013fc8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8013fca:	697b      	ldr	r3, [r7, #20]
 8013fcc:	693a      	ldr	r2, [r7, #16]
 8013fce:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8013fd0:	697b      	ldr	r3, [r7, #20]
 8013fd2:	693a      	ldr	r2, [r7, #16]
 8013fd4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8013fd6:	697b      	ldr	r3, [r7, #20]
 8013fd8:	693a      	ldr	r2, [r7, #16]
 8013fda:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8013fdc:	697b      	ldr	r3, [r7, #20]
 8013fde:	693a      	ldr	r2, [r7, #16]
 8013fe0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8013fe2:	4b35      	ldr	r3, [pc, #212]	; (80140b8 <tcp_listen_input+0x1e0>)
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	1e5a      	subs	r2, r3, #1
 8013fe8:	697b      	ldr	r3, [r7, #20]
 8013fea:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	691a      	ldr	r2, [r3, #16]
 8013ff0:	697b      	ldr	r3, [r7, #20]
 8013ff2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8013ff4:	697b      	ldr	r3, [r7, #20]
 8013ff6:	687a      	ldr	r2, [r7, #4]
 8013ff8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	7a5b      	ldrb	r3, [r3, #9]
 8013ffe:	f003 030c 	and.w	r3, r3, #12
 8014002:	b2da      	uxtb	r2, r3
 8014004:	697b      	ldr	r3, [r7, #20]
 8014006:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	7a1a      	ldrb	r2, [r3, #8]
 801400c:	697b      	ldr	r3, [r7, #20]
 801400e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8014010:	4b2e      	ldr	r3, [pc, #184]	; (80140cc <tcp_listen_input+0x1f4>)
 8014012:	681a      	ldr	r2, [r3, #0]
 8014014:	697b      	ldr	r3, [r7, #20]
 8014016:	60da      	str	r2, [r3, #12]
 8014018:	4a2c      	ldr	r2, [pc, #176]	; (80140cc <tcp_listen_input+0x1f4>)
 801401a:	697b      	ldr	r3, [r7, #20]
 801401c:	6013      	str	r3, [r2, #0]
 801401e:	f003 fd29 	bl	8017a74 <tcp_timer_needed>
 8014022:	4b2b      	ldr	r3, [pc, #172]	; (80140d0 <tcp_listen_input+0x1f8>)
 8014024:	2201      	movs	r2, #1
 8014026:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014028:	6978      	ldr	r0, [r7, #20]
 801402a:	f001 fd8f 	bl	8015b4c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801402e:	4b23      	ldr	r3, [pc, #140]	; (80140bc <tcp_listen_input+0x1e4>)
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	89db      	ldrh	r3, [r3, #14]
 8014034:	b29a      	uxth	r2, r3
 8014036:	697b      	ldr	r3, [r7, #20]
 8014038:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801403c:	697b      	ldr	r3, [r7, #20]
 801403e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014042:	697b      	ldr	r3, [r7, #20]
 8014044:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014048:	697b      	ldr	r3, [r7, #20]
 801404a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801404c:	697b      	ldr	r3, [r7, #20]
 801404e:	3304      	adds	r3, #4
 8014050:	4618      	mov	r0, r3
 8014052:	f005 fa63 	bl	801951c <ip4_route>
 8014056:	4601      	mov	r1, r0
 8014058:	697b      	ldr	r3, [r7, #20]
 801405a:	3304      	adds	r3, #4
 801405c:	461a      	mov	r2, r3
 801405e:	4620      	mov	r0, r4
 8014060:	f7ff fa30 	bl	80134c4 <tcp_eff_send_mss_netif>
 8014064:	4603      	mov	r3, r0
 8014066:	461a      	mov	r2, r3
 8014068:	697b      	ldr	r3, [r7, #20]
 801406a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801406c:	2112      	movs	r1, #18
 801406e:	6978      	ldr	r0, [r7, #20]
 8014070:	f002 fc9c 	bl	80169ac <tcp_enqueue_flags>
 8014074:	4603      	mov	r3, r0
 8014076:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8014078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d004      	beq.n	801408a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014080:	2100      	movs	r1, #0
 8014082:	6978      	ldr	r0, [r7, #20]
 8014084:	f7fd ffd2 	bl	801202c <tcp_abandon>
      return;
 8014088:	e006      	b.n	8014098 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801408a:	6978      	ldr	r0, [r7, #20]
 801408c:	f002 fd7c 	bl	8016b88 <tcp_output>
  return;
 8014090:	e001      	b.n	8014096 <tcp_listen_input+0x1be>
    return;
 8014092:	bf00      	nop
 8014094:	e000      	b.n	8014098 <tcp_listen_input+0x1c0>
  return;
 8014096:	bf00      	nop
}
 8014098:	371c      	adds	r7, #28
 801409a:	46bd      	mov	sp, r7
 801409c:	bd90      	pop	{r4, r7, pc}
 801409e:	bf00      	nop
 80140a0:	200110cc 	.word	0x200110cc
 80140a4:	0801e178 	.word	0x0801e178
 80140a8:	0801e370 	.word	0x0801e370
 80140ac:	0801e1c4 	.word	0x0801e1c4
 80140b0:	200110c4 	.word	0x200110c4
 80140b4:	200110ca 	.word	0x200110ca
 80140b8:	200110c0 	.word	0x200110c0
 80140bc:	200110b0 	.word	0x200110b0
 80140c0:	2000d944 	.word	0x2000d944
 80140c4:	2000d948 	.word	0x2000d948
 80140c8:	2000d934 	.word	0x2000d934
 80140cc:	20011094 	.word	0x20011094
 80140d0:	2001109c 	.word	0x2001109c

080140d4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80140d4:	b580      	push	{r7, lr}
 80140d6:	b086      	sub	sp, #24
 80140d8:	af04      	add	r7, sp, #16
 80140da:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80140dc:	4b2f      	ldr	r3, [pc, #188]	; (801419c <tcp_timewait_input+0xc8>)
 80140de:	781b      	ldrb	r3, [r3, #0]
 80140e0:	f003 0304 	and.w	r3, r3, #4
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d153      	bne.n	8014190 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d106      	bne.n	80140fc <tcp_timewait_input+0x28>
 80140ee:	4b2c      	ldr	r3, [pc, #176]	; (80141a0 <tcp_timewait_input+0xcc>)
 80140f0:	f240 22ee 	movw	r2, #750	; 0x2ee
 80140f4:	492b      	ldr	r1, [pc, #172]	; (80141a4 <tcp_timewait_input+0xd0>)
 80140f6:	482c      	ldr	r0, [pc, #176]	; (80141a8 <tcp_timewait_input+0xd4>)
 80140f8:	f006 fdfc 	bl	801acf4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80140fc:	4b27      	ldr	r3, [pc, #156]	; (801419c <tcp_timewait_input+0xc8>)
 80140fe:	781b      	ldrb	r3, [r3, #0]
 8014100:	f003 0302 	and.w	r3, r3, #2
 8014104:	2b00      	cmp	r3, #0
 8014106:	d02a      	beq.n	801415e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014108:	4b28      	ldr	r3, [pc, #160]	; (80141ac <tcp_timewait_input+0xd8>)
 801410a:	681a      	ldr	r2, [r3, #0]
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014110:	1ad3      	subs	r3, r2, r3
 8014112:	2b00      	cmp	r3, #0
 8014114:	db2d      	blt.n	8014172 <tcp_timewait_input+0x9e>
 8014116:	4b25      	ldr	r3, [pc, #148]	; (80141ac <tcp_timewait_input+0xd8>)
 8014118:	681a      	ldr	r2, [r3, #0]
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801411e:	6879      	ldr	r1, [r7, #4]
 8014120:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014122:	440b      	add	r3, r1
 8014124:	1ad3      	subs	r3, r2, r3
 8014126:	2b00      	cmp	r3, #0
 8014128:	dc23      	bgt.n	8014172 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801412a:	4b21      	ldr	r3, [pc, #132]	; (80141b0 <tcp_timewait_input+0xdc>)
 801412c:	6819      	ldr	r1, [r3, #0]
 801412e:	4b21      	ldr	r3, [pc, #132]	; (80141b4 <tcp_timewait_input+0xe0>)
 8014130:	881b      	ldrh	r3, [r3, #0]
 8014132:	461a      	mov	r2, r3
 8014134:	4b1d      	ldr	r3, [pc, #116]	; (80141ac <tcp_timewait_input+0xd8>)
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801413a:	4b1f      	ldr	r3, [pc, #124]	; (80141b8 <tcp_timewait_input+0xe4>)
 801413c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801413e:	885b      	ldrh	r3, [r3, #2]
 8014140:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014142:	4a1d      	ldr	r2, [pc, #116]	; (80141b8 <tcp_timewait_input+0xe4>)
 8014144:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014146:	8812      	ldrh	r2, [r2, #0]
 8014148:	b292      	uxth	r2, r2
 801414a:	9202      	str	r2, [sp, #8]
 801414c:	9301      	str	r3, [sp, #4]
 801414e:	4b1b      	ldr	r3, [pc, #108]	; (80141bc <tcp_timewait_input+0xe8>)
 8014150:	9300      	str	r3, [sp, #0]
 8014152:	4b1b      	ldr	r3, [pc, #108]	; (80141c0 <tcp_timewait_input+0xec>)
 8014154:	4602      	mov	r2, r0
 8014156:	6878      	ldr	r0, [r7, #4]
 8014158:	f003 faca 	bl	80176f0 <tcp_rst>
      return;
 801415c:	e01b      	b.n	8014196 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801415e:	4b0f      	ldr	r3, [pc, #60]	; (801419c <tcp_timewait_input+0xc8>)
 8014160:	781b      	ldrb	r3, [r3, #0]
 8014162:	f003 0301 	and.w	r3, r3, #1
 8014166:	2b00      	cmp	r3, #0
 8014168:	d003      	beq.n	8014172 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801416a:	4b16      	ldr	r3, [pc, #88]	; (80141c4 <tcp_timewait_input+0xf0>)
 801416c:	681a      	ldr	r2, [r3, #0]
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8014172:	4b10      	ldr	r3, [pc, #64]	; (80141b4 <tcp_timewait_input+0xe0>)
 8014174:	881b      	ldrh	r3, [r3, #0]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d00c      	beq.n	8014194 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	8b5b      	ldrh	r3, [r3, #26]
 801417e:	f043 0302 	orr.w	r3, r3, #2
 8014182:	b29a      	uxth	r2, r3
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014188:	6878      	ldr	r0, [r7, #4]
 801418a:	f002 fcfd 	bl	8016b88 <tcp_output>
  }
  return;
 801418e:	e001      	b.n	8014194 <tcp_timewait_input+0xc0>
    return;
 8014190:	bf00      	nop
 8014192:	e000      	b.n	8014196 <tcp_timewait_input+0xc2>
  return;
 8014194:	bf00      	nop
}
 8014196:	3708      	adds	r7, #8
 8014198:	46bd      	mov	sp, r7
 801419a:	bd80      	pop	{r7, pc}
 801419c:	200110cc 	.word	0x200110cc
 80141a0:	0801e178 	.word	0x0801e178
 80141a4:	0801e390 	.word	0x0801e390
 80141a8:	0801e1c4 	.word	0x0801e1c4
 80141ac:	200110c0 	.word	0x200110c0
 80141b0:	200110c4 	.word	0x200110c4
 80141b4:	200110ca 	.word	0x200110ca
 80141b8:	200110b0 	.word	0x200110b0
 80141bc:	2000d944 	.word	0x2000d944
 80141c0:	2000d948 	.word	0x2000d948
 80141c4:	20011088 	.word	0x20011088

080141c8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80141c8:	b590      	push	{r4, r7, lr}
 80141ca:	b08d      	sub	sp, #52	; 0x34
 80141cc:	af04      	add	r7, sp, #16
 80141ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80141d0:	2300      	movs	r3, #0
 80141d2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80141d4:	2300      	movs	r3, #0
 80141d6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d106      	bne.n	80141ec <tcp_process+0x24>
 80141de:	4b9d      	ldr	r3, [pc, #628]	; (8014454 <tcp_process+0x28c>)
 80141e0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80141e4:	499c      	ldr	r1, [pc, #624]	; (8014458 <tcp_process+0x290>)
 80141e6:	489d      	ldr	r0, [pc, #628]	; (801445c <tcp_process+0x294>)
 80141e8:	f006 fd84 	bl	801acf4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80141ec:	4b9c      	ldr	r3, [pc, #624]	; (8014460 <tcp_process+0x298>)
 80141ee:	781b      	ldrb	r3, [r3, #0]
 80141f0:	f003 0304 	and.w	r3, r3, #4
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d04e      	beq.n	8014296 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	7d1b      	ldrb	r3, [r3, #20]
 80141fc:	2b02      	cmp	r3, #2
 80141fe:	d108      	bne.n	8014212 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014204:	4b97      	ldr	r3, [pc, #604]	; (8014464 <tcp_process+0x29c>)
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	429a      	cmp	r2, r3
 801420a:	d123      	bne.n	8014254 <tcp_process+0x8c>
        acceptable = 1;
 801420c:	2301      	movs	r3, #1
 801420e:	76fb      	strb	r3, [r7, #27]
 8014210:	e020      	b.n	8014254 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014216:	4b94      	ldr	r3, [pc, #592]	; (8014468 <tcp_process+0x2a0>)
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	429a      	cmp	r2, r3
 801421c:	d102      	bne.n	8014224 <tcp_process+0x5c>
        acceptable = 1;
 801421e:	2301      	movs	r3, #1
 8014220:	76fb      	strb	r3, [r7, #27]
 8014222:	e017      	b.n	8014254 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014224:	4b90      	ldr	r3, [pc, #576]	; (8014468 <tcp_process+0x2a0>)
 8014226:	681a      	ldr	r2, [r3, #0]
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801422c:	1ad3      	subs	r3, r2, r3
 801422e:	2b00      	cmp	r3, #0
 8014230:	db10      	blt.n	8014254 <tcp_process+0x8c>
 8014232:	4b8d      	ldr	r3, [pc, #564]	; (8014468 <tcp_process+0x2a0>)
 8014234:	681a      	ldr	r2, [r3, #0]
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801423a:	6879      	ldr	r1, [r7, #4]
 801423c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801423e:	440b      	add	r3, r1
 8014240:	1ad3      	subs	r3, r2, r3
 8014242:	2b00      	cmp	r3, #0
 8014244:	dc06      	bgt.n	8014254 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	8b5b      	ldrh	r3, [r3, #26]
 801424a:	f043 0302 	orr.w	r3, r3, #2
 801424e:	b29a      	uxth	r2, r3
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8014254:	7efb      	ldrb	r3, [r7, #27]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d01b      	beq.n	8014292 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	7d1b      	ldrb	r3, [r3, #20]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d106      	bne.n	8014270 <tcp_process+0xa8>
 8014262:	4b7c      	ldr	r3, [pc, #496]	; (8014454 <tcp_process+0x28c>)
 8014264:	f44f 724e 	mov.w	r2, #824	; 0x338
 8014268:	4980      	ldr	r1, [pc, #512]	; (801446c <tcp_process+0x2a4>)
 801426a:	487c      	ldr	r0, [pc, #496]	; (801445c <tcp_process+0x294>)
 801426c:	f006 fd42 	bl	801acf4 <iprintf>
      recv_flags |= TF_RESET;
 8014270:	4b7f      	ldr	r3, [pc, #508]	; (8014470 <tcp_process+0x2a8>)
 8014272:	781b      	ldrb	r3, [r3, #0]
 8014274:	f043 0308 	orr.w	r3, r3, #8
 8014278:	b2da      	uxtb	r2, r3
 801427a:	4b7d      	ldr	r3, [pc, #500]	; (8014470 <tcp_process+0x2a8>)
 801427c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	8b5b      	ldrh	r3, [r3, #26]
 8014282:	f023 0301 	bic.w	r3, r3, #1
 8014286:	b29a      	uxth	r2, r3
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801428c:	f06f 030d 	mvn.w	r3, #13
 8014290:	e37a      	b.n	8014988 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8014292:	2300      	movs	r3, #0
 8014294:	e378      	b.n	8014988 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8014296:	4b72      	ldr	r3, [pc, #456]	; (8014460 <tcp_process+0x298>)
 8014298:	781b      	ldrb	r3, [r3, #0]
 801429a:	f003 0302 	and.w	r3, r3, #2
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d010      	beq.n	80142c4 <tcp_process+0xfc>
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	7d1b      	ldrb	r3, [r3, #20]
 80142a6:	2b02      	cmp	r3, #2
 80142a8:	d00c      	beq.n	80142c4 <tcp_process+0xfc>
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	7d1b      	ldrb	r3, [r3, #20]
 80142ae:	2b03      	cmp	r3, #3
 80142b0:	d008      	beq.n	80142c4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	8b5b      	ldrh	r3, [r3, #26]
 80142b6:	f043 0302 	orr.w	r3, r3, #2
 80142ba:	b29a      	uxth	r2, r3
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80142c0:	2300      	movs	r3, #0
 80142c2:	e361      	b.n	8014988 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	8b5b      	ldrh	r3, [r3, #26]
 80142c8:	f003 0310 	and.w	r3, r3, #16
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d103      	bne.n	80142d8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80142d0:	4b68      	ldr	r3, [pc, #416]	; (8014474 <tcp_process+0x2ac>)
 80142d2:	681a      	ldr	r2, [r3, #0]
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	2200      	movs	r2, #0
 80142dc:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	2200      	movs	r2, #0
 80142e4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80142e8:	6878      	ldr	r0, [r7, #4]
 80142ea:	f001 fc2f 	bl	8015b4c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	7d1b      	ldrb	r3, [r3, #20]
 80142f2:	3b02      	subs	r3, #2
 80142f4:	2b07      	cmp	r3, #7
 80142f6:	f200 8337 	bhi.w	8014968 <tcp_process+0x7a0>
 80142fa:	a201      	add	r2, pc, #4	; (adr r2, 8014300 <tcp_process+0x138>)
 80142fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014300:	08014321 	.word	0x08014321
 8014304:	08014551 	.word	0x08014551
 8014308:	080146c9 	.word	0x080146c9
 801430c:	080146f3 	.word	0x080146f3
 8014310:	08014817 	.word	0x08014817
 8014314:	080146c9 	.word	0x080146c9
 8014318:	080148a3 	.word	0x080148a3
 801431c:	08014933 	.word	0x08014933
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014320:	4b4f      	ldr	r3, [pc, #316]	; (8014460 <tcp_process+0x298>)
 8014322:	781b      	ldrb	r3, [r3, #0]
 8014324:	f003 0310 	and.w	r3, r3, #16
 8014328:	2b00      	cmp	r3, #0
 801432a:	f000 80e4 	beq.w	80144f6 <tcp_process+0x32e>
 801432e:	4b4c      	ldr	r3, [pc, #304]	; (8014460 <tcp_process+0x298>)
 8014330:	781b      	ldrb	r3, [r3, #0]
 8014332:	f003 0302 	and.w	r3, r3, #2
 8014336:	2b00      	cmp	r3, #0
 8014338:	f000 80dd 	beq.w	80144f6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014340:	1c5a      	adds	r2, r3, #1
 8014342:	4b48      	ldr	r3, [pc, #288]	; (8014464 <tcp_process+0x29c>)
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	429a      	cmp	r2, r3
 8014348:	f040 80d5 	bne.w	80144f6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801434c:	4b46      	ldr	r3, [pc, #280]	; (8014468 <tcp_process+0x2a0>)
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	1c5a      	adds	r2, r3, #1
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801435e:	4b41      	ldr	r3, [pc, #260]	; (8014464 <tcp_process+0x29c>)
 8014360:	681a      	ldr	r2, [r3, #0]
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8014366:	4b44      	ldr	r3, [pc, #272]	; (8014478 <tcp_process+0x2b0>)
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	89db      	ldrh	r3, [r3, #14]
 801436c:	b29a      	uxth	r2, r3
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014380:	4b39      	ldr	r3, [pc, #228]	; (8014468 <tcp_process+0x2a0>)
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	1e5a      	subs	r2, r3, #1
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	2204      	movs	r2, #4
 801438e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	3304      	adds	r3, #4
 8014398:	4618      	mov	r0, r3
 801439a:	f005 f8bf 	bl	801951c <ip4_route>
 801439e:	4601      	mov	r1, r0
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	3304      	adds	r3, #4
 80143a4:	461a      	mov	r2, r3
 80143a6:	4620      	mov	r0, r4
 80143a8:	f7ff f88c 	bl	80134c4 <tcp_eff_send_mss_netif>
 80143ac:	4603      	mov	r3, r0
 80143ae:	461a      	mov	r2, r3
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80143b8:	009a      	lsls	r2, r3, #2
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80143be:	005b      	lsls	r3, r3, #1
 80143c0:	f241 111c 	movw	r1, #4380	; 0x111c
 80143c4:	428b      	cmp	r3, r1
 80143c6:	bf38      	it	cc
 80143c8:	460b      	movcc	r3, r1
 80143ca:	429a      	cmp	r2, r3
 80143cc:	d204      	bcs.n	80143d8 <tcp_process+0x210>
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80143d2:	009b      	lsls	r3, r3, #2
 80143d4:	b29b      	uxth	r3, r3
 80143d6:	e00d      	b.n	80143f4 <tcp_process+0x22c>
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80143dc:	005b      	lsls	r3, r3, #1
 80143de:	f241 121c 	movw	r2, #4380	; 0x111c
 80143e2:	4293      	cmp	r3, r2
 80143e4:	d904      	bls.n	80143f0 <tcp_process+0x228>
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80143ea:	005b      	lsls	r3, r3, #1
 80143ec:	b29b      	uxth	r3, r3
 80143ee:	e001      	b.n	80143f4 <tcp_process+0x22c>
 80143f0:	f241 131c 	movw	r3, #4380	; 0x111c
 80143f4:	687a      	ldr	r2, [r7, #4]
 80143f6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014400:	2b00      	cmp	r3, #0
 8014402:	d106      	bne.n	8014412 <tcp_process+0x24a>
 8014404:	4b13      	ldr	r3, [pc, #76]	; (8014454 <tcp_process+0x28c>)
 8014406:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801440a:	491c      	ldr	r1, [pc, #112]	; (801447c <tcp_process+0x2b4>)
 801440c:	4813      	ldr	r0, [pc, #76]	; (801445c <tcp_process+0x294>)
 801440e:	f006 fc71 	bl	801acf4 <iprintf>
        --pcb->snd_queuelen;
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014418:	3b01      	subs	r3, #1
 801441a:	b29a      	uxth	r2, r3
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014426:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014428:	69fb      	ldr	r3, [r7, #28]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d12a      	bne.n	8014484 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014432:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8014434:	69fb      	ldr	r3, [r7, #28]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d106      	bne.n	8014448 <tcp_process+0x280>
 801443a:	4b06      	ldr	r3, [pc, #24]	; (8014454 <tcp_process+0x28c>)
 801443c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8014440:	490f      	ldr	r1, [pc, #60]	; (8014480 <tcp_process+0x2b8>)
 8014442:	4806      	ldr	r0, [pc, #24]	; (801445c <tcp_process+0x294>)
 8014444:	f006 fc56 	bl	801acf4 <iprintf>
          pcb->unsent = rseg->next;
 8014448:	69fb      	ldr	r3, [r7, #28]
 801444a:	681a      	ldr	r2, [r3, #0]
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	66da      	str	r2, [r3, #108]	; 0x6c
 8014450:	e01c      	b.n	801448c <tcp_process+0x2c4>
 8014452:	bf00      	nop
 8014454:	0801e178 	.word	0x0801e178
 8014458:	0801e3b0 	.word	0x0801e3b0
 801445c:	0801e1c4 	.word	0x0801e1c4
 8014460:	200110cc 	.word	0x200110cc
 8014464:	200110c4 	.word	0x200110c4
 8014468:	200110c0 	.word	0x200110c0
 801446c:	0801e3cc 	.word	0x0801e3cc
 8014470:	200110cd 	.word	0x200110cd
 8014474:	20011088 	.word	0x20011088
 8014478:	200110b0 	.word	0x200110b0
 801447c:	0801e3ec 	.word	0x0801e3ec
 8014480:	0801e404 	.word	0x0801e404
        } else {
          pcb->unacked = rseg->next;
 8014484:	69fb      	ldr	r3, [r7, #28]
 8014486:	681a      	ldr	r2, [r3, #0]
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801448c:	69f8      	ldr	r0, [r7, #28]
 801448e:	f7fe fc54 	bl	8012d3a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014496:	2b00      	cmp	r3, #0
 8014498:	d104      	bne.n	80144a4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80144a0:	861a      	strh	r2, [r3, #48]	; 0x30
 80144a2:	e006      	b.n	80144b2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	2200      	movs	r2, #0
 80144a8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	2200      	movs	r2, #0
 80144ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d00a      	beq.n	80144d2 <tcp_process+0x30a>
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80144c2:	687a      	ldr	r2, [r7, #4]
 80144c4:	6910      	ldr	r0, [r2, #16]
 80144c6:	2200      	movs	r2, #0
 80144c8:	6879      	ldr	r1, [r7, #4]
 80144ca:	4798      	blx	r3
 80144cc:	4603      	mov	r3, r0
 80144ce:	76bb      	strb	r3, [r7, #26]
 80144d0:	e001      	b.n	80144d6 <tcp_process+0x30e>
 80144d2:	2300      	movs	r3, #0
 80144d4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80144d6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80144da:	f113 0f0d 	cmn.w	r3, #13
 80144de:	d102      	bne.n	80144e6 <tcp_process+0x31e>
          return ERR_ABRT;
 80144e0:	f06f 030c 	mvn.w	r3, #12
 80144e4:	e250      	b.n	8014988 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	8b5b      	ldrh	r3, [r3, #26]
 80144ea:	f043 0302 	orr.w	r3, r3, #2
 80144ee:	b29a      	uxth	r2, r3
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80144f4:	e23a      	b.n	801496c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80144f6:	4b98      	ldr	r3, [pc, #608]	; (8014758 <tcp_process+0x590>)
 80144f8:	781b      	ldrb	r3, [r3, #0]
 80144fa:	f003 0310 	and.w	r3, r3, #16
 80144fe:	2b00      	cmp	r3, #0
 8014500:	f000 8234 	beq.w	801496c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014504:	4b95      	ldr	r3, [pc, #596]	; (801475c <tcp_process+0x594>)
 8014506:	6819      	ldr	r1, [r3, #0]
 8014508:	4b95      	ldr	r3, [pc, #596]	; (8014760 <tcp_process+0x598>)
 801450a:	881b      	ldrh	r3, [r3, #0]
 801450c:	461a      	mov	r2, r3
 801450e:	4b95      	ldr	r3, [pc, #596]	; (8014764 <tcp_process+0x59c>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014514:	4b94      	ldr	r3, [pc, #592]	; (8014768 <tcp_process+0x5a0>)
 8014516:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014518:	885b      	ldrh	r3, [r3, #2]
 801451a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801451c:	4a92      	ldr	r2, [pc, #584]	; (8014768 <tcp_process+0x5a0>)
 801451e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014520:	8812      	ldrh	r2, [r2, #0]
 8014522:	b292      	uxth	r2, r2
 8014524:	9202      	str	r2, [sp, #8]
 8014526:	9301      	str	r3, [sp, #4]
 8014528:	4b90      	ldr	r3, [pc, #576]	; (801476c <tcp_process+0x5a4>)
 801452a:	9300      	str	r3, [sp, #0]
 801452c:	4b90      	ldr	r3, [pc, #576]	; (8014770 <tcp_process+0x5a8>)
 801452e:	4602      	mov	r2, r0
 8014530:	6878      	ldr	r0, [r7, #4]
 8014532:	f003 f8dd 	bl	80176f0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801453c:	2b05      	cmp	r3, #5
 801453e:	f200 8215 	bhi.w	801496c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	2200      	movs	r2, #0
 8014546:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8014548:	6878      	ldr	r0, [r7, #4]
 801454a:	f002 fea7 	bl	801729c <tcp_rexmit_rto>
      break;
 801454e:	e20d      	b.n	801496c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8014550:	4b81      	ldr	r3, [pc, #516]	; (8014758 <tcp_process+0x590>)
 8014552:	781b      	ldrb	r3, [r3, #0]
 8014554:	f003 0310 	and.w	r3, r3, #16
 8014558:	2b00      	cmp	r3, #0
 801455a:	f000 80a1 	beq.w	80146a0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801455e:	4b7f      	ldr	r3, [pc, #508]	; (801475c <tcp_process+0x594>)
 8014560:	681a      	ldr	r2, [r3, #0]
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014566:	1ad3      	subs	r3, r2, r3
 8014568:	3b01      	subs	r3, #1
 801456a:	2b00      	cmp	r3, #0
 801456c:	db7e      	blt.n	801466c <tcp_process+0x4a4>
 801456e:	4b7b      	ldr	r3, [pc, #492]	; (801475c <tcp_process+0x594>)
 8014570:	681a      	ldr	r2, [r3, #0]
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014576:	1ad3      	subs	r3, r2, r3
 8014578:	2b00      	cmp	r3, #0
 801457a:	dc77      	bgt.n	801466c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	2204      	movs	r2, #4
 8014580:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014586:	2b00      	cmp	r3, #0
 8014588:	d102      	bne.n	8014590 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801458a:	23fa      	movs	r3, #250	; 0xfa
 801458c:	76bb      	strb	r3, [r7, #26]
 801458e:	e01d      	b.n	80145cc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014594:	699b      	ldr	r3, [r3, #24]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d106      	bne.n	80145a8 <tcp_process+0x3e0>
 801459a:	4b76      	ldr	r3, [pc, #472]	; (8014774 <tcp_process+0x5ac>)
 801459c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80145a0:	4975      	ldr	r1, [pc, #468]	; (8014778 <tcp_process+0x5b0>)
 80145a2:	4876      	ldr	r0, [pc, #472]	; (801477c <tcp_process+0x5b4>)
 80145a4:	f006 fba6 	bl	801acf4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80145ac:	699b      	ldr	r3, [r3, #24]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d00a      	beq.n	80145c8 <tcp_process+0x400>
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80145b6:	699b      	ldr	r3, [r3, #24]
 80145b8:	687a      	ldr	r2, [r7, #4]
 80145ba:	6910      	ldr	r0, [r2, #16]
 80145bc:	2200      	movs	r2, #0
 80145be:	6879      	ldr	r1, [r7, #4]
 80145c0:	4798      	blx	r3
 80145c2:	4603      	mov	r3, r0
 80145c4:	76bb      	strb	r3, [r7, #26]
 80145c6:	e001      	b.n	80145cc <tcp_process+0x404>
 80145c8:	23f0      	movs	r3, #240	; 0xf0
 80145ca:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80145cc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d00a      	beq.n	80145ea <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80145d4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80145d8:	f113 0f0d 	cmn.w	r3, #13
 80145dc:	d002      	beq.n	80145e4 <tcp_process+0x41c>
              tcp_abort(pcb);
 80145de:	6878      	ldr	r0, [r7, #4]
 80145e0:	f7fd fde2 	bl	80121a8 <tcp_abort>
            }
            return ERR_ABRT;
 80145e4:	f06f 030c 	mvn.w	r3, #12
 80145e8:	e1ce      	b.n	8014988 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80145ea:	6878      	ldr	r0, [r7, #4]
 80145ec:	f000 fae0 	bl	8014bb0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80145f0:	4b63      	ldr	r3, [pc, #396]	; (8014780 <tcp_process+0x5b8>)
 80145f2:	881b      	ldrh	r3, [r3, #0]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d005      	beq.n	8014604 <tcp_process+0x43c>
            recv_acked--;
 80145f8:	4b61      	ldr	r3, [pc, #388]	; (8014780 <tcp_process+0x5b8>)
 80145fa:	881b      	ldrh	r3, [r3, #0]
 80145fc:	3b01      	subs	r3, #1
 80145fe:	b29a      	uxth	r2, r3
 8014600:	4b5f      	ldr	r3, [pc, #380]	; (8014780 <tcp_process+0x5b8>)
 8014602:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014608:	009a      	lsls	r2, r3, #2
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801460e:	005b      	lsls	r3, r3, #1
 8014610:	f241 111c 	movw	r1, #4380	; 0x111c
 8014614:	428b      	cmp	r3, r1
 8014616:	bf38      	it	cc
 8014618:	460b      	movcc	r3, r1
 801461a:	429a      	cmp	r2, r3
 801461c:	d204      	bcs.n	8014628 <tcp_process+0x460>
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014622:	009b      	lsls	r3, r3, #2
 8014624:	b29b      	uxth	r3, r3
 8014626:	e00d      	b.n	8014644 <tcp_process+0x47c>
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801462c:	005b      	lsls	r3, r3, #1
 801462e:	f241 121c 	movw	r2, #4380	; 0x111c
 8014632:	4293      	cmp	r3, r2
 8014634:	d904      	bls.n	8014640 <tcp_process+0x478>
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801463a:	005b      	lsls	r3, r3, #1
 801463c:	b29b      	uxth	r3, r3
 801463e:	e001      	b.n	8014644 <tcp_process+0x47c>
 8014640:	f241 131c 	movw	r3, #4380	; 0x111c
 8014644:	687a      	ldr	r2, [r7, #4]
 8014646:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801464a:	4b4e      	ldr	r3, [pc, #312]	; (8014784 <tcp_process+0x5bc>)
 801464c:	781b      	ldrb	r3, [r3, #0]
 801464e:	f003 0320 	and.w	r3, r3, #32
 8014652:	2b00      	cmp	r3, #0
 8014654:	d037      	beq.n	80146c6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	8b5b      	ldrh	r3, [r3, #26]
 801465a:	f043 0302 	orr.w	r3, r3, #2
 801465e:	b29a      	uxth	r2, r3
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	2207      	movs	r2, #7
 8014668:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801466a:	e02c      	b.n	80146c6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801466c:	4b3b      	ldr	r3, [pc, #236]	; (801475c <tcp_process+0x594>)
 801466e:	6819      	ldr	r1, [r3, #0]
 8014670:	4b3b      	ldr	r3, [pc, #236]	; (8014760 <tcp_process+0x598>)
 8014672:	881b      	ldrh	r3, [r3, #0]
 8014674:	461a      	mov	r2, r3
 8014676:	4b3b      	ldr	r3, [pc, #236]	; (8014764 <tcp_process+0x59c>)
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801467c:	4b3a      	ldr	r3, [pc, #232]	; (8014768 <tcp_process+0x5a0>)
 801467e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014680:	885b      	ldrh	r3, [r3, #2]
 8014682:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014684:	4a38      	ldr	r2, [pc, #224]	; (8014768 <tcp_process+0x5a0>)
 8014686:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014688:	8812      	ldrh	r2, [r2, #0]
 801468a:	b292      	uxth	r2, r2
 801468c:	9202      	str	r2, [sp, #8]
 801468e:	9301      	str	r3, [sp, #4]
 8014690:	4b36      	ldr	r3, [pc, #216]	; (801476c <tcp_process+0x5a4>)
 8014692:	9300      	str	r3, [sp, #0]
 8014694:	4b36      	ldr	r3, [pc, #216]	; (8014770 <tcp_process+0x5a8>)
 8014696:	4602      	mov	r2, r0
 8014698:	6878      	ldr	r0, [r7, #4]
 801469a:	f003 f829 	bl	80176f0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801469e:	e167      	b.n	8014970 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80146a0:	4b2d      	ldr	r3, [pc, #180]	; (8014758 <tcp_process+0x590>)
 80146a2:	781b      	ldrb	r3, [r3, #0]
 80146a4:	f003 0302 	and.w	r3, r3, #2
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	f000 8161 	beq.w	8014970 <tcp_process+0x7a8>
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146b2:	1e5a      	subs	r2, r3, #1
 80146b4:	4b2b      	ldr	r3, [pc, #172]	; (8014764 <tcp_process+0x59c>)
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	429a      	cmp	r2, r3
 80146ba:	f040 8159 	bne.w	8014970 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80146be:	6878      	ldr	r0, [r7, #4]
 80146c0:	f002 fe0e 	bl	80172e0 <tcp_rexmit>
      break;
 80146c4:	e154      	b.n	8014970 <tcp_process+0x7a8>
 80146c6:	e153      	b.n	8014970 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80146c8:	6878      	ldr	r0, [r7, #4]
 80146ca:	f000 fa71 	bl	8014bb0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80146ce:	4b2d      	ldr	r3, [pc, #180]	; (8014784 <tcp_process+0x5bc>)
 80146d0:	781b      	ldrb	r3, [r3, #0]
 80146d2:	f003 0320 	and.w	r3, r3, #32
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	f000 814c 	beq.w	8014974 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	8b5b      	ldrh	r3, [r3, #26]
 80146e0:	f043 0302 	orr.w	r3, r3, #2
 80146e4:	b29a      	uxth	r2, r3
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	2207      	movs	r2, #7
 80146ee:	751a      	strb	r2, [r3, #20]
      }
      break;
 80146f0:	e140      	b.n	8014974 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80146f2:	6878      	ldr	r0, [r7, #4]
 80146f4:	f000 fa5c 	bl	8014bb0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80146f8:	4b22      	ldr	r3, [pc, #136]	; (8014784 <tcp_process+0x5bc>)
 80146fa:	781b      	ldrb	r3, [r3, #0]
 80146fc:	f003 0320 	and.w	r3, r3, #32
 8014700:	2b00      	cmp	r3, #0
 8014702:	d071      	beq.n	80147e8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014704:	4b14      	ldr	r3, [pc, #80]	; (8014758 <tcp_process+0x590>)
 8014706:	781b      	ldrb	r3, [r3, #0]
 8014708:	f003 0310 	and.w	r3, r3, #16
 801470c:	2b00      	cmp	r3, #0
 801470e:	d060      	beq.n	80147d2 <tcp_process+0x60a>
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014714:	4b11      	ldr	r3, [pc, #68]	; (801475c <tcp_process+0x594>)
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	429a      	cmp	r2, r3
 801471a:	d15a      	bne.n	80147d2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014720:	2b00      	cmp	r3, #0
 8014722:	d156      	bne.n	80147d2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	8b5b      	ldrh	r3, [r3, #26]
 8014728:	f043 0302 	orr.w	r3, r3, #2
 801472c:	b29a      	uxth	r2, r3
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8014732:	6878      	ldr	r0, [r7, #4]
 8014734:	f7fe fdbc 	bl	80132b0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8014738:	4b13      	ldr	r3, [pc, #76]	; (8014788 <tcp_process+0x5c0>)
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	687a      	ldr	r2, [r7, #4]
 801473e:	429a      	cmp	r2, r3
 8014740:	d105      	bne.n	801474e <tcp_process+0x586>
 8014742:	4b11      	ldr	r3, [pc, #68]	; (8014788 <tcp_process+0x5c0>)
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	68db      	ldr	r3, [r3, #12]
 8014748:	4a0f      	ldr	r2, [pc, #60]	; (8014788 <tcp_process+0x5c0>)
 801474a:	6013      	str	r3, [r2, #0]
 801474c:	e02e      	b.n	80147ac <tcp_process+0x5e4>
 801474e:	4b0e      	ldr	r3, [pc, #56]	; (8014788 <tcp_process+0x5c0>)
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	617b      	str	r3, [r7, #20]
 8014754:	e027      	b.n	80147a6 <tcp_process+0x5de>
 8014756:	bf00      	nop
 8014758:	200110cc 	.word	0x200110cc
 801475c:	200110c4 	.word	0x200110c4
 8014760:	200110ca 	.word	0x200110ca
 8014764:	200110c0 	.word	0x200110c0
 8014768:	200110b0 	.word	0x200110b0
 801476c:	2000d944 	.word	0x2000d944
 8014770:	2000d948 	.word	0x2000d948
 8014774:	0801e178 	.word	0x0801e178
 8014778:	0801e418 	.word	0x0801e418
 801477c:	0801e1c4 	.word	0x0801e1c4
 8014780:	200110c8 	.word	0x200110c8
 8014784:	200110cd 	.word	0x200110cd
 8014788:	20011094 	.word	0x20011094
 801478c:	697b      	ldr	r3, [r7, #20]
 801478e:	68db      	ldr	r3, [r3, #12]
 8014790:	687a      	ldr	r2, [r7, #4]
 8014792:	429a      	cmp	r2, r3
 8014794:	d104      	bne.n	80147a0 <tcp_process+0x5d8>
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	68da      	ldr	r2, [r3, #12]
 801479a:	697b      	ldr	r3, [r7, #20]
 801479c:	60da      	str	r2, [r3, #12]
 801479e:	e005      	b.n	80147ac <tcp_process+0x5e4>
 80147a0:	697b      	ldr	r3, [r7, #20]
 80147a2:	68db      	ldr	r3, [r3, #12]
 80147a4:	617b      	str	r3, [r7, #20]
 80147a6:	697b      	ldr	r3, [r7, #20]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d1ef      	bne.n	801478c <tcp_process+0x5c4>
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	2200      	movs	r2, #0
 80147b0:	60da      	str	r2, [r3, #12]
 80147b2:	4b77      	ldr	r3, [pc, #476]	; (8014990 <tcp_process+0x7c8>)
 80147b4:	2201      	movs	r2, #1
 80147b6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	220a      	movs	r2, #10
 80147bc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80147be:	4b75      	ldr	r3, [pc, #468]	; (8014994 <tcp_process+0x7cc>)
 80147c0:	681a      	ldr	r2, [r3, #0]
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	60da      	str	r2, [r3, #12]
 80147c6:	4a73      	ldr	r2, [pc, #460]	; (8014994 <tcp_process+0x7cc>)
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	6013      	str	r3, [r2, #0]
 80147cc:	f003 f952 	bl	8017a74 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80147d0:	e0d2      	b.n	8014978 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	8b5b      	ldrh	r3, [r3, #26]
 80147d6:	f043 0302 	orr.w	r3, r3, #2
 80147da:	b29a      	uxth	r2, r3
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	2208      	movs	r2, #8
 80147e4:	751a      	strb	r2, [r3, #20]
      break;
 80147e6:	e0c7      	b.n	8014978 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80147e8:	4b6b      	ldr	r3, [pc, #428]	; (8014998 <tcp_process+0x7d0>)
 80147ea:	781b      	ldrb	r3, [r3, #0]
 80147ec:	f003 0310 	and.w	r3, r3, #16
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	f000 80c1 	beq.w	8014978 <tcp_process+0x7b0>
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80147fa:	4b68      	ldr	r3, [pc, #416]	; (801499c <tcp_process+0x7d4>)
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	429a      	cmp	r2, r3
 8014800:	f040 80ba 	bne.w	8014978 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014808:	2b00      	cmp	r3, #0
 801480a:	f040 80b5 	bne.w	8014978 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	2206      	movs	r2, #6
 8014812:	751a      	strb	r2, [r3, #20]
      break;
 8014814:	e0b0      	b.n	8014978 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8014816:	6878      	ldr	r0, [r7, #4]
 8014818:	f000 f9ca 	bl	8014bb0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801481c:	4b60      	ldr	r3, [pc, #384]	; (80149a0 <tcp_process+0x7d8>)
 801481e:	781b      	ldrb	r3, [r3, #0]
 8014820:	f003 0320 	and.w	r3, r3, #32
 8014824:	2b00      	cmp	r3, #0
 8014826:	f000 80a9 	beq.w	801497c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	8b5b      	ldrh	r3, [r3, #26]
 801482e:	f043 0302 	orr.w	r3, r3, #2
 8014832:	b29a      	uxth	r2, r3
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8014838:	6878      	ldr	r0, [r7, #4]
 801483a:	f7fe fd39 	bl	80132b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801483e:	4b59      	ldr	r3, [pc, #356]	; (80149a4 <tcp_process+0x7dc>)
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	687a      	ldr	r2, [r7, #4]
 8014844:	429a      	cmp	r2, r3
 8014846:	d105      	bne.n	8014854 <tcp_process+0x68c>
 8014848:	4b56      	ldr	r3, [pc, #344]	; (80149a4 <tcp_process+0x7dc>)
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	68db      	ldr	r3, [r3, #12]
 801484e:	4a55      	ldr	r2, [pc, #340]	; (80149a4 <tcp_process+0x7dc>)
 8014850:	6013      	str	r3, [r2, #0]
 8014852:	e013      	b.n	801487c <tcp_process+0x6b4>
 8014854:	4b53      	ldr	r3, [pc, #332]	; (80149a4 <tcp_process+0x7dc>)
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	613b      	str	r3, [r7, #16]
 801485a:	e00c      	b.n	8014876 <tcp_process+0x6ae>
 801485c:	693b      	ldr	r3, [r7, #16]
 801485e:	68db      	ldr	r3, [r3, #12]
 8014860:	687a      	ldr	r2, [r7, #4]
 8014862:	429a      	cmp	r2, r3
 8014864:	d104      	bne.n	8014870 <tcp_process+0x6a8>
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	68da      	ldr	r2, [r3, #12]
 801486a:	693b      	ldr	r3, [r7, #16]
 801486c:	60da      	str	r2, [r3, #12]
 801486e:	e005      	b.n	801487c <tcp_process+0x6b4>
 8014870:	693b      	ldr	r3, [r7, #16]
 8014872:	68db      	ldr	r3, [r3, #12]
 8014874:	613b      	str	r3, [r7, #16]
 8014876:	693b      	ldr	r3, [r7, #16]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d1ef      	bne.n	801485c <tcp_process+0x694>
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	2200      	movs	r2, #0
 8014880:	60da      	str	r2, [r3, #12]
 8014882:	4b43      	ldr	r3, [pc, #268]	; (8014990 <tcp_process+0x7c8>)
 8014884:	2201      	movs	r2, #1
 8014886:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	220a      	movs	r2, #10
 801488c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801488e:	4b41      	ldr	r3, [pc, #260]	; (8014994 <tcp_process+0x7cc>)
 8014890:	681a      	ldr	r2, [r3, #0]
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	60da      	str	r2, [r3, #12]
 8014896:	4a3f      	ldr	r2, [pc, #252]	; (8014994 <tcp_process+0x7cc>)
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	6013      	str	r3, [r2, #0]
 801489c:	f003 f8ea 	bl	8017a74 <tcp_timer_needed>
      }
      break;
 80148a0:	e06c      	b.n	801497c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80148a2:	6878      	ldr	r0, [r7, #4]
 80148a4:	f000 f984 	bl	8014bb0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80148a8:	4b3b      	ldr	r3, [pc, #236]	; (8014998 <tcp_process+0x7d0>)
 80148aa:	781b      	ldrb	r3, [r3, #0]
 80148ac:	f003 0310 	and.w	r3, r3, #16
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d065      	beq.n	8014980 <tcp_process+0x7b8>
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80148b8:	4b38      	ldr	r3, [pc, #224]	; (801499c <tcp_process+0x7d4>)
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	429a      	cmp	r2, r3
 80148be:	d15f      	bne.n	8014980 <tcp_process+0x7b8>
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d15b      	bne.n	8014980 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80148c8:	6878      	ldr	r0, [r7, #4]
 80148ca:	f7fe fcf1 	bl	80132b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80148ce:	4b35      	ldr	r3, [pc, #212]	; (80149a4 <tcp_process+0x7dc>)
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	687a      	ldr	r2, [r7, #4]
 80148d4:	429a      	cmp	r2, r3
 80148d6:	d105      	bne.n	80148e4 <tcp_process+0x71c>
 80148d8:	4b32      	ldr	r3, [pc, #200]	; (80149a4 <tcp_process+0x7dc>)
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	68db      	ldr	r3, [r3, #12]
 80148de:	4a31      	ldr	r2, [pc, #196]	; (80149a4 <tcp_process+0x7dc>)
 80148e0:	6013      	str	r3, [r2, #0]
 80148e2:	e013      	b.n	801490c <tcp_process+0x744>
 80148e4:	4b2f      	ldr	r3, [pc, #188]	; (80149a4 <tcp_process+0x7dc>)
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	60fb      	str	r3, [r7, #12]
 80148ea:	e00c      	b.n	8014906 <tcp_process+0x73e>
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	68db      	ldr	r3, [r3, #12]
 80148f0:	687a      	ldr	r2, [r7, #4]
 80148f2:	429a      	cmp	r2, r3
 80148f4:	d104      	bne.n	8014900 <tcp_process+0x738>
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	68da      	ldr	r2, [r3, #12]
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	60da      	str	r2, [r3, #12]
 80148fe:	e005      	b.n	801490c <tcp_process+0x744>
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	68db      	ldr	r3, [r3, #12]
 8014904:	60fb      	str	r3, [r7, #12]
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d1ef      	bne.n	80148ec <tcp_process+0x724>
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	2200      	movs	r2, #0
 8014910:	60da      	str	r2, [r3, #12]
 8014912:	4b1f      	ldr	r3, [pc, #124]	; (8014990 <tcp_process+0x7c8>)
 8014914:	2201      	movs	r2, #1
 8014916:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	220a      	movs	r2, #10
 801491c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801491e:	4b1d      	ldr	r3, [pc, #116]	; (8014994 <tcp_process+0x7cc>)
 8014920:	681a      	ldr	r2, [r3, #0]
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	60da      	str	r2, [r3, #12]
 8014926:	4a1b      	ldr	r2, [pc, #108]	; (8014994 <tcp_process+0x7cc>)
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	6013      	str	r3, [r2, #0]
 801492c:	f003 f8a2 	bl	8017a74 <tcp_timer_needed>
      }
      break;
 8014930:	e026      	b.n	8014980 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8014932:	6878      	ldr	r0, [r7, #4]
 8014934:	f000 f93c 	bl	8014bb0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014938:	4b17      	ldr	r3, [pc, #92]	; (8014998 <tcp_process+0x7d0>)
 801493a:	781b      	ldrb	r3, [r3, #0]
 801493c:	f003 0310 	and.w	r3, r3, #16
 8014940:	2b00      	cmp	r3, #0
 8014942:	d01f      	beq.n	8014984 <tcp_process+0x7bc>
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014948:	4b14      	ldr	r3, [pc, #80]	; (801499c <tcp_process+0x7d4>)
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	429a      	cmp	r2, r3
 801494e:	d119      	bne.n	8014984 <tcp_process+0x7bc>
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014954:	2b00      	cmp	r3, #0
 8014956:	d115      	bne.n	8014984 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8014958:	4b11      	ldr	r3, [pc, #68]	; (80149a0 <tcp_process+0x7d8>)
 801495a:	781b      	ldrb	r3, [r3, #0]
 801495c:	f043 0310 	orr.w	r3, r3, #16
 8014960:	b2da      	uxtb	r2, r3
 8014962:	4b0f      	ldr	r3, [pc, #60]	; (80149a0 <tcp_process+0x7d8>)
 8014964:	701a      	strb	r2, [r3, #0]
      }
      break;
 8014966:	e00d      	b.n	8014984 <tcp_process+0x7bc>
    default:
      break;
 8014968:	bf00      	nop
 801496a:	e00c      	b.n	8014986 <tcp_process+0x7be>
      break;
 801496c:	bf00      	nop
 801496e:	e00a      	b.n	8014986 <tcp_process+0x7be>
      break;
 8014970:	bf00      	nop
 8014972:	e008      	b.n	8014986 <tcp_process+0x7be>
      break;
 8014974:	bf00      	nop
 8014976:	e006      	b.n	8014986 <tcp_process+0x7be>
      break;
 8014978:	bf00      	nop
 801497a:	e004      	b.n	8014986 <tcp_process+0x7be>
      break;
 801497c:	bf00      	nop
 801497e:	e002      	b.n	8014986 <tcp_process+0x7be>
      break;
 8014980:	bf00      	nop
 8014982:	e000      	b.n	8014986 <tcp_process+0x7be>
      break;
 8014984:	bf00      	nop
  }
  return ERR_OK;
 8014986:	2300      	movs	r3, #0
}
 8014988:	4618      	mov	r0, r3
 801498a:	3724      	adds	r7, #36	; 0x24
 801498c:	46bd      	mov	sp, r7
 801498e:	bd90      	pop	{r4, r7, pc}
 8014990:	2001109c 	.word	0x2001109c
 8014994:	20011098 	.word	0x20011098
 8014998:	200110cc 	.word	0x200110cc
 801499c:	200110c4 	.word	0x200110c4
 80149a0:	200110cd 	.word	0x200110cd
 80149a4:	20011094 	.word	0x20011094

080149a8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80149a8:	b590      	push	{r4, r7, lr}
 80149aa:	b085      	sub	sp, #20
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
 80149b0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d106      	bne.n	80149c6 <tcp_oos_insert_segment+0x1e>
 80149b8:	4b3b      	ldr	r3, [pc, #236]	; (8014aa8 <tcp_oos_insert_segment+0x100>)
 80149ba:	f240 421f 	movw	r2, #1055	; 0x41f
 80149be:	493b      	ldr	r1, [pc, #236]	; (8014aac <tcp_oos_insert_segment+0x104>)
 80149c0:	483b      	ldr	r0, [pc, #236]	; (8014ab0 <tcp_oos_insert_segment+0x108>)
 80149c2:	f006 f997 	bl	801acf4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	68db      	ldr	r3, [r3, #12]
 80149ca:	899b      	ldrh	r3, [r3, #12]
 80149cc:	b29b      	uxth	r3, r3
 80149ce:	4618      	mov	r0, r3
 80149d0:	f7fb f9d6 	bl	800fd80 <lwip_htons>
 80149d4:	4603      	mov	r3, r0
 80149d6:	b2db      	uxtb	r3, r3
 80149d8:	f003 0301 	and.w	r3, r3, #1
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d028      	beq.n	8014a32 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80149e0:	6838      	ldr	r0, [r7, #0]
 80149e2:	f7fe f995 	bl	8012d10 <tcp_segs_free>
    next = NULL;
 80149e6:	2300      	movs	r3, #0
 80149e8:	603b      	str	r3, [r7, #0]
 80149ea:	e056      	b.n	8014a9a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80149ec:	683b      	ldr	r3, [r7, #0]
 80149ee:	68db      	ldr	r3, [r3, #12]
 80149f0:	899b      	ldrh	r3, [r3, #12]
 80149f2:	b29b      	uxth	r3, r3
 80149f4:	4618      	mov	r0, r3
 80149f6:	f7fb f9c3 	bl	800fd80 <lwip_htons>
 80149fa:	4603      	mov	r3, r0
 80149fc:	b2db      	uxtb	r3, r3
 80149fe:	f003 0301 	and.w	r3, r3, #1
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d00d      	beq.n	8014a22 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	68db      	ldr	r3, [r3, #12]
 8014a0a:	899b      	ldrh	r3, [r3, #12]
 8014a0c:	b29c      	uxth	r4, r3
 8014a0e:	2001      	movs	r0, #1
 8014a10:	f7fb f9b6 	bl	800fd80 <lwip_htons>
 8014a14:	4603      	mov	r3, r0
 8014a16:	461a      	mov	r2, r3
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	68db      	ldr	r3, [r3, #12]
 8014a1c:	4322      	orrs	r2, r4
 8014a1e:	b292      	uxth	r2, r2
 8014a20:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8014a22:	683b      	ldr	r3, [r7, #0]
 8014a24:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8014a26:	683b      	ldr	r3, [r7, #0]
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014a2c:	68f8      	ldr	r0, [r7, #12]
 8014a2e:	f7fe f984 	bl	8012d3a <tcp_seg_free>
    while (next &&
 8014a32:	683b      	ldr	r3, [r7, #0]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d00e      	beq.n	8014a56 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	891b      	ldrh	r3, [r3, #8]
 8014a3c:	461a      	mov	r2, r3
 8014a3e:	4b1d      	ldr	r3, [pc, #116]	; (8014ab4 <tcp_oos_insert_segment+0x10c>)
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	441a      	add	r2, r3
 8014a44:	683b      	ldr	r3, [r7, #0]
 8014a46:	68db      	ldr	r3, [r3, #12]
 8014a48:	685b      	ldr	r3, [r3, #4]
 8014a4a:	6839      	ldr	r1, [r7, #0]
 8014a4c:	8909      	ldrh	r1, [r1, #8]
 8014a4e:	440b      	add	r3, r1
 8014a50:	1ad3      	subs	r3, r2, r3
    while (next &&
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	daca      	bge.n	80149ec <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8014a56:	683b      	ldr	r3, [r7, #0]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d01e      	beq.n	8014a9a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	891b      	ldrh	r3, [r3, #8]
 8014a60:	461a      	mov	r2, r3
 8014a62:	4b14      	ldr	r3, [pc, #80]	; (8014ab4 <tcp_oos_insert_segment+0x10c>)
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	441a      	add	r2, r3
 8014a68:	683b      	ldr	r3, [r7, #0]
 8014a6a:	68db      	ldr	r3, [r3, #12]
 8014a6c:	685b      	ldr	r3, [r3, #4]
 8014a6e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	dd12      	ble.n	8014a9a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014a74:	683b      	ldr	r3, [r7, #0]
 8014a76:	68db      	ldr	r3, [r3, #12]
 8014a78:	685b      	ldr	r3, [r3, #4]
 8014a7a:	b29a      	uxth	r2, r3
 8014a7c:	4b0d      	ldr	r3, [pc, #52]	; (8014ab4 <tcp_oos_insert_segment+0x10c>)
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	b29b      	uxth	r3, r3
 8014a82:	1ad3      	subs	r3, r2, r3
 8014a84:	b29a      	uxth	r2, r3
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	685a      	ldr	r2, [r3, #4]
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	891b      	ldrh	r3, [r3, #8]
 8014a92:	4619      	mov	r1, r3
 8014a94:	4610      	mov	r0, r2
 8014a96:	f7fc fbdf 	bl	8011258 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	683a      	ldr	r2, [r7, #0]
 8014a9e:	601a      	str	r2, [r3, #0]
}
 8014aa0:	bf00      	nop
 8014aa2:	3714      	adds	r7, #20
 8014aa4:	46bd      	mov	sp, r7
 8014aa6:	bd90      	pop	{r4, r7, pc}
 8014aa8:	0801e178 	.word	0x0801e178
 8014aac:	0801e438 	.word	0x0801e438
 8014ab0:	0801e1c4 	.word	0x0801e1c4
 8014ab4:	200110c0 	.word	0x200110c0

08014ab8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014ab8:	b5b0      	push	{r4, r5, r7, lr}
 8014aba:	b086      	sub	sp, #24
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	60f8      	str	r0, [r7, #12]
 8014ac0:	60b9      	str	r1, [r7, #8]
 8014ac2:	607a      	str	r2, [r7, #4]
 8014ac4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8014ac6:	e03e      	b.n	8014b46 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014ac8:	68bb      	ldr	r3, [r7, #8]
 8014aca:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014acc:	68bb      	ldr	r3, [r7, #8]
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8014ad2:	697b      	ldr	r3, [r7, #20]
 8014ad4:	685b      	ldr	r3, [r3, #4]
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	f7fc fe04 	bl	80116e4 <pbuf_clen>
 8014adc:	4603      	mov	r3, r0
 8014ade:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014ae6:	8a7a      	ldrh	r2, [r7, #18]
 8014ae8:	429a      	cmp	r2, r3
 8014aea:	d906      	bls.n	8014afa <tcp_free_acked_segments+0x42>
 8014aec:	4b2a      	ldr	r3, [pc, #168]	; (8014b98 <tcp_free_acked_segments+0xe0>)
 8014aee:	f240 4257 	movw	r2, #1111	; 0x457
 8014af2:	492a      	ldr	r1, [pc, #168]	; (8014b9c <tcp_free_acked_segments+0xe4>)
 8014af4:	482a      	ldr	r0, [pc, #168]	; (8014ba0 <tcp_free_acked_segments+0xe8>)
 8014af6:	f006 f8fd 	bl	801acf4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8014b00:	8a7b      	ldrh	r3, [r7, #18]
 8014b02:	1ad3      	subs	r3, r2, r3
 8014b04:	b29a      	uxth	r2, r3
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014b0c:	697b      	ldr	r3, [r7, #20]
 8014b0e:	891a      	ldrh	r2, [r3, #8]
 8014b10:	4b24      	ldr	r3, [pc, #144]	; (8014ba4 <tcp_free_acked_segments+0xec>)
 8014b12:	881b      	ldrh	r3, [r3, #0]
 8014b14:	4413      	add	r3, r2
 8014b16:	b29a      	uxth	r2, r3
 8014b18:	4b22      	ldr	r3, [pc, #136]	; (8014ba4 <tcp_free_acked_segments+0xec>)
 8014b1a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014b1c:	6978      	ldr	r0, [r7, #20]
 8014b1e:	f7fe f90c 	bl	8012d3a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d00c      	beq.n	8014b46 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014b2c:	68bb      	ldr	r3, [r7, #8]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d109      	bne.n	8014b46 <tcp_free_acked_segments+0x8e>
 8014b32:	683b      	ldr	r3, [r7, #0]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d106      	bne.n	8014b46 <tcp_free_acked_segments+0x8e>
 8014b38:	4b17      	ldr	r3, [pc, #92]	; (8014b98 <tcp_free_acked_segments+0xe0>)
 8014b3a:	f240 4261 	movw	r2, #1121	; 0x461
 8014b3e:	491a      	ldr	r1, [pc, #104]	; (8014ba8 <tcp_free_acked_segments+0xf0>)
 8014b40:	4817      	ldr	r0, [pc, #92]	; (8014ba0 <tcp_free_acked_segments+0xe8>)
 8014b42:	f006 f8d7 	bl	801acf4 <iprintf>
  while (seg_list != NULL &&
 8014b46:	68bb      	ldr	r3, [r7, #8]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d020      	beq.n	8014b8e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014b4c:	68bb      	ldr	r3, [r7, #8]
 8014b4e:	68db      	ldr	r3, [r3, #12]
 8014b50:	685b      	ldr	r3, [r3, #4]
 8014b52:	4618      	mov	r0, r3
 8014b54:	f7fb f929 	bl	800fdaa <lwip_htonl>
 8014b58:	4604      	mov	r4, r0
 8014b5a:	68bb      	ldr	r3, [r7, #8]
 8014b5c:	891b      	ldrh	r3, [r3, #8]
 8014b5e:	461d      	mov	r5, r3
 8014b60:	68bb      	ldr	r3, [r7, #8]
 8014b62:	68db      	ldr	r3, [r3, #12]
 8014b64:	899b      	ldrh	r3, [r3, #12]
 8014b66:	b29b      	uxth	r3, r3
 8014b68:	4618      	mov	r0, r3
 8014b6a:	f7fb f909 	bl	800fd80 <lwip_htons>
 8014b6e:	4603      	mov	r3, r0
 8014b70:	b2db      	uxtb	r3, r3
 8014b72:	f003 0303 	and.w	r3, r3, #3
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d001      	beq.n	8014b7e <tcp_free_acked_segments+0xc6>
 8014b7a:	2301      	movs	r3, #1
 8014b7c:	e000      	b.n	8014b80 <tcp_free_acked_segments+0xc8>
 8014b7e:	2300      	movs	r3, #0
 8014b80:	442b      	add	r3, r5
 8014b82:	18e2      	adds	r2, r4, r3
 8014b84:	4b09      	ldr	r3, [pc, #36]	; (8014bac <tcp_free_acked_segments+0xf4>)
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	dd9c      	ble.n	8014ac8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8014b8e:	68bb      	ldr	r3, [r7, #8]
}
 8014b90:	4618      	mov	r0, r3
 8014b92:	3718      	adds	r7, #24
 8014b94:	46bd      	mov	sp, r7
 8014b96:	bdb0      	pop	{r4, r5, r7, pc}
 8014b98:	0801e178 	.word	0x0801e178
 8014b9c:	0801e460 	.word	0x0801e460
 8014ba0:	0801e1c4 	.word	0x0801e1c4
 8014ba4:	200110c8 	.word	0x200110c8
 8014ba8:	0801e488 	.word	0x0801e488
 8014bac:	200110c4 	.word	0x200110c4

08014bb0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8014bb0:	b5b0      	push	{r4, r5, r7, lr}
 8014bb2:	b094      	sub	sp, #80	; 0x50
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014bb8:	2300      	movs	r3, #0
 8014bba:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d106      	bne.n	8014bd0 <tcp_receive+0x20>
 8014bc2:	4b91      	ldr	r3, [pc, #580]	; (8014e08 <tcp_receive+0x258>)
 8014bc4:	f240 427b 	movw	r2, #1147	; 0x47b
 8014bc8:	4990      	ldr	r1, [pc, #576]	; (8014e0c <tcp_receive+0x25c>)
 8014bca:	4891      	ldr	r0, [pc, #580]	; (8014e10 <tcp_receive+0x260>)
 8014bcc:	f006 f892 	bl	801acf4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	7d1b      	ldrb	r3, [r3, #20]
 8014bd4:	2b03      	cmp	r3, #3
 8014bd6:	d806      	bhi.n	8014be6 <tcp_receive+0x36>
 8014bd8:	4b8b      	ldr	r3, [pc, #556]	; (8014e08 <tcp_receive+0x258>)
 8014bda:	f240 427c 	movw	r2, #1148	; 0x47c
 8014bde:	498d      	ldr	r1, [pc, #564]	; (8014e14 <tcp_receive+0x264>)
 8014be0:	488b      	ldr	r0, [pc, #556]	; (8014e10 <tcp_receive+0x260>)
 8014be2:	f006 f887 	bl	801acf4 <iprintf>

  if (flags & TCP_ACK) {
 8014be6:	4b8c      	ldr	r3, [pc, #560]	; (8014e18 <tcp_receive+0x268>)
 8014be8:	781b      	ldrb	r3, [r3, #0]
 8014bea:	f003 0310 	and.w	r3, r3, #16
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	f000 8264 	beq.w	80150bc <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014bfa:	461a      	mov	r2, r3
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014c00:	4413      	add	r3, r2
 8014c02:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014c08:	4b84      	ldr	r3, [pc, #528]	; (8014e1c <tcp_receive+0x26c>)
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	1ad3      	subs	r3, r2, r3
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	db1b      	blt.n	8014c4a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014c16:	4b81      	ldr	r3, [pc, #516]	; (8014e1c <tcp_receive+0x26c>)
 8014c18:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014c1a:	429a      	cmp	r2, r3
 8014c1c:	d106      	bne.n	8014c2c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014c22:	4b7f      	ldr	r3, [pc, #508]	; (8014e20 <tcp_receive+0x270>)
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	1ad3      	subs	r3, r2, r3
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	db0e      	blt.n	8014c4a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014c30:	4b7b      	ldr	r3, [pc, #492]	; (8014e20 <tcp_receive+0x270>)
 8014c32:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014c34:	429a      	cmp	r2, r3
 8014c36:	d125      	bne.n	8014c84 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014c38:	4b7a      	ldr	r3, [pc, #488]	; (8014e24 <tcp_receive+0x274>)
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	89db      	ldrh	r3, [r3, #14]
 8014c3e:	b29a      	uxth	r2, r3
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014c46:	429a      	cmp	r2, r3
 8014c48:	d91c      	bls.n	8014c84 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014c4a:	4b76      	ldr	r3, [pc, #472]	; (8014e24 <tcp_receive+0x274>)
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	89db      	ldrh	r3, [r3, #14]
 8014c50:	b29a      	uxth	r2, r3
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014c64:	429a      	cmp	r2, r3
 8014c66:	d205      	bcs.n	8014c74 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8014c74:	4b69      	ldr	r3, [pc, #420]	; (8014e1c <tcp_receive+0x26c>)
 8014c76:	681a      	ldr	r2, [r3, #0]
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8014c7c:	4b68      	ldr	r3, [pc, #416]	; (8014e20 <tcp_receive+0x270>)
 8014c7e:	681a      	ldr	r2, [r3, #0]
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014c84:	4b66      	ldr	r3, [pc, #408]	; (8014e20 <tcp_receive+0x270>)
 8014c86:	681a      	ldr	r2, [r3, #0]
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014c8c:	1ad3      	subs	r3, r2, r3
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	dc58      	bgt.n	8014d44 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014c92:	4b65      	ldr	r3, [pc, #404]	; (8014e28 <tcp_receive+0x278>)
 8014c94:	881b      	ldrh	r3, [r3, #0]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d14b      	bne.n	8014d32 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014c9e:	687a      	ldr	r2, [r7, #4]
 8014ca0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8014ca4:	4413      	add	r3, r2
 8014ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014ca8:	429a      	cmp	r2, r3
 8014caa:	d142      	bne.n	8014d32 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	db3d      	blt.n	8014d32 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014cba:	4b59      	ldr	r3, [pc, #356]	; (8014e20 <tcp_receive+0x270>)
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	429a      	cmp	r2, r3
 8014cc0:	d137      	bne.n	8014d32 <tcp_receive+0x182>
              found_dupack = 1;
 8014cc2:	2301      	movs	r3, #1
 8014cc4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014ccc:	2bff      	cmp	r3, #255	; 0xff
 8014cce:	d007      	beq.n	8014ce0 <tcp_receive+0x130>
                ++pcb->dupacks;
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014cd6:	3301      	adds	r3, #1
 8014cd8:	b2da      	uxtb	r2, r3
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014ce6:	2b03      	cmp	r3, #3
 8014ce8:	d91b      	bls.n	8014d22 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014cf4:	4413      	add	r3, r2
 8014cf6:	b29a      	uxth	r2, r3
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014cfe:	429a      	cmp	r2, r3
 8014d00:	d30a      	bcc.n	8014d18 <tcp_receive+0x168>
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d0c:	4413      	add	r3, r2
 8014d0e:	b29a      	uxth	r2, r3
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014d16:	e004      	b.n	8014d22 <tcp_receive+0x172>
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014d1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014d28:	2b02      	cmp	r3, #2
 8014d2a:	d902      	bls.n	8014d32 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014d2c:	6878      	ldr	r0, [r7, #4]
 8014d2e:	f002 fb43 	bl	80173b8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	f040 8161 	bne.w	8014ffc <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014d42:	e15b      	b.n	8014ffc <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014d44:	4b36      	ldr	r3, [pc, #216]	; (8014e20 <tcp_receive+0x270>)
 8014d46:	681a      	ldr	r2, [r3, #0]
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d4c:	1ad3      	subs	r3, r2, r3
 8014d4e:	3b01      	subs	r3, #1
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	f2c0 814e 	blt.w	8014ff2 <tcp_receive+0x442>
 8014d56:	4b32      	ldr	r3, [pc, #200]	; (8014e20 <tcp_receive+0x270>)
 8014d58:	681a      	ldr	r2, [r3, #0]
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014d5e:	1ad3      	subs	r3, r2, r3
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	f300 8146 	bgt.w	8014ff2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	8b5b      	ldrh	r3, [r3, #26]
 8014d6a:	f003 0304 	and.w	r3, r3, #4
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d010      	beq.n	8014d94 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	8b5b      	ldrh	r3, [r3, #26]
 8014d76:	f023 0304 	bic.w	r3, r3, #4
 8014d7a:	b29a      	uxth	r2, r3
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	2200      	movs	r2, #0
 8014d90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	2200      	movs	r2, #0
 8014d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014da2:	10db      	asrs	r3, r3, #3
 8014da4:	b21b      	sxth	r3, r3
 8014da6:	b29a      	uxth	r2, r3
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014dae:	b29b      	uxth	r3, r3
 8014db0:	4413      	add	r3, r2
 8014db2:	b29b      	uxth	r3, r3
 8014db4:	b21a      	sxth	r2, r3
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014dbc:	4b18      	ldr	r3, [pc, #96]	; (8014e20 <tcp_receive+0x270>)
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	b29a      	uxth	r2, r3
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014dc6:	b29b      	uxth	r3, r3
 8014dc8:	1ad3      	subs	r3, r2, r3
 8014dca:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	2200      	movs	r2, #0
 8014dd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014dd4:	4b12      	ldr	r3, [pc, #72]	; (8014e20 <tcp_receive+0x270>)
 8014dd6:	681a      	ldr	r2, [r3, #0]
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	7d1b      	ldrb	r3, [r3, #20]
 8014de0:	2b03      	cmp	r3, #3
 8014de2:	f240 8097 	bls.w	8014f14 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014df2:	429a      	cmp	r2, r3
 8014df4:	d245      	bcs.n	8014e82 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	8b5b      	ldrh	r3, [r3, #26]
 8014dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d014      	beq.n	8014e2c <tcp_receive+0x27c>
 8014e02:	2301      	movs	r3, #1
 8014e04:	e013      	b.n	8014e2e <tcp_receive+0x27e>
 8014e06:	bf00      	nop
 8014e08:	0801e178 	.word	0x0801e178
 8014e0c:	0801e4a8 	.word	0x0801e4a8
 8014e10:	0801e1c4 	.word	0x0801e1c4
 8014e14:	0801e4c4 	.word	0x0801e4c4
 8014e18:	200110cc 	.word	0x200110cc
 8014e1c:	200110c0 	.word	0x200110c0
 8014e20:	200110c4 	.word	0x200110c4
 8014e24:	200110b0 	.word	0x200110b0
 8014e28:	200110ca 	.word	0x200110ca
 8014e2c:	2302      	movs	r3, #2
 8014e2e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8014e32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014e36:	b29a      	uxth	r2, r3
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014e3c:	fb12 f303 	smulbb	r3, r2, r3
 8014e40:	b29b      	uxth	r3, r3
 8014e42:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014e44:	4293      	cmp	r3, r2
 8014e46:	bf28      	it	cs
 8014e48:	4613      	movcs	r3, r2
 8014e4a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014e52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014e54:	4413      	add	r3, r2
 8014e56:	b29a      	uxth	r2, r3
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014e5e:	429a      	cmp	r2, r3
 8014e60:	d309      	bcc.n	8014e76 <tcp_receive+0x2c6>
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014e68:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014e6a:	4413      	add	r3, r2
 8014e6c:	b29a      	uxth	r2, r3
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014e74:	e04e      	b.n	8014f14 <tcp_receive+0x364>
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014e7c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014e80:	e048      	b.n	8014f14 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014e88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014e8a:	4413      	add	r3, r2
 8014e8c:	b29a      	uxth	r2, r3
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014e94:	429a      	cmp	r2, r3
 8014e96:	d309      	bcc.n	8014eac <tcp_receive+0x2fc>
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014e9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014ea0:	4413      	add	r3, r2
 8014ea2:	b29a      	uxth	r2, r3
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014eaa:	e004      	b.n	8014eb6 <tcp_receive+0x306>
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014eb2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014ec2:	429a      	cmp	r2, r3
 8014ec4:	d326      	bcc.n	8014f14 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014ed2:	1ad3      	subs	r3, r2, r3
 8014ed4:	b29a      	uxth	r2, r3
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014ee6:	4413      	add	r3, r2
 8014ee8:	b29a      	uxth	r2, r3
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014ef0:	429a      	cmp	r2, r3
 8014ef2:	d30a      	bcc.n	8014f0a <tcp_receive+0x35a>
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014efe:	4413      	add	r3, r2
 8014f00:	b29a      	uxth	r2, r3
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014f08:	e004      	b.n	8014f14 <tcp_receive+0x364>
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014f10:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f1c:	4a98      	ldr	r2, [pc, #608]	; (8015180 <tcp_receive+0x5d0>)
 8014f1e:	6878      	ldr	r0, [r7, #4]
 8014f20:	f7ff fdca 	bl	8014ab8 <tcp_free_acked_segments>
 8014f24:	4602      	mov	r2, r0
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f32:	4a94      	ldr	r2, [pc, #592]	; (8015184 <tcp_receive+0x5d4>)
 8014f34:	6878      	ldr	r0, [r7, #4]
 8014f36:	f7ff fdbf 	bl	8014ab8 <tcp_free_acked_segments>
 8014f3a:	4602      	mov	r2, r0
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d104      	bne.n	8014f52 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014f4e:	861a      	strh	r2, [r3, #48]	; 0x30
 8014f50:	e002      	b.n	8014f58 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	2200      	movs	r2, #0
 8014f56:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	2200      	movs	r2, #0
 8014f5c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d103      	bne.n	8014f6e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	2200      	movs	r2, #0
 8014f6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014f74:	4b84      	ldr	r3, [pc, #528]	; (8015188 <tcp_receive+0x5d8>)
 8014f76:	881b      	ldrh	r3, [r3, #0]
 8014f78:	4413      	add	r3, r2
 8014f7a:	b29a      	uxth	r2, r3
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	8b5b      	ldrh	r3, [r3, #26]
 8014f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d035      	beq.n	8014ffa <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d118      	bne.n	8014fc8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d00c      	beq.n	8014fb8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014fa6:	68db      	ldr	r3, [r3, #12]
 8014fa8:	685b      	ldr	r3, [r3, #4]
 8014faa:	4618      	mov	r0, r3
 8014fac:	f7fa fefd 	bl	800fdaa <lwip_htonl>
 8014fb0:	4603      	mov	r3, r0
 8014fb2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	dc20      	bgt.n	8014ffa <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	8b5b      	ldrh	r3, [r3, #26]
 8014fbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014fc0:	b29a      	uxth	r2, r3
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014fc6:	e018      	b.n	8014ffa <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fd0:	68db      	ldr	r3, [r3, #12]
 8014fd2:	685b      	ldr	r3, [r3, #4]
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	f7fa fee8 	bl	800fdaa <lwip_htonl>
 8014fda:	4603      	mov	r3, r0
 8014fdc:	1ae3      	subs	r3, r4, r3
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	dc0b      	bgt.n	8014ffa <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	8b5b      	ldrh	r3, [r3, #26]
 8014fe6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014fea:	b29a      	uxth	r2, r3
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014ff0:	e003      	b.n	8014ffa <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8014ff2:	6878      	ldr	r0, [r7, #4]
 8014ff4:	f002 fbce 	bl	8017794 <tcp_send_empty_ack>
 8014ff8:	e000      	b.n	8014ffc <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014ffa:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015000:	2b00      	cmp	r3, #0
 8015002:	d05b      	beq.n	80150bc <tcp_receive+0x50c>
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015008:	4b60      	ldr	r3, [pc, #384]	; (801518c <tcp_receive+0x5dc>)
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	1ad3      	subs	r3, r2, r3
 801500e:	2b00      	cmp	r3, #0
 8015010:	da54      	bge.n	80150bc <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8015012:	4b5f      	ldr	r3, [pc, #380]	; (8015190 <tcp_receive+0x5e0>)
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	b29a      	uxth	r2, r3
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801501c:	b29b      	uxth	r3, r3
 801501e:	1ad3      	subs	r3, r2, r3
 8015020:	b29b      	uxth	r3, r3
 8015022:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8015026:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015030:	10db      	asrs	r3, r3, #3
 8015032:	b21b      	sxth	r3, r3
 8015034:	b29b      	uxth	r3, r3
 8015036:	1ad3      	subs	r3, r2, r3
 8015038:	b29b      	uxth	r3, r3
 801503a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015044:	b29a      	uxth	r2, r3
 8015046:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801504a:	4413      	add	r3, r2
 801504c:	b29b      	uxth	r3, r3
 801504e:	b21a      	sxth	r2, r3
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8015054:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015058:	2b00      	cmp	r3, #0
 801505a:	da05      	bge.n	8015068 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801505c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015060:	425b      	negs	r3, r3
 8015062:	b29b      	uxth	r3, r3
 8015064:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8015068:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015072:	109b      	asrs	r3, r3, #2
 8015074:	b21b      	sxth	r3, r3
 8015076:	b29b      	uxth	r3, r3
 8015078:	1ad3      	subs	r3, r2, r3
 801507a:	b29b      	uxth	r3, r3
 801507c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015086:	b29a      	uxth	r2, r3
 8015088:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801508c:	4413      	add	r3, r2
 801508e:	b29b      	uxth	r3, r3
 8015090:	b21a      	sxth	r2, r3
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801509c:	10db      	asrs	r3, r3, #3
 801509e:	b21b      	sxth	r3, r3
 80150a0:	b29a      	uxth	r2, r3
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80150a8:	b29b      	uxth	r3, r3
 80150aa:	4413      	add	r3, r2
 80150ac:	b29b      	uxth	r3, r3
 80150ae:	b21a      	sxth	r2, r3
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	2200      	movs	r2, #0
 80150ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80150bc:	4b35      	ldr	r3, [pc, #212]	; (8015194 <tcp_receive+0x5e4>)
 80150be:	881b      	ldrh	r3, [r3, #0]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	f000 84e2 	beq.w	8015a8a <tcp_receive+0xeda>
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	7d1b      	ldrb	r3, [r3, #20]
 80150ca:	2b06      	cmp	r3, #6
 80150cc:	f200 84dd 	bhi.w	8015a8a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80150d4:	4b30      	ldr	r3, [pc, #192]	; (8015198 <tcp_receive+0x5e8>)
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	1ad3      	subs	r3, r2, r3
 80150da:	3b01      	subs	r3, #1
 80150dc:	2b00      	cmp	r3, #0
 80150de:	f2c0 808f 	blt.w	8015200 <tcp_receive+0x650>
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80150e6:	4b2b      	ldr	r3, [pc, #172]	; (8015194 <tcp_receive+0x5e4>)
 80150e8:	881b      	ldrh	r3, [r3, #0]
 80150ea:	4619      	mov	r1, r3
 80150ec:	4b2a      	ldr	r3, [pc, #168]	; (8015198 <tcp_receive+0x5e8>)
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	440b      	add	r3, r1
 80150f2:	1ad3      	subs	r3, r2, r3
 80150f4:	3301      	adds	r3, #1
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	f300 8082 	bgt.w	8015200 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80150fc:	4b27      	ldr	r3, [pc, #156]	; (801519c <tcp_receive+0x5ec>)
 80150fe:	685b      	ldr	r3, [r3, #4]
 8015100:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015106:	4b24      	ldr	r3, [pc, #144]	; (8015198 <tcp_receive+0x5e8>)
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	1ad3      	subs	r3, r2, r3
 801510c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801510e:	4b23      	ldr	r3, [pc, #140]	; (801519c <tcp_receive+0x5ec>)
 8015110:	685b      	ldr	r3, [r3, #4]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d106      	bne.n	8015124 <tcp_receive+0x574>
 8015116:	4b22      	ldr	r3, [pc, #136]	; (80151a0 <tcp_receive+0x5f0>)
 8015118:	f240 5294 	movw	r2, #1428	; 0x594
 801511c:	4921      	ldr	r1, [pc, #132]	; (80151a4 <tcp_receive+0x5f4>)
 801511e:	4822      	ldr	r0, [pc, #136]	; (80151a8 <tcp_receive+0x5f8>)
 8015120:	f005 fde8 	bl	801acf4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015126:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801512a:	4293      	cmp	r3, r2
 801512c:	d906      	bls.n	801513c <tcp_receive+0x58c>
 801512e:	4b1c      	ldr	r3, [pc, #112]	; (80151a0 <tcp_receive+0x5f0>)
 8015130:	f240 5295 	movw	r2, #1429	; 0x595
 8015134:	491d      	ldr	r1, [pc, #116]	; (80151ac <tcp_receive+0x5fc>)
 8015136:	481c      	ldr	r0, [pc, #112]	; (80151a8 <tcp_receive+0x5f8>)
 8015138:	f005 fddc 	bl	801acf4 <iprintf>
      off = (u16_t)off32;
 801513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801513e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8015142:	4b16      	ldr	r3, [pc, #88]	; (801519c <tcp_receive+0x5ec>)
 8015144:	685b      	ldr	r3, [r3, #4]
 8015146:	891b      	ldrh	r3, [r3, #8]
 8015148:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801514c:	429a      	cmp	r2, r3
 801514e:	d906      	bls.n	801515e <tcp_receive+0x5ae>
 8015150:	4b13      	ldr	r3, [pc, #76]	; (80151a0 <tcp_receive+0x5f0>)
 8015152:	f240 5297 	movw	r2, #1431	; 0x597
 8015156:	4916      	ldr	r1, [pc, #88]	; (80151b0 <tcp_receive+0x600>)
 8015158:	4813      	ldr	r0, [pc, #76]	; (80151a8 <tcp_receive+0x5f8>)
 801515a:	f005 fdcb 	bl	801acf4 <iprintf>
      inseg.len -= off;
 801515e:	4b0f      	ldr	r3, [pc, #60]	; (801519c <tcp_receive+0x5ec>)
 8015160:	891a      	ldrh	r2, [r3, #8]
 8015162:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015166:	1ad3      	subs	r3, r2, r3
 8015168:	b29a      	uxth	r2, r3
 801516a:	4b0c      	ldr	r3, [pc, #48]	; (801519c <tcp_receive+0x5ec>)
 801516c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801516e:	4b0b      	ldr	r3, [pc, #44]	; (801519c <tcp_receive+0x5ec>)
 8015170:	685b      	ldr	r3, [r3, #4]
 8015172:	891a      	ldrh	r2, [r3, #8]
 8015174:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015178:	1ad3      	subs	r3, r2, r3
 801517a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801517c:	e02a      	b.n	80151d4 <tcp_receive+0x624>
 801517e:	bf00      	nop
 8015180:	0801e4e0 	.word	0x0801e4e0
 8015184:	0801e4e8 	.word	0x0801e4e8
 8015188:	200110c8 	.word	0x200110c8
 801518c:	200110c4 	.word	0x200110c4
 8015190:	20011088 	.word	0x20011088
 8015194:	200110ca 	.word	0x200110ca
 8015198:	200110c0 	.word	0x200110c0
 801519c:	200110a0 	.word	0x200110a0
 80151a0:	0801e178 	.word	0x0801e178
 80151a4:	0801e4f0 	.word	0x0801e4f0
 80151a8:	0801e1c4 	.word	0x0801e1c4
 80151ac:	0801e500 	.word	0x0801e500
 80151b0:	0801e510 	.word	0x0801e510
        off -= p->len;
 80151b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80151b6:	895b      	ldrh	r3, [r3, #10]
 80151b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80151bc:	1ad3      	subs	r3, r2, r3
 80151be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80151c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80151c4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80151c6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80151c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80151ca:	2200      	movs	r2, #0
 80151cc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80151ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80151d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80151d6:	895b      	ldrh	r3, [r3, #10]
 80151d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80151dc:	429a      	cmp	r2, r3
 80151de:	d8e9      	bhi.n	80151b4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80151e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80151e4:	4619      	mov	r1, r3
 80151e6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80151e8:	f7fc f936 	bl	8011458 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151f0:	4a91      	ldr	r2, [pc, #580]	; (8015438 <tcp_receive+0x888>)
 80151f2:	6013      	str	r3, [r2, #0]
 80151f4:	4b91      	ldr	r3, [pc, #580]	; (801543c <tcp_receive+0x88c>)
 80151f6:	68db      	ldr	r3, [r3, #12]
 80151f8:	4a8f      	ldr	r2, [pc, #572]	; (8015438 <tcp_receive+0x888>)
 80151fa:	6812      	ldr	r2, [r2, #0]
 80151fc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80151fe:	e00d      	b.n	801521c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015200:	4b8d      	ldr	r3, [pc, #564]	; (8015438 <tcp_receive+0x888>)
 8015202:	681a      	ldr	r2, [r3, #0]
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015208:	1ad3      	subs	r3, r2, r3
 801520a:	2b00      	cmp	r3, #0
 801520c:	da06      	bge.n	801521c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	8b5b      	ldrh	r3, [r3, #26]
 8015212:	f043 0302 	orr.w	r3, r3, #2
 8015216:	b29a      	uxth	r2, r3
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801521c:	4b86      	ldr	r3, [pc, #536]	; (8015438 <tcp_receive+0x888>)
 801521e:	681a      	ldr	r2, [r3, #0]
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015224:	1ad3      	subs	r3, r2, r3
 8015226:	2b00      	cmp	r3, #0
 8015228:	f2c0 842a 	blt.w	8015a80 <tcp_receive+0xed0>
 801522c:	4b82      	ldr	r3, [pc, #520]	; (8015438 <tcp_receive+0x888>)
 801522e:	681a      	ldr	r2, [r3, #0]
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015234:	6879      	ldr	r1, [r7, #4]
 8015236:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015238:	440b      	add	r3, r1
 801523a:	1ad3      	subs	r3, r2, r3
 801523c:	3301      	adds	r3, #1
 801523e:	2b00      	cmp	r3, #0
 8015240:	f300 841e 	bgt.w	8015a80 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015248:	4b7b      	ldr	r3, [pc, #492]	; (8015438 <tcp_receive+0x888>)
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	429a      	cmp	r2, r3
 801524e:	f040 829a 	bne.w	8015786 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8015252:	4b7a      	ldr	r3, [pc, #488]	; (801543c <tcp_receive+0x88c>)
 8015254:	891c      	ldrh	r4, [r3, #8]
 8015256:	4b79      	ldr	r3, [pc, #484]	; (801543c <tcp_receive+0x88c>)
 8015258:	68db      	ldr	r3, [r3, #12]
 801525a:	899b      	ldrh	r3, [r3, #12]
 801525c:	b29b      	uxth	r3, r3
 801525e:	4618      	mov	r0, r3
 8015260:	f7fa fd8e 	bl	800fd80 <lwip_htons>
 8015264:	4603      	mov	r3, r0
 8015266:	b2db      	uxtb	r3, r3
 8015268:	f003 0303 	and.w	r3, r3, #3
 801526c:	2b00      	cmp	r3, #0
 801526e:	d001      	beq.n	8015274 <tcp_receive+0x6c4>
 8015270:	2301      	movs	r3, #1
 8015272:	e000      	b.n	8015276 <tcp_receive+0x6c6>
 8015274:	2300      	movs	r3, #0
 8015276:	4423      	add	r3, r4
 8015278:	b29a      	uxth	r2, r3
 801527a:	4b71      	ldr	r3, [pc, #452]	; (8015440 <tcp_receive+0x890>)
 801527c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015282:	4b6f      	ldr	r3, [pc, #444]	; (8015440 <tcp_receive+0x890>)
 8015284:	881b      	ldrh	r3, [r3, #0]
 8015286:	429a      	cmp	r2, r3
 8015288:	d275      	bcs.n	8015376 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801528a:	4b6c      	ldr	r3, [pc, #432]	; (801543c <tcp_receive+0x88c>)
 801528c:	68db      	ldr	r3, [r3, #12]
 801528e:	899b      	ldrh	r3, [r3, #12]
 8015290:	b29b      	uxth	r3, r3
 8015292:	4618      	mov	r0, r3
 8015294:	f7fa fd74 	bl	800fd80 <lwip_htons>
 8015298:	4603      	mov	r3, r0
 801529a:	b2db      	uxtb	r3, r3
 801529c:	f003 0301 	and.w	r3, r3, #1
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d01f      	beq.n	80152e4 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80152a4:	4b65      	ldr	r3, [pc, #404]	; (801543c <tcp_receive+0x88c>)
 80152a6:	68db      	ldr	r3, [r3, #12]
 80152a8:	899b      	ldrh	r3, [r3, #12]
 80152aa:	b29b      	uxth	r3, r3
 80152ac:	b21b      	sxth	r3, r3
 80152ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80152b2:	b21c      	sxth	r4, r3
 80152b4:	4b61      	ldr	r3, [pc, #388]	; (801543c <tcp_receive+0x88c>)
 80152b6:	68db      	ldr	r3, [r3, #12]
 80152b8:	899b      	ldrh	r3, [r3, #12]
 80152ba:	b29b      	uxth	r3, r3
 80152bc:	4618      	mov	r0, r3
 80152be:	f7fa fd5f 	bl	800fd80 <lwip_htons>
 80152c2:	4603      	mov	r3, r0
 80152c4:	b2db      	uxtb	r3, r3
 80152c6:	b29b      	uxth	r3, r3
 80152c8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80152cc:	b29b      	uxth	r3, r3
 80152ce:	4618      	mov	r0, r3
 80152d0:	f7fa fd56 	bl	800fd80 <lwip_htons>
 80152d4:	4603      	mov	r3, r0
 80152d6:	b21b      	sxth	r3, r3
 80152d8:	4323      	orrs	r3, r4
 80152da:	b21a      	sxth	r2, r3
 80152dc:	4b57      	ldr	r3, [pc, #348]	; (801543c <tcp_receive+0x88c>)
 80152de:	68db      	ldr	r3, [r3, #12]
 80152e0:	b292      	uxth	r2, r2
 80152e2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80152e8:	4b54      	ldr	r3, [pc, #336]	; (801543c <tcp_receive+0x88c>)
 80152ea:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80152ec:	4b53      	ldr	r3, [pc, #332]	; (801543c <tcp_receive+0x88c>)
 80152ee:	68db      	ldr	r3, [r3, #12]
 80152f0:	899b      	ldrh	r3, [r3, #12]
 80152f2:	b29b      	uxth	r3, r3
 80152f4:	4618      	mov	r0, r3
 80152f6:	f7fa fd43 	bl	800fd80 <lwip_htons>
 80152fa:	4603      	mov	r3, r0
 80152fc:	b2db      	uxtb	r3, r3
 80152fe:	f003 0302 	and.w	r3, r3, #2
 8015302:	2b00      	cmp	r3, #0
 8015304:	d005      	beq.n	8015312 <tcp_receive+0x762>
            inseg.len -= 1;
 8015306:	4b4d      	ldr	r3, [pc, #308]	; (801543c <tcp_receive+0x88c>)
 8015308:	891b      	ldrh	r3, [r3, #8]
 801530a:	3b01      	subs	r3, #1
 801530c:	b29a      	uxth	r2, r3
 801530e:	4b4b      	ldr	r3, [pc, #300]	; (801543c <tcp_receive+0x88c>)
 8015310:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8015312:	4b4a      	ldr	r3, [pc, #296]	; (801543c <tcp_receive+0x88c>)
 8015314:	685b      	ldr	r3, [r3, #4]
 8015316:	4a49      	ldr	r2, [pc, #292]	; (801543c <tcp_receive+0x88c>)
 8015318:	8912      	ldrh	r2, [r2, #8]
 801531a:	4611      	mov	r1, r2
 801531c:	4618      	mov	r0, r3
 801531e:	f7fb ff9b 	bl	8011258 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015322:	4b46      	ldr	r3, [pc, #280]	; (801543c <tcp_receive+0x88c>)
 8015324:	891c      	ldrh	r4, [r3, #8]
 8015326:	4b45      	ldr	r3, [pc, #276]	; (801543c <tcp_receive+0x88c>)
 8015328:	68db      	ldr	r3, [r3, #12]
 801532a:	899b      	ldrh	r3, [r3, #12]
 801532c:	b29b      	uxth	r3, r3
 801532e:	4618      	mov	r0, r3
 8015330:	f7fa fd26 	bl	800fd80 <lwip_htons>
 8015334:	4603      	mov	r3, r0
 8015336:	b2db      	uxtb	r3, r3
 8015338:	f003 0303 	and.w	r3, r3, #3
 801533c:	2b00      	cmp	r3, #0
 801533e:	d001      	beq.n	8015344 <tcp_receive+0x794>
 8015340:	2301      	movs	r3, #1
 8015342:	e000      	b.n	8015346 <tcp_receive+0x796>
 8015344:	2300      	movs	r3, #0
 8015346:	4423      	add	r3, r4
 8015348:	b29a      	uxth	r2, r3
 801534a:	4b3d      	ldr	r3, [pc, #244]	; (8015440 <tcp_receive+0x890>)
 801534c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801534e:	4b3c      	ldr	r3, [pc, #240]	; (8015440 <tcp_receive+0x890>)
 8015350:	881b      	ldrh	r3, [r3, #0]
 8015352:	461a      	mov	r2, r3
 8015354:	4b38      	ldr	r3, [pc, #224]	; (8015438 <tcp_receive+0x888>)
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	441a      	add	r2, r3
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801535e:	6879      	ldr	r1, [r7, #4]
 8015360:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015362:	440b      	add	r3, r1
 8015364:	429a      	cmp	r2, r3
 8015366:	d006      	beq.n	8015376 <tcp_receive+0x7c6>
 8015368:	4b36      	ldr	r3, [pc, #216]	; (8015444 <tcp_receive+0x894>)
 801536a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801536e:	4936      	ldr	r1, [pc, #216]	; (8015448 <tcp_receive+0x898>)
 8015370:	4836      	ldr	r0, [pc, #216]	; (801544c <tcp_receive+0x89c>)
 8015372:	f005 fcbf 	bl	801acf4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801537a:	2b00      	cmp	r3, #0
 801537c:	f000 80e7 	beq.w	801554e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015380:	4b2e      	ldr	r3, [pc, #184]	; (801543c <tcp_receive+0x88c>)
 8015382:	68db      	ldr	r3, [r3, #12]
 8015384:	899b      	ldrh	r3, [r3, #12]
 8015386:	b29b      	uxth	r3, r3
 8015388:	4618      	mov	r0, r3
 801538a:	f7fa fcf9 	bl	800fd80 <lwip_htons>
 801538e:	4603      	mov	r3, r0
 8015390:	b2db      	uxtb	r3, r3
 8015392:	f003 0301 	and.w	r3, r3, #1
 8015396:	2b00      	cmp	r3, #0
 8015398:	d010      	beq.n	80153bc <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801539a:	e00a      	b.n	80153b2 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80153a0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80153a6:	681a      	ldr	r2, [r3, #0]
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80153ac:	68f8      	ldr	r0, [r7, #12]
 80153ae:	f7fd fcc4 	bl	8012d3a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d1f0      	bne.n	801539c <tcp_receive+0x7ec>
 80153ba:	e0c8      	b.n	801554e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80153c0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80153c2:	e052      	b.n	801546a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80153c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153c6:	68db      	ldr	r3, [r3, #12]
 80153c8:	899b      	ldrh	r3, [r3, #12]
 80153ca:	b29b      	uxth	r3, r3
 80153cc:	4618      	mov	r0, r3
 80153ce:	f7fa fcd7 	bl	800fd80 <lwip_htons>
 80153d2:	4603      	mov	r3, r0
 80153d4:	b2db      	uxtb	r3, r3
 80153d6:	f003 0301 	and.w	r3, r3, #1
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d03d      	beq.n	801545a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80153de:	4b17      	ldr	r3, [pc, #92]	; (801543c <tcp_receive+0x88c>)
 80153e0:	68db      	ldr	r3, [r3, #12]
 80153e2:	899b      	ldrh	r3, [r3, #12]
 80153e4:	b29b      	uxth	r3, r3
 80153e6:	4618      	mov	r0, r3
 80153e8:	f7fa fcca 	bl	800fd80 <lwip_htons>
 80153ec:	4603      	mov	r3, r0
 80153ee:	b2db      	uxtb	r3, r3
 80153f0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d130      	bne.n	801545a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80153f8:	4b10      	ldr	r3, [pc, #64]	; (801543c <tcp_receive+0x88c>)
 80153fa:	68db      	ldr	r3, [r3, #12]
 80153fc:	899b      	ldrh	r3, [r3, #12]
 80153fe:	b29c      	uxth	r4, r3
 8015400:	2001      	movs	r0, #1
 8015402:	f7fa fcbd 	bl	800fd80 <lwip_htons>
 8015406:	4603      	mov	r3, r0
 8015408:	461a      	mov	r2, r3
 801540a:	4b0c      	ldr	r3, [pc, #48]	; (801543c <tcp_receive+0x88c>)
 801540c:	68db      	ldr	r3, [r3, #12]
 801540e:	4322      	orrs	r2, r4
 8015410:	b292      	uxth	r2, r2
 8015412:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8015414:	4b09      	ldr	r3, [pc, #36]	; (801543c <tcp_receive+0x88c>)
 8015416:	891c      	ldrh	r4, [r3, #8]
 8015418:	4b08      	ldr	r3, [pc, #32]	; (801543c <tcp_receive+0x88c>)
 801541a:	68db      	ldr	r3, [r3, #12]
 801541c:	899b      	ldrh	r3, [r3, #12]
 801541e:	b29b      	uxth	r3, r3
 8015420:	4618      	mov	r0, r3
 8015422:	f7fa fcad 	bl	800fd80 <lwip_htons>
 8015426:	4603      	mov	r3, r0
 8015428:	b2db      	uxtb	r3, r3
 801542a:	f003 0303 	and.w	r3, r3, #3
 801542e:	2b00      	cmp	r3, #0
 8015430:	d00e      	beq.n	8015450 <tcp_receive+0x8a0>
 8015432:	2301      	movs	r3, #1
 8015434:	e00d      	b.n	8015452 <tcp_receive+0x8a2>
 8015436:	bf00      	nop
 8015438:	200110c0 	.word	0x200110c0
 801543c:	200110a0 	.word	0x200110a0
 8015440:	200110ca 	.word	0x200110ca
 8015444:	0801e178 	.word	0x0801e178
 8015448:	0801e520 	.word	0x0801e520
 801544c:	0801e1c4 	.word	0x0801e1c4
 8015450:	2300      	movs	r3, #0
 8015452:	4423      	add	r3, r4
 8015454:	b29a      	uxth	r2, r3
 8015456:	4b98      	ldr	r3, [pc, #608]	; (80156b8 <tcp_receive+0xb08>)
 8015458:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801545a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801545c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801545e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8015464:	6938      	ldr	r0, [r7, #16]
 8015466:	f7fd fc68 	bl	8012d3a <tcp_seg_free>
            while (next &&
 801546a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801546c:	2b00      	cmp	r3, #0
 801546e:	d00e      	beq.n	801548e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8015470:	4b91      	ldr	r3, [pc, #580]	; (80156b8 <tcp_receive+0xb08>)
 8015472:	881b      	ldrh	r3, [r3, #0]
 8015474:	461a      	mov	r2, r3
 8015476:	4b91      	ldr	r3, [pc, #580]	; (80156bc <tcp_receive+0xb0c>)
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	441a      	add	r2, r3
 801547c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801547e:	68db      	ldr	r3, [r3, #12]
 8015480:	685b      	ldr	r3, [r3, #4]
 8015482:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015484:	8909      	ldrh	r1, [r1, #8]
 8015486:	440b      	add	r3, r1
 8015488:	1ad3      	subs	r3, r2, r3
            while (next &&
 801548a:	2b00      	cmp	r3, #0
 801548c:	da9a      	bge.n	80153c4 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801548e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015490:	2b00      	cmp	r3, #0
 8015492:	d059      	beq.n	8015548 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8015494:	4b88      	ldr	r3, [pc, #544]	; (80156b8 <tcp_receive+0xb08>)
 8015496:	881b      	ldrh	r3, [r3, #0]
 8015498:	461a      	mov	r2, r3
 801549a:	4b88      	ldr	r3, [pc, #544]	; (80156bc <tcp_receive+0xb0c>)
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	441a      	add	r2, r3
 80154a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154a2:	68db      	ldr	r3, [r3, #12]
 80154a4:	685b      	ldr	r3, [r3, #4]
 80154a6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	dd4d      	ble.n	8015548 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80154ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154ae:	68db      	ldr	r3, [r3, #12]
 80154b0:	685b      	ldr	r3, [r3, #4]
 80154b2:	b29a      	uxth	r2, r3
 80154b4:	4b81      	ldr	r3, [pc, #516]	; (80156bc <tcp_receive+0xb0c>)
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	b29b      	uxth	r3, r3
 80154ba:	1ad3      	subs	r3, r2, r3
 80154bc:	b29a      	uxth	r2, r3
 80154be:	4b80      	ldr	r3, [pc, #512]	; (80156c0 <tcp_receive+0xb10>)
 80154c0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80154c2:	4b7f      	ldr	r3, [pc, #508]	; (80156c0 <tcp_receive+0xb10>)
 80154c4:	68db      	ldr	r3, [r3, #12]
 80154c6:	899b      	ldrh	r3, [r3, #12]
 80154c8:	b29b      	uxth	r3, r3
 80154ca:	4618      	mov	r0, r3
 80154cc:	f7fa fc58 	bl	800fd80 <lwip_htons>
 80154d0:	4603      	mov	r3, r0
 80154d2:	b2db      	uxtb	r3, r3
 80154d4:	f003 0302 	and.w	r3, r3, #2
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d005      	beq.n	80154e8 <tcp_receive+0x938>
                inseg.len -= 1;
 80154dc:	4b78      	ldr	r3, [pc, #480]	; (80156c0 <tcp_receive+0xb10>)
 80154de:	891b      	ldrh	r3, [r3, #8]
 80154e0:	3b01      	subs	r3, #1
 80154e2:	b29a      	uxth	r2, r3
 80154e4:	4b76      	ldr	r3, [pc, #472]	; (80156c0 <tcp_receive+0xb10>)
 80154e6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80154e8:	4b75      	ldr	r3, [pc, #468]	; (80156c0 <tcp_receive+0xb10>)
 80154ea:	685b      	ldr	r3, [r3, #4]
 80154ec:	4a74      	ldr	r2, [pc, #464]	; (80156c0 <tcp_receive+0xb10>)
 80154ee:	8912      	ldrh	r2, [r2, #8]
 80154f0:	4611      	mov	r1, r2
 80154f2:	4618      	mov	r0, r3
 80154f4:	f7fb feb0 	bl	8011258 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80154f8:	4b71      	ldr	r3, [pc, #452]	; (80156c0 <tcp_receive+0xb10>)
 80154fa:	891c      	ldrh	r4, [r3, #8]
 80154fc:	4b70      	ldr	r3, [pc, #448]	; (80156c0 <tcp_receive+0xb10>)
 80154fe:	68db      	ldr	r3, [r3, #12]
 8015500:	899b      	ldrh	r3, [r3, #12]
 8015502:	b29b      	uxth	r3, r3
 8015504:	4618      	mov	r0, r3
 8015506:	f7fa fc3b 	bl	800fd80 <lwip_htons>
 801550a:	4603      	mov	r3, r0
 801550c:	b2db      	uxtb	r3, r3
 801550e:	f003 0303 	and.w	r3, r3, #3
 8015512:	2b00      	cmp	r3, #0
 8015514:	d001      	beq.n	801551a <tcp_receive+0x96a>
 8015516:	2301      	movs	r3, #1
 8015518:	e000      	b.n	801551c <tcp_receive+0x96c>
 801551a:	2300      	movs	r3, #0
 801551c:	4423      	add	r3, r4
 801551e:	b29a      	uxth	r2, r3
 8015520:	4b65      	ldr	r3, [pc, #404]	; (80156b8 <tcp_receive+0xb08>)
 8015522:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8015524:	4b64      	ldr	r3, [pc, #400]	; (80156b8 <tcp_receive+0xb08>)
 8015526:	881b      	ldrh	r3, [r3, #0]
 8015528:	461a      	mov	r2, r3
 801552a:	4b64      	ldr	r3, [pc, #400]	; (80156bc <tcp_receive+0xb0c>)
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	441a      	add	r2, r3
 8015530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015532:	68db      	ldr	r3, [r3, #12]
 8015534:	685b      	ldr	r3, [r3, #4]
 8015536:	429a      	cmp	r2, r3
 8015538:	d006      	beq.n	8015548 <tcp_receive+0x998>
 801553a:	4b62      	ldr	r3, [pc, #392]	; (80156c4 <tcp_receive+0xb14>)
 801553c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8015540:	4961      	ldr	r1, [pc, #388]	; (80156c8 <tcp_receive+0xb18>)
 8015542:	4862      	ldr	r0, [pc, #392]	; (80156cc <tcp_receive+0xb1c>)
 8015544:	f005 fbd6 	bl	801acf4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801554c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801554e:	4b5a      	ldr	r3, [pc, #360]	; (80156b8 <tcp_receive+0xb08>)
 8015550:	881b      	ldrh	r3, [r3, #0]
 8015552:	461a      	mov	r2, r3
 8015554:	4b59      	ldr	r3, [pc, #356]	; (80156bc <tcp_receive+0xb0c>)
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	441a      	add	r2, r3
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015562:	4b55      	ldr	r3, [pc, #340]	; (80156b8 <tcp_receive+0xb08>)
 8015564:	881b      	ldrh	r3, [r3, #0]
 8015566:	429a      	cmp	r2, r3
 8015568:	d206      	bcs.n	8015578 <tcp_receive+0x9c8>
 801556a:	4b56      	ldr	r3, [pc, #344]	; (80156c4 <tcp_receive+0xb14>)
 801556c:	f240 6207 	movw	r2, #1543	; 0x607
 8015570:	4957      	ldr	r1, [pc, #348]	; (80156d0 <tcp_receive+0xb20>)
 8015572:	4856      	ldr	r0, [pc, #344]	; (80156cc <tcp_receive+0xb1c>)
 8015574:	f005 fbbe 	bl	801acf4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801557c:	4b4e      	ldr	r3, [pc, #312]	; (80156b8 <tcp_receive+0xb08>)
 801557e:	881b      	ldrh	r3, [r3, #0]
 8015580:	1ad3      	subs	r3, r2, r3
 8015582:	b29a      	uxth	r2, r3
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8015588:	6878      	ldr	r0, [r7, #4]
 801558a:	f7fc feb1 	bl	80122f0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801558e:	4b4c      	ldr	r3, [pc, #304]	; (80156c0 <tcp_receive+0xb10>)
 8015590:	685b      	ldr	r3, [r3, #4]
 8015592:	891b      	ldrh	r3, [r3, #8]
 8015594:	2b00      	cmp	r3, #0
 8015596:	d006      	beq.n	80155a6 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8015598:	4b49      	ldr	r3, [pc, #292]	; (80156c0 <tcp_receive+0xb10>)
 801559a:	685b      	ldr	r3, [r3, #4]
 801559c:	4a4d      	ldr	r2, [pc, #308]	; (80156d4 <tcp_receive+0xb24>)
 801559e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80155a0:	4b47      	ldr	r3, [pc, #284]	; (80156c0 <tcp_receive+0xb10>)
 80155a2:	2200      	movs	r2, #0
 80155a4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80155a6:	4b46      	ldr	r3, [pc, #280]	; (80156c0 <tcp_receive+0xb10>)
 80155a8:	68db      	ldr	r3, [r3, #12]
 80155aa:	899b      	ldrh	r3, [r3, #12]
 80155ac:	b29b      	uxth	r3, r3
 80155ae:	4618      	mov	r0, r3
 80155b0:	f7fa fbe6 	bl	800fd80 <lwip_htons>
 80155b4:	4603      	mov	r3, r0
 80155b6:	b2db      	uxtb	r3, r3
 80155b8:	f003 0301 	and.w	r3, r3, #1
 80155bc:	2b00      	cmp	r3, #0
 80155be:	f000 80b8 	beq.w	8015732 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80155c2:	4b45      	ldr	r3, [pc, #276]	; (80156d8 <tcp_receive+0xb28>)
 80155c4:	781b      	ldrb	r3, [r3, #0]
 80155c6:	f043 0320 	orr.w	r3, r3, #32
 80155ca:	b2da      	uxtb	r2, r3
 80155cc:	4b42      	ldr	r3, [pc, #264]	; (80156d8 <tcp_receive+0xb28>)
 80155ce:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80155d0:	e0af      	b.n	8015732 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80155d6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80155dc:	68db      	ldr	r3, [r3, #12]
 80155de:	685b      	ldr	r3, [r3, #4]
 80155e0:	4a36      	ldr	r2, [pc, #216]	; (80156bc <tcp_receive+0xb0c>)
 80155e2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80155e4:	68bb      	ldr	r3, [r7, #8]
 80155e6:	891b      	ldrh	r3, [r3, #8]
 80155e8:	461c      	mov	r4, r3
 80155ea:	68bb      	ldr	r3, [r7, #8]
 80155ec:	68db      	ldr	r3, [r3, #12]
 80155ee:	899b      	ldrh	r3, [r3, #12]
 80155f0:	b29b      	uxth	r3, r3
 80155f2:	4618      	mov	r0, r3
 80155f4:	f7fa fbc4 	bl	800fd80 <lwip_htons>
 80155f8:	4603      	mov	r3, r0
 80155fa:	b2db      	uxtb	r3, r3
 80155fc:	f003 0303 	and.w	r3, r3, #3
 8015600:	2b00      	cmp	r3, #0
 8015602:	d001      	beq.n	8015608 <tcp_receive+0xa58>
 8015604:	2301      	movs	r3, #1
 8015606:	e000      	b.n	801560a <tcp_receive+0xa5a>
 8015608:	2300      	movs	r3, #0
 801560a:	191a      	adds	r2, r3, r4
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015610:	441a      	add	r2, r3
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801561a:	461c      	mov	r4, r3
 801561c:	68bb      	ldr	r3, [r7, #8]
 801561e:	891b      	ldrh	r3, [r3, #8]
 8015620:	461d      	mov	r5, r3
 8015622:	68bb      	ldr	r3, [r7, #8]
 8015624:	68db      	ldr	r3, [r3, #12]
 8015626:	899b      	ldrh	r3, [r3, #12]
 8015628:	b29b      	uxth	r3, r3
 801562a:	4618      	mov	r0, r3
 801562c:	f7fa fba8 	bl	800fd80 <lwip_htons>
 8015630:	4603      	mov	r3, r0
 8015632:	b2db      	uxtb	r3, r3
 8015634:	f003 0303 	and.w	r3, r3, #3
 8015638:	2b00      	cmp	r3, #0
 801563a:	d001      	beq.n	8015640 <tcp_receive+0xa90>
 801563c:	2301      	movs	r3, #1
 801563e:	e000      	b.n	8015642 <tcp_receive+0xa92>
 8015640:	2300      	movs	r3, #0
 8015642:	442b      	add	r3, r5
 8015644:	429c      	cmp	r4, r3
 8015646:	d206      	bcs.n	8015656 <tcp_receive+0xaa6>
 8015648:	4b1e      	ldr	r3, [pc, #120]	; (80156c4 <tcp_receive+0xb14>)
 801564a:	f240 622b 	movw	r2, #1579	; 0x62b
 801564e:	4923      	ldr	r1, [pc, #140]	; (80156dc <tcp_receive+0xb2c>)
 8015650:	481e      	ldr	r0, [pc, #120]	; (80156cc <tcp_receive+0xb1c>)
 8015652:	f005 fb4f 	bl	801acf4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8015656:	68bb      	ldr	r3, [r7, #8]
 8015658:	891b      	ldrh	r3, [r3, #8]
 801565a:	461c      	mov	r4, r3
 801565c:	68bb      	ldr	r3, [r7, #8]
 801565e:	68db      	ldr	r3, [r3, #12]
 8015660:	899b      	ldrh	r3, [r3, #12]
 8015662:	b29b      	uxth	r3, r3
 8015664:	4618      	mov	r0, r3
 8015666:	f7fa fb8b 	bl	800fd80 <lwip_htons>
 801566a:	4603      	mov	r3, r0
 801566c:	b2db      	uxtb	r3, r3
 801566e:	f003 0303 	and.w	r3, r3, #3
 8015672:	2b00      	cmp	r3, #0
 8015674:	d001      	beq.n	801567a <tcp_receive+0xaca>
 8015676:	2301      	movs	r3, #1
 8015678:	e000      	b.n	801567c <tcp_receive+0xacc>
 801567a:	2300      	movs	r3, #0
 801567c:	1919      	adds	r1, r3, r4
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015682:	b28b      	uxth	r3, r1
 8015684:	1ad3      	subs	r3, r2, r3
 8015686:	b29a      	uxth	r2, r3
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801568c:	6878      	ldr	r0, [r7, #4]
 801568e:	f7fc fe2f 	bl	80122f0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8015692:	68bb      	ldr	r3, [r7, #8]
 8015694:	685b      	ldr	r3, [r3, #4]
 8015696:	891b      	ldrh	r3, [r3, #8]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d028      	beq.n	80156ee <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801569c:	4b0d      	ldr	r3, [pc, #52]	; (80156d4 <tcp_receive+0xb24>)
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d01d      	beq.n	80156e0 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80156a4:	4b0b      	ldr	r3, [pc, #44]	; (80156d4 <tcp_receive+0xb24>)
 80156a6:	681a      	ldr	r2, [r3, #0]
 80156a8:	68bb      	ldr	r3, [r7, #8]
 80156aa:	685b      	ldr	r3, [r3, #4]
 80156ac:	4619      	mov	r1, r3
 80156ae:	4610      	mov	r0, r2
 80156b0:	f7fc f858 	bl	8011764 <pbuf_cat>
 80156b4:	e018      	b.n	80156e8 <tcp_receive+0xb38>
 80156b6:	bf00      	nop
 80156b8:	200110ca 	.word	0x200110ca
 80156bc:	200110c0 	.word	0x200110c0
 80156c0:	200110a0 	.word	0x200110a0
 80156c4:	0801e178 	.word	0x0801e178
 80156c8:	0801e558 	.word	0x0801e558
 80156cc:	0801e1c4 	.word	0x0801e1c4
 80156d0:	0801e594 	.word	0x0801e594
 80156d4:	200110d0 	.word	0x200110d0
 80156d8:	200110cd 	.word	0x200110cd
 80156dc:	0801e5b4 	.word	0x0801e5b4
            } else {
              recv_data = cseg->p;
 80156e0:	68bb      	ldr	r3, [r7, #8]
 80156e2:	685b      	ldr	r3, [r3, #4]
 80156e4:	4a70      	ldr	r2, [pc, #448]	; (80158a8 <tcp_receive+0xcf8>)
 80156e6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80156e8:	68bb      	ldr	r3, [r7, #8]
 80156ea:	2200      	movs	r2, #0
 80156ec:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80156ee:	68bb      	ldr	r3, [r7, #8]
 80156f0:	68db      	ldr	r3, [r3, #12]
 80156f2:	899b      	ldrh	r3, [r3, #12]
 80156f4:	b29b      	uxth	r3, r3
 80156f6:	4618      	mov	r0, r3
 80156f8:	f7fa fb42 	bl	800fd80 <lwip_htons>
 80156fc:	4603      	mov	r3, r0
 80156fe:	b2db      	uxtb	r3, r3
 8015700:	f003 0301 	and.w	r3, r3, #1
 8015704:	2b00      	cmp	r3, #0
 8015706:	d00d      	beq.n	8015724 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8015708:	4b68      	ldr	r3, [pc, #416]	; (80158ac <tcp_receive+0xcfc>)
 801570a:	781b      	ldrb	r3, [r3, #0]
 801570c:	f043 0320 	orr.w	r3, r3, #32
 8015710:	b2da      	uxtb	r2, r3
 8015712:	4b66      	ldr	r3, [pc, #408]	; (80158ac <tcp_receive+0xcfc>)
 8015714:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	7d1b      	ldrb	r3, [r3, #20]
 801571a:	2b04      	cmp	r3, #4
 801571c:	d102      	bne.n	8015724 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	2207      	movs	r2, #7
 8015722:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8015724:	68bb      	ldr	r3, [r7, #8]
 8015726:	681a      	ldr	r2, [r3, #0]
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801572c:	68b8      	ldr	r0, [r7, #8]
 801572e:	f7fd fb04 	bl	8012d3a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015736:	2b00      	cmp	r3, #0
 8015738:	d008      	beq.n	801574c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801573e:	68db      	ldr	r3, [r3, #12]
 8015740:	685a      	ldr	r2, [r3, #4]
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8015746:	429a      	cmp	r2, r3
 8015748:	f43f af43 	beq.w	80155d2 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	8b5b      	ldrh	r3, [r3, #26]
 8015750:	f003 0301 	and.w	r3, r3, #1
 8015754:	2b00      	cmp	r3, #0
 8015756:	d00e      	beq.n	8015776 <tcp_receive+0xbc6>
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	8b5b      	ldrh	r3, [r3, #26]
 801575c:	f023 0301 	bic.w	r3, r3, #1
 8015760:	b29a      	uxth	r2, r3
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	835a      	strh	r2, [r3, #26]
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	8b5b      	ldrh	r3, [r3, #26]
 801576a:	f043 0302 	orr.w	r3, r3, #2
 801576e:	b29a      	uxth	r2, r3
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015774:	e188      	b.n	8015a88 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	8b5b      	ldrh	r3, [r3, #26]
 801577a:	f043 0301 	orr.w	r3, r3, #1
 801577e:	b29a      	uxth	r2, r3
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015784:	e180      	b.n	8015a88 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801578a:	2b00      	cmp	r3, #0
 801578c:	d106      	bne.n	801579c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801578e:	4848      	ldr	r0, [pc, #288]	; (80158b0 <tcp_receive+0xd00>)
 8015790:	f7fd faec 	bl	8012d6c <tcp_seg_copy>
 8015794:	4602      	mov	r2, r0
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	675a      	str	r2, [r3, #116]	; 0x74
 801579a:	e16d      	b.n	8015a78 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801579c:	2300      	movs	r3, #0
 801579e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80157a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80157a6:	e157      	b.n	8015a58 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80157a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157aa:	68db      	ldr	r3, [r3, #12]
 80157ac:	685a      	ldr	r2, [r3, #4]
 80157ae:	4b41      	ldr	r3, [pc, #260]	; (80158b4 <tcp_receive+0xd04>)
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	429a      	cmp	r2, r3
 80157b4:	d11d      	bne.n	80157f2 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80157b6:	4b3e      	ldr	r3, [pc, #248]	; (80158b0 <tcp_receive+0xd00>)
 80157b8:	891a      	ldrh	r2, [r3, #8]
 80157ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157bc:	891b      	ldrh	r3, [r3, #8]
 80157be:	429a      	cmp	r2, r3
 80157c0:	f240 814f 	bls.w	8015a62 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80157c4:	483a      	ldr	r0, [pc, #232]	; (80158b0 <tcp_receive+0xd00>)
 80157c6:	f7fd fad1 	bl	8012d6c <tcp_seg_copy>
 80157ca:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80157cc:	697b      	ldr	r3, [r7, #20]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	f000 8149 	beq.w	8015a66 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80157d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d003      	beq.n	80157e2 <tcp_receive+0xc32>
                    prev->next = cseg;
 80157da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157dc:	697a      	ldr	r2, [r7, #20]
 80157de:	601a      	str	r2, [r3, #0]
 80157e0:	e002      	b.n	80157e8 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	697a      	ldr	r2, [r7, #20]
 80157e6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80157e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80157ea:	6978      	ldr	r0, [r7, #20]
 80157ec:	f7ff f8dc 	bl	80149a8 <tcp_oos_insert_segment>
                }
                break;
 80157f0:	e139      	b.n	8015a66 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80157f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d117      	bne.n	8015828 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80157f8:	4b2e      	ldr	r3, [pc, #184]	; (80158b4 <tcp_receive+0xd04>)
 80157fa:	681a      	ldr	r2, [r3, #0]
 80157fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157fe:	68db      	ldr	r3, [r3, #12]
 8015800:	685b      	ldr	r3, [r3, #4]
 8015802:	1ad3      	subs	r3, r2, r3
 8015804:	2b00      	cmp	r3, #0
 8015806:	da57      	bge.n	80158b8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015808:	4829      	ldr	r0, [pc, #164]	; (80158b0 <tcp_receive+0xd00>)
 801580a:	f7fd faaf 	bl	8012d6c <tcp_seg_copy>
 801580e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8015810:	69bb      	ldr	r3, [r7, #24]
 8015812:	2b00      	cmp	r3, #0
 8015814:	f000 8129 	beq.w	8015a6a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	69ba      	ldr	r2, [r7, #24]
 801581c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801581e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015820:	69b8      	ldr	r0, [r7, #24]
 8015822:	f7ff f8c1 	bl	80149a8 <tcp_oos_insert_segment>
                  }
                  break;
 8015826:	e120      	b.n	8015a6a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8015828:	4b22      	ldr	r3, [pc, #136]	; (80158b4 <tcp_receive+0xd04>)
 801582a:	681a      	ldr	r2, [r3, #0]
 801582c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801582e:	68db      	ldr	r3, [r3, #12]
 8015830:	685b      	ldr	r3, [r3, #4]
 8015832:	1ad3      	subs	r3, r2, r3
 8015834:	3b01      	subs	r3, #1
 8015836:	2b00      	cmp	r3, #0
 8015838:	db3e      	blt.n	80158b8 <tcp_receive+0xd08>
 801583a:	4b1e      	ldr	r3, [pc, #120]	; (80158b4 <tcp_receive+0xd04>)
 801583c:	681a      	ldr	r2, [r3, #0]
 801583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015840:	68db      	ldr	r3, [r3, #12]
 8015842:	685b      	ldr	r3, [r3, #4]
 8015844:	1ad3      	subs	r3, r2, r3
 8015846:	3301      	adds	r3, #1
 8015848:	2b00      	cmp	r3, #0
 801584a:	dc35      	bgt.n	80158b8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801584c:	4818      	ldr	r0, [pc, #96]	; (80158b0 <tcp_receive+0xd00>)
 801584e:	f7fd fa8d 	bl	8012d6c <tcp_seg_copy>
 8015852:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8015854:	69fb      	ldr	r3, [r7, #28]
 8015856:	2b00      	cmp	r3, #0
 8015858:	f000 8109 	beq.w	8015a6e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801585c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801585e:	68db      	ldr	r3, [r3, #12]
 8015860:	685b      	ldr	r3, [r3, #4]
 8015862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015864:	8912      	ldrh	r2, [r2, #8]
 8015866:	441a      	add	r2, r3
 8015868:	4b12      	ldr	r3, [pc, #72]	; (80158b4 <tcp_receive+0xd04>)
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	1ad3      	subs	r3, r2, r3
 801586e:	2b00      	cmp	r3, #0
 8015870:	dd12      	ble.n	8015898 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8015872:	4b10      	ldr	r3, [pc, #64]	; (80158b4 <tcp_receive+0xd04>)
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	b29a      	uxth	r2, r3
 8015878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801587a:	68db      	ldr	r3, [r3, #12]
 801587c:	685b      	ldr	r3, [r3, #4]
 801587e:	b29b      	uxth	r3, r3
 8015880:	1ad3      	subs	r3, r2, r3
 8015882:	b29a      	uxth	r2, r3
 8015884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015886:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8015888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801588a:	685a      	ldr	r2, [r3, #4]
 801588c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801588e:	891b      	ldrh	r3, [r3, #8]
 8015890:	4619      	mov	r1, r3
 8015892:	4610      	mov	r0, r2
 8015894:	f7fb fce0 	bl	8011258 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8015898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801589a:	69fa      	ldr	r2, [r7, #28]
 801589c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801589e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80158a0:	69f8      	ldr	r0, [r7, #28]
 80158a2:	f7ff f881 	bl	80149a8 <tcp_oos_insert_segment>
                  }
                  break;
 80158a6:	e0e2      	b.n	8015a6e <tcp_receive+0xebe>
 80158a8:	200110d0 	.word	0x200110d0
 80158ac:	200110cd 	.word	0x200110cd
 80158b0:	200110a0 	.word	0x200110a0
 80158b4:	200110c0 	.word	0x200110c0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80158b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158ba:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80158bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	f040 80c6 	bne.w	8015a52 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80158c6:	4b80      	ldr	r3, [pc, #512]	; (8015ac8 <tcp_receive+0xf18>)
 80158c8:	681a      	ldr	r2, [r3, #0]
 80158ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158cc:	68db      	ldr	r3, [r3, #12]
 80158ce:	685b      	ldr	r3, [r3, #4]
 80158d0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	f340 80bd 	ble.w	8015a52 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80158d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158da:	68db      	ldr	r3, [r3, #12]
 80158dc:	899b      	ldrh	r3, [r3, #12]
 80158de:	b29b      	uxth	r3, r3
 80158e0:	4618      	mov	r0, r3
 80158e2:	f7fa fa4d 	bl	800fd80 <lwip_htons>
 80158e6:	4603      	mov	r3, r0
 80158e8:	b2db      	uxtb	r3, r3
 80158ea:	f003 0301 	and.w	r3, r3, #1
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	f040 80bf 	bne.w	8015a72 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80158f4:	4875      	ldr	r0, [pc, #468]	; (8015acc <tcp_receive+0xf1c>)
 80158f6:	f7fd fa39 	bl	8012d6c <tcp_seg_copy>
 80158fa:	4602      	mov	r2, r0
 80158fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158fe:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8015900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	2b00      	cmp	r3, #0
 8015906:	f000 80b6 	beq.w	8015a76 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801590a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801590c:	68db      	ldr	r3, [r3, #12]
 801590e:	685b      	ldr	r3, [r3, #4]
 8015910:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015912:	8912      	ldrh	r2, [r2, #8]
 8015914:	441a      	add	r2, r3
 8015916:	4b6c      	ldr	r3, [pc, #432]	; (8015ac8 <tcp_receive+0xf18>)
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	1ad3      	subs	r3, r2, r3
 801591c:	2b00      	cmp	r3, #0
 801591e:	dd12      	ble.n	8015946 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8015920:	4b69      	ldr	r3, [pc, #420]	; (8015ac8 <tcp_receive+0xf18>)
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	b29a      	uxth	r2, r3
 8015926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015928:	68db      	ldr	r3, [r3, #12]
 801592a:	685b      	ldr	r3, [r3, #4]
 801592c:	b29b      	uxth	r3, r3
 801592e:	1ad3      	subs	r3, r2, r3
 8015930:	b29a      	uxth	r2, r3
 8015932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015934:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8015936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015938:	685a      	ldr	r2, [r3, #4]
 801593a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801593c:	891b      	ldrh	r3, [r3, #8]
 801593e:	4619      	mov	r1, r3
 8015940:	4610      	mov	r0, r2
 8015942:	f7fb fc89 	bl	8011258 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8015946:	4b62      	ldr	r3, [pc, #392]	; (8015ad0 <tcp_receive+0xf20>)
 8015948:	881b      	ldrh	r3, [r3, #0]
 801594a:	461a      	mov	r2, r3
 801594c:	4b5e      	ldr	r3, [pc, #376]	; (8015ac8 <tcp_receive+0xf18>)
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	441a      	add	r2, r3
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015956:	6879      	ldr	r1, [r7, #4]
 8015958:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801595a:	440b      	add	r3, r1
 801595c:	1ad3      	subs	r3, r2, r3
 801595e:	2b00      	cmp	r3, #0
 8015960:	f340 8089 	ble.w	8015a76 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8015964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	68db      	ldr	r3, [r3, #12]
 801596a:	899b      	ldrh	r3, [r3, #12]
 801596c:	b29b      	uxth	r3, r3
 801596e:	4618      	mov	r0, r3
 8015970:	f7fa fa06 	bl	800fd80 <lwip_htons>
 8015974:	4603      	mov	r3, r0
 8015976:	b2db      	uxtb	r3, r3
 8015978:	f003 0301 	and.w	r3, r3, #1
 801597c:	2b00      	cmp	r3, #0
 801597e:	d022      	beq.n	80159c6 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	68db      	ldr	r3, [r3, #12]
 8015986:	899b      	ldrh	r3, [r3, #12]
 8015988:	b29b      	uxth	r3, r3
 801598a:	b21b      	sxth	r3, r3
 801598c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015990:	b21c      	sxth	r4, r3
 8015992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	68db      	ldr	r3, [r3, #12]
 8015998:	899b      	ldrh	r3, [r3, #12]
 801599a:	b29b      	uxth	r3, r3
 801599c:	4618      	mov	r0, r3
 801599e:	f7fa f9ef 	bl	800fd80 <lwip_htons>
 80159a2:	4603      	mov	r3, r0
 80159a4:	b2db      	uxtb	r3, r3
 80159a6:	b29b      	uxth	r3, r3
 80159a8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80159ac:	b29b      	uxth	r3, r3
 80159ae:	4618      	mov	r0, r3
 80159b0:	f7fa f9e6 	bl	800fd80 <lwip_htons>
 80159b4:	4603      	mov	r3, r0
 80159b6:	b21b      	sxth	r3, r3
 80159b8:	4323      	orrs	r3, r4
 80159ba:	b21a      	sxth	r2, r3
 80159bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	68db      	ldr	r3, [r3, #12]
 80159c2:	b292      	uxth	r2, r2
 80159c4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159ca:	b29a      	uxth	r2, r3
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80159d0:	4413      	add	r3, r2
 80159d2:	b299      	uxth	r1, r3
 80159d4:	4b3c      	ldr	r3, [pc, #240]	; (8015ac8 <tcp_receive+0xf18>)
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	b29a      	uxth	r2, r3
 80159da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	1a8a      	subs	r2, r1, r2
 80159e0:	b292      	uxth	r2, r2
 80159e2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80159e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	685a      	ldr	r2, [r3, #4]
 80159ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	891b      	ldrh	r3, [r3, #8]
 80159f0:	4619      	mov	r1, r3
 80159f2:	4610      	mov	r0, r2
 80159f4:	f7fb fc30 	bl	8011258 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80159f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	891c      	ldrh	r4, [r3, #8]
 80159fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	68db      	ldr	r3, [r3, #12]
 8015a04:	899b      	ldrh	r3, [r3, #12]
 8015a06:	b29b      	uxth	r3, r3
 8015a08:	4618      	mov	r0, r3
 8015a0a:	f7fa f9b9 	bl	800fd80 <lwip_htons>
 8015a0e:	4603      	mov	r3, r0
 8015a10:	b2db      	uxtb	r3, r3
 8015a12:	f003 0303 	and.w	r3, r3, #3
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d001      	beq.n	8015a1e <tcp_receive+0xe6e>
 8015a1a:	2301      	movs	r3, #1
 8015a1c:	e000      	b.n	8015a20 <tcp_receive+0xe70>
 8015a1e:	2300      	movs	r3, #0
 8015a20:	4423      	add	r3, r4
 8015a22:	b29a      	uxth	r2, r3
 8015a24:	4b2a      	ldr	r3, [pc, #168]	; (8015ad0 <tcp_receive+0xf20>)
 8015a26:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015a28:	4b29      	ldr	r3, [pc, #164]	; (8015ad0 <tcp_receive+0xf20>)
 8015a2a:	881b      	ldrh	r3, [r3, #0]
 8015a2c:	461a      	mov	r2, r3
 8015a2e:	4b26      	ldr	r3, [pc, #152]	; (8015ac8 <tcp_receive+0xf18>)
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	441a      	add	r2, r3
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a38:	6879      	ldr	r1, [r7, #4]
 8015a3a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015a3c:	440b      	add	r3, r1
 8015a3e:	429a      	cmp	r2, r3
 8015a40:	d019      	beq.n	8015a76 <tcp_receive+0xec6>
 8015a42:	4b24      	ldr	r3, [pc, #144]	; (8015ad4 <tcp_receive+0xf24>)
 8015a44:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8015a48:	4923      	ldr	r1, [pc, #140]	; (8015ad8 <tcp_receive+0xf28>)
 8015a4a:	4824      	ldr	r0, [pc, #144]	; (8015adc <tcp_receive+0xf2c>)
 8015a4c:	f005 f952 	bl	801acf4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015a50:	e011      	b.n	8015a76 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	63bb      	str	r3, [r7, #56]	; 0x38
 8015a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	f47f aea4 	bne.w	80157a8 <tcp_receive+0xbf8>
 8015a60:	e00a      	b.n	8015a78 <tcp_receive+0xec8>
                break;
 8015a62:	bf00      	nop
 8015a64:	e008      	b.n	8015a78 <tcp_receive+0xec8>
                break;
 8015a66:	bf00      	nop
 8015a68:	e006      	b.n	8015a78 <tcp_receive+0xec8>
                  break;
 8015a6a:	bf00      	nop
 8015a6c:	e004      	b.n	8015a78 <tcp_receive+0xec8>
                  break;
 8015a6e:	bf00      	nop
 8015a70:	e002      	b.n	8015a78 <tcp_receive+0xec8>
                  break;
 8015a72:	bf00      	nop
 8015a74:	e000      	b.n	8015a78 <tcp_receive+0xec8>
                break;
 8015a76:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015a78:	6878      	ldr	r0, [r7, #4]
 8015a7a:	f001 fe8b 	bl	8017794 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015a7e:	e003      	b.n	8015a88 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015a80:	6878      	ldr	r0, [r7, #4]
 8015a82:	f001 fe87 	bl	8017794 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015a86:	e01a      	b.n	8015abe <tcp_receive+0xf0e>
 8015a88:	e019      	b.n	8015abe <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015a8a:	4b0f      	ldr	r3, [pc, #60]	; (8015ac8 <tcp_receive+0xf18>)
 8015a8c:	681a      	ldr	r2, [r3, #0]
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a92:	1ad3      	subs	r3, r2, r3
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	db0a      	blt.n	8015aae <tcp_receive+0xefe>
 8015a98:	4b0b      	ldr	r3, [pc, #44]	; (8015ac8 <tcp_receive+0xf18>)
 8015a9a:	681a      	ldr	r2, [r3, #0]
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aa0:	6879      	ldr	r1, [r7, #4]
 8015aa2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015aa4:	440b      	add	r3, r1
 8015aa6:	1ad3      	subs	r3, r2, r3
 8015aa8:	3301      	adds	r3, #1
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	dd07      	ble.n	8015abe <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	8b5b      	ldrh	r3, [r3, #26]
 8015ab2:	f043 0302 	orr.w	r3, r3, #2
 8015ab6:	b29a      	uxth	r2, r3
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015abc:	e7ff      	b.n	8015abe <tcp_receive+0xf0e>
 8015abe:	bf00      	nop
 8015ac0:	3750      	adds	r7, #80	; 0x50
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	bdb0      	pop	{r4, r5, r7, pc}
 8015ac6:	bf00      	nop
 8015ac8:	200110c0 	.word	0x200110c0
 8015acc:	200110a0 	.word	0x200110a0
 8015ad0:	200110ca 	.word	0x200110ca
 8015ad4:	0801e178 	.word	0x0801e178
 8015ad8:	0801e520 	.word	0x0801e520
 8015adc:	0801e1c4 	.word	0x0801e1c4

08015ae0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015ae0:	b480      	push	{r7}
 8015ae2:	b083      	sub	sp, #12
 8015ae4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8015ae6:	4b15      	ldr	r3, [pc, #84]	; (8015b3c <tcp_get_next_optbyte+0x5c>)
 8015ae8:	881b      	ldrh	r3, [r3, #0]
 8015aea:	1c5a      	adds	r2, r3, #1
 8015aec:	b291      	uxth	r1, r2
 8015aee:	4a13      	ldr	r2, [pc, #76]	; (8015b3c <tcp_get_next_optbyte+0x5c>)
 8015af0:	8011      	strh	r1, [r2, #0]
 8015af2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015af4:	4b12      	ldr	r3, [pc, #72]	; (8015b40 <tcp_get_next_optbyte+0x60>)
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d004      	beq.n	8015b06 <tcp_get_next_optbyte+0x26>
 8015afc:	4b11      	ldr	r3, [pc, #68]	; (8015b44 <tcp_get_next_optbyte+0x64>)
 8015afe:	881b      	ldrh	r3, [r3, #0]
 8015b00:	88fa      	ldrh	r2, [r7, #6]
 8015b02:	429a      	cmp	r2, r3
 8015b04:	d208      	bcs.n	8015b18 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015b06:	4b10      	ldr	r3, [pc, #64]	; (8015b48 <tcp_get_next_optbyte+0x68>)
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	3314      	adds	r3, #20
 8015b0c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015b0e:	88fb      	ldrh	r3, [r7, #6]
 8015b10:	683a      	ldr	r2, [r7, #0]
 8015b12:	4413      	add	r3, r2
 8015b14:	781b      	ldrb	r3, [r3, #0]
 8015b16:	e00b      	b.n	8015b30 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015b18:	88fb      	ldrh	r3, [r7, #6]
 8015b1a:	b2da      	uxtb	r2, r3
 8015b1c:	4b09      	ldr	r3, [pc, #36]	; (8015b44 <tcp_get_next_optbyte+0x64>)
 8015b1e:	881b      	ldrh	r3, [r3, #0]
 8015b20:	b2db      	uxtb	r3, r3
 8015b22:	1ad3      	subs	r3, r2, r3
 8015b24:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015b26:	4b06      	ldr	r3, [pc, #24]	; (8015b40 <tcp_get_next_optbyte+0x60>)
 8015b28:	681a      	ldr	r2, [r3, #0]
 8015b2a:	797b      	ldrb	r3, [r7, #5]
 8015b2c:	4413      	add	r3, r2
 8015b2e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015b30:	4618      	mov	r0, r3
 8015b32:	370c      	adds	r7, #12
 8015b34:	46bd      	mov	sp, r7
 8015b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b3a:	4770      	bx	lr
 8015b3c:	200110bc 	.word	0x200110bc
 8015b40:	200110b8 	.word	0x200110b8
 8015b44:	200110b6 	.word	0x200110b6
 8015b48:	200110b0 	.word	0x200110b0

08015b4c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015b4c:	b580      	push	{r7, lr}
 8015b4e:	b084      	sub	sp, #16
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d106      	bne.n	8015b68 <tcp_parseopt+0x1c>
 8015b5a:	4b32      	ldr	r3, [pc, #200]	; (8015c24 <tcp_parseopt+0xd8>)
 8015b5c:	f240 727d 	movw	r2, #1917	; 0x77d
 8015b60:	4931      	ldr	r1, [pc, #196]	; (8015c28 <tcp_parseopt+0xdc>)
 8015b62:	4832      	ldr	r0, [pc, #200]	; (8015c2c <tcp_parseopt+0xe0>)
 8015b64:	f005 f8c6 	bl	801acf4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015b68:	4b31      	ldr	r3, [pc, #196]	; (8015c30 <tcp_parseopt+0xe4>)
 8015b6a:	881b      	ldrh	r3, [r3, #0]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d055      	beq.n	8015c1c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015b70:	4b30      	ldr	r3, [pc, #192]	; (8015c34 <tcp_parseopt+0xe8>)
 8015b72:	2200      	movs	r2, #0
 8015b74:	801a      	strh	r2, [r3, #0]
 8015b76:	e045      	b.n	8015c04 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8015b78:	f7ff ffb2 	bl	8015ae0 <tcp_get_next_optbyte>
 8015b7c:	4603      	mov	r3, r0
 8015b7e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015b80:	7bfb      	ldrb	r3, [r7, #15]
 8015b82:	2b02      	cmp	r3, #2
 8015b84:	d006      	beq.n	8015b94 <tcp_parseopt+0x48>
 8015b86:	2b02      	cmp	r3, #2
 8015b88:	dc2b      	bgt.n	8015be2 <tcp_parseopt+0x96>
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d041      	beq.n	8015c12 <tcp_parseopt+0xc6>
 8015b8e:	2b01      	cmp	r3, #1
 8015b90:	d127      	bne.n	8015be2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8015b92:	e037      	b.n	8015c04 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015b94:	f7ff ffa4 	bl	8015ae0 <tcp_get_next_optbyte>
 8015b98:	4603      	mov	r3, r0
 8015b9a:	2b04      	cmp	r3, #4
 8015b9c:	d13b      	bne.n	8015c16 <tcp_parseopt+0xca>
 8015b9e:	4b25      	ldr	r3, [pc, #148]	; (8015c34 <tcp_parseopt+0xe8>)
 8015ba0:	881b      	ldrh	r3, [r3, #0]
 8015ba2:	3301      	adds	r3, #1
 8015ba4:	4a22      	ldr	r2, [pc, #136]	; (8015c30 <tcp_parseopt+0xe4>)
 8015ba6:	8812      	ldrh	r2, [r2, #0]
 8015ba8:	4293      	cmp	r3, r2
 8015baa:	da34      	bge.n	8015c16 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015bac:	f7ff ff98 	bl	8015ae0 <tcp_get_next_optbyte>
 8015bb0:	4603      	mov	r3, r0
 8015bb2:	b29b      	uxth	r3, r3
 8015bb4:	021b      	lsls	r3, r3, #8
 8015bb6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015bb8:	f7ff ff92 	bl	8015ae0 <tcp_get_next_optbyte>
 8015bbc:	4603      	mov	r3, r0
 8015bbe:	b29a      	uxth	r2, r3
 8015bc0:	89bb      	ldrh	r3, [r7, #12]
 8015bc2:	4313      	orrs	r3, r2
 8015bc4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015bc6:	89bb      	ldrh	r3, [r7, #12]
 8015bc8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8015bcc:	d804      	bhi.n	8015bd8 <tcp_parseopt+0x8c>
 8015bce:	89bb      	ldrh	r3, [r7, #12]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d001      	beq.n	8015bd8 <tcp_parseopt+0x8c>
 8015bd4:	89ba      	ldrh	r2, [r7, #12]
 8015bd6:	e001      	b.n	8015bdc <tcp_parseopt+0x90>
 8015bd8:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8015be0:	e010      	b.n	8015c04 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8015be2:	f7ff ff7d 	bl	8015ae0 <tcp_get_next_optbyte>
 8015be6:	4603      	mov	r3, r0
 8015be8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8015bea:	7afb      	ldrb	r3, [r7, #11]
 8015bec:	2b01      	cmp	r3, #1
 8015bee:	d914      	bls.n	8015c1a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015bf0:	7afb      	ldrb	r3, [r7, #11]
 8015bf2:	b29a      	uxth	r2, r3
 8015bf4:	4b0f      	ldr	r3, [pc, #60]	; (8015c34 <tcp_parseopt+0xe8>)
 8015bf6:	881b      	ldrh	r3, [r3, #0]
 8015bf8:	4413      	add	r3, r2
 8015bfa:	b29b      	uxth	r3, r3
 8015bfc:	3b02      	subs	r3, #2
 8015bfe:	b29a      	uxth	r2, r3
 8015c00:	4b0c      	ldr	r3, [pc, #48]	; (8015c34 <tcp_parseopt+0xe8>)
 8015c02:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015c04:	4b0b      	ldr	r3, [pc, #44]	; (8015c34 <tcp_parseopt+0xe8>)
 8015c06:	881a      	ldrh	r2, [r3, #0]
 8015c08:	4b09      	ldr	r3, [pc, #36]	; (8015c30 <tcp_parseopt+0xe4>)
 8015c0a:	881b      	ldrh	r3, [r3, #0]
 8015c0c:	429a      	cmp	r2, r3
 8015c0e:	d3b3      	bcc.n	8015b78 <tcp_parseopt+0x2c>
 8015c10:	e004      	b.n	8015c1c <tcp_parseopt+0xd0>
          return;
 8015c12:	bf00      	nop
 8015c14:	e002      	b.n	8015c1c <tcp_parseopt+0xd0>
            return;
 8015c16:	bf00      	nop
 8015c18:	e000      	b.n	8015c1c <tcp_parseopt+0xd0>
            return;
 8015c1a:	bf00      	nop
      }
    }
  }
}
 8015c1c:	3710      	adds	r7, #16
 8015c1e:	46bd      	mov	sp, r7
 8015c20:	bd80      	pop	{r7, pc}
 8015c22:	bf00      	nop
 8015c24:	0801e178 	.word	0x0801e178
 8015c28:	0801e5dc 	.word	0x0801e5dc
 8015c2c:	0801e1c4 	.word	0x0801e1c4
 8015c30:	200110b4 	.word	0x200110b4
 8015c34:	200110bc 	.word	0x200110bc

08015c38 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015c38:	b480      	push	{r7}
 8015c3a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015c3c:	4b05      	ldr	r3, [pc, #20]	; (8015c54 <tcp_trigger_input_pcb_close+0x1c>)
 8015c3e:	781b      	ldrb	r3, [r3, #0]
 8015c40:	f043 0310 	orr.w	r3, r3, #16
 8015c44:	b2da      	uxtb	r2, r3
 8015c46:	4b03      	ldr	r3, [pc, #12]	; (8015c54 <tcp_trigger_input_pcb_close+0x1c>)
 8015c48:	701a      	strb	r2, [r3, #0]
}
 8015c4a:	bf00      	nop
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c52:	4770      	bx	lr
 8015c54:	200110cd 	.word	0x200110cd

08015c58 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015c58:	b580      	push	{r7, lr}
 8015c5a:	b084      	sub	sp, #16
 8015c5c:	af00      	add	r7, sp, #0
 8015c5e:	60f8      	str	r0, [r7, #12]
 8015c60:	60b9      	str	r1, [r7, #8]
 8015c62:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d00a      	beq.n	8015c80 <tcp_route+0x28>
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	7a1b      	ldrb	r3, [r3, #8]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d006      	beq.n	8015c80 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	7a1b      	ldrb	r3, [r3, #8]
 8015c76:	4618      	mov	r0, r3
 8015c78:	f7fb f8e6 	bl	8010e48 <netif_get_by_index>
 8015c7c:	4603      	mov	r3, r0
 8015c7e:	e003      	b.n	8015c88 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015c80:	6878      	ldr	r0, [r7, #4]
 8015c82:	f003 fc4b 	bl	801951c <ip4_route>
 8015c86:	4603      	mov	r3, r0
  }
}
 8015c88:	4618      	mov	r0, r3
 8015c8a:	3710      	adds	r7, #16
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	bd80      	pop	{r7, pc}

08015c90 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015c90:	b590      	push	{r4, r7, lr}
 8015c92:	b087      	sub	sp, #28
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	60f8      	str	r0, [r7, #12]
 8015c98:	60b9      	str	r1, [r7, #8]
 8015c9a:	603b      	str	r3, [r7, #0]
 8015c9c:	4613      	mov	r3, r2
 8015c9e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d105      	bne.n	8015cb2 <tcp_create_segment+0x22>
 8015ca6:	4b44      	ldr	r3, [pc, #272]	; (8015db8 <tcp_create_segment+0x128>)
 8015ca8:	22a3      	movs	r2, #163	; 0xa3
 8015caa:	4944      	ldr	r1, [pc, #272]	; (8015dbc <tcp_create_segment+0x12c>)
 8015cac:	4844      	ldr	r0, [pc, #272]	; (8015dc0 <tcp_create_segment+0x130>)
 8015cae:	f005 f821 	bl	801acf4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015cb2:	68bb      	ldr	r3, [r7, #8]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d105      	bne.n	8015cc4 <tcp_create_segment+0x34>
 8015cb8:	4b3f      	ldr	r3, [pc, #252]	; (8015db8 <tcp_create_segment+0x128>)
 8015cba:	22a4      	movs	r2, #164	; 0xa4
 8015cbc:	4941      	ldr	r1, [pc, #260]	; (8015dc4 <tcp_create_segment+0x134>)
 8015cbe:	4840      	ldr	r0, [pc, #256]	; (8015dc0 <tcp_create_segment+0x130>)
 8015cc0:	f005 f818 	bl	801acf4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015cc4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015cc8:	009b      	lsls	r3, r3, #2
 8015cca:	b2db      	uxtb	r3, r3
 8015ccc:	f003 0304 	and.w	r3, r3, #4
 8015cd0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015cd2:	2003      	movs	r0, #3
 8015cd4:	f7fa fd2c 	bl	8010730 <memp_malloc>
 8015cd8:	6138      	str	r0, [r7, #16]
 8015cda:	693b      	ldr	r3, [r7, #16]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d104      	bne.n	8015cea <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015ce0:	68b8      	ldr	r0, [r7, #8]
 8015ce2:	f7fb fc71 	bl	80115c8 <pbuf_free>
    return NULL;
 8015ce6:	2300      	movs	r3, #0
 8015ce8:	e061      	b.n	8015dae <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8015cea:	693b      	ldr	r3, [r7, #16]
 8015cec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015cf0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015cf2:	693b      	ldr	r3, [r7, #16]
 8015cf4:	2200      	movs	r2, #0
 8015cf6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015cf8:	693b      	ldr	r3, [r7, #16]
 8015cfa:	68ba      	ldr	r2, [r7, #8]
 8015cfc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015cfe:	68bb      	ldr	r3, [r7, #8]
 8015d00:	891a      	ldrh	r2, [r3, #8]
 8015d02:	7dfb      	ldrb	r3, [r7, #23]
 8015d04:	b29b      	uxth	r3, r3
 8015d06:	429a      	cmp	r2, r3
 8015d08:	d205      	bcs.n	8015d16 <tcp_create_segment+0x86>
 8015d0a:	4b2b      	ldr	r3, [pc, #172]	; (8015db8 <tcp_create_segment+0x128>)
 8015d0c:	22b0      	movs	r2, #176	; 0xb0
 8015d0e:	492e      	ldr	r1, [pc, #184]	; (8015dc8 <tcp_create_segment+0x138>)
 8015d10:	482b      	ldr	r0, [pc, #172]	; (8015dc0 <tcp_create_segment+0x130>)
 8015d12:	f004 ffef 	bl	801acf4 <iprintf>
  seg->len = p->tot_len - optlen;
 8015d16:	68bb      	ldr	r3, [r7, #8]
 8015d18:	891a      	ldrh	r2, [r3, #8]
 8015d1a:	7dfb      	ldrb	r3, [r7, #23]
 8015d1c:	b29b      	uxth	r3, r3
 8015d1e:	1ad3      	subs	r3, r2, r3
 8015d20:	b29a      	uxth	r2, r3
 8015d22:	693b      	ldr	r3, [r7, #16]
 8015d24:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8015d26:	2114      	movs	r1, #20
 8015d28:	68b8      	ldr	r0, [r7, #8]
 8015d2a:	f7fb fb85 	bl	8011438 <pbuf_add_header>
 8015d2e:	4603      	mov	r3, r0
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d004      	beq.n	8015d3e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015d34:	6938      	ldr	r0, [r7, #16]
 8015d36:	f7fd f800 	bl	8012d3a <tcp_seg_free>
    return NULL;
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	e037      	b.n	8015dae <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015d3e:	693b      	ldr	r3, [r7, #16]
 8015d40:	685b      	ldr	r3, [r3, #4]
 8015d42:	685a      	ldr	r2, [r3, #4]
 8015d44:	693b      	ldr	r3, [r7, #16]
 8015d46:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	8ada      	ldrh	r2, [r3, #22]
 8015d4c:	693b      	ldr	r3, [r7, #16]
 8015d4e:	68dc      	ldr	r4, [r3, #12]
 8015d50:	4610      	mov	r0, r2
 8015d52:	f7fa f815 	bl	800fd80 <lwip_htons>
 8015d56:	4603      	mov	r3, r0
 8015d58:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	8b1a      	ldrh	r2, [r3, #24]
 8015d5e:	693b      	ldr	r3, [r7, #16]
 8015d60:	68dc      	ldr	r4, [r3, #12]
 8015d62:	4610      	mov	r0, r2
 8015d64:	f7fa f80c 	bl	800fd80 <lwip_htons>
 8015d68:	4603      	mov	r3, r0
 8015d6a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015d6c:	693b      	ldr	r3, [r7, #16]
 8015d6e:	68dc      	ldr	r4, [r3, #12]
 8015d70:	6838      	ldr	r0, [r7, #0]
 8015d72:	f7fa f81a 	bl	800fdaa <lwip_htonl>
 8015d76:	4603      	mov	r3, r0
 8015d78:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8015d7a:	7dfb      	ldrb	r3, [r7, #23]
 8015d7c:	089b      	lsrs	r3, r3, #2
 8015d7e:	b2db      	uxtb	r3, r3
 8015d80:	b29b      	uxth	r3, r3
 8015d82:	3305      	adds	r3, #5
 8015d84:	b29b      	uxth	r3, r3
 8015d86:	031b      	lsls	r3, r3, #12
 8015d88:	b29a      	uxth	r2, r3
 8015d8a:	79fb      	ldrb	r3, [r7, #7]
 8015d8c:	b29b      	uxth	r3, r3
 8015d8e:	4313      	orrs	r3, r2
 8015d90:	b29a      	uxth	r2, r3
 8015d92:	693b      	ldr	r3, [r7, #16]
 8015d94:	68dc      	ldr	r4, [r3, #12]
 8015d96:	4610      	mov	r0, r2
 8015d98:	f7f9 fff2 	bl	800fd80 <lwip_htons>
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015da0:	693b      	ldr	r3, [r7, #16]
 8015da2:	68db      	ldr	r3, [r3, #12]
 8015da4:	2200      	movs	r2, #0
 8015da6:	749a      	strb	r2, [r3, #18]
 8015da8:	2200      	movs	r2, #0
 8015daa:	74da      	strb	r2, [r3, #19]
  return seg;
 8015dac:	693b      	ldr	r3, [r7, #16]
}
 8015dae:	4618      	mov	r0, r3
 8015db0:	371c      	adds	r7, #28
 8015db2:	46bd      	mov	sp, r7
 8015db4:	bd90      	pop	{r4, r7, pc}
 8015db6:	bf00      	nop
 8015db8:	0801e5f8 	.word	0x0801e5f8
 8015dbc:	0801e62c 	.word	0x0801e62c
 8015dc0:	0801e64c 	.word	0x0801e64c
 8015dc4:	0801e674 	.word	0x0801e674
 8015dc8:	0801e698 	.word	0x0801e698

08015dcc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8015dcc:	b580      	push	{r7, lr}
 8015dce:	b086      	sub	sp, #24
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	607b      	str	r3, [r7, #4]
 8015dd4:	4603      	mov	r3, r0
 8015dd6:	73fb      	strb	r3, [r7, #15]
 8015dd8:	460b      	mov	r3, r1
 8015dda:	81bb      	strh	r3, [r7, #12]
 8015ddc:	4613      	mov	r3, r2
 8015dde:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8015de0:	89bb      	ldrh	r3, [r7, #12]
 8015de2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d105      	bne.n	8015df6 <tcp_pbuf_prealloc+0x2a>
 8015dea:	4b30      	ldr	r3, [pc, #192]	; (8015eac <tcp_pbuf_prealloc+0xe0>)
 8015dec:	22e8      	movs	r2, #232	; 0xe8
 8015dee:	4930      	ldr	r1, [pc, #192]	; (8015eb0 <tcp_pbuf_prealloc+0xe4>)
 8015df0:	4830      	ldr	r0, [pc, #192]	; (8015eb4 <tcp_pbuf_prealloc+0xe8>)
 8015df2:	f004 ff7f 	bl	801acf4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8015df6:	6a3b      	ldr	r3, [r7, #32]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d105      	bne.n	8015e08 <tcp_pbuf_prealloc+0x3c>
 8015dfc:	4b2b      	ldr	r3, [pc, #172]	; (8015eac <tcp_pbuf_prealloc+0xe0>)
 8015dfe:	22e9      	movs	r2, #233	; 0xe9
 8015e00:	492d      	ldr	r1, [pc, #180]	; (8015eb8 <tcp_pbuf_prealloc+0xec>)
 8015e02:	482c      	ldr	r0, [pc, #176]	; (8015eb4 <tcp_pbuf_prealloc+0xe8>)
 8015e04:	f004 ff76 	bl	801acf4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015e08:	89ba      	ldrh	r2, [r7, #12]
 8015e0a:	897b      	ldrh	r3, [r7, #10]
 8015e0c:	429a      	cmp	r2, r3
 8015e0e:	d221      	bcs.n	8015e54 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015e10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015e14:	f003 0302 	and.w	r3, r3, #2
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d111      	bne.n	8015e40 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8015e1c:	6a3b      	ldr	r3, [r7, #32]
 8015e1e:	8b5b      	ldrh	r3, [r3, #26]
 8015e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d115      	bne.n	8015e54 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8015e28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d007      	beq.n	8015e40 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015e30:	6a3b      	ldr	r3, [r7, #32]
 8015e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d103      	bne.n	8015e40 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8015e38:	6a3b      	ldr	r3, [r7, #32]
 8015e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d009      	beq.n	8015e54 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015e40:	89bb      	ldrh	r3, [r7, #12]
 8015e42:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8015e46:	f023 0203 	bic.w	r2, r3, #3
 8015e4a:	897b      	ldrh	r3, [r7, #10]
 8015e4c:	4293      	cmp	r3, r2
 8015e4e:	bf28      	it	cs
 8015e50:	4613      	movcs	r3, r2
 8015e52:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8015e54:	8af9      	ldrh	r1, [r7, #22]
 8015e56:	7bfb      	ldrb	r3, [r7, #15]
 8015e58:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	f7fb f89d 	bl	8010f9c <pbuf_alloc>
 8015e62:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015e64:	693b      	ldr	r3, [r7, #16]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d101      	bne.n	8015e6e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8015e6a:	2300      	movs	r3, #0
 8015e6c:	e019      	b.n	8015ea2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8015e6e:	693b      	ldr	r3, [r7, #16]
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d006      	beq.n	8015e84 <tcp_pbuf_prealloc+0xb8>
 8015e76:	4b0d      	ldr	r3, [pc, #52]	; (8015eac <tcp_pbuf_prealloc+0xe0>)
 8015e78:	f240 120b 	movw	r2, #267	; 0x10b
 8015e7c:	490f      	ldr	r1, [pc, #60]	; (8015ebc <tcp_pbuf_prealloc+0xf0>)
 8015e7e:	480d      	ldr	r0, [pc, #52]	; (8015eb4 <tcp_pbuf_prealloc+0xe8>)
 8015e80:	f004 ff38 	bl	801acf4 <iprintf>
  *oversize = p->len - length;
 8015e84:	693b      	ldr	r3, [r7, #16]
 8015e86:	895a      	ldrh	r2, [r3, #10]
 8015e88:	89bb      	ldrh	r3, [r7, #12]
 8015e8a:	1ad3      	subs	r3, r2, r3
 8015e8c:	b29a      	uxth	r2, r3
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8015e92:	693b      	ldr	r3, [r7, #16]
 8015e94:	89ba      	ldrh	r2, [r7, #12]
 8015e96:	811a      	strh	r2, [r3, #8]
 8015e98:	693b      	ldr	r3, [r7, #16]
 8015e9a:	891a      	ldrh	r2, [r3, #8]
 8015e9c:	693b      	ldr	r3, [r7, #16]
 8015e9e:	815a      	strh	r2, [r3, #10]
  return p;
 8015ea0:	693b      	ldr	r3, [r7, #16]
}
 8015ea2:	4618      	mov	r0, r3
 8015ea4:	3718      	adds	r7, #24
 8015ea6:	46bd      	mov	sp, r7
 8015ea8:	bd80      	pop	{r7, pc}
 8015eaa:	bf00      	nop
 8015eac:	0801e5f8 	.word	0x0801e5f8
 8015eb0:	0801e6b0 	.word	0x0801e6b0
 8015eb4:	0801e64c 	.word	0x0801e64c
 8015eb8:	0801e6d4 	.word	0x0801e6d4
 8015ebc:	0801e6f4 	.word	0x0801e6f4

08015ec0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8015ec0:	b580      	push	{r7, lr}
 8015ec2:	b082      	sub	sp, #8
 8015ec4:	af00      	add	r7, sp, #0
 8015ec6:	6078      	str	r0, [r7, #4]
 8015ec8:	460b      	mov	r3, r1
 8015eca:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d106      	bne.n	8015ee0 <tcp_write_checks+0x20>
 8015ed2:	4b33      	ldr	r3, [pc, #204]	; (8015fa0 <tcp_write_checks+0xe0>)
 8015ed4:	f240 1233 	movw	r2, #307	; 0x133
 8015ed8:	4932      	ldr	r1, [pc, #200]	; (8015fa4 <tcp_write_checks+0xe4>)
 8015eda:	4833      	ldr	r0, [pc, #204]	; (8015fa8 <tcp_write_checks+0xe8>)
 8015edc:	f004 ff0a 	bl	801acf4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	7d1b      	ldrb	r3, [r3, #20]
 8015ee4:	2b04      	cmp	r3, #4
 8015ee6:	d00e      	beq.n	8015f06 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015eec:	2b07      	cmp	r3, #7
 8015eee:	d00a      	beq.n	8015f06 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8015ef4:	2b02      	cmp	r3, #2
 8015ef6:	d006      	beq.n	8015f06 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8015efc:	2b03      	cmp	r3, #3
 8015efe:	d002      	beq.n	8015f06 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8015f00:	f06f 030a 	mvn.w	r3, #10
 8015f04:	e048      	b.n	8015f98 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8015f06:	887b      	ldrh	r3, [r7, #2]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d101      	bne.n	8015f10 <tcp_write_checks+0x50>
    return ERR_OK;
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	e043      	b.n	8015f98 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015f16:	887a      	ldrh	r2, [r7, #2]
 8015f18:	429a      	cmp	r2, r3
 8015f1a:	d909      	bls.n	8015f30 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	8b5b      	ldrh	r3, [r3, #26]
 8015f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f24:	b29a      	uxth	r2, r3
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8015f2e:	e033      	b.n	8015f98 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015f36:	2b08      	cmp	r3, #8
 8015f38:	d909      	bls.n	8015f4e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	8b5b      	ldrh	r3, [r3, #26]
 8015f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f42:	b29a      	uxth	r2, r3
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015f48:	f04f 33ff 	mov.w	r3, #4294967295
 8015f4c:	e024      	b.n	8015f98 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d00f      	beq.n	8015f78 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d11a      	bne.n	8015f96 <tcp_write_checks+0xd6>
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d116      	bne.n	8015f96 <tcp_write_checks+0xd6>
 8015f68:	4b0d      	ldr	r3, [pc, #52]	; (8015fa0 <tcp_write_checks+0xe0>)
 8015f6a:	f240 1255 	movw	r2, #341	; 0x155
 8015f6e:	490f      	ldr	r1, [pc, #60]	; (8015fac <tcp_write_checks+0xec>)
 8015f70:	480d      	ldr	r0, [pc, #52]	; (8015fa8 <tcp_write_checks+0xe8>)
 8015f72:	f004 febf 	bl	801acf4 <iprintf>
 8015f76:	e00e      	b.n	8015f96 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d103      	bne.n	8015f88 <tcp_write_checks+0xc8>
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d006      	beq.n	8015f96 <tcp_write_checks+0xd6>
 8015f88:	4b05      	ldr	r3, [pc, #20]	; (8015fa0 <tcp_write_checks+0xe0>)
 8015f8a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8015f8e:	4908      	ldr	r1, [pc, #32]	; (8015fb0 <tcp_write_checks+0xf0>)
 8015f90:	4805      	ldr	r0, [pc, #20]	; (8015fa8 <tcp_write_checks+0xe8>)
 8015f92:	f004 feaf 	bl	801acf4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8015f96:	2300      	movs	r3, #0
}
 8015f98:	4618      	mov	r0, r3
 8015f9a:	3708      	adds	r7, #8
 8015f9c:	46bd      	mov	sp, r7
 8015f9e:	bd80      	pop	{r7, pc}
 8015fa0:	0801e5f8 	.word	0x0801e5f8
 8015fa4:	0801e708 	.word	0x0801e708
 8015fa8:	0801e64c 	.word	0x0801e64c
 8015fac:	0801e728 	.word	0x0801e728
 8015fb0:	0801e764 	.word	0x0801e764

08015fb4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8015fb4:	b590      	push	{r4, r7, lr}
 8015fb6:	b09b      	sub	sp, #108	; 0x6c
 8015fb8:	af04      	add	r7, sp, #16
 8015fba:	60f8      	str	r0, [r7, #12]
 8015fbc:	60b9      	str	r1, [r7, #8]
 8015fbe:	4611      	mov	r1, r2
 8015fc0:	461a      	mov	r2, r3
 8015fc2:	460b      	mov	r3, r1
 8015fc4:	80fb      	strh	r3, [r7, #6]
 8015fc6:	4613      	mov	r3, r2
 8015fc8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8015fca:	2300      	movs	r3, #0
 8015fcc:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8015fce:	2300      	movs	r3, #0
 8015fd0:	653b      	str	r3, [r7, #80]	; 0x50
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8015fda:	2300      	movs	r3, #0
 8015fdc:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8015fde:	2300      	movs	r3, #0
 8015fe0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8015fea:	2300      	movs	r3, #0
 8015fec:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8015fee:	2300      	movs	r3, #0
 8015ff0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8015ff2:	2300      	movs	r3, #0
 8015ff4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d109      	bne.n	8016010 <tcp_write+0x5c>
 8015ffc:	4ba4      	ldr	r3, [pc, #656]	; (8016290 <tcp_write+0x2dc>)
 8015ffe:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8016002:	49a4      	ldr	r1, [pc, #656]	; (8016294 <tcp_write+0x2e0>)
 8016004:	48a4      	ldr	r0, [pc, #656]	; (8016298 <tcp_write+0x2e4>)
 8016006:	f004 fe75 	bl	801acf4 <iprintf>
 801600a:	f06f 030f 	mvn.w	r3, #15
 801600e:	e32a      	b.n	8016666 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8016016:	085b      	lsrs	r3, r3, #1
 8016018:	b29a      	uxth	r2, r3
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801601e:	4293      	cmp	r3, r2
 8016020:	bf28      	it	cs
 8016022:	4613      	movcs	r3, r2
 8016024:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8016026:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016028:	2b00      	cmp	r3, #0
 801602a:	d102      	bne.n	8016032 <tcp_write+0x7e>
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016030:	e000      	b.n	8016034 <tcp_write+0x80>
 8016032:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016034:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8016036:	68bb      	ldr	r3, [r7, #8]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d109      	bne.n	8016050 <tcp_write+0x9c>
 801603c:	4b94      	ldr	r3, [pc, #592]	; (8016290 <tcp_write+0x2dc>)
 801603e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8016042:	4996      	ldr	r1, [pc, #600]	; (801629c <tcp_write+0x2e8>)
 8016044:	4894      	ldr	r0, [pc, #592]	; (8016298 <tcp_write+0x2e4>)
 8016046:	f004 fe55 	bl	801acf4 <iprintf>
 801604a:	f06f 030f 	mvn.w	r3, #15
 801604e:	e30a      	b.n	8016666 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8016050:	88fb      	ldrh	r3, [r7, #6]
 8016052:	4619      	mov	r1, r3
 8016054:	68f8      	ldr	r0, [r7, #12]
 8016056:	f7ff ff33 	bl	8015ec0 <tcp_write_checks>
 801605a:	4603      	mov	r3, r0
 801605c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8016060:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8016064:	2b00      	cmp	r3, #0
 8016066:	d002      	beq.n	801606e <tcp_write+0xba>
    return err;
 8016068:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801606c:	e2fb      	b.n	8016666 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016074:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016078:	2300      	movs	r3, #0
 801607a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016082:	2b00      	cmp	r3, #0
 8016084:	f000 80f6 	beq.w	8016274 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801608c:	653b      	str	r3, [r7, #80]	; 0x50
 801608e:	e002      	b.n	8016096 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8016090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d1f8      	bne.n	8016090 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801609e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160a0:	7a9b      	ldrb	r3, [r3, #10]
 80160a2:	009b      	lsls	r3, r3, #2
 80160a4:	b29b      	uxth	r3, r3
 80160a6:	f003 0304 	and.w	r3, r3, #4
 80160aa:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80160ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80160ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160b0:	891b      	ldrh	r3, [r3, #8]
 80160b2:	4619      	mov	r1, r3
 80160b4:	8c3b      	ldrh	r3, [r7, #32]
 80160b6:	440b      	add	r3, r1
 80160b8:	429a      	cmp	r2, r3
 80160ba:	da06      	bge.n	80160ca <tcp_write+0x116>
 80160bc:	4b74      	ldr	r3, [pc, #464]	; (8016290 <tcp_write+0x2dc>)
 80160be:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80160c2:	4977      	ldr	r1, [pc, #476]	; (80162a0 <tcp_write+0x2ec>)
 80160c4:	4874      	ldr	r0, [pc, #464]	; (8016298 <tcp_write+0x2e4>)
 80160c6:	f004 fe15 	bl	801acf4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80160ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160cc:	891a      	ldrh	r2, [r3, #8]
 80160ce:	8c3b      	ldrh	r3, [r7, #32]
 80160d0:	4413      	add	r3, r2
 80160d2:	b29b      	uxth	r3, r3
 80160d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80160d6:	1ad3      	subs	r3, r2, r3
 80160d8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80160e0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80160e2:	8a7b      	ldrh	r3, [r7, #18]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d026      	beq.n	8016136 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80160e8:	8a7b      	ldrh	r3, [r7, #18]
 80160ea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80160ec:	429a      	cmp	r2, r3
 80160ee:	d206      	bcs.n	80160fe <tcp_write+0x14a>
 80160f0:	4b67      	ldr	r3, [pc, #412]	; (8016290 <tcp_write+0x2dc>)
 80160f2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80160f6:	496b      	ldr	r1, [pc, #428]	; (80162a4 <tcp_write+0x2f0>)
 80160f8:	4867      	ldr	r0, [pc, #412]	; (8016298 <tcp_write+0x2e4>)
 80160fa:	f004 fdfb 	bl	801acf4 <iprintf>
      seg = last_unsent;
 80160fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016100:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8016102:	8a7b      	ldrh	r3, [r7, #18]
 8016104:	88fa      	ldrh	r2, [r7, #6]
 8016106:	4293      	cmp	r3, r2
 8016108:	bf28      	it	cs
 801610a:	4613      	movcs	r3, r2
 801610c:	b29b      	uxth	r3, r3
 801610e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016110:	4293      	cmp	r3, r2
 8016112:	bf28      	it	cs
 8016114:	4613      	movcs	r3, r2
 8016116:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8016118:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801611c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801611e:	4413      	add	r3, r2
 8016120:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8016124:	8a7a      	ldrh	r2, [r7, #18]
 8016126:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016128:	1ad3      	subs	r3, r2, r3
 801612a:	b29b      	uxth	r3, r3
 801612c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801612e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016130:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016132:	1ad3      	subs	r3, r2, r3
 8016134:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8016136:	8a7b      	ldrh	r3, [r7, #18]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d00b      	beq.n	8016154 <tcp_write+0x1a0>
 801613c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016140:	88fb      	ldrh	r3, [r7, #6]
 8016142:	429a      	cmp	r2, r3
 8016144:	d006      	beq.n	8016154 <tcp_write+0x1a0>
 8016146:	4b52      	ldr	r3, [pc, #328]	; (8016290 <tcp_write+0x2dc>)
 8016148:	f44f 7200 	mov.w	r2, #512	; 0x200
 801614c:	4956      	ldr	r1, [pc, #344]	; (80162a8 <tcp_write+0x2f4>)
 801614e:	4852      	ldr	r0, [pc, #328]	; (8016298 <tcp_write+0x2e4>)
 8016150:	f004 fdd0 	bl	801acf4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8016154:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016158:	88fb      	ldrh	r3, [r7, #6]
 801615a:	429a      	cmp	r2, r3
 801615c:	f080 8167 	bcs.w	801642e <tcp_write+0x47a>
 8016160:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016162:	2b00      	cmp	r3, #0
 8016164:	f000 8163 	beq.w	801642e <tcp_write+0x47a>
 8016168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801616a:	891b      	ldrh	r3, [r3, #8]
 801616c:	2b00      	cmp	r3, #0
 801616e:	f000 815e 	beq.w	801642e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8016172:	88fa      	ldrh	r2, [r7, #6]
 8016174:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016178:	1ad2      	subs	r2, r2, r3
 801617a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801617c:	4293      	cmp	r3, r2
 801617e:	bfa8      	it	ge
 8016180:	4613      	movge	r3, r2
 8016182:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8016184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016186:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016188:	797b      	ldrb	r3, [r7, #5]
 801618a:	f003 0301 	and.w	r3, r3, #1
 801618e:	2b00      	cmp	r3, #0
 8016190:	d027      	beq.n	80161e2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8016192:	f107 0012 	add.w	r0, r7, #18
 8016196:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016198:	8bf9      	ldrh	r1, [r7, #30]
 801619a:	2301      	movs	r3, #1
 801619c:	9302      	str	r3, [sp, #8]
 801619e:	797b      	ldrb	r3, [r7, #5]
 80161a0:	9301      	str	r3, [sp, #4]
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	9300      	str	r3, [sp, #0]
 80161a6:	4603      	mov	r3, r0
 80161a8:	2000      	movs	r0, #0
 80161aa:	f7ff fe0f 	bl	8015dcc <tcp_pbuf_prealloc>
 80161ae:	6578      	str	r0, [r7, #84]	; 0x54
 80161b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	f000 8225 	beq.w	8016602 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80161b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80161ba:	6858      	ldr	r0, [r3, #4]
 80161bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80161c0:	68ba      	ldr	r2, [r7, #8]
 80161c2:	4413      	add	r3, r2
 80161c4:	8bfa      	ldrh	r2, [r7, #30]
 80161c6:	4619      	mov	r1, r3
 80161c8:	f004 fd7e 	bl	801acc8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80161cc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80161ce:	f7fb fa89 	bl	80116e4 <pbuf_clen>
 80161d2:	4603      	mov	r3, r0
 80161d4:	461a      	mov	r2, r3
 80161d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80161da:	4413      	add	r3, r2
 80161dc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80161e0:	e041      	b.n	8016266 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80161e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80161e4:	685b      	ldr	r3, [r3, #4]
 80161e6:	637b      	str	r3, [r7, #52]	; 0x34
 80161e8:	e002      	b.n	80161f0 <tcp_write+0x23c>
 80161ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	637b      	str	r3, [r7, #52]	; 0x34
 80161f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d1f8      	bne.n	80161ea <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80161f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161fa:	7b1b      	ldrb	r3, [r3, #12]
 80161fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8016200:	2b00      	cmp	r3, #0
 8016202:	d115      	bne.n	8016230 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8016204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016206:	685b      	ldr	r3, [r3, #4]
 8016208:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801620a:	8952      	ldrh	r2, [r2, #10]
 801620c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801620e:	68ba      	ldr	r2, [r7, #8]
 8016210:	429a      	cmp	r2, r3
 8016212:	d10d      	bne.n	8016230 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8016214:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016218:	2b00      	cmp	r3, #0
 801621a:	d006      	beq.n	801622a <tcp_write+0x276>
 801621c:	4b1c      	ldr	r3, [pc, #112]	; (8016290 <tcp_write+0x2dc>)
 801621e:	f240 2231 	movw	r2, #561	; 0x231
 8016222:	4922      	ldr	r1, [pc, #136]	; (80162ac <tcp_write+0x2f8>)
 8016224:	481c      	ldr	r0, [pc, #112]	; (8016298 <tcp_write+0x2e4>)
 8016226:	f004 fd65 	bl	801acf4 <iprintf>
          extendlen = seglen;
 801622a:	8bfb      	ldrh	r3, [r7, #30]
 801622c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801622e:	e01a      	b.n	8016266 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8016230:	8bfb      	ldrh	r3, [r7, #30]
 8016232:	2201      	movs	r2, #1
 8016234:	4619      	mov	r1, r3
 8016236:	2000      	movs	r0, #0
 8016238:	f7fa feb0 	bl	8010f9c <pbuf_alloc>
 801623c:	6578      	str	r0, [r7, #84]	; 0x54
 801623e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016240:	2b00      	cmp	r3, #0
 8016242:	f000 81e0 	beq.w	8016606 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8016246:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801624a:	68ba      	ldr	r2, [r7, #8]
 801624c:	441a      	add	r2, r3
 801624e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016250:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8016252:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016254:	f7fb fa46 	bl	80116e4 <pbuf_clen>
 8016258:	4603      	mov	r3, r0
 801625a:	461a      	mov	r2, r3
 801625c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016260:	4413      	add	r3, r2
 8016262:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8016266:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801626a:	8bfb      	ldrh	r3, [r7, #30]
 801626c:	4413      	add	r3, r2
 801626e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8016272:	e0dc      	b.n	801642e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801627a:	2b00      	cmp	r3, #0
 801627c:	f000 80d7 	beq.w	801642e <tcp_write+0x47a>
 8016280:	4b03      	ldr	r3, [pc, #12]	; (8016290 <tcp_write+0x2dc>)
 8016282:	f240 224a 	movw	r2, #586	; 0x24a
 8016286:	490a      	ldr	r1, [pc, #40]	; (80162b0 <tcp_write+0x2fc>)
 8016288:	4803      	ldr	r0, [pc, #12]	; (8016298 <tcp_write+0x2e4>)
 801628a:	f004 fd33 	bl	801acf4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801628e:	e0ce      	b.n	801642e <tcp_write+0x47a>
 8016290:	0801e5f8 	.word	0x0801e5f8
 8016294:	0801e798 	.word	0x0801e798
 8016298:	0801e64c 	.word	0x0801e64c
 801629c:	0801e7b0 	.word	0x0801e7b0
 80162a0:	0801e7e4 	.word	0x0801e7e4
 80162a4:	0801e7fc 	.word	0x0801e7fc
 80162a8:	0801e81c 	.word	0x0801e81c
 80162ac:	0801e83c 	.word	0x0801e83c
 80162b0:	0801e868 	.word	0x0801e868
    struct pbuf *p;
    u16_t left = len - pos;
 80162b4:	88fa      	ldrh	r2, [r7, #6]
 80162b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80162ba:	1ad3      	subs	r3, r2, r3
 80162bc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80162be:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80162c2:	b29b      	uxth	r3, r3
 80162c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80162c6:	1ad3      	subs	r3, r2, r3
 80162c8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80162ca:	8b7a      	ldrh	r2, [r7, #26]
 80162cc:	8bbb      	ldrh	r3, [r7, #28]
 80162ce:	4293      	cmp	r3, r2
 80162d0:	bf28      	it	cs
 80162d2:	4613      	movcs	r3, r2
 80162d4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80162d6:	797b      	ldrb	r3, [r7, #5]
 80162d8:	f003 0301 	and.w	r3, r3, #1
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d036      	beq.n	801634e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80162e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80162e4:	b29a      	uxth	r2, r3
 80162e6:	8b3b      	ldrh	r3, [r7, #24]
 80162e8:	4413      	add	r3, r2
 80162ea:	b299      	uxth	r1, r3
 80162ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	bf0c      	ite	eq
 80162f2:	2301      	moveq	r3, #1
 80162f4:	2300      	movne	r3, #0
 80162f6:	b2db      	uxtb	r3, r3
 80162f8:	f107 0012 	add.w	r0, r7, #18
 80162fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80162fe:	9302      	str	r3, [sp, #8]
 8016300:	797b      	ldrb	r3, [r7, #5]
 8016302:	9301      	str	r3, [sp, #4]
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	9300      	str	r3, [sp, #0]
 8016308:	4603      	mov	r3, r0
 801630a:	2036      	movs	r0, #54	; 0x36
 801630c:	f7ff fd5e 	bl	8015dcc <tcp_pbuf_prealloc>
 8016310:	6338      	str	r0, [r7, #48]	; 0x30
 8016312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016314:	2b00      	cmp	r3, #0
 8016316:	f000 8178 	beq.w	801660a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801631c:	895b      	ldrh	r3, [r3, #10]
 801631e:	8b3a      	ldrh	r2, [r7, #24]
 8016320:	429a      	cmp	r2, r3
 8016322:	d906      	bls.n	8016332 <tcp_write+0x37e>
 8016324:	4b8c      	ldr	r3, [pc, #560]	; (8016558 <tcp_write+0x5a4>)
 8016326:	f240 2266 	movw	r2, #614	; 0x266
 801632a:	498c      	ldr	r1, [pc, #560]	; (801655c <tcp_write+0x5a8>)
 801632c:	488c      	ldr	r0, [pc, #560]	; (8016560 <tcp_write+0x5ac>)
 801632e:	f004 fce1 	bl	801acf4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8016332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016334:	685a      	ldr	r2, [r3, #4]
 8016336:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801633a:	18d0      	adds	r0, r2, r3
 801633c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016340:	68ba      	ldr	r2, [r7, #8]
 8016342:	4413      	add	r3, r2
 8016344:	8b3a      	ldrh	r2, [r7, #24]
 8016346:	4619      	mov	r1, r3
 8016348:	f004 fcbe 	bl	801acc8 <memcpy>
 801634c:	e02f      	b.n	80163ae <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801634e:	8a7b      	ldrh	r3, [r7, #18]
 8016350:	2b00      	cmp	r3, #0
 8016352:	d006      	beq.n	8016362 <tcp_write+0x3ae>
 8016354:	4b80      	ldr	r3, [pc, #512]	; (8016558 <tcp_write+0x5a4>)
 8016356:	f240 2271 	movw	r2, #625	; 0x271
 801635a:	4982      	ldr	r1, [pc, #520]	; (8016564 <tcp_write+0x5b0>)
 801635c:	4880      	ldr	r0, [pc, #512]	; (8016560 <tcp_write+0x5ac>)
 801635e:	f004 fcc9 	bl	801acf4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8016362:	8b3b      	ldrh	r3, [r7, #24]
 8016364:	2201      	movs	r2, #1
 8016366:	4619      	mov	r1, r3
 8016368:	2036      	movs	r0, #54	; 0x36
 801636a:	f7fa fe17 	bl	8010f9c <pbuf_alloc>
 801636e:	6178      	str	r0, [r7, #20]
 8016370:	697b      	ldr	r3, [r7, #20]
 8016372:	2b00      	cmp	r3, #0
 8016374:	f000 814b 	beq.w	801660e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8016378:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801637c:	68ba      	ldr	r2, [r7, #8]
 801637e:	441a      	add	r2, r3
 8016380:	697b      	ldr	r3, [r7, #20]
 8016382:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016384:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016388:	b29b      	uxth	r3, r3
 801638a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801638e:	4619      	mov	r1, r3
 8016390:	2036      	movs	r0, #54	; 0x36
 8016392:	f7fa fe03 	bl	8010f9c <pbuf_alloc>
 8016396:	6338      	str	r0, [r7, #48]	; 0x30
 8016398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801639a:	2b00      	cmp	r3, #0
 801639c:	d103      	bne.n	80163a6 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801639e:	6978      	ldr	r0, [r7, #20]
 80163a0:	f7fb f912 	bl	80115c8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80163a4:	e136      	b.n	8016614 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80163a6:	6979      	ldr	r1, [r7, #20]
 80163a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80163aa:	f7fb f9db 	bl	8011764 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80163ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80163b0:	f7fb f998 	bl	80116e4 <pbuf_clen>
 80163b4:	4603      	mov	r3, r0
 80163b6:	461a      	mov	r2, r3
 80163b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80163bc:	4413      	add	r3, r2
 80163be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80163c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80163c6:	2b09      	cmp	r3, #9
 80163c8:	d903      	bls.n	80163d2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80163ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80163cc:	f7fb f8fc 	bl	80115c8 <pbuf_free>
      goto memerr;
 80163d0:	e120      	b.n	8016614 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80163d2:	68fb      	ldr	r3, [r7, #12]
 80163d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80163d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80163da:	441a      	add	r2, r3
 80163dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80163e0:	9300      	str	r3, [sp, #0]
 80163e2:	4613      	mov	r3, r2
 80163e4:	2200      	movs	r2, #0
 80163e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80163e8:	68f8      	ldr	r0, [r7, #12]
 80163ea:	f7ff fc51 	bl	8015c90 <tcp_create_segment>
 80163ee:	64f8      	str	r0, [r7, #76]	; 0x4c
 80163f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	f000 810d 	beq.w	8016612 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80163f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d102      	bne.n	8016404 <tcp_write+0x450>
      queue = seg;
 80163fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016400:	647b      	str	r3, [r7, #68]	; 0x44
 8016402:	e00c      	b.n	801641e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8016404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016406:	2b00      	cmp	r3, #0
 8016408:	d106      	bne.n	8016418 <tcp_write+0x464>
 801640a:	4b53      	ldr	r3, [pc, #332]	; (8016558 <tcp_write+0x5a4>)
 801640c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016410:	4955      	ldr	r1, [pc, #340]	; (8016568 <tcp_write+0x5b4>)
 8016412:	4853      	ldr	r0, [pc, #332]	; (8016560 <tcp_write+0x5ac>)
 8016414:	f004 fc6e 	bl	801acf4 <iprintf>
      prev_seg->next = seg;
 8016418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801641a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801641c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801641e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016420:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8016422:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016426:	8b3b      	ldrh	r3, [r7, #24]
 8016428:	4413      	add	r3, r2
 801642a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801642e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016432:	88fb      	ldrh	r3, [r7, #6]
 8016434:	429a      	cmp	r2, r3
 8016436:	f4ff af3d 	bcc.w	80162b4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801643a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801643c:	2b00      	cmp	r3, #0
 801643e:	d02c      	beq.n	801649a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8016440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016442:	685b      	ldr	r3, [r3, #4]
 8016444:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016446:	e01e      	b.n	8016486 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8016448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801644a:	891a      	ldrh	r2, [r3, #8]
 801644c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801644e:	4413      	add	r3, r2
 8016450:	b29a      	uxth	r2, r3
 8016452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016454:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8016456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d110      	bne.n	8016480 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801645e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016460:	685b      	ldr	r3, [r3, #4]
 8016462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016464:	8952      	ldrh	r2, [r2, #10]
 8016466:	4413      	add	r3, r2
 8016468:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801646a:	68b9      	ldr	r1, [r7, #8]
 801646c:	4618      	mov	r0, r3
 801646e:	f004 fc2b 	bl	801acc8 <memcpy>
        p->len += oversize_used;
 8016472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016474:	895a      	ldrh	r2, [r3, #10]
 8016476:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016478:	4413      	add	r3, r2
 801647a:	b29a      	uxth	r2, r3
 801647c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801647e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8016480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016488:	2b00      	cmp	r3, #0
 801648a:	d1dd      	bne.n	8016448 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801648c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801648e:	891a      	ldrh	r2, [r3, #8]
 8016490:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016492:	4413      	add	r3, r2
 8016494:	b29a      	uxth	r2, r3
 8016496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016498:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801649a:	8a7a      	ldrh	r2, [r7, #18]
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80164a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d018      	beq.n	80164da <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80164a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d106      	bne.n	80164bc <tcp_write+0x508>
 80164ae:	4b2a      	ldr	r3, [pc, #168]	; (8016558 <tcp_write+0x5a4>)
 80164b0:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80164b4:	492d      	ldr	r1, [pc, #180]	; (801656c <tcp_write+0x5b8>)
 80164b6:	482a      	ldr	r0, [pc, #168]	; (8016560 <tcp_write+0x5ac>)
 80164b8:	f004 fc1c 	bl	801acf4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80164bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80164be:	685b      	ldr	r3, [r3, #4]
 80164c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80164c2:	4618      	mov	r0, r3
 80164c4:	f7fb f94e 	bl	8011764 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80164c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80164ca:	891a      	ldrh	r2, [r3, #8]
 80164cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80164ce:	891b      	ldrh	r3, [r3, #8]
 80164d0:	4413      	add	r3, r2
 80164d2:	b29a      	uxth	r2, r3
 80164d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80164d6:	811a      	strh	r2, [r3, #8]
 80164d8:	e037      	b.n	801654a <tcp_write+0x596>
  } else if (extendlen > 0) {
 80164da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d034      	beq.n	801654a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80164e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d003      	beq.n	80164ee <tcp_write+0x53a>
 80164e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80164e8:	685b      	ldr	r3, [r3, #4]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d106      	bne.n	80164fc <tcp_write+0x548>
 80164ee:	4b1a      	ldr	r3, [pc, #104]	; (8016558 <tcp_write+0x5a4>)
 80164f0:	f240 22e6 	movw	r2, #742	; 0x2e6
 80164f4:	491e      	ldr	r1, [pc, #120]	; (8016570 <tcp_write+0x5bc>)
 80164f6:	481a      	ldr	r0, [pc, #104]	; (8016560 <tcp_write+0x5ac>)
 80164f8:	f004 fbfc 	bl	801acf4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80164fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80164fe:	685b      	ldr	r3, [r3, #4]
 8016500:	62bb      	str	r3, [r7, #40]	; 0x28
 8016502:	e009      	b.n	8016518 <tcp_write+0x564>
      p->tot_len += extendlen;
 8016504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016506:	891a      	ldrh	r2, [r3, #8]
 8016508:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801650a:	4413      	add	r3, r2
 801650c:	b29a      	uxth	r2, r3
 801650e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016510:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8016512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	62bb      	str	r3, [r7, #40]	; 0x28
 8016518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d1f1      	bne.n	8016504 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8016520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016522:	891a      	ldrh	r2, [r3, #8]
 8016524:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016526:	4413      	add	r3, r2
 8016528:	b29a      	uxth	r2, r3
 801652a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801652c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016530:	895a      	ldrh	r2, [r3, #10]
 8016532:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016534:	4413      	add	r3, r2
 8016536:	b29a      	uxth	r2, r3
 8016538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801653a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801653c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801653e:	891a      	ldrh	r2, [r3, #8]
 8016540:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016542:	4413      	add	r3, r2
 8016544:	b29a      	uxth	r2, r3
 8016546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016548:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801654a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801654c:	2b00      	cmp	r3, #0
 801654e:	d111      	bne.n	8016574 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016554:	66da      	str	r2, [r3, #108]	; 0x6c
 8016556:	e010      	b.n	801657a <tcp_write+0x5c6>
 8016558:	0801e5f8 	.word	0x0801e5f8
 801655c:	0801e898 	.word	0x0801e898
 8016560:	0801e64c 	.word	0x0801e64c
 8016564:	0801e8d8 	.word	0x0801e8d8
 8016568:	0801e8e8 	.word	0x0801e8e8
 801656c:	0801e8fc 	.word	0x0801e8fc
 8016570:	0801e934 	.word	0x0801e934
  } else {
    last_unsent->next = queue;
 8016574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016576:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016578:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801657a:	68fb      	ldr	r3, [r7, #12]
 801657c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801657e:	88fb      	ldrh	r3, [r7, #6]
 8016580:	441a      	add	r2, r3
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801658c:	88fb      	ldrh	r3, [r7, #6]
 801658e:	1ad3      	subs	r3, r2, r3
 8016590:	b29a      	uxth	r2, r3
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801659e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d00e      	beq.n	80165ca <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d10a      	bne.n	80165ca <tcp_write+0x616>
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d106      	bne.n	80165ca <tcp_write+0x616>
 80165bc:	4b2c      	ldr	r3, [pc, #176]	; (8016670 <tcp_write+0x6bc>)
 80165be:	f240 3212 	movw	r2, #786	; 0x312
 80165c2:	492c      	ldr	r1, [pc, #176]	; (8016674 <tcp_write+0x6c0>)
 80165c4:	482c      	ldr	r0, [pc, #176]	; (8016678 <tcp_write+0x6c4>)
 80165c6:	f004 fb95 	bl	801acf4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80165ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d016      	beq.n	80165fe <tcp_write+0x64a>
 80165d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80165d2:	68db      	ldr	r3, [r3, #12]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d012      	beq.n	80165fe <tcp_write+0x64a>
 80165d8:	797b      	ldrb	r3, [r7, #5]
 80165da:	f003 0302 	and.w	r3, r3, #2
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d10d      	bne.n	80165fe <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80165e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80165e4:	68db      	ldr	r3, [r3, #12]
 80165e6:	899b      	ldrh	r3, [r3, #12]
 80165e8:	b29c      	uxth	r4, r3
 80165ea:	2008      	movs	r0, #8
 80165ec:	f7f9 fbc8 	bl	800fd80 <lwip_htons>
 80165f0:	4603      	mov	r3, r0
 80165f2:	461a      	mov	r2, r3
 80165f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80165f6:	68db      	ldr	r3, [r3, #12]
 80165f8:	4322      	orrs	r2, r4
 80165fa:	b292      	uxth	r2, r2
 80165fc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80165fe:	2300      	movs	r3, #0
 8016600:	e031      	b.n	8016666 <tcp_write+0x6b2>
          goto memerr;
 8016602:	bf00      	nop
 8016604:	e006      	b.n	8016614 <tcp_write+0x660>
            goto memerr;
 8016606:	bf00      	nop
 8016608:	e004      	b.n	8016614 <tcp_write+0x660>
        goto memerr;
 801660a:	bf00      	nop
 801660c:	e002      	b.n	8016614 <tcp_write+0x660>
        goto memerr;
 801660e:	bf00      	nop
 8016610:	e000      	b.n	8016614 <tcp_write+0x660>
      goto memerr;
 8016612:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	8b5b      	ldrh	r3, [r3, #26]
 8016618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801661c:	b29a      	uxth	r2, r3
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8016622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016624:	2b00      	cmp	r3, #0
 8016626:	d002      	beq.n	801662e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8016628:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801662a:	f7fa ffcd 	bl	80115c8 <pbuf_free>
  }
  if (queue != NULL) {
 801662e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016630:	2b00      	cmp	r3, #0
 8016632:	d002      	beq.n	801663a <tcp_write+0x686>
    tcp_segs_free(queue);
 8016634:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016636:	f7fc fb6b 	bl	8012d10 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016640:	2b00      	cmp	r3, #0
 8016642:	d00e      	beq.n	8016662 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016648:	2b00      	cmp	r3, #0
 801664a:	d10a      	bne.n	8016662 <tcp_write+0x6ae>
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016650:	2b00      	cmp	r3, #0
 8016652:	d106      	bne.n	8016662 <tcp_write+0x6ae>
 8016654:	4b06      	ldr	r3, [pc, #24]	; (8016670 <tcp_write+0x6bc>)
 8016656:	f240 3227 	movw	r2, #807	; 0x327
 801665a:	4906      	ldr	r1, [pc, #24]	; (8016674 <tcp_write+0x6c0>)
 801665c:	4806      	ldr	r0, [pc, #24]	; (8016678 <tcp_write+0x6c4>)
 801665e:	f004 fb49 	bl	801acf4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8016662:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016666:	4618      	mov	r0, r3
 8016668:	375c      	adds	r7, #92	; 0x5c
 801666a:	46bd      	mov	sp, r7
 801666c:	bd90      	pop	{r4, r7, pc}
 801666e:	bf00      	nop
 8016670:	0801e5f8 	.word	0x0801e5f8
 8016674:	0801e96c 	.word	0x0801e96c
 8016678:	0801e64c 	.word	0x0801e64c

0801667c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801667c:	b590      	push	{r4, r7, lr}
 801667e:	b08b      	sub	sp, #44	; 0x2c
 8016680:	af02      	add	r7, sp, #8
 8016682:	6078      	str	r0, [r7, #4]
 8016684:	460b      	mov	r3, r1
 8016686:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8016688:	2300      	movs	r3, #0
 801668a:	61fb      	str	r3, [r7, #28]
 801668c:	2300      	movs	r3, #0
 801668e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8016690:	2300      	movs	r3, #0
 8016692:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d106      	bne.n	80166a8 <tcp_split_unsent_seg+0x2c>
 801669a:	4b95      	ldr	r3, [pc, #596]	; (80168f0 <tcp_split_unsent_seg+0x274>)
 801669c:	f240 324b 	movw	r2, #843	; 0x34b
 80166a0:	4994      	ldr	r1, [pc, #592]	; (80168f4 <tcp_split_unsent_seg+0x278>)
 80166a2:	4895      	ldr	r0, [pc, #596]	; (80168f8 <tcp_split_unsent_seg+0x27c>)
 80166a4:	f004 fb26 	bl	801acf4 <iprintf>

  useg = pcb->unsent;
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80166ac:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80166ae:	697b      	ldr	r3, [r7, #20]
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d102      	bne.n	80166ba <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80166b4:	f04f 33ff 	mov.w	r3, #4294967295
 80166b8:	e116      	b.n	80168e8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80166ba:	887b      	ldrh	r3, [r7, #2]
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d109      	bne.n	80166d4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80166c0:	4b8b      	ldr	r3, [pc, #556]	; (80168f0 <tcp_split_unsent_seg+0x274>)
 80166c2:	f240 3253 	movw	r2, #851	; 0x353
 80166c6:	498d      	ldr	r1, [pc, #564]	; (80168fc <tcp_split_unsent_seg+0x280>)
 80166c8:	488b      	ldr	r0, [pc, #556]	; (80168f8 <tcp_split_unsent_seg+0x27c>)
 80166ca:	f004 fb13 	bl	801acf4 <iprintf>
    return ERR_VAL;
 80166ce:	f06f 0305 	mvn.w	r3, #5
 80166d2:	e109      	b.n	80168e8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80166d4:	697b      	ldr	r3, [r7, #20]
 80166d6:	891b      	ldrh	r3, [r3, #8]
 80166d8:	887a      	ldrh	r2, [r7, #2]
 80166da:	429a      	cmp	r2, r3
 80166dc:	d301      	bcc.n	80166e2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80166de:	2300      	movs	r3, #0
 80166e0:	e102      	b.n	80168e8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80166e6:	887a      	ldrh	r2, [r7, #2]
 80166e8:	429a      	cmp	r2, r3
 80166ea:	d906      	bls.n	80166fa <tcp_split_unsent_seg+0x7e>
 80166ec:	4b80      	ldr	r3, [pc, #512]	; (80168f0 <tcp_split_unsent_seg+0x274>)
 80166ee:	f240 325b 	movw	r2, #859	; 0x35b
 80166f2:	4983      	ldr	r1, [pc, #524]	; (8016900 <tcp_split_unsent_seg+0x284>)
 80166f4:	4880      	ldr	r0, [pc, #512]	; (80168f8 <tcp_split_unsent_seg+0x27c>)
 80166f6:	f004 fafd 	bl	801acf4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80166fa:	697b      	ldr	r3, [r7, #20]
 80166fc:	891b      	ldrh	r3, [r3, #8]
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d106      	bne.n	8016710 <tcp_split_unsent_seg+0x94>
 8016702:	4b7b      	ldr	r3, [pc, #492]	; (80168f0 <tcp_split_unsent_seg+0x274>)
 8016704:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8016708:	497e      	ldr	r1, [pc, #504]	; (8016904 <tcp_split_unsent_seg+0x288>)
 801670a:	487b      	ldr	r0, [pc, #492]	; (80168f8 <tcp_split_unsent_seg+0x27c>)
 801670c:	f004 faf2 	bl	801acf4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8016710:	697b      	ldr	r3, [r7, #20]
 8016712:	7a9b      	ldrb	r3, [r3, #10]
 8016714:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8016716:	7bfb      	ldrb	r3, [r7, #15]
 8016718:	009b      	lsls	r3, r3, #2
 801671a:	b2db      	uxtb	r3, r3
 801671c:	f003 0304 	and.w	r3, r3, #4
 8016720:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8016722:	697b      	ldr	r3, [r7, #20]
 8016724:	891a      	ldrh	r2, [r3, #8]
 8016726:	887b      	ldrh	r3, [r7, #2]
 8016728:	1ad3      	subs	r3, r2, r3
 801672a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801672c:	7bbb      	ldrb	r3, [r7, #14]
 801672e:	b29a      	uxth	r2, r3
 8016730:	89bb      	ldrh	r3, [r7, #12]
 8016732:	4413      	add	r3, r2
 8016734:	b29b      	uxth	r3, r3
 8016736:	f44f 7220 	mov.w	r2, #640	; 0x280
 801673a:	4619      	mov	r1, r3
 801673c:	2036      	movs	r0, #54	; 0x36
 801673e:	f7fa fc2d 	bl	8010f9c <pbuf_alloc>
 8016742:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016744:	693b      	ldr	r3, [r7, #16]
 8016746:	2b00      	cmp	r3, #0
 8016748:	f000 80b7 	beq.w	80168ba <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801674c:	697b      	ldr	r3, [r7, #20]
 801674e:	685b      	ldr	r3, [r3, #4]
 8016750:	891a      	ldrh	r2, [r3, #8]
 8016752:	697b      	ldr	r3, [r7, #20]
 8016754:	891b      	ldrh	r3, [r3, #8]
 8016756:	1ad3      	subs	r3, r2, r3
 8016758:	b29a      	uxth	r2, r3
 801675a:	887b      	ldrh	r3, [r7, #2]
 801675c:	4413      	add	r3, r2
 801675e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8016760:	697b      	ldr	r3, [r7, #20]
 8016762:	6858      	ldr	r0, [r3, #4]
 8016764:	693b      	ldr	r3, [r7, #16]
 8016766:	685a      	ldr	r2, [r3, #4]
 8016768:	7bbb      	ldrb	r3, [r7, #14]
 801676a:	18d1      	adds	r1, r2, r3
 801676c:	897b      	ldrh	r3, [r7, #10]
 801676e:	89ba      	ldrh	r2, [r7, #12]
 8016770:	f7fb f920 	bl	80119b4 <pbuf_copy_partial>
 8016774:	4603      	mov	r3, r0
 8016776:	461a      	mov	r2, r3
 8016778:	89bb      	ldrh	r3, [r7, #12]
 801677a:	4293      	cmp	r3, r2
 801677c:	f040 809f 	bne.w	80168be <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8016780:	697b      	ldr	r3, [r7, #20]
 8016782:	68db      	ldr	r3, [r3, #12]
 8016784:	899b      	ldrh	r3, [r3, #12]
 8016786:	b29b      	uxth	r3, r3
 8016788:	4618      	mov	r0, r3
 801678a:	f7f9 faf9 	bl	800fd80 <lwip_htons>
 801678e:	4603      	mov	r3, r0
 8016790:	b2db      	uxtb	r3, r3
 8016792:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016796:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8016798:	2300      	movs	r3, #0
 801679a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801679c:	7efb      	ldrb	r3, [r7, #27]
 801679e:	f003 0308 	and.w	r3, r3, #8
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d007      	beq.n	80167b6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80167a6:	7efb      	ldrb	r3, [r7, #27]
 80167a8:	f023 0308 	bic.w	r3, r3, #8
 80167ac:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80167ae:	7ebb      	ldrb	r3, [r7, #26]
 80167b0:	f043 0308 	orr.w	r3, r3, #8
 80167b4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80167b6:	7efb      	ldrb	r3, [r7, #27]
 80167b8:	f003 0301 	and.w	r3, r3, #1
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d007      	beq.n	80167d0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80167c0:	7efb      	ldrb	r3, [r7, #27]
 80167c2:	f023 0301 	bic.w	r3, r3, #1
 80167c6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80167c8:	7ebb      	ldrb	r3, [r7, #26]
 80167ca:	f043 0301 	orr.w	r3, r3, #1
 80167ce:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80167d0:	697b      	ldr	r3, [r7, #20]
 80167d2:	68db      	ldr	r3, [r3, #12]
 80167d4:	685b      	ldr	r3, [r3, #4]
 80167d6:	4618      	mov	r0, r3
 80167d8:	f7f9 fae7 	bl	800fdaa <lwip_htonl>
 80167dc:	4602      	mov	r2, r0
 80167de:	887b      	ldrh	r3, [r7, #2]
 80167e0:	18d1      	adds	r1, r2, r3
 80167e2:	7eba      	ldrb	r2, [r7, #26]
 80167e4:	7bfb      	ldrb	r3, [r7, #15]
 80167e6:	9300      	str	r3, [sp, #0]
 80167e8:	460b      	mov	r3, r1
 80167ea:	6939      	ldr	r1, [r7, #16]
 80167ec:	6878      	ldr	r0, [r7, #4]
 80167ee:	f7ff fa4f 	bl	8015c90 <tcp_create_segment>
 80167f2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80167f4:	69fb      	ldr	r3, [r7, #28]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d063      	beq.n	80168c2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80167fa:	697b      	ldr	r3, [r7, #20]
 80167fc:	685b      	ldr	r3, [r3, #4]
 80167fe:	4618      	mov	r0, r3
 8016800:	f7fa ff70 	bl	80116e4 <pbuf_clen>
 8016804:	4603      	mov	r3, r0
 8016806:	461a      	mov	r2, r3
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801680e:	1a9b      	subs	r3, r3, r2
 8016810:	b29a      	uxth	r2, r3
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8016818:	697b      	ldr	r3, [r7, #20]
 801681a:	6858      	ldr	r0, [r3, #4]
 801681c:	697b      	ldr	r3, [r7, #20]
 801681e:	685b      	ldr	r3, [r3, #4]
 8016820:	891a      	ldrh	r2, [r3, #8]
 8016822:	89bb      	ldrh	r3, [r7, #12]
 8016824:	1ad3      	subs	r3, r2, r3
 8016826:	b29b      	uxth	r3, r3
 8016828:	4619      	mov	r1, r3
 801682a:	f7fa fd15 	bl	8011258 <pbuf_realloc>
  useg->len -= remainder;
 801682e:	697b      	ldr	r3, [r7, #20]
 8016830:	891a      	ldrh	r2, [r3, #8]
 8016832:	89bb      	ldrh	r3, [r7, #12]
 8016834:	1ad3      	subs	r3, r2, r3
 8016836:	b29a      	uxth	r2, r3
 8016838:	697b      	ldr	r3, [r7, #20]
 801683a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801683c:	697b      	ldr	r3, [r7, #20]
 801683e:	68db      	ldr	r3, [r3, #12]
 8016840:	899b      	ldrh	r3, [r3, #12]
 8016842:	b29c      	uxth	r4, r3
 8016844:	7efb      	ldrb	r3, [r7, #27]
 8016846:	b29b      	uxth	r3, r3
 8016848:	4618      	mov	r0, r3
 801684a:	f7f9 fa99 	bl	800fd80 <lwip_htons>
 801684e:	4603      	mov	r3, r0
 8016850:	461a      	mov	r2, r3
 8016852:	697b      	ldr	r3, [r7, #20]
 8016854:	68db      	ldr	r3, [r3, #12]
 8016856:	4322      	orrs	r2, r4
 8016858:	b292      	uxth	r2, r2
 801685a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801685c:	697b      	ldr	r3, [r7, #20]
 801685e:	685b      	ldr	r3, [r3, #4]
 8016860:	4618      	mov	r0, r3
 8016862:	f7fa ff3f 	bl	80116e4 <pbuf_clen>
 8016866:	4603      	mov	r3, r0
 8016868:	461a      	mov	r2, r3
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016870:	4413      	add	r3, r2
 8016872:	b29a      	uxth	r2, r3
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801687a:	69fb      	ldr	r3, [r7, #28]
 801687c:	685b      	ldr	r3, [r3, #4]
 801687e:	4618      	mov	r0, r3
 8016880:	f7fa ff30 	bl	80116e4 <pbuf_clen>
 8016884:	4603      	mov	r3, r0
 8016886:	461a      	mov	r2, r3
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801688e:	4413      	add	r3, r2
 8016890:	b29a      	uxth	r2, r3
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8016898:	697b      	ldr	r3, [r7, #20]
 801689a:	681a      	ldr	r2, [r3, #0]
 801689c:	69fb      	ldr	r3, [r7, #28]
 801689e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80168a0:	697b      	ldr	r3, [r7, #20]
 80168a2:	69fa      	ldr	r2, [r7, #28]
 80168a4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80168a6:	69fb      	ldr	r3, [r7, #28]
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d103      	bne.n	80168b6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	2200      	movs	r2, #0
 80168b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80168b6:	2300      	movs	r3, #0
 80168b8:	e016      	b.n	80168e8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80168ba:	bf00      	nop
 80168bc:	e002      	b.n	80168c4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80168be:	bf00      	nop
 80168c0:	e000      	b.n	80168c4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80168c2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80168c4:	69fb      	ldr	r3, [r7, #28]
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d006      	beq.n	80168d8 <tcp_split_unsent_seg+0x25c>
 80168ca:	4b09      	ldr	r3, [pc, #36]	; (80168f0 <tcp_split_unsent_seg+0x274>)
 80168cc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80168d0:	490d      	ldr	r1, [pc, #52]	; (8016908 <tcp_split_unsent_seg+0x28c>)
 80168d2:	4809      	ldr	r0, [pc, #36]	; (80168f8 <tcp_split_unsent_seg+0x27c>)
 80168d4:	f004 fa0e 	bl	801acf4 <iprintf>
  if (p != NULL) {
 80168d8:	693b      	ldr	r3, [r7, #16]
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d002      	beq.n	80168e4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80168de:	6938      	ldr	r0, [r7, #16]
 80168e0:	f7fa fe72 	bl	80115c8 <pbuf_free>
  }

  return ERR_MEM;
 80168e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80168e8:	4618      	mov	r0, r3
 80168ea:	3724      	adds	r7, #36	; 0x24
 80168ec:	46bd      	mov	sp, r7
 80168ee:	bd90      	pop	{r4, r7, pc}
 80168f0:	0801e5f8 	.word	0x0801e5f8
 80168f4:	0801e98c 	.word	0x0801e98c
 80168f8:	0801e64c 	.word	0x0801e64c
 80168fc:	0801e9b0 	.word	0x0801e9b0
 8016900:	0801e9d4 	.word	0x0801e9d4
 8016904:	0801e9e4 	.word	0x0801e9e4
 8016908:	0801e9f4 	.word	0x0801e9f4

0801690c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801690c:	b590      	push	{r4, r7, lr}
 801690e:	b085      	sub	sp, #20
 8016910:	af00      	add	r7, sp, #0
 8016912:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	2b00      	cmp	r3, #0
 8016918:	d106      	bne.n	8016928 <tcp_send_fin+0x1c>
 801691a:	4b21      	ldr	r3, [pc, #132]	; (80169a0 <tcp_send_fin+0x94>)
 801691c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8016920:	4920      	ldr	r1, [pc, #128]	; (80169a4 <tcp_send_fin+0x98>)
 8016922:	4821      	ldr	r0, [pc, #132]	; (80169a8 <tcp_send_fin+0x9c>)
 8016924:	f004 f9e6 	bl	801acf4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801692c:	2b00      	cmp	r3, #0
 801692e:	d02e      	beq.n	801698e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016934:	60fb      	str	r3, [r7, #12]
 8016936:	e002      	b.n	801693e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d1f8      	bne.n	8016938 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8016946:	68fb      	ldr	r3, [r7, #12]
 8016948:	68db      	ldr	r3, [r3, #12]
 801694a:	899b      	ldrh	r3, [r3, #12]
 801694c:	b29b      	uxth	r3, r3
 801694e:	4618      	mov	r0, r3
 8016950:	f7f9 fa16 	bl	800fd80 <lwip_htons>
 8016954:	4603      	mov	r3, r0
 8016956:	b2db      	uxtb	r3, r3
 8016958:	f003 0307 	and.w	r3, r3, #7
 801695c:	2b00      	cmp	r3, #0
 801695e:	d116      	bne.n	801698e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8016960:	68fb      	ldr	r3, [r7, #12]
 8016962:	68db      	ldr	r3, [r3, #12]
 8016964:	899b      	ldrh	r3, [r3, #12]
 8016966:	b29c      	uxth	r4, r3
 8016968:	2001      	movs	r0, #1
 801696a:	f7f9 fa09 	bl	800fd80 <lwip_htons>
 801696e:	4603      	mov	r3, r0
 8016970:	461a      	mov	r2, r3
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	68db      	ldr	r3, [r3, #12]
 8016976:	4322      	orrs	r2, r4
 8016978:	b292      	uxth	r2, r2
 801697a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	8b5b      	ldrh	r3, [r3, #26]
 8016980:	f043 0320 	orr.w	r3, r3, #32
 8016984:	b29a      	uxth	r2, r3
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801698a:	2300      	movs	r3, #0
 801698c:	e004      	b.n	8016998 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801698e:	2101      	movs	r1, #1
 8016990:	6878      	ldr	r0, [r7, #4]
 8016992:	f000 f80b 	bl	80169ac <tcp_enqueue_flags>
 8016996:	4603      	mov	r3, r0
}
 8016998:	4618      	mov	r0, r3
 801699a:	3714      	adds	r7, #20
 801699c:	46bd      	mov	sp, r7
 801699e:	bd90      	pop	{r4, r7, pc}
 80169a0:	0801e5f8 	.word	0x0801e5f8
 80169a4:	0801ea00 	.word	0x0801ea00
 80169a8:	0801e64c 	.word	0x0801e64c

080169ac <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80169ac:	b580      	push	{r7, lr}
 80169ae:	b08a      	sub	sp, #40	; 0x28
 80169b0:	af02      	add	r7, sp, #8
 80169b2:	6078      	str	r0, [r7, #4]
 80169b4:	460b      	mov	r3, r1
 80169b6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80169b8:	2300      	movs	r3, #0
 80169ba:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80169bc:	2300      	movs	r3, #0
 80169be:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80169c0:	78fb      	ldrb	r3, [r7, #3]
 80169c2:	f003 0303 	and.w	r3, r3, #3
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d106      	bne.n	80169d8 <tcp_enqueue_flags+0x2c>
 80169ca:	4b67      	ldr	r3, [pc, #412]	; (8016b68 <tcp_enqueue_flags+0x1bc>)
 80169cc:	f240 4211 	movw	r2, #1041	; 0x411
 80169d0:	4966      	ldr	r1, [pc, #408]	; (8016b6c <tcp_enqueue_flags+0x1c0>)
 80169d2:	4867      	ldr	r0, [pc, #412]	; (8016b70 <tcp_enqueue_flags+0x1c4>)
 80169d4:	f004 f98e 	bl	801acf4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d106      	bne.n	80169ec <tcp_enqueue_flags+0x40>
 80169de:	4b62      	ldr	r3, [pc, #392]	; (8016b68 <tcp_enqueue_flags+0x1bc>)
 80169e0:	f240 4213 	movw	r2, #1043	; 0x413
 80169e4:	4963      	ldr	r1, [pc, #396]	; (8016b74 <tcp_enqueue_flags+0x1c8>)
 80169e6:	4862      	ldr	r0, [pc, #392]	; (8016b70 <tcp_enqueue_flags+0x1c4>)
 80169e8:	f004 f984 	bl	801acf4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80169ec:	78fb      	ldrb	r3, [r7, #3]
 80169ee:	f003 0302 	and.w	r3, r3, #2
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d001      	beq.n	80169fa <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80169f6:	2301      	movs	r3, #1
 80169f8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80169fa:	7ffb      	ldrb	r3, [r7, #31]
 80169fc:	009b      	lsls	r3, r3, #2
 80169fe:	b2db      	uxtb	r3, r3
 8016a00:	f003 0304 	and.w	r3, r3, #4
 8016a04:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016a06:	7dfb      	ldrb	r3, [r7, #23]
 8016a08:	b29b      	uxth	r3, r3
 8016a0a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016a0e:	4619      	mov	r1, r3
 8016a10:	2036      	movs	r0, #54	; 0x36
 8016a12:	f7fa fac3 	bl	8010f9c <pbuf_alloc>
 8016a16:	6138      	str	r0, [r7, #16]
 8016a18:	693b      	ldr	r3, [r7, #16]
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d109      	bne.n	8016a32 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	8b5b      	ldrh	r3, [r3, #26]
 8016a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a26:	b29a      	uxth	r2, r3
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8016a30:	e095      	b.n	8016b5e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8016a32:	693b      	ldr	r3, [r7, #16]
 8016a34:	895a      	ldrh	r2, [r3, #10]
 8016a36:	7dfb      	ldrb	r3, [r7, #23]
 8016a38:	b29b      	uxth	r3, r3
 8016a3a:	429a      	cmp	r2, r3
 8016a3c:	d206      	bcs.n	8016a4c <tcp_enqueue_flags+0xa0>
 8016a3e:	4b4a      	ldr	r3, [pc, #296]	; (8016b68 <tcp_enqueue_flags+0x1bc>)
 8016a40:	f240 4239 	movw	r2, #1081	; 0x439
 8016a44:	494c      	ldr	r1, [pc, #304]	; (8016b78 <tcp_enqueue_flags+0x1cc>)
 8016a46:	484a      	ldr	r0, [pc, #296]	; (8016b70 <tcp_enqueue_flags+0x1c4>)
 8016a48:	f004 f954 	bl	801acf4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8016a50:	78fa      	ldrb	r2, [r7, #3]
 8016a52:	7ffb      	ldrb	r3, [r7, #31]
 8016a54:	9300      	str	r3, [sp, #0]
 8016a56:	460b      	mov	r3, r1
 8016a58:	6939      	ldr	r1, [r7, #16]
 8016a5a:	6878      	ldr	r0, [r7, #4]
 8016a5c:	f7ff f918 	bl	8015c90 <tcp_create_segment>
 8016a60:	60f8      	str	r0, [r7, #12]
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d109      	bne.n	8016a7c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	8b5b      	ldrh	r3, [r3, #26]
 8016a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a70:	b29a      	uxth	r2, r3
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016a76:	f04f 33ff 	mov.w	r3, #4294967295
 8016a7a:	e070      	b.n	8016b5e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	68db      	ldr	r3, [r3, #12]
 8016a80:	f003 0303 	and.w	r3, r3, #3
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d006      	beq.n	8016a96 <tcp_enqueue_flags+0xea>
 8016a88:	4b37      	ldr	r3, [pc, #220]	; (8016b68 <tcp_enqueue_flags+0x1bc>)
 8016a8a:	f240 4242 	movw	r2, #1090	; 0x442
 8016a8e:	493b      	ldr	r1, [pc, #236]	; (8016b7c <tcp_enqueue_flags+0x1d0>)
 8016a90:	4837      	ldr	r0, [pc, #220]	; (8016b70 <tcp_enqueue_flags+0x1c4>)
 8016a92:	f004 f92f 	bl	801acf4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	891b      	ldrh	r3, [r3, #8]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d006      	beq.n	8016aac <tcp_enqueue_flags+0x100>
 8016a9e:	4b32      	ldr	r3, [pc, #200]	; (8016b68 <tcp_enqueue_flags+0x1bc>)
 8016aa0:	f240 4243 	movw	r2, #1091	; 0x443
 8016aa4:	4936      	ldr	r1, [pc, #216]	; (8016b80 <tcp_enqueue_flags+0x1d4>)
 8016aa6:	4832      	ldr	r0, [pc, #200]	; (8016b70 <tcp_enqueue_flags+0x1c4>)
 8016aa8:	f004 f924 	bl	801acf4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d103      	bne.n	8016abc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	68fa      	ldr	r2, [r7, #12]
 8016ab8:	66da      	str	r2, [r3, #108]	; 0x6c
 8016aba:	e00d      	b.n	8016ad8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016ac0:	61bb      	str	r3, [r7, #24]
 8016ac2:	e002      	b.n	8016aca <tcp_enqueue_flags+0x11e>
 8016ac4:	69bb      	ldr	r3, [r7, #24]
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	61bb      	str	r3, [r7, #24]
 8016aca:	69bb      	ldr	r3, [r7, #24]
 8016acc:	681b      	ldr	r3, [r3, #0]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d1f8      	bne.n	8016ac4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016ad2:	69bb      	ldr	r3, [r7, #24]
 8016ad4:	68fa      	ldr	r2, [r7, #12]
 8016ad6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	2200      	movs	r2, #0
 8016adc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016ae0:	78fb      	ldrb	r3, [r7, #3]
 8016ae2:	f003 0302 	and.w	r3, r3, #2
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d104      	bne.n	8016af4 <tcp_enqueue_flags+0x148>
 8016aea:	78fb      	ldrb	r3, [r7, #3]
 8016aec:	f003 0301 	and.w	r3, r3, #1
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d004      	beq.n	8016afe <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016af8:	1c5a      	adds	r2, r3, #1
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016afe:	78fb      	ldrb	r3, [r7, #3]
 8016b00:	f003 0301 	and.w	r3, r3, #1
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d006      	beq.n	8016b16 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	8b5b      	ldrh	r3, [r3, #26]
 8016b0c:	f043 0320 	orr.w	r3, r3, #32
 8016b10:	b29a      	uxth	r2, r3
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	685b      	ldr	r3, [r3, #4]
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	f7fa fde2 	bl	80116e4 <pbuf_clen>
 8016b20:	4603      	mov	r3, r0
 8016b22:	461a      	mov	r2, r3
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016b2a:	4413      	add	r3, r2
 8016b2c:	b29a      	uxth	r2, r3
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d00e      	beq.n	8016b5c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d10a      	bne.n	8016b5c <tcp_enqueue_flags+0x1b0>
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d106      	bne.n	8016b5c <tcp_enqueue_flags+0x1b0>
 8016b4e:	4b06      	ldr	r3, [pc, #24]	; (8016b68 <tcp_enqueue_flags+0x1bc>)
 8016b50:	f240 4265 	movw	r2, #1125	; 0x465
 8016b54:	490b      	ldr	r1, [pc, #44]	; (8016b84 <tcp_enqueue_flags+0x1d8>)
 8016b56:	4806      	ldr	r0, [pc, #24]	; (8016b70 <tcp_enqueue_flags+0x1c4>)
 8016b58:	f004 f8cc 	bl	801acf4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016b5c:	2300      	movs	r3, #0
}
 8016b5e:	4618      	mov	r0, r3
 8016b60:	3720      	adds	r7, #32
 8016b62:	46bd      	mov	sp, r7
 8016b64:	bd80      	pop	{r7, pc}
 8016b66:	bf00      	nop
 8016b68:	0801e5f8 	.word	0x0801e5f8
 8016b6c:	0801ea1c 	.word	0x0801ea1c
 8016b70:	0801e64c 	.word	0x0801e64c
 8016b74:	0801ea74 	.word	0x0801ea74
 8016b78:	0801ea94 	.word	0x0801ea94
 8016b7c:	0801ead0 	.word	0x0801ead0
 8016b80:	0801eae8 	.word	0x0801eae8
 8016b84:	0801eb14 	.word	0x0801eb14

08016b88 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016b88:	b5b0      	push	{r4, r5, r7, lr}
 8016b8a:	b08a      	sub	sp, #40	; 0x28
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d106      	bne.n	8016ba4 <tcp_output+0x1c>
 8016b96:	4b8a      	ldr	r3, [pc, #552]	; (8016dc0 <tcp_output+0x238>)
 8016b98:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8016b9c:	4989      	ldr	r1, [pc, #548]	; (8016dc4 <tcp_output+0x23c>)
 8016b9e:	488a      	ldr	r0, [pc, #552]	; (8016dc8 <tcp_output+0x240>)
 8016ba0:	f004 f8a8 	bl	801acf4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	7d1b      	ldrb	r3, [r3, #20]
 8016ba8:	2b01      	cmp	r3, #1
 8016baa:	d106      	bne.n	8016bba <tcp_output+0x32>
 8016bac:	4b84      	ldr	r3, [pc, #528]	; (8016dc0 <tcp_output+0x238>)
 8016bae:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8016bb2:	4986      	ldr	r1, [pc, #536]	; (8016dcc <tcp_output+0x244>)
 8016bb4:	4884      	ldr	r0, [pc, #528]	; (8016dc8 <tcp_output+0x240>)
 8016bb6:	f004 f89d 	bl	801acf4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016bba:	4b85      	ldr	r3, [pc, #532]	; (8016dd0 <tcp_output+0x248>)
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	687a      	ldr	r2, [r7, #4]
 8016bc0:	429a      	cmp	r2, r3
 8016bc2:	d101      	bne.n	8016bc8 <tcp_output+0x40>
    return ERR_OK;
 8016bc4:	2300      	movs	r3, #0
 8016bc6:	e1ce      	b.n	8016f66 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016bd4:	4293      	cmp	r3, r2
 8016bd6:	bf28      	it	cs
 8016bd8:	4613      	movcs	r3, r2
 8016bda:	b29b      	uxth	r3, r3
 8016bdc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016be2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8016be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d10b      	bne.n	8016c02 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	8b5b      	ldrh	r3, [r3, #26]
 8016bee:	f003 0302 	and.w	r3, r3, #2
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	f000 81aa 	beq.w	8016f4c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016bf8:	6878      	ldr	r0, [r7, #4]
 8016bfa:	f000 fdcb 	bl	8017794 <tcp_send_empty_ack>
 8016bfe:	4603      	mov	r3, r0
 8016c00:	e1b1      	b.n	8016f66 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016c02:	6879      	ldr	r1, [r7, #4]
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	3304      	adds	r3, #4
 8016c08:	461a      	mov	r2, r3
 8016c0a:	6878      	ldr	r0, [r7, #4]
 8016c0c:	f7ff f824 	bl	8015c58 <tcp_route>
 8016c10:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016c12:	697b      	ldr	r3, [r7, #20]
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d102      	bne.n	8016c1e <tcp_output+0x96>
    return ERR_RTE;
 8016c18:	f06f 0303 	mvn.w	r3, #3
 8016c1c:	e1a3      	b.n	8016f66 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d003      	beq.n	8016c2c <tcp_output+0xa4>
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d111      	bne.n	8016c50 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016c2c:	697b      	ldr	r3, [r7, #20]
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d002      	beq.n	8016c38 <tcp_output+0xb0>
 8016c32:	697b      	ldr	r3, [r7, #20]
 8016c34:	3304      	adds	r3, #4
 8016c36:	e000      	b.n	8016c3a <tcp_output+0xb2>
 8016c38:	2300      	movs	r3, #0
 8016c3a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016c3c:	693b      	ldr	r3, [r7, #16]
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d102      	bne.n	8016c48 <tcp_output+0xc0>
      return ERR_RTE;
 8016c42:	f06f 0303 	mvn.w	r3, #3
 8016c46:	e18e      	b.n	8016f66 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016c48:	693b      	ldr	r3, [r7, #16]
 8016c4a:	681a      	ldr	r2, [r3, #0]
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c52:	68db      	ldr	r3, [r3, #12]
 8016c54:	685b      	ldr	r3, [r3, #4]
 8016c56:	4618      	mov	r0, r3
 8016c58:	f7f9 f8a7 	bl	800fdaa <lwip_htonl>
 8016c5c:	4602      	mov	r2, r0
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016c62:	1ad3      	subs	r3, r2, r3
 8016c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016c66:	8912      	ldrh	r2, [r2, #8]
 8016c68:	4413      	add	r3, r2
 8016c6a:	69ba      	ldr	r2, [r7, #24]
 8016c6c:	429a      	cmp	r2, r3
 8016c6e:	d227      	bcs.n	8016cc0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016c76:	461a      	mov	r2, r3
 8016c78:	69bb      	ldr	r3, [r7, #24]
 8016c7a:	4293      	cmp	r3, r2
 8016c7c:	d114      	bne.n	8016ca8 <tcp_output+0x120>
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d110      	bne.n	8016ca8 <tcp_output+0x120>
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d10b      	bne.n	8016ca8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	2200      	movs	r2, #0
 8016c94:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	2201      	movs	r2, #1
 8016c9c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	2200      	movs	r2, #0
 8016ca4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	8b5b      	ldrh	r3, [r3, #26]
 8016cac:	f003 0302 	and.w	r3, r3, #2
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	f000 814d 	beq.w	8016f50 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8016cb6:	6878      	ldr	r0, [r7, #4]
 8016cb8:	f000 fd6c 	bl	8017794 <tcp_send_empty_ack>
 8016cbc:	4603      	mov	r3, r0
 8016cbe:	e152      	b.n	8016f66 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	2200      	movs	r2, #0
 8016cc4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ccc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016cce:	6a3b      	ldr	r3, [r7, #32]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	f000 811c 	beq.w	8016f0e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8016cd6:	e002      	b.n	8016cde <tcp_output+0x156>
 8016cd8:	6a3b      	ldr	r3, [r7, #32]
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	623b      	str	r3, [r7, #32]
 8016cde:	6a3b      	ldr	r3, [r7, #32]
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d1f8      	bne.n	8016cd8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8016ce6:	e112      	b.n	8016f0e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cea:	68db      	ldr	r3, [r3, #12]
 8016cec:	899b      	ldrh	r3, [r3, #12]
 8016cee:	b29b      	uxth	r3, r3
 8016cf0:	4618      	mov	r0, r3
 8016cf2:	f7f9 f845 	bl	800fd80 <lwip_htons>
 8016cf6:	4603      	mov	r3, r0
 8016cf8:	b2db      	uxtb	r3, r3
 8016cfa:	f003 0304 	and.w	r3, r3, #4
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d006      	beq.n	8016d10 <tcp_output+0x188>
 8016d02:	4b2f      	ldr	r3, [pc, #188]	; (8016dc0 <tcp_output+0x238>)
 8016d04:	f240 5236 	movw	r2, #1334	; 0x536
 8016d08:	4932      	ldr	r1, [pc, #200]	; (8016dd4 <tcp_output+0x24c>)
 8016d0a:	482f      	ldr	r0, [pc, #188]	; (8016dc8 <tcp_output+0x240>)
 8016d0c:	f003 fff2 	bl	801acf4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d01f      	beq.n	8016d58 <tcp_output+0x1d0>
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	8b5b      	ldrh	r3, [r3, #26]
 8016d1c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d119      	bne.n	8016d58 <tcp_output+0x1d0>
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d00b      	beq.n	8016d44 <tcp_output+0x1bc>
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d110      	bne.n	8016d58 <tcp_output+0x1d0>
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d3a:	891a      	ldrh	r2, [r3, #8]
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016d40:	429a      	cmp	r2, r3
 8016d42:	d209      	bcs.n	8016d58 <tcp_output+0x1d0>
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d004      	beq.n	8016d58 <tcp_output+0x1d0>
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016d54:	2b08      	cmp	r3, #8
 8016d56:	d901      	bls.n	8016d5c <tcp_output+0x1d4>
 8016d58:	2301      	movs	r3, #1
 8016d5a:	e000      	b.n	8016d5e <tcp_output+0x1d6>
 8016d5c:	2300      	movs	r3, #0
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d106      	bne.n	8016d70 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	8b5b      	ldrh	r3, [r3, #26]
 8016d66:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	f000 80e4 	beq.w	8016f38 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	7d1b      	ldrb	r3, [r3, #20]
 8016d74:	2b02      	cmp	r3, #2
 8016d76:	d00d      	beq.n	8016d94 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d7a:	68db      	ldr	r3, [r3, #12]
 8016d7c:	899b      	ldrh	r3, [r3, #12]
 8016d7e:	b29c      	uxth	r4, r3
 8016d80:	2010      	movs	r0, #16
 8016d82:	f7f8 fffd 	bl	800fd80 <lwip_htons>
 8016d86:	4603      	mov	r3, r0
 8016d88:	461a      	mov	r2, r3
 8016d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d8c:	68db      	ldr	r3, [r3, #12]
 8016d8e:	4322      	orrs	r2, r4
 8016d90:	b292      	uxth	r2, r2
 8016d92:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016d94:	697a      	ldr	r2, [r7, #20]
 8016d96:	6879      	ldr	r1, [r7, #4]
 8016d98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016d9a:	f000 f909 	bl	8016fb0 <tcp_output_segment>
 8016d9e:	4603      	mov	r3, r0
 8016da0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d016      	beq.n	8016dd8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	8b5b      	ldrh	r3, [r3, #26]
 8016dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016db2:	b29a      	uxth	r2, r3
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	835a      	strh	r2, [r3, #26]
      return err;
 8016db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016dbc:	e0d3      	b.n	8016f66 <tcp_output+0x3de>
 8016dbe:	bf00      	nop
 8016dc0:	0801e5f8 	.word	0x0801e5f8
 8016dc4:	0801eb3c 	.word	0x0801eb3c
 8016dc8:	0801e64c 	.word	0x0801e64c
 8016dcc:	0801eb54 	.word	0x0801eb54
 8016dd0:	200110d4 	.word	0x200110d4
 8016dd4:	0801eb7c 	.word	0x0801eb7c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dda:	681a      	ldr	r2, [r3, #0]
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	7d1b      	ldrb	r3, [r3, #20]
 8016de4:	2b02      	cmp	r3, #2
 8016de6:	d006      	beq.n	8016df6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	8b5b      	ldrh	r3, [r3, #26]
 8016dec:	f023 0303 	bic.w	r3, r3, #3
 8016df0:	b29a      	uxth	r2, r3
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016df8:	68db      	ldr	r3, [r3, #12]
 8016dfa:	685b      	ldr	r3, [r3, #4]
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	f7f8 ffd4 	bl	800fdaa <lwip_htonl>
 8016e02:	4604      	mov	r4, r0
 8016e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e06:	891b      	ldrh	r3, [r3, #8]
 8016e08:	461d      	mov	r5, r3
 8016e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e0c:	68db      	ldr	r3, [r3, #12]
 8016e0e:	899b      	ldrh	r3, [r3, #12]
 8016e10:	b29b      	uxth	r3, r3
 8016e12:	4618      	mov	r0, r3
 8016e14:	f7f8 ffb4 	bl	800fd80 <lwip_htons>
 8016e18:	4603      	mov	r3, r0
 8016e1a:	b2db      	uxtb	r3, r3
 8016e1c:	f003 0303 	and.w	r3, r3, #3
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d001      	beq.n	8016e28 <tcp_output+0x2a0>
 8016e24:	2301      	movs	r3, #1
 8016e26:	e000      	b.n	8016e2a <tcp_output+0x2a2>
 8016e28:	2300      	movs	r3, #0
 8016e2a:	442b      	add	r3, r5
 8016e2c:	4423      	add	r3, r4
 8016e2e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016e34:	68bb      	ldr	r3, [r7, #8]
 8016e36:	1ad3      	subs	r3, r2, r3
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	da02      	bge.n	8016e42 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	68ba      	ldr	r2, [r7, #8]
 8016e40:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e44:	891b      	ldrh	r3, [r3, #8]
 8016e46:	461c      	mov	r4, r3
 8016e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e4a:	68db      	ldr	r3, [r3, #12]
 8016e4c:	899b      	ldrh	r3, [r3, #12]
 8016e4e:	b29b      	uxth	r3, r3
 8016e50:	4618      	mov	r0, r3
 8016e52:	f7f8 ff95 	bl	800fd80 <lwip_htons>
 8016e56:	4603      	mov	r3, r0
 8016e58:	b2db      	uxtb	r3, r3
 8016e5a:	f003 0303 	and.w	r3, r3, #3
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d001      	beq.n	8016e66 <tcp_output+0x2de>
 8016e62:	2301      	movs	r3, #1
 8016e64:	e000      	b.n	8016e68 <tcp_output+0x2e0>
 8016e66:	2300      	movs	r3, #0
 8016e68:	4423      	add	r3, r4
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d049      	beq.n	8016f02 <tcp_output+0x37a>
      seg->next = NULL;
 8016e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e70:	2200      	movs	r2, #0
 8016e72:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d105      	bne.n	8016e88 <tcp_output+0x300>
        pcb->unacked = seg;
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016e80:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8016e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e84:	623b      	str	r3, [r7, #32]
 8016e86:	e03f      	b.n	8016f08 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e8a:	68db      	ldr	r3, [r3, #12]
 8016e8c:	685b      	ldr	r3, [r3, #4]
 8016e8e:	4618      	mov	r0, r3
 8016e90:	f7f8 ff8b 	bl	800fdaa <lwip_htonl>
 8016e94:	4604      	mov	r4, r0
 8016e96:	6a3b      	ldr	r3, [r7, #32]
 8016e98:	68db      	ldr	r3, [r3, #12]
 8016e9a:	685b      	ldr	r3, [r3, #4]
 8016e9c:	4618      	mov	r0, r3
 8016e9e:	f7f8 ff84 	bl	800fdaa <lwip_htonl>
 8016ea2:	4603      	mov	r3, r0
 8016ea4:	1ae3      	subs	r3, r4, r3
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	da24      	bge.n	8016ef4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	3370      	adds	r3, #112	; 0x70
 8016eae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016eb0:	e002      	b.n	8016eb8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8016eb2:	69fb      	ldr	r3, [r7, #28]
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016eb8:	69fb      	ldr	r3, [r7, #28]
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d011      	beq.n	8016ee4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016ec0:	69fb      	ldr	r3, [r7, #28]
 8016ec2:	681b      	ldr	r3, [r3, #0]
 8016ec4:	68db      	ldr	r3, [r3, #12]
 8016ec6:	685b      	ldr	r3, [r3, #4]
 8016ec8:	4618      	mov	r0, r3
 8016eca:	f7f8 ff6e 	bl	800fdaa <lwip_htonl>
 8016ece:	4604      	mov	r4, r0
 8016ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ed2:	68db      	ldr	r3, [r3, #12]
 8016ed4:	685b      	ldr	r3, [r3, #4]
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	f7f8 ff67 	bl	800fdaa <lwip_htonl>
 8016edc:	4603      	mov	r3, r0
 8016ede:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	dbe6      	blt.n	8016eb2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016ee4:	69fb      	ldr	r3, [r7, #28]
 8016ee6:	681a      	ldr	r2, [r3, #0]
 8016ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eea:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016eec:	69fb      	ldr	r3, [r7, #28]
 8016eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ef0:	601a      	str	r2, [r3, #0]
 8016ef2:	e009      	b.n	8016f08 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016ef4:	6a3b      	ldr	r3, [r7, #32]
 8016ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ef8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016efa:	6a3b      	ldr	r3, [r7, #32]
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	623b      	str	r3, [r7, #32]
 8016f00:	e002      	b.n	8016f08 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016f02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f04:	f7fb ff19 	bl	8012d3a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f0c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8016f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d012      	beq.n	8016f3a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f16:	68db      	ldr	r3, [r3, #12]
 8016f18:	685b      	ldr	r3, [r3, #4]
 8016f1a:	4618      	mov	r0, r3
 8016f1c:	f7f8 ff45 	bl	800fdaa <lwip_htonl>
 8016f20:	4602      	mov	r2, r0
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f26:	1ad3      	subs	r3, r2, r3
 8016f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f2a:	8912      	ldrh	r2, [r2, #8]
 8016f2c:	4413      	add	r3, r2
  while (seg != NULL &&
 8016f2e:	69ba      	ldr	r2, [r7, #24]
 8016f30:	429a      	cmp	r2, r3
 8016f32:	f4bf aed9 	bcs.w	8016ce8 <tcp_output+0x160>
 8016f36:	e000      	b.n	8016f3a <tcp_output+0x3b2>
      break;
 8016f38:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d108      	bne.n	8016f54 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	2200      	movs	r2, #0
 8016f46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8016f4a:	e004      	b.n	8016f56 <tcp_output+0x3ce>
    goto output_done;
 8016f4c:	bf00      	nop
 8016f4e:	e002      	b.n	8016f56 <tcp_output+0x3ce>
    goto output_done;
 8016f50:	bf00      	nop
 8016f52:	e000      	b.n	8016f56 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016f54:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	8b5b      	ldrh	r3, [r3, #26]
 8016f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016f5e:	b29a      	uxth	r2, r3
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016f64:	2300      	movs	r3, #0
}
 8016f66:	4618      	mov	r0, r3
 8016f68:	3728      	adds	r7, #40	; 0x28
 8016f6a:	46bd      	mov	sp, r7
 8016f6c:	bdb0      	pop	{r4, r5, r7, pc}
 8016f6e:	bf00      	nop

08016f70 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016f70:	b580      	push	{r7, lr}
 8016f72:	b082      	sub	sp, #8
 8016f74:	af00      	add	r7, sp, #0
 8016f76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d106      	bne.n	8016f8c <tcp_output_segment_busy+0x1c>
 8016f7e:	4b09      	ldr	r3, [pc, #36]	; (8016fa4 <tcp_output_segment_busy+0x34>)
 8016f80:	f240 529a 	movw	r2, #1434	; 0x59a
 8016f84:	4908      	ldr	r1, [pc, #32]	; (8016fa8 <tcp_output_segment_busy+0x38>)
 8016f86:	4809      	ldr	r0, [pc, #36]	; (8016fac <tcp_output_segment_busy+0x3c>)
 8016f88:	f003 feb4 	bl	801acf4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	685b      	ldr	r3, [r3, #4]
 8016f90:	7b9b      	ldrb	r3, [r3, #14]
 8016f92:	2b01      	cmp	r3, #1
 8016f94:	d001      	beq.n	8016f9a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8016f96:	2301      	movs	r3, #1
 8016f98:	e000      	b.n	8016f9c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8016f9a:	2300      	movs	r3, #0
}
 8016f9c:	4618      	mov	r0, r3
 8016f9e:	3708      	adds	r7, #8
 8016fa0:	46bd      	mov	sp, r7
 8016fa2:	bd80      	pop	{r7, pc}
 8016fa4:	0801e5f8 	.word	0x0801e5f8
 8016fa8:	0801eb94 	.word	0x0801eb94
 8016fac:	0801e64c 	.word	0x0801e64c

08016fb0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8016fb0:	b5b0      	push	{r4, r5, r7, lr}
 8016fb2:	b08c      	sub	sp, #48	; 0x30
 8016fb4:	af04      	add	r7, sp, #16
 8016fb6:	60f8      	str	r0, [r7, #12]
 8016fb8:	60b9      	str	r1, [r7, #8]
 8016fba:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d106      	bne.n	8016fd0 <tcp_output_segment+0x20>
 8016fc2:	4b63      	ldr	r3, [pc, #396]	; (8017150 <tcp_output_segment+0x1a0>)
 8016fc4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8016fc8:	4962      	ldr	r1, [pc, #392]	; (8017154 <tcp_output_segment+0x1a4>)
 8016fca:	4863      	ldr	r0, [pc, #396]	; (8017158 <tcp_output_segment+0x1a8>)
 8016fcc:	f003 fe92 	bl	801acf4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8016fd0:	68bb      	ldr	r3, [r7, #8]
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d106      	bne.n	8016fe4 <tcp_output_segment+0x34>
 8016fd6:	4b5e      	ldr	r3, [pc, #376]	; (8017150 <tcp_output_segment+0x1a0>)
 8016fd8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8016fdc:	495f      	ldr	r1, [pc, #380]	; (801715c <tcp_output_segment+0x1ac>)
 8016fde:	485e      	ldr	r0, [pc, #376]	; (8017158 <tcp_output_segment+0x1a8>)
 8016fe0:	f003 fe88 	bl	801acf4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d106      	bne.n	8016ff8 <tcp_output_segment+0x48>
 8016fea:	4b59      	ldr	r3, [pc, #356]	; (8017150 <tcp_output_segment+0x1a0>)
 8016fec:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8016ff0:	495b      	ldr	r1, [pc, #364]	; (8017160 <tcp_output_segment+0x1b0>)
 8016ff2:	4859      	ldr	r0, [pc, #356]	; (8017158 <tcp_output_segment+0x1a8>)
 8016ff4:	f003 fe7e 	bl	801acf4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8016ff8:	68f8      	ldr	r0, [r7, #12]
 8016ffa:	f7ff ffb9 	bl	8016f70 <tcp_output_segment_busy>
 8016ffe:	4603      	mov	r3, r0
 8017000:	2b00      	cmp	r3, #0
 8017002:	d001      	beq.n	8017008 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8017004:	2300      	movs	r3, #0
 8017006:	e09f      	b.n	8017148 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8017008:	68bb      	ldr	r3, [r7, #8]
 801700a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801700c:	68fb      	ldr	r3, [r7, #12]
 801700e:	68dc      	ldr	r4, [r3, #12]
 8017010:	4610      	mov	r0, r2
 8017012:	f7f8 feca 	bl	800fdaa <lwip_htonl>
 8017016:	4603      	mov	r3, r0
 8017018:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801701a:	68bb      	ldr	r3, [r7, #8]
 801701c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	68dc      	ldr	r4, [r3, #12]
 8017022:	4610      	mov	r0, r2
 8017024:	f7f8 feac 	bl	800fd80 <lwip_htons>
 8017028:	4603      	mov	r3, r0
 801702a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801702c:	68bb      	ldr	r3, [r7, #8]
 801702e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017030:	68ba      	ldr	r2, [r7, #8]
 8017032:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8017034:	441a      	add	r2, r3
 8017036:	68bb      	ldr	r3, [r7, #8]
 8017038:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	68db      	ldr	r3, [r3, #12]
 801703e:	3314      	adds	r3, #20
 8017040:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	7a9b      	ldrb	r3, [r3, #10]
 8017046:	f003 0301 	and.w	r3, r3, #1
 801704a:	2b00      	cmp	r3, #0
 801704c:	d015      	beq.n	801707a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801704e:	68bb      	ldr	r3, [r7, #8]
 8017050:	3304      	adds	r3, #4
 8017052:	461a      	mov	r2, r3
 8017054:	6879      	ldr	r1, [r7, #4]
 8017056:	f44f 7006 	mov.w	r0, #536	; 0x218
 801705a:	f7fc fa33 	bl	80134c4 <tcp_eff_send_mss_netif>
 801705e:	4603      	mov	r3, r0
 8017060:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8017062:	8b7b      	ldrh	r3, [r7, #26]
 8017064:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8017068:	4618      	mov	r0, r3
 801706a:	f7f8 fe9e 	bl	800fdaa <lwip_htonl>
 801706e:	4602      	mov	r2, r0
 8017070:	69fb      	ldr	r3, [r7, #28]
 8017072:	601a      	str	r2, [r3, #0]
    opts += 1;
 8017074:	69fb      	ldr	r3, [r7, #28]
 8017076:	3304      	adds	r3, #4
 8017078:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801707a:	68bb      	ldr	r3, [r7, #8]
 801707c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017080:	2b00      	cmp	r3, #0
 8017082:	da02      	bge.n	801708a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8017084:	68bb      	ldr	r3, [r7, #8]
 8017086:	2200      	movs	r2, #0
 8017088:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801708a:	68bb      	ldr	r3, [r7, #8]
 801708c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801708e:	2b00      	cmp	r3, #0
 8017090:	d10c      	bne.n	80170ac <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8017092:	4b34      	ldr	r3, [pc, #208]	; (8017164 <tcp_output_segment+0x1b4>)
 8017094:	681a      	ldr	r2, [r3, #0]
 8017096:	68bb      	ldr	r3, [r7, #8]
 8017098:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	68db      	ldr	r3, [r3, #12]
 801709e:	685b      	ldr	r3, [r3, #4]
 80170a0:	4618      	mov	r0, r3
 80170a2:	f7f8 fe82 	bl	800fdaa <lwip_htonl>
 80170a6:	4602      	mov	r2, r0
 80170a8:	68bb      	ldr	r3, [r7, #8]
 80170aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	68da      	ldr	r2, [r3, #12]
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	685b      	ldr	r3, [r3, #4]
 80170b4:	685b      	ldr	r3, [r3, #4]
 80170b6:	1ad3      	subs	r3, r2, r3
 80170b8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	685b      	ldr	r3, [r3, #4]
 80170be:	8959      	ldrh	r1, [r3, #10]
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	685b      	ldr	r3, [r3, #4]
 80170c4:	8b3a      	ldrh	r2, [r7, #24]
 80170c6:	1a8a      	subs	r2, r1, r2
 80170c8:	b292      	uxth	r2, r2
 80170ca:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	685b      	ldr	r3, [r3, #4]
 80170d0:	8919      	ldrh	r1, [r3, #8]
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	685b      	ldr	r3, [r3, #4]
 80170d6:	8b3a      	ldrh	r2, [r7, #24]
 80170d8:	1a8a      	subs	r2, r1, r2
 80170da:	b292      	uxth	r2, r2
 80170dc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	685b      	ldr	r3, [r3, #4]
 80170e2:	68fa      	ldr	r2, [r7, #12]
 80170e4:	68d2      	ldr	r2, [r2, #12]
 80170e6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	68db      	ldr	r3, [r3, #12]
 80170ec:	2200      	movs	r2, #0
 80170ee:	741a      	strb	r2, [r3, #16]
 80170f0:	2200      	movs	r2, #0
 80170f2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80170f4:	68fb      	ldr	r3, [r7, #12]
 80170f6:	68db      	ldr	r3, [r3, #12]
 80170f8:	f103 0214 	add.w	r2, r3, #20
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	7a9b      	ldrb	r3, [r3, #10]
 8017100:	009b      	lsls	r3, r3, #2
 8017102:	f003 0304 	and.w	r3, r3, #4
 8017106:	4413      	add	r3, r2
 8017108:	69fa      	ldr	r2, [r7, #28]
 801710a:	429a      	cmp	r2, r3
 801710c:	d006      	beq.n	801711c <tcp_output_segment+0x16c>
 801710e:	4b10      	ldr	r3, [pc, #64]	; (8017150 <tcp_output_segment+0x1a0>)
 8017110:	f240 621c 	movw	r2, #1564	; 0x61c
 8017114:	4914      	ldr	r1, [pc, #80]	; (8017168 <tcp_output_segment+0x1b8>)
 8017116:	4810      	ldr	r0, [pc, #64]	; (8017158 <tcp_output_segment+0x1a8>)
 8017118:	f003 fdec 	bl	801acf4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	6858      	ldr	r0, [r3, #4]
 8017120:	68b9      	ldr	r1, [r7, #8]
 8017122:	68bb      	ldr	r3, [r7, #8]
 8017124:	1d1c      	adds	r4, r3, #4
 8017126:	68bb      	ldr	r3, [r7, #8]
 8017128:	7add      	ldrb	r5, [r3, #11]
 801712a:	68bb      	ldr	r3, [r7, #8]
 801712c:	7a9b      	ldrb	r3, [r3, #10]
 801712e:	687a      	ldr	r2, [r7, #4]
 8017130:	9202      	str	r2, [sp, #8]
 8017132:	2206      	movs	r2, #6
 8017134:	9201      	str	r2, [sp, #4]
 8017136:	9300      	str	r3, [sp, #0]
 8017138:	462b      	mov	r3, r5
 801713a:	4622      	mov	r2, r4
 801713c:	f002 fbac 	bl	8019898 <ip4_output_if>
 8017140:	4603      	mov	r3, r0
 8017142:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8017144:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017148:	4618      	mov	r0, r3
 801714a:	3720      	adds	r7, #32
 801714c:	46bd      	mov	sp, r7
 801714e:	bdb0      	pop	{r4, r5, r7, pc}
 8017150:	0801e5f8 	.word	0x0801e5f8
 8017154:	0801ebbc 	.word	0x0801ebbc
 8017158:	0801e64c 	.word	0x0801e64c
 801715c:	0801ebdc 	.word	0x0801ebdc
 8017160:	0801ebfc 	.word	0x0801ebfc
 8017164:	20011088 	.word	0x20011088
 8017168:	0801ec20 	.word	0x0801ec20

0801716c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801716c:	b5b0      	push	{r4, r5, r7, lr}
 801716e:	b084      	sub	sp, #16
 8017170:	af00      	add	r7, sp, #0
 8017172:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	2b00      	cmp	r3, #0
 8017178:	d106      	bne.n	8017188 <tcp_rexmit_rto_prepare+0x1c>
 801717a:	4b31      	ldr	r3, [pc, #196]	; (8017240 <tcp_rexmit_rto_prepare+0xd4>)
 801717c:	f240 6263 	movw	r2, #1635	; 0x663
 8017180:	4930      	ldr	r1, [pc, #192]	; (8017244 <tcp_rexmit_rto_prepare+0xd8>)
 8017182:	4831      	ldr	r0, [pc, #196]	; (8017248 <tcp_rexmit_rto_prepare+0xdc>)
 8017184:	f003 fdb6 	bl	801acf4 <iprintf>

  if (pcb->unacked == NULL) {
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801718c:	2b00      	cmp	r3, #0
 801718e:	d102      	bne.n	8017196 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8017190:	f06f 0305 	mvn.w	r3, #5
 8017194:	e050      	b.n	8017238 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801719a:	60fb      	str	r3, [r7, #12]
 801719c:	e00b      	b.n	80171b6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801719e:	68f8      	ldr	r0, [r7, #12]
 80171a0:	f7ff fee6 	bl	8016f70 <tcp_output_segment_busy>
 80171a4:	4603      	mov	r3, r0
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d002      	beq.n	80171b0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80171aa:	f06f 0305 	mvn.w	r3, #5
 80171ae:	e043      	b.n	8017238 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	681b      	ldr	r3, [r3, #0]
 80171b4:	60fb      	str	r3, [r7, #12]
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d1ef      	bne.n	801719e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80171be:	68f8      	ldr	r0, [r7, #12]
 80171c0:	f7ff fed6 	bl	8016f70 <tcp_output_segment_busy>
 80171c4:	4603      	mov	r3, r0
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d002      	beq.n	80171d0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80171ca:	f06f 0305 	mvn.w	r3, #5
 80171ce:	e033      	b.n	8017238 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	2200      	movs	r2, #0
 80171e4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	8b5b      	ldrh	r3, [r3, #26]
 80171ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80171ee:	b29a      	uxth	r2, r3
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	68db      	ldr	r3, [r3, #12]
 80171f8:	685b      	ldr	r3, [r3, #4]
 80171fa:	4618      	mov	r0, r3
 80171fc:	f7f8 fdd5 	bl	800fdaa <lwip_htonl>
 8017200:	4604      	mov	r4, r0
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	891b      	ldrh	r3, [r3, #8]
 8017206:	461d      	mov	r5, r3
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	68db      	ldr	r3, [r3, #12]
 801720c:	899b      	ldrh	r3, [r3, #12]
 801720e:	b29b      	uxth	r3, r3
 8017210:	4618      	mov	r0, r3
 8017212:	f7f8 fdb5 	bl	800fd80 <lwip_htons>
 8017216:	4603      	mov	r3, r0
 8017218:	b2db      	uxtb	r3, r3
 801721a:	f003 0303 	and.w	r3, r3, #3
 801721e:	2b00      	cmp	r3, #0
 8017220:	d001      	beq.n	8017226 <tcp_rexmit_rto_prepare+0xba>
 8017222:	2301      	movs	r3, #1
 8017224:	e000      	b.n	8017228 <tcp_rexmit_rto_prepare+0xbc>
 8017226:	2300      	movs	r3, #0
 8017228:	442b      	add	r3, r5
 801722a:	18e2      	adds	r2, r4, r3
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	2200      	movs	r2, #0
 8017234:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8017236:	2300      	movs	r3, #0
}
 8017238:	4618      	mov	r0, r3
 801723a:	3710      	adds	r7, #16
 801723c:	46bd      	mov	sp, r7
 801723e:	bdb0      	pop	{r4, r5, r7, pc}
 8017240:	0801e5f8 	.word	0x0801e5f8
 8017244:	0801ec34 	.word	0x0801ec34
 8017248:	0801e64c 	.word	0x0801e64c

0801724c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801724c:	b580      	push	{r7, lr}
 801724e:	b082      	sub	sp, #8
 8017250:	af00      	add	r7, sp, #0
 8017252:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	2b00      	cmp	r3, #0
 8017258:	d106      	bne.n	8017268 <tcp_rexmit_rto_commit+0x1c>
 801725a:	4b0d      	ldr	r3, [pc, #52]	; (8017290 <tcp_rexmit_rto_commit+0x44>)
 801725c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8017260:	490c      	ldr	r1, [pc, #48]	; (8017294 <tcp_rexmit_rto_commit+0x48>)
 8017262:	480d      	ldr	r0, [pc, #52]	; (8017298 <tcp_rexmit_rto_commit+0x4c>)
 8017264:	f003 fd46 	bl	801acf4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801726e:	2bff      	cmp	r3, #255	; 0xff
 8017270:	d007      	beq.n	8017282 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017278:	3301      	adds	r3, #1
 801727a:	b2da      	uxtb	r2, r3
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8017282:	6878      	ldr	r0, [r7, #4]
 8017284:	f7ff fc80 	bl	8016b88 <tcp_output>
}
 8017288:	bf00      	nop
 801728a:	3708      	adds	r7, #8
 801728c:	46bd      	mov	sp, r7
 801728e:	bd80      	pop	{r7, pc}
 8017290:	0801e5f8 	.word	0x0801e5f8
 8017294:	0801ec58 	.word	0x0801ec58
 8017298:	0801e64c 	.word	0x0801e64c

0801729c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801729c:	b580      	push	{r7, lr}
 801729e:	b082      	sub	sp, #8
 80172a0:	af00      	add	r7, sp, #0
 80172a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d106      	bne.n	80172b8 <tcp_rexmit_rto+0x1c>
 80172aa:	4b0a      	ldr	r3, [pc, #40]	; (80172d4 <tcp_rexmit_rto+0x38>)
 80172ac:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80172b0:	4909      	ldr	r1, [pc, #36]	; (80172d8 <tcp_rexmit_rto+0x3c>)
 80172b2:	480a      	ldr	r0, [pc, #40]	; (80172dc <tcp_rexmit_rto+0x40>)
 80172b4:	f003 fd1e 	bl	801acf4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80172b8:	6878      	ldr	r0, [r7, #4]
 80172ba:	f7ff ff57 	bl	801716c <tcp_rexmit_rto_prepare>
 80172be:	4603      	mov	r3, r0
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d102      	bne.n	80172ca <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80172c4:	6878      	ldr	r0, [r7, #4]
 80172c6:	f7ff ffc1 	bl	801724c <tcp_rexmit_rto_commit>
  }
}
 80172ca:	bf00      	nop
 80172cc:	3708      	adds	r7, #8
 80172ce:	46bd      	mov	sp, r7
 80172d0:	bd80      	pop	{r7, pc}
 80172d2:	bf00      	nop
 80172d4:	0801e5f8 	.word	0x0801e5f8
 80172d8:	0801ec7c 	.word	0x0801ec7c
 80172dc:	0801e64c 	.word	0x0801e64c

080172e0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80172e0:	b590      	push	{r4, r7, lr}
 80172e2:	b085      	sub	sp, #20
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d106      	bne.n	80172fc <tcp_rexmit+0x1c>
 80172ee:	4b2f      	ldr	r3, [pc, #188]	; (80173ac <tcp_rexmit+0xcc>)
 80172f0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80172f4:	492e      	ldr	r1, [pc, #184]	; (80173b0 <tcp_rexmit+0xd0>)
 80172f6:	482f      	ldr	r0, [pc, #188]	; (80173b4 <tcp_rexmit+0xd4>)
 80172f8:	f003 fcfc 	bl	801acf4 <iprintf>

  if (pcb->unacked == NULL) {
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017300:	2b00      	cmp	r3, #0
 8017302:	d102      	bne.n	801730a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017304:	f06f 0305 	mvn.w	r3, #5
 8017308:	e04c      	b.n	80173a4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801730e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8017310:	68b8      	ldr	r0, [r7, #8]
 8017312:	f7ff fe2d 	bl	8016f70 <tcp_output_segment_busy>
 8017316:	4603      	mov	r3, r0
 8017318:	2b00      	cmp	r3, #0
 801731a:	d002      	beq.n	8017322 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801731c:	f06f 0305 	mvn.w	r3, #5
 8017320:	e040      	b.n	80173a4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8017322:	68bb      	ldr	r3, [r7, #8]
 8017324:	681a      	ldr	r2, [r3, #0]
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	336c      	adds	r3, #108	; 0x6c
 801732e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017330:	e002      	b.n	8017338 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	2b00      	cmp	r3, #0
 801733e:	d011      	beq.n	8017364 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017340:	68fb      	ldr	r3, [r7, #12]
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	68db      	ldr	r3, [r3, #12]
 8017346:	685b      	ldr	r3, [r3, #4]
 8017348:	4618      	mov	r0, r3
 801734a:	f7f8 fd2e 	bl	800fdaa <lwip_htonl>
 801734e:	4604      	mov	r4, r0
 8017350:	68bb      	ldr	r3, [r7, #8]
 8017352:	68db      	ldr	r3, [r3, #12]
 8017354:	685b      	ldr	r3, [r3, #4]
 8017356:	4618      	mov	r0, r3
 8017358:	f7f8 fd27 	bl	800fdaa <lwip_htonl>
 801735c:	4603      	mov	r3, r0
 801735e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8017360:	2b00      	cmp	r3, #0
 8017362:	dbe6      	blt.n	8017332 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	681a      	ldr	r2, [r3, #0]
 8017368:	68bb      	ldr	r3, [r7, #8]
 801736a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801736c:	68fb      	ldr	r3, [r7, #12]
 801736e:	68ba      	ldr	r2, [r7, #8]
 8017370:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8017372:	68bb      	ldr	r3, [r7, #8]
 8017374:	681b      	ldr	r3, [r3, #0]
 8017376:	2b00      	cmp	r3, #0
 8017378:	d103      	bne.n	8017382 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	2200      	movs	r2, #0
 801737e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017388:	2bff      	cmp	r3, #255	; 0xff
 801738a:	d007      	beq.n	801739c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017392:	3301      	adds	r3, #1
 8017394:	b2da      	uxtb	r2, r3
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	2200      	movs	r2, #0
 80173a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80173a2:	2300      	movs	r3, #0
}
 80173a4:	4618      	mov	r0, r3
 80173a6:	3714      	adds	r7, #20
 80173a8:	46bd      	mov	sp, r7
 80173aa:	bd90      	pop	{r4, r7, pc}
 80173ac:	0801e5f8 	.word	0x0801e5f8
 80173b0:	0801ec98 	.word	0x0801ec98
 80173b4:	0801e64c 	.word	0x0801e64c

080173b8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80173b8:	b580      	push	{r7, lr}
 80173ba:	b082      	sub	sp, #8
 80173bc:	af00      	add	r7, sp, #0
 80173be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d106      	bne.n	80173d4 <tcp_rexmit_fast+0x1c>
 80173c6:	4b2a      	ldr	r3, [pc, #168]	; (8017470 <tcp_rexmit_fast+0xb8>)
 80173c8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80173cc:	4929      	ldr	r1, [pc, #164]	; (8017474 <tcp_rexmit_fast+0xbc>)
 80173ce:	482a      	ldr	r0, [pc, #168]	; (8017478 <tcp_rexmit_fast+0xc0>)
 80173d0:	f003 fc90 	bl	801acf4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d045      	beq.n	8017468 <tcp_rexmit_fast+0xb0>
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	8b5b      	ldrh	r3, [r3, #26]
 80173e0:	f003 0304 	and.w	r3, r3, #4
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d13f      	bne.n	8017468 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80173e8:	6878      	ldr	r0, [r7, #4]
 80173ea:	f7ff ff79 	bl	80172e0 <tcp_rexmit>
 80173ee:	4603      	mov	r3, r0
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d139      	bne.n	8017468 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017400:	4293      	cmp	r3, r2
 8017402:	bf28      	it	cs
 8017404:	4613      	movcs	r3, r2
 8017406:	b29b      	uxth	r3, r3
 8017408:	2b00      	cmp	r3, #0
 801740a:	da00      	bge.n	801740e <tcp_rexmit_fast+0x56>
 801740c:	3301      	adds	r3, #1
 801740e:	105b      	asrs	r3, r3, #1
 8017410:	b29a      	uxth	r2, r3
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801741e:	461a      	mov	r2, r3
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017424:	005b      	lsls	r3, r3, #1
 8017426:	429a      	cmp	r2, r3
 8017428:	d206      	bcs.n	8017438 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801742e:	005b      	lsls	r3, r3, #1
 8017430:	b29a      	uxth	r2, r3
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017442:	4619      	mov	r1, r3
 8017444:	0049      	lsls	r1, r1, #1
 8017446:	440b      	add	r3, r1
 8017448:	b29b      	uxth	r3, r3
 801744a:	4413      	add	r3, r2
 801744c:	b29a      	uxth	r2, r3
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	8b5b      	ldrh	r3, [r3, #26]
 8017458:	f043 0304 	orr.w	r3, r3, #4
 801745c:	b29a      	uxth	r2, r3
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	2200      	movs	r2, #0
 8017466:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8017468:	bf00      	nop
 801746a:	3708      	adds	r7, #8
 801746c:	46bd      	mov	sp, r7
 801746e:	bd80      	pop	{r7, pc}
 8017470:	0801e5f8 	.word	0x0801e5f8
 8017474:	0801ecb0 	.word	0x0801ecb0
 8017478:	0801e64c 	.word	0x0801e64c

0801747c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801747c:	b580      	push	{r7, lr}
 801747e:	b086      	sub	sp, #24
 8017480:	af00      	add	r7, sp, #0
 8017482:	60f8      	str	r0, [r7, #12]
 8017484:	607b      	str	r3, [r7, #4]
 8017486:	460b      	mov	r3, r1
 8017488:	817b      	strh	r3, [r7, #10]
 801748a:	4613      	mov	r3, r2
 801748c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801748e:	897a      	ldrh	r2, [r7, #10]
 8017490:	893b      	ldrh	r3, [r7, #8]
 8017492:	4413      	add	r3, r2
 8017494:	b29b      	uxth	r3, r3
 8017496:	3314      	adds	r3, #20
 8017498:	b29b      	uxth	r3, r3
 801749a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801749e:	4619      	mov	r1, r3
 80174a0:	2022      	movs	r0, #34	; 0x22
 80174a2:	f7f9 fd7b 	bl	8010f9c <pbuf_alloc>
 80174a6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80174a8:	697b      	ldr	r3, [r7, #20]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d04d      	beq.n	801754a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80174ae:	897b      	ldrh	r3, [r7, #10]
 80174b0:	3313      	adds	r3, #19
 80174b2:	697a      	ldr	r2, [r7, #20]
 80174b4:	8952      	ldrh	r2, [r2, #10]
 80174b6:	4293      	cmp	r3, r2
 80174b8:	db06      	blt.n	80174c8 <tcp_output_alloc_header_common+0x4c>
 80174ba:	4b26      	ldr	r3, [pc, #152]	; (8017554 <tcp_output_alloc_header_common+0xd8>)
 80174bc:	f240 7223 	movw	r2, #1827	; 0x723
 80174c0:	4925      	ldr	r1, [pc, #148]	; (8017558 <tcp_output_alloc_header_common+0xdc>)
 80174c2:	4826      	ldr	r0, [pc, #152]	; (801755c <tcp_output_alloc_header_common+0xe0>)
 80174c4:	f003 fc16 	bl	801acf4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80174c8:	697b      	ldr	r3, [r7, #20]
 80174ca:	685b      	ldr	r3, [r3, #4]
 80174cc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80174ce:	8c3b      	ldrh	r3, [r7, #32]
 80174d0:	4618      	mov	r0, r3
 80174d2:	f7f8 fc55 	bl	800fd80 <lwip_htons>
 80174d6:	4603      	mov	r3, r0
 80174d8:	461a      	mov	r2, r3
 80174da:	693b      	ldr	r3, [r7, #16]
 80174dc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80174de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80174e0:	4618      	mov	r0, r3
 80174e2:	f7f8 fc4d 	bl	800fd80 <lwip_htons>
 80174e6:	4603      	mov	r3, r0
 80174e8:	461a      	mov	r2, r3
 80174ea:	693b      	ldr	r3, [r7, #16]
 80174ec:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80174ee:	693b      	ldr	r3, [r7, #16]
 80174f0:	687a      	ldr	r2, [r7, #4]
 80174f2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80174f4:	68f8      	ldr	r0, [r7, #12]
 80174f6:	f7f8 fc58 	bl	800fdaa <lwip_htonl>
 80174fa:	4602      	mov	r2, r0
 80174fc:	693b      	ldr	r3, [r7, #16]
 80174fe:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8017500:	897b      	ldrh	r3, [r7, #10]
 8017502:	089b      	lsrs	r3, r3, #2
 8017504:	b29b      	uxth	r3, r3
 8017506:	3305      	adds	r3, #5
 8017508:	b29b      	uxth	r3, r3
 801750a:	031b      	lsls	r3, r3, #12
 801750c:	b29a      	uxth	r2, r3
 801750e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017512:	b29b      	uxth	r3, r3
 8017514:	4313      	orrs	r3, r2
 8017516:	b29b      	uxth	r3, r3
 8017518:	4618      	mov	r0, r3
 801751a:	f7f8 fc31 	bl	800fd80 <lwip_htons>
 801751e:	4603      	mov	r3, r0
 8017520:	461a      	mov	r2, r3
 8017522:	693b      	ldr	r3, [r7, #16]
 8017524:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8017526:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017528:	4618      	mov	r0, r3
 801752a:	f7f8 fc29 	bl	800fd80 <lwip_htons>
 801752e:	4603      	mov	r3, r0
 8017530:	461a      	mov	r2, r3
 8017532:	693b      	ldr	r3, [r7, #16]
 8017534:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8017536:	693b      	ldr	r3, [r7, #16]
 8017538:	2200      	movs	r2, #0
 801753a:	741a      	strb	r2, [r3, #16]
 801753c:	2200      	movs	r2, #0
 801753e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8017540:	693b      	ldr	r3, [r7, #16]
 8017542:	2200      	movs	r2, #0
 8017544:	749a      	strb	r2, [r3, #18]
 8017546:	2200      	movs	r2, #0
 8017548:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801754a:	697b      	ldr	r3, [r7, #20]
}
 801754c:	4618      	mov	r0, r3
 801754e:	3718      	adds	r7, #24
 8017550:	46bd      	mov	sp, r7
 8017552:	bd80      	pop	{r7, pc}
 8017554:	0801e5f8 	.word	0x0801e5f8
 8017558:	0801ecd0 	.word	0x0801ecd0
 801755c:	0801e64c 	.word	0x0801e64c

08017560 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8017560:	b5b0      	push	{r4, r5, r7, lr}
 8017562:	b08a      	sub	sp, #40	; 0x28
 8017564:	af04      	add	r7, sp, #16
 8017566:	60f8      	str	r0, [r7, #12]
 8017568:	607b      	str	r3, [r7, #4]
 801756a:	460b      	mov	r3, r1
 801756c:	817b      	strh	r3, [r7, #10]
 801756e:	4613      	mov	r3, r2
 8017570:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8017572:	68fb      	ldr	r3, [r7, #12]
 8017574:	2b00      	cmp	r3, #0
 8017576:	d106      	bne.n	8017586 <tcp_output_alloc_header+0x26>
 8017578:	4b15      	ldr	r3, [pc, #84]	; (80175d0 <tcp_output_alloc_header+0x70>)
 801757a:	f240 7242 	movw	r2, #1858	; 0x742
 801757e:	4915      	ldr	r1, [pc, #84]	; (80175d4 <tcp_output_alloc_header+0x74>)
 8017580:	4815      	ldr	r0, [pc, #84]	; (80175d8 <tcp_output_alloc_header+0x78>)
 8017582:	f003 fbb7 	bl	801acf4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8017586:	68fb      	ldr	r3, [r7, #12]
 8017588:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801758a:	68fb      	ldr	r3, [r7, #12]
 801758c:	8adb      	ldrh	r3, [r3, #22]
 801758e:	68fa      	ldr	r2, [r7, #12]
 8017590:	8b12      	ldrh	r2, [r2, #24]
 8017592:	68f9      	ldr	r1, [r7, #12]
 8017594:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8017596:	893d      	ldrh	r5, [r7, #8]
 8017598:	897c      	ldrh	r4, [r7, #10]
 801759a:	9103      	str	r1, [sp, #12]
 801759c:	2110      	movs	r1, #16
 801759e:	9102      	str	r1, [sp, #8]
 80175a0:	9201      	str	r2, [sp, #4]
 80175a2:	9300      	str	r3, [sp, #0]
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	462a      	mov	r2, r5
 80175a8:	4621      	mov	r1, r4
 80175aa:	f7ff ff67 	bl	801747c <tcp_output_alloc_header_common>
 80175ae:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80175b0:	697b      	ldr	r3, [r7, #20]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d006      	beq.n	80175c4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175ba:	68fa      	ldr	r2, [r7, #12]
 80175bc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80175be:	441a      	add	r2, r3
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80175c4:	697b      	ldr	r3, [r7, #20]
}
 80175c6:	4618      	mov	r0, r3
 80175c8:	3718      	adds	r7, #24
 80175ca:	46bd      	mov	sp, r7
 80175cc:	bdb0      	pop	{r4, r5, r7, pc}
 80175ce:	bf00      	nop
 80175d0:	0801e5f8 	.word	0x0801e5f8
 80175d4:	0801ed00 	.word	0x0801ed00
 80175d8:	0801e64c 	.word	0x0801e64c

080175dc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80175dc:	b580      	push	{r7, lr}
 80175de:	b088      	sub	sp, #32
 80175e0:	af00      	add	r7, sp, #0
 80175e2:	60f8      	str	r0, [r7, #12]
 80175e4:	60b9      	str	r1, [r7, #8]
 80175e6:	4611      	mov	r1, r2
 80175e8:	461a      	mov	r2, r3
 80175ea:	460b      	mov	r3, r1
 80175ec:	71fb      	strb	r3, [r7, #7]
 80175ee:	4613      	mov	r3, r2
 80175f0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80175f2:	2300      	movs	r3, #0
 80175f4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80175f6:	68bb      	ldr	r3, [r7, #8]
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d106      	bne.n	801760a <tcp_output_fill_options+0x2e>
 80175fc:	4b13      	ldr	r3, [pc, #76]	; (801764c <tcp_output_fill_options+0x70>)
 80175fe:	f240 7256 	movw	r2, #1878	; 0x756
 8017602:	4913      	ldr	r1, [pc, #76]	; (8017650 <tcp_output_fill_options+0x74>)
 8017604:	4813      	ldr	r0, [pc, #76]	; (8017654 <tcp_output_fill_options+0x78>)
 8017606:	f003 fb75 	bl	801acf4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801760a:	68bb      	ldr	r3, [r7, #8]
 801760c:	685b      	ldr	r3, [r3, #4]
 801760e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8017610:	69bb      	ldr	r3, [r7, #24]
 8017612:	3314      	adds	r3, #20
 8017614:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8017616:	69bb      	ldr	r3, [r7, #24]
 8017618:	f103 0214 	add.w	r2, r3, #20
 801761c:	8bfb      	ldrh	r3, [r7, #30]
 801761e:	009b      	lsls	r3, r3, #2
 8017620:	4619      	mov	r1, r3
 8017622:	79fb      	ldrb	r3, [r7, #7]
 8017624:	009b      	lsls	r3, r3, #2
 8017626:	f003 0304 	and.w	r3, r3, #4
 801762a:	440b      	add	r3, r1
 801762c:	4413      	add	r3, r2
 801762e:	697a      	ldr	r2, [r7, #20]
 8017630:	429a      	cmp	r2, r3
 8017632:	d006      	beq.n	8017642 <tcp_output_fill_options+0x66>
 8017634:	4b05      	ldr	r3, [pc, #20]	; (801764c <tcp_output_fill_options+0x70>)
 8017636:	f240 7275 	movw	r2, #1909	; 0x775
 801763a:	4907      	ldr	r1, [pc, #28]	; (8017658 <tcp_output_fill_options+0x7c>)
 801763c:	4805      	ldr	r0, [pc, #20]	; (8017654 <tcp_output_fill_options+0x78>)
 801763e:	f003 fb59 	bl	801acf4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8017642:	bf00      	nop
 8017644:	3720      	adds	r7, #32
 8017646:	46bd      	mov	sp, r7
 8017648:	bd80      	pop	{r7, pc}
 801764a:	bf00      	nop
 801764c:	0801e5f8 	.word	0x0801e5f8
 8017650:	0801ed28 	.word	0x0801ed28
 8017654:	0801e64c 	.word	0x0801e64c
 8017658:	0801ec20 	.word	0x0801ec20

0801765c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801765c:	b580      	push	{r7, lr}
 801765e:	b08a      	sub	sp, #40	; 0x28
 8017660:	af04      	add	r7, sp, #16
 8017662:	60f8      	str	r0, [r7, #12]
 8017664:	60b9      	str	r1, [r7, #8]
 8017666:	607a      	str	r2, [r7, #4]
 8017668:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801766a:	68bb      	ldr	r3, [r7, #8]
 801766c:	2b00      	cmp	r3, #0
 801766e:	d106      	bne.n	801767e <tcp_output_control_segment+0x22>
 8017670:	4b1c      	ldr	r3, [pc, #112]	; (80176e4 <tcp_output_control_segment+0x88>)
 8017672:	f240 7287 	movw	r2, #1927	; 0x787
 8017676:	491c      	ldr	r1, [pc, #112]	; (80176e8 <tcp_output_control_segment+0x8c>)
 8017678:	481c      	ldr	r0, [pc, #112]	; (80176ec <tcp_output_control_segment+0x90>)
 801767a:	f003 fb3b 	bl	801acf4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801767e:	683a      	ldr	r2, [r7, #0]
 8017680:	6879      	ldr	r1, [r7, #4]
 8017682:	68f8      	ldr	r0, [r7, #12]
 8017684:	f7fe fae8 	bl	8015c58 <tcp_route>
 8017688:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801768a:	693b      	ldr	r3, [r7, #16]
 801768c:	2b00      	cmp	r3, #0
 801768e:	d102      	bne.n	8017696 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8017690:	23fc      	movs	r3, #252	; 0xfc
 8017692:	75fb      	strb	r3, [r7, #23]
 8017694:	e01c      	b.n	80176d0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8017696:	68fb      	ldr	r3, [r7, #12]
 8017698:	2b00      	cmp	r3, #0
 801769a:	d006      	beq.n	80176aa <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	7adb      	ldrb	r3, [r3, #11]
 80176a0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80176a2:	68fb      	ldr	r3, [r7, #12]
 80176a4:	7a9b      	ldrb	r3, [r3, #10]
 80176a6:	757b      	strb	r3, [r7, #21]
 80176a8:	e003      	b.n	80176b2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80176aa:	23ff      	movs	r3, #255	; 0xff
 80176ac:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80176ae:	2300      	movs	r3, #0
 80176b0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80176b2:	7dba      	ldrb	r2, [r7, #22]
 80176b4:	693b      	ldr	r3, [r7, #16]
 80176b6:	9302      	str	r3, [sp, #8]
 80176b8:	2306      	movs	r3, #6
 80176ba:	9301      	str	r3, [sp, #4]
 80176bc:	7d7b      	ldrb	r3, [r7, #21]
 80176be:	9300      	str	r3, [sp, #0]
 80176c0:	4613      	mov	r3, r2
 80176c2:	683a      	ldr	r2, [r7, #0]
 80176c4:	6879      	ldr	r1, [r7, #4]
 80176c6:	68b8      	ldr	r0, [r7, #8]
 80176c8:	f002 f8e6 	bl	8019898 <ip4_output_if>
 80176cc:	4603      	mov	r3, r0
 80176ce:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80176d0:	68b8      	ldr	r0, [r7, #8]
 80176d2:	f7f9 ff79 	bl	80115c8 <pbuf_free>
  return err;
 80176d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80176da:	4618      	mov	r0, r3
 80176dc:	3718      	adds	r7, #24
 80176de:	46bd      	mov	sp, r7
 80176e0:	bd80      	pop	{r7, pc}
 80176e2:	bf00      	nop
 80176e4:	0801e5f8 	.word	0x0801e5f8
 80176e8:	0801ed50 	.word	0x0801ed50
 80176ec:	0801e64c 	.word	0x0801e64c

080176f0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80176f0:	b590      	push	{r4, r7, lr}
 80176f2:	b08b      	sub	sp, #44	; 0x2c
 80176f4:	af04      	add	r7, sp, #16
 80176f6:	60f8      	str	r0, [r7, #12]
 80176f8:	60b9      	str	r1, [r7, #8]
 80176fa:	607a      	str	r2, [r7, #4]
 80176fc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80176fe:	683b      	ldr	r3, [r7, #0]
 8017700:	2b00      	cmp	r3, #0
 8017702:	d106      	bne.n	8017712 <tcp_rst+0x22>
 8017704:	4b1f      	ldr	r3, [pc, #124]	; (8017784 <tcp_rst+0x94>)
 8017706:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801770a:	491f      	ldr	r1, [pc, #124]	; (8017788 <tcp_rst+0x98>)
 801770c:	481f      	ldr	r0, [pc, #124]	; (801778c <tcp_rst+0x9c>)
 801770e:	f003 faf1 	bl	801acf4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8017712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017714:	2b00      	cmp	r3, #0
 8017716:	d106      	bne.n	8017726 <tcp_rst+0x36>
 8017718:	4b1a      	ldr	r3, [pc, #104]	; (8017784 <tcp_rst+0x94>)
 801771a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801771e:	491c      	ldr	r1, [pc, #112]	; (8017790 <tcp_rst+0xa0>)
 8017720:	481a      	ldr	r0, [pc, #104]	; (801778c <tcp_rst+0x9c>)
 8017722:	f003 fae7 	bl	801acf4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017726:	2300      	movs	r3, #0
 8017728:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801772a:	f246 0308 	movw	r3, #24584	; 0x6008
 801772e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8017730:	7dfb      	ldrb	r3, [r7, #23]
 8017732:	b29c      	uxth	r4, r3
 8017734:	68b8      	ldr	r0, [r7, #8]
 8017736:	f7f8 fb38 	bl	800fdaa <lwip_htonl>
 801773a:	4602      	mov	r2, r0
 801773c:	8abb      	ldrh	r3, [r7, #20]
 801773e:	9303      	str	r3, [sp, #12]
 8017740:	2314      	movs	r3, #20
 8017742:	9302      	str	r3, [sp, #8]
 8017744:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8017746:	9301      	str	r3, [sp, #4]
 8017748:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801774a:	9300      	str	r3, [sp, #0]
 801774c:	4613      	mov	r3, r2
 801774e:	2200      	movs	r2, #0
 8017750:	4621      	mov	r1, r4
 8017752:	6878      	ldr	r0, [r7, #4]
 8017754:	f7ff fe92 	bl	801747c <tcp_output_alloc_header_common>
 8017758:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801775a:	693b      	ldr	r3, [r7, #16]
 801775c:	2b00      	cmp	r3, #0
 801775e:	d00c      	beq.n	801777a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017760:	7dfb      	ldrb	r3, [r7, #23]
 8017762:	2200      	movs	r2, #0
 8017764:	6939      	ldr	r1, [r7, #16]
 8017766:	68f8      	ldr	r0, [r7, #12]
 8017768:	f7ff ff38 	bl	80175dc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801776c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801776e:	683a      	ldr	r2, [r7, #0]
 8017770:	6939      	ldr	r1, [r7, #16]
 8017772:	68f8      	ldr	r0, [r7, #12]
 8017774:	f7ff ff72 	bl	801765c <tcp_output_control_segment>
 8017778:	e000      	b.n	801777c <tcp_rst+0x8c>
    return;
 801777a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801777c:	371c      	adds	r7, #28
 801777e:	46bd      	mov	sp, r7
 8017780:	bd90      	pop	{r4, r7, pc}
 8017782:	bf00      	nop
 8017784:	0801e5f8 	.word	0x0801e5f8
 8017788:	0801ed7c 	.word	0x0801ed7c
 801778c:	0801e64c 	.word	0x0801e64c
 8017790:	0801ed98 	.word	0x0801ed98

08017794 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017794:	b590      	push	{r4, r7, lr}
 8017796:	b087      	sub	sp, #28
 8017798:	af00      	add	r7, sp, #0
 801779a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801779c:	2300      	movs	r3, #0
 801779e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80177a0:	2300      	movs	r3, #0
 80177a2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d106      	bne.n	80177b8 <tcp_send_empty_ack+0x24>
 80177aa:	4b28      	ldr	r3, [pc, #160]	; (801784c <tcp_send_empty_ack+0xb8>)
 80177ac:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80177b0:	4927      	ldr	r1, [pc, #156]	; (8017850 <tcp_send_empty_ack+0xbc>)
 80177b2:	4828      	ldr	r0, [pc, #160]	; (8017854 <tcp_send_empty_ack+0xc0>)
 80177b4:	f003 fa9e 	bl	801acf4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80177b8:	7dfb      	ldrb	r3, [r7, #23]
 80177ba:	009b      	lsls	r3, r3, #2
 80177bc:	b2db      	uxtb	r3, r3
 80177be:	f003 0304 	and.w	r3, r3, #4
 80177c2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80177c4:	7d7b      	ldrb	r3, [r7, #21]
 80177c6:	b29c      	uxth	r4, r3
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80177cc:	4618      	mov	r0, r3
 80177ce:	f7f8 faec 	bl	800fdaa <lwip_htonl>
 80177d2:	4603      	mov	r3, r0
 80177d4:	2200      	movs	r2, #0
 80177d6:	4621      	mov	r1, r4
 80177d8:	6878      	ldr	r0, [r7, #4]
 80177da:	f7ff fec1 	bl	8017560 <tcp_output_alloc_header>
 80177de:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80177e0:	693b      	ldr	r3, [r7, #16]
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d109      	bne.n	80177fa <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	8b5b      	ldrh	r3, [r3, #26]
 80177ea:	f043 0303 	orr.w	r3, r3, #3
 80177ee:	b29a      	uxth	r2, r3
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80177f4:	f06f 0301 	mvn.w	r3, #1
 80177f8:	e023      	b.n	8017842 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80177fa:	7dbb      	ldrb	r3, [r7, #22]
 80177fc:	7dfa      	ldrb	r2, [r7, #23]
 80177fe:	6939      	ldr	r1, [r7, #16]
 8017800:	6878      	ldr	r0, [r7, #4]
 8017802:	f7ff feeb 	bl	80175dc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017806:	687a      	ldr	r2, [r7, #4]
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	3304      	adds	r3, #4
 801780c:	6939      	ldr	r1, [r7, #16]
 801780e:	6878      	ldr	r0, [r7, #4]
 8017810:	f7ff ff24 	bl	801765c <tcp_output_control_segment>
 8017814:	4603      	mov	r3, r0
 8017816:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801781c:	2b00      	cmp	r3, #0
 801781e:	d007      	beq.n	8017830 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	8b5b      	ldrh	r3, [r3, #26]
 8017824:	f043 0303 	orr.w	r3, r3, #3
 8017828:	b29a      	uxth	r2, r3
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	835a      	strh	r2, [r3, #26]
 801782e:	e006      	b.n	801783e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	8b5b      	ldrh	r3, [r3, #26]
 8017834:	f023 0303 	bic.w	r3, r3, #3
 8017838:	b29a      	uxth	r2, r3
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801783e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017842:	4618      	mov	r0, r3
 8017844:	371c      	adds	r7, #28
 8017846:	46bd      	mov	sp, r7
 8017848:	bd90      	pop	{r4, r7, pc}
 801784a:	bf00      	nop
 801784c:	0801e5f8 	.word	0x0801e5f8
 8017850:	0801edb4 	.word	0x0801edb4
 8017854:	0801e64c 	.word	0x0801e64c

08017858 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017858:	b590      	push	{r4, r7, lr}
 801785a:	b087      	sub	sp, #28
 801785c:	af00      	add	r7, sp, #0
 801785e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017860:	2300      	movs	r3, #0
 8017862:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	2b00      	cmp	r3, #0
 8017868:	d106      	bne.n	8017878 <tcp_keepalive+0x20>
 801786a:	4b18      	ldr	r3, [pc, #96]	; (80178cc <tcp_keepalive+0x74>)
 801786c:	f640 0224 	movw	r2, #2084	; 0x824
 8017870:	4917      	ldr	r1, [pc, #92]	; (80178d0 <tcp_keepalive+0x78>)
 8017872:	4818      	ldr	r0, [pc, #96]	; (80178d4 <tcp_keepalive+0x7c>)
 8017874:	f003 fa3e 	bl	801acf4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017878:	7dfb      	ldrb	r3, [r7, #23]
 801787a:	b29c      	uxth	r4, r3
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017880:	3b01      	subs	r3, #1
 8017882:	4618      	mov	r0, r3
 8017884:	f7f8 fa91 	bl	800fdaa <lwip_htonl>
 8017888:	4603      	mov	r3, r0
 801788a:	2200      	movs	r2, #0
 801788c:	4621      	mov	r1, r4
 801788e:	6878      	ldr	r0, [r7, #4]
 8017890:	f7ff fe66 	bl	8017560 <tcp_output_alloc_header>
 8017894:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017896:	693b      	ldr	r3, [r7, #16]
 8017898:	2b00      	cmp	r3, #0
 801789a:	d102      	bne.n	80178a2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801789c:	f04f 33ff 	mov.w	r3, #4294967295
 80178a0:	e010      	b.n	80178c4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80178a2:	7dfb      	ldrb	r3, [r7, #23]
 80178a4:	2200      	movs	r2, #0
 80178a6:	6939      	ldr	r1, [r7, #16]
 80178a8:	6878      	ldr	r0, [r7, #4]
 80178aa:	f7ff fe97 	bl	80175dc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80178ae:	687a      	ldr	r2, [r7, #4]
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	3304      	adds	r3, #4
 80178b4:	6939      	ldr	r1, [r7, #16]
 80178b6:	6878      	ldr	r0, [r7, #4]
 80178b8:	f7ff fed0 	bl	801765c <tcp_output_control_segment>
 80178bc:	4603      	mov	r3, r0
 80178be:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80178c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80178c4:	4618      	mov	r0, r3
 80178c6:	371c      	adds	r7, #28
 80178c8:	46bd      	mov	sp, r7
 80178ca:	bd90      	pop	{r4, r7, pc}
 80178cc:	0801e5f8 	.word	0x0801e5f8
 80178d0:	0801edd4 	.word	0x0801edd4
 80178d4:	0801e64c 	.word	0x0801e64c

080178d8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80178d8:	b590      	push	{r4, r7, lr}
 80178da:	b08b      	sub	sp, #44	; 0x2c
 80178dc:	af00      	add	r7, sp, #0
 80178de:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80178e0:	2300      	movs	r3, #0
 80178e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d106      	bne.n	80178fa <tcp_zero_window_probe+0x22>
 80178ec:	4b4c      	ldr	r3, [pc, #304]	; (8017a20 <tcp_zero_window_probe+0x148>)
 80178ee:	f640 024f 	movw	r2, #2127	; 0x84f
 80178f2:	494c      	ldr	r1, [pc, #304]	; (8017a24 <tcp_zero_window_probe+0x14c>)
 80178f4:	484c      	ldr	r0, [pc, #304]	; (8017a28 <tcp_zero_window_probe+0x150>)
 80178f6:	f003 f9fd 	bl	801acf4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80178fe:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8017900:	6a3b      	ldr	r3, [r7, #32]
 8017902:	2b00      	cmp	r3, #0
 8017904:	d101      	bne.n	801790a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8017906:	2300      	movs	r3, #0
 8017908:	e086      	b.n	8017a18 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017910:	2bff      	cmp	r3, #255	; 0xff
 8017912:	d007      	beq.n	8017924 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801791a:	3301      	adds	r3, #1
 801791c:	b2da      	uxtb	r2, r3
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8017924:	6a3b      	ldr	r3, [r7, #32]
 8017926:	68db      	ldr	r3, [r3, #12]
 8017928:	899b      	ldrh	r3, [r3, #12]
 801792a:	b29b      	uxth	r3, r3
 801792c:	4618      	mov	r0, r3
 801792e:	f7f8 fa27 	bl	800fd80 <lwip_htons>
 8017932:	4603      	mov	r3, r0
 8017934:	b2db      	uxtb	r3, r3
 8017936:	f003 0301 	and.w	r3, r3, #1
 801793a:	2b00      	cmp	r3, #0
 801793c:	d005      	beq.n	801794a <tcp_zero_window_probe+0x72>
 801793e:	6a3b      	ldr	r3, [r7, #32]
 8017940:	891b      	ldrh	r3, [r3, #8]
 8017942:	2b00      	cmp	r3, #0
 8017944:	d101      	bne.n	801794a <tcp_zero_window_probe+0x72>
 8017946:	2301      	movs	r3, #1
 8017948:	e000      	b.n	801794c <tcp_zero_window_probe+0x74>
 801794a:	2300      	movs	r3, #0
 801794c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801794e:	7ffb      	ldrb	r3, [r7, #31]
 8017950:	2b00      	cmp	r3, #0
 8017952:	bf0c      	ite	eq
 8017954:	2301      	moveq	r3, #1
 8017956:	2300      	movne	r3, #0
 8017958:	b2db      	uxtb	r3, r3
 801795a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801795c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017960:	b299      	uxth	r1, r3
 8017962:	6a3b      	ldr	r3, [r7, #32]
 8017964:	68db      	ldr	r3, [r3, #12]
 8017966:	685b      	ldr	r3, [r3, #4]
 8017968:	8bba      	ldrh	r2, [r7, #28]
 801796a:	6878      	ldr	r0, [r7, #4]
 801796c:	f7ff fdf8 	bl	8017560 <tcp_output_alloc_header>
 8017970:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8017972:	69bb      	ldr	r3, [r7, #24]
 8017974:	2b00      	cmp	r3, #0
 8017976:	d102      	bne.n	801797e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8017978:	f04f 33ff 	mov.w	r3, #4294967295
 801797c:	e04c      	b.n	8017a18 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801797e:	69bb      	ldr	r3, [r7, #24]
 8017980:	685b      	ldr	r3, [r3, #4]
 8017982:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017984:	7ffb      	ldrb	r3, [r7, #31]
 8017986:	2b00      	cmp	r3, #0
 8017988:	d011      	beq.n	80179ae <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801798a:	697b      	ldr	r3, [r7, #20]
 801798c:	899b      	ldrh	r3, [r3, #12]
 801798e:	b29b      	uxth	r3, r3
 8017990:	b21b      	sxth	r3, r3
 8017992:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8017996:	b21c      	sxth	r4, r3
 8017998:	2011      	movs	r0, #17
 801799a:	f7f8 f9f1 	bl	800fd80 <lwip_htons>
 801799e:	4603      	mov	r3, r0
 80179a0:	b21b      	sxth	r3, r3
 80179a2:	4323      	orrs	r3, r4
 80179a4:	b21b      	sxth	r3, r3
 80179a6:	b29a      	uxth	r2, r3
 80179a8:	697b      	ldr	r3, [r7, #20]
 80179aa:	819a      	strh	r2, [r3, #12]
 80179ac:	e010      	b.n	80179d0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80179ae:	69bb      	ldr	r3, [r7, #24]
 80179b0:	685b      	ldr	r3, [r3, #4]
 80179b2:	3314      	adds	r3, #20
 80179b4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80179b6:	6a3b      	ldr	r3, [r7, #32]
 80179b8:	6858      	ldr	r0, [r3, #4]
 80179ba:	6a3b      	ldr	r3, [r7, #32]
 80179bc:	685b      	ldr	r3, [r3, #4]
 80179be:	891a      	ldrh	r2, [r3, #8]
 80179c0:	6a3b      	ldr	r3, [r7, #32]
 80179c2:	891b      	ldrh	r3, [r3, #8]
 80179c4:	1ad3      	subs	r3, r2, r3
 80179c6:	b29b      	uxth	r3, r3
 80179c8:	2201      	movs	r2, #1
 80179ca:	6939      	ldr	r1, [r7, #16]
 80179cc:	f7f9 fff2 	bl	80119b4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80179d0:	6a3b      	ldr	r3, [r7, #32]
 80179d2:	68db      	ldr	r3, [r3, #12]
 80179d4:	685b      	ldr	r3, [r3, #4]
 80179d6:	4618      	mov	r0, r3
 80179d8:	f7f8 f9e7 	bl	800fdaa <lwip_htonl>
 80179dc:	4603      	mov	r3, r0
 80179de:	3301      	adds	r3, #1
 80179e0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	1ad3      	subs	r3, r2, r3
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	da02      	bge.n	80179f4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	68fa      	ldr	r2, [r7, #12]
 80179f2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80179f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80179f8:	2200      	movs	r2, #0
 80179fa:	69b9      	ldr	r1, [r7, #24]
 80179fc:	6878      	ldr	r0, [r7, #4]
 80179fe:	f7ff fded 	bl	80175dc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017a02:	687a      	ldr	r2, [r7, #4]
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	3304      	adds	r3, #4
 8017a08:	69b9      	ldr	r1, [r7, #24]
 8017a0a:	6878      	ldr	r0, [r7, #4]
 8017a0c:	f7ff fe26 	bl	801765c <tcp_output_control_segment>
 8017a10:	4603      	mov	r3, r0
 8017a12:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017a14:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017a18:	4618      	mov	r0, r3
 8017a1a:	372c      	adds	r7, #44	; 0x2c
 8017a1c:	46bd      	mov	sp, r7
 8017a1e:	bd90      	pop	{r4, r7, pc}
 8017a20:	0801e5f8 	.word	0x0801e5f8
 8017a24:	0801edf0 	.word	0x0801edf0
 8017a28:	0801e64c 	.word	0x0801e64c

08017a2c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017a2c:	b580      	push	{r7, lr}
 8017a2e:	b082      	sub	sp, #8
 8017a30:	af00      	add	r7, sp, #0
 8017a32:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017a34:	f7fa f8ac 	bl	8011b90 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017a38:	4b0a      	ldr	r3, [pc, #40]	; (8017a64 <tcpip_tcp_timer+0x38>)
 8017a3a:	681b      	ldr	r3, [r3, #0]
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d103      	bne.n	8017a48 <tcpip_tcp_timer+0x1c>
 8017a40:	4b09      	ldr	r3, [pc, #36]	; (8017a68 <tcpip_tcp_timer+0x3c>)
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d005      	beq.n	8017a54 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017a48:	2200      	movs	r2, #0
 8017a4a:	4908      	ldr	r1, [pc, #32]	; (8017a6c <tcpip_tcp_timer+0x40>)
 8017a4c:	20fa      	movs	r0, #250	; 0xfa
 8017a4e:	f000 f8f3 	bl	8017c38 <sys_timeout>
 8017a52:	e003      	b.n	8017a5c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017a54:	4b06      	ldr	r3, [pc, #24]	; (8017a70 <tcpip_tcp_timer+0x44>)
 8017a56:	2200      	movs	r2, #0
 8017a58:	601a      	str	r2, [r3, #0]
  }
}
 8017a5a:	bf00      	nop
 8017a5c:	bf00      	nop
 8017a5e:	3708      	adds	r7, #8
 8017a60:	46bd      	mov	sp, r7
 8017a62:	bd80      	pop	{r7, pc}
 8017a64:	20011094 	.word	0x20011094
 8017a68:	20011098 	.word	0x20011098
 8017a6c:	08017a2d 	.word	0x08017a2d
 8017a70:	200110e0 	.word	0x200110e0

08017a74 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017a74:	b580      	push	{r7, lr}
 8017a76:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017a78:	4b0a      	ldr	r3, [pc, #40]	; (8017aa4 <tcp_timer_needed+0x30>)
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d10f      	bne.n	8017aa0 <tcp_timer_needed+0x2c>
 8017a80:	4b09      	ldr	r3, [pc, #36]	; (8017aa8 <tcp_timer_needed+0x34>)
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d103      	bne.n	8017a90 <tcp_timer_needed+0x1c>
 8017a88:	4b08      	ldr	r3, [pc, #32]	; (8017aac <tcp_timer_needed+0x38>)
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d007      	beq.n	8017aa0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017a90:	4b04      	ldr	r3, [pc, #16]	; (8017aa4 <tcp_timer_needed+0x30>)
 8017a92:	2201      	movs	r2, #1
 8017a94:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017a96:	2200      	movs	r2, #0
 8017a98:	4905      	ldr	r1, [pc, #20]	; (8017ab0 <tcp_timer_needed+0x3c>)
 8017a9a:	20fa      	movs	r0, #250	; 0xfa
 8017a9c:	f000 f8cc 	bl	8017c38 <sys_timeout>
  }
}
 8017aa0:	bf00      	nop
 8017aa2:	bd80      	pop	{r7, pc}
 8017aa4:	200110e0 	.word	0x200110e0
 8017aa8:	20011094 	.word	0x20011094
 8017aac:	20011098 	.word	0x20011098
 8017ab0:	08017a2d 	.word	0x08017a2d

08017ab4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017ab4:	b580      	push	{r7, lr}
 8017ab6:	b086      	sub	sp, #24
 8017ab8:	af00      	add	r7, sp, #0
 8017aba:	60f8      	str	r0, [r7, #12]
 8017abc:	60b9      	str	r1, [r7, #8]
 8017abe:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017ac0:	200a      	movs	r0, #10
 8017ac2:	f7f8 fe35 	bl	8010730 <memp_malloc>
 8017ac6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017ac8:	693b      	ldr	r3, [r7, #16]
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d109      	bne.n	8017ae2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017ace:	693b      	ldr	r3, [r7, #16]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d151      	bne.n	8017b78 <sys_timeout_abs+0xc4>
 8017ad4:	4b2a      	ldr	r3, [pc, #168]	; (8017b80 <sys_timeout_abs+0xcc>)
 8017ad6:	22be      	movs	r2, #190	; 0xbe
 8017ad8:	492a      	ldr	r1, [pc, #168]	; (8017b84 <sys_timeout_abs+0xd0>)
 8017ada:	482b      	ldr	r0, [pc, #172]	; (8017b88 <sys_timeout_abs+0xd4>)
 8017adc:	f003 f90a 	bl	801acf4 <iprintf>
    return;
 8017ae0:	e04a      	b.n	8017b78 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017ae2:	693b      	ldr	r3, [r7, #16]
 8017ae4:	2200      	movs	r2, #0
 8017ae6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017ae8:	693b      	ldr	r3, [r7, #16]
 8017aea:	68ba      	ldr	r2, [r7, #8]
 8017aec:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017aee:	693b      	ldr	r3, [r7, #16]
 8017af0:	687a      	ldr	r2, [r7, #4]
 8017af2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017af4:	693b      	ldr	r3, [r7, #16]
 8017af6:	68fa      	ldr	r2, [r7, #12]
 8017af8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017afa:	4b24      	ldr	r3, [pc, #144]	; (8017b8c <sys_timeout_abs+0xd8>)
 8017afc:	681b      	ldr	r3, [r3, #0]
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d103      	bne.n	8017b0a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017b02:	4a22      	ldr	r2, [pc, #136]	; (8017b8c <sys_timeout_abs+0xd8>)
 8017b04:	693b      	ldr	r3, [r7, #16]
 8017b06:	6013      	str	r3, [r2, #0]
    return;
 8017b08:	e037      	b.n	8017b7a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017b0a:	693b      	ldr	r3, [r7, #16]
 8017b0c:	685a      	ldr	r2, [r3, #4]
 8017b0e:	4b1f      	ldr	r3, [pc, #124]	; (8017b8c <sys_timeout_abs+0xd8>)
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	685b      	ldr	r3, [r3, #4]
 8017b14:	1ad3      	subs	r3, r2, r3
 8017b16:	0fdb      	lsrs	r3, r3, #31
 8017b18:	f003 0301 	and.w	r3, r3, #1
 8017b1c:	b2db      	uxtb	r3, r3
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d007      	beq.n	8017b32 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017b22:	4b1a      	ldr	r3, [pc, #104]	; (8017b8c <sys_timeout_abs+0xd8>)
 8017b24:	681a      	ldr	r2, [r3, #0]
 8017b26:	693b      	ldr	r3, [r7, #16]
 8017b28:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017b2a:	4a18      	ldr	r2, [pc, #96]	; (8017b8c <sys_timeout_abs+0xd8>)
 8017b2c:	693b      	ldr	r3, [r7, #16]
 8017b2e:	6013      	str	r3, [r2, #0]
 8017b30:	e023      	b.n	8017b7a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017b32:	4b16      	ldr	r3, [pc, #88]	; (8017b8c <sys_timeout_abs+0xd8>)
 8017b34:	681b      	ldr	r3, [r3, #0]
 8017b36:	617b      	str	r3, [r7, #20]
 8017b38:	e01a      	b.n	8017b70 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017b3a:	697b      	ldr	r3, [r7, #20]
 8017b3c:	681b      	ldr	r3, [r3, #0]
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d00b      	beq.n	8017b5a <sys_timeout_abs+0xa6>
 8017b42:	693b      	ldr	r3, [r7, #16]
 8017b44:	685a      	ldr	r2, [r3, #4]
 8017b46:	697b      	ldr	r3, [r7, #20]
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	685b      	ldr	r3, [r3, #4]
 8017b4c:	1ad3      	subs	r3, r2, r3
 8017b4e:	0fdb      	lsrs	r3, r3, #31
 8017b50:	f003 0301 	and.w	r3, r3, #1
 8017b54:	b2db      	uxtb	r3, r3
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d007      	beq.n	8017b6a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017b5a:	697b      	ldr	r3, [r7, #20]
 8017b5c:	681a      	ldr	r2, [r3, #0]
 8017b5e:	693b      	ldr	r3, [r7, #16]
 8017b60:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017b62:	697b      	ldr	r3, [r7, #20]
 8017b64:	693a      	ldr	r2, [r7, #16]
 8017b66:	601a      	str	r2, [r3, #0]
        break;
 8017b68:	e007      	b.n	8017b7a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017b6a:	697b      	ldr	r3, [r7, #20]
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	617b      	str	r3, [r7, #20]
 8017b70:	697b      	ldr	r3, [r7, #20]
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	d1e1      	bne.n	8017b3a <sys_timeout_abs+0x86>
 8017b76:	e000      	b.n	8017b7a <sys_timeout_abs+0xc6>
    return;
 8017b78:	bf00      	nop
      }
    }
  }
}
 8017b7a:	3718      	adds	r7, #24
 8017b7c:	46bd      	mov	sp, r7
 8017b7e:	bd80      	pop	{r7, pc}
 8017b80:	0801ee14 	.word	0x0801ee14
 8017b84:	0801ee48 	.word	0x0801ee48
 8017b88:	0801ee88 	.word	0x0801ee88
 8017b8c:	200110d8 	.word	0x200110d8

08017b90 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017b90:	b580      	push	{r7, lr}
 8017b92:	b086      	sub	sp, #24
 8017b94:	af00      	add	r7, sp, #0
 8017b96:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017b9c:	697b      	ldr	r3, [r7, #20]
 8017b9e:	685b      	ldr	r3, [r3, #4]
 8017ba0:	4798      	blx	r3

  now = sys_now();
 8017ba2:	f7f0 fb87 	bl	80082b4 <sys_now>
 8017ba6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017ba8:	697b      	ldr	r3, [r7, #20]
 8017baa:	681a      	ldr	r2, [r3, #0]
 8017bac:	4b0f      	ldr	r3, [pc, #60]	; (8017bec <lwip_cyclic_timer+0x5c>)
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	4413      	add	r3, r2
 8017bb2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017bb4:	68fa      	ldr	r2, [r7, #12]
 8017bb6:	693b      	ldr	r3, [r7, #16]
 8017bb8:	1ad3      	subs	r3, r2, r3
 8017bba:	0fdb      	lsrs	r3, r3, #31
 8017bbc:	f003 0301 	and.w	r3, r3, #1
 8017bc0:	b2db      	uxtb	r3, r3
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d009      	beq.n	8017bda <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8017bc6:	697b      	ldr	r3, [r7, #20]
 8017bc8:	681a      	ldr	r2, [r3, #0]
 8017bca:	693b      	ldr	r3, [r7, #16]
 8017bcc:	4413      	add	r3, r2
 8017bce:	687a      	ldr	r2, [r7, #4]
 8017bd0:	4907      	ldr	r1, [pc, #28]	; (8017bf0 <lwip_cyclic_timer+0x60>)
 8017bd2:	4618      	mov	r0, r3
 8017bd4:	f7ff ff6e 	bl	8017ab4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017bd8:	e004      	b.n	8017be4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017bda:	687a      	ldr	r2, [r7, #4]
 8017bdc:	4904      	ldr	r1, [pc, #16]	; (8017bf0 <lwip_cyclic_timer+0x60>)
 8017bde:	68f8      	ldr	r0, [r7, #12]
 8017be0:	f7ff ff68 	bl	8017ab4 <sys_timeout_abs>
}
 8017be4:	bf00      	nop
 8017be6:	3718      	adds	r7, #24
 8017be8:	46bd      	mov	sp, r7
 8017bea:	bd80      	pop	{r7, pc}
 8017bec:	200110dc 	.word	0x200110dc
 8017bf0:	08017b91 	.word	0x08017b91

08017bf4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017bf4:	b580      	push	{r7, lr}
 8017bf6:	b082      	sub	sp, #8
 8017bf8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017bfa:	2301      	movs	r3, #1
 8017bfc:	607b      	str	r3, [r7, #4]
 8017bfe:	e00e      	b.n	8017c1e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017c00:	4a0b      	ldr	r2, [pc, #44]	; (8017c30 <sys_timeouts_init+0x3c>)
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	00db      	lsls	r3, r3, #3
 8017c0c:	4a08      	ldr	r2, [pc, #32]	; (8017c30 <sys_timeouts_init+0x3c>)
 8017c0e:	4413      	add	r3, r2
 8017c10:	461a      	mov	r2, r3
 8017c12:	4908      	ldr	r1, [pc, #32]	; (8017c34 <sys_timeouts_init+0x40>)
 8017c14:	f000 f810 	bl	8017c38 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	3301      	adds	r3, #1
 8017c1c:	607b      	str	r3, [r7, #4]
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	2b02      	cmp	r3, #2
 8017c22:	d9ed      	bls.n	8017c00 <sys_timeouts_init+0xc>
  }
}
 8017c24:	bf00      	nop
 8017c26:	bf00      	nop
 8017c28:	3708      	adds	r7, #8
 8017c2a:	46bd      	mov	sp, r7
 8017c2c:	bd80      	pop	{r7, pc}
 8017c2e:	bf00      	nop
 8017c30:	0801fafc 	.word	0x0801fafc
 8017c34:	08017b91 	.word	0x08017b91

08017c38 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017c38:	b580      	push	{r7, lr}
 8017c3a:	b086      	sub	sp, #24
 8017c3c:	af00      	add	r7, sp, #0
 8017c3e:	60f8      	str	r0, [r7, #12]
 8017c40:	60b9      	str	r1, [r7, #8]
 8017c42:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017c44:	68fb      	ldr	r3, [r7, #12]
 8017c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017c4a:	d306      	bcc.n	8017c5a <sys_timeout+0x22>
 8017c4c:	4b0a      	ldr	r3, [pc, #40]	; (8017c78 <sys_timeout+0x40>)
 8017c4e:	f240 1229 	movw	r2, #297	; 0x129
 8017c52:	490a      	ldr	r1, [pc, #40]	; (8017c7c <sys_timeout+0x44>)
 8017c54:	480a      	ldr	r0, [pc, #40]	; (8017c80 <sys_timeout+0x48>)
 8017c56:	f003 f84d 	bl	801acf4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017c5a:	f7f0 fb2b 	bl	80082b4 <sys_now>
 8017c5e:	4602      	mov	r2, r0
 8017c60:	68fb      	ldr	r3, [r7, #12]
 8017c62:	4413      	add	r3, r2
 8017c64:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017c66:	687a      	ldr	r2, [r7, #4]
 8017c68:	68b9      	ldr	r1, [r7, #8]
 8017c6a:	6978      	ldr	r0, [r7, #20]
 8017c6c:	f7ff ff22 	bl	8017ab4 <sys_timeout_abs>
#endif
}
 8017c70:	bf00      	nop
 8017c72:	3718      	adds	r7, #24
 8017c74:	46bd      	mov	sp, r7
 8017c76:	bd80      	pop	{r7, pc}
 8017c78:	0801ee14 	.word	0x0801ee14
 8017c7c:	0801eeb0 	.word	0x0801eeb0
 8017c80:	0801ee88 	.word	0x0801ee88

08017c84 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017c84:	b580      	push	{r7, lr}
 8017c86:	b084      	sub	sp, #16
 8017c88:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017c8a:	f7f0 fb13 	bl	80082b4 <sys_now>
 8017c8e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8017c90:	4b17      	ldr	r3, [pc, #92]	; (8017cf0 <sys_check_timeouts+0x6c>)
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017c96:	68bb      	ldr	r3, [r7, #8]
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d022      	beq.n	8017ce2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017c9c:	68bb      	ldr	r3, [r7, #8]
 8017c9e:	685b      	ldr	r3, [r3, #4]
 8017ca0:	68fa      	ldr	r2, [r7, #12]
 8017ca2:	1ad3      	subs	r3, r2, r3
 8017ca4:	0fdb      	lsrs	r3, r3, #31
 8017ca6:	f003 0301 	and.w	r3, r3, #1
 8017caa:	b2db      	uxtb	r3, r3
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	d11a      	bne.n	8017ce6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017cb0:	68bb      	ldr	r3, [r7, #8]
 8017cb2:	681b      	ldr	r3, [r3, #0]
 8017cb4:	4a0e      	ldr	r2, [pc, #56]	; (8017cf0 <sys_check_timeouts+0x6c>)
 8017cb6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017cb8:	68bb      	ldr	r3, [r7, #8]
 8017cba:	689b      	ldr	r3, [r3, #8]
 8017cbc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017cbe:	68bb      	ldr	r3, [r7, #8]
 8017cc0:	68db      	ldr	r3, [r3, #12]
 8017cc2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017cc4:	68bb      	ldr	r3, [r7, #8]
 8017cc6:	685b      	ldr	r3, [r3, #4]
 8017cc8:	4a0a      	ldr	r2, [pc, #40]	; (8017cf4 <sys_check_timeouts+0x70>)
 8017cca:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017ccc:	68b9      	ldr	r1, [r7, #8]
 8017cce:	200a      	movs	r0, #10
 8017cd0:	f7f8 fda4 	bl	801081c <memp_free>
    if (handler != NULL) {
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d0da      	beq.n	8017c90 <sys_check_timeouts+0xc>
      handler(arg);
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	6838      	ldr	r0, [r7, #0]
 8017cde:	4798      	blx	r3
  do {
 8017ce0:	e7d6      	b.n	8017c90 <sys_check_timeouts+0xc>
      return;
 8017ce2:	bf00      	nop
 8017ce4:	e000      	b.n	8017ce8 <sys_check_timeouts+0x64>
      return;
 8017ce6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8017ce8:	3710      	adds	r7, #16
 8017cea:	46bd      	mov	sp, r7
 8017cec:	bd80      	pop	{r7, pc}
 8017cee:	bf00      	nop
 8017cf0:	200110d8 	.word	0x200110d8
 8017cf4:	200110dc 	.word	0x200110dc

08017cf8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8017cf8:	b580      	push	{r7, lr}
 8017cfa:	b082      	sub	sp, #8
 8017cfc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8017cfe:	4b16      	ldr	r3, [pc, #88]	; (8017d58 <sys_timeouts_sleeptime+0x60>)
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d102      	bne.n	8017d0c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8017d06:	f04f 33ff 	mov.w	r3, #4294967295
 8017d0a:	e020      	b.n	8017d4e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8017d0c:	f7f0 fad2 	bl	80082b4 <sys_now>
 8017d10:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8017d12:	4b11      	ldr	r3, [pc, #68]	; (8017d58 <sys_timeouts_sleeptime+0x60>)
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	685a      	ldr	r2, [r3, #4]
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	1ad3      	subs	r3, r2, r3
 8017d1c:	0fdb      	lsrs	r3, r3, #31
 8017d1e:	f003 0301 	and.w	r3, r3, #1
 8017d22:	b2db      	uxtb	r3, r3
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d001      	beq.n	8017d2c <sys_timeouts_sleeptime+0x34>
    return 0;
 8017d28:	2300      	movs	r3, #0
 8017d2a:	e010      	b.n	8017d4e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8017d2c:	4b0a      	ldr	r3, [pc, #40]	; (8017d58 <sys_timeouts_sleeptime+0x60>)
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	685a      	ldr	r2, [r3, #4]
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	1ad3      	subs	r3, r2, r3
 8017d36:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8017d38:	683b      	ldr	r3, [r7, #0]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	da06      	bge.n	8017d4c <sys_timeouts_sleeptime+0x54>
 8017d3e:	4b07      	ldr	r3, [pc, #28]	; (8017d5c <sys_timeouts_sleeptime+0x64>)
 8017d40:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8017d44:	4906      	ldr	r1, [pc, #24]	; (8017d60 <sys_timeouts_sleeptime+0x68>)
 8017d46:	4807      	ldr	r0, [pc, #28]	; (8017d64 <sys_timeouts_sleeptime+0x6c>)
 8017d48:	f002 ffd4 	bl	801acf4 <iprintf>
    return ret;
 8017d4c:	683b      	ldr	r3, [r7, #0]
  }
}
 8017d4e:	4618      	mov	r0, r3
 8017d50:	3708      	adds	r7, #8
 8017d52:	46bd      	mov	sp, r7
 8017d54:	bd80      	pop	{r7, pc}
 8017d56:	bf00      	nop
 8017d58:	200110d8 	.word	0x200110d8
 8017d5c:	0801ee14 	.word	0x0801ee14
 8017d60:	0801eee8 	.word	0x0801eee8
 8017d64:	0801ee88 	.word	0x0801ee88

08017d68 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017d68:	b580      	push	{r7, lr}
 8017d6a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017d6c:	f003 f866 	bl	801ae3c <rand>
 8017d70:	4603      	mov	r3, r0
 8017d72:	b29b      	uxth	r3, r3
 8017d74:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017d78:	b29b      	uxth	r3, r3
 8017d7a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8017d7e:	b29a      	uxth	r2, r3
 8017d80:	4b01      	ldr	r3, [pc, #4]	; (8017d88 <udp_init+0x20>)
 8017d82:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017d84:	bf00      	nop
 8017d86:	bd80      	pop	{r7, pc}
 8017d88:	2000002c 	.word	0x2000002c

08017d8c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8017d8c:	b480      	push	{r7}
 8017d8e:	b083      	sub	sp, #12
 8017d90:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8017d92:	2300      	movs	r3, #0
 8017d94:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8017d96:	4b17      	ldr	r3, [pc, #92]	; (8017df4 <udp_new_port+0x68>)
 8017d98:	881b      	ldrh	r3, [r3, #0]
 8017d9a:	1c5a      	adds	r2, r3, #1
 8017d9c:	b291      	uxth	r1, r2
 8017d9e:	4a15      	ldr	r2, [pc, #84]	; (8017df4 <udp_new_port+0x68>)
 8017da0:	8011      	strh	r1, [r2, #0]
 8017da2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017da6:	4293      	cmp	r3, r2
 8017da8:	d103      	bne.n	8017db2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8017daa:	4b12      	ldr	r3, [pc, #72]	; (8017df4 <udp_new_port+0x68>)
 8017dac:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8017db0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017db2:	4b11      	ldr	r3, [pc, #68]	; (8017df8 <udp_new_port+0x6c>)
 8017db4:	681b      	ldr	r3, [r3, #0]
 8017db6:	603b      	str	r3, [r7, #0]
 8017db8:	e011      	b.n	8017dde <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8017dba:	683b      	ldr	r3, [r7, #0]
 8017dbc:	8a5a      	ldrh	r2, [r3, #18]
 8017dbe:	4b0d      	ldr	r3, [pc, #52]	; (8017df4 <udp_new_port+0x68>)
 8017dc0:	881b      	ldrh	r3, [r3, #0]
 8017dc2:	429a      	cmp	r2, r3
 8017dc4:	d108      	bne.n	8017dd8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8017dc6:	88fb      	ldrh	r3, [r7, #6]
 8017dc8:	3301      	adds	r3, #1
 8017dca:	80fb      	strh	r3, [r7, #6]
 8017dcc:	88fb      	ldrh	r3, [r7, #6]
 8017dce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017dd2:	d3e0      	bcc.n	8017d96 <udp_new_port+0xa>
        return 0;
 8017dd4:	2300      	movs	r3, #0
 8017dd6:	e007      	b.n	8017de8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017dd8:	683b      	ldr	r3, [r7, #0]
 8017dda:	68db      	ldr	r3, [r3, #12]
 8017ddc:	603b      	str	r3, [r7, #0]
 8017dde:	683b      	ldr	r3, [r7, #0]
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	d1ea      	bne.n	8017dba <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8017de4:	4b03      	ldr	r3, [pc, #12]	; (8017df4 <udp_new_port+0x68>)
 8017de6:	881b      	ldrh	r3, [r3, #0]
}
 8017de8:	4618      	mov	r0, r3
 8017dea:	370c      	adds	r7, #12
 8017dec:	46bd      	mov	sp, r7
 8017dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017df2:	4770      	bx	lr
 8017df4:	2000002c 	.word	0x2000002c
 8017df8:	200110e4 	.word	0x200110e4

08017dfc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017dfc:	b580      	push	{r7, lr}
 8017dfe:	b084      	sub	sp, #16
 8017e00:	af00      	add	r7, sp, #0
 8017e02:	60f8      	str	r0, [r7, #12]
 8017e04:	60b9      	str	r1, [r7, #8]
 8017e06:	4613      	mov	r3, r2
 8017e08:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017e0a:	68fb      	ldr	r3, [r7, #12]
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d105      	bne.n	8017e1c <udp_input_local_match+0x20>
 8017e10:	4b27      	ldr	r3, [pc, #156]	; (8017eb0 <udp_input_local_match+0xb4>)
 8017e12:	2287      	movs	r2, #135	; 0x87
 8017e14:	4927      	ldr	r1, [pc, #156]	; (8017eb4 <udp_input_local_match+0xb8>)
 8017e16:	4828      	ldr	r0, [pc, #160]	; (8017eb8 <udp_input_local_match+0xbc>)
 8017e18:	f002 ff6c 	bl	801acf4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017e1c:	68bb      	ldr	r3, [r7, #8]
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d105      	bne.n	8017e2e <udp_input_local_match+0x32>
 8017e22:	4b23      	ldr	r3, [pc, #140]	; (8017eb0 <udp_input_local_match+0xb4>)
 8017e24:	2288      	movs	r2, #136	; 0x88
 8017e26:	4925      	ldr	r1, [pc, #148]	; (8017ebc <udp_input_local_match+0xc0>)
 8017e28:	4823      	ldr	r0, [pc, #140]	; (8017eb8 <udp_input_local_match+0xbc>)
 8017e2a:	f002 ff63 	bl	801acf4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	7a1b      	ldrb	r3, [r3, #8]
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d00b      	beq.n	8017e4e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	7a1a      	ldrb	r2, [r3, #8]
 8017e3a:	4b21      	ldr	r3, [pc, #132]	; (8017ec0 <udp_input_local_match+0xc4>)
 8017e3c:	685b      	ldr	r3, [r3, #4]
 8017e3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017e42:	3301      	adds	r3, #1
 8017e44:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017e46:	429a      	cmp	r2, r3
 8017e48:	d001      	beq.n	8017e4e <udp_input_local_match+0x52>
    return 0;
 8017e4a:	2300      	movs	r3, #0
 8017e4c:	e02b      	b.n	8017ea6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017e4e:	79fb      	ldrb	r3, [r7, #7]
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d018      	beq.n	8017e86 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017e54:	68fb      	ldr	r3, [r7, #12]
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d013      	beq.n	8017e82 <udp_input_local_match+0x86>
 8017e5a:	68fb      	ldr	r3, [r7, #12]
 8017e5c:	681b      	ldr	r3, [r3, #0]
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d00f      	beq.n	8017e82 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017e62:	4b17      	ldr	r3, [pc, #92]	; (8017ec0 <udp_input_local_match+0xc4>)
 8017e64:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e6a:	d00a      	beq.n	8017e82 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017e6c:	68fb      	ldr	r3, [r7, #12]
 8017e6e:	681a      	ldr	r2, [r3, #0]
 8017e70:	4b13      	ldr	r3, [pc, #76]	; (8017ec0 <udp_input_local_match+0xc4>)
 8017e72:	695b      	ldr	r3, [r3, #20]
 8017e74:	405a      	eors	r2, r3
 8017e76:	68bb      	ldr	r3, [r7, #8]
 8017e78:	3308      	adds	r3, #8
 8017e7a:	681b      	ldr	r3, [r3, #0]
 8017e7c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d110      	bne.n	8017ea4 <udp_input_local_match+0xa8>
          return 1;
 8017e82:	2301      	movs	r3, #1
 8017e84:	e00f      	b.n	8017ea6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d009      	beq.n	8017ea0 <udp_input_local_match+0xa4>
 8017e8c:	68fb      	ldr	r3, [r7, #12]
 8017e8e:	681b      	ldr	r3, [r3, #0]
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d005      	beq.n	8017ea0 <udp_input_local_match+0xa4>
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	681a      	ldr	r2, [r3, #0]
 8017e98:	4b09      	ldr	r3, [pc, #36]	; (8017ec0 <udp_input_local_match+0xc4>)
 8017e9a:	695b      	ldr	r3, [r3, #20]
 8017e9c:	429a      	cmp	r2, r3
 8017e9e:	d101      	bne.n	8017ea4 <udp_input_local_match+0xa8>
        return 1;
 8017ea0:	2301      	movs	r3, #1
 8017ea2:	e000      	b.n	8017ea6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017ea4:	2300      	movs	r3, #0
}
 8017ea6:	4618      	mov	r0, r3
 8017ea8:	3710      	adds	r7, #16
 8017eaa:	46bd      	mov	sp, r7
 8017eac:	bd80      	pop	{r7, pc}
 8017eae:	bf00      	nop
 8017eb0:	0801eefc 	.word	0x0801eefc
 8017eb4:	0801ef2c 	.word	0x0801ef2c
 8017eb8:	0801ef50 	.word	0x0801ef50
 8017ebc:	0801ef78 	.word	0x0801ef78
 8017ec0:	2000d934 	.word	0x2000d934

08017ec4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017ec4:	b590      	push	{r4, r7, lr}
 8017ec6:	b08d      	sub	sp, #52	; 0x34
 8017ec8:	af02      	add	r7, sp, #8
 8017eca:	6078      	str	r0, [r7, #4]
 8017ecc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017ece:	2300      	movs	r3, #0
 8017ed0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d105      	bne.n	8017ee4 <udp_input+0x20>
 8017ed8:	4b7c      	ldr	r3, [pc, #496]	; (80180cc <udp_input+0x208>)
 8017eda:	22cf      	movs	r2, #207	; 0xcf
 8017edc:	497c      	ldr	r1, [pc, #496]	; (80180d0 <udp_input+0x20c>)
 8017ede:	487d      	ldr	r0, [pc, #500]	; (80180d4 <udp_input+0x210>)
 8017ee0:	f002 ff08 	bl	801acf4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017ee4:	683b      	ldr	r3, [r7, #0]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d105      	bne.n	8017ef6 <udp_input+0x32>
 8017eea:	4b78      	ldr	r3, [pc, #480]	; (80180cc <udp_input+0x208>)
 8017eec:	22d0      	movs	r2, #208	; 0xd0
 8017eee:	497a      	ldr	r1, [pc, #488]	; (80180d8 <udp_input+0x214>)
 8017ef0:	4878      	ldr	r0, [pc, #480]	; (80180d4 <udp_input+0x210>)
 8017ef2:	f002 feff 	bl	801acf4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	895b      	ldrh	r3, [r3, #10]
 8017efa:	2b07      	cmp	r3, #7
 8017efc:	d803      	bhi.n	8017f06 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017efe:	6878      	ldr	r0, [r7, #4]
 8017f00:	f7f9 fb62 	bl	80115c8 <pbuf_free>
    goto end;
 8017f04:	e0de      	b.n	80180c4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	685b      	ldr	r3, [r3, #4]
 8017f0a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017f0c:	4b73      	ldr	r3, [pc, #460]	; (80180dc <udp_input+0x218>)
 8017f0e:	695b      	ldr	r3, [r3, #20]
 8017f10:	4a72      	ldr	r2, [pc, #456]	; (80180dc <udp_input+0x218>)
 8017f12:	6812      	ldr	r2, [r2, #0]
 8017f14:	4611      	mov	r1, r2
 8017f16:	4618      	mov	r0, r3
 8017f18:	f001 fd96 	bl	8019a48 <ip4_addr_isbroadcast_u32>
 8017f1c:	4603      	mov	r3, r0
 8017f1e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017f20:	697b      	ldr	r3, [r7, #20]
 8017f22:	881b      	ldrh	r3, [r3, #0]
 8017f24:	b29b      	uxth	r3, r3
 8017f26:	4618      	mov	r0, r3
 8017f28:	f7f7 ff2a 	bl	800fd80 <lwip_htons>
 8017f2c:	4603      	mov	r3, r0
 8017f2e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017f30:	697b      	ldr	r3, [r7, #20]
 8017f32:	885b      	ldrh	r3, [r3, #2]
 8017f34:	b29b      	uxth	r3, r3
 8017f36:	4618      	mov	r0, r3
 8017f38:	f7f7 ff22 	bl	800fd80 <lwip_htons>
 8017f3c:	4603      	mov	r3, r0
 8017f3e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017f40:	2300      	movs	r3, #0
 8017f42:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8017f44:	2300      	movs	r3, #0
 8017f46:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017f48:	2300      	movs	r3, #0
 8017f4a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017f4c:	4b64      	ldr	r3, [pc, #400]	; (80180e0 <udp_input+0x21c>)
 8017f4e:	681b      	ldr	r3, [r3, #0]
 8017f50:	627b      	str	r3, [r7, #36]	; 0x24
 8017f52:	e054      	b.n	8017ffe <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f56:	8a5b      	ldrh	r3, [r3, #18]
 8017f58:	89fa      	ldrh	r2, [r7, #14]
 8017f5a:	429a      	cmp	r2, r3
 8017f5c:	d14a      	bne.n	8017ff4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017f5e:	7cfb      	ldrb	r3, [r7, #19]
 8017f60:	461a      	mov	r2, r3
 8017f62:	6839      	ldr	r1, [r7, #0]
 8017f64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017f66:	f7ff ff49 	bl	8017dfc <udp_input_local_match>
 8017f6a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	d041      	beq.n	8017ff4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f72:	7c1b      	ldrb	r3, [r3, #16]
 8017f74:	f003 0304 	and.w	r3, r3, #4
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d11d      	bne.n	8017fb8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017f7c:	69fb      	ldr	r3, [r7, #28]
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d102      	bne.n	8017f88 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f84:	61fb      	str	r3, [r7, #28]
 8017f86:	e017      	b.n	8017fb8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017f88:	7cfb      	ldrb	r3, [r7, #19]
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d014      	beq.n	8017fb8 <udp_input+0xf4>
 8017f8e:	4b53      	ldr	r3, [pc, #332]	; (80180dc <udp_input+0x218>)
 8017f90:	695b      	ldr	r3, [r3, #20]
 8017f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f96:	d10f      	bne.n	8017fb8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017f98:	69fb      	ldr	r3, [r7, #28]
 8017f9a:	681a      	ldr	r2, [r3, #0]
 8017f9c:	683b      	ldr	r3, [r7, #0]
 8017f9e:	3304      	adds	r3, #4
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	429a      	cmp	r2, r3
 8017fa4:	d008      	beq.n	8017fb8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8017fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fa8:	681a      	ldr	r2, [r3, #0]
 8017faa:	683b      	ldr	r3, [r7, #0]
 8017fac:	3304      	adds	r3, #4
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	429a      	cmp	r2, r3
 8017fb2:	d101      	bne.n	8017fb8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8017fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fb6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8017fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fba:	8a9b      	ldrh	r3, [r3, #20]
 8017fbc:	8a3a      	ldrh	r2, [r7, #16]
 8017fbe:	429a      	cmp	r2, r3
 8017fc0:	d118      	bne.n	8017ff4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fc4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d005      	beq.n	8017fd6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8017fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fcc:	685a      	ldr	r2, [r3, #4]
 8017fce:	4b43      	ldr	r3, [pc, #268]	; (80180dc <udp_input+0x218>)
 8017fd0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017fd2:	429a      	cmp	r2, r3
 8017fd4:	d10e      	bne.n	8017ff4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8017fd6:	6a3b      	ldr	r3, [r7, #32]
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d014      	beq.n	8018006 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fde:	68da      	ldr	r2, [r3, #12]
 8017fe0:	6a3b      	ldr	r3, [r7, #32]
 8017fe2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8017fe4:	4b3e      	ldr	r3, [pc, #248]	; (80180e0 <udp_input+0x21c>)
 8017fe6:	681a      	ldr	r2, [r3, #0]
 8017fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fea:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017fec:	4a3c      	ldr	r2, [pc, #240]	; (80180e0 <udp_input+0x21c>)
 8017fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ff0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8017ff2:	e008      	b.n	8018006 <udp_input+0x142>
      }
    }

    prev = pcb;
 8017ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ff6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ffa:	68db      	ldr	r3, [r3, #12]
 8017ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8017ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018000:	2b00      	cmp	r3, #0
 8018002:	d1a7      	bne.n	8017f54 <udp_input+0x90>
 8018004:	e000      	b.n	8018008 <udp_input+0x144>
        break;
 8018006:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8018008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801800a:	2b00      	cmp	r3, #0
 801800c:	d101      	bne.n	8018012 <udp_input+0x14e>
    pcb = uncon_pcb;
 801800e:	69fb      	ldr	r3, [r7, #28]
 8018010:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8018012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018014:	2b00      	cmp	r3, #0
 8018016:	d002      	beq.n	801801e <udp_input+0x15a>
    for_us = 1;
 8018018:	2301      	movs	r3, #1
 801801a:	76fb      	strb	r3, [r7, #27]
 801801c:	e00a      	b.n	8018034 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801801e:	683b      	ldr	r3, [r7, #0]
 8018020:	3304      	adds	r3, #4
 8018022:	681a      	ldr	r2, [r3, #0]
 8018024:	4b2d      	ldr	r3, [pc, #180]	; (80180dc <udp_input+0x218>)
 8018026:	695b      	ldr	r3, [r3, #20]
 8018028:	429a      	cmp	r2, r3
 801802a:	bf0c      	ite	eq
 801802c:	2301      	moveq	r3, #1
 801802e:	2300      	movne	r3, #0
 8018030:	b2db      	uxtb	r3, r3
 8018032:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8018034:	7efb      	ldrb	r3, [r7, #27]
 8018036:	2b00      	cmp	r3, #0
 8018038:	d041      	beq.n	80180be <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801803a:	2108      	movs	r1, #8
 801803c:	6878      	ldr	r0, [r7, #4]
 801803e:	f7f9 fa0b 	bl	8011458 <pbuf_remove_header>
 8018042:	4603      	mov	r3, r0
 8018044:	2b00      	cmp	r3, #0
 8018046:	d00a      	beq.n	801805e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8018048:	4b20      	ldr	r3, [pc, #128]	; (80180cc <udp_input+0x208>)
 801804a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801804e:	4925      	ldr	r1, [pc, #148]	; (80180e4 <udp_input+0x220>)
 8018050:	4820      	ldr	r0, [pc, #128]	; (80180d4 <udp_input+0x210>)
 8018052:	f002 fe4f 	bl	801acf4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8018056:	6878      	ldr	r0, [r7, #4]
 8018058:	f7f9 fab6 	bl	80115c8 <pbuf_free>
      goto end;
 801805c:	e032      	b.n	80180c4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801805e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018060:	2b00      	cmp	r3, #0
 8018062:	d012      	beq.n	801808a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8018064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018066:	699b      	ldr	r3, [r3, #24]
 8018068:	2b00      	cmp	r3, #0
 801806a:	d00a      	beq.n	8018082 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801806c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801806e:	699c      	ldr	r4, [r3, #24]
 8018070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018072:	69d8      	ldr	r0, [r3, #28]
 8018074:	8a3b      	ldrh	r3, [r7, #16]
 8018076:	9300      	str	r3, [sp, #0]
 8018078:	4b1b      	ldr	r3, [pc, #108]	; (80180e8 <udp_input+0x224>)
 801807a:	687a      	ldr	r2, [r7, #4]
 801807c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801807e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8018080:	e021      	b.n	80180c6 <udp_input+0x202>
        pbuf_free(p);
 8018082:	6878      	ldr	r0, [r7, #4]
 8018084:	f7f9 faa0 	bl	80115c8 <pbuf_free>
        goto end;
 8018088:	e01c      	b.n	80180c4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801808a:	7cfb      	ldrb	r3, [r7, #19]
 801808c:	2b00      	cmp	r3, #0
 801808e:	d112      	bne.n	80180b6 <udp_input+0x1f2>
 8018090:	4b12      	ldr	r3, [pc, #72]	; (80180dc <udp_input+0x218>)
 8018092:	695b      	ldr	r3, [r3, #20]
 8018094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018098:	2be0      	cmp	r3, #224	; 0xe0
 801809a:	d00c      	beq.n	80180b6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801809c:	4b0f      	ldr	r3, [pc, #60]	; (80180dc <udp_input+0x218>)
 801809e:	899b      	ldrh	r3, [r3, #12]
 80180a0:	3308      	adds	r3, #8
 80180a2:	b29b      	uxth	r3, r3
 80180a4:	b21b      	sxth	r3, r3
 80180a6:	4619      	mov	r1, r3
 80180a8:	6878      	ldr	r0, [r7, #4]
 80180aa:	f7f9 fa48 	bl	801153e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80180ae:	2103      	movs	r1, #3
 80180b0:	6878      	ldr	r0, [r7, #4]
 80180b2:	f001 f9a9 	bl	8019408 <icmp_dest_unreach>
      pbuf_free(p);
 80180b6:	6878      	ldr	r0, [r7, #4]
 80180b8:	f7f9 fa86 	bl	80115c8 <pbuf_free>
  return;
 80180bc:	e003      	b.n	80180c6 <udp_input+0x202>
    pbuf_free(p);
 80180be:	6878      	ldr	r0, [r7, #4]
 80180c0:	f7f9 fa82 	bl	80115c8 <pbuf_free>
  return;
 80180c4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80180c6:	372c      	adds	r7, #44	; 0x2c
 80180c8:	46bd      	mov	sp, r7
 80180ca:	bd90      	pop	{r4, r7, pc}
 80180cc:	0801eefc 	.word	0x0801eefc
 80180d0:	0801efa0 	.word	0x0801efa0
 80180d4:	0801ef50 	.word	0x0801ef50
 80180d8:	0801efb8 	.word	0x0801efb8
 80180dc:	2000d934 	.word	0x2000d934
 80180e0:	200110e4 	.word	0x200110e4
 80180e4:	0801efd4 	.word	0x0801efd4
 80180e8:	2000d944 	.word	0x2000d944

080180ec <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80180ec:	b580      	push	{r7, lr}
 80180ee:	b086      	sub	sp, #24
 80180f0:	af00      	add	r7, sp, #0
 80180f2:	60f8      	str	r0, [r7, #12]
 80180f4:	60b9      	str	r1, [r7, #8]
 80180f6:	4613      	mov	r3, r2
 80180f8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80180fa:	68bb      	ldr	r3, [r7, #8]
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d101      	bne.n	8018104 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8018100:	4b39      	ldr	r3, [pc, #228]	; (80181e8 <udp_bind+0xfc>)
 8018102:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8018104:	68fb      	ldr	r3, [r7, #12]
 8018106:	2b00      	cmp	r3, #0
 8018108:	d109      	bne.n	801811e <udp_bind+0x32>
 801810a:	4b38      	ldr	r3, [pc, #224]	; (80181ec <udp_bind+0x100>)
 801810c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8018110:	4937      	ldr	r1, [pc, #220]	; (80181f0 <udp_bind+0x104>)
 8018112:	4838      	ldr	r0, [pc, #224]	; (80181f4 <udp_bind+0x108>)
 8018114:	f002 fdee 	bl	801acf4 <iprintf>
 8018118:	f06f 030f 	mvn.w	r3, #15
 801811c:	e060      	b.n	80181e0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801811e:	2300      	movs	r3, #0
 8018120:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018122:	4b35      	ldr	r3, [pc, #212]	; (80181f8 <udp_bind+0x10c>)
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	617b      	str	r3, [r7, #20]
 8018128:	e009      	b.n	801813e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801812a:	68fa      	ldr	r2, [r7, #12]
 801812c:	697b      	ldr	r3, [r7, #20]
 801812e:	429a      	cmp	r2, r3
 8018130:	d102      	bne.n	8018138 <udp_bind+0x4c>
      rebind = 1;
 8018132:	2301      	movs	r3, #1
 8018134:	74fb      	strb	r3, [r7, #19]
      break;
 8018136:	e005      	b.n	8018144 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018138:	697b      	ldr	r3, [r7, #20]
 801813a:	68db      	ldr	r3, [r3, #12]
 801813c:	617b      	str	r3, [r7, #20]
 801813e:	697b      	ldr	r3, [r7, #20]
 8018140:	2b00      	cmp	r3, #0
 8018142:	d1f2      	bne.n	801812a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8018144:	88fb      	ldrh	r3, [r7, #6]
 8018146:	2b00      	cmp	r3, #0
 8018148:	d109      	bne.n	801815e <udp_bind+0x72>
    port = udp_new_port();
 801814a:	f7ff fe1f 	bl	8017d8c <udp_new_port>
 801814e:	4603      	mov	r3, r0
 8018150:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8018152:	88fb      	ldrh	r3, [r7, #6]
 8018154:	2b00      	cmp	r3, #0
 8018156:	d12c      	bne.n	80181b2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8018158:	f06f 0307 	mvn.w	r3, #7
 801815c:	e040      	b.n	80181e0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801815e:	4b26      	ldr	r3, [pc, #152]	; (80181f8 <udp_bind+0x10c>)
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	617b      	str	r3, [r7, #20]
 8018164:	e022      	b.n	80181ac <udp_bind+0xc0>
      if (pcb != ipcb) {
 8018166:	68fa      	ldr	r2, [r7, #12]
 8018168:	697b      	ldr	r3, [r7, #20]
 801816a:	429a      	cmp	r2, r3
 801816c:	d01b      	beq.n	80181a6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801816e:	697b      	ldr	r3, [r7, #20]
 8018170:	8a5b      	ldrh	r3, [r3, #18]
 8018172:	88fa      	ldrh	r2, [r7, #6]
 8018174:	429a      	cmp	r2, r3
 8018176:	d116      	bne.n	80181a6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018178:	697b      	ldr	r3, [r7, #20]
 801817a:	681a      	ldr	r2, [r3, #0]
 801817c:	68bb      	ldr	r3, [r7, #8]
 801817e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8018180:	429a      	cmp	r2, r3
 8018182:	d00d      	beq.n	80181a0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018184:	68bb      	ldr	r3, [r7, #8]
 8018186:	2b00      	cmp	r3, #0
 8018188:	d00a      	beq.n	80181a0 <udp_bind+0xb4>
 801818a:	68bb      	ldr	r3, [r7, #8]
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	2b00      	cmp	r3, #0
 8018190:	d006      	beq.n	80181a0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018192:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018194:	2b00      	cmp	r3, #0
 8018196:	d003      	beq.n	80181a0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018198:	697b      	ldr	r3, [r7, #20]
 801819a:	681b      	ldr	r3, [r3, #0]
 801819c:	2b00      	cmp	r3, #0
 801819e:	d102      	bne.n	80181a6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80181a0:	f06f 0307 	mvn.w	r3, #7
 80181a4:	e01c      	b.n	80181e0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80181a6:	697b      	ldr	r3, [r7, #20]
 80181a8:	68db      	ldr	r3, [r3, #12]
 80181aa:	617b      	str	r3, [r7, #20]
 80181ac:	697b      	ldr	r3, [r7, #20]
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d1d9      	bne.n	8018166 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80181b2:	68bb      	ldr	r3, [r7, #8]
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d002      	beq.n	80181be <udp_bind+0xd2>
 80181b8:	68bb      	ldr	r3, [r7, #8]
 80181ba:	681b      	ldr	r3, [r3, #0]
 80181bc:	e000      	b.n	80181c0 <udp_bind+0xd4>
 80181be:	2300      	movs	r3, #0
 80181c0:	68fa      	ldr	r2, [r7, #12]
 80181c2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80181c4:	68fb      	ldr	r3, [r7, #12]
 80181c6:	88fa      	ldrh	r2, [r7, #6]
 80181c8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80181ca:	7cfb      	ldrb	r3, [r7, #19]
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d106      	bne.n	80181de <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80181d0:	4b09      	ldr	r3, [pc, #36]	; (80181f8 <udp_bind+0x10c>)
 80181d2:	681a      	ldr	r2, [r3, #0]
 80181d4:	68fb      	ldr	r3, [r7, #12]
 80181d6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80181d8:	4a07      	ldr	r2, [pc, #28]	; (80181f8 <udp_bind+0x10c>)
 80181da:	68fb      	ldr	r3, [r7, #12]
 80181dc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80181de:	2300      	movs	r3, #0
}
 80181e0:	4618      	mov	r0, r3
 80181e2:	3718      	adds	r7, #24
 80181e4:	46bd      	mov	sp, r7
 80181e6:	bd80      	pop	{r7, pc}
 80181e8:	0801fb14 	.word	0x0801fb14
 80181ec:	0801eefc 	.word	0x0801eefc
 80181f0:	0801f1c4 	.word	0x0801f1c4
 80181f4:	0801ef50 	.word	0x0801ef50
 80181f8:	200110e4 	.word	0x200110e4

080181fc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80181fc:	b580      	push	{r7, lr}
 80181fe:	b084      	sub	sp, #16
 8018200:	af00      	add	r7, sp, #0
 8018202:	60f8      	str	r0, [r7, #12]
 8018204:	60b9      	str	r1, [r7, #8]
 8018206:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8018208:	68fb      	ldr	r3, [r7, #12]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d107      	bne.n	801821e <udp_recv+0x22>
 801820e:	4b08      	ldr	r3, [pc, #32]	; (8018230 <udp_recv+0x34>)
 8018210:	f240 428a 	movw	r2, #1162	; 0x48a
 8018214:	4907      	ldr	r1, [pc, #28]	; (8018234 <udp_recv+0x38>)
 8018216:	4808      	ldr	r0, [pc, #32]	; (8018238 <udp_recv+0x3c>)
 8018218:	f002 fd6c 	bl	801acf4 <iprintf>
 801821c:	e005      	b.n	801822a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801821e:	68fb      	ldr	r3, [r7, #12]
 8018220:	68ba      	ldr	r2, [r7, #8]
 8018222:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8018224:	68fb      	ldr	r3, [r7, #12]
 8018226:	687a      	ldr	r2, [r7, #4]
 8018228:	61da      	str	r2, [r3, #28]
}
 801822a:	3710      	adds	r7, #16
 801822c:	46bd      	mov	sp, r7
 801822e:	bd80      	pop	{r7, pc}
 8018230:	0801eefc 	.word	0x0801eefc
 8018234:	0801f230 	.word	0x0801f230
 8018238:	0801ef50 	.word	0x0801ef50

0801823c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801823c:	b580      	push	{r7, lr}
 801823e:	b084      	sub	sp, #16
 8018240:	af00      	add	r7, sp, #0
 8018242:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	2b00      	cmp	r3, #0
 8018248:	d107      	bne.n	801825a <udp_remove+0x1e>
 801824a:	4b19      	ldr	r3, [pc, #100]	; (80182b0 <udp_remove+0x74>)
 801824c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8018250:	4918      	ldr	r1, [pc, #96]	; (80182b4 <udp_remove+0x78>)
 8018252:	4819      	ldr	r0, [pc, #100]	; (80182b8 <udp_remove+0x7c>)
 8018254:	f002 fd4e 	bl	801acf4 <iprintf>
 8018258:	e026      	b.n	80182a8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801825a:	4b18      	ldr	r3, [pc, #96]	; (80182bc <udp_remove+0x80>)
 801825c:	681b      	ldr	r3, [r3, #0]
 801825e:	687a      	ldr	r2, [r7, #4]
 8018260:	429a      	cmp	r2, r3
 8018262:	d105      	bne.n	8018270 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8018264:	4b15      	ldr	r3, [pc, #84]	; (80182bc <udp_remove+0x80>)
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	68db      	ldr	r3, [r3, #12]
 801826a:	4a14      	ldr	r2, [pc, #80]	; (80182bc <udp_remove+0x80>)
 801826c:	6013      	str	r3, [r2, #0]
 801826e:	e017      	b.n	80182a0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018270:	4b12      	ldr	r3, [pc, #72]	; (80182bc <udp_remove+0x80>)
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	60fb      	str	r3, [r7, #12]
 8018276:	e010      	b.n	801829a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	68db      	ldr	r3, [r3, #12]
 801827c:	2b00      	cmp	r3, #0
 801827e:	d009      	beq.n	8018294 <udp_remove+0x58>
 8018280:	68fb      	ldr	r3, [r7, #12]
 8018282:	68db      	ldr	r3, [r3, #12]
 8018284:	687a      	ldr	r2, [r7, #4]
 8018286:	429a      	cmp	r2, r3
 8018288:	d104      	bne.n	8018294 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	68da      	ldr	r2, [r3, #12]
 801828e:	68fb      	ldr	r3, [r7, #12]
 8018290:	60da      	str	r2, [r3, #12]
        break;
 8018292:	e005      	b.n	80182a0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018294:	68fb      	ldr	r3, [r7, #12]
 8018296:	68db      	ldr	r3, [r3, #12]
 8018298:	60fb      	str	r3, [r7, #12]
 801829a:	68fb      	ldr	r3, [r7, #12]
 801829c:	2b00      	cmp	r3, #0
 801829e:	d1eb      	bne.n	8018278 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80182a0:	6879      	ldr	r1, [r7, #4]
 80182a2:	2000      	movs	r0, #0
 80182a4:	f7f8 faba 	bl	801081c <memp_free>
}
 80182a8:	3710      	adds	r7, #16
 80182aa:	46bd      	mov	sp, r7
 80182ac:	bd80      	pop	{r7, pc}
 80182ae:	bf00      	nop
 80182b0:	0801eefc 	.word	0x0801eefc
 80182b4:	0801f248 	.word	0x0801f248
 80182b8:	0801ef50 	.word	0x0801ef50
 80182bc:	200110e4 	.word	0x200110e4

080182c0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80182c0:	b580      	push	{r7, lr}
 80182c2:	b082      	sub	sp, #8
 80182c4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80182c6:	2000      	movs	r0, #0
 80182c8:	f7f8 fa32 	bl	8010730 <memp_malloc>
 80182cc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d007      	beq.n	80182e4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80182d4:	2220      	movs	r2, #32
 80182d6:	2100      	movs	r1, #0
 80182d8:	6878      	ldr	r0, [r7, #4]
 80182da:	f002 fd03 	bl	801ace4 <memset>
    pcb->ttl = UDP_TTL;
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	22ff      	movs	r2, #255	; 0xff
 80182e2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80182e4:	687b      	ldr	r3, [r7, #4]
}
 80182e6:	4618      	mov	r0, r3
 80182e8:	3708      	adds	r7, #8
 80182ea:	46bd      	mov	sp, r7
 80182ec:	bd80      	pop	{r7, pc}

080182ee <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80182ee:	b580      	push	{r7, lr}
 80182f0:	b084      	sub	sp, #16
 80182f2:	af00      	add	r7, sp, #0
 80182f4:	4603      	mov	r3, r0
 80182f6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80182f8:	f7ff ffe2 	bl	80182c0 <udp_new>
 80182fc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80182fe:	68fb      	ldr	r3, [r7, #12]
}
 8018300:	4618      	mov	r0, r3
 8018302:	3710      	adds	r7, #16
 8018304:	46bd      	mov	sp, r7
 8018306:	bd80      	pop	{r7, pc}

08018308 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018308:	b480      	push	{r7}
 801830a:	b085      	sub	sp, #20
 801830c:	af00      	add	r7, sp, #0
 801830e:	6078      	str	r0, [r7, #4]
 8018310:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	2b00      	cmp	r3, #0
 8018316:	d01e      	beq.n	8018356 <udp_netif_ip_addr_changed+0x4e>
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	681b      	ldr	r3, [r3, #0]
 801831c:	2b00      	cmp	r3, #0
 801831e:	d01a      	beq.n	8018356 <udp_netif_ip_addr_changed+0x4e>
 8018320:	683b      	ldr	r3, [r7, #0]
 8018322:	2b00      	cmp	r3, #0
 8018324:	d017      	beq.n	8018356 <udp_netif_ip_addr_changed+0x4e>
 8018326:	683b      	ldr	r3, [r7, #0]
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	2b00      	cmp	r3, #0
 801832c:	d013      	beq.n	8018356 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801832e:	4b0d      	ldr	r3, [pc, #52]	; (8018364 <udp_netif_ip_addr_changed+0x5c>)
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	60fb      	str	r3, [r7, #12]
 8018334:	e00c      	b.n	8018350 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018336:	68fb      	ldr	r3, [r7, #12]
 8018338:	681a      	ldr	r2, [r3, #0]
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	681b      	ldr	r3, [r3, #0]
 801833e:	429a      	cmp	r2, r3
 8018340:	d103      	bne.n	801834a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8018342:	683b      	ldr	r3, [r7, #0]
 8018344:	681a      	ldr	r2, [r3, #0]
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	68db      	ldr	r3, [r3, #12]
 801834e:	60fb      	str	r3, [r7, #12]
 8018350:	68fb      	ldr	r3, [r7, #12]
 8018352:	2b00      	cmp	r3, #0
 8018354:	d1ef      	bne.n	8018336 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8018356:	bf00      	nop
 8018358:	3714      	adds	r7, #20
 801835a:	46bd      	mov	sp, r7
 801835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018360:	4770      	bx	lr
 8018362:	bf00      	nop
 8018364:	200110e4 	.word	0x200110e4

08018368 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8018368:	b580      	push	{r7, lr}
 801836a:	b082      	sub	sp, #8
 801836c:	af00      	add	r7, sp, #0
 801836e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8018370:	4915      	ldr	r1, [pc, #84]	; (80183c8 <etharp_free_entry+0x60>)
 8018372:	687a      	ldr	r2, [r7, #4]
 8018374:	4613      	mov	r3, r2
 8018376:	005b      	lsls	r3, r3, #1
 8018378:	4413      	add	r3, r2
 801837a:	00db      	lsls	r3, r3, #3
 801837c:	440b      	add	r3, r1
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d013      	beq.n	80183ac <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8018384:	4910      	ldr	r1, [pc, #64]	; (80183c8 <etharp_free_entry+0x60>)
 8018386:	687a      	ldr	r2, [r7, #4]
 8018388:	4613      	mov	r3, r2
 801838a:	005b      	lsls	r3, r3, #1
 801838c:	4413      	add	r3, r2
 801838e:	00db      	lsls	r3, r3, #3
 8018390:	440b      	add	r3, r1
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	4618      	mov	r0, r3
 8018396:	f7f9 f917 	bl	80115c8 <pbuf_free>
    arp_table[i].q = NULL;
 801839a:	490b      	ldr	r1, [pc, #44]	; (80183c8 <etharp_free_entry+0x60>)
 801839c:	687a      	ldr	r2, [r7, #4]
 801839e:	4613      	mov	r3, r2
 80183a0:	005b      	lsls	r3, r3, #1
 80183a2:	4413      	add	r3, r2
 80183a4:	00db      	lsls	r3, r3, #3
 80183a6:	440b      	add	r3, r1
 80183a8:	2200      	movs	r2, #0
 80183aa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80183ac:	4906      	ldr	r1, [pc, #24]	; (80183c8 <etharp_free_entry+0x60>)
 80183ae:	687a      	ldr	r2, [r7, #4]
 80183b0:	4613      	mov	r3, r2
 80183b2:	005b      	lsls	r3, r3, #1
 80183b4:	4413      	add	r3, r2
 80183b6:	00db      	lsls	r3, r3, #3
 80183b8:	440b      	add	r3, r1
 80183ba:	3314      	adds	r3, #20
 80183bc:	2200      	movs	r2, #0
 80183be:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80183c0:	bf00      	nop
 80183c2:	3708      	adds	r7, #8
 80183c4:	46bd      	mov	sp, r7
 80183c6:	bd80      	pop	{r7, pc}
 80183c8:	200110e8 	.word	0x200110e8

080183cc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80183cc:	b580      	push	{r7, lr}
 80183ce:	b082      	sub	sp, #8
 80183d0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80183d2:	2300      	movs	r3, #0
 80183d4:	607b      	str	r3, [r7, #4]
 80183d6:	e096      	b.n	8018506 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80183d8:	494f      	ldr	r1, [pc, #316]	; (8018518 <etharp_tmr+0x14c>)
 80183da:	687a      	ldr	r2, [r7, #4]
 80183dc:	4613      	mov	r3, r2
 80183de:	005b      	lsls	r3, r3, #1
 80183e0:	4413      	add	r3, r2
 80183e2:	00db      	lsls	r3, r3, #3
 80183e4:	440b      	add	r3, r1
 80183e6:	3314      	adds	r3, #20
 80183e8:	781b      	ldrb	r3, [r3, #0]
 80183ea:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80183ec:	78fb      	ldrb	r3, [r7, #3]
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	f000 8086 	beq.w	8018500 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80183f4:	4948      	ldr	r1, [pc, #288]	; (8018518 <etharp_tmr+0x14c>)
 80183f6:	687a      	ldr	r2, [r7, #4]
 80183f8:	4613      	mov	r3, r2
 80183fa:	005b      	lsls	r3, r3, #1
 80183fc:	4413      	add	r3, r2
 80183fe:	00db      	lsls	r3, r3, #3
 8018400:	440b      	add	r3, r1
 8018402:	3312      	adds	r3, #18
 8018404:	881b      	ldrh	r3, [r3, #0]
 8018406:	3301      	adds	r3, #1
 8018408:	b298      	uxth	r0, r3
 801840a:	4943      	ldr	r1, [pc, #268]	; (8018518 <etharp_tmr+0x14c>)
 801840c:	687a      	ldr	r2, [r7, #4]
 801840e:	4613      	mov	r3, r2
 8018410:	005b      	lsls	r3, r3, #1
 8018412:	4413      	add	r3, r2
 8018414:	00db      	lsls	r3, r3, #3
 8018416:	440b      	add	r3, r1
 8018418:	3312      	adds	r3, #18
 801841a:	4602      	mov	r2, r0
 801841c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801841e:	493e      	ldr	r1, [pc, #248]	; (8018518 <etharp_tmr+0x14c>)
 8018420:	687a      	ldr	r2, [r7, #4]
 8018422:	4613      	mov	r3, r2
 8018424:	005b      	lsls	r3, r3, #1
 8018426:	4413      	add	r3, r2
 8018428:	00db      	lsls	r3, r3, #3
 801842a:	440b      	add	r3, r1
 801842c:	3312      	adds	r3, #18
 801842e:	881b      	ldrh	r3, [r3, #0]
 8018430:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8018434:	d215      	bcs.n	8018462 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018436:	4938      	ldr	r1, [pc, #224]	; (8018518 <etharp_tmr+0x14c>)
 8018438:	687a      	ldr	r2, [r7, #4]
 801843a:	4613      	mov	r3, r2
 801843c:	005b      	lsls	r3, r3, #1
 801843e:	4413      	add	r3, r2
 8018440:	00db      	lsls	r3, r3, #3
 8018442:	440b      	add	r3, r1
 8018444:	3314      	adds	r3, #20
 8018446:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018448:	2b01      	cmp	r3, #1
 801844a:	d10e      	bne.n	801846a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801844c:	4932      	ldr	r1, [pc, #200]	; (8018518 <etharp_tmr+0x14c>)
 801844e:	687a      	ldr	r2, [r7, #4]
 8018450:	4613      	mov	r3, r2
 8018452:	005b      	lsls	r3, r3, #1
 8018454:	4413      	add	r3, r2
 8018456:	00db      	lsls	r3, r3, #3
 8018458:	440b      	add	r3, r1
 801845a:	3312      	adds	r3, #18
 801845c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801845e:	2b04      	cmp	r3, #4
 8018460:	d903      	bls.n	801846a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8018462:	6878      	ldr	r0, [r7, #4]
 8018464:	f7ff ff80 	bl	8018368 <etharp_free_entry>
 8018468:	e04a      	b.n	8018500 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801846a:	492b      	ldr	r1, [pc, #172]	; (8018518 <etharp_tmr+0x14c>)
 801846c:	687a      	ldr	r2, [r7, #4]
 801846e:	4613      	mov	r3, r2
 8018470:	005b      	lsls	r3, r3, #1
 8018472:	4413      	add	r3, r2
 8018474:	00db      	lsls	r3, r3, #3
 8018476:	440b      	add	r3, r1
 8018478:	3314      	adds	r3, #20
 801847a:	781b      	ldrb	r3, [r3, #0]
 801847c:	2b03      	cmp	r3, #3
 801847e:	d10a      	bne.n	8018496 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018480:	4925      	ldr	r1, [pc, #148]	; (8018518 <etharp_tmr+0x14c>)
 8018482:	687a      	ldr	r2, [r7, #4]
 8018484:	4613      	mov	r3, r2
 8018486:	005b      	lsls	r3, r3, #1
 8018488:	4413      	add	r3, r2
 801848a:	00db      	lsls	r3, r3, #3
 801848c:	440b      	add	r3, r1
 801848e:	3314      	adds	r3, #20
 8018490:	2204      	movs	r2, #4
 8018492:	701a      	strb	r2, [r3, #0]
 8018494:	e034      	b.n	8018500 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8018496:	4920      	ldr	r1, [pc, #128]	; (8018518 <etharp_tmr+0x14c>)
 8018498:	687a      	ldr	r2, [r7, #4]
 801849a:	4613      	mov	r3, r2
 801849c:	005b      	lsls	r3, r3, #1
 801849e:	4413      	add	r3, r2
 80184a0:	00db      	lsls	r3, r3, #3
 80184a2:	440b      	add	r3, r1
 80184a4:	3314      	adds	r3, #20
 80184a6:	781b      	ldrb	r3, [r3, #0]
 80184a8:	2b04      	cmp	r3, #4
 80184aa:	d10a      	bne.n	80184c2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80184ac:	491a      	ldr	r1, [pc, #104]	; (8018518 <etharp_tmr+0x14c>)
 80184ae:	687a      	ldr	r2, [r7, #4]
 80184b0:	4613      	mov	r3, r2
 80184b2:	005b      	lsls	r3, r3, #1
 80184b4:	4413      	add	r3, r2
 80184b6:	00db      	lsls	r3, r3, #3
 80184b8:	440b      	add	r3, r1
 80184ba:	3314      	adds	r3, #20
 80184bc:	2202      	movs	r2, #2
 80184be:	701a      	strb	r2, [r3, #0]
 80184c0:	e01e      	b.n	8018500 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80184c2:	4915      	ldr	r1, [pc, #84]	; (8018518 <etharp_tmr+0x14c>)
 80184c4:	687a      	ldr	r2, [r7, #4]
 80184c6:	4613      	mov	r3, r2
 80184c8:	005b      	lsls	r3, r3, #1
 80184ca:	4413      	add	r3, r2
 80184cc:	00db      	lsls	r3, r3, #3
 80184ce:	440b      	add	r3, r1
 80184d0:	3314      	adds	r3, #20
 80184d2:	781b      	ldrb	r3, [r3, #0]
 80184d4:	2b01      	cmp	r3, #1
 80184d6:	d113      	bne.n	8018500 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80184d8:	490f      	ldr	r1, [pc, #60]	; (8018518 <etharp_tmr+0x14c>)
 80184da:	687a      	ldr	r2, [r7, #4]
 80184dc:	4613      	mov	r3, r2
 80184de:	005b      	lsls	r3, r3, #1
 80184e0:	4413      	add	r3, r2
 80184e2:	00db      	lsls	r3, r3, #3
 80184e4:	440b      	add	r3, r1
 80184e6:	3308      	adds	r3, #8
 80184e8:	6818      	ldr	r0, [r3, #0]
 80184ea:	687a      	ldr	r2, [r7, #4]
 80184ec:	4613      	mov	r3, r2
 80184ee:	005b      	lsls	r3, r3, #1
 80184f0:	4413      	add	r3, r2
 80184f2:	00db      	lsls	r3, r3, #3
 80184f4:	4a08      	ldr	r2, [pc, #32]	; (8018518 <etharp_tmr+0x14c>)
 80184f6:	4413      	add	r3, r2
 80184f8:	3304      	adds	r3, #4
 80184fa:	4619      	mov	r1, r3
 80184fc:	f000 fe6e 	bl	80191dc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	3301      	adds	r3, #1
 8018504:	607b      	str	r3, [r7, #4]
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	2b09      	cmp	r3, #9
 801850a:	f77f af65 	ble.w	80183d8 <etharp_tmr+0xc>
      }
    }
  }
}
 801850e:	bf00      	nop
 8018510:	bf00      	nop
 8018512:	3708      	adds	r7, #8
 8018514:	46bd      	mov	sp, r7
 8018516:	bd80      	pop	{r7, pc}
 8018518:	200110e8 	.word	0x200110e8

0801851c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801851c:	b580      	push	{r7, lr}
 801851e:	b08a      	sub	sp, #40	; 0x28
 8018520:	af00      	add	r7, sp, #0
 8018522:	60f8      	str	r0, [r7, #12]
 8018524:	460b      	mov	r3, r1
 8018526:	607a      	str	r2, [r7, #4]
 8018528:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801852a:	230a      	movs	r3, #10
 801852c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801852e:	230a      	movs	r3, #10
 8018530:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8018532:	230a      	movs	r3, #10
 8018534:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8018536:	2300      	movs	r3, #0
 8018538:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801853a:	230a      	movs	r3, #10
 801853c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801853e:	2300      	movs	r3, #0
 8018540:	83bb      	strh	r3, [r7, #28]
 8018542:	2300      	movs	r3, #0
 8018544:	837b      	strh	r3, [r7, #26]
 8018546:	2300      	movs	r3, #0
 8018548:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801854a:	2300      	movs	r3, #0
 801854c:	843b      	strh	r3, [r7, #32]
 801854e:	e0ae      	b.n	80186ae <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8018550:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018554:	49a6      	ldr	r1, [pc, #664]	; (80187f0 <etharp_find_entry+0x2d4>)
 8018556:	4613      	mov	r3, r2
 8018558:	005b      	lsls	r3, r3, #1
 801855a:	4413      	add	r3, r2
 801855c:	00db      	lsls	r3, r3, #3
 801855e:	440b      	add	r3, r1
 8018560:	3314      	adds	r3, #20
 8018562:	781b      	ldrb	r3, [r3, #0]
 8018564:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8018566:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801856a:	2b0a      	cmp	r3, #10
 801856c:	d105      	bne.n	801857a <etharp_find_entry+0x5e>
 801856e:	7dfb      	ldrb	r3, [r7, #23]
 8018570:	2b00      	cmp	r3, #0
 8018572:	d102      	bne.n	801857a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8018574:	8c3b      	ldrh	r3, [r7, #32]
 8018576:	847b      	strh	r3, [r7, #34]	; 0x22
 8018578:	e095      	b.n	80186a6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801857a:	7dfb      	ldrb	r3, [r7, #23]
 801857c:	2b00      	cmp	r3, #0
 801857e:	f000 8092 	beq.w	80186a6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8018582:	7dfb      	ldrb	r3, [r7, #23]
 8018584:	2b01      	cmp	r3, #1
 8018586:	d009      	beq.n	801859c <etharp_find_entry+0x80>
 8018588:	7dfb      	ldrb	r3, [r7, #23]
 801858a:	2b01      	cmp	r3, #1
 801858c:	d806      	bhi.n	801859c <etharp_find_entry+0x80>
 801858e:	4b99      	ldr	r3, [pc, #612]	; (80187f4 <etharp_find_entry+0x2d8>)
 8018590:	f240 1223 	movw	r2, #291	; 0x123
 8018594:	4998      	ldr	r1, [pc, #608]	; (80187f8 <etharp_find_entry+0x2dc>)
 8018596:	4899      	ldr	r0, [pc, #612]	; (80187fc <etharp_find_entry+0x2e0>)
 8018598:	f002 fbac 	bl	801acf4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d020      	beq.n	80185e4 <etharp_find_entry+0xc8>
 80185a2:	68fb      	ldr	r3, [r7, #12]
 80185a4:	6819      	ldr	r1, [r3, #0]
 80185a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80185aa:	4891      	ldr	r0, [pc, #580]	; (80187f0 <etharp_find_entry+0x2d4>)
 80185ac:	4613      	mov	r3, r2
 80185ae:	005b      	lsls	r3, r3, #1
 80185b0:	4413      	add	r3, r2
 80185b2:	00db      	lsls	r3, r3, #3
 80185b4:	4403      	add	r3, r0
 80185b6:	3304      	adds	r3, #4
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	4299      	cmp	r1, r3
 80185bc:	d112      	bne.n	80185e4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d00c      	beq.n	80185de <etharp_find_entry+0xc2>
 80185c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80185c8:	4989      	ldr	r1, [pc, #548]	; (80187f0 <etharp_find_entry+0x2d4>)
 80185ca:	4613      	mov	r3, r2
 80185cc:	005b      	lsls	r3, r3, #1
 80185ce:	4413      	add	r3, r2
 80185d0:	00db      	lsls	r3, r3, #3
 80185d2:	440b      	add	r3, r1
 80185d4:	3308      	adds	r3, #8
 80185d6:	681b      	ldr	r3, [r3, #0]
 80185d8:	687a      	ldr	r2, [r7, #4]
 80185da:	429a      	cmp	r2, r3
 80185dc:	d102      	bne.n	80185e4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80185de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80185e2:	e100      	b.n	80187e6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80185e4:	7dfb      	ldrb	r3, [r7, #23]
 80185e6:	2b01      	cmp	r3, #1
 80185e8:	d140      	bne.n	801866c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80185ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80185ee:	4980      	ldr	r1, [pc, #512]	; (80187f0 <etharp_find_entry+0x2d4>)
 80185f0:	4613      	mov	r3, r2
 80185f2:	005b      	lsls	r3, r3, #1
 80185f4:	4413      	add	r3, r2
 80185f6:	00db      	lsls	r3, r3, #3
 80185f8:	440b      	add	r3, r1
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d01a      	beq.n	8018636 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8018600:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018604:	497a      	ldr	r1, [pc, #488]	; (80187f0 <etharp_find_entry+0x2d4>)
 8018606:	4613      	mov	r3, r2
 8018608:	005b      	lsls	r3, r3, #1
 801860a:	4413      	add	r3, r2
 801860c:	00db      	lsls	r3, r3, #3
 801860e:	440b      	add	r3, r1
 8018610:	3312      	adds	r3, #18
 8018612:	881b      	ldrh	r3, [r3, #0]
 8018614:	8bba      	ldrh	r2, [r7, #28]
 8018616:	429a      	cmp	r2, r3
 8018618:	d845      	bhi.n	80186a6 <etharp_find_entry+0x18a>
            old_queue = i;
 801861a:	8c3b      	ldrh	r3, [r7, #32]
 801861c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801861e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018622:	4973      	ldr	r1, [pc, #460]	; (80187f0 <etharp_find_entry+0x2d4>)
 8018624:	4613      	mov	r3, r2
 8018626:	005b      	lsls	r3, r3, #1
 8018628:	4413      	add	r3, r2
 801862a:	00db      	lsls	r3, r3, #3
 801862c:	440b      	add	r3, r1
 801862e:	3312      	adds	r3, #18
 8018630:	881b      	ldrh	r3, [r3, #0]
 8018632:	83bb      	strh	r3, [r7, #28]
 8018634:	e037      	b.n	80186a6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8018636:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801863a:	496d      	ldr	r1, [pc, #436]	; (80187f0 <etharp_find_entry+0x2d4>)
 801863c:	4613      	mov	r3, r2
 801863e:	005b      	lsls	r3, r3, #1
 8018640:	4413      	add	r3, r2
 8018642:	00db      	lsls	r3, r3, #3
 8018644:	440b      	add	r3, r1
 8018646:	3312      	adds	r3, #18
 8018648:	881b      	ldrh	r3, [r3, #0]
 801864a:	8b7a      	ldrh	r2, [r7, #26]
 801864c:	429a      	cmp	r2, r3
 801864e:	d82a      	bhi.n	80186a6 <etharp_find_entry+0x18a>
            old_pending = i;
 8018650:	8c3b      	ldrh	r3, [r7, #32]
 8018652:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8018654:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018658:	4965      	ldr	r1, [pc, #404]	; (80187f0 <etharp_find_entry+0x2d4>)
 801865a:	4613      	mov	r3, r2
 801865c:	005b      	lsls	r3, r3, #1
 801865e:	4413      	add	r3, r2
 8018660:	00db      	lsls	r3, r3, #3
 8018662:	440b      	add	r3, r1
 8018664:	3312      	adds	r3, #18
 8018666:	881b      	ldrh	r3, [r3, #0]
 8018668:	837b      	strh	r3, [r7, #26]
 801866a:	e01c      	b.n	80186a6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801866c:	7dfb      	ldrb	r3, [r7, #23]
 801866e:	2b01      	cmp	r3, #1
 8018670:	d919      	bls.n	80186a6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8018672:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018676:	495e      	ldr	r1, [pc, #376]	; (80187f0 <etharp_find_entry+0x2d4>)
 8018678:	4613      	mov	r3, r2
 801867a:	005b      	lsls	r3, r3, #1
 801867c:	4413      	add	r3, r2
 801867e:	00db      	lsls	r3, r3, #3
 8018680:	440b      	add	r3, r1
 8018682:	3312      	adds	r3, #18
 8018684:	881b      	ldrh	r3, [r3, #0]
 8018686:	8b3a      	ldrh	r2, [r7, #24]
 8018688:	429a      	cmp	r2, r3
 801868a:	d80c      	bhi.n	80186a6 <etharp_find_entry+0x18a>
            old_stable = i;
 801868c:	8c3b      	ldrh	r3, [r7, #32]
 801868e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8018690:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018694:	4956      	ldr	r1, [pc, #344]	; (80187f0 <etharp_find_entry+0x2d4>)
 8018696:	4613      	mov	r3, r2
 8018698:	005b      	lsls	r3, r3, #1
 801869a:	4413      	add	r3, r2
 801869c:	00db      	lsls	r3, r3, #3
 801869e:	440b      	add	r3, r1
 80186a0:	3312      	adds	r3, #18
 80186a2:	881b      	ldrh	r3, [r3, #0]
 80186a4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80186a6:	8c3b      	ldrh	r3, [r7, #32]
 80186a8:	3301      	adds	r3, #1
 80186aa:	b29b      	uxth	r3, r3
 80186ac:	843b      	strh	r3, [r7, #32]
 80186ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80186b2:	2b09      	cmp	r3, #9
 80186b4:	f77f af4c 	ble.w	8018550 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80186b8:	7afb      	ldrb	r3, [r7, #11]
 80186ba:	f003 0302 	and.w	r3, r3, #2
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d108      	bne.n	80186d4 <etharp_find_entry+0x1b8>
 80186c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80186c6:	2b0a      	cmp	r3, #10
 80186c8:	d107      	bne.n	80186da <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80186ca:	7afb      	ldrb	r3, [r7, #11]
 80186cc:	f003 0301 	and.w	r3, r3, #1
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d102      	bne.n	80186da <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80186d4:	f04f 33ff 	mov.w	r3, #4294967295
 80186d8:	e085      	b.n	80187e6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80186da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80186de:	2b09      	cmp	r3, #9
 80186e0:	dc02      	bgt.n	80186e8 <etharp_find_entry+0x1cc>
    i = empty;
 80186e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80186e4:	843b      	strh	r3, [r7, #32]
 80186e6:	e039      	b.n	801875c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80186e8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80186ec:	2b09      	cmp	r3, #9
 80186ee:	dc14      	bgt.n	801871a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80186f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80186f2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80186f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80186f8:	493d      	ldr	r1, [pc, #244]	; (80187f0 <etharp_find_entry+0x2d4>)
 80186fa:	4613      	mov	r3, r2
 80186fc:	005b      	lsls	r3, r3, #1
 80186fe:	4413      	add	r3, r2
 8018700:	00db      	lsls	r3, r3, #3
 8018702:	440b      	add	r3, r1
 8018704:	681b      	ldr	r3, [r3, #0]
 8018706:	2b00      	cmp	r3, #0
 8018708:	d018      	beq.n	801873c <etharp_find_entry+0x220>
 801870a:	4b3a      	ldr	r3, [pc, #232]	; (80187f4 <etharp_find_entry+0x2d8>)
 801870c:	f240 126d 	movw	r2, #365	; 0x16d
 8018710:	493b      	ldr	r1, [pc, #236]	; (8018800 <etharp_find_entry+0x2e4>)
 8018712:	483a      	ldr	r0, [pc, #232]	; (80187fc <etharp_find_entry+0x2e0>)
 8018714:	f002 faee 	bl	801acf4 <iprintf>
 8018718:	e010      	b.n	801873c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801871a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801871e:	2b09      	cmp	r3, #9
 8018720:	dc02      	bgt.n	8018728 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8018722:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018724:	843b      	strh	r3, [r7, #32]
 8018726:	e009      	b.n	801873c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018728:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801872c:	2b09      	cmp	r3, #9
 801872e:	dc02      	bgt.n	8018736 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8018730:	8bfb      	ldrh	r3, [r7, #30]
 8018732:	843b      	strh	r3, [r7, #32]
 8018734:	e002      	b.n	801873c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8018736:	f04f 33ff 	mov.w	r3, #4294967295
 801873a:	e054      	b.n	80187e6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801873c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018740:	2b09      	cmp	r3, #9
 8018742:	dd06      	ble.n	8018752 <etharp_find_entry+0x236>
 8018744:	4b2b      	ldr	r3, [pc, #172]	; (80187f4 <etharp_find_entry+0x2d8>)
 8018746:	f240 127f 	movw	r2, #383	; 0x17f
 801874a:	492e      	ldr	r1, [pc, #184]	; (8018804 <etharp_find_entry+0x2e8>)
 801874c:	482b      	ldr	r0, [pc, #172]	; (80187fc <etharp_find_entry+0x2e0>)
 801874e:	f002 fad1 	bl	801acf4 <iprintf>
    etharp_free_entry(i);
 8018752:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018756:	4618      	mov	r0, r3
 8018758:	f7ff fe06 	bl	8018368 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801875c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018760:	2b09      	cmp	r3, #9
 8018762:	dd06      	ble.n	8018772 <etharp_find_entry+0x256>
 8018764:	4b23      	ldr	r3, [pc, #140]	; (80187f4 <etharp_find_entry+0x2d8>)
 8018766:	f240 1283 	movw	r2, #387	; 0x183
 801876a:	4926      	ldr	r1, [pc, #152]	; (8018804 <etharp_find_entry+0x2e8>)
 801876c:	4823      	ldr	r0, [pc, #140]	; (80187fc <etharp_find_entry+0x2e0>)
 801876e:	f002 fac1 	bl	801acf4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8018772:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018776:	491e      	ldr	r1, [pc, #120]	; (80187f0 <etharp_find_entry+0x2d4>)
 8018778:	4613      	mov	r3, r2
 801877a:	005b      	lsls	r3, r3, #1
 801877c:	4413      	add	r3, r2
 801877e:	00db      	lsls	r3, r3, #3
 8018780:	440b      	add	r3, r1
 8018782:	3314      	adds	r3, #20
 8018784:	781b      	ldrb	r3, [r3, #0]
 8018786:	2b00      	cmp	r3, #0
 8018788:	d006      	beq.n	8018798 <etharp_find_entry+0x27c>
 801878a:	4b1a      	ldr	r3, [pc, #104]	; (80187f4 <etharp_find_entry+0x2d8>)
 801878c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8018790:	491d      	ldr	r1, [pc, #116]	; (8018808 <etharp_find_entry+0x2ec>)
 8018792:	481a      	ldr	r0, [pc, #104]	; (80187fc <etharp_find_entry+0x2e0>)
 8018794:	f002 faae 	bl	801acf4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018798:	68fb      	ldr	r3, [r7, #12]
 801879a:	2b00      	cmp	r3, #0
 801879c:	d00b      	beq.n	80187b6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801879e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80187a2:	68fb      	ldr	r3, [r7, #12]
 80187a4:	6819      	ldr	r1, [r3, #0]
 80187a6:	4812      	ldr	r0, [pc, #72]	; (80187f0 <etharp_find_entry+0x2d4>)
 80187a8:	4613      	mov	r3, r2
 80187aa:	005b      	lsls	r3, r3, #1
 80187ac:	4413      	add	r3, r2
 80187ae:	00db      	lsls	r3, r3, #3
 80187b0:	4403      	add	r3, r0
 80187b2:	3304      	adds	r3, #4
 80187b4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80187b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80187ba:	490d      	ldr	r1, [pc, #52]	; (80187f0 <etharp_find_entry+0x2d4>)
 80187bc:	4613      	mov	r3, r2
 80187be:	005b      	lsls	r3, r3, #1
 80187c0:	4413      	add	r3, r2
 80187c2:	00db      	lsls	r3, r3, #3
 80187c4:	440b      	add	r3, r1
 80187c6:	3312      	adds	r3, #18
 80187c8:	2200      	movs	r2, #0
 80187ca:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80187cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80187d0:	4907      	ldr	r1, [pc, #28]	; (80187f0 <etharp_find_entry+0x2d4>)
 80187d2:	4613      	mov	r3, r2
 80187d4:	005b      	lsls	r3, r3, #1
 80187d6:	4413      	add	r3, r2
 80187d8:	00db      	lsls	r3, r3, #3
 80187da:	440b      	add	r3, r1
 80187dc:	3308      	adds	r3, #8
 80187de:	687a      	ldr	r2, [r7, #4]
 80187e0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80187e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80187e6:	4618      	mov	r0, r3
 80187e8:	3728      	adds	r7, #40	; 0x28
 80187ea:	46bd      	mov	sp, r7
 80187ec:	bd80      	pop	{r7, pc}
 80187ee:	bf00      	nop
 80187f0:	200110e8 	.word	0x200110e8
 80187f4:	0801f260 	.word	0x0801f260
 80187f8:	0801f298 	.word	0x0801f298
 80187fc:	0801f2d8 	.word	0x0801f2d8
 8018800:	0801f300 	.word	0x0801f300
 8018804:	0801f318 	.word	0x0801f318
 8018808:	0801f32c 	.word	0x0801f32c

0801880c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801880c:	b580      	push	{r7, lr}
 801880e:	b088      	sub	sp, #32
 8018810:	af02      	add	r7, sp, #8
 8018812:	60f8      	str	r0, [r7, #12]
 8018814:	60b9      	str	r1, [r7, #8]
 8018816:	607a      	str	r2, [r7, #4]
 8018818:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801881a:	68fb      	ldr	r3, [r7, #12]
 801881c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018820:	2b06      	cmp	r3, #6
 8018822:	d006      	beq.n	8018832 <etharp_update_arp_entry+0x26>
 8018824:	4b48      	ldr	r3, [pc, #288]	; (8018948 <etharp_update_arp_entry+0x13c>)
 8018826:	f240 12a9 	movw	r2, #425	; 0x1a9
 801882a:	4948      	ldr	r1, [pc, #288]	; (801894c <etharp_update_arp_entry+0x140>)
 801882c:	4848      	ldr	r0, [pc, #288]	; (8018950 <etharp_update_arp_entry+0x144>)
 801882e:	f002 fa61 	bl	801acf4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8018832:	68bb      	ldr	r3, [r7, #8]
 8018834:	2b00      	cmp	r3, #0
 8018836:	d012      	beq.n	801885e <etharp_update_arp_entry+0x52>
 8018838:	68bb      	ldr	r3, [r7, #8]
 801883a:	681b      	ldr	r3, [r3, #0]
 801883c:	2b00      	cmp	r3, #0
 801883e:	d00e      	beq.n	801885e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018840:	68bb      	ldr	r3, [r7, #8]
 8018842:	681b      	ldr	r3, [r3, #0]
 8018844:	68f9      	ldr	r1, [r7, #12]
 8018846:	4618      	mov	r0, r3
 8018848:	f001 f8fe 	bl	8019a48 <ip4_addr_isbroadcast_u32>
 801884c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801884e:	2b00      	cmp	r3, #0
 8018850:	d105      	bne.n	801885e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8018852:	68bb      	ldr	r3, [r7, #8]
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801885a:	2be0      	cmp	r3, #224	; 0xe0
 801885c:	d102      	bne.n	8018864 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801885e:	f06f 030f 	mvn.w	r3, #15
 8018862:	e06c      	b.n	801893e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018864:	78fb      	ldrb	r3, [r7, #3]
 8018866:	68fa      	ldr	r2, [r7, #12]
 8018868:	4619      	mov	r1, r3
 801886a:	68b8      	ldr	r0, [r7, #8]
 801886c:	f7ff fe56 	bl	801851c <etharp_find_entry>
 8018870:	4603      	mov	r3, r0
 8018872:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018874:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018878:	2b00      	cmp	r3, #0
 801887a:	da02      	bge.n	8018882 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801887c:	8afb      	ldrh	r3, [r7, #22]
 801887e:	b25b      	sxtb	r3, r3
 8018880:	e05d      	b.n	801893e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8018882:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018886:	4933      	ldr	r1, [pc, #204]	; (8018954 <etharp_update_arp_entry+0x148>)
 8018888:	4613      	mov	r3, r2
 801888a:	005b      	lsls	r3, r3, #1
 801888c:	4413      	add	r3, r2
 801888e:	00db      	lsls	r3, r3, #3
 8018890:	440b      	add	r3, r1
 8018892:	3314      	adds	r3, #20
 8018894:	2202      	movs	r2, #2
 8018896:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018898:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801889c:	492d      	ldr	r1, [pc, #180]	; (8018954 <etharp_update_arp_entry+0x148>)
 801889e:	4613      	mov	r3, r2
 80188a0:	005b      	lsls	r3, r3, #1
 80188a2:	4413      	add	r3, r2
 80188a4:	00db      	lsls	r3, r3, #3
 80188a6:	440b      	add	r3, r1
 80188a8:	3308      	adds	r3, #8
 80188aa:	68fa      	ldr	r2, [r7, #12]
 80188ac:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80188ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80188b2:	4613      	mov	r3, r2
 80188b4:	005b      	lsls	r3, r3, #1
 80188b6:	4413      	add	r3, r2
 80188b8:	00db      	lsls	r3, r3, #3
 80188ba:	3308      	adds	r3, #8
 80188bc:	4a25      	ldr	r2, [pc, #148]	; (8018954 <etharp_update_arp_entry+0x148>)
 80188be:	4413      	add	r3, r2
 80188c0:	3304      	adds	r3, #4
 80188c2:	2206      	movs	r2, #6
 80188c4:	6879      	ldr	r1, [r7, #4]
 80188c6:	4618      	mov	r0, r3
 80188c8:	f002 f9fe 	bl	801acc8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80188cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80188d0:	4920      	ldr	r1, [pc, #128]	; (8018954 <etharp_update_arp_entry+0x148>)
 80188d2:	4613      	mov	r3, r2
 80188d4:	005b      	lsls	r3, r3, #1
 80188d6:	4413      	add	r3, r2
 80188d8:	00db      	lsls	r3, r3, #3
 80188da:	440b      	add	r3, r1
 80188dc:	3312      	adds	r3, #18
 80188de:	2200      	movs	r2, #0
 80188e0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80188e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80188e6:	491b      	ldr	r1, [pc, #108]	; (8018954 <etharp_update_arp_entry+0x148>)
 80188e8:	4613      	mov	r3, r2
 80188ea:	005b      	lsls	r3, r3, #1
 80188ec:	4413      	add	r3, r2
 80188ee:	00db      	lsls	r3, r3, #3
 80188f0:	440b      	add	r3, r1
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	d021      	beq.n	801893c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80188f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80188fc:	4915      	ldr	r1, [pc, #84]	; (8018954 <etharp_update_arp_entry+0x148>)
 80188fe:	4613      	mov	r3, r2
 8018900:	005b      	lsls	r3, r3, #1
 8018902:	4413      	add	r3, r2
 8018904:	00db      	lsls	r3, r3, #3
 8018906:	440b      	add	r3, r1
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801890c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018910:	4910      	ldr	r1, [pc, #64]	; (8018954 <etharp_update_arp_entry+0x148>)
 8018912:	4613      	mov	r3, r2
 8018914:	005b      	lsls	r3, r3, #1
 8018916:	4413      	add	r3, r2
 8018918:	00db      	lsls	r3, r3, #3
 801891a:	440b      	add	r3, r1
 801891c:	2200      	movs	r2, #0
 801891e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018920:	68fb      	ldr	r3, [r7, #12]
 8018922:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8018926:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801892a:	9300      	str	r3, [sp, #0]
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	6939      	ldr	r1, [r7, #16]
 8018930:	68f8      	ldr	r0, [r7, #12]
 8018932:	f001 ff97 	bl	801a864 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8018936:	6938      	ldr	r0, [r7, #16]
 8018938:	f7f8 fe46 	bl	80115c8 <pbuf_free>
  }
  return ERR_OK;
 801893c:	2300      	movs	r3, #0
}
 801893e:	4618      	mov	r0, r3
 8018940:	3718      	adds	r7, #24
 8018942:	46bd      	mov	sp, r7
 8018944:	bd80      	pop	{r7, pc}
 8018946:	bf00      	nop
 8018948:	0801f260 	.word	0x0801f260
 801894c:	0801f358 	.word	0x0801f358
 8018950:	0801f2d8 	.word	0x0801f2d8
 8018954:	200110e8 	.word	0x200110e8

08018958 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018958:	b580      	push	{r7, lr}
 801895a:	b084      	sub	sp, #16
 801895c:	af00      	add	r7, sp, #0
 801895e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018960:	2300      	movs	r3, #0
 8018962:	60fb      	str	r3, [r7, #12]
 8018964:	e01e      	b.n	80189a4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8018966:	4913      	ldr	r1, [pc, #76]	; (80189b4 <etharp_cleanup_netif+0x5c>)
 8018968:	68fa      	ldr	r2, [r7, #12]
 801896a:	4613      	mov	r3, r2
 801896c:	005b      	lsls	r3, r3, #1
 801896e:	4413      	add	r3, r2
 8018970:	00db      	lsls	r3, r3, #3
 8018972:	440b      	add	r3, r1
 8018974:	3314      	adds	r3, #20
 8018976:	781b      	ldrb	r3, [r3, #0]
 8018978:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801897a:	7afb      	ldrb	r3, [r7, #11]
 801897c:	2b00      	cmp	r3, #0
 801897e:	d00e      	beq.n	801899e <etharp_cleanup_netif+0x46>
 8018980:	490c      	ldr	r1, [pc, #48]	; (80189b4 <etharp_cleanup_netif+0x5c>)
 8018982:	68fa      	ldr	r2, [r7, #12]
 8018984:	4613      	mov	r3, r2
 8018986:	005b      	lsls	r3, r3, #1
 8018988:	4413      	add	r3, r2
 801898a:	00db      	lsls	r3, r3, #3
 801898c:	440b      	add	r3, r1
 801898e:	3308      	adds	r3, #8
 8018990:	681b      	ldr	r3, [r3, #0]
 8018992:	687a      	ldr	r2, [r7, #4]
 8018994:	429a      	cmp	r2, r3
 8018996:	d102      	bne.n	801899e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018998:	68f8      	ldr	r0, [r7, #12]
 801899a:	f7ff fce5 	bl	8018368 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801899e:	68fb      	ldr	r3, [r7, #12]
 80189a0:	3301      	adds	r3, #1
 80189a2:	60fb      	str	r3, [r7, #12]
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	2b09      	cmp	r3, #9
 80189a8:	dddd      	ble.n	8018966 <etharp_cleanup_netif+0xe>
    }
  }
}
 80189aa:	bf00      	nop
 80189ac:	bf00      	nop
 80189ae:	3710      	adds	r7, #16
 80189b0:	46bd      	mov	sp, r7
 80189b2:	bd80      	pop	{r7, pc}
 80189b4:	200110e8 	.word	0x200110e8

080189b8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80189b8:	b5b0      	push	{r4, r5, r7, lr}
 80189ba:	b08a      	sub	sp, #40	; 0x28
 80189bc:	af04      	add	r7, sp, #16
 80189be:	6078      	str	r0, [r7, #4]
 80189c0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80189c2:	683b      	ldr	r3, [r7, #0]
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d107      	bne.n	80189d8 <etharp_input+0x20>
 80189c8:	4b3d      	ldr	r3, [pc, #244]	; (8018ac0 <etharp_input+0x108>)
 80189ca:	f240 228a 	movw	r2, #650	; 0x28a
 80189ce:	493d      	ldr	r1, [pc, #244]	; (8018ac4 <etharp_input+0x10c>)
 80189d0:	483d      	ldr	r0, [pc, #244]	; (8018ac8 <etharp_input+0x110>)
 80189d2:	f002 f98f 	bl	801acf4 <iprintf>
 80189d6:	e06f      	b.n	8018ab8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	685b      	ldr	r3, [r3, #4]
 80189dc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80189de:	693b      	ldr	r3, [r7, #16]
 80189e0:	881b      	ldrh	r3, [r3, #0]
 80189e2:	b29b      	uxth	r3, r3
 80189e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80189e8:	d10c      	bne.n	8018a04 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80189ea:	693b      	ldr	r3, [r7, #16]
 80189ec:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80189ee:	2b06      	cmp	r3, #6
 80189f0:	d108      	bne.n	8018a04 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80189f2:	693b      	ldr	r3, [r7, #16]
 80189f4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80189f6:	2b04      	cmp	r3, #4
 80189f8:	d104      	bne.n	8018a04 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80189fa:	693b      	ldr	r3, [r7, #16]
 80189fc:	885b      	ldrh	r3, [r3, #2]
 80189fe:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018a00:	2b08      	cmp	r3, #8
 8018a02:	d003      	beq.n	8018a0c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8018a04:	6878      	ldr	r0, [r7, #4]
 8018a06:	f7f8 fddf 	bl	80115c8 <pbuf_free>
    return;
 8018a0a:	e055      	b.n	8018ab8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018a0c:	693b      	ldr	r3, [r7, #16]
 8018a0e:	330e      	adds	r3, #14
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8018a14:	693b      	ldr	r3, [r7, #16]
 8018a16:	3318      	adds	r3, #24
 8018a18:	681b      	ldr	r3, [r3, #0]
 8018a1a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018a1c:	683b      	ldr	r3, [r7, #0]
 8018a1e:	3304      	adds	r3, #4
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	d102      	bne.n	8018a2c <etharp_input+0x74>
    for_us = 0;
 8018a26:	2300      	movs	r3, #0
 8018a28:	75fb      	strb	r3, [r7, #23]
 8018a2a:	e009      	b.n	8018a40 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018a2c:	68ba      	ldr	r2, [r7, #8]
 8018a2e:	683b      	ldr	r3, [r7, #0]
 8018a30:	3304      	adds	r3, #4
 8018a32:	681b      	ldr	r3, [r3, #0]
 8018a34:	429a      	cmp	r2, r3
 8018a36:	bf0c      	ite	eq
 8018a38:	2301      	moveq	r3, #1
 8018a3a:	2300      	movne	r3, #0
 8018a3c:	b2db      	uxtb	r3, r3
 8018a3e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018a40:	693b      	ldr	r3, [r7, #16]
 8018a42:	f103 0208 	add.w	r2, r3, #8
 8018a46:	7dfb      	ldrb	r3, [r7, #23]
 8018a48:	2b00      	cmp	r3, #0
 8018a4a:	d001      	beq.n	8018a50 <etharp_input+0x98>
 8018a4c:	2301      	movs	r3, #1
 8018a4e:	e000      	b.n	8018a52 <etharp_input+0x9a>
 8018a50:	2302      	movs	r3, #2
 8018a52:	f107 010c 	add.w	r1, r7, #12
 8018a56:	6838      	ldr	r0, [r7, #0]
 8018a58:	f7ff fed8 	bl	801880c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018a5c:	693b      	ldr	r3, [r7, #16]
 8018a5e:	88db      	ldrh	r3, [r3, #6]
 8018a60:	b29b      	uxth	r3, r3
 8018a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018a66:	d003      	beq.n	8018a70 <etharp_input+0xb8>
 8018a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018a6c:	d01e      	beq.n	8018aac <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8018a6e:	e020      	b.n	8018ab2 <etharp_input+0xfa>
      if (for_us) {
 8018a70:	7dfb      	ldrb	r3, [r7, #23]
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d01c      	beq.n	8018ab0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8018a76:	683b      	ldr	r3, [r7, #0]
 8018a78:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8018a7c:	693b      	ldr	r3, [r7, #16]
 8018a7e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8018a82:	683b      	ldr	r3, [r7, #0]
 8018a84:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8018a88:	683b      	ldr	r3, [r7, #0]
 8018a8a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018a8c:	693a      	ldr	r2, [r7, #16]
 8018a8e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018a90:	2102      	movs	r1, #2
 8018a92:	9103      	str	r1, [sp, #12]
 8018a94:	f107 010c 	add.w	r1, r7, #12
 8018a98:	9102      	str	r1, [sp, #8]
 8018a9a:	9201      	str	r2, [sp, #4]
 8018a9c:	9300      	str	r3, [sp, #0]
 8018a9e:	462b      	mov	r3, r5
 8018aa0:	4622      	mov	r2, r4
 8018aa2:	4601      	mov	r1, r0
 8018aa4:	6838      	ldr	r0, [r7, #0]
 8018aa6:	f000 faeb 	bl	8019080 <etharp_raw>
      break;
 8018aaa:	e001      	b.n	8018ab0 <etharp_input+0xf8>
      break;
 8018aac:	bf00      	nop
 8018aae:	e000      	b.n	8018ab2 <etharp_input+0xfa>
      break;
 8018ab0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018ab2:	6878      	ldr	r0, [r7, #4]
 8018ab4:	f7f8 fd88 	bl	80115c8 <pbuf_free>
}
 8018ab8:	3718      	adds	r7, #24
 8018aba:	46bd      	mov	sp, r7
 8018abc:	bdb0      	pop	{r4, r5, r7, pc}
 8018abe:	bf00      	nop
 8018ac0:	0801f260 	.word	0x0801f260
 8018ac4:	0801f3b0 	.word	0x0801f3b0
 8018ac8:	0801f2d8 	.word	0x0801f2d8

08018acc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8018acc:	b580      	push	{r7, lr}
 8018ace:	b086      	sub	sp, #24
 8018ad0:	af02      	add	r7, sp, #8
 8018ad2:	60f8      	str	r0, [r7, #12]
 8018ad4:	60b9      	str	r1, [r7, #8]
 8018ad6:	4613      	mov	r3, r2
 8018ad8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8018ada:	79fa      	ldrb	r2, [r7, #7]
 8018adc:	4944      	ldr	r1, [pc, #272]	; (8018bf0 <etharp_output_to_arp_index+0x124>)
 8018ade:	4613      	mov	r3, r2
 8018ae0:	005b      	lsls	r3, r3, #1
 8018ae2:	4413      	add	r3, r2
 8018ae4:	00db      	lsls	r3, r3, #3
 8018ae6:	440b      	add	r3, r1
 8018ae8:	3314      	adds	r3, #20
 8018aea:	781b      	ldrb	r3, [r3, #0]
 8018aec:	2b01      	cmp	r3, #1
 8018aee:	d806      	bhi.n	8018afe <etharp_output_to_arp_index+0x32>
 8018af0:	4b40      	ldr	r3, [pc, #256]	; (8018bf4 <etharp_output_to_arp_index+0x128>)
 8018af2:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018af6:	4940      	ldr	r1, [pc, #256]	; (8018bf8 <etharp_output_to_arp_index+0x12c>)
 8018af8:	4840      	ldr	r0, [pc, #256]	; (8018bfc <etharp_output_to_arp_index+0x130>)
 8018afa:	f002 f8fb 	bl	801acf4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8018afe:	79fa      	ldrb	r2, [r7, #7]
 8018b00:	493b      	ldr	r1, [pc, #236]	; (8018bf0 <etharp_output_to_arp_index+0x124>)
 8018b02:	4613      	mov	r3, r2
 8018b04:	005b      	lsls	r3, r3, #1
 8018b06:	4413      	add	r3, r2
 8018b08:	00db      	lsls	r3, r3, #3
 8018b0a:	440b      	add	r3, r1
 8018b0c:	3314      	adds	r3, #20
 8018b0e:	781b      	ldrb	r3, [r3, #0]
 8018b10:	2b02      	cmp	r3, #2
 8018b12:	d153      	bne.n	8018bbc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8018b14:	79fa      	ldrb	r2, [r7, #7]
 8018b16:	4936      	ldr	r1, [pc, #216]	; (8018bf0 <etharp_output_to_arp_index+0x124>)
 8018b18:	4613      	mov	r3, r2
 8018b1a:	005b      	lsls	r3, r3, #1
 8018b1c:	4413      	add	r3, r2
 8018b1e:	00db      	lsls	r3, r3, #3
 8018b20:	440b      	add	r3, r1
 8018b22:	3312      	adds	r3, #18
 8018b24:	881b      	ldrh	r3, [r3, #0]
 8018b26:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8018b2a:	d919      	bls.n	8018b60 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018b2c:	79fa      	ldrb	r2, [r7, #7]
 8018b2e:	4613      	mov	r3, r2
 8018b30:	005b      	lsls	r3, r3, #1
 8018b32:	4413      	add	r3, r2
 8018b34:	00db      	lsls	r3, r3, #3
 8018b36:	4a2e      	ldr	r2, [pc, #184]	; (8018bf0 <etharp_output_to_arp_index+0x124>)
 8018b38:	4413      	add	r3, r2
 8018b3a:	3304      	adds	r3, #4
 8018b3c:	4619      	mov	r1, r3
 8018b3e:	68f8      	ldr	r0, [r7, #12]
 8018b40:	f000 fb4c 	bl	80191dc <etharp_request>
 8018b44:	4603      	mov	r3, r0
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d138      	bne.n	8018bbc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018b4a:	79fa      	ldrb	r2, [r7, #7]
 8018b4c:	4928      	ldr	r1, [pc, #160]	; (8018bf0 <etharp_output_to_arp_index+0x124>)
 8018b4e:	4613      	mov	r3, r2
 8018b50:	005b      	lsls	r3, r3, #1
 8018b52:	4413      	add	r3, r2
 8018b54:	00db      	lsls	r3, r3, #3
 8018b56:	440b      	add	r3, r1
 8018b58:	3314      	adds	r3, #20
 8018b5a:	2203      	movs	r2, #3
 8018b5c:	701a      	strb	r2, [r3, #0]
 8018b5e:	e02d      	b.n	8018bbc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018b60:	79fa      	ldrb	r2, [r7, #7]
 8018b62:	4923      	ldr	r1, [pc, #140]	; (8018bf0 <etharp_output_to_arp_index+0x124>)
 8018b64:	4613      	mov	r3, r2
 8018b66:	005b      	lsls	r3, r3, #1
 8018b68:	4413      	add	r3, r2
 8018b6a:	00db      	lsls	r3, r3, #3
 8018b6c:	440b      	add	r3, r1
 8018b6e:	3312      	adds	r3, #18
 8018b70:	881b      	ldrh	r3, [r3, #0]
 8018b72:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8018b76:	d321      	bcc.n	8018bbc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018b78:	79fa      	ldrb	r2, [r7, #7]
 8018b7a:	4613      	mov	r3, r2
 8018b7c:	005b      	lsls	r3, r3, #1
 8018b7e:	4413      	add	r3, r2
 8018b80:	00db      	lsls	r3, r3, #3
 8018b82:	4a1b      	ldr	r2, [pc, #108]	; (8018bf0 <etharp_output_to_arp_index+0x124>)
 8018b84:	4413      	add	r3, r2
 8018b86:	1d19      	adds	r1, r3, #4
 8018b88:	79fa      	ldrb	r2, [r7, #7]
 8018b8a:	4613      	mov	r3, r2
 8018b8c:	005b      	lsls	r3, r3, #1
 8018b8e:	4413      	add	r3, r2
 8018b90:	00db      	lsls	r3, r3, #3
 8018b92:	3308      	adds	r3, #8
 8018b94:	4a16      	ldr	r2, [pc, #88]	; (8018bf0 <etharp_output_to_arp_index+0x124>)
 8018b96:	4413      	add	r3, r2
 8018b98:	3304      	adds	r3, #4
 8018b9a:	461a      	mov	r2, r3
 8018b9c:	68f8      	ldr	r0, [r7, #12]
 8018b9e:	f000 fafb 	bl	8019198 <etharp_request_dst>
 8018ba2:	4603      	mov	r3, r0
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d109      	bne.n	8018bbc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018ba8:	79fa      	ldrb	r2, [r7, #7]
 8018baa:	4911      	ldr	r1, [pc, #68]	; (8018bf0 <etharp_output_to_arp_index+0x124>)
 8018bac:	4613      	mov	r3, r2
 8018bae:	005b      	lsls	r3, r3, #1
 8018bb0:	4413      	add	r3, r2
 8018bb2:	00db      	lsls	r3, r3, #3
 8018bb4:	440b      	add	r3, r1
 8018bb6:	3314      	adds	r3, #20
 8018bb8:	2203      	movs	r2, #3
 8018bba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8018bc2:	79fa      	ldrb	r2, [r7, #7]
 8018bc4:	4613      	mov	r3, r2
 8018bc6:	005b      	lsls	r3, r3, #1
 8018bc8:	4413      	add	r3, r2
 8018bca:	00db      	lsls	r3, r3, #3
 8018bcc:	3308      	adds	r3, #8
 8018bce:	4a08      	ldr	r2, [pc, #32]	; (8018bf0 <etharp_output_to_arp_index+0x124>)
 8018bd0:	4413      	add	r3, r2
 8018bd2:	3304      	adds	r3, #4
 8018bd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018bd8:	9200      	str	r2, [sp, #0]
 8018bda:	460a      	mov	r2, r1
 8018bdc:	68b9      	ldr	r1, [r7, #8]
 8018bde:	68f8      	ldr	r0, [r7, #12]
 8018be0:	f001 fe40 	bl	801a864 <ethernet_output>
 8018be4:	4603      	mov	r3, r0
}
 8018be6:	4618      	mov	r0, r3
 8018be8:	3710      	adds	r7, #16
 8018bea:	46bd      	mov	sp, r7
 8018bec:	bd80      	pop	{r7, pc}
 8018bee:	bf00      	nop
 8018bf0:	200110e8 	.word	0x200110e8
 8018bf4:	0801f260 	.word	0x0801f260
 8018bf8:	0801f3d0 	.word	0x0801f3d0
 8018bfc:	0801f2d8 	.word	0x0801f2d8

08018c00 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018c00:	b580      	push	{r7, lr}
 8018c02:	b08a      	sub	sp, #40	; 0x28
 8018c04:	af02      	add	r7, sp, #8
 8018c06:	60f8      	str	r0, [r7, #12]
 8018c08:	60b9      	str	r1, [r7, #8]
 8018c0a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	d106      	bne.n	8018c24 <etharp_output+0x24>
 8018c16:	4b73      	ldr	r3, [pc, #460]	; (8018de4 <etharp_output+0x1e4>)
 8018c18:	f240 321e 	movw	r2, #798	; 0x31e
 8018c1c:	4972      	ldr	r1, [pc, #456]	; (8018de8 <etharp_output+0x1e8>)
 8018c1e:	4873      	ldr	r0, [pc, #460]	; (8018dec <etharp_output+0x1ec>)
 8018c20:	f002 f868 	bl	801acf4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018c24:	68bb      	ldr	r3, [r7, #8]
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d106      	bne.n	8018c38 <etharp_output+0x38>
 8018c2a:	4b6e      	ldr	r3, [pc, #440]	; (8018de4 <etharp_output+0x1e4>)
 8018c2c:	f240 321f 	movw	r2, #799	; 0x31f
 8018c30:	496f      	ldr	r1, [pc, #444]	; (8018df0 <etharp_output+0x1f0>)
 8018c32:	486e      	ldr	r0, [pc, #440]	; (8018dec <etharp_output+0x1ec>)
 8018c34:	f002 f85e 	bl	801acf4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d106      	bne.n	8018c4c <etharp_output+0x4c>
 8018c3e:	4b69      	ldr	r3, [pc, #420]	; (8018de4 <etharp_output+0x1e4>)
 8018c40:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018c44:	496b      	ldr	r1, [pc, #428]	; (8018df4 <etharp_output+0x1f4>)
 8018c46:	4869      	ldr	r0, [pc, #420]	; (8018dec <etharp_output+0x1ec>)
 8018c48:	f002 f854 	bl	801acf4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	68f9      	ldr	r1, [r7, #12]
 8018c52:	4618      	mov	r0, r3
 8018c54:	f000 fef8 	bl	8019a48 <ip4_addr_isbroadcast_u32>
 8018c58:	4603      	mov	r3, r0
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d002      	beq.n	8018c64 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018c5e:	4b66      	ldr	r3, [pc, #408]	; (8018df8 <etharp_output+0x1f8>)
 8018c60:	61fb      	str	r3, [r7, #28]
 8018c62:	e0af      	b.n	8018dc4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018c6c:	2be0      	cmp	r3, #224	; 0xe0
 8018c6e:	d118      	bne.n	8018ca2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018c70:	2301      	movs	r3, #1
 8018c72:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018c74:	2300      	movs	r3, #0
 8018c76:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018c78:	235e      	movs	r3, #94	; 0x5e
 8018c7a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	3301      	adds	r3, #1
 8018c80:	781b      	ldrb	r3, [r3, #0]
 8018c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018c86:	b2db      	uxtb	r3, r3
 8018c88:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	3302      	adds	r3, #2
 8018c8e:	781b      	ldrb	r3, [r3, #0]
 8018c90:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	3303      	adds	r3, #3
 8018c96:	781b      	ldrb	r3, [r3, #0]
 8018c98:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018c9a:	f107 0310 	add.w	r3, r7, #16
 8018c9e:	61fb      	str	r3, [r7, #28]
 8018ca0:	e090      	b.n	8018dc4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	681a      	ldr	r2, [r3, #0]
 8018ca6:	68fb      	ldr	r3, [r7, #12]
 8018ca8:	3304      	adds	r3, #4
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	405a      	eors	r2, r3
 8018cae:	68fb      	ldr	r3, [r7, #12]
 8018cb0:	3308      	adds	r3, #8
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	4013      	ands	r3, r2
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	d012      	beq.n	8018ce0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	681b      	ldr	r3, [r3, #0]
 8018cbe:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018cc0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018cc4:	4293      	cmp	r3, r2
 8018cc6:	d00b      	beq.n	8018ce0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018cc8:	68fb      	ldr	r3, [r7, #12]
 8018cca:	330c      	adds	r3, #12
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d003      	beq.n	8018cda <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018cd2:	68fb      	ldr	r3, [r7, #12]
 8018cd4:	330c      	adds	r3, #12
 8018cd6:	61bb      	str	r3, [r7, #24]
 8018cd8:	e002      	b.n	8018ce0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018cda:	f06f 0303 	mvn.w	r3, #3
 8018cde:	e07d      	b.n	8018ddc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018ce0:	4b46      	ldr	r3, [pc, #280]	; (8018dfc <etharp_output+0x1fc>)
 8018ce2:	781b      	ldrb	r3, [r3, #0]
 8018ce4:	4619      	mov	r1, r3
 8018ce6:	4a46      	ldr	r2, [pc, #280]	; (8018e00 <etharp_output+0x200>)
 8018ce8:	460b      	mov	r3, r1
 8018cea:	005b      	lsls	r3, r3, #1
 8018cec:	440b      	add	r3, r1
 8018cee:	00db      	lsls	r3, r3, #3
 8018cf0:	4413      	add	r3, r2
 8018cf2:	3314      	adds	r3, #20
 8018cf4:	781b      	ldrb	r3, [r3, #0]
 8018cf6:	2b01      	cmp	r3, #1
 8018cf8:	d925      	bls.n	8018d46 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018cfa:	4b40      	ldr	r3, [pc, #256]	; (8018dfc <etharp_output+0x1fc>)
 8018cfc:	781b      	ldrb	r3, [r3, #0]
 8018cfe:	4619      	mov	r1, r3
 8018d00:	4a3f      	ldr	r2, [pc, #252]	; (8018e00 <etharp_output+0x200>)
 8018d02:	460b      	mov	r3, r1
 8018d04:	005b      	lsls	r3, r3, #1
 8018d06:	440b      	add	r3, r1
 8018d08:	00db      	lsls	r3, r3, #3
 8018d0a:	4413      	add	r3, r2
 8018d0c:	3308      	adds	r3, #8
 8018d0e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018d10:	68fa      	ldr	r2, [r7, #12]
 8018d12:	429a      	cmp	r2, r3
 8018d14:	d117      	bne.n	8018d46 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018d16:	69bb      	ldr	r3, [r7, #24]
 8018d18:	681a      	ldr	r2, [r3, #0]
 8018d1a:	4b38      	ldr	r3, [pc, #224]	; (8018dfc <etharp_output+0x1fc>)
 8018d1c:	781b      	ldrb	r3, [r3, #0]
 8018d1e:	4618      	mov	r0, r3
 8018d20:	4937      	ldr	r1, [pc, #220]	; (8018e00 <etharp_output+0x200>)
 8018d22:	4603      	mov	r3, r0
 8018d24:	005b      	lsls	r3, r3, #1
 8018d26:	4403      	add	r3, r0
 8018d28:	00db      	lsls	r3, r3, #3
 8018d2a:	440b      	add	r3, r1
 8018d2c:	3304      	adds	r3, #4
 8018d2e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018d30:	429a      	cmp	r2, r3
 8018d32:	d108      	bne.n	8018d46 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018d34:	4b31      	ldr	r3, [pc, #196]	; (8018dfc <etharp_output+0x1fc>)
 8018d36:	781b      	ldrb	r3, [r3, #0]
 8018d38:	461a      	mov	r2, r3
 8018d3a:	68b9      	ldr	r1, [r7, #8]
 8018d3c:	68f8      	ldr	r0, [r7, #12]
 8018d3e:	f7ff fec5 	bl	8018acc <etharp_output_to_arp_index>
 8018d42:	4603      	mov	r3, r0
 8018d44:	e04a      	b.n	8018ddc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018d46:	2300      	movs	r3, #0
 8018d48:	75fb      	strb	r3, [r7, #23]
 8018d4a:	e031      	b.n	8018db0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018d4c:	7dfa      	ldrb	r2, [r7, #23]
 8018d4e:	492c      	ldr	r1, [pc, #176]	; (8018e00 <etharp_output+0x200>)
 8018d50:	4613      	mov	r3, r2
 8018d52:	005b      	lsls	r3, r3, #1
 8018d54:	4413      	add	r3, r2
 8018d56:	00db      	lsls	r3, r3, #3
 8018d58:	440b      	add	r3, r1
 8018d5a:	3314      	adds	r3, #20
 8018d5c:	781b      	ldrb	r3, [r3, #0]
 8018d5e:	2b01      	cmp	r3, #1
 8018d60:	d923      	bls.n	8018daa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018d62:	7dfa      	ldrb	r2, [r7, #23]
 8018d64:	4926      	ldr	r1, [pc, #152]	; (8018e00 <etharp_output+0x200>)
 8018d66:	4613      	mov	r3, r2
 8018d68:	005b      	lsls	r3, r3, #1
 8018d6a:	4413      	add	r3, r2
 8018d6c:	00db      	lsls	r3, r3, #3
 8018d6e:	440b      	add	r3, r1
 8018d70:	3308      	adds	r3, #8
 8018d72:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018d74:	68fa      	ldr	r2, [r7, #12]
 8018d76:	429a      	cmp	r2, r3
 8018d78:	d117      	bne.n	8018daa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018d7a:	69bb      	ldr	r3, [r7, #24]
 8018d7c:	6819      	ldr	r1, [r3, #0]
 8018d7e:	7dfa      	ldrb	r2, [r7, #23]
 8018d80:	481f      	ldr	r0, [pc, #124]	; (8018e00 <etharp_output+0x200>)
 8018d82:	4613      	mov	r3, r2
 8018d84:	005b      	lsls	r3, r3, #1
 8018d86:	4413      	add	r3, r2
 8018d88:	00db      	lsls	r3, r3, #3
 8018d8a:	4403      	add	r3, r0
 8018d8c:	3304      	adds	r3, #4
 8018d8e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018d90:	4299      	cmp	r1, r3
 8018d92:	d10a      	bne.n	8018daa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018d94:	4a19      	ldr	r2, [pc, #100]	; (8018dfc <etharp_output+0x1fc>)
 8018d96:	7dfb      	ldrb	r3, [r7, #23]
 8018d98:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018d9a:	7dfb      	ldrb	r3, [r7, #23]
 8018d9c:	461a      	mov	r2, r3
 8018d9e:	68b9      	ldr	r1, [r7, #8]
 8018da0:	68f8      	ldr	r0, [r7, #12]
 8018da2:	f7ff fe93 	bl	8018acc <etharp_output_to_arp_index>
 8018da6:	4603      	mov	r3, r0
 8018da8:	e018      	b.n	8018ddc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018daa:	7dfb      	ldrb	r3, [r7, #23]
 8018dac:	3301      	adds	r3, #1
 8018dae:	75fb      	strb	r3, [r7, #23]
 8018db0:	7dfb      	ldrb	r3, [r7, #23]
 8018db2:	2b09      	cmp	r3, #9
 8018db4:	d9ca      	bls.n	8018d4c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018db6:	68ba      	ldr	r2, [r7, #8]
 8018db8:	69b9      	ldr	r1, [r7, #24]
 8018dba:	68f8      	ldr	r0, [r7, #12]
 8018dbc:	f000 f822 	bl	8018e04 <etharp_query>
 8018dc0:	4603      	mov	r3, r0
 8018dc2:	e00b      	b.n	8018ddc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018dc4:	68fb      	ldr	r3, [r7, #12]
 8018dc6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8018dca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018dce:	9300      	str	r3, [sp, #0]
 8018dd0:	69fb      	ldr	r3, [r7, #28]
 8018dd2:	68b9      	ldr	r1, [r7, #8]
 8018dd4:	68f8      	ldr	r0, [r7, #12]
 8018dd6:	f001 fd45 	bl	801a864 <ethernet_output>
 8018dda:	4603      	mov	r3, r0
}
 8018ddc:	4618      	mov	r0, r3
 8018dde:	3720      	adds	r7, #32
 8018de0:	46bd      	mov	sp, r7
 8018de2:	bd80      	pop	{r7, pc}
 8018de4:	0801f260 	.word	0x0801f260
 8018de8:	0801f3b0 	.word	0x0801f3b0
 8018dec:	0801f2d8 	.word	0x0801f2d8
 8018df0:	0801f400 	.word	0x0801f400
 8018df4:	0801f3a0 	.word	0x0801f3a0
 8018df8:	0801fb18 	.word	0x0801fb18
 8018dfc:	200111d8 	.word	0x200111d8
 8018e00:	200110e8 	.word	0x200110e8

08018e04 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018e04:	b580      	push	{r7, lr}
 8018e06:	b08c      	sub	sp, #48	; 0x30
 8018e08:	af02      	add	r7, sp, #8
 8018e0a:	60f8      	str	r0, [r7, #12]
 8018e0c:	60b9      	str	r1, [r7, #8]
 8018e0e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018e10:	68fb      	ldr	r3, [r7, #12]
 8018e12:	3326      	adds	r3, #38	; 0x26
 8018e14:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8018e16:	23ff      	movs	r3, #255	; 0xff
 8018e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018e1c:	2300      	movs	r3, #0
 8018e1e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018e20:	68bb      	ldr	r3, [r7, #8]
 8018e22:	681b      	ldr	r3, [r3, #0]
 8018e24:	68f9      	ldr	r1, [r7, #12]
 8018e26:	4618      	mov	r0, r3
 8018e28:	f000 fe0e 	bl	8019a48 <ip4_addr_isbroadcast_u32>
 8018e2c:	4603      	mov	r3, r0
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d10c      	bne.n	8018e4c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018e32:	68bb      	ldr	r3, [r7, #8]
 8018e34:	681b      	ldr	r3, [r3, #0]
 8018e36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018e3a:	2be0      	cmp	r3, #224	; 0xe0
 8018e3c:	d006      	beq.n	8018e4c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018e3e:	68bb      	ldr	r3, [r7, #8]
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	d003      	beq.n	8018e4c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018e44:	68bb      	ldr	r3, [r7, #8]
 8018e46:	681b      	ldr	r3, [r3, #0]
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d102      	bne.n	8018e52 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018e4c:	f06f 030f 	mvn.w	r3, #15
 8018e50:	e101      	b.n	8019056 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018e52:	68fa      	ldr	r2, [r7, #12]
 8018e54:	2101      	movs	r1, #1
 8018e56:	68b8      	ldr	r0, [r7, #8]
 8018e58:	f7ff fb60 	bl	801851c <etharp_find_entry>
 8018e5c:	4603      	mov	r3, r0
 8018e5e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018e60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	da02      	bge.n	8018e6e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8018e68:	8a7b      	ldrh	r3, [r7, #18]
 8018e6a:	b25b      	sxtb	r3, r3
 8018e6c:	e0f3      	b.n	8019056 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018e6e:	8a7b      	ldrh	r3, [r7, #18]
 8018e70:	2b7e      	cmp	r3, #126	; 0x7e
 8018e72:	d906      	bls.n	8018e82 <etharp_query+0x7e>
 8018e74:	4b7a      	ldr	r3, [pc, #488]	; (8019060 <etharp_query+0x25c>)
 8018e76:	f240 32c1 	movw	r2, #961	; 0x3c1
 8018e7a:	497a      	ldr	r1, [pc, #488]	; (8019064 <etharp_query+0x260>)
 8018e7c:	487a      	ldr	r0, [pc, #488]	; (8019068 <etharp_query+0x264>)
 8018e7e:	f001 ff39 	bl	801acf4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8018e82:	8a7b      	ldrh	r3, [r7, #18]
 8018e84:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018e86:	7c7a      	ldrb	r2, [r7, #17]
 8018e88:	4978      	ldr	r1, [pc, #480]	; (801906c <etharp_query+0x268>)
 8018e8a:	4613      	mov	r3, r2
 8018e8c:	005b      	lsls	r3, r3, #1
 8018e8e:	4413      	add	r3, r2
 8018e90:	00db      	lsls	r3, r3, #3
 8018e92:	440b      	add	r3, r1
 8018e94:	3314      	adds	r3, #20
 8018e96:	781b      	ldrb	r3, [r3, #0]
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	d115      	bne.n	8018ec8 <etharp_query+0xc4>
    is_new_entry = 1;
 8018e9c:	2301      	movs	r3, #1
 8018e9e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018ea0:	7c7a      	ldrb	r2, [r7, #17]
 8018ea2:	4972      	ldr	r1, [pc, #456]	; (801906c <etharp_query+0x268>)
 8018ea4:	4613      	mov	r3, r2
 8018ea6:	005b      	lsls	r3, r3, #1
 8018ea8:	4413      	add	r3, r2
 8018eaa:	00db      	lsls	r3, r3, #3
 8018eac:	440b      	add	r3, r1
 8018eae:	3314      	adds	r3, #20
 8018eb0:	2201      	movs	r2, #1
 8018eb2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018eb4:	7c7a      	ldrb	r2, [r7, #17]
 8018eb6:	496d      	ldr	r1, [pc, #436]	; (801906c <etharp_query+0x268>)
 8018eb8:	4613      	mov	r3, r2
 8018eba:	005b      	lsls	r3, r3, #1
 8018ebc:	4413      	add	r3, r2
 8018ebe:	00db      	lsls	r3, r3, #3
 8018ec0:	440b      	add	r3, r1
 8018ec2:	3308      	adds	r3, #8
 8018ec4:	68fa      	ldr	r2, [r7, #12]
 8018ec6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018ec8:	7c7a      	ldrb	r2, [r7, #17]
 8018eca:	4968      	ldr	r1, [pc, #416]	; (801906c <etharp_query+0x268>)
 8018ecc:	4613      	mov	r3, r2
 8018ece:	005b      	lsls	r3, r3, #1
 8018ed0:	4413      	add	r3, r2
 8018ed2:	00db      	lsls	r3, r3, #3
 8018ed4:	440b      	add	r3, r1
 8018ed6:	3314      	adds	r3, #20
 8018ed8:	781b      	ldrb	r3, [r3, #0]
 8018eda:	2b01      	cmp	r3, #1
 8018edc:	d011      	beq.n	8018f02 <etharp_query+0xfe>
 8018ede:	7c7a      	ldrb	r2, [r7, #17]
 8018ee0:	4962      	ldr	r1, [pc, #392]	; (801906c <etharp_query+0x268>)
 8018ee2:	4613      	mov	r3, r2
 8018ee4:	005b      	lsls	r3, r3, #1
 8018ee6:	4413      	add	r3, r2
 8018ee8:	00db      	lsls	r3, r3, #3
 8018eea:	440b      	add	r3, r1
 8018eec:	3314      	adds	r3, #20
 8018eee:	781b      	ldrb	r3, [r3, #0]
 8018ef0:	2b01      	cmp	r3, #1
 8018ef2:	d806      	bhi.n	8018f02 <etharp_query+0xfe>
 8018ef4:	4b5a      	ldr	r3, [pc, #360]	; (8019060 <etharp_query+0x25c>)
 8018ef6:	f240 32cd 	movw	r2, #973	; 0x3cd
 8018efa:	495d      	ldr	r1, [pc, #372]	; (8019070 <etharp_query+0x26c>)
 8018efc:	485a      	ldr	r0, [pc, #360]	; (8019068 <etharp_query+0x264>)
 8018efe:	f001 fef9 	bl	801acf4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018f02:	6a3b      	ldr	r3, [r7, #32]
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d102      	bne.n	8018f0e <etharp_query+0x10a>
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	d10c      	bne.n	8018f28 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018f0e:	68b9      	ldr	r1, [r7, #8]
 8018f10:	68f8      	ldr	r0, [r7, #12]
 8018f12:	f000 f963 	bl	80191dc <etharp_request>
 8018f16:	4603      	mov	r3, r0
 8018f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d102      	bne.n	8018f28 <etharp_query+0x124>
      return result;
 8018f22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018f26:	e096      	b.n	8019056 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	2b00      	cmp	r3, #0
 8018f2c:	d106      	bne.n	8018f3c <etharp_query+0x138>
 8018f2e:	4b4c      	ldr	r3, [pc, #304]	; (8019060 <etharp_query+0x25c>)
 8018f30:	f240 32e1 	movw	r2, #993	; 0x3e1
 8018f34:	494f      	ldr	r1, [pc, #316]	; (8019074 <etharp_query+0x270>)
 8018f36:	484c      	ldr	r0, [pc, #304]	; (8019068 <etharp_query+0x264>)
 8018f38:	f001 fedc 	bl	801acf4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018f3c:	7c7a      	ldrb	r2, [r7, #17]
 8018f3e:	494b      	ldr	r1, [pc, #300]	; (801906c <etharp_query+0x268>)
 8018f40:	4613      	mov	r3, r2
 8018f42:	005b      	lsls	r3, r3, #1
 8018f44:	4413      	add	r3, r2
 8018f46:	00db      	lsls	r3, r3, #3
 8018f48:	440b      	add	r3, r1
 8018f4a:	3314      	adds	r3, #20
 8018f4c:	781b      	ldrb	r3, [r3, #0]
 8018f4e:	2b01      	cmp	r3, #1
 8018f50:	d917      	bls.n	8018f82 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018f52:	4a49      	ldr	r2, [pc, #292]	; (8019078 <etharp_query+0x274>)
 8018f54:	7c7b      	ldrb	r3, [r7, #17]
 8018f56:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018f58:	7c7a      	ldrb	r2, [r7, #17]
 8018f5a:	4613      	mov	r3, r2
 8018f5c:	005b      	lsls	r3, r3, #1
 8018f5e:	4413      	add	r3, r2
 8018f60:	00db      	lsls	r3, r3, #3
 8018f62:	3308      	adds	r3, #8
 8018f64:	4a41      	ldr	r2, [pc, #260]	; (801906c <etharp_query+0x268>)
 8018f66:	4413      	add	r3, r2
 8018f68:	3304      	adds	r3, #4
 8018f6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018f6e:	9200      	str	r2, [sp, #0]
 8018f70:	697a      	ldr	r2, [r7, #20]
 8018f72:	6879      	ldr	r1, [r7, #4]
 8018f74:	68f8      	ldr	r0, [r7, #12]
 8018f76:	f001 fc75 	bl	801a864 <ethernet_output>
 8018f7a:	4603      	mov	r3, r0
 8018f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018f80:	e067      	b.n	8019052 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018f82:	7c7a      	ldrb	r2, [r7, #17]
 8018f84:	4939      	ldr	r1, [pc, #228]	; (801906c <etharp_query+0x268>)
 8018f86:	4613      	mov	r3, r2
 8018f88:	005b      	lsls	r3, r3, #1
 8018f8a:	4413      	add	r3, r2
 8018f8c:	00db      	lsls	r3, r3, #3
 8018f8e:	440b      	add	r3, r1
 8018f90:	3314      	adds	r3, #20
 8018f92:	781b      	ldrb	r3, [r3, #0]
 8018f94:	2b01      	cmp	r3, #1
 8018f96:	d15c      	bne.n	8019052 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018f98:	2300      	movs	r3, #0
 8018f9a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018fa0:	e01c      	b.n	8018fdc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018fa2:	69fb      	ldr	r3, [r7, #28]
 8018fa4:	895a      	ldrh	r2, [r3, #10]
 8018fa6:	69fb      	ldr	r3, [r7, #28]
 8018fa8:	891b      	ldrh	r3, [r3, #8]
 8018faa:	429a      	cmp	r2, r3
 8018fac:	d10a      	bne.n	8018fc4 <etharp_query+0x1c0>
 8018fae:	69fb      	ldr	r3, [r7, #28]
 8018fb0:	681b      	ldr	r3, [r3, #0]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d006      	beq.n	8018fc4 <etharp_query+0x1c0>
 8018fb6:	4b2a      	ldr	r3, [pc, #168]	; (8019060 <etharp_query+0x25c>)
 8018fb8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8018fbc:	492f      	ldr	r1, [pc, #188]	; (801907c <etharp_query+0x278>)
 8018fbe:	482a      	ldr	r0, [pc, #168]	; (8019068 <etharp_query+0x264>)
 8018fc0:	f001 fe98 	bl	801acf4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8018fc4:	69fb      	ldr	r3, [r7, #28]
 8018fc6:	7b1b      	ldrb	r3, [r3, #12]
 8018fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d002      	beq.n	8018fd6 <etharp_query+0x1d2>
        copy_needed = 1;
 8018fd0:	2301      	movs	r3, #1
 8018fd2:	61bb      	str	r3, [r7, #24]
        break;
 8018fd4:	e005      	b.n	8018fe2 <etharp_query+0x1de>
      }
      p = p->next;
 8018fd6:	69fb      	ldr	r3, [r7, #28]
 8018fd8:	681b      	ldr	r3, [r3, #0]
 8018fda:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018fdc:	69fb      	ldr	r3, [r7, #28]
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	d1df      	bne.n	8018fa2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8018fe2:	69bb      	ldr	r3, [r7, #24]
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d007      	beq.n	8018ff8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8018fe8:	687a      	ldr	r2, [r7, #4]
 8018fea:	f44f 7120 	mov.w	r1, #640	; 0x280
 8018fee:	200e      	movs	r0, #14
 8018ff0:	f7f8 fd52 	bl	8011a98 <pbuf_clone>
 8018ff4:	61f8      	str	r0, [r7, #28]
 8018ff6:	e004      	b.n	8019002 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018ffc:	69f8      	ldr	r0, [r7, #28]
 8018ffe:	f7f8 fb89 	bl	8011714 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8019002:	69fb      	ldr	r3, [r7, #28]
 8019004:	2b00      	cmp	r3, #0
 8019006:	d021      	beq.n	801904c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8019008:	7c7a      	ldrb	r2, [r7, #17]
 801900a:	4918      	ldr	r1, [pc, #96]	; (801906c <etharp_query+0x268>)
 801900c:	4613      	mov	r3, r2
 801900e:	005b      	lsls	r3, r3, #1
 8019010:	4413      	add	r3, r2
 8019012:	00db      	lsls	r3, r3, #3
 8019014:	440b      	add	r3, r1
 8019016:	681b      	ldr	r3, [r3, #0]
 8019018:	2b00      	cmp	r3, #0
 801901a:	d00a      	beq.n	8019032 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801901c:	7c7a      	ldrb	r2, [r7, #17]
 801901e:	4913      	ldr	r1, [pc, #76]	; (801906c <etharp_query+0x268>)
 8019020:	4613      	mov	r3, r2
 8019022:	005b      	lsls	r3, r3, #1
 8019024:	4413      	add	r3, r2
 8019026:	00db      	lsls	r3, r3, #3
 8019028:	440b      	add	r3, r1
 801902a:	681b      	ldr	r3, [r3, #0]
 801902c:	4618      	mov	r0, r3
 801902e:	f7f8 facb 	bl	80115c8 <pbuf_free>
      }
      arp_table[i].q = p;
 8019032:	7c7a      	ldrb	r2, [r7, #17]
 8019034:	490d      	ldr	r1, [pc, #52]	; (801906c <etharp_query+0x268>)
 8019036:	4613      	mov	r3, r2
 8019038:	005b      	lsls	r3, r3, #1
 801903a:	4413      	add	r3, r2
 801903c:	00db      	lsls	r3, r3, #3
 801903e:	440b      	add	r3, r1
 8019040:	69fa      	ldr	r2, [r7, #28]
 8019042:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8019044:	2300      	movs	r3, #0
 8019046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801904a:	e002      	b.n	8019052 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801904c:	23ff      	movs	r3, #255	; 0xff
 801904e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8019052:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8019056:	4618      	mov	r0, r3
 8019058:	3728      	adds	r7, #40	; 0x28
 801905a:	46bd      	mov	sp, r7
 801905c:	bd80      	pop	{r7, pc}
 801905e:	bf00      	nop
 8019060:	0801f260 	.word	0x0801f260
 8019064:	0801f40c 	.word	0x0801f40c
 8019068:	0801f2d8 	.word	0x0801f2d8
 801906c:	200110e8 	.word	0x200110e8
 8019070:	0801f41c 	.word	0x0801f41c
 8019074:	0801f400 	.word	0x0801f400
 8019078:	200111d8 	.word	0x200111d8
 801907c:	0801f444 	.word	0x0801f444

08019080 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8019080:	b580      	push	{r7, lr}
 8019082:	b08a      	sub	sp, #40	; 0x28
 8019084:	af02      	add	r7, sp, #8
 8019086:	60f8      	str	r0, [r7, #12]
 8019088:	60b9      	str	r1, [r7, #8]
 801908a:	607a      	str	r2, [r7, #4]
 801908c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801908e:	2300      	movs	r3, #0
 8019090:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019092:	68fb      	ldr	r3, [r7, #12]
 8019094:	2b00      	cmp	r3, #0
 8019096:	d106      	bne.n	80190a6 <etharp_raw+0x26>
 8019098:	4b3a      	ldr	r3, [pc, #232]	; (8019184 <etharp_raw+0x104>)
 801909a:	f240 4257 	movw	r2, #1111	; 0x457
 801909e:	493a      	ldr	r1, [pc, #232]	; (8019188 <etharp_raw+0x108>)
 80190a0:	483a      	ldr	r0, [pc, #232]	; (801918c <etharp_raw+0x10c>)
 80190a2:	f001 fe27 	bl	801acf4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80190a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80190aa:	211c      	movs	r1, #28
 80190ac:	200e      	movs	r0, #14
 80190ae:	f7f7 ff75 	bl	8010f9c <pbuf_alloc>
 80190b2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80190b4:	69bb      	ldr	r3, [r7, #24]
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	d102      	bne.n	80190c0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80190ba:	f04f 33ff 	mov.w	r3, #4294967295
 80190be:	e05d      	b.n	801917c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80190c0:	69bb      	ldr	r3, [r7, #24]
 80190c2:	895b      	ldrh	r3, [r3, #10]
 80190c4:	2b1b      	cmp	r3, #27
 80190c6:	d806      	bhi.n	80190d6 <etharp_raw+0x56>
 80190c8:	4b2e      	ldr	r3, [pc, #184]	; (8019184 <etharp_raw+0x104>)
 80190ca:	f240 4262 	movw	r2, #1122	; 0x462
 80190ce:	4930      	ldr	r1, [pc, #192]	; (8019190 <etharp_raw+0x110>)
 80190d0:	482e      	ldr	r0, [pc, #184]	; (801918c <etharp_raw+0x10c>)
 80190d2:	f001 fe0f 	bl	801acf4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80190d6:	69bb      	ldr	r3, [r7, #24]
 80190d8:	685b      	ldr	r3, [r3, #4]
 80190da:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80190dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80190de:	4618      	mov	r0, r3
 80190e0:	f7f6 fe4e 	bl	800fd80 <lwip_htons>
 80190e4:	4603      	mov	r3, r0
 80190e6:	461a      	mov	r2, r3
 80190e8:	697b      	ldr	r3, [r7, #20]
 80190ea:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80190ec:	68fb      	ldr	r3, [r7, #12]
 80190ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80190f2:	2b06      	cmp	r3, #6
 80190f4:	d006      	beq.n	8019104 <etharp_raw+0x84>
 80190f6:	4b23      	ldr	r3, [pc, #140]	; (8019184 <etharp_raw+0x104>)
 80190f8:	f240 4269 	movw	r2, #1129	; 0x469
 80190fc:	4925      	ldr	r1, [pc, #148]	; (8019194 <etharp_raw+0x114>)
 80190fe:	4823      	ldr	r0, [pc, #140]	; (801918c <etharp_raw+0x10c>)
 8019100:	f001 fdf8 	bl	801acf4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8019104:	697b      	ldr	r3, [r7, #20]
 8019106:	3308      	adds	r3, #8
 8019108:	2206      	movs	r2, #6
 801910a:	6839      	ldr	r1, [r7, #0]
 801910c:	4618      	mov	r0, r3
 801910e:	f001 fddb 	bl	801acc8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8019112:	697b      	ldr	r3, [r7, #20]
 8019114:	3312      	adds	r3, #18
 8019116:	2206      	movs	r2, #6
 8019118:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801911a:	4618      	mov	r0, r3
 801911c:	f001 fdd4 	bl	801acc8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8019120:	697b      	ldr	r3, [r7, #20]
 8019122:	330e      	adds	r3, #14
 8019124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019126:	6812      	ldr	r2, [r2, #0]
 8019128:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801912a:	697b      	ldr	r3, [r7, #20]
 801912c:	3318      	adds	r3, #24
 801912e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019130:	6812      	ldr	r2, [r2, #0]
 8019132:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8019134:	697b      	ldr	r3, [r7, #20]
 8019136:	2200      	movs	r2, #0
 8019138:	701a      	strb	r2, [r3, #0]
 801913a:	2200      	movs	r2, #0
 801913c:	f042 0201 	orr.w	r2, r2, #1
 8019140:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8019142:	697b      	ldr	r3, [r7, #20]
 8019144:	2200      	movs	r2, #0
 8019146:	f042 0208 	orr.w	r2, r2, #8
 801914a:	709a      	strb	r2, [r3, #2]
 801914c:	2200      	movs	r2, #0
 801914e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8019150:	697b      	ldr	r3, [r7, #20]
 8019152:	2206      	movs	r2, #6
 8019154:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8019156:	697b      	ldr	r3, [r7, #20]
 8019158:	2204      	movs	r2, #4
 801915a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801915c:	f640 0306 	movw	r3, #2054	; 0x806
 8019160:	9300      	str	r3, [sp, #0]
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	68ba      	ldr	r2, [r7, #8]
 8019166:	69b9      	ldr	r1, [r7, #24]
 8019168:	68f8      	ldr	r0, [r7, #12]
 801916a:	f001 fb7b 	bl	801a864 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801916e:	69b8      	ldr	r0, [r7, #24]
 8019170:	f7f8 fa2a 	bl	80115c8 <pbuf_free>
  p = NULL;
 8019174:	2300      	movs	r3, #0
 8019176:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8019178:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801917c:	4618      	mov	r0, r3
 801917e:	3720      	adds	r7, #32
 8019180:	46bd      	mov	sp, r7
 8019182:	bd80      	pop	{r7, pc}
 8019184:	0801f260 	.word	0x0801f260
 8019188:	0801f3b0 	.word	0x0801f3b0
 801918c:	0801f2d8 	.word	0x0801f2d8
 8019190:	0801f460 	.word	0x0801f460
 8019194:	0801f494 	.word	0x0801f494

08019198 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8019198:	b580      	push	{r7, lr}
 801919a:	b088      	sub	sp, #32
 801919c:	af04      	add	r7, sp, #16
 801919e:	60f8      	str	r0, [r7, #12]
 80191a0:	60b9      	str	r1, [r7, #8]
 80191a2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80191a4:	68fb      	ldr	r3, [r7, #12]
 80191a6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80191aa:	68fb      	ldr	r3, [r7, #12]
 80191ac:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80191b0:	68fb      	ldr	r3, [r7, #12]
 80191b2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80191b4:	2201      	movs	r2, #1
 80191b6:	9203      	str	r2, [sp, #12]
 80191b8:	68ba      	ldr	r2, [r7, #8]
 80191ba:	9202      	str	r2, [sp, #8]
 80191bc:	4a06      	ldr	r2, [pc, #24]	; (80191d8 <etharp_request_dst+0x40>)
 80191be:	9201      	str	r2, [sp, #4]
 80191c0:	9300      	str	r3, [sp, #0]
 80191c2:	4603      	mov	r3, r0
 80191c4:	687a      	ldr	r2, [r7, #4]
 80191c6:	68f8      	ldr	r0, [r7, #12]
 80191c8:	f7ff ff5a 	bl	8019080 <etharp_raw>
 80191cc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80191ce:	4618      	mov	r0, r3
 80191d0:	3710      	adds	r7, #16
 80191d2:	46bd      	mov	sp, r7
 80191d4:	bd80      	pop	{r7, pc}
 80191d6:	bf00      	nop
 80191d8:	0801fb20 	.word	0x0801fb20

080191dc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80191dc:	b580      	push	{r7, lr}
 80191de:	b082      	sub	sp, #8
 80191e0:	af00      	add	r7, sp, #0
 80191e2:	6078      	str	r0, [r7, #4]
 80191e4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80191e6:	4a05      	ldr	r2, [pc, #20]	; (80191fc <etharp_request+0x20>)
 80191e8:	6839      	ldr	r1, [r7, #0]
 80191ea:	6878      	ldr	r0, [r7, #4]
 80191ec:	f7ff ffd4 	bl	8019198 <etharp_request_dst>
 80191f0:	4603      	mov	r3, r0
}
 80191f2:	4618      	mov	r0, r3
 80191f4:	3708      	adds	r7, #8
 80191f6:	46bd      	mov	sp, r7
 80191f8:	bd80      	pop	{r7, pc}
 80191fa:	bf00      	nop
 80191fc:	0801fb18 	.word	0x0801fb18

08019200 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8019200:	b580      	push	{r7, lr}
 8019202:	b08e      	sub	sp, #56	; 0x38
 8019204:	af04      	add	r7, sp, #16
 8019206:	6078      	str	r0, [r7, #4]
 8019208:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801920a:	4b79      	ldr	r3, [pc, #484]	; (80193f0 <icmp_input+0x1f0>)
 801920c:	689b      	ldr	r3, [r3, #8]
 801920e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8019210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019212:	781b      	ldrb	r3, [r3, #0]
 8019214:	f003 030f 	and.w	r3, r3, #15
 8019218:	b2db      	uxtb	r3, r3
 801921a:	009b      	lsls	r3, r3, #2
 801921c:	b2db      	uxtb	r3, r3
 801921e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8019220:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019222:	2b13      	cmp	r3, #19
 8019224:	f240 80cd 	bls.w	80193c2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	895b      	ldrh	r3, [r3, #10]
 801922c:	2b03      	cmp	r3, #3
 801922e:	f240 80ca 	bls.w	80193c6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	685b      	ldr	r3, [r3, #4]
 8019236:	781b      	ldrb	r3, [r3, #0]
 8019238:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801923c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019240:	2b00      	cmp	r3, #0
 8019242:	f000 80b7 	beq.w	80193b4 <icmp_input+0x1b4>
 8019246:	2b08      	cmp	r3, #8
 8019248:	f040 80b7 	bne.w	80193ba <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801924c:	4b69      	ldr	r3, [pc, #420]	; (80193f4 <icmp_input+0x1f4>)
 801924e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019250:	4b67      	ldr	r3, [pc, #412]	; (80193f0 <icmp_input+0x1f0>)
 8019252:	695b      	ldr	r3, [r3, #20]
 8019254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019258:	2be0      	cmp	r3, #224	; 0xe0
 801925a:	f000 80bb 	beq.w	80193d4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801925e:	4b64      	ldr	r3, [pc, #400]	; (80193f0 <icmp_input+0x1f0>)
 8019260:	695b      	ldr	r3, [r3, #20]
 8019262:	4a63      	ldr	r2, [pc, #396]	; (80193f0 <icmp_input+0x1f0>)
 8019264:	6812      	ldr	r2, [r2, #0]
 8019266:	4611      	mov	r1, r2
 8019268:	4618      	mov	r0, r3
 801926a:	f000 fbed 	bl	8019a48 <ip4_addr_isbroadcast_u32>
 801926e:	4603      	mov	r3, r0
 8019270:	2b00      	cmp	r3, #0
 8019272:	f040 80b1 	bne.w	80193d8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	891b      	ldrh	r3, [r3, #8]
 801927a:	2b07      	cmp	r3, #7
 801927c:	f240 80a5 	bls.w	80193ca <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019280:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019282:	330e      	adds	r3, #14
 8019284:	4619      	mov	r1, r3
 8019286:	6878      	ldr	r0, [r7, #4]
 8019288:	f7f8 f8d6 	bl	8011438 <pbuf_add_header>
 801928c:	4603      	mov	r3, r0
 801928e:	2b00      	cmp	r3, #0
 8019290:	d04b      	beq.n	801932a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	891a      	ldrh	r2, [r3, #8]
 8019296:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019298:	4413      	add	r3, r2
 801929a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	891b      	ldrh	r3, [r3, #8]
 80192a0:	8b7a      	ldrh	r2, [r7, #26]
 80192a2:	429a      	cmp	r2, r3
 80192a4:	f0c0 809a 	bcc.w	80193dc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80192a8:	8b7b      	ldrh	r3, [r7, #26]
 80192aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80192ae:	4619      	mov	r1, r3
 80192b0:	200e      	movs	r0, #14
 80192b2:	f7f7 fe73 	bl	8010f9c <pbuf_alloc>
 80192b6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80192b8:	697b      	ldr	r3, [r7, #20]
 80192ba:	2b00      	cmp	r3, #0
 80192bc:	f000 8090 	beq.w	80193e0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80192c0:	697b      	ldr	r3, [r7, #20]
 80192c2:	895b      	ldrh	r3, [r3, #10]
 80192c4:	461a      	mov	r2, r3
 80192c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80192c8:	3308      	adds	r3, #8
 80192ca:	429a      	cmp	r2, r3
 80192cc:	d203      	bcs.n	80192d6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80192ce:	6978      	ldr	r0, [r7, #20]
 80192d0:	f7f8 f97a 	bl	80115c8 <pbuf_free>
          goto icmperr;
 80192d4:	e085      	b.n	80193e2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80192d6:	697b      	ldr	r3, [r7, #20]
 80192d8:	685b      	ldr	r3, [r3, #4]
 80192da:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80192dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80192de:	4618      	mov	r0, r3
 80192e0:	f001 fcf2 	bl	801acc8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80192e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80192e6:	4619      	mov	r1, r3
 80192e8:	6978      	ldr	r0, [r7, #20]
 80192ea:	f7f8 f8b5 	bl	8011458 <pbuf_remove_header>
 80192ee:	4603      	mov	r3, r0
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	d009      	beq.n	8019308 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80192f4:	4b40      	ldr	r3, [pc, #256]	; (80193f8 <icmp_input+0x1f8>)
 80192f6:	22b6      	movs	r2, #182	; 0xb6
 80192f8:	4940      	ldr	r1, [pc, #256]	; (80193fc <icmp_input+0x1fc>)
 80192fa:	4841      	ldr	r0, [pc, #260]	; (8019400 <icmp_input+0x200>)
 80192fc:	f001 fcfa 	bl	801acf4 <iprintf>
          pbuf_free(r);
 8019300:	6978      	ldr	r0, [r7, #20]
 8019302:	f7f8 f961 	bl	80115c8 <pbuf_free>
          goto icmperr;
 8019306:	e06c      	b.n	80193e2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019308:	6879      	ldr	r1, [r7, #4]
 801930a:	6978      	ldr	r0, [r7, #20]
 801930c:	f7f8 fa80 	bl	8011810 <pbuf_copy>
 8019310:	4603      	mov	r3, r0
 8019312:	2b00      	cmp	r3, #0
 8019314:	d003      	beq.n	801931e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8019316:	6978      	ldr	r0, [r7, #20]
 8019318:	f7f8 f956 	bl	80115c8 <pbuf_free>
          goto icmperr;
 801931c:	e061      	b.n	80193e2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801931e:	6878      	ldr	r0, [r7, #4]
 8019320:	f7f8 f952 	bl	80115c8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019324:	697b      	ldr	r3, [r7, #20]
 8019326:	607b      	str	r3, [r7, #4]
 8019328:	e00f      	b.n	801934a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801932a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801932c:	330e      	adds	r3, #14
 801932e:	4619      	mov	r1, r3
 8019330:	6878      	ldr	r0, [r7, #4]
 8019332:	f7f8 f891 	bl	8011458 <pbuf_remove_header>
 8019336:	4603      	mov	r3, r0
 8019338:	2b00      	cmp	r3, #0
 801933a:	d006      	beq.n	801934a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801933c:	4b2e      	ldr	r3, [pc, #184]	; (80193f8 <icmp_input+0x1f8>)
 801933e:	22c7      	movs	r2, #199	; 0xc7
 8019340:	4930      	ldr	r1, [pc, #192]	; (8019404 <icmp_input+0x204>)
 8019342:	482f      	ldr	r0, [pc, #188]	; (8019400 <icmp_input+0x200>)
 8019344:	f001 fcd6 	bl	801acf4 <iprintf>
          goto icmperr;
 8019348:	e04b      	b.n	80193e2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	685b      	ldr	r3, [r3, #4]
 801934e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8019350:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019352:	4619      	mov	r1, r3
 8019354:	6878      	ldr	r0, [r7, #4]
 8019356:	f7f8 f86f 	bl	8011438 <pbuf_add_header>
 801935a:	4603      	mov	r3, r0
 801935c:	2b00      	cmp	r3, #0
 801935e:	d12b      	bne.n	80193b8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	685b      	ldr	r3, [r3, #4]
 8019364:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8019366:	69fb      	ldr	r3, [r7, #28]
 8019368:	681a      	ldr	r2, [r3, #0]
 801936a:	68fb      	ldr	r3, [r7, #12]
 801936c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801936e:	4b20      	ldr	r3, [pc, #128]	; (80193f0 <icmp_input+0x1f0>)
 8019370:	691a      	ldr	r2, [r3, #16]
 8019372:	68fb      	ldr	r3, [r7, #12]
 8019374:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8019376:	693b      	ldr	r3, [r7, #16]
 8019378:	2200      	movs	r2, #0
 801937a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801937c:	693b      	ldr	r3, [r7, #16]
 801937e:	2200      	movs	r2, #0
 8019380:	709a      	strb	r2, [r3, #2]
 8019382:	2200      	movs	r2, #0
 8019384:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8019386:	68fb      	ldr	r3, [r7, #12]
 8019388:	22ff      	movs	r2, #255	; 0xff
 801938a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801938c:	68fb      	ldr	r3, [r7, #12]
 801938e:	2200      	movs	r2, #0
 8019390:	729a      	strb	r2, [r3, #10]
 8019392:	2200      	movs	r2, #0
 8019394:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019396:	683b      	ldr	r3, [r7, #0]
 8019398:	9302      	str	r3, [sp, #8]
 801939a:	2301      	movs	r3, #1
 801939c:	9301      	str	r3, [sp, #4]
 801939e:	2300      	movs	r3, #0
 80193a0:	9300      	str	r3, [sp, #0]
 80193a2:	23ff      	movs	r3, #255	; 0xff
 80193a4:	2200      	movs	r2, #0
 80193a6:	69f9      	ldr	r1, [r7, #28]
 80193a8:	6878      	ldr	r0, [r7, #4]
 80193aa:	f000 fa75 	bl	8019898 <ip4_output_if>
 80193ae:	4603      	mov	r3, r0
 80193b0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80193b2:	e001      	b.n	80193b8 <icmp_input+0x1b8>
      break;
 80193b4:	bf00      	nop
 80193b6:	e000      	b.n	80193ba <icmp_input+0x1ba>
      break;
 80193b8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80193ba:	6878      	ldr	r0, [r7, #4]
 80193bc:	f7f8 f904 	bl	80115c8 <pbuf_free>
  return;
 80193c0:	e013      	b.n	80193ea <icmp_input+0x1ea>
    goto lenerr;
 80193c2:	bf00      	nop
 80193c4:	e002      	b.n	80193cc <icmp_input+0x1cc>
    goto lenerr;
 80193c6:	bf00      	nop
 80193c8:	e000      	b.n	80193cc <icmp_input+0x1cc>
        goto lenerr;
 80193ca:	bf00      	nop
lenerr:
  pbuf_free(p);
 80193cc:	6878      	ldr	r0, [r7, #4]
 80193ce:	f7f8 f8fb 	bl	80115c8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80193d2:	e00a      	b.n	80193ea <icmp_input+0x1ea>
        goto icmperr;
 80193d4:	bf00      	nop
 80193d6:	e004      	b.n	80193e2 <icmp_input+0x1e2>
        goto icmperr;
 80193d8:	bf00      	nop
 80193da:	e002      	b.n	80193e2 <icmp_input+0x1e2>
          goto icmperr;
 80193dc:	bf00      	nop
 80193de:	e000      	b.n	80193e2 <icmp_input+0x1e2>
          goto icmperr;
 80193e0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80193e2:	6878      	ldr	r0, [r7, #4]
 80193e4:	f7f8 f8f0 	bl	80115c8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80193e8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80193ea:	3728      	adds	r7, #40	; 0x28
 80193ec:	46bd      	mov	sp, r7
 80193ee:	bd80      	pop	{r7, pc}
 80193f0:	2000d934 	.word	0x2000d934
 80193f4:	2000d948 	.word	0x2000d948
 80193f8:	0801f4d8 	.word	0x0801f4d8
 80193fc:	0801f510 	.word	0x0801f510
 8019400:	0801f548 	.word	0x0801f548
 8019404:	0801f570 	.word	0x0801f570

08019408 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019408:	b580      	push	{r7, lr}
 801940a:	b082      	sub	sp, #8
 801940c:	af00      	add	r7, sp, #0
 801940e:	6078      	str	r0, [r7, #4]
 8019410:	460b      	mov	r3, r1
 8019412:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8019414:	78fb      	ldrb	r3, [r7, #3]
 8019416:	461a      	mov	r2, r3
 8019418:	2103      	movs	r1, #3
 801941a:	6878      	ldr	r0, [r7, #4]
 801941c:	f000 f814 	bl	8019448 <icmp_send_response>
}
 8019420:	bf00      	nop
 8019422:	3708      	adds	r7, #8
 8019424:	46bd      	mov	sp, r7
 8019426:	bd80      	pop	{r7, pc}

08019428 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019428:	b580      	push	{r7, lr}
 801942a:	b082      	sub	sp, #8
 801942c:	af00      	add	r7, sp, #0
 801942e:	6078      	str	r0, [r7, #4]
 8019430:	460b      	mov	r3, r1
 8019432:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8019434:	78fb      	ldrb	r3, [r7, #3]
 8019436:	461a      	mov	r2, r3
 8019438:	210b      	movs	r1, #11
 801943a:	6878      	ldr	r0, [r7, #4]
 801943c:	f000 f804 	bl	8019448 <icmp_send_response>
}
 8019440:	bf00      	nop
 8019442:	3708      	adds	r7, #8
 8019444:	46bd      	mov	sp, r7
 8019446:	bd80      	pop	{r7, pc}

08019448 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019448:	b580      	push	{r7, lr}
 801944a:	b08c      	sub	sp, #48	; 0x30
 801944c:	af04      	add	r7, sp, #16
 801944e:	6078      	str	r0, [r7, #4]
 8019450:	460b      	mov	r3, r1
 8019452:	70fb      	strb	r3, [r7, #3]
 8019454:	4613      	mov	r3, r2
 8019456:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019458:	f44f 7220 	mov.w	r2, #640	; 0x280
 801945c:	2124      	movs	r1, #36	; 0x24
 801945e:	2022      	movs	r0, #34	; 0x22
 8019460:	f7f7 fd9c 	bl	8010f9c <pbuf_alloc>
 8019464:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8019466:	69fb      	ldr	r3, [r7, #28]
 8019468:	2b00      	cmp	r3, #0
 801946a:	d04c      	beq.n	8019506 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801946c:	69fb      	ldr	r3, [r7, #28]
 801946e:	895b      	ldrh	r3, [r3, #10]
 8019470:	2b23      	cmp	r3, #35	; 0x23
 8019472:	d806      	bhi.n	8019482 <icmp_send_response+0x3a>
 8019474:	4b26      	ldr	r3, [pc, #152]	; (8019510 <icmp_send_response+0xc8>)
 8019476:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801947a:	4926      	ldr	r1, [pc, #152]	; (8019514 <icmp_send_response+0xcc>)
 801947c:	4826      	ldr	r0, [pc, #152]	; (8019518 <icmp_send_response+0xd0>)
 801947e:	f001 fc39 	bl	801acf4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	685b      	ldr	r3, [r3, #4]
 8019486:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019488:	69fb      	ldr	r3, [r7, #28]
 801948a:	685b      	ldr	r3, [r3, #4]
 801948c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801948e:	697b      	ldr	r3, [r7, #20]
 8019490:	78fa      	ldrb	r2, [r7, #3]
 8019492:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019494:	697b      	ldr	r3, [r7, #20]
 8019496:	78ba      	ldrb	r2, [r7, #2]
 8019498:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801949a:	697b      	ldr	r3, [r7, #20]
 801949c:	2200      	movs	r2, #0
 801949e:	711a      	strb	r2, [r3, #4]
 80194a0:	2200      	movs	r2, #0
 80194a2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80194a4:	697b      	ldr	r3, [r7, #20]
 80194a6:	2200      	movs	r2, #0
 80194a8:	719a      	strb	r2, [r3, #6]
 80194aa:	2200      	movs	r2, #0
 80194ac:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80194ae:	69fb      	ldr	r3, [r7, #28]
 80194b0:	685b      	ldr	r3, [r3, #4]
 80194b2:	f103 0008 	add.w	r0, r3, #8
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	685b      	ldr	r3, [r3, #4]
 80194ba:	221c      	movs	r2, #28
 80194bc:	4619      	mov	r1, r3
 80194be:	f001 fc03 	bl	801acc8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80194c2:	69bb      	ldr	r3, [r7, #24]
 80194c4:	68db      	ldr	r3, [r3, #12]
 80194c6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80194c8:	f107 030c 	add.w	r3, r7, #12
 80194cc:	4618      	mov	r0, r3
 80194ce:	f000 f825 	bl	801951c <ip4_route>
 80194d2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80194d4:	693b      	ldr	r3, [r7, #16]
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	d011      	beq.n	80194fe <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80194da:	697b      	ldr	r3, [r7, #20]
 80194dc:	2200      	movs	r2, #0
 80194de:	709a      	strb	r2, [r3, #2]
 80194e0:	2200      	movs	r2, #0
 80194e2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80194e4:	f107 020c 	add.w	r2, r7, #12
 80194e8:	693b      	ldr	r3, [r7, #16]
 80194ea:	9302      	str	r3, [sp, #8]
 80194ec:	2301      	movs	r3, #1
 80194ee:	9301      	str	r3, [sp, #4]
 80194f0:	2300      	movs	r3, #0
 80194f2:	9300      	str	r3, [sp, #0]
 80194f4:	23ff      	movs	r3, #255	; 0xff
 80194f6:	2100      	movs	r1, #0
 80194f8:	69f8      	ldr	r0, [r7, #28]
 80194fa:	f000 f9cd 	bl	8019898 <ip4_output_if>
  }
  pbuf_free(q);
 80194fe:	69f8      	ldr	r0, [r7, #28]
 8019500:	f7f8 f862 	bl	80115c8 <pbuf_free>
 8019504:	e000      	b.n	8019508 <icmp_send_response+0xc0>
    return;
 8019506:	bf00      	nop
}
 8019508:	3720      	adds	r7, #32
 801950a:	46bd      	mov	sp, r7
 801950c:	bd80      	pop	{r7, pc}
 801950e:	bf00      	nop
 8019510:	0801f4d8 	.word	0x0801f4d8
 8019514:	0801f5a4 	.word	0x0801f5a4
 8019518:	0801f548 	.word	0x0801f548

0801951c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801951c:	b480      	push	{r7}
 801951e:	b085      	sub	sp, #20
 8019520:	af00      	add	r7, sp, #0
 8019522:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8019524:	4b33      	ldr	r3, [pc, #204]	; (80195f4 <ip4_route+0xd8>)
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	60fb      	str	r3, [r7, #12]
 801952a:	e036      	b.n	801959a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801952c:	68fb      	ldr	r3, [r7, #12]
 801952e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019532:	f003 0301 	and.w	r3, r3, #1
 8019536:	b2db      	uxtb	r3, r3
 8019538:	2b00      	cmp	r3, #0
 801953a:	d02b      	beq.n	8019594 <ip4_route+0x78>
 801953c:	68fb      	ldr	r3, [r7, #12]
 801953e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019542:	089b      	lsrs	r3, r3, #2
 8019544:	f003 0301 	and.w	r3, r3, #1
 8019548:	b2db      	uxtb	r3, r3
 801954a:	2b00      	cmp	r3, #0
 801954c:	d022      	beq.n	8019594 <ip4_route+0x78>
 801954e:	68fb      	ldr	r3, [r7, #12]
 8019550:	3304      	adds	r3, #4
 8019552:	681b      	ldr	r3, [r3, #0]
 8019554:	2b00      	cmp	r3, #0
 8019556:	d01d      	beq.n	8019594 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	681a      	ldr	r2, [r3, #0]
 801955c:	68fb      	ldr	r3, [r7, #12]
 801955e:	3304      	adds	r3, #4
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	405a      	eors	r2, r3
 8019564:	68fb      	ldr	r3, [r7, #12]
 8019566:	3308      	adds	r3, #8
 8019568:	681b      	ldr	r3, [r3, #0]
 801956a:	4013      	ands	r3, r2
 801956c:	2b00      	cmp	r3, #0
 801956e:	d101      	bne.n	8019574 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8019570:	68fb      	ldr	r3, [r7, #12]
 8019572:	e038      	b.n	80195e6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019574:	68fb      	ldr	r3, [r7, #12]
 8019576:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801957a:	f003 0302 	and.w	r3, r3, #2
 801957e:	2b00      	cmp	r3, #0
 8019580:	d108      	bne.n	8019594 <ip4_route+0x78>
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	681a      	ldr	r2, [r3, #0]
 8019586:	68fb      	ldr	r3, [r7, #12]
 8019588:	330c      	adds	r3, #12
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	429a      	cmp	r2, r3
 801958e:	d101      	bne.n	8019594 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8019590:	68fb      	ldr	r3, [r7, #12]
 8019592:	e028      	b.n	80195e6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8019594:	68fb      	ldr	r3, [r7, #12]
 8019596:	681b      	ldr	r3, [r3, #0]
 8019598:	60fb      	str	r3, [r7, #12]
 801959a:	68fb      	ldr	r3, [r7, #12]
 801959c:	2b00      	cmp	r3, #0
 801959e:	d1c5      	bne.n	801952c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80195a0:	4b15      	ldr	r3, [pc, #84]	; (80195f8 <ip4_route+0xdc>)
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	d01a      	beq.n	80195de <ip4_route+0xc2>
 80195a8:	4b13      	ldr	r3, [pc, #76]	; (80195f8 <ip4_route+0xdc>)
 80195aa:	681b      	ldr	r3, [r3, #0]
 80195ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80195b0:	f003 0301 	and.w	r3, r3, #1
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d012      	beq.n	80195de <ip4_route+0xc2>
 80195b8:	4b0f      	ldr	r3, [pc, #60]	; (80195f8 <ip4_route+0xdc>)
 80195ba:	681b      	ldr	r3, [r3, #0]
 80195bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80195c0:	f003 0304 	and.w	r3, r3, #4
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d00a      	beq.n	80195de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80195c8:	4b0b      	ldr	r3, [pc, #44]	; (80195f8 <ip4_route+0xdc>)
 80195ca:	681b      	ldr	r3, [r3, #0]
 80195cc:	3304      	adds	r3, #4
 80195ce:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	d004      	beq.n	80195de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	681b      	ldr	r3, [r3, #0]
 80195d8:	b2db      	uxtb	r3, r3
 80195da:	2b7f      	cmp	r3, #127	; 0x7f
 80195dc:	d101      	bne.n	80195e2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80195de:	2300      	movs	r3, #0
 80195e0:	e001      	b.n	80195e6 <ip4_route+0xca>
  }

  return netif_default;
 80195e2:	4b05      	ldr	r3, [pc, #20]	; (80195f8 <ip4_route+0xdc>)
 80195e4:	681b      	ldr	r3, [r3, #0]
}
 80195e6:	4618      	mov	r0, r3
 80195e8:	3714      	adds	r7, #20
 80195ea:	46bd      	mov	sp, r7
 80195ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195f0:	4770      	bx	lr
 80195f2:	bf00      	nop
 80195f4:	2001107c 	.word	0x2001107c
 80195f8:	20011080 	.word	0x20011080

080195fc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80195fc:	b580      	push	{r7, lr}
 80195fe:	b082      	sub	sp, #8
 8019600:	af00      	add	r7, sp, #0
 8019602:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801960a:	f003 0301 	and.w	r3, r3, #1
 801960e:	b2db      	uxtb	r3, r3
 8019610:	2b00      	cmp	r3, #0
 8019612:	d016      	beq.n	8019642 <ip4_input_accept+0x46>
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	3304      	adds	r3, #4
 8019618:	681b      	ldr	r3, [r3, #0]
 801961a:	2b00      	cmp	r3, #0
 801961c:	d011      	beq.n	8019642 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801961e:	4b0b      	ldr	r3, [pc, #44]	; (801964c <ip4_input_accept+0x50>)
 8019620:	695a      	ldr	r2, [r3, #20]
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	3304      	adds	r3, #4
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	429a      	cmp	r2, r3
 801962a:	d008      	beq.n	801963e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801962c:	4b07      	ldr	r3, [pc, #28]	; (801964c <ip4_input_accept+0x50>)
 801962e:	695b      	ldr	r3, [r3, #20]
 8019630:	6879      	ldr	r1, [r7, #4]
 8019632:	4618      	mov	r0, r3
 8019634:	f000 fa08 	bl	8019a48 <ip4_addr_isbroadcast_u32>
 8019638:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801963a:	2b00      	cmp	r3, #0
 801963c:	d001      	beq.n	8019642 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801963e:	2301      	movs	r3, #1
 8019640:	e000      	b.n	8019644 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8019642:	2300      	movs	r3, #0
}
 8019644:	4618      	mov	r0, r3
 8019646:	3708      	adds	r7, #8
 8019648:	46bd      	mov	sp, r7
 801964a:	bd80      	pop	{r7, pc}
 801964c:	2000d934 	.word	0x2000d934

08019650 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8019650:	b580      	push	{r7, lr}
 8019652:	b086      	sub	sp, #24
 8019654:	af00      	add	r7, sp, #0
 8019656:	6078      	str	r0, [r7, #4]
 8019658:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	685b      	ldr	r3, [r3, #4]
 801965e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8019660:	697b      	ldr	r3, [r7, #20]
 8019662:	781b      	ldrb	r3, [r3, #0]
 8019664:	091b      	lsrs	r3, r3, #4
 8019666:	b2db      	uxtb	r3, r3
 8019668:	2b04      	cmp	r3, #4
 801966a:	d004      	beq.n	8019676 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801966c:	6878      	ldr	r0, [r7, #4]
 801966e:	f7f7 ffab 	bl	80115c8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8019672:	2300      	movs	r3, #0
 8019674:	e107      	b.n	8019886 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8019676:	697b      	ldr	r3, [r7, #20]
 8019678:	781b      	ldrb	r3, [r3, #0]
 801967a:	f003 030f 	and.w	r3, r3, #15
 801967e:	b2db      	uxtb	r3, r3
 8019680:	009b      	lsls	r3, r3, #2
 8019682:	b2db      	uxtb	r3, r3
 8019684:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8019686:	697b      	ldr	r3, [r7, #20]
 8019688:	885b      	ldrh	r3, [r3, #2]
 801968a:	b29b      	uxth	r3, r3
 801968c:	4618      	mov	r0, r3
 801968e:	f7f6 fb77 	bl	800fd80 <lwip_htons>
 8019692:	4603      	mov	r3, r0
 8019694:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	891b      	ldrh	r3, [r3, #8]
 801969a:	89ba      	ldrh	r2, [r7, #12]
 801969c:	429a      	cmp	r2, r3
 801969e:	d204      	bcs.n	80196aa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80196a0:	89bb      	ldrh	r3, [r7, #12]
 80196a2:	4619      	mov	r1, r3
 80196a4:	6878      	ldr	r0, [r7, #4]
 80196a6:	f7f7 fdd7 	bl	8011258 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	895b      	ldrh	r3, [r3, #10]
 80196ae:	89fa      	ldrh	r2, [r7, #14]
 80196b0:	429a      	cmp	r2, r3
 80196b2:	d807      	bhi.n	80196c4 <ip4_input+0x74>
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	891b      	ldrh	r3, [r3, #8]
 80196b8:	89ba      	ldrh	r2, [r7, #12]
 80196ba:	429a      	cmp	r2, r3
 80196bc:	d802      	bhi.n	80196c4 <ip4_input+0x74>
 80196be:	89fb      	ldrh	r3, [r7, #14]
 80196c0:	2b13      	cmp	r3, #19
 80196c2:	d804      	bhi.n	80196ce <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80196c4:	6878      	ldr	r0, [r7, #4]
 80196c6:	f7f7 ff7f 	bl	80115c8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80196ca:	2300      	movs	r3, #0
 80196cc:	e0db      	b.n	8019886 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80196ce:	697b      	ldr	r3, [r7, #20]
 80196d0:	691b      	ldr	r3, [r3, #16]
 80196d2:	4a6f      	ldr	r2, [pc, #444]	; (8019890 <ip4_input+0x240>)
 80196d4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80196d6:	697b      	ldr	r3, [r7, #20]
 80196d8:	68db      	ldr	r3, [r3, #12]
 80196da:	4a6d      	ldr	r2, [pc, #436]	; (8019890 <ip4_input+0x240>)
 80196dc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80196de:	4b6c      	ldr	r3, [pc, #432]	; (8019890 <ip4_input+0x240>)
 80196e0:	695b      	ldr	r3, [r3, #20]
 80196e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80196e6:	2be0      	cmp	r3, #224	; 0xe0
 80196e8:	d112      	bne.n	8019710 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80196ea:	683b      	ldr	r3, [r7, #0]
 80196ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80196f0:	f003 0301 	and.w	r3, r3, #1
 80196f4:	b2db      	uxtb	r3, r3
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	d007      	beq.n	801970a <ip4_input+0xba>
 80196fa:	683b      	ldr	r3, [r7, #0]
 80196fc:	3304      	adds	r3, #4
 80196fe:	681b      	ldr	r3, [r3, #0]
 8019700:	2b00      	cmp	r3, #0
 8019702:	d002      	beq.n	801970a <ip4_input+0xba>
      netif = inp;
 8019704:	683b      	ldr	r3, [r7, #0]
 8019706:	613b      	str	r3, [r7, #16]
 8019708:	e02a      	b.n	8019760 <ip4_input+0x110>
    } else {
      netif = NULL;
 801970a:	2300      	movs	r3, #0
 801970c:	613b      	str	r3, [r7, #16]
 801970e:	e027      	b.n	8019760 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8019710:	6838      	ldr	r0, [r7, #0]
 8019712:	f7ff ff73 	bl	80195fc <ip4_input_accept>
 8019716:	4603      	mov	r3, r0
 8019718:	2b00      	cmp	r3, #0
 801971a:	d002      	beq.n	8019722 <ip4_input+0xd2>
      netif = inp;
 801971c:	683b      	ldr	r3, [r7, #0]
 801971e:	613b      	str	r3, [r7, #16]
 8019720:	e01e      	b.n	8019760 <ip4_input+0x110>
    } else {
      netif = NULL;
 8019722:	2300      	movs	r3, #0
 8019724:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8019726:	4b5a      	ldr	r3, [pc, #360]	; (8019890 <ip4_input+0x240>)
 8019728:	695b      	ldr	r3, [r3, #20]
 801972a:	b2db      	uxtb	r3, r3
 801972c:	2b7f      	cmp	r3, #127	; 0x7f
 801972e:	d017      	beq.n	8019760 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8019730:	4b58      	ldr	r3, [pc, #352]	; (8019894 <ip4_input+0x244>)
 8019732:	681b      	ldr	r3, [r3, #0]
 8019734:	613b      	str	r3, [r7, #16]
 8019736:	e00e      	b.n	8019756 <ip4_input+0x106>
          if (netif == inp) {
 8019738:	693a      	ldr	r2, [r7, #16]
 801973a:	683b      	ldr	r3, [r7, #0]
 801973c:	429a      	cmp	r2, r3
 801973e:	d006      	beq.n	801974e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8019740:	6938      	ldr	r0, [r7, #16]
 8019742:	f7ff ff5b 	bl	80195fc <ip4_input_accept>
 8019746:	4603      	mov	r3, r0
 8019748:	2b00      	cmp	r3, #0
 801974a:	d108      	bne.n	801975e <ip4_input+0x10e>
 801974c:	e000      	b.n	8019750 <ip4_input+0x100>
            continue;
 801974e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8019750:	693b      	ldr	r3, [r7, #16]
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	613b      	str	r3, [r7, #16]
 8019756:	693b      	ldr	r3, [r7, #16]
 8019758:	2b00      	cmp	r3, #0
 801975a:	d1ed      	bne.n	8019738 <ip4_input+0xe8>
 801975c:	e000      	b.n	8019760 <ip4_input+0x110>
            break;
 801975e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019760:	4b4b      	ldr	r3, [pc, #300]	; (8019890 <ip4_input+0x240>)
 8019762:	691b      	ldr	r3, [r3, #16]
 8019764:	6839      	ldr	r1, [r7, #0]
 8019766:	4618      	mov	r0, r3
 8019768:	f000 f96e 	bl	8019a48 <ip4_addr_isbroadcast_u32>
 801976c:	4603      	mov	r3, r0
 801976e:	2b00      	cmp	r3, #0
 8019770:	d105      	bne.n	801977e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8019772:	4b47      	ldr	r3, [pc, #284]	; (8019890 <ip4_input+0x240>)
 8019774:	691b      	ldr	r3, [r3, #16]
 8019776:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801977a:	2be0      	cmp	r3, #224	; 0xe0
 801977c:	d104      	bne.n	8019788 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801977e:	6878      	ldr	r0, [r7, #4]
 8019780:	f7f7 ff22 	bl	80115c8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8019784:	2300      	movs	r3, #0
 8019786:	e07e      	b.n	8019886 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8019788:	693b      	ldr	r3, [r7, #16]
 801978a:	2b00      	cmp	r3, #0
 801978c:	d104      	bne.n	8019798 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801978e:	6878      	ldr	r0, [r7, #4]
 8019790:	f7f7 ff1a 	bl	80115c8 <pbuf_free>
    return ERR_OK;
 8019794:	2300      	movs	r3, #0
 8019796:	e076      	b.n	8019886 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8019798:	697b      	ldr	r3, [r7, #20]
 801979a:	88db      	ldrh	r3, [r3, #6]
 801979c:	b29b      	uxth	r3, r3
 801979e:	461a      	mov	r2, r3
 80197a0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80197a4:	4013      	ands	r3, r2
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d00b      	beq.n	80197c2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80197aa:	6878      	ldr	r0, [r7, #4]
 80197ac:	f000 fc92 	bl	801a0d4 <ip4_reass>
 80197b0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	d101      	bne.n	80197bc <ip4_input+0x16c>
      return ERR_OK;
 80197b8:	2300      	movs	r3, #0
 80197ba:	e064      	b.n	8019886 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	685b      	ldr	r3, [r3, #4]
 80197c0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80197c2:	4a33      	ldr	r2, [pc, #204]	; (8019890 <ip4_input+0x240>)
 80197c4:	693b      	ldr	r3, [r7, #16]
 80197c6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80197c8:	4a31      	ldr	r2, [pc, #196]	; (8019890 <ip4_input+0x240>)
 80197ca:	683b      	ldr	r3, [r7, #0]
 80197cc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80197ce:	4a30      	ldr	r2, [pc, #192]	; (8019890 <ip4_input+0x240>)
 80197d0:	697b      	ldr	r3, [r7, #20]
 80197d2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80197d4:	697b      	ldr	r3, [r7, #20]
 80197d6:	781b      	ldrb	r3, [r3, #0]
 80197d8:	f003 030f 	and.w	r3, r3, #15
 80197dc:	b2db      	uxtb	r3, r3
 80197de:	009b      	lsls	r3, r3, #2
 80197e0:	b2db      	uxtb	r3, r3
 80197e2:	b29a      	uxth	r2, r3
 80197e4:	4b2a      	ldr	r3, [pc, #168]	; (8019890 <ip4_input+0x240>)
 80197e6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80197e8:	89fb      	ldrh	r3, [r7, #14]
 80197ea:	4619      	mov	r1, r3
 80197ec:	6878      	ldr	r0, [r7, #4]
 80197ee:	f7f7 fe33 	bl	8011458 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80197f2:	697b      	ldr	r3, [r7, #20]
 80197f4:	7a5b      	ldrb	r3, [r3, #9]
 80197f6:	2b11      	cmp	r3, #17
 80197f8:	d006      	beq.n	8019808 <ip4_input+0x1b8>
 80197fa:	2b11      	cmp	r3, #17
 80197fc:	dc13      	bgt.n	8019826 <ip4_input+0x1d6>
 80197fe:	2b01      	cmp	r3, #1
 8019800:	d00c      	beq.n	801981c <ip4_input+0x1cc>
 8019802:	2b06      	cmp	r3, #6
 8019804:	d005      	beq.n	8019812 <ip4_input+0x1c2>
 8019806:	e00e      	b.n	8019826 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8019808:	6839      	ldr	r1, [r7, #0]
 801980a:	6878      	ldr	r0, [r7, #4]
 801980c:	f7fe fb5a 	bl	8017ec4 <udp_input>
        break;
 8019810:	e026      	b.n	8019860 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8019812:	6839      	ldr	r1, [r7, #0]
 8019814:	6878      	ldr	r0, [r7, #4]
 8019816:	f7f9 ff13 	bl	8013640 <tcp_input>
        break;
 801981a:	e021      	b.n	8019860 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801981c:	6839      	ldr	r1, [r7, #0]
 801981e:	6878      	ldr	r0, [r7, #4]
 8019820:	f7ff fcee 	bl	8019200 <icmp_input>
        break;
 8019824:	e01c      	b.n	8019860 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019826:	4b1a      	ldr	r3, [pc, #104]	; (8019890 <ip4_input+0x240>)
 8019828:	695b      	ldr	r3, [r3, #20]
 801982a:	6939      	ldr	r1, [r7, #16]
 801982c:	4618      	mov	r0, r3
 801982e:	f000 f90b 	bl	8019a48 <ip4_addr_isbroadcast_u32>
 8019832:	4603      	mov	r3, r0
 8019834:	2b00      	cmp	r3, #0
 8019836:	d10f      	bne.n	8019858 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019838:	4b15      	ldr	r3, [pc, #84]	; (8019890 <ip4_input+0x240>)
 801983a:	695b      	ldr	r3, [r3, #20]
 801983c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019840:	2be0      	cmp	r3, #224	; 0xe0
 8019842:	d009      	beq.n	8019858 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019844:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019848:	4619      	mov	r1, r3
 801984a:	6878      	ldr	r0, [r7, #4]
 801984c:	f7f7 fe77 	bl	801153e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8019850:	2102      	movs	r1, #2
 8019852:	6878      	ldr	r0, [r7, #4]
 8019854:	f7ff fdd8 	bl	8019408 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8019858:	6878      	ldr	r0, [r7, #4]
 801985a:	f7f7 feb5 	bl	80115c8 <pbuf_free>
        break;
 801985e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8019860:	4b0b      	ldr	r3, [pc, #44]	; (8019890 <ip4_input+0x240>)
 8019862:	2200      	movs	r2, #0
 8019864:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019866:	4b0a      	ldr	r3, [pc, #40]	; (8019890 <ip4_input+0x240>)
 8019868:	2200      	movs	r2, #0
 801986a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801986c:	4b08      	ldr	r3, [pc, #32]	; (8019890 <ip4_input+0x240>)
 801986e:	2200      	movs	r2, #0
 8019870:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8019872:	4b07      	ldr	r3, [pc, #28]	; (8019890 <ip4_input+0x240>)
 8019874:	2200      	movs	r2, #0
 8019876:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8019878:	4b05      	ldr	r3, [pc, #20]	; (8019890 <ip4_input+0x240>)
 801987a:	2200      	movs	r2, #0
 801987c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801987e:	4b04      	ldr	r3, [pc, #16]	; (8019890 <ip4_input+0x240>)
 8019880:	2200      	movs	r2, #0
 8019882:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019884:	2300      	movs	r3, #0
}
 8019886:	4618      	mov	r0, r3
 8019888:	3718      	adds	r7, #24
 801988a:	46bd      	mov	sp, r7
 801988c:	bd80      	pop	{r7, pc}
 801988e:	bf00      	nop
 8019890:	2000d934 	.word	0x2000d934
 8019894:	2001107c 	.word	0x2001107c

08019898 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019898:	b580      	push	{r7, lr}
 801989a:	b08a      	sub	sp, #40	; 0x28
 801989c:	af04      	add	r7, sp, #16
 801989e:	60f8      	str	r0, [r7, #12]
 80198a0:	60b9      	str	r1, [r7, #8]
 80198a2:	607a      	str	r2, [r7, #4]
 80198a4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80198a6:	68bb      	ldr	r3, [r7, #8]
 80198a8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	2b00      	cmp	r3, #0
 80198ae:	d009      	beq.n	80198c4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80198b0:	68bb      	ldr	r3, [r7, #8]
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	d003      	beq.n	80198be <ip4_output_if+0x26>
 80198b6:	68bb      	ldr	r3, [r7, #8]
 80198b8:	681b      	ldr	r3, [r3, #0]
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	d102      	bne.n	80198c4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80198be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198c0:	3304      	adds	r3, #4
 80198c2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80198c4:	78fa      	ldrb	r2, [r7, #3]
 80198c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198c8:	9302      	str	r3, [sp, #8]
 80198ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80198ce:	9301      	str	r3, [sp, #4]
 80198d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80198d4:	9300      	str	r3, [sp, #0]
 80198d6:	4613      	mov	r3, r2
 80198d8:	687a      	ldr	r2, [r7, #4]
 80198da:	6979      	ldr	r1, [r7, #20]
 80198dc:	68f8      	ldr	r0, [r7, #12]
 80198de:	f000 f805 	bl	80198ec <ip4_output_if_src>
 80198e2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80198e4:	4618      	mov	r0, r3
 80198e6:	3718      	adds	r7, #24
 80198e8:	46bd      	mov	sp, r7
 80198ea:	bd80      	pop	{r7, pc}

080198ec <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80198ec:	b580      	push	{r7, lr}
 80198ee:	b088      	sub	sp, #32
 80198f0:	af00      	add	r7, sp, #0
 80198f2:	60f8      	str	r0, [r7, #12]
 80198f4:	60b9      	str	r1, [r7, #8]
 80198f6:	607a      	str	r2, [r7, #4]
 80198f8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80198fa:	68fb      	ldr	r3, [r7, #12]
 80198fc:	7b9b      	ldrb	r3, [r3, #14]
 80198fe:	2b01      	cmp	r3, #1
 8019900:	d006      	beq.n	8019910 <ip4_output_if_src+0x24>
 8019902:	4b4b      	ldr	r3, [pc, #300]	; (8019a30 <ip4_output_if_src+0x144>)
 8019904:	f44f 7255 	mov.w	r2, #852	; 0x354
 8019908:	494a      	ldr	r1, [pc, #296]	; (8019a34 <ip4_output_if_src+0x148>)
 801990a:	484b      	ldr	r0, [pc, #300]	; (8019a38 <ip4_output_if_src+0x14c>)
 801990c:	f001 f9f2 	bl	801acf4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	2b00      	cmp	r3, #0
 8019914:	d060      	beq.n	80199d8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8019916:	2314      	movs	r3, #20
 8019918:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801991a:	2114      	movs	r1, #20
 801991c:	68f8      	ldr	r0, [r7, #12]
 801991e:	f7f7 fd8b 	bl	8011438 <pbuf_add_header>
 8019922:	4603      	mov	r3, r0
 8019924:	2b00      	cmp	r3, #0
 8019926:	d002      	beq.n	801992e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019928:	f06f 0301 	mvn.w	r3, #1
 801992c:	e07c      	b.n	8019a28 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801992e:	68fb      	ldr	r3, [r7, #12]
 8019930:	685b      	ldr	r3, [r3, #4]
 8019932:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019934:	68fb      	ldr	r3, [r7, #12]
 8019936:	895b      	ldrh	r3, [r3, #10]
 8019938:	2b13      	cmp	r3, #19
 801993a:	d806      	bhi.n	801994a <ip4_output_if_src+0x5e>
 801993c:	4b3c      	ldr	r3, [pc, #240]	; (8019a30 <ip4_output_if_src+0x144>)
 801993e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8019942:	493e      	ldr	r1, [pc, #248]	; (8019a3c <ip4_output_if_src+0x150>)
 8019944:	483c      	ldr	r0, [pc, #240]	; (8019a38 <ip4_output_if_src+0x14c>)
 8019946:	f001 f9d5 	bl	801acf4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801994a:	69fb      	ldr	r3, [r7, #28]
 801994c:	78fa      	ldrb	r2, [r7, #3]
 801994e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8019950:	69fb      	ldr	r3, [r7, #28]
 8019952:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8019956:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	681a      	ldr	r2, [r3, #0]
 801995c:	69fb      	ldr	r3, [r7, #28]
 801995e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8019960:	8b7b      	ldrh	r3, [r7, #26]
 8019962:	089b      	lsrs	r3, r3, #2
 8019964:	b29b      	uxth	r3, r3
 8019966:	b2db      	uxtb	r3, r3
 8019968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801996c:	b2da      	uxtb	r2, r3
 801996e:	69fb      	ldr	r3, [r7, #28]
 8019970:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8019972:	69fb      	ldr	r3, [r7, #28]
 8019974:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019978:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801997a:	68fb      	ldr	r3, [r7, #12]
 801997c:	891b      	ldrh	r3, [r3, #8]
 801997e:	4618      	mov	r0, r3
 8019980:	f7f6 f9fe 	bl	800fd80 <lwip_htons>
 8019984:	4603      	mov	r3, r0
 8019986:	461a      	mov	r2, r3
 8019988:	69fb      	ldr	r3, [r7, #28]
 801998a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801998c:	69fb      	ldr	r3, [r7, #28]
 801998e:	2200      	movs	r2, #0
 8019990:	719a      	strb	r2, [r3, #6]
 8019992:	2200      	movs	r2, #0
 8019994:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019996:	4b2a      	ldr	r3, [pc, #168]	; (8019a40 <ip4_output_if_src+0x154>)
 8019998:	881b      	ldrh	r3, [r3, #0]
 801999a:	4618      	mov	r0, r3
 801999c:	f7f6 f9f0 	bl	800fd80 <lwip_htons>
 80199a0:	4603      	mov	r3, r0
 80199a2:	461a      	mov	r2, r3
 80199a4:	69fb      	ldr	r3, [r7, #28]
 80199a6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80199a8:	4b25      	ldr	r3, [pc, #148]	; (8019a40 <ip4_output_if_src+0x154>)
 80199aa:	881b      	ldrh	r3, [r3, #0]
 80199ac:	3301      	adds	r3, #1
 80199ae:	b29a      	uxth	r2, r3
 80199b0:	4b23      	ldr	r3, [pc, #140]	; (8019a40 <ip4_output_if_src+0x154>)
 80199b2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80199b4:	68bb      	ldr	r3, [r7, #8]
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	d104      	bne.n	80199c4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80199ba:	4b22      	ldr	r3, [pc, #136]	; (8019a44 <ip4_output_if_src+0x158>)
 80199bc:	681a      	ldr	r2, [r3, #0]
 80199be:	69fb      	ldr	r3, [r7, #28]
 80199c0:	60da      	str	r2, [r3, #12]
 80199c2:	e003      	b.n	80199cc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80199c4:	68bb      	ldr	r3, [r7, #8]
 80199c6:	681a      	ldr	r2, [r3, #0]
 80199c8:	69fb      	ldr	r3, [r7, #28]
 80199ca:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80199cc:	69fb      	ldr	r3, [r7, #28]
 80199ce:	2200      	movs	r2, #0
 80199d0:	729a      	strb	r2, [r3, #10]
 80199d2:	2200      	movs	r2, #0
 80199d4:	72da      	strb	r2, [r3, #11]
 80199d6:	e00f      	b.n	80199f8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80199d8:	68fb      	ldr	r3, [r7, #12]
 80199da:	895b      	ldrh	r3, [r3, #10]
 80199dc:	2b13      	cmp	r3, #19
 80199de:	d802      	bhi.n	80199e6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80199e0:	f06f 0301 	mvn.w	r3, #1
 80199e4:	e020      	b.n	8019a28 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	685b      	ldr	r3, [r3, #4]
 80199ea:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80199ec:	69fb      	ldr	r3, [r7, #28]
 80199ee:	691b      	ldr	r3, [r3, #16]
 80199f0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80199f2:	f107 0314 	add.w	r3, r7, #20
 80199f6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80199f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80199fc:	2b00      	cmp	r3, #0
 80199fe:	d00c      	beq.n	8019a1a <ip4_output_if_src+0x12e>
 8019a00:	68fb      	ldr	r3, [r7, #12]
 8019a02:	891a      	ldrh	r2, [r3, #8]
 8019a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019a08:	429a      	cmp	r2, r3
 8019a0a:	d906      	bls.n	8019a1a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8019a0c:	687a      	ldr	r2, [r7, #4]
 8019a0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019a10:	68f8      	ldr	r0, [r7, #12]
 8019a12:	f000 fd53 	bl	801a4bc <ip4_frag>
 8019a16:	4603      	mov	r3, r0
 8019a18:	e006      	b.n	8019a28 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8019a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a1c:	695b      	ldr	r3, [r3, #20]
 8019a1e:	687a      	ldr	r2, [r7, #4]
 8019a20:	68f9      	ldr	r1, [r7, #12]
 8019a22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019a24:	4798      	blx	r3
 8019a26:	4603      	mov	r3, r0
}
 8019a28:	4618      	mov	r0, r3
 8019a2a:	3720      	adds	r7, #32
 8019a2c:	46bd      	mov	sp, r7
 8019a2e:	bd80      	pop	{r7, pc}
 8019a30:	0801f5d0 	.word	0x0801f5d0
 8019a34:	0801f604 	.word	0x0801f604
 8019a38:	0801f610 	.word	0x0801f610
 8019a3c:	0801f638 	.word	0x0801f638
 8019a40:	200111da 	.word	0x200111da
 8019a44:	0801fb14 	.word	0x0801fb14

08019a48 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019a48:	b480      	push	{r7}
 8019a4a:	b085      	sub	sp, #20
 8019a4c:	af00      	add	r7, sp, #0
 8019a4e:	6078      	str	r0, [r7, #4]
 8019a50:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019a56:	687b      	ldr	r3, [r7, #4]
 8019a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019a5c:	d002      	beq.n	8019a64 <ip4_addr_isbroadcast_u32+0x1c>
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	d101      	bne.n	8019a68 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019a64:	2301      	movs	r3, #1
 8019a66:	e02a      	b.n	8019abe <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019a68:	683b      	ldr	r3, [r7, #0]
 8019a6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019a6e:	f003 0302 	and.w	r3, r3, #2
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d101      	bne.n	8019a7a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8019a76:	2300      	movs	r3, #0
 8019a78:	e021      	b.n	8019abe <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019a7a:	683b      	ldr	r3, [r7, #0]
 8019a7c:	3304      	adds	r3, #4
 8019a7e:	681b      	ldr	r3, [r3, #0]
 8019a80:	687a      	ldr	r2, [r7, #4]
 8019a82:	429a      	cmp	r2, r3
 8019a84:	d101      	bne.n	8019a8a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8019a86:	2300      	movs	r3, #0
 8019a88:	e019      	b.n	8019abe <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019a8a:	68fa      	ldr	r2, [r7, #12]
 8019a8c:	683b      	ldr	r3, [r7, #0]
 8019a8e:	3304      	adds	r3, #4
 8019a90:	681b      	ldr	r3, [r3, #0]
 8019a92:	405a      	eors	r2, r3
 8019a94:	683b      	ldr	r3, [r7, #0]
 8019a96:	3308      	adds	r3, #8
 8019a98:	681b      	ldr	r3, [r3, #0]
 8019a9a:	4013      	ands	r3, r2
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d10d      	bne.n	8019abc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019aa0:	683b      	ldr	r3, [r7, #0]
 8019aa2:	3308      	adds	r3, #8
 8019aa4:	681b      	ldr	r3, [r3, #0]
 8019aa6:	43da      	mvns	r2, r3
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019aac:	683b      	ldr	r3, [r7, #0]
 8019aae:	3308      	adds	r3, #8
 8019ab0:	681b      	ldr	r3, [r3, #0]
 8019ab2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019ab4:	429a      	cmp	r2, r3
 8019ab6:	d101      	bne.n	8019abc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019ab8:	2301      	movs	r3, #1
 8019aba:	e000      	b.n	8019abe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019abc:	2300      	movs	r3, #0
  }
}
 8019abe:	4618      	mov	r0, r3
 8019ac0:	3714      	adds	r7, #20
 8019ac2:	46bd      	mov	sp, r7
 8019ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ac8:	4770      	bx	lr
	...

08019acc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019acc:	b580      	push	{r7, lr}
 8019ace:	b084      	sub	sp, #16
 8019ad0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8019ad2:	2300      	movs	r3, #0
 8019ad4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8019ad6:	4b12      	ldr	r3, [pc, #72]	; (8019b20 <ip_reass_tmr+0x54>)
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019adc:	e018      	b.n	8019b10 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8019ade:	68fb      	ldr	r3, [r7, #12]
 8019ae0:	7fdb      	ldrb	r3, [r3, #31]
 8019ae2:	2b00      	cmp	r3, #0
 8019ae4:	d00b      	beq.n	8019afe <ip_reass_tmr+0x32>
      r->timer--;
 8019ae6:	68fb      	ldr	r3, [r7, #12]
 8019ae8:	7fdb      	ldrb	r3, [r3, #31]
 8019aea:	3b01      	subs	r3, #1
 8019aec:	b2da      	uxtb	r2, r3
 8019aee:	68fb      	ldr	r3, [r7, #12]
 8019af0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8019af2:	68fb      	ldr	r3, [r7, #12]
 8019af4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8019af6:	68fb      	ldr	r3, [r7, #12]
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	60fb      	str	r3, [r7, #12]
 8019afc:	e008      	b.n	8019b10 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8019afe:	68fb      	ldr	r3, [r7, #12]
 8019b00:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8019b02:	68fb      	ldr	r3, [r7, #12]
 8019b04:	681b      	ldr	r3, [r3, #0]
 8019b06:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8019b08:	68b9      	ldr	r1, [r7, #8]
 8019b0a:	6878      	ldr	r0, [r7, #4]
 8019b0c:	f000 f80a 	bl	8019b24 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8019b10:	68fb      	ldr	r3, [r7, #12]
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	d1e3      	bne.n	8019ade <ip_reass_tmr+0x12>
    }
  }
}
 8019b16:	bf00      	nop
 8019b18:	bf00      	nop
 8019b1a:	3710      	adds	r7, #16
 8019b1c:	46bd      	mov	sp, r7
 8019b1e:	bd80      	pop	{r7, pc}
 8019b20:	200111dc 	.word	0x200111dc

08019b24 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019b24:	b580      	push	{r7, lr}
 8019b26:	b088      	sub	sp, #32
 8019b28:	af00      	add	r7, sp, #0
 8019b2a:	6078      	str	r0, [r7, #4]
 8019b2c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8019b2e:	2300      	movs	r3, #0
 8019b30:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8019b32:	683a      	ldr	r2, [r7, #0]
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	429a      	cmp	r2, r3
 8019b38:	d105      	bne.n	8019b46 <ip_reass_free_complete_datagram+0x22>
 8019b3a:	4b45      	ldr	r3, [pc, #276]	; (8019c50 <ip_reass_free_complete_datagram+0x12c>)
 8019b3c:	22ab      	movs	r2, #171	; 0xab
 8019b3e:	4945      	ldr	r1, [pc, #276]	; (8019c54 <ip_reass_free_complete_datagram+0x130>)
 8019b40:	4845      	ldr	r0, [pc, #276]	; (8019c58 <ip_reass_free_complete_datagram+0x134>)
 8019b42:	f001 f8d7 	bl	801acf4 <iprintf>
  if (prev != NULL) {
 8019b46:	683b      	ldr	r3, [r7, #0]
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	d00a      	beq.n	8019b62 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019b4c:	683b      	ldr	r3, [r7, #0]
 8019b4e:	681b      	ldr	r3, [r3, #0]
 8019b50:	687a      	ldr	r2, [r7, #4]
 8019b52:	429a      	cmp	r2, r3
 8019b54:	d005      	beq.n	8019b62 <ip_reass_free_complete_datagram+0x3e>
 8019b56:	4b3e      	ldr	r3, [pc, #248]	; (8019c50 <ip_reass_free_complete_datagram+0x12c>)
 8019b58:	22ad      	movs	r2, #173	; 0xad
 8019b5a:	4940      	ldr	r1, [pc, #256]	; (8019c5c <ip_reass_free_complete_datagram+0x138>)
 8019b5c:	483e      	ldr	r0, [pc, #248]	; (8019c58 <ip_reass_free_complete_datagram+0x134>)
 8019b5e:	f001 f8c9 	bl	801acf4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	685b      	ldr	r3, [r3, #4]
 8019b66:	685b      	ldr	r3, [r3, #4]
 8019b68:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019b6a:	697b      	ldr	r3, [r7, #20]
 8019b6c:	889b      	ldrh	r3, [r3, #4]
 8019b6e:	b29b      	uxth	r3, r3
 8019b70:	2b00      	cmp	r3, #0
 8019b72:	d12a      	bne.n	8019bca <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	685b      	ldr	r3, [r3, #4]
 8019b78:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019b7a:	697b      	ldr	r3, [r7, #20]
 8019b7c:	681a      	ldr	r2, [r3, #0]
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8019b82:	69bb      	ldr	r3, [r7, #24]
 8019b84:	6858      	ldr	r0, [r3, #4]
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	3308      	adds	r3, #8
 8019b8a:	2214      	movs	r2, #20
 8019b8c:	4619      	mov	r1, r3
 8019b8e:	f001 f89b 	bl	801acc8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8019b92:	2101      	movs	r1, #1
 8019b94:	69b8      	ldr	r0, [r7, #24]
 8019b96:	f7ff fc47 	bl	8019428 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8019b9a:	69b8      	ldr	r0, [r7, #24]
 8019b9c:	f7f7 fda2 	bl	80116e4 <pbuf_clen>
 8019ba0:	4603      	mov	r3, r0
 8019ba2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019ba4:	8bfa      	ldrh	r2, [r7, #30]
 8019ba6:	8a7b      	ldrh	r3, [r7, #18]
 8019ba8:	4413      	add	r3, r2
 8019baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019bae:	db05      	blt.n	8019bbc <ip_reass_free_complete_datagram+0x98>
 8019bb0:	4b27      	ldr	r3, [pc, #156]	; (8019c50 <ip_reass_free_complete_datagram+0x12c>)
 8019bb2:	22bc      	movs	r2, #188	; 0xbc
 8019bb4:	492a      	ldr	r1, [pc, #168]	; (8019c60 <ip_reass_free_complete_datagram+0x13c>)
 8019bb6:	4828      	ldr	r0, [pc, #160]	; (8019c58 <ip_reass_free_complete_datagram+0x134>)
 8019bb8:	f001 f89c 	bl	801acf4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019bbc:	8bfa      	ldrh	r2, [r7, #30]
 8019bbe:	8a7b      	ldrh	r3, [r7, #18]
 8019bc0:	4413      	add	r3, r2
 8019bc2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8019bc4:	69b8      	ldr	r0, [r7, #24]
 8019bc6:	f7f7 fcff 	bl	80115c8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	685b      	ldr	r3, [r3, #4]
 8019bce:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019bd0:	e01f      	b.n	8019c12 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8019bd2:	69bb      	ldr	r3, [r7, #24]
 8019bd4:	685b      	ldr	r3, [r3, #4]
 8019bd6:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019bd8:	69bb      	ldr	r3, [r7, #24]
 8019bda:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019bdc:	697b      	ldr	r3, [r7, #20]
 8019bde:	681b      	ldr	r3, [r3, #0]
 8019be0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8019be2:	68f8      	ldr	r0, [r7, #12]
 8019be4:	f7f7 fd7e 	bl	80116e4 <pbuf_clen>
 8019be8:	4603      	mov	r3, r0
 8019bea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019bec:	8bfa      	ldrh	r2, [r7, #30]
 8019bee:	8a7b      	ldrh	r3, [r7, #18]
 8019bf0:	4413      	add	r3, r2
 8019bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019bf6:	db05      	blt.n	8019c04 <ip_reass_free_complete_datagram+0xe0>
 8019bf8:	4b15      	ldr	r3, [pc, #84]	; (8019c50 <ip_reass_free_complete_datagram+0x12c>)
 8019bfa:	22cc      	movs	r2, #204	; 0xcc
 8019bfc:	4918      	ldr	r1, [pc, #96]	; (8019c60 <ip_reass_free_complete_datagram+0x13c>)
 8019bfe:	4816      	ldr	r0, [pc, #88]	; (8019c58 <ip_reass_free_complete_datagram+0x134>)
 8019c00:	f001 f878 	bl	801acf4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019c04:	8bfa      	ldrh	r2, [r7, #30]
 8019c06:	8a7b      	ldrh	r3, [r7, #18]
 8019c08:	4413      	add	r3, r2
 8019c0a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8019c0c:	68f8      	ldr	r0, [r7, #12]
 8019c0e:	f7f7 fcdb 	bl	80115c8 <pbuf_free>
  while (p != NULL) {
 8019c12:	69bb      	ldr	r3, [r7, #24]
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d1dc      	bne.n	8019bd2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019c18:	6839      	ldr	r1, [r7, #0]
 8019c1a:	6878      	ldr	r0, [r7, #4]
 8019c1c:	f000 f8c2 	bl	8019da4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8019c20:	4b10      	ldr	r3, [pc, #64]	; (8019c64 <ip_reass_free_complete_datagram+0x140>)
 8019c22:	881b      	ldrh	r3, [r3, #0]
 8019c24:	8bfa      	ldrh	r2, [r7, #30]
 8019c26:	429a      	cmp	r2, r3
 8019c28:	d905      	bls.n	8019c36 <ip_reass_free_complete_datagram+0x112>
 8019c2a:	4b09      	ldr	r3, [pc, #36]	; (8019c50 <ip_reass_free_complete_datagram+0x12c>)
 8019c2c:	22d2      	movs	r2, #210	; 0xd2
 8019c2e:	490e      	ldr	r1, [pc, #56]	; (8019c68 <ip_reass_free_complete_datagram+0x144>)
 8019c30:	4809      	ldr	r0, [pc, #36]	; (8019c58 <ip_reass_free_complete_datagram+0x134>)
 8019c32:	f001 f85f 	bl	801acf4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8019c36:	4b0b      	ldr	r3, [pc, #44]	; (8019c64 <ip_reass_free_complete_datagram+0x140>)
 8019c38:	881a      	ldrh	r2, [r3, #0]
 8019c3a:	8bfb      	ldrh	r3, [r7, #30]
 8019c3c:	1ad3      	subs	r3, r2, r3
 8019c3e:	b29a      	uxth	r2, r3
 8019c40:	4b08      	ldr	r3, [pc, #32]	; (8019c64 <ip_reass_free_complete_datagram+0x140>)
 8019c42:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019c44:	8bfb      	ldrh	r3, [r7, #30]
}
 8019c46:	4618      	mov	r0, r3
 8019c48:	3720      	adds	r7, #32
 8019c4a:	46bd      	mov	sp, r7
 8019c4c:	bd80      	pop	{r7, pc}
 8019c4e:	bf00      	nop
 8019c50:	0801f668 	.word	0x0801f668
 8019c54:	0801f6a4 	.word	0x0801f6a4
 8019c58:	0801f6b0 	.word	0x0801f6b0
 8019c5c:	0801f6d8 	.word	0x0801f6d8
 8019c60:	0801f6ec 	.word	0x0801f6ec
 8019c64:	200111e0 	.word	0x200111e0
 8019c68:	0801f70c 	.word	0x0801f70c

08019c6c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019c6c:	b580      	push	{r7, lr}
 8019c6e:	b08a      	sub	sp, #40	; 0x28
 8019c70:	af00      	add	r7, sp, #0
 8019c72:	6078      	str	r0, [r7, #4]
 8019c74:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019c76:	2300      	movs	r3, #0
 8019c78:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019c7a:	2300      	movs	r3, #0
 8019c7c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019c7e:	2300      	movs	r3, #0
 8019c80:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8019c82:	2300      	movs	r3, #0
 8019c84:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019c86:	2300      	movs	r3, #0
 8019c88:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019c8a:	4b28      	ldr	r3, [pc, #160]	; (8019d2c <ip_reass_remove_oldest_datagram+0xc0>)
 8019c8c:	681b      	ldr	r3, [r3, #0]
 8019c8e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019c90:	e030      	b.n	8019cf4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8019c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c94:	695a      	ldr	r2, [r3, #20]
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	68db      	ldr	r3, [r3, #12]
 8019c9a:	429a      	cmp	r2, r3
 8019c9c:	d10c      	bne.n	8019cb8 <ip_reass_remove_oldest_datagram+0x4c>
 8019c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ca0:	699a      	ldr	r2, [r3, #24]
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	691b      	ldr	r3, [r3, #16]
 8019ca6:	429a      	cmp	r2, r3
 8019ca8:	d106      	bne.n	8019cb8 <ip_reass_remove_oldest_datagram+0x4c>
 8019caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cac:	899a      	ldrh	r2, [r3, #12]
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	889b      	ldrh	r3, [r3, #4]
 8019cb2:	b29b      	uxth	r3, r3
 8019cb4:	429a      	cmp	r2, r3
 8019cb6:	d014      	beq.n	8019ce2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019cb8:	693b      	ldr	r3, [r7, #16]
 8019cba:	3301      	adds	r3, #1
 8019cbc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8019cbe:	6a3b      	ldr	r3, [r7, #32]
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	d104      	bne.n	8019cce <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cc6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019cc8:	69fb      	ldr	r3, [r7, #28]
 8019cca:	61bb      	str	r3, [r7, #24]
 8019ccc:	e009      	b.n	8019ce2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cd0:	7fda      	ldrb	r2, [r3, #31]
 8019cd2:	6a3b      	ldr	r3, [r7, #32]
 8019cd4:	7fdb      	ldrb	r3, [r3, #31]
 8019cd6:	429a      	cmp	r2, r3
 8019cd8:	d803      	bhi.n	8019ce2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cdc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019cde:	69fb      	ldr	r3, [r7, #28]
 8019ce0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8019ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ce4:	681b      	ldr	r3, [r3, #0]
 8019ce6:	2b00      	cmp	r3, #0
 8019ce8:	d001      	beq.n	8019cee <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8019cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cec:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8019cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d1cb      	bne.n	8019c92 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8019cfa:	6a3b      	ldr	r3, [r7, #32]
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	d008      	beq.n	8019d12 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019d00:	69b9      	ldr	r1, [r7, #24]
 8019d02:	6a38      	ldr	r0, [r7, #32]
 8019d04:	f7ff ff0e 	bl	8019b24 <ip_reass_free_complete_datagram>
 8019d08:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8019d0a:	697a      	ldr	r2, [r7, #20]
 8019d0c:	68fb      	ldr	r3, [r7, #12]
 8019d0e:	4413      	add	r3, r2
 8019d10:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019d12:	697a      	ldr	r2, [r7, #20]
 8019d14:	683b      	ldr	r3, [r7, #0]
 8019d16:	429a      	cmp	r2, r3
 8019d18:	da02      	bge.n	8019d20 <ip_reass_remove_oldest_datagram+0xb4>
 8019d1a:	693b      	ldr	r3, [r7, #16]
 8019d1c:	2b01      	cmp	r3, #1
 8019d1e:	dcac      	bgt.n	8019c7a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019d20:	697b      	ldr	r3, [r7, #20]
}
 8019d22:	4618      	mov	r0, r3
 8019d24:	3728      	adds	r7, #40	; 0x28
 8019d26:	46bd      	mov	sp, r7
 8019d28:	bd80      	pop	{r7, pc}
 8019d2a:	bf00      	nop
 8019d2c:	200111dc 	.word	0x200111dc

08019d30 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019d30:	b580      	push	{r7, lr}
 8019d32:	b084      	sub	sp, #16
 8019d34:	af00      	add	r7, sp, #0
 8019d36:	6078      	str	r0, [r7, #4]
 8019d38:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019d3a:	2004      	movs	r0, #4
 8019d3c:	f7f6 fcf8 	bl	8010730 <memp_malloc>
 8019d40:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019d42:	68fb      	ldr	r3, [r7, #12]
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	d110      	bne.n	8019d6a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019d48:	6839      	ldr	r1, [r7, #0]
 8019d4a:	6878      	ldr	r0, [r7, #4]
 8019d4c:	f7ff ff8e 	bl	8019c6c <ip_reass_remove_oldest_datagram>
 8019d50:	4602      	mov	r2, r0
 8019d52:	683b      	ldr	r3, [r7, #0]
 8019d54:	4293      	cmp	r3, r2
 8019d56:	dc03      	bgt.n	8019d60 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019d58:	2004      	movs	r0, #4
 8019d5a:	f7f6 fce9 	bl	8010730 <memp_malloc>
 8019d5e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019d60:	68fb      	ldr	r3, [r7, #12]
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	d101      	bne.n	8019d6a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019d66:	2300      	movs	r3, #0
 8019d68:	e016      	b.n	8019d98 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019d6a:	2220      	movs	r2, #32
 8019d6c:	2100      	movs	r1, #0
 8019d6e:	68f8      	ldr	r0, [r7, #12]
 8019d70:	f000 ffb8 	bl	801ace4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019d74:	68fb      	ldr	r3, [r7, #12]
 8019d76:	220f      	movs	r2, #15
 8019d78:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019d7a:	4b09      	ldr	r3, [pc, #36]	; (8019da0 <ip_reass_enqueue_new_datagram+0x70>)
 8019d7c:	681a      	ldr	r2, [r3, #0]
 8019d7e:	68fb      	ldr	r3, [r7, #12]
 8019d80:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8019d82:	4a07      	ldr	r2, [pc, #28]	; (8019da0 <ip_reass_enqueue_new_datagram+0x70>)
 8019d84:	68fb      	ldr	r3, [r7, #12]
 8019d86:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019d88:	68fb      	ldr	r3, [r7, #12]
 8019d8a:	3308      	adds	r3, #8
 8019d8c:	2214      	movs	r2, #20
 8019d8e:	6879      	ldr	r1, [r7, #4]
 8019d90:	4618      	mov	r0, r3
 8019d92:	f000 ff99 	bl	801acc8 <memcpy>
  return ipr;
 8019d96:	68fb      	ldr	r3, [r7, #12]
}
 8019d98:	4618      	mov	r0, r3
 8019d9a:	3710      	adds	r7, #16
 8019d9c:	46bd      	mov	sp, r7
 8019d9e:	bd80      	pop	{r7, pc}
 8019da0:	200111dc 	.word	0x200111dc

08019da4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019da4:	b580      	push	{r7, lr}
 8019da6:	b082      	sub	sp, #8
 8019da8:	af00      	add	r7, sp, #0
 8019daa:	6078      	str	r0, [r7, #4]
 8019dac:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8019dae:	4b10      	ldr	r3, [pc, #64]	; (8019df0 <ip_reass_dequeue_datagram+0x4c>)
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	687a      	ldr	r2, [r7, #4]
 8019db4:	429a      	cmp	r2, r3
 8019db6:	d104      	bne.n	8019dc2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	681b      	ldr	r3, [r3, #0]
 8019dbc:	4a0c      	ldr	r2, [pc, #48]	; (8019df0 <ip_reass_dequeue_datagram+0x4c>)
 8019dbe:	6013      	str	r3, [r2, #0]
 8019dc0:	e00d      	b.n	8019dde <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8019dc2:	683b      	ldr	r3, [r7, #0]
 8019dc4:	2b00      	cmp	r3, #0
 8019dc6:	d106      	bne.n	8019dd6 <ip_reass_dequeue_datagram+0x32>
 8019dc8:	4b0a      	ldr	r3, [pc, #40]	; (8019df4 <ip_reass_dequeue_datagram+0x50>)
 8019dca:	f240 1245 	movw	r2, #325	; 0x145
 8019dce:	490a      	ldr	r1, [pc, #40]	; (8019df8 <ip_reass_dequeue_datagram+0x54>)
 8019dd0:	480a      	ldr	r0, [pc, #40]	; (8019dfc <ip_reass_dequeue_datagram+0x58>)
 8019dd2:	f000 ff8f 	bl	801acf4 <iprintf>
    prev->next = ipr->next;
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	681a      	ldr	r2, [r3, #0]
 8019dda:	683b      	ldr	r3, [r7, #0]
 8019ddc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8019dde:	6879      	ldr	r1, [r7, #4]
 8019de0:	2004      	movs	r0, #4
 8019de2:	f7f6 fd1b 	bl	801081c <memp_free>
}
 8019de6:	bf00      	nop
 8019de8:	3708      	adds	r7, #8
 8019dea:	46bd      	mov	sp, r7
 8019dec:	bd80      	pop	{r7, pc}
 8019dee:	bf00      	nop
 8019df0:	200111dc 	.word	0x200111dc
 8019df4:	0801f668 	.word	0x0801f668
 8019df8:	0801f730 	.word	0x0801f730
 8019dfc:	0801f6b0 	.word	0x0801f6b0

08019e00 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019e00:	b580      	push	{r7, lr}
 8019e02:	b08c      	sub	sp, #48	; 0x30
 8019e04:	af00      	add	r7, sp, #0
 8019e06:	60f8      	str	r0, [r7, #12]
 8019e08:	60b9      	str	r1, [r7, #8]
 8019e0a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8019e0c:	2300      	movs	r3, #0
 8019e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019e10:	2301      	movs	r3, #1
 8019e12:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019e14:	68bb      	ldr	r3, [r7, #8]
 8019e16:	685b      	ldr	r3, [r3, #4]
 8019e18:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019e1a:	69fb      	ldr	r3, [r7, #28]
 8019e1c:	885b      	ldrh	r3, [r3, #2]
 8019e1e:	b29b      	uxth	r3, r3
 8019e20:	4618      	mov	r0, r3
 8019e22:	f7f5 ffad 	bl	800fd80 <lwip_htons>
 8019e26:	4603      	mov	r3, r0
 8019e28:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8019e2a:	69fb      	ldr	r3, [r7, #28]
 8019e2c:	781b      	ldrb	r3, [r3, #0]
 8019e2e:	f003 030f 	and.w	r3, r3, #15
 8019e32:	b2db      	uxtb	r3, r3
 8019e34:	009b      	lsls	r3, r3, #2
 8019e36:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019e38:	7e7b      	ldrb	r3, [r7, #25]
 8019e3a:	b29b      	uxth	r3, r3
 8019e3c:	8b7a      	ldrh	r2, [r7, #26]
 8019e3e:	429a      	cmp	r2, r3
 8019e40:	d202      	bcs.n	8019e48 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e42:	f04f 33ff 	mov.w	r3, #4294967295
 8019e46:	e135      	b.n	801a0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019e48:	7e7b      	ldrb	r3, [r7, #25]
 8019e4a:	b29b      	uxth	r3, r3
 8019e4c:	8b7a      	ldrh	r2, [r7, #26]
 8019e4e:	1ad3      	subs	r3, r2, r3
 8019e50:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8019e52:	69fb      	ldr	r3, [r7, #28]
 8019e54:	88db      	ldrh	r3, [r3, #6]
 8019e56:	b29b      	uxth	r3, r3
 8019e58:	4618      	mov	r0, r3
 8019e5a:	f7f5 ff91 	bl	800fd80 <lwip_htons>
 8019e5e:	4603      	mov	r3, r0
 8019e60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019e64:	b29b      	uxth	r3, r3
 8019e66:	00db      	lsls	r3, r3, #3
 8019e68:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019e6a:	68bb      	ldr	r3, [r7, #8]
 8019e6c:	685b      	ldr	r3, [r3, #4]
 8019e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8019e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e72:	2200      	movs	r2, #0
 8019e74:	701a      	strb	r2, [r3, #0]
 8019e76:	2200      	movs	r2, #0
 8019e78:	705a      	strb	r2, [r3, #1]
 8019e7a:	2200      	movs	r2, #0
 8019e7c:	709a      	strb	r2, [r3, #2]
 8019e7e:	2200      	movs	r2, #0
 8019e80:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e84:	8afa      	ldrh	r2, [r7, #22]
 8019e86:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019e88:	8afa      	ldrh	r2, [r7, #22]
 8019e8a:	8b7b      	ldrh	r3, [r7, #26]
 8019e8c:	4413      	add	r3, r2
 8019e8e:	b29a      	uxth	r2, r3
 8019e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e92:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8019e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e96:	88db      	ldrh	r3, [r3, #6]
 8019e98:	b29b      	uxth	r3, r3
 8019e9a:	8afa      	ldrh	r2, [r7, #22]
 8019e9c:	429a      	cmp	r2, r3
 8019e9e:	d902      	bls.n	8019ea6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8019ea4:	e106      	b.n	801a0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019ea6:	68fb      	ldr	r3, [r7, #12]
 8019ea8:	685b      	ldr	r3, [r3, #4]
 8019eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8019eac:	e068      	b.n	8019f80 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8019eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eb0:	685b      	ldr	r3, [r3, #4]
 8019eb2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8019eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019eb6:	889b      	ldrh	r3, [r3, #4]
 8019eb8:	b29a      	uxth	r2, r3
 8019eba:	693b      	ldr	r3, [r7, #16]
 8019ebc:	889b      	ldrh	r3, [r3, #4]
 8019ebe:	b29b      	uxth	r3, r3
 8019ec0:	429a      	cmp	r2, r3
 8019ec2:	d235      	bcs.n	8019f30 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ec8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8019eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	d020      	beq.n	8019f12 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8019ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ed2:	889b      	ldrh	r3, [r3, #4]
 8019ed4:	b29a      	uxth	r2, r3
 8019ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ed8:	88db      	ldrh	r3, [r3, #6]
 8019eda:	b29b      	uxth	r3, r3
 8019edc:	429a      	cmp	r2, r3
 8019ede:	d307      	bcc.n	8019ef0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8019ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ee2:	88db      	ldrh	r3, [r3, #6]
 8019ee4:	b29a      	uxth	r2, r3
 8019ee6:	693b      	ldr	r3, [r7, #16]
 8019ee8:	889b      	ldrh	r3, [r3, #4]
 8019eea:	b29b      	uxth	r3, r3
 8019eec:	429a      	cmp	r2, r3
 8019eee:	d902      	bls.n	8019ef6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8019ef4:	e0de      	b.n	801a0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ef8:	68ba      	ldr	r2, [r7, #8]
 8019efa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019efe:	88db      	ldrh	r3, [r3, #6]
 8019f00:	b29a      	uxth	r2, r3
 8019f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f04:	889b      	ldrh	r3, [r3, #4]
 8019f06:	b29b      	uxth	r3, r3
 8019f08:	429a      	cmp	r2, r3
 8019f0a:	d03d      	beq.n	8019f88 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019f0c:	2300      	movs	r3, #0
 8019f0e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019f10:	e03a      	b.n	8019f88 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8019f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f14:	88db      	ldrh	r3, [r3, #6]
 8019f16:	b29a      	uxth	r2, r3
 8019f18:	693b      	ldr	r3, [r7, #16]
 8019f1a:	889b      	ldrh	r3, [r3, #4]
 8019f1c:	b29b      	uxth	r3, r3
 8019f1e:	429a      	cmp	r2, r3
 8019f20:	d902      	bls.n	8019f28 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019f22:	f04f 33ff 	mov.w	r3, #4294967295
 8019f26:	e0c5      	b.n	801a0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8019f28:	68fb      	ldr	r3, [r7, #12]
 8019f2a:	68ba      	ldr	r2, [r7, #8]
 8019f2c:	605a      	str	r2, [r3, #4]
      break;
 8019f2e:	e02b      	b.n	8019f88 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f32:	889b      	ldrh	r3, [r3, #4]
 8019f34:	b29a      	uxth	r2, r3
 8019f36:	693b      	ldr	r3, [r7, #16]
 8019f38:	889b      	ldrh	r3, [r3, #4]
 8019f3a:	b29b      	uxth	r3, r3
 8019f3c:	429a      	cmp	r2, r3
 8019f3e:	d102      	bne.n	8019f46 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019f40:	f04f 33ff 	mov.w	r3, #4294967295
 8019f44:	e0b6      	b.n	801a0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f48:	889b      	ldrh	r3, [r3, #4]
 8019f4a:	b29a      	uxth	r2, r3
 8019f4c:	693b      	ldr	r3, [r7, #16]
 8019f4e:	88db      	ldrh	r3, [r3, #6]
 8019f50:	b29b      	uxth	r3, r3
 8019f52:	429a      	cmp	r2, r3
 8019f54:	d202      	bcs.n	8019f5c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019f56:	f04f 33ff 	mov.w	r3, #4294967295
 8019f5a:	e0ab      	b.n	801a0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	d009      	beq.n	8019f76 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8019f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f64:	88db      	ldrh	r3, [r3, #6]
 8019f66:	b29a      	uxth	r2, r3
 8019f68:	693b      	ldr	r3, [r7, #16]
 8019f6a:	889b      	ldrh	r3, [r3, #4]
 8019f6c:	b29b      	uxth	r3, r3
 8019f6e:	429a      	cmp	r2, r3
 8019f70:	d001      	beq.n	8019f76 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019f72:	2300      	movs	r3, #0
 8019f74:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019f76:	693b      	ldr	r3, [r7, #16]
 8019f78:	681b      	ldr	r3, [r3, #0]
 8019f7a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8019f7c:	693b      	ldr	r3, [r7, #16]
 8019f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8019f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	d193      	bne.n	8019eae <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8019f86:	e000      	b.n	8019f8a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019f88:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8019f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f8c:	2b00      	cmp	r3, #0
 8019f8e:	d12d      	bne.n	8019fec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8019f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	d01c      	beq.n	8019fd0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8019f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f98:	88db      	ldrh	r3, [r3, #6]
 8019f9a:	b29a      	uxth	r2, r3
 8019f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f9e:	889b      	ldrh	r3, [r3, #4]
 8019fa0:	b29b      	uxth	r3, r3
 8019fa2:	429a      	cmp	r2, r3
 8019fa4:	d906      	bls.n	8019fb4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8019fa6:	4b45      	ldr	r3, [pc, #276]	; (801a0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019fa8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8019fac:	4944      	ldr	r1, [pc, #272]	; (801a0c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019fae:	4845      	ldr	r0, [pc, #276]	; (801a0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019fb0:	f000 fea0 	bl	801acf4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fb6:	68ba      	ldr	r2, [r7, #8]
 8019fb8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8019fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fbc:	88db      	ldrh	r3, [r3, #6]
 8019fbe:	b29a      	uxth	r2, r3
 8019fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fc2:	889b      	ldrh	r3, [r3, #4]
 8019fc4:	b29b      	uxth	r3, r3
 8019fc6:	429a      	cmp	r2, r3
 8019fc8:	d010      	beq.n	8019fec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8019fca:	2300      	movs	r3, #0
 8019fcc:	623b      	str	r3, [r7, #32]
 8019fce:	e00d      	b.n	8019fec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8019fd0:	68fb      	ldr	r3, [r7, #12]
 8019fd2:	685b      	ldr	r3, [r3, #4]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d006      	beq.n	8019fe6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019fd8:	4b38      	ldr	r3, [pc, #224]	; (801a0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019fda:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8019fde:	493a      	ldr	r1, [pc, #232]	; (801a0c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8019fe0:	4838      	ldr	r0, [pc, #224]	; (801a0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019fe2:	f000 fe87 	bl	801acf4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8019fe6:	68fb      	ldr	r3, [r7, #12]
 8019fe8:	68ba      	ldr	r2, [r7, #8]
 8019fea:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	2b00      	cmp	r3, #0
 8019ff0:	d105      	bne.n	8019ffe <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8019ff2:	68fb      	ldr	r3, [r7, #12]
 8019ff4:	7f9b      	ldrb	r3, [r3, #30]
 8019ff6:	f003 0301 	and.w	r3, r3, #1
 8019ffa:	2b00      	cmp	r3, #0
 8019ffc:	d059      	beq.n	801a0b2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8019ffe:	6a3b      	ldr	r3, [r7, #32]
 801a000:	2b00      	cmp	r3, #0
 801a002:	d04f      	beq.n	801a0a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801a004:	68fb      	ldr	r3, [r7, #12]
 801a006:	685b      	ldr	r3, [r3, #4]
 801a008:	2b00      	cmp	r3, #0
 801a00a:	d006      	beq.n	801a01a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801a00c:	68fb      	ldr	r3, [r7, #12]
 801a00e:	685b      	ldr	r3, [r3, #4]
 801a010:	685b      	ldr	r3, [r3, #4]
 801a012:	889b      	ldrh	r3, [r3, #4]
 801a014:	b29b      	uxth	r3, r3
 801a016:	2b00      	cmp	r3, #0
 801a018:	d002      	beq.n	801a020 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801a01a:	2300      	movs	r3, #0
 801a01c:	623b      	str	r3, [r7, #32]
 801a01e:	e041      	b.n	801a0a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801a020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a022:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801a024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a02a:	e012      	b.n	801a052 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801a02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a02e:	685b      	ldr	r3, [r3, #4]
 801a030:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801a032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a034:	88db      	ldrh	r3, [r3, #6]
 801a036:	b29a      	uxth	r2, r3
 801a038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a03a:	889b      	ldrh	r3, [r3, #4]
 801a03c:	b29b      	uxth	r3, r3
 801a03e:	429a      	cmp	r2, r3
 801a040:	d002      	beq.n	801a048 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801a042:	2300      	movs	r3, #0
 801a044:	623b      	str	r3, [r7, #32]
            break;
 801a046:	e007      	b.n	801a058 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801a048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a04a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801a04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a04e:	681b      	ldr	r3, [r3, #0]
 801a050:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a054:	2b00      	cmp	r3, #0
 801a056:	d1e9      	bne.n	801a02c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801a058:	6a3b      	ldr	r3, [r7, #32]
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	d022      	beq.n	801a0a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801a05e:	68fb      	ldr	r3, [r7, #12]
 801a060:	685b      	ldr	r3, [r3, #4]
 801a062:	2b00      	cmp	r3, #0
 801a064:	d106      	bne.n	801a074 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801a066:	4b15      	ldr	r3, [pc, #84]	; (801a0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a068:	f240 12df 	movw	r2, #479	; 0x1df
 801a06c:	4917      	ldr	r1, [pc, #92]	; (801a0cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a06e:	4815      	ldr	r0, [pc, #84]	; (801a0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a070:	f000 fe40 	bl	801acf4 <iprintf>
          LWIP_ASSERT("sanity check",
 801a074:	68fb      	ldr	r3, [r7, #12]
 801a076:	685b      	ldr	r3, [r3, #4]
 801a078:	685b      	ldr	r3, [r3, #4]
 801a07a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a07c:	429a      	cmp	r2, r3
 801a07e:	d106      	bne.n	801a08e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801a080:	4b0e      	ldr	r3, [pc, #56]	; (801a0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a082:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801a086:	4911      	ldr	r1, [pc, #68]	; (801a0cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a088:	480e      	ldr	r0, [pc, #56]	; (801a0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a08a:	f000 fe33 	bl	801acf4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801a08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a090:	681b      	ldr	r3, [r3, #0]
 801a092:	2b00      	cmp	r3, #0
 801a094:	d006      	beq.n	801a0a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801a096:	4b09      	ldr	r3, [pc, #36]	; (801a0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a098:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801a09c:	490c      	ldr	r1, [pc, #48]	; (801a0d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801a09e:	4809      	ldr	r0, [pc, #36]	; (801a0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a0a0:	f000 fe28 	bl	801acf4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801a0a4:	6a3b      	ldr	r3, [r7, #32]
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	bf14      	ite	ne
 801a0aa:	2301      	movne	r3, #1
 801a0ac:	2300      	moveq	r3, #0
 801a0ae:	b2db      	uxtb	r3, r3
 801a0b0:	e000      	b.n	801a0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801a0b2:	2300      	movs	r3, #0
}
 801a0b4:	4618      	mov	r0, r3
 801a0b6:	3730      	adds	r7, #48	; 0x30
 801a0b8:	46bd      	mov	sp, r7
 801a0ba:	bd80      	pop	{r7, pc}
 801a0bc:	0801f668 	.word	0x0801f668
 801a0c0:	0801f74c 	.word	0x0801f74c
 801a0c4:	0801f6b0 	.word	0x0801f6b0
 801a0c8:	0801f76c 	.word	0x0801f76c
 801a0cc:	0801f7a4 	.word	0x0801f7a4
 801a0d0:	0801f7b4 	.word	0x0801f7b4

0801a0d4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a0d4:	b580      	push	{r7, lr}
 801a0d6:	b08e      	sub	sp, #56	; 0x38
 801a0d8:	af00      	add	r7, sp, #0
 801a0da:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	685b      	ldr	r3, [r3, #4]
 801a0e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0e4:	781b      	ldrb	r3, [r3, #0]
 801a0e6:	f003 030f 	and.w	r3, r3, #15
 801a0ea:	b2db      	uxtb	r3, r3
 801a0ec:	009b      	lsls	r3, r3, #2
 801a0ee:	b2db      	uxtb	r3, r3
 801a0f0:	2b14      	cmp	r3, #20
 801a0f2:	f040 8171 	bne.w	801a3d8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0f8:	88db      	ldrh	r3, [r3, #6]
 801a0fa:	b29b      	uxth	r3, r3
 801a0fc:	4618      	mov	r0, r3
 801a0fe:	f7f5 fe3f 	bl	800fd80 <lwip_htons>
 801a102:	4603      	mov	r3, r0
 801a104:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a108:	b29b      	uxth	r3, r3
 801a10a:	00db      	lsls	r3, r3, #3
 801a10c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a110:	885b      	ldrh	r3, [r3, #2]
 801a112:	b29b      	uxth	r3, r3
 801a114:	4618      	mov	r0, r3
 801a116:	f7f5 fe33 	bl	800fd80 <lwip_htons>
 801a11a:	4603      	mov	r3, r0
 801a11c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a120:	781b      	ldrb	r3, [r3, #0]
 801a122:	f003 030f 	and.w	r3, r3, #15
 801a126:	b2db      	uxtb	r3, r3
 801a128:	009b      	lsls	r3, r3, #2
 801a12a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801a12e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a132:	b29b      	uxth	r3, r3
 801a134:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a136:	429a      	cmp	r2, r3
 801a138:	f0c0 8150 	bcc.w	801a3dc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a13c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a140:	b29b      	uxth	r3, r3
 801a142:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a144:	1ad3      	subs	r3, r2, r3
 801a146:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a148:	6878      	ldr	r0, [r7, #4]
 801a14a:	f7f7 facb 	bl	80116e4 <pbuf_clen>
 801a14e:	4603      	mov	r3, r0
 801a150:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a152:	4b8c      	ldr	r3, [pc, #560]	; (801a384 <ip4_reass+0x2b0>)
 801a154:	881b      	ldrh	r3, [r3, #0]
 801a156:	461a      	mov	r2, r3
 801a158:	8c3b      	ldrh	r3, [r7, #32]
 801a15a:	4413      	add	r3, r2
 801a15c:	2b0a      	cmp	r3, #10
 801a15e:	dd10      	ble.n	801a182 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a160:	8c3b      	ldrh	r3, [r7, #32]
 801a162:	4619      	mov	r1, r3
 801a164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a166:	f7ff fd81 	bl	8019c6c <ip_reass_remove_oldest_datagram>
 801a16a:	4603      	mov	r3, r0
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	f000 8137 	beq.w	801a3e0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a172:	4b84      	ldr	r3, [pc, #528]	; (801a384 <ip4_reass+0x2b0>)
 801a174:	881b      	ldrh	r3, [r3, #0]
 801a176:	461a      	mov	r2, r3
 801a178:	8c3b      	ldrh	r3, [r7, #32]
 801a17a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a17c:	2b0a      	cmp	r3, #10
 801a17e:	f300 812f 	bgt.w	801a3e0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a182:	4b81      	ldr	r3, [pc, #516]	; (801a388 <ip4_reass+0x2b4>)
 801a184:	681b      	ldr	r3, [r3, #0]
 801a186:	633b      	str	r3, [r7, #48]	; 0x30
 801a188:	e015      	b.n	801a1b6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a18c:	695a      	ldr	r2, [r3, #20]
 801a18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a190:	68db      	ldr	r3, [r3, #12]
 801a192:	429a      	cmp	r2, r3
 801a194:	d10c      	bne.n	801a1b0 <ip4_reass+0xdc>
 801a196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a198:	699a      	ldr	r2, [r3, #24]
 801a19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a19c:	691b      	ldr	r3, [r3, #16]
 801a19e:	429a      	cmp	r2, r3
 801a1a0:	d106      	bne.n	801a1b0 <ip4_reass+0xdc>
 801a1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1a4:	899a      	ldrh	r2, [r3, #12]
 801a1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1a8:	889b      	ldrh	r3, [r3, #4]
 801a1aa:	b29b      	uxth	r3, r3
 801a1ac:	429a      	cmp	r2, r3
 801a1ae:	d006      	beq.n	801a1be <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1b2:	681b      	ldr	r3, [r3, #0]
 801a1b4:	633b      	str	r3, [r7, #48]	; 0x30
 801a1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	d1e6      	bne.n	801a18a <ip4_reass+0xb6>
 801a1bc:	e000      	b.n	801a1c0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a1be:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	d109      	bne.n	801a1da <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a1c6:	8c3b      	ldrh	r3, [r7, #32]
 801a1c8:	4619      	mov	r1, r3
 801a1ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a1cc:	f7ff fdb0 	bl	8019d30 <ip_reass_enqueue_new_datagram>
 801a1d0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	d11c      	bne.n	801a212 <ip4_reass+0x13e>
      goto nullreturn;
 801a1d8:	e105      	b.n	801a3e6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1dc:	88db      	ldrh	r3, [r3, #6]
 801a1de:	b29b      	uxth	r3, r3
 801a1e0:	4618      	mov	r0, r3
 801a1e2:	f7f5 fdcd 	bl	800fd80 <lwip_htons>
 801a1e6:	4603      	mov	r3, r0
 801a1e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a1ec:	2b00      	cmp	r3, #0
 801a1ee:	d110      	bne.n	801a212 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1f2:	89db      	ldrh	r3, [r3, #14]
 801a1f4:	4618      	mov	r0, r3
 801a1f6:	f7f5 fdc3 	bl	800fd80 <lwip_htons>
 801a1fa:	4603      	mov	r3, r0
 801a1fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a200:	2b00      	cmp	r3, #0
 801a202:	d006      	beq.n	801a212 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a206:	3308      	adds	r3, #8
 801a208:	2214      	movs	r2, #20
 801a20a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a20c:	4618      	mov	r0, r3
 801a20e:	f000 fd5b 	bl	801acc8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a214:	88db      	ldrh	r3, [r3, #6]
 801a216:	b29b      	uxth	r3, r3
 801a218:	f003 0320 	and.w	r3, r3, #32
 801a21c:	2b00      	cmp	r3, #0
 801a21e:	bf0c      	ite	eq
 801a220:	2301      	moveq	r3, #1
 801a222:	2300      	movne	r3, #0
 801a224:	b2db      	uxtb	r3, r3
 801a226:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a228:	69fb      	ldr	r3, [r7, #28]
 801a22a:	2b00      	cmp	r3, #0
 801a22c:	d00e      	beq.n	801a24c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801a22e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a230:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a232:	4413      	add	r3, r2
 801a234:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a236:	8b7a      	ldrh	r2, [r7, #26]
 801a238:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a23a:	429a      	cmp	r2, r3
 801a23c:	f0c0 80a0 	bcc.w	801a380 <ip4_reass+0x2ac>
 801a240:	8b7b      	ldrh	r3, [r7, #26]
 801a242:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801a246:	4293      	cmp	r3, r2
 801a248:	f200 809a 	bhi.w	801a380 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a24c:	69fa      	ldr	r2, [r7, #28]
 801a24e:	6879      	ldr	r1, [r7, #4]
 801a250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a252:	f7ff fdd5 	bl	8019e00 <ip_reass_chain_frag_into_datagram_and_validate>
 801a256:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a258:	697b      	ldr	r3, [r7, #20]
 801a25a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a25e:	f000 809b 	beq.w	801a398 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a262:	4b48      	ldr	r3, [pc, #288]	; (801a384 <ip4_reass+0x2b0>)
 801a264:	881a      	ldrh	r2, [r3, #0]
 801a266:	8c3b      	ldrh	r3, [r7, #32]
 801a268:	4413      	add	r3, r2
 801a26a:	b29a      	uxth	r2, r3
 801a26c:	4b45      	ldr	r3, [pc, #276]	; (801a384 <ip4_reass+0x2b0>)
 801a26e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a270:	69fb      	ldr	r3, [r7, #28]
 801a272:	2b00      	cmp	r3, #0
 801a274:	d00d      	beq.n	801a292 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a276:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a278:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a27a:	4413      	add	r3, r2
 801a27c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a280:	8a7a      	ldrh	r2, [r7, #18]
 801a282:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a286:	7f9b      	ldrb	r3, [r3, #30]
 801a288:	f043 0301 	orr.w	r3, r3, #1
 801a28c:	b2da      	uxtb	r2, r3
 801a28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a290:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a292:	697b      	ldr	r3, [r7, #20]
 801a294:	2b01      	cmp	r3, #1
 801a296:	d171      	bne.n	801a37c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a29a:	8b9b      	ldrh	r3, [r3, #28]
 801a29c:	3314      	adds	r3, #20
 801a29e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2a2:	685b      	ldr	r3, [r3, #4]
 801a2a4:	685b      	ldr	r3, [r3, #4]
 801a2a6:	681b      	ldr	r3, [r3, #0]
 801a2a8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2ac:	685b      	ldr	r3, [r3, #4]
 801a2ae:	685b      	ldr	r3, [r3, #4]
 801a2b0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2b4:	3308      	adds	r3, #8
 801a2b6:	2214      	movs	r2, #20
 801a2b8:	4619      	mov	r1, r3
 801a2ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a2bc:	f000 fd04 	bl	801acc8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a2c0:	8a3b      	ldrh	r3, [r7, #16]
 801a2c2:	4618      	mov	r0, r3
 801a2c4:	f7f5 fd5c 	bl	800fd80 <lwip_htons>
 801a2c8:	4603      	mov	r3, r0
 801a2ca:	461a      	mov	r2, r3
 801a2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2ce:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2d2:	2200      	movs	r2, #0
 801a2d4:	719a      	strb	r2, [r3, #6]
 801a2d6:	2200      	movs	r2, #0
 801a2d8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2dc:	2200      	movs	r2, #0
 801a2de:	729a      	strb	r2, [r3, #10]
 801a2e0:	2200      	movs	r2, #0
 801a2e2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2e6:	685b      	ldr	r3, [r3, #4]
 801a2e8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a2ea:	e00d      	b.n	801a308 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801a2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2ee:	685b      	ldr	r3, [r3, #4]
 801a2f0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a2f2:	2114      	movs	r1, #20
 801a2f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a2f6:	f7f7 f8af 	bl	8011458 <pbuf_remove_header>
      pbuf_cat(p, r);
 801a2fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a2fc:	6878      	ldr	r0, [r7, #4]
 801a2fe:	f7f7 fa31 	bl	8011764 <pbuf_cat>
      r = iprh->next_pbuf;
 801a302:	68fb      	ldr	r3, [r7, #12]
 801a304:	681b      	ldr	r3, [r3, #0]
 801a306:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801a308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	d1ee      	bne.n	801a2ec <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a30e:	4b1e      	ldr	r3, [pc, #120]	; (801a388 <ip4_reass+0x2b4>)
 801a310:	681b      	ldr	r3, [r3, #0]
 801a312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a314:	429a      	cmp	r2, r3
 801a316:	d102      	bne.n	801a31e <ip4_reass+0x24a>
      ipr_prev = NULL;
 801a318:	2300      	movs	r3, #0
 801a31a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a31c:	e010      	b.n	801a340 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a31e:	4b1a      	ldr	r3, [pc, #104]	; (801a388 <ip4_reass+0x2b4>)
 801a320:	681b      	ldr	r3, [r3, #0]
 801a322:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a324:	e007      	b.n	801a336 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801a326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a328:	681b      	ldr	r3, [r3, #0]
 801a32a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a32c:	429a      	cmp	r2, r3
 801a32e:	d006      	beq.n	801a33e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a332:	681b      	ldr	r3, [r3, #0]
 801a334:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a338:	2b00      	cmp	r3, #0
 801a33a:	d1f4      	bne.n	801a326 <ip4_reass+0x252>
 801a33c:	e000      	b.n	801a340 <ip4_reass+0x26c>
          break;
 801a33e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a340:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a342:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a344:	f7ff fd2e 	bl	8019da4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801a348:	6878      	ldr	r0, [r7, #4]
 801a34a:	f7f7 f9cb 	bl	80116e4 <pbuf_clen>
 801a34e:	4603      	mov	r3, r0
 801a350:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801a352:	4b0c      	ldr	r3, [pc, #48]	; (801a384 <ip4_reass+0x2b0>)
 801a354:	881b      	ldrh	r3, [r3, #0]
 801a356:	8c3a      	ldrh	r2, [r7, #32]
 801a358:	429a      	cmp	r2, r3
 801a35a:	d906      	bls.n	801a36a <ip4_reass+0x296>
 801a35c:	4b0b      	ldr	r3, [pc, #44]	; (801a38c <ip4_reass+0x2b8>)
 801a35e:	f240 229b 	movw	r2, #667	; 0x29b
 801a362:	490b      	ldr	r1, [pc, #44]	; (801a390 <ip4_reass+0x2bc>)
 801a364:	480b      	ldr	r0, [pc, #44]	; (801a394 <ip4_reass+0x2c0>)
 801a366:	f000 fcc5 	bl	801acf4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801a36a:	4b06      	ldr	r3, [pc, #24]	; (801a384 <ip4_reass+0x2b0>)
 801a36c:	881a      	ldrh	r2, [r3, #0]
 801a36e:	8c3b      	ldrh	r3, [r7, #32]
 801a370:	1ad3      	subs	r3, r2, r3
 801a372:	b29a      	uxth	r2, r3
 801a374:	4b03      	ldr	r3, [pc, #12]	; (801a384 <ip4_reass+0x2b0>)
 801a376:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	e038      	b.n	801a3ee <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a37c:	2300      	movs	r3, #0
 801a37e:	e036      	b.n	801a3ee <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801a380:	bf00      	nop
 801a382:	e00a      	b.n	801a39a <ip4_reass+0x2c6>
 801a384:	200111e0 	.word	0x200111e0
 801a388:	200111dc 	.word	0x200111dc
 801a38c:	0801f668 	.word	0x0801f668
 801a390:	0801f7d8 	.word	0x0801f7d8
 801a394:	0801f6b0 	.word	0x0801f6b0
    goto nullreturn_ipr;
 801a398:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801a39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a39c:	2b00      	cmp	r3, #0
 801a39e:	d106      	bne.n	801a3ae <ip4_reass+0x2da>
 801a3a0:	4b15      	ldr	r3, [pc, #84]	; (801a3f8 <ip4_reass+0x324>)
 801a3a2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801a3a6:	4915      	ldr	r1, [pc, #84]	; (801a3fc <ip4_reass+0x328>)
 801a3a8:	4815      	ldr	r0, [pc, #84]	; (801a400 <ip4_reass+0x32c>)
 801a3aa:	f000 fca3 	bl	801acf4 <iprintf>
  if (ipr->p == NULL) {
 801a3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a3b0:	685b      	ldr	r3, [r3, #4]
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	d116      	bne.n	801a3e4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801a3b6:	4b13      	ldr	r3, [pc, #76]	; (801a404 <ip4_reass+0x330>)
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a3bc:	429a      	cmp	r2, r3
 801a3be:	d006      	beq.n	801a3ce <ip4_reass+0x2fa>
 801a3c0:	4b0d      	ldr	r3, [pc, #52]	; (801a3f8 <ip4_reass+0x324>)
 801a3c2:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a3c6:	4910      	ldr	r1, [pc, #64]	; (801a408 <ip4_reass+0x334>)
 801a3c8:	480d      	ldr	r0, [pc, #52]	; (801a400 <ip4_reass+0x32c>)
 801a3ca:	f000 fc93 	bl	801acf4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801a3ce:	2100      	movs	r1, #0
 801a3d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a3d2:	f7ff fce7 	bl	8019da4 <ip_reass_dequeue_datagram>
 801a3d6:	e006      	b.n	801a3e6 <ip4_reass+0x312>
    goto nullreturn;
 801a3d8:	bf00      	nop
 801a3da:	e004      	b.n	801a3e6 <ip4_reass+0x312>
    goto nullreturn;
 801a3dc:	bf00      	nop
 801a3de:	e002      	b.n	801a3e6 <ip4_reass+0x312>
      goto nullreturn;
 801a3e0:	bf00      	nop
 801a3e2:	e000      	b.n	801a3e6 <ip4_reass+0x312>
  }

nullreturn:
 801a3e4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a3e6:	6878      	ldr	r0, [r7, #4]
 801a3e8:	f7f7 f8ee 	bl	80115c8 <pbuf_free>
  return NULL;
 801a3ec:	2300      	movs	r3, #0
}
 801a3ee:	4618      	mov	r0, r3
 801a3f0:	3738      	adds	r7, #56	; 0x38
 801a3f2:	46bd      	mov	sp, r7
 801a3f4:	bd80      	pop	{r7, pc}
 801a3f6:	bf00      	nop
 801a3f8:	0801f668 	.word	0x0801f668
 801a3fc:	0801f7f4 	.word	0x0801f7f4
 801a400:	0801f6b0 	.word	0x0801f6b0
 801a404:	200111dc 	.word	0x200111dc
 801a408:	0801f800 	.word	0x0801f800

0801a40c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a40c:	b580      	push	{r7, lr}
 801a40e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a410:	2005      	movs	r0, #5
 801a412:	f7f6 f98d 	bl	8010730 <memp_malloc>
 801a416:	4603      	mov	r3, r0
}
 801a418:	4618      	mov	r0, r3
 801a41a:	bd80      	pop	{r7, pc}

0801a41c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a41c:	b580      	push	{r7, lr}
 801a41e:	b082      	sub	sp, #8
 801a420:	af00      	add	r7, sp, #0
 801a422:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	2b00      	cmp	r3, #0
 801a428:	d106      	bne.n	801a438 <ip_frag_free_pbuf_custom_ref+0x1c>
 801a42a:	4b07      	ldr	r3, [pc, #28]	; (801a448 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801a42c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801a430:	4906      	ldr	r1, [pc, #24]	; (801a44c <ip_frag_free_pbuf_custom_ref+0x30>)
 801a432:	4807      	ldr	r0, [pc, #28]	; (801a450 <ip_frag_free_pbuf_custom_ref+0x34>)
 801a434:	f000 fc5e 	bl	801acf4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801a438:	6879      	ldr	r1, [r7, #4]
 801a43a:	2005      	movs	r0, #5
 801a43c:	f7f6 f9ee 	bl	801081c <memp_free>
}
 801a440:	bf00      	nop
 801a442:	3708      	adds	r7, #8
 801a444:	46bd      	mov	sp, r7
 801a446:	bd80      	pop	{r7, pc}
 801a448:	0801f668 	.word	0x0801f668
 801a44c:	0801f820 	.word	0x0801f820
 801a450:	0801f6b0 	.word	0x0801f6b0

0801a454 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a454:	b580      	push	{r7, lr}
 801a456:	b084      	sub	sp, #16
 801a458:	af00      	add	r7, sp, #0
 801a45a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801a460:	68fb      	ldr	r3, [r7, #12]
 801a462:	2b00      	cmp	r3, #0
 801a464:	d106      	bne.n	801a474 <ipfrag_free_pbuf_custom+0x20>
 801a466:	4b11      	ldr	r3, [pc, #68]	; (801a4ac <ipfrag_free_pbuf_custom+0x58>)
 801a468:	f240 22ce 	movw	r2, #718	; 0x2ce
 801a46c:	4910      	ldr	r1, [pc, #64]	; (801a4b0 <ipfrag_free_pbuf_custom+0x5c>)
 801a46e:	4811      	ldr	r0, [pc, #68]	; (801a4b4 <ipfrag_free_pbuf_custom+0x60>)
 801a470:	f000 fc40 	bl	801acf4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801a474:	68fa      	ldr	r2, [r7, #12]
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	429a      	cmp	r2, r3
 801a47a:	d006      	beq.n	801a48a <ipfrag_free_pbuf_custom+0x36>
 801a47c:	4b0b      	ldr	r3, [pc, #44]	; (801a4ac <ipfrag_free_pbuf_custom+0x58>)
 801a47e:	f240 22cf 	movw	r2, #719	; 0x2cf
 801a482:	490d      	ldr	r1, [pc, #52]	; (801a4b8 <ipfrag_free_pbuf_custom+0x64>)
 801a484:	480b      	ldr	r0, [pc, #44]	; (801a4b4 <ipfrag_free_pbuf_custom+0x60>)
 801a486:	f000 fc35 	bl	801acf4 <iprintf>
  if (pcr->original != NULL) {
 801a48a:	68fb      	ldr	r3, [r7, #12]
 801a48c:	695b      	ldr	r3, [r3, #20]
 801a48e:	2b00      	cmp	r3, #0
 801a490:	d004      	beq.n	801a49c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801a492:	68fb      	ldr	r3, [r7, #12]
 801a494:	695b      	ldr	r3, [r3, #20]
 801a496:	4618      	mov	r0, r3
 801a498:	f7f7 f896 	bl	80115c8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801a49c:	68f8      	ldr	r0, [r7, #12]
 801a49e:	f7ff ffbd 	bl	801a41c <ip_frag_free_pbuf_custom_ref>
}
 801a4a2:	bf00      	nop
 801a4a4:	3710      	adds	r7, #16
 801a4a6:	46bd      	mov	sp, r7
 801a4a8:	bd80      	pop	{r7, pc}
 801a4aa:	bf00      	nop
 801a4ac:	0801f668 	.word	0x0801f668
 801a4b0:	0801f82c 	.word	0x0801f82c
 801a4b4:	0801f6b0 	.word	0x0801f6b0
 801a4b8:	0801f838 	.word	0x0801f838

0801a4bc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801a4bc:	b580      	push	{r7, lr}
 801a4be:	b094      	sub	sp, #80	; 0x50
 801a4c0:	af02      	add	r7, sp, #8
 801a4c2:	60f8      	str	r0, [r7, #12]
 801a4c4:	60b9      	str	r1, [r7, #8]
 801a4c6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801a4c8:	2300      	movs	r3, #0
 801a4ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801a4ce:	68bb      	ldr	r3, [r7, #8]
 801a4d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a4d2:	3b14      	subs	r3, #20
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	da00      	bge.n	801a4da <ip4_frag+0x1e>
 801a4d8:	3307      	adds	r3, #7
 801a4da:	10db      	asrs	r3, r3, #3
 801a4dc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801a4de:	2314      	movs	r3, #20
 801a4e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801a4e2:	68fb      	ldr	r3, [r7, #12]
 801a4e4:	685b      	ldr	r3, [r3, #4]
 801a4e6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801a4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a4ea:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801a4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4ee:	781b      	ldrb	r3, [r3, #0]
 801a4f0:	f003 030f 	and.w	r3, r3, #15
 801a4f4:	b2db      	uxtb	r3, r3
 801a4f6:	009b      	lsls	r3, r3, #2
 801a4f8:	b2db      	uxtb	r3, r3
 801a4fa:	2b14      	cmp	r3, #20
 801a4fc:	d002      	beq.n	801a504 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801a4fe:	f06f 0305 	mvn.w	r3, #5
 801a502:	e110      	b.n	801a726 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801a504:	68fb      	ldr	r3, [r7, #12]
 801a506:	895b      	ldrh	r3, [r3, #10]
 801a508:	2b13      	cmp	r3, #19
 801a50a:	d809      	bhi.n	801a520 <ip4_frag+0x64>
 801a50c:	4b88      	ldr	r3, [pc, #544]	; (801a730 <ip4_frag+0x274>)
 801a50e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801a512:	4988      	ldr	r1, [pc, #544]	; (801a734 <ip4_frag+0x278>)
 801a514:	4888      	ldr	r0, [pc, #544]	; (801a738 <ip4_frag+0x27c>)
 801a516:	f000 fbed 	bl	801acf4 <iprintf>
 801a51a:	f06f 0305 	mvn.w	r3, #5
 801a51e:	e102      	b.n	801a726 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801a520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a522:	88db      	ldrh	r3, [r3, #6]
 801a524:	b29b      	uxth	r3, r3
 801a526:	4618      	mov	r0, r3
 801a528:	f7f5 fc2a 	bl	800fd80 <lwip_htons>
 801a52c:	4603      	mov	r3, r0
 801a52e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801a530:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a532:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a536:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801a53a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a53c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a540:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801a542:	68fb      	ldr	r3, [r7, #12]
 801a544:	891b      	ldrh	r3, [r3, #8]
 801a546:	3b14      	subs	r3, #20
 801a548:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801a54c:	e0e1      	b.n	801a712 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801a54e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a550:	00db      	lsls	r3, r3, #3
 801a552:	b29b      	uxth	r3, r3
 801a554:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a558:	4293      	cmp	r3, r2
 801a55a:	bf28      	it	cs
 801a55c:	4613      	movcs	r3, r2
 801a55e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801a560:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a564:	2114      	movs	r1, #20
 801a566:	200e      	movs	r0, #14
 801a568:	f7f6 fd18 	bl	8010f9c <pbuf_alloc>
 801a56c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801a56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a570:	2b00      	cmp	r3, #0
 801a572:	f000 80d5 	beq.w	801a720 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801a576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a578:	895b      	ldrh	r3, [r3, #10]
 801a57a:	2b13      	cmp	r3, #19
 801a57c:	d806      	bhi.n	801a58c <ip4_frag+0xd0>
 801a57e:	4b6c      	ldr	r3, [pc, #432]	; (801a730 <ip4_frag+0x274>)
 801a580:	f44f 7249 	mov.w	r2, #804	; 0x324
 801a584:	496d      	ldr	r1, [pc, #436]	; (801a73c <ip4_frag+0x280>)
 801a586:	486c      	ldr	r0, [pc, #432]	; (801a738 <ip4_frag+0x27c>)
 801a588:	f000 fbb4 	bl	801acf4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801a58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a58e:	685b      	ldr	r3, [r3, #4]
 801a590:	2214      	movs	r2, #20
 801a592:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a594:	4618      	mov	r0, r3
 801a596:	f000 fb97 	bl	801acc8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801a59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a59c:	685b      	ldr	r3, [r3, #4]
 801a59e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801a5a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a5a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801a5a6:	e064      	b.n	801a672 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801a5a8:	68fb      	ldr	r3, [r7, #12]
 801a5aa:	895a      	ldrh	r2, [r3, #10]
 801a5ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a5ae:	1ad3      	subs	r3, r2, r3
 801a5b0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801a5b2:	68fb      	ldr	r3, [r7, #12]
 801a5b4:	895b      	ldrh	r3, [r3, #10]
 801a5b6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a5b8:	429a      	cmp	r2, r3
 801a5ba:	d906      	bls.n	801a5ca <ip4_frag+0x10e>
 801a5bc:	4b5c      	ldr	r3, [pc, #368]	; (801a730 <ip4_frag+0x274>)
 801a5be:	f240 322d 	movw	r2, #813	; 0x32d
 801a5c2:	495f      	ldr	r1, [pc, #380]	; (801a740 <ip4_frag+0x284>)
 801a5c4:	485c      	ldr	r0, [pc, #368]	; (801a738 <ip4_frag+0x27c>)
 801a5c6:	f000 fb95 	bl	801acf4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801a5ca:	8bfa      	ldrh	r2, [r7, #30]
 801a5cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a5d0:	4293      	cmp	r3, r2
 801a5d2:	bf28      	it	cs
 801a5d4:	4613      	movcs	r3, r2
 801a5d6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801a5da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	d105      	bne.n	801a5ee <ip4_frag+0x132>
        poff = 0;
 801a5e2:	2300      	movs	r3, #0
 801a5e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a5e6:	68fb      	ldr	r3, [r7, #12]
 801a5e8:	681b      	ldr	r3, [r3, #0]
 801a5ea:	60fb      	str	r3, [r7, #12]
        continue;
 801a5ec:	e041      	b.n	801a672 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801a5ee:	f7ff ff0d 	bl	801a40c <ip_frag_alloc_pbuf_custom_ref>
 801a5f2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801a5f4:	69bb      	ldr	r3, [r7, #24]
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d103      	bne.n	801a602 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801a5fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a5fc:	f7f6 ffe4 	bl	80115c8 <pbuf_free>
        goto memerr;
 801a600:	e08f      	b.n	801a722 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a602:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801a604:	68fb      	ldr	r3, [r7, #12]
 801a606:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a608:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a60a:	4413      	add	r3, r2
 801a60c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801a610:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801a614:	9201      	str	r2, [sp, #4]
 801a616:	9300      	str	r3, [sp, #0]
 801a618:	4603      	mov	r3, r0
 801a61a:	2241      	movs	r2, #65	; 0x41
 801a61c:	2000      	movs	r0, #0
 801a61e:	f7f6 fde7 	bl	80111f0 <pbuf_alloced_custom>
 801a622:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801a624:	697b      	ldr	r3, [r7, #20]
 801a626:	2b00      	cmp	r3, #0
 801a628:	d106      	bne.n	801a638 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801a62a:	69b8      	ldr	r0, [r7, #24]
 801a62c:	f7ff fef6 	bl	801a41c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801a630:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a632:	f7f6 ffc9 	bl	80115c8 <pbuf_free>
        goto memerr;
 801a636:	e074      	b.n	801a722 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801a638:	68f8      	ldr	r0, [r7, #12]
 801a63a:	f7f7 f86b 	bl	8011714 <pbuf_ref>
      pcr->original = p;
 801a63e:	69bb      	ldr	r3, [r7, #24]
 801a640:	68fa      	ldr	r2, [r7, #12]
 801a642:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801a644:	69bb      	ldr	r3, [r7, #24]
 801a646:	4a3f      	ldr	r2, [pc, #252]	; (801a744 <ip4_frag+0x288>)
 801a648:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801a64a:	6979      	ldr	r1, [r7, #20]
 801a64c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a64e:	f7f7 f889 	bl	8011764 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801a652:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801a656:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a65a:	1ad3      	subs	r3, r2, r3
 801a65c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801a660:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a664:	2b00      	cmp	r3, #0
 801a666:	d004      	beq.n	801a672 <ip4_frag+0x1b6>
        poff = 0;
 801a668:	2300      	movs	r3, #0
 801a66a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a66c:	68fb      	ldr	r3, [r7, #12]
 801a66e:	681b      	ldr	r3, [r3, #0]
 801a670:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801a672:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a676:	2b00      	cmp	r3, #0
 801a678:	d196      	bne.n	801a5a8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801a67a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a67c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a680:	4413      	add	r3, r2
 801a682:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801a684:	68bb      	ldr	r3, [r7, #8]
 801a686:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a688:	f1a3 0213 	sub.w	r2, r3, #19
 801a68c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a690:	429a      	cmp	r2, r3
 801a692:	bfcc      	ite	gt
 801a694:	2301      	movgt	r3, #1
 801a696:	2300      	movle	r3, #0
 801a698:	b2db      	uxtb	r3, r3
 801a69a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801a69c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a6a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a6a4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801a6a6:	6a3b      	ldr	r3, [r7, #32]
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	d002      	beq.n	801a6b2 <ip4_frag+0x1f6>
 801a6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d003      	beq.n	801a6ba <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801a6b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a6b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a6b8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801a6ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a6bc:	4618      	mov	r0, r3
 801a6be:	f7f5 fb5f 	bl	800fd80 <lwip_htons>
 801a6c2:	4603      	mov	r3, r0
 801a6c4:	461a      	mov	r2, r3
 801a6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6c8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801a6ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a6cc:	3314      	adds	r3, #20
 801a6ce:	b29b      	uxth	r3, r3
 801a6d0:	4618      	mov	r0, r3
 801a6d2:	f7f5 fb55 	bl	800fd80 <lwip_htons>
 801a6d6:	4603      	mov	r3, r0
 801a6d8:	461a      	mov	r2, r3
 801a6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6dc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801a6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6e0:	2200      	movs	r2, #0
 801a6e2:	729a      	strb	r2, [r3, #10]
 801a6e4:	2200      	movs	r2, #0
 801a6e6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801a6e8:	68bb      	ldr	r3, [r7, #8]
 801a6ea:	695b      	ldr	r3, [r3, #20]
 801a6ec:	687a      	ldr	r2, [r7, #4]
 801a6ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a6f0:	68b8      	ldr	r0, [r7, #8]
 801a6f2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801a6f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a6f6:	f7f6 ff67 	bl	80115c8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801a6fa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a6fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a700:	1ad3      	subs	r3, r2, r3
 801a702:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801a706:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801a70a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a70c:	4413      	add	r3, r2
 801a70e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801a712:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a716:	2b00      	cmp	r3, #0
 801a718:	f47f af19 	bne.w	801a54e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801a71c:	2300      	movs	r3, #0
 801a71e:	e002      	b.n	801a726 <ip4_frag+0x26a>
      goto memerr;
 801a720:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801a722:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a726:	4618      	mov	r0, r3
 801a728:	3748      	adds	r7, #72	; 0x48
 801a72a:	46bd      	mov	sp, r7
 801a72c:	bd80      	pop	{r7, pc}
 801a72e:	bf00      	nop
 801a730:	0801f668 	.word	0x0801f668
 801a734:	0801f844 	.word	0x0801f844
 801a738:	0801f6b0 	.word	0x0801f6b0
 801a73c:	0801f860 	.word	0x0801f860
 801a740:	0801f880 	.word	0x0801f880
 801a744:	0801a455 	.word	0x0801a455

0801a748 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801a748:	b580      	push	{r7, lr}
 801a74a:	b086      	sub	sp, #24
 801a74c:	af00      	add	r7, sp, #0
 801a74e:	6078      	str	r0, [r7, #4]
 801a750:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801a752:	230e      	movs	r3, #14
 801a754:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	895b      	ldrh	r3, [r3, #10]
 801a75a:	2b0e      	cmp	r3, #14
 801a75c:	d96e      	bls.n	801a83c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	7bdb      	ldrb	r3, [r3, #15]
 801a762:	2b00      	cmp	r3, #0
 801a764:	d106      	bne.n	801a774 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801a766:	683b      	ldr	r3, [r7, #0]
 801a768:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a76c:	3301      	adds	r3, #1
 801a76e:	b2da      	uxtb	r2, r3
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	685b      	ldr	r3, [r3, #4]
 801a778:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801a77a:	693b      	ldr	r3, [r7, #16]
 801a77c:	7b1a      	ldrb	r2, [r3, #12]
 801a77e:	7b5b      	ldrb	r3, [r3, #13]
 801a780:	021b      	lsls	r3, r3, #8
 801a782:	4313      	orrs	r3, r2
 801a784:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801a786:	693b      	ldr	r3, [r7, #16]
 801a788:	781b      	ldrb	r3, [r3, #0]
 801a78a:	f003 0301 	and.w	r3, r3, #1
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d023      	beq.n	801a7da <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801a792:	693b      	ldr	r3, [r7, #16]
 801a794:	781b      	ldrb	r3, [r3, #0]
 801a796:	2b01      	cmp	r3, #1
 801a798:	d10f      	bne.n	801a7ba <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a79a:	693b      	ldr	r3, [r7, #16]
 801a79c:	785b      	ldrb	r3, [r3, #1]
 801a79e:	2b00      	cmp	r3, #0
 801a7a0:	d11b      	bne.n	801a7da <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801a7a2:	693b      	ldr	r3, [r7, #16]
 801a7a4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a7a6:	2b5e      	cmp	r3, #94	; 0x5e
 801a7a8:	d117      	bne.n	801a7da <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801a7aa:	687b      	ldr	r3, [r7, #4]
 801a7ac:	7b5b      	ldrb	r3, [r3, #13]
 801a7ae:	f043 0310 	orr.w	r3, r3, #16
 801a7b2:	b2da      	uxtb	r2, r3
 801a7b4:	687b      	ldr	r3, [r7, #4]
 801a7b6:	735a      	strb	r2, [r3, #13]
 801a7b8:	e00f      	b.n	801a7da <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801a7ba:	693b      	ldr	r3, [r7, #16]
 801a7bc:	2206      	movs	r2, #6
 801a7be:	4928      	ldr	r1, [pc, #160]	; (801a860 <ethernet_input+0x118>)
 801a7c0:	4618      	mov	r0, r3
 801a7c2:	f000 fa71 	bl	801aca8 <memcmp>
 801a7c6:	4603      	mov	r3, r0
 801a7c8:	2b00      	cmp	r3, #0
 801a7ca:	d106      	bne.n	801a7da <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	7b5b      	ldrb	r3, [r3, #13]
 801a7d0:	f043 0308 	orr.w	r3, r3, #8
 801a7d4:	b2da      	uxtb	r2, r3
 801a7d6:	687b      	ldr	r3, [r7, #4]
 801a7d8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801a7da:	89fb      	ldrh	r3, [r7, #14]
 801a7dc:	2b08      	cmp	r3, #8
 801a7de:	d003      	beq.n	801a7e8 <ethernet_input+0xa0>
 801a7e0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801a7e4:	d014      	beq.n	801a810 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801a7e6:	e032      	b.n	801a84e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a7e8:	683b      	ldr	r3, [r7, #0]
 801a7ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a7ee:	f003 0308 	and.w	r3, r3, #8
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	d024      	beq.n	801a840 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a7f6:	8afb      	ldrh	r3, [r7, #22]
 801a7f8:	4619      	mov	r1, r3
 801a7fa:	6878      	ldr	r0, [r7, #4]
 801a7fc:	f7f6 fe2c 	bl	8011458 <pbuf_remove_header>
 801a800:	4603      	mov	r3, r0
 801a802:	2b00      	cmp	r3, #0
 801a804:	d11e      	bne.n	801a844 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801a806:	6839      	ldr	r1, [r7, #0]
 801a808:	6878      	ldr	r0, [r7, #4]
 801a80a:	f7fe ff21 	bl	8019650 <ip4_input>
      break;
 801a80e:	e013      	b.n	801a838 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a810:	683b      	ldr	r3, [r7, #0]
 801a812:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a816:	f003 0308 	and.w	r3, r3, #8
 801a81a:	2b00      	cmp	r3, #0
 801a81c:	d014      	beq.n	801a848 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a81e:	8afb      	ldrh	r3, [r7, #22]
 801a820:	4619      	mov	r1, r3
 801a822:	6878      	ldr	r0, [r7, #4]
 801a824:	f7f6 fe18 	bl	8011458 <pbuf_remove_header>
 801a828:	4603      	mov	r3, r0
 801a82a:	2b00      	cmp	r3, #0
 801a82c:	d10e      	bne.n	801a84c <ethernet_input+0x104>
        etharp_input(p, netif);
 801a82e:	6839      	ldr	r1, [r7, #0]
 801a830:	6878      	ldr	r0, [r7, #4]
 801a832:	f7fe f8c1 	bl	80189b8 <etharp_input>
      break;
 801a836:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801a838:	2300      	movs	r3, #0
 801a83a:	e00c      	b.n	801a856 <ethernet_input+0x10e>
    goto free_and_return;
 801a83c:	bf00      	nop
 801a83e:	e006      	b.n	801a84e <ethernet_input+0x106>
        goto free_and_return;
 801a840:	bf00      	nop
 801a842:	e004      	b.n	801a84e <ethernet_input+0x106>
        goto free_and_return;
 801a844:	bf00      	nop
 801a846:	e002      	b.n	801a84e <ethernet_input+0x106>
        goto free_and_return;
 801a848:	bf00      	nop
 801a84a:	e000      	b.n	801a84e <ethernet_input+0x106>
        goto free_and_return;
 801a84c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a84e:	6878      	ldr	r0, [r7, #4]
 801a850:	f7f6 feba 	bl	80115c8 <pbuf_free>
  return ERR_OK;
 801a854:	2300      	movs	r3, #0
}
 801a856:	4618      	mov	r0, r3
 801a858:	3718      	adds	r7, #24
 801a85a:	46bd      	mov	sp, r7
 801a85c:	bd80      	pop	{r7, pc}
 801a85e:	bf00      	nop
 801a860:	0801fb18 	.word	0x0801fb18

0801a864 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801a864:	b580      	push	{r7, lr}
 801a866:	b086      	sub	sp, #24
 801a868:	af00      	add	r7, sp, #0
 801a86a:	60f8      	str	r0, [r7, #12]
 801a86c:	60b9      	str	r1, [r7, #8]
 801a86e:	607a      	str	r2, [r7, #4]
 801a870:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a872:	8c3b      	ldrh	r3, [r7, #32]
 801a874:	4618      	mov	r0, r3
 801a876:	f7f5 fa83 	bl	800fd80 <lwip_htons>
 801a87a:	4603      	mov	r3, r0
 801a87c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801a87e:	210e      	movs	r1, #14
 801a880:	68b8      	ldr	r0, [r7, #8]
 801a882:	f7f6 fdd9 	bl	8011438 <pbuf_add_header>
 801a886:	4603      	mov	r3, r0
 801a888:	2b00      	cmp	r3, #0
 801a88a:	d125      	bne.n	801a8d8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801a88c:	68bb      	ldr	r3, [r7, #8]
 801a88e:	685b      	ldr	r3, [r3, #4]
 801a890:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a892:	693b      	ldr	r3, [r7, #16]
 801a894:	8afa      	ldrh	r2, [r7, #22]
 801a896:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801a898:	693b      	ldr	r3, [r7, #16]
 801a89a:	2206      	movs	r2, #6
 801a89c:	6839      	ldr	r1, [r7, #0]
 801a89e:	4618      	mov	r0, r3
 801a8a0:	f000 fa12 	bl	801acc8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801a8a4:	693b      	ldr	r3, [r7, #16]
 801a8a6:	3306      	adds	r3, #6
 801a8a8:	2206      	movs	r2, #6
 801a8aa:	6879      	ldr	r1, [r7, #4]
 801a8ac:	4618      	mov	r0, r3
 801a8ae:	f000 fa0b 	bl	801acc8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801a8b2:	68fb      	ldr	r3, [r7, #12]
 801a8b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a8b8:	2b06      	cmp	r3, #6
 801a8ba:	d006      	beq.n	801a8ca <ethernet_output+0x66>
 801a8bc:	4b0a      	ldr	r3, [pc, #40]	; (801a8e8 <ethernet_output+0x84>)
 801a8be:	f44f 7299 	mov.w	r2, #306	; 0x132
 801a8c2:	490a      	ldr	r1, [pc, #40]	; (801a8ec <ethernet_output+0x88>)
 801a8c4:	480a      	ldr	r0, [pc, #40]	; (801a8f0 <ethernet_output+0x8c>)
 801a8c6:	f000 fa15 	bl	801acf4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a8ca:	68fb      	ldr	r3, [r7, #12]
 801a8cc:	699b      	ldr	r3, [r3, #24]
 801a8ce:	68b9      	ldr	r1, [r7, #8]
 801a8d0:	68f8      	ldr	r0, [r7, #12]
 801a8d2:	4798      	blx	r3
 801a8d4:	4603      	mov	r3, r0
 801a8d6:	e002      	b.n	801a8de <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a8d8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a8da:	f06f 0301 	mvn.w	r3, #1
}
 801a8de:	4618      	mov	r0, r3
 801a8e0:	3718      	adds	r7, #24
 801a8e2:	46bd      	mov	sp, r7
 801a8e4:	bd80      	pop	{r7, pc}
 801a8e6:	bf00      	nop
 801a8e8:	0801f890 	.word	0x0801f890
 801a8ec:	0801f8c8 	.word	0x0801f8c8
 801a8f0:	0801f8fc 	.word	0x0801f8fc

0801a8f4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801a8f4:	b580      	push	{r7, lr}
 801a8f6:	b082      	sub	sp, #8
 801a8f8:	af00      	add	r7, sp, #0
 801a8fa:	6078      	str	r0, [r7, #4]
 801a8fc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801a8fe:	683b      	ldr	r3, [r7, #0]
 801a900:	2200      	movs	r2, #0
 801a902:	2104      	movs	r1, #4
 801a904:	4618      	mov	r0, r3
 801a906:	f7ee fb3b 	bl	8008f80 <osMessageQueueNew>
 801a90a:	4602      	mov	r2, r0
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801a910:	687b      	ldr	r3, [r7, #4]
 801a912:	681b      	ldr	r3, [r3, #0]
 801a914:	2b00      	cmp	r3, #0
 801a916:	d102      	bne.n	801a91e <sys_mbox_new+0x2a>
    return ERR_MEM;
 801a918:	f04f 33ff 	mov.w	r3, #4294967295
 801a91c:	e000      	b.n	801a920 <sys_mbox_new+0x2c>

  return ERR_OK;
 801a91e:	2300      	movs	r3, #0
}
 801a920:	4618      	mov	r0, r3
 801a922:	3708      	adds	r7, #8
 801a924:	46bd      	mov	sp, r7
 801a926:	bd80      	pop	{r7, pc}

0801a928 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801a928:	b580      	push	{r7, lr}
 801a92a:	b082      	sub	sp, #8
 801a92c:	af00      	add	r7, sp, #0
 801a92e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	681b      	ldr	r3, [r3, #0]
 801a934:	4618      	mov	r0, r3
 801a936:	f7ee fc8f 	bl	8009258 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	681b      	ldr	r3, [r3, #0]
 801a93e:	4618      	mov	r0, r3
 801a940:	f7ee fcbc 	bl	80092bc <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801a944:	bf00      	nop
 801a946:	3708      	adds	r7, #8
 801a948:	46bd      	mov	sp, r7
 801a94a:	bd80      	pop	{r7, pc}

0801a94c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801a94c:	b580      	push	{r7, lr}
 801a94e:	b084      	sub	sp, #16
 801a950:	af00      	add	r7, sp, #0
 801a952:	6078      	str	r0, [r7, #4]
 801a954:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	6818      	ldr	r0, [r3, #0]
 801a95a:	4639      	mov	r1, r7
 801a95c:	2300      	movs	r3, #0
 801a95e:	2200      	movs	r2, #0
 801a960:	f7ee fb94 	bl	800908c <osMessageQueuePut>
 801a964:	4603      	mov	r3, r0
 801a966:	2b00      	cmp	r3, #0
 801a968:	d102      	bne.n	801a970 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801a96a:	2300      	movs	r3, #0
 801a96c:	73fb      	strb	r3, [r7, #15]
 801a96e:	e001      	b.n	801a974 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801a970:	23ff      	movs	r3, #255	; 0xff
 801a972:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801a974:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a978:	4618      	mov	r0, r3
 801a97a:	3710      	adds	r7, #16
 801a97c:	46bd      	mov	sp, r7
 801a97e:	bd80      	pop	{r7, pc}

0801a980 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801a980:	b580      	push	{r7, lr}
 801a982:	b086      	sub	sp, #24
 801a984:	af00      	add	r7, sp, #0
 801a986:	60f8      	str	r0, [r7, #12]
 801a988:	60b9      	str	r1, [r7, #8]
 801a98a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801a98c:	f7ed ff24 	bl	80087d8 <osKernelGetTickCount>
 801a990:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	2b00      	cmp	r3, #0
 801a996:	d013      	beq.n	801a9c0 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801a998:	68fb      	ldr	r3, [r7, #12]
 801a99a:	6818      	ldr	r0, [r3, #0]
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	2200      	movs	r2, #0
 801a9a0:	68b9      	ldr	r1, [r7, #8]
 801a9a2:	f7ee fbe7 	bl	8009174 <osMessageQueueGet>
 801a9a6:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801a9a8:	693b      	ldr	r3, [r7, #16]
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	d105      	bne.n	801a9ba <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801a9ae:	f7ed ff13 	bl	80087d8 <osKernelGetTickCount>
 801a9b2:	4602      	mov	r2, r0
 801a9b4:	697b      	ldr	r3, [r7, #20]
 801a9b6:	1ad3      	subs	r3, r2, r3
 801a9b8:	e00f      	b.n	801a9da <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801a9ba:	f04f 33ff 	mov.w	r3, #4294967295
 801a9be:	e00c      	b.n	801a9da <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801a9c0:	68fb      	ldr	r3, [r7, #12]
 801a9c2:	6818      	ldr	r0, [r3, #0]
 801a9c4:	f04f 33ff 	mov.w	r3, #4294967295
 801a9c8:	2200      	movs	r2, #0
 801a9ca:	68b9      	ldr	r1, [r7, #8]
 801a9cc:	f7ee fbd2 	bl	8009174 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801a9d0:	f7ed ff02 	bl	80087d8 <osKernelGetTickCount>
 801a9d4:	4602      	mov	r2, r0
 801a9d6:	697b      	ldr	r3, [r7, #20]
 801a9d8:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801a9da:	4618      	mov	r0, r3
 801a9dc:	3718      	adds	r7, #24
 801a9de:	46bd      	mov	sp, r7
 801a9e0:	bd80      	pop	{r7, pc}

0801a9e2 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801a9e2:	b580      	push	{r7, lr}
 801a9e4:	b082      	sub	sp, #8
 801a9e6:	af00      	add	r7, sp, #0
 801a9e8:	6078      	str	r0, [r7, #4]
 801a9ea:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	6818      	ldr	r0, [r3, #0]
 801a9f0:	2300      	movs	r3, #0
 801a9f2:	2200      	movs	r2, #0
 801a9f4:	6839      	ldr	r1, [r7, #0]
 801a9f6:	f7ee fbbd 	bl	8009174 <osMessageQueueGet>
 801a9fa:	4603      	mov	r3, r0
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	d101      	bne.n	801aa04 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801aa00:	2300      	movs	r3, #0
 801aa02:	e001      	b.n	801aa08 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801aa04:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801aa08:	4618      	mov	r0, r3
 801aa0a:	3708      	adds	r7, #8
 801aa0c:	46bd      	mov	sp, r7
 801aa0e:	bd80      	pop	{r7, pc}

0801aa10 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801aa10:	b480      	push	{r7}
 801aa12:	b083      	sub	sp, #12
 801aa14:	af00      	add	r7, sp, #0
 801aa16:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	681b      	ldr	r3, [r3, #0]
 801aa1c:	2b00      	cmp	r3, #0
 801aa1e:	d101      	bne.n	801aa24 <sys_mbox_valid+0x14>
    return 0;
 801aa20:	2300      	movs	r3, #0
 801aa22:	e000      	b.n	801aa26 <sys_mbox_valid+0x16>
  else
    return 1;
 801aa24:	2301      	movs	r3, #1
}
 801aa26:	4618      	mov	r0, r3
 801aa28:	370c      	adds	r7, #12
 801aa2a:	46bd      	mov	sp, r7
 801aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa30:	4770      	bx	lr

0801aa32 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801aa32:	b480      	push	{r7}
 801aa34:	b083      	sub	sp, #12
 801aa36:	af00      	add	r7, sp, #0
 801aa38:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	2200      	movs	r2, #0
 801aa3e:	601a      	str	r2, [r3, #0]
}
 801aa40:	bf00      	nop
 801aa42:	370c      	adds	r7, #12
 801aa44:	46bd      	mov	sp, r7
 801aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa4a:	4770      	bx	lr

0801aa4c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801aa4c:	b580      	push	{r7, lr}
 801aa4e:	b082      	sub	sp, #8
 801aa50:	af00      	add	r7, sp, #0
 801aa52:	6078      	str	r0, [r7, #4]
 801aa54:	460b      	mov	r3, r1
 801aa56:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801aa58:	78fb      	ldrb	r3, [r7, #3]
 801aa5a:	2200      	movs	r2, #0
 801aa5c:	4619      	mov	r1, r3
 801aa5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801aa62:	f7ee f8fd 	bl	8008c60 <osSemaphoreNew>
 801aa66:	4602      	mov	r2, r0
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	681b      	ldr	r3, [r3, #0]
 801aa70:	2b00      	cmp	r3, #0
 801aa72:	d102      	bne.n	801aa7a <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801aa74:	f04f 33ff 	mov.w	r3, #4294967295
 801aa78:	e009      	b.n	801aa8e <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801aa7a:	78fb      	ldrb	r3, [r7, #3]
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	d105      	bne.n	801aa8c <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	681b      	ldr	r3, [r3, #0]
 801aa84:	2100      	movs	r1, #0
 801aa86:	4618      	mov	r0, r3
 801aa88:	f7ee f986 	bl	8008d98 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801aa8c:	2300      	movs	r3, #0
}
 801aa8e:	4618      	mov	r0, r3
 801aa90:	3708      	adds	r7, #8
 801aa92:	46bd      	mov	sp, r7
 801aa94:	bd80      	pop	{r7, pc}

0801aa96 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801aa96:	b580      	push	{r7, lr}
 801aa98:	b084      	sub	sp, #16
 801aa9a:	af00      	add	r7, sp, #0
 801aa9c:	6078      	str	r0, [r7, #4]
 801aa9e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801aaa0:	f7ed fe9a 	bl	80087d8 <osKernelGetTickCount>
 801aaa4:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801aaa6:	683b      	ldr	r3, [r7, #0]
 801aaa8:	2b00      	cmp	r3, #0
 801aaaa:	d011      	beq.n	801aad0 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	681b      	ldr	r3, [r3, #0]
 801aab0:	6839      	ldr	r1, [r7, #0]
 801aab2:	4618      	mov	r0, r3
 801aab4:	f7ee f970 	bl	8008d98 <osSemaphoreAcquire>
 801aab8:	4603      	mov	r3, r0
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	d105      	bne.n	801aaca <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801aabe:	f7ed fe8b 	bl	80087d8 <osKernelGetTickCount>
 801aac2:	4602      	mov	r2, r0
 801aac4:	68fb      	ldr	r3, [r7, #12]
 801aac6:	1ad3      	subs	r3, r2, r3
 801aac8:	e012      	b.n	801aaf0 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801aaca:	f04f 33ff 	mov.w	r3, #4294967295
 801aace:	e00f      	b.n	801aaf0 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801aad0:	bf00      	nop
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	681b      	ldr	r3, [r3, #0]
 801aad6:	f04f 31ff 	mov.w	r1, #4294967295
 801aada:	4618      	mov	r0, r3
 801aadc:	f7ee f95c 	bl	8008d98 <osSemaphoreAcquire>
 801aae0:	4603      	mov	r3, r0
 801aae2:	2b00      	cmp	r3, #0
 801aae4:	d1f5      	bne.n	801aad2 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801aae6:	f7ed fe77 	bl	80087d8 <osKernelGetTickCount>
 801aaea:	4602      	mov	r2, r0
 801aaec:	68fb      	ldr	r3, [r7, #12]
 801aaee:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801aaf0:	4618      	mov	r0, r3
 801aaf2:	3710      	adds	r7, #16
 801aaf4:	46bd      	mov	sp, r7
 801aaf6:	bd80      	pop	{r7, pc}

0801aaf8 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801aaf8:	b580      	push	{r7, lr}
 801aafa:	b082      	sub	sp, #8
 801aafc:	af00      	add	r7, sp, #0
 801aafe:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801ab00:	687b      	ldr	r3, [r7, #4]
 801ab02:	681b      	ldr	r3, [r3, #0]
 801ab04:	4618      	mov	r0, r3
 801ab06:	f7ee f9ad 	bl	8008e64 <osSemaphoreRelease>
}
 801ab0a:	bf00      	nop
 801ab0c:	3708      	adds	r7, #8
 801ab0e:	46bd      	mov	sp, r7
 801ab10:	bd80      	pop	{r7, pc}

0801ab12 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801ab12:	b580      	push	{r7, lr}
 801ab14:	b082      	sub	sp, #8
 801ab16:	af00      	add	r7, sp, #0
 801ab18:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801ab1a:	687b      	ldr	r3, [r7, #4]
 801ab1c:	681b      	ldr	r3, [r3, #0]
 801ab1e:	4618      	mov	r0, r3
 801ab20:	f7ee f9f8 	bl	8008f14 <osSemaphoreDelete>
}
 801ab24:	bf00      	nop
 801ab26:	3708      	adds	r7, #8
 801ab28:	46bd      	mov	sp, r7
 801ab2a:	bd80      	pop	{r7, pc}

0801ab2c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801ab2c:	b480      	push	{r7}
 801ab2e:	b083      	sub	sp, #12
 801ab30:	af00      	add	r7, sp, #0
 801ab32:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d101      	bne.n	801ab40 <sys_sem_valid+0x14>
    return 0;
 801ab3c:	2300      	movs	r3, #0
 801ab3e:	e000      	b.n	801ab42 <sys_sem_valid+0x16>
  else
    return 1;
 801ab40:	2301      	movs	r3, #1
}
 801ab42:	4618      	mov	r0, r3
 801ab44:	370c      	adds	r7, #12
 801ab46:	46bd      	mov	sp, r7
 801ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab4c:	4770      	bx	lr

0801ab4e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801ab4e:	b480      	push	{r7}
 801ab50:	b083      	sub	sp, #12
 801ab52:	af00      	add	r7, sp, #0
 801ab54:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	2200      	movs	r2, #0
 801ab5a:	601a      	str	r2, [r3, #0]
}
 801ab5c:	bf00      	nop
 801ab5e:	370c      	adds	r7, #12
 801ab60:	46bd      	mov	sp, r7
 801ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab66:	4770      	bx	lr

0801ab68 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801ab68:	b580      	push	{r7, lr}
 801ab6a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801ab6c:	2000      	movs	r0, #0
 801ab6e:	f7ed ff2f 	bl	80089d0 <osMutexNew>
 801ab72:	4603      	mov	r3, r0
 801ab74:	4a01      	ldr	r2, [pc, #4]	; (801ab7c <sys_init+0x14>)
 801ab76:	6013      	str	r3, [r2, #0]
#endif
}
 801ab78:	bf00      	nop
 801ab7a:	bd80      	pop	{r7, pc}
 801ab7c:	200111e8 	.word	0x200111e8

0801ab80 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801ab80:	b580      	push	{r7, lr}
 801ab82:	b082      	sub	sp, #8
 801ab84:	af00      	add	r7, sp, #0
 801ab86:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801ab88:	2000      	movs	r0, #0
 801ab8a:	f7ed ff21 	bl	80089d0 <osMutexNew>
 801ab8e:	4602      	mov	r2, r0
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	681b      	ldr	r3, [r3, #0]
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	d102      	bne.n	801aba2 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801ab9c:	f04f 33ff 	mov.w	r3, #4294967295
 801aba0:	e000      	b.n	801aba4 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801aba2:	2300      	movs	r3, #0
}
 801aba4:	4618      	mov	r0, r3
 801aba6:	3708      	adds	r7, #8
 801aba8:	46bd      	mov	sp, r7
 801abaa:	bd80      	pop	{r7, pc}

0801abac <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801abac:	b580      	push	{r7, lr}
 801abae:	b082      	sub	sp, #8
 801abb0:	af00      	add	r7, sp, #0
 801abb2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	681b      	ldr	r3, [r3, #0]
 801abb8:	f04f 31ff 	mov.w	r1, #4294967295
 801abbc:	4618      	mov	r0, r3
 801abbe:	f7ed ffa1 	bl	8008b04 <osMutexAcquire>
#endif
}
 801abc2:	bf00      	nop
 801abc4:	3708      	adds	r7, #8
 801abc6:	46bd      	mov	sp, r7
 801abc8:	bd80      	pop	{r7, pc}

0801abca <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801abca:	b580      	push	{r7, lr}
 801abcc:	b082      	sub	sp, #8
 801abce:	af00      	add	r7, sp, #0
 801abd0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	681b      	ldr	r3, [r3, #0]
 801abd6:	4618      	mov	r0, r3
 801abd8:	f7ed fff2 	bl	8008bc0 <osMutexRelease>
}
 801abdc:	bf00      	nop
 801abde:	3708      	adds	r7, #8
 801abe0:	46bd      	mov	sp, r7
 801abe2:	bd80      	pop	{r7, pc}

0801abe4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801abe4:	b580      	push	{r7, lr}
 801abe6:	b08e      	sub	sp, #56	; 0x38
 801abe8:	af00      	add	r7, sp, #0
 801abea:	60f8      	str	r0, [r7, #12]
 801abec:	60b9      	str	r1, [r7, #8]
 801abee:	607a      	str	r2, [r7, #4]
 801abf0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801abf2:	f107 0314 	add.w	r3, r7, #20
 801abf6:	2224      	movs	r2, #36	; 0x24
 801abf8:	2100      	movs	r1, #0
 801abfa:	4618      	mov	r0, r3
 801abfc:	f000 f872 	bl	801ace4 <memset>
 801ac00:	68fb      	ldr	r3, [r7, #12]
 801ac02:	617b      	str	r3, [r7, #20]
 801ac04:	683b      	ldr	r3, [r7, #0]
 801ac06:	62bb      	str	r3, [r7, #40]	; 0x28
 801ac08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ac0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801ac0c:	f107 0314 	add.w	r3, r7, #20
 801ac10:	461a      	mov	r2, r3
 801ac12:	6879      	ldr	r1, [r7, #4]
 801ac14:	68b8      	ldr	r0, [r7, #8]
 801ac16:	f7ed fe07 	bl	8008828 <osThreadNew>
 801ac1a:	4603      	mov	r3, r0
#endif
}
 801ac1c:	4618      	mov	r0, r3
 801ac1e:	3738      	adds	r7, #56	; 0x38
 801ac20:	46bd      	mov	sp, r7
 801ac22:	bd80      	pop	{r7, pc}

0801ac24 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801ac24:	b580      	push	{r7, lr}
 801ac26:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801ac28:	4b04      	ldr	r3, [pc, #16]	; (801ac3c <sys_arch_protect+0x18>)
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	f04f 31ff 	mov.w	r1, #4294967295
 801ac30:	4618      	mov	r0, r3
 801ac32:	f7ed ff67 	bl	8008b04 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801ac36:	2301      	movs	r3, #1
}
 801ac38:	4618      	mov	r0, r3
 801ac3a:	bd80      	pop	{r7, pc}
 801ac3c:	200111e8 	.word	0x200111e8

0801ac40 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801ac40:	b580      	push	{r7, lr}
 801ac42:	b082      	sub	sp, #8
 801ac44:	af00      	add	r7, sp, #0
 801ac46:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801ac48:	4b04      	ldr	r3, [pc, #16]	; (801ac5c <sys_arch_unprotect+0x1c>)
 801ac4a:	681b      	ldr	r3, [r3, #0]
 801ac4c:	4618      	mov	r0, r3
 801ac4e:	f7ed ffb7 	bl	8008bc0 <osMutexRelease>
}
 801ac52:	bf00      	nop
 801ac54:	3708      	adds	r7, #8
 801ac56:	46bd      	mov	sp, r7
 801ac58:	bd80      	pop	{r7, pc}
 801ac5a:	bf00      	nop
 801ac5c:	200111e8 	.word	0x200111e8

0801ac60 <__libc_init_array>:
 801ac60:	b570      	push	{r4, r5, r6, lr}
 801ac62:	4d0d      	ldr	r5, [pc, #52]	; (801ac98 <__libc_init_array+0x38>)
 801ac64:	4c0d      	ldr	r4, [pc, #52]	; (801ac9c <__libc_init_array+0x3c>)
 801ac66:	1b64      	subs	r4, r4, r5
 801ac68:	10a4      	asrs	r4, r4, #2
 801ac6a:	2600      	movs	r6, #0
 801ac6c:	42a6      	cmp	r6, r4
 801ac6e:	d109      	bne.n	801ac84 <__libc_init_array+0x24>
 801ac70:	4d0b      	ldr	r5, [pc, #44]	; (801aca0 <__libc_init_array+0x40>)
 801ac72:	4c0c      	ldr	r4, [pc, #48]	; (801aca4 <__libc_init_array+0x44>)
 801ac74:	f001 f962 	bl	801bf3c <_init>
 801ac78:	1b64      	subs	r4, r4, r5
 801ac7a:	10a4      	asrs	r4, r4, #2
 801ac7c:	2600      	movs	r6, #0
 801ac7e:	42a6      	cmp	r6, r4
 801ac80:	d105      	bne.n	801ac8e <__libc_init_array+0x2e>
 801ac82:	bd70      	pop	{r4, r5, r6, pc}
 801ac84:	f855 3b04 	ldr.w	r3, [r5], #4
 801ac88:	4798      	blx	r3
 801ac8a:	3601      	adds	r6, #1
 801ac8c:	e7ee      	b.n	801ac6c <__libc_init_array+0xc>
 801ac8e:	f855 3b04 	ldr.w	r3, [r5], #4
 801ac92:	4798      	blx	r3
 801ac94:	3601      	adds	r6, #1
 801ac96:	e7f2      	b.n	801ac7e <__libc_init_array+0x1e>
 801ac98:	0801fc78 	.word	0x0801fc78
 801ac9c:	0801fc78 	.word	0x0801fc78
 801aca0:	0801fc78 	.word	0x0801fc78
 801aca4:	0801fc7c 	.word	0x0801fc7c

0801aca8 <memcmp>:
 801aca8:	b510      	push	{r4, lr}
 801acaa:	3901      	subs	r1, #1
 801acac:	4402      	add	r2, r0
 801acae:	4290      	cmp	r0, r2
 801acb0:	d101      	bne.n	801acb6 <memcmp+0xe>
 801acb2:	2000      	movs	r0, #0
 801acb4:	e005      	b.n	801acc2 <memcmp+0x1a>
 801acb6:	7803      	ldrb	r3, [r0, #0]
 801acb8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801acbc:	42a3      	cmp	r3, r4
 801acbe:	d001      	beq.n	801acc4 <memcmp+0x1c>
 801acc0:	1b18      	subs	r0, r3, r4
 801acc2:	bd10      	pop	{r4, pc}
 801acc4:	3001      	adds	r0, #1
 801acc6:	e7f2      	b.n	801acae <memcmp+0x6>

0801acc8 <memcpy>:
 801acc8:	440a      	add	r2, r1
 801acca:	4291      	cmp	r1, r2
 801accc:	f100 33ff 	add.w	r3, r0, #4294967295
 801acd0:	d100      	bne.n	801acd4 <memcpy+0xc>
 801acd2:	4770      	bx	lr
 801acd4:	b510      	push	{r4, lr}
 801acd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801acda:	f803 4f01 	strb.w	r4, [r3, #1]!
 801acde:	4291      	cmp	r1, r2
 801ace0:	d1f9      	bne.n	801acd6 <memcpy+0xe>
 801ace2:	bd10      	pop	{r4, pc}

0801ace4 <memset>:
 801ace4:	4402      	add	r2, r0
 801ace6:	4603      	mov	r3, r0
 801ace8:	4293      	cmp	r3, r2
 801acea:	d100      	bne.n	801acee <memset+0xa>
 801acec:	4770      	bx	lr
 801acee:	f803 1b01 	strb.w	r1, [r3], #1
 801acf2:	e7f9      	b.n	801ace8 <memset+0x4>

0801acf4 <iprintf>:
 801acf4:	b40f      	push	{r0, r1, r2, r3}
 801acf6:	4b0a      	ldr	r3, [pc, #40]	; (801ad20 <iprintf+0x2c>)
 801acf8:	b513      	push	{r0, r1, r4, lr}
 801acfa:	681c      	ldr	r4, [r3, #0]
 801acfc:	b124      	cbz	r4, 801ad08 <iprintf+0x14>
 801acfe:	69a3      	ldr	r3, [r4, #24]
 801ad00:	b913      	cbnz	r3, 801ad08 <iprintf+0x14>
 801ad02:	4620      	mov	r0, r4
 801ad04:	f000 fad0 	bl	801b2a8 <__sinit>
 801ad08:	ab05      	add	r3, sp, #20
 801ad0a:	9a04      	ldr	r2, [sp, #16]
 801ad0c:	68a1      	ldr	r1, [r4, #8]
 801ad0e:	9301      	str	r3, [sp, #4]
 801ad10:	4620      	mov	r0, r4
 801ad12:	f000 fcf3 	bl	801b6fc <_vfiprintf_r>
 801ad16:	b002      	add	sp, #8
 801ad18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad1c:	b004      	add	sp, #16
 801ad1e:	4770      	bx	lr
 801ad20:	20000030 	.word	0x20000030

0801ad24 <putchar>:
 801ad24:	4b09      	ldr	r3, [pc, #36]	; (801ad4c <putchar+0x28>)
 801ad26:	b513      	push	{r0, r1, r4, lr}
 801ad28:	681c      	ldr	r4, [r3, #0]
 801ad2a:	4601      	mov	r1, r0
 801ad2c:	b134      	cbz	r4, 801ad3c <putchar+0x18>
 801ad2e:	69a3      	ldr	r3, [r4, #24]
 801ad30:	b923      	cbnz	r3, 801ad3c <putchar+0x18>
 801ad32:	9001      	str	r0, [sp, #4]
 801ad34:	4620      	mov	r0, r4
 801ad36:	f000 fab7 	bl	801b2a8 <__sinit>
 801ad3a:	9901      	ldr	r1, [sp, #4]
 801ad3c:	68a2      	ldr	r2, [r4, #8]
 801ad3e:	4620      	mov	r0, r4
 801ad40:	b002      	add	sp, #8
 801ad42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad46:	f000 bf9d 	b.w	801bc84 <_putc_r>
 801ad4a:	bf00      	nop
 801ad4c:	20000030 	.word	0x20000030

0801ad50 <_puts_r>:
 801ad50:	b570      	push	{r4, r5, r6, lr}
 801ad52:	460e      	mov	r6, r1
 801ad54:	4605      	mov	r5, r0
 801ad56:	b118      	cbz	r0, 801ad60 <_puts_r+0x10>
 801ad58:	6983      	ldr	r3, [r0, #24]
 801ad5a:	b90b      	cbnz	r3, 801ad60 <_puts_r+0x10>
 801ad5c:	f000 faa4 	bl	801b2a8 <__sinit>
 801ad60:	69ab      	ldr	r3, [r5, #24]
 801ad62:	68ac      	ldr	r4, [r5, #8]
 801ad64:	b913      	cbnz	r3, 801ad6c <_puts_r+0x1c>
 801ad66:	4628      	mov	r0, r5
 801ad68:	f000 fa9e 	bl	801b2a8 <__sinit>
 801ad6c:	4b2c      	ldr	r3, [pc, #176]	; (801ae20 <_puts_r+0xd0>)
 801ad6e:	429c      	cmp	r4, r3
 801ad70:	d120      	bne.n	801adb4 <_puts_r+0x64>
 801ad72:	686c      	ldr	r4, [r5, #4]
 801ad74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ad76:	07db      	lsls	r3, r3, #31
 801ad78:	d405      	bmi.n	801ad86 <_puts_r+0x36>
 801ad7a:	89a3      	ldrh	r3, [r4, #12]
 801ad7c:	0598      	lsls	r0, r3, #22
 801ad7e:	d402      	bmi.n	801ad86 <_puts_r+0x36>
 801ad80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ad82:	f000 fb41 	bl	801b408 <__retarget_lock_acquire_recursive>
 801ad86:	89a3      	ldrh	r3, [r4, #12]
 801ad88:	0719      	lsls	r1, r3, #28
 801ad8a:	d51d      	bpl.n	801adc8 <_puts_r+0x78>
 801ad8c:	6923      	ldr	r3, [r4, #16]
 801ad8e:	b1db      	cbz	r3, 801adc8 <_puts_r+0x78>
 801ad90:	3e01      	subs	r6, #1
 801ad92:	68a3      	ldr	r3, [r4, #8]
 801ad94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ad98:	3b01      	subs	r3, #1
 801ad9a:	60a3      	str	r3, [r4, #8]
 801ad9c:	bb39      	cbnz	r1, 801adee <_puts_r+0x9e>
 801ad9e:	2b00      	cmp	r3, #0
 801ada0:	da38      	bge.n	801ae14 <_puts_r+0xc4>
 801ada2:	4622      	mov	r2, r4
 801ada4:	210a      	movs	r1, #10
 801ada6:	4628      	mov	r0, r5
 801ada8:	f000 f886 	bl	801aeb8 <__swbuf_r>
 801adac:	3001      	adds	r0, #1
 801adae:	d011      	beq.n	801add4 <_puts_r+0x84>
 801adb0:	250a      	movs	r5, #10
 801adb2:	e011      	b.n	801add8 <_puts_r+0x88>
 801adb4:	4b1b      	ldr	r3, [pc, #108]	; (801ae24 <_puts_r+0xd4>)
 801adb6:	429c      	cmp	r4, r3
 801adb8:	d101      	bne.n	801adbe <_puts_r+0x6e>
 801adba:	68ac      	ldr	r4, [r5, #8]
 801adbc:	e7da      	b.n	801ad74 <_puts_r+0x24>
 801adbe:	4b1a      	ldr	r3, [pc, #104]	; (801ae28 <_puts_r+0xd8>)
 801adc0:	429c      	cmp	r4, r3
 801adc2:	bf08      	it	eq
 801adc4:	68ec      	ldreq	r4, [r5, #12]
 801adc6:	e7d5      	b.n	801ad74 <_puts_r+0x24>
 801adc8:	4621      	mov	r1, r4
 801adca:	4628      	mov	r0, r5
 801adcc:	f000 f8c6 	bl	801af5c <__swsetup_r>
 801add0:	2800      	cmp	r0, #0
 801add2:	d0dd      	beq.n	801ad90 <_puts_r+0x40>
 801add4:	f04f 35ff 	mov.w	r5, #4294967295
 801add8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801adda:	07da      	lsls	r2, r3, #31
 801addc:	d405      	bmi.n	801adea <_puts_r+0x9a>
 801adde:	89a3      	ldrh	r3, [r4, #12]
 801ade0:	059b      	lsls	r3, r3, #22
 801ade2:	d402      	bmi.n	801adea <_puts_r+0x9a>
 801ade4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ade6:	f000 fb10 	bl	801b40a <__retarget_lock_release_recursive>
 801adea:	4628      	mov	r0, r5
 801adec:	bd70      	pop	{r4, r5, r6, pc}
 801adee:	2b00      	cmp	r3, #0
 801adf0:	da04      	bge.n	801adfc <_puts_r+0xac>
 801adf2:	69a2      	ldr	r2, [r4, #24]
 801adf4:	429a      	cmp	r2, r3
 801adf6:	dc06      	bgt.n	801ae06 <_puts_r+0xb6>
 801adf8:	290a      	cmp	r1, #10
 801adfa:	d004      	beq.n	801ae06 <_puts_r+0xb6>
 801adfc:	6823      	ldr	r3, [r4, #0]
 801adfe:	1c5a      	adds	r2, r3, #1
 801ae00:	6022      	str	r2, [r4, #0]
 801ae02:	7019      	strb	r1, [r3, #0]
 801ae04:	e7c5      	b.n	801ad92 <_puts_r+0x42>
 801ae06:	4622      	mov	r2, r4
 801ae08:	4628      	mov	r0, r5
 801ae0a:	f000 f855 	bl	801aeb8 <__swbuf_r>
 801ae0e:	3001      	adds	r0, #1
 801ae10:	d1bf      	bne.n	801ad92 <_puts_r+0x42>
 801ae12:	e7df      	b.n	801add4 <_puts_r+0x84>
 801ae14:	6823      	ldr	r3, [r4, #0]
 801ae16:	250a      	movs	r5, #10
 801ae18:	1c5a      	adds	r2, r3, #1
 801ae1a:	6022      	str	r2, [r4, #0]
 801ae1c:	701d      	strb	r5, [r3, #0]
 801ae1e:	e7db      	b.n	801add8 <_puts_r+0x88>
 801ae20:	0801fbfc 	.word	0x0801fbfc
 801ae24:	0801fc1c 	.word	0x0801fc1c
 801ae28:	0801fbdc 	.word	0x0801fbdc

0801ae2c <puts>:
 801ae2c:	4b02      	ldr	r3, [pc, #8]	; (801ae38 <puts+0xc>)
 801ae2e:	4601      	mov	r1, r0
 801ae30:	6818      	ldr	r0, [r3, #0]
 801ae32:	f7ff bf8d 	b.w	801ad50 <_puts_r>
 801ae36:	bf00      	nop
 801ae38:	20000030 	.word	0x20000030

0801ae3c <rand>:
 801ae3c:	4b16      	ldr	r3, [pc, #88]	; (801ae98 <rand+0x5c>)
 801ae3e:	b510      	push	{r4, lr}
 801ae40:	681c      	ldr	r4, [r3, #0]
 801ae42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ae44:	b9b3      	cbnz	r3, 801ae74 <rand+0x38>
 801ae46:	2018      	movs	r0, #24
 801ae48:	f000 fb46 	bl	801b4d8 <malloc>
 801ae4c:	63a0      	str	r0, [r4, #56]	; 0x38
 801ae4e:	b928      	cbnz	r0, 801ae5c <rand+0x20>
 801ae50:	4602      	mov	r2, r0
 801ae52:	4b12      	ldr	r3, [pc, #72]	; (801ae9c <rand+0x60>)
 801ae54:	4812      	ldr	r0, [pc, #72]	; (801aea0 <rand+0x64>)
 801ae56:	214e      	movs	r1, #78	; 0x4e
 801ae58:	f000 f8ee 	bl	801b038 <__assert_func>
 801ae5c:	4a11      	ldr	r2, [pc, #68]	; (801aea4 <rand+0x68>)
 801ae5e:	4b12      	ldr	r3, [pc, #72]	; (801aea8 <rand+0x6c>)
 801ae60:	e9c0 2300 	strd	r2, r3, [r0]
 801ae64:	4b11      	ldr	r3, [pc, #68]	; (801aeac <rand+0x70>)
 801ae66:	6083      	str	r3, [r0, #8]
 801ae68:	230b      	movs	r3, #11
 801ae6a:	8183      	strh	r3, [r0, #12]
 801ae6c:	2201      	movs	r2, #1
 801ae6e:	2300      	movs	r3, #0
 801ae70:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801ae74:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801ae76:	4a0e      	ldr	r2, [pc, #56]	; (801aeb0 <rand+0x74>)
 801ae78:	6920      	ldr	r0, [r4, #16]
 801ae7a:	6963      	ldr	r3, [r4, #20]
 801ae7c:	490d      	ldr	r1, [pc, #52]	; (801aeb4 <rand+0x78>)
 801ae7e:	4342      	muls	r2, r0
 801ae80:	fb01 2203 	mla	r2, r1, r3, r2
 801ae84:	fba0 0101 	umull	r0, r1, r0, r1
 801ae88:	1c43      	adds	r3, r0, #1
 801ae8a:	eb42 0001 	adc.w	r0, r2, r1
 801ae8e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801ae92:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801ae96:	bd10      	pop	{r4, pc}
 801ae98:	20000030 	.word	0x20000030
 801ae9c:	0801fb2c 	.word	0x0801fb2c
 801aea0:	0801fb43 	.word	0x0801fb43
 801aea4:	abcd330e 	.word	0xabcd330e
 801aea8:	e66d1234 	.word	0xe66d1234
 801aeac:	0005deec 	.word	0x0005deec
 801aeb0:	5851f42d 	.word	0x5851f42d
 801aeb4:	4c957f2d 	.word	0x4c957f2d

0801aeb8 <__swbuf_r>:
 801aeb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aeba:	460e      	mov	r6, r1
 801aebc:	4614      	mov	r4, r2
 801aebe:	4605      	mov	r5, r0
 801aec0:	b118      	cbz	r0, 801aeca <__swbuf_r+0x12>
 801aec2:	6983      	ldr	r3, [r0, #24]
 801aec4:	b90b      	cbnz	r3, 801aeca <__swbuf_r+0x12>
 801aec6:	f000 f9ef 	bl	801b2a8 <__sinit>
 801aeca:	4b21      	ldr	r3, [pc, #132]	; (801af50 <__swbuf_r+0x98>)
 801aecc:	429c      	cmp	r4, r3
 801aece:	d12b      	bne.n	801af28 <__swbuf_r+0x70>
 801aed0:	686c      	ldr	r4, [r5, #4]
 801aed2:	69a3      	ldr	r3, [r4, #24]
 801aed4:	60a3      	str	r3, [r4, #8]
 801aed6:	89a3      	ldrh	r3, [r4, #12]
 801aed8:	071a      	lsls	r2, r3, #28
 801aeda:	d52f      	bpl.n	801af3c <__swbuf_r+0x84>
 801aedc:	6923      	ldr	r3, [r4, #16]
 801aede:	b36b      	cbz	r3, 801af3c <__swbuf_r+0x84>
 801aee0:	6923      	ldr	r3, [r4, #16]
 801aee2:	6820      	ldr	r0, [r4, #0]
 801aee4:	1ac0      	subs	r0, r0, r3
 801aee6:	6963      	ldr	r3, [r4, #20]
 801aee8:	b2f6      	uxtb	r6, r6
 801aeea:	4283      	cmp	r3, r0
 801aeec:	4637      	mov	r7, r6
 801aeee:	dc04      	bgt.n	801aefa <__swbuf_r+0x42>
 801aef0:	4621      	mov	r1, r4
 801aef2:	4628      	mov	r0, r5
 801aef4:	f000 f944 	bl	801b180 <_fflush_r>
 801aef8:	bb30      	cbnz	r0, 801af48 <__swbuf_r+0x90>
 801aefa:	68a3      	ldr	r3, [r4, #8]
 801aefc:	3b01      	subs	r3, #1
 801aefe:	60a3      	str	r3, [r4, #8]
 801af00:	6823      	ldr	r3, [r4, #0]
 801af02:	1c5a      	adds	r2, r3, #1
 801af04:	6022      	str	r2, [r4, #0]
 801af06:	701e      	strb	r6, [r3, #0]
 801af08:	6963      	ldr	r3, [r4, #20]
 801af0a:	3001      	adds	r0, #1
 801af0c:	4283      	cmp	r3, r0
 801af0e:	d004      	beq.n	801af1a <__swbuf_r+0x62>
 801af10:	89a3      	ldrh	r3, [r4, #12]
 801af12:	07db      	lsls	r3, r3, #31
 801af14:	d506      	bpl.n	801af24 <__swbuf_r+0x6c>
 801af16:	2e0a      	cmp	r6, #10
 801af18:	d104      	bne.n	801af24 <__swbuf_r+0x6c>
 801af1a:	4621      	mov	r1, r4
 801af1c:	4628      	mov	r0, r5
 801af1e:	f000 f92f 	bl	801b180 <_fflush_r>
 801af22:	b988      	cbnz	r0, 801af48 <__swbuf_r+0x90>
 801af24:	4638      	mov	r0, r7
 801af26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af28:	4b0a      	ldr	r3, [pc, #40]	; (801af54 <__swbuf_r+0x9c>)
 801af2a:	429c      	cmp	r4, r3
 801af2c:	d101      	bne.n	801af32 <__swbuf_r+0x7a>
 801af2e:	68ac      	ldr	r4, [r5, #8]
 801af30:	e7cf      	b.n	801aed2 <__swbuf_r+0x1a>
 801af32:	4b09      	ldr	r3, [pc, #36]	; (801af58 <__swbuf_r+0xa0>)
 801af34:	429c      	cmp	r4, r3
 801af36:	bf08      	it	eq
 801af38:	68ec      	ldreq	r4, [r5, #12]
 801af3a:	e7ca      	b.n	801aed2 <__swbuf_r+0x1a>
 801af3c:	4621      	mov	r1, r4
 801af3e:	4628      	mov	r0, r5
 801af40:	f000 f80c 	bl	801af5c <__swsetup_r>
 801af44:	2800      	cmp	r0, #0
 801af46:	d0cb      	beq.n	801aee0 <__swbuf_r+0x28>
 801af48:	f04f 37ff 	mov.w	r7, #4294967295
 801af4c:	e7ea      	b.n	801af24 <__swbuf_r+0x6c>
 801af4e:	bf00      	nop
 801af50:	0801fbfc 	.word	0x0801fbfc
 801af54:	0801fc1c 	.word	0x0801fc1c
 801af58:	0801fbdc 	.word	0x0801fbdc

0801af5c <__swsetup_r>:
 801af5c:	4b32      	ldr	r3, [pc, #200]	; (801b028 <__swsetup_r+0xcc>)
 801af5e:	b570      	push	{r4, r5, r6, lr}
 801af60:	681d      	ldr	r5, [r3, #0]
 801af62:	4606      	mov	r6, r0
 801af64:	460c      	mov	r4, r1
 801af66:	b125      	cbz	r5, 801af72 <__swsetup_r+0x16>
 801af68:	69ab      	ldr	r3, [r5, #24]
 801af6a:	b913      	cbnz	r3, 801af72 <__swsetup_r+0x16>
 801af6c:	4628      	mov	r0, r5
 801af6e:	f000 f99b 	bl	801b2a8 <__sinit>
 801af72:	4b2e      	ldr	r3, [pc, #184]	; (801b02c <__swsetup_r+0xd0>)
 801af74:	429c      	cmp	r4, r3
 801af76:	d10f      	bne.n	801af98 <__swsetup_r+0x3c>
 801af78:	686c      	ldr	r4, [r5, #4]
 801af7a:	89a3      	ldrh	r3, [r4, #12]
 801af7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801af80:	0719      	lsls	r1, r3, #28
 801af82:	d42c      	bmi.n	801afde <__swsetup_r+0x82>
 801af84:	06dd      	lsls	r5, r3, #27
 801af86:	d411      	bmi.n	801afac <__swsetup_r+0x50>
 801af88:	2309      	movs	r3, #9
 801af8a:	6033      	str	r3, [r6, #0]
 801af8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801af90:	81a3      	strh	r3, [r4, #12]
 801af92:	f04f 30ff 	mov.w	r0, #4294967295
 801af96:	e03e      	b.n	801b016 <__swsetup_r+0xba>
 801af98:	4b25      	ldr	r3, [pc, #148]	; (801b030 <__swsetup_r+0xd4>)
 801af9a:	429c      	cmp	r4, r3
 801af9c:	d101      	bne.n	801afa2 <__swsetup_r+0x46>
 801af9e:	68ac      	ldr	r4, [r5, #8]
 801afa0:	e7eb      	b.n	801af7a <__swsetup_r+0x1e>
 801afa2:	4b24      	ldr	r3, [pc, #144]	; (801b034 <__swsetup_r+0xd8>)
 801afa4:	429c      	cmp	r4, r3
 801afa6:	bf08      	it	eq
 801afa8:	68ec      	ldreq	r4, [r5, #12]
 801afaa:	e7e6      	b.n	801af7a <__swsetup_r+0x1e>
 801afac:	0758      	lsls	r0, r3, #29
 801afae:	d512      	bpl.n	801afd6 <__swsetup_r+0x7a>
 801afb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801afb2:	b141      	cbz	r1, 801afc6 <__swsetup_r+0x6a>
 801afb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801afb8:	4299      	cmp	r1, r3
 801afba:	d002      	beq.n	801afc2 <__swsetup_r+0x66>
 801afbc:	4630      	mov	r0, r6
 801afbe:	f000 fa93 	bl	801b4e8 <_free_r>
 801afc2:	2300      	movs	r3, #0
 801afc4:	6363      	str	r3, [r4, #52]	; 0x34
 801afc6:	89a3      	ldrh	r3, [r4, #12]
 801afc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801afcc:	81a3      	strh	r3, [r4, #12]
 801afce:	2300      	movs	r3, #0
 801afd0:	6063      	str	r3, [r4, #4]
 801afd2:	6923      	ldr	r3, [r4, #16]
 801afd4:	6023      	str	r3, [r4, #0]
 801afd6:	89a3      	ldrh	r3, [r4, #12]
 801afd8:	f043 0308 	orr.w	r3, r3, #8
 801afdc:	81a3      	strh	r3, [r4, #12]
 801afde:	6923      	ldr	r3, [r4, #16]
 801afe0:	b94b      	cbnz	r3, 801aff6 <__swsetup_r+0x9a>
 801afe2:	89a3      	ldrh	r3, [r4, #12]
 801afe4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801afe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801afec:	d003      	beq.n	801aff6 <__swsetup_r+0x9a>
 801afee:	4621      	mov	r1, r4
 801aff0:	4630      	mov	r0, r6
 801aff2:	f000 fa31 	bl	801b458 <__smakebuf_r>
 801aff6:	89a0      	ldrh	r0, [r4, #12]
 801aff8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801affc:	f010 0301 	ands.w	r3, r0, #1
 801b000:	d00a      	beq.n	801b018 <__swsetup_r+0xbc>
 801b002:	2300      	movs	r3, #0
 801b004:	60a3      	str	r3, [r4, #8]
 801b006:	6963      	ldr	r3, [r4, #20]
 801b008:	425b      	negs	r3, r3
 801b00a:	61a3      	str	r3, [r4, #24]
 801b00c:	6923      	ldr	r3, [r4, #16]
 801b00e:	b943      	cbnz	r3, 801b022 <__swsetup_r+0xc6>
 801b010:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b014:	d1ba      	bne.n	801af8c <__swsetup_r+0x30>
 801b016:	bd70      	pop	{r4, r5, r6, pc}
 801b018:	0781      	lsls	r1, r0, #30
 801b01a:	bf58      	it	pl
 801b01c:	6963      	ldrpl	r3, [r4, #20]
 801b01e:	60a3      	str	r3, [r4, #8]
 801b020:	e7f4      	b.n	801b00c <__swsetup_r+0xb0>
 801b022:	2000      	movs	r0, #0
 801b024:	e7f7      	b.n	801b016 <__swsetup_r+0xba>
 801b026:	bf00      	nop
 801b028:	20000030 	.word	0x20000030
 801b02c:	0801fbfc 	.word	0x0801fbfc
 801b030:	0801fc1c 	.word	0x0801fc1c
 801b034:	0801fbdc 	.word	0x0801fbdc

0801b038 <__assert_func>:
 801b038:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b03a:	4614      	mov	r4, r2
 801b03c:	461a      	mov	r2, r3
 801b03e:	4b09      	ldr	r3, [pc, #36]	; (801b064 <__assert_func+0x2c>)
 801b040:	681b      	ldr	r3, [r3, #0]
 801b042:	4605      	mov	r5, r0
 801b044:	68d8      	ldr	r0, [r3, #12]
 801b046:	b14c      	cbz	r4, 801b05c <__assert_func+0x24>
 801b048:	4b07      	ldr	r3, [pc, #28]	; (801b068 <__assert_func+0x30>)
 801b04a:	9100      	str	r1, [sp, #0]
 801b04c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b050:	4906      	ldr	r1, [pc, #24]	; (801b06c <__assert_func+0x34>)
 801b052:	462b      	mov	r3, r5
 801b054:	f000 f9a6 	bl	801b3a4 <fiprintf>
 801b058:	f000 fec2 	bl	801bde0 <abort>
 801b05c:	4b04      	ldr	r3, [pc, #16]	; (801b070 <__assert_func+0x38>)
 801b05e:	461c      	mov	r4, r3
 801b060:	e7f3      	b.n	801b04a <__assert_func+0x12>
 801b062:	bf00      	nop
 801b064:	20000030 	.word	0x20000030
 801b068:	0801fb9e 	.word	0x0801fb9e
 801b06c:	0801fbab 	.word	0x0801fbab
 801b070:	0801fbd9 	.word	0x0801fbd9

0801b074 <__sflush_r>:
 801b074:	898a      	ldrh	r2, [r1, #12]
 801b076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b07a:	4605      	mov	r5, r0
 801b07c:	0710      	lsls	r0, r2, #28
 801b07e:	460c      	mov	r4, r1
 801b080:	d458      	bmi.n	801b134 <__sflush_r+0xc0>
 801b082:	684b      	ldr	r3, [r1, #4]
 801b084:	2b00      	cmp	r3, #0
 801b086:	dc05      	bgt.n	801b094 <__sflush_r+0x20>
 801b088:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	dc02      	bgt.n	801b094 <__sflush_r+0x20>
 801b08e:	2000      	movs	r0, #0
 801b090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b094:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b096:	2e00      	cmp	r6, #0
 801b098:	d0f9      	beq.n	801b08e <__sflush_r+0x1a>
 801b09a:	2300      	movs	r3, #0
 801b09c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b0a0:	682f      	ldr	r7, [r5, #0]
 801b0a2:	602b      	str	r3, [r5, #0]
 801b0a4:	d032      	beq.n	801b10c <__sflush_r+0x98>
 801b0a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b0a8:	89a3      	ldrh	r3, [r4, #12]
 801b0aa:	075a      	lsls	r2, r3, #29
 801b0ac:	d505      	bpl.n	801b0ba <__sflush_r+0x46>
 801b0ae:	6863      	ldr	r3, [r4, #4]
 801b0b0:	1ac0      	subs	r0, r0, r3
 801b0b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b0b4:	b10b      	cbz	r3, 801b0ba <__sflush_r+0x46>
 801b0b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b0b8:	1ac0      	subs	r0, r0, r3
 801b0ba:	2300      	movs	r3, #0
 801b0bc:	4602      	mov	r2, r0
 801b0be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b0c0:	6a21      	ldr	r1, [r4, #32]
 801b0c2:	4628      	mov	r0, r5
 801b0c4:	47b0      	blx	r6
 801b0c6:	1c43      	adds	r3, r0, #1
 801b0c8:	89a3      	ldrh	r3, [r4, #12]
 801b0ca:	d106      	bne.n	801b0da <__sflush_r+0x66>
 801b0cc:	6829      	ldr	r1, [r5, #0]
 801b0ce:	291d      	cmp	r1, #29
 801b0d0:	d82c      	bhi.n	801b12c <__sflush_r+0xb8>
 801b0d2:	4a2a      	ldr	r2, [pc, #168]	; (801b17c <__sflush_r+0x108>)
 801b0d4:	40ca      	lsrs	r2, r1
 801b0d6:	07d6      	lsls	r6, r2, #31
 801b0d8:	d528      	bpl.n	801b12c <__sflush_r+0xb8>
 801b0da:	2200      	movs	r2, #0
 801b0dc:	6062      	str	r2, [r4, #4]
 801b0de:	04d9      	lsls	r1, r3, #19
 801b0e0:	6922      	ldr	r2, [r4, #16]
 801b0e2:	6022      	str	r2, [r4, #0]
 801b0e4:	d504      	bpl.n	801b0f0 <__sflush_r+0x7c>
 801b0e6:	1c42      	adds	r2, r0, #1
 801b0e8:	d101      	bne.n	801b0ee <__sflush_r+0x7a>
 801b0ea:	682b      	ldr	r3, [r5, #0]
 801b0ec:	b903      	cbnz	r3, 801b0f0 <__sflush_r+0x7c>
 801b0ee:	6560      	str	r0, [r4, #84]	; 0x54
 801b0f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b0f2:	602f      	str	r7, [r5, #0]
 801b0f4:	2900      	cmp	r1, #0
 801b0f6:	d0ca      	beq.n	801b08e <__sflush_r+0x1a>
 801b0f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b0fc:	4299      	cmp	r1, r3
 801b0fe:	d002      	beq.n	801b106 <__sflush_r+0x92>
 801b100:	4628      	mov	r0, r5
 801b102:	f000 f9f1 	bl	801b4e8 <_free_r>
 801b106:	2000      	movs	r0, #0
 801b108:	6360      	str	r0, [r4, #52]	; 0x34
 801b10a:	e7c1      	b.n	801b090 <__sflush_r+0x1c>
 801b10c:	6a21      	ldr	r1, [r4, #32]
 801b10e:	2301      	movs	r3, #1
 801b110:	4628      	mov	r0, r5
 801b112:	47b0      	blx	r6
 801b114:	1c41      	adds	r1, r0, #1
 801b116:	d1c7      	bne.n	801b0a8 <__sflush_r+0x34>
 801b118:	682b      	ldr	r3, [r5, #0]
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	d0c4      	beq.n	801b0a8 <__sflush_r+0x34>
 801b11e:	2b1d      	cmp	r3, #29
 801b120:	d001      	beq.n	801b126 <__sflush_r+0xb2>
 801b122:	2b16      	cmp	r3, #22
 801b124:	d101      	bne.n	801b12a <__sflush_r+0xb6>
 801b126:	602f      	str	r7, [r5, #0]
 801b128:	e7b1      	b.n	801b08e <__sflush_r+0x1a>
 801b12a:	89a3      	ldrh	r3, [r4, #12]
 801b12c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b130:	81a3      	strh	r3, [r4, #12]
 801b132:	e7ad      	b.n	801b090 <__sflush_r+0x1c>
 801b134:	690f      	ldr	r7, [r1, #16]
 801b136:	2f00      	cmp	r7, #0
 801b138:	d0a9      	beq.n	801b08e <__sflush_r+0x1a>
 801b13a:	0793      	lsls	r3, r2, #30
 801b13c:	680e      	ldr	r6, [r1, #0]
 801b13e:	bf08      	it	eq
 801b140:	694b      	ldreq	r3, [r1, #20]
 801b142:	600f      	str	r7, [r1, #0]
 801b144:	bf18      	it	ne
 801b146:	2300      	movne	r3, #0
 801b148:	eba6 0807 	sub.w	r8, r6, r7
 801b14c:	608b      	str	r3, [r1, #8]
 801b14e:	f1b8 0f00 	cmp.w	r8, #0
 801b152:	dd9c      	ble.n	801b08e <__sflush_r+0x1a>
 801b154:	6a21      	ldr	r1, [r4, #32]
 801b156:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b158:	4643      	mov	r3, r8
 801b15a:	463a      	mov	r2, r7
 801b15c:	4628      	mov	r0, r5
 801b15e:	47b0      	blx	r6
 801b160:	2800      	cmp	r0, #0
 801b162:	dc06      	bgt.n	801b172 <__sflush_r+0xfe>
 801b164:	89a3      	ldrh	r3, [r4, #12]
 801b166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b16a:	81a3      	strh	r3, [r4, #12]
 801b16c:	f04f 30ff 	mov.w	r0, #4294967295
 801b170:	e78e      	b.n	801b090 <__sflush_r+0x1c>
 801b172:	4407      	add	r7, r0
 801b174:	eba8 0800 	sub.w	r8, r8, r0
 801b178:	e7e9      	b.n	801b14e <__sflush_r+0xda>
 801b17a:	bf00      	nop
 801b17c:	20400001 	.word	0x20400001

0801b180 <_fflush_r>:
 801b180:	b538      	push	{r3, r4, r5, lr}
 801b182:	690b      	ldr	r3, [r1, #16]
 801b184:	4605      	mov	r5, r0
 801b186:	460c      	mov	r4, r1
 801b188:	b913      	cbnz	r3, 801b190 <_fflush_r+0x10>
 801b18a:	2500      	movs	r5, #0
 801b18c:	4628      	mov	r0, r5
 801b18e:	bd38      	pop	{r3, r4, r5, pc}
 801b190:	b118      	cbz	r0, 801b19a <_fflush_r+0x1a>
 801b192:	6983      	ldr	r3, [r0, #24]
 801b194:	b90b      	cbnz	r3, 801b19a <_fflush_r+0x1a>
 801b196:	f000 f887 	bl	801b2a8 <__sinit>
 801b19a:	4b14      	ldr	r3, [pc, #80]	; (801b1ec <_fflush_r+0x6c>)
 801b19c:	429c      	cmp	r4, r3
 801b19e:	d11b      	bne.n	801b1d8 <_fflush_r+0x58>
 801b1a0:	686c      	ldr	r4, [r5, #4]
 801b1a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	d0ef      	beq.n	801b18a <_fflush_r+0xa>
 801b1aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b1ac:	07d0      	lsls	r0, r2, #31
 801b1ae:	d404      	bmi.n	801b1ba <_fflush_r+0x3a>
 801b1b0:	0599      	lsls	r1, r3, #22
 801b1b2:	d402      	bmi.n	801b1ba <_fflush_r+0x3a>
 801b1b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b1b6:	f000 f927 	bl	801b408 <__retarget_lock_acquire_recursive>
 801b1ba:	4628      	mov	r0, r5
 801b1bc:	4621      	mov	r1, r4
 801b1be:	f7ff ff59 	bl	801b074 <__sflush_r>
 801b1c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b1c4:	07da      	lsls	r2, r3, #31
 801b1c6:	4605      	mov	r5, r0
 801b1c8:	d4e0      	bmi.n	801b18c <_fflush_r+0xc>
 801b1ca:	89a3      	ldrh	r3, [r4, #12]
 801b1cc:	059b      	lsls	r3, r3, #22
 801b1ce:	d4dd      	bmi.n	801b18c <_fflush_r+0xc>
 801b1d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b1d2:	f000 f91a 	bl	801b40a <__retarget_lock_release_recursive>
 801b1d6:	e7d9      	b.n	801b18c <_fflush_r+0xc>
 801b1d8:	4b05      	ldr	r3, [pc, #20]	; (801b1f0 <_fflush_r+0x70>)
 801b1da:	429c      	cmp	r4, r3
 801b1dc:	d101      	bne.n	801b1e2 <_fflush_r+0x62>
 801b1de:	68ac      	ldr	r4, [r5, #8]
 801b1e0:	e7df      	b.n	801b1a2 <_fflush_r+0x22>
 801b1e2:	4b04      	ldr	r3, [pc, #16]	; (801b1f4 <_fflush_r+0x74>)
 801b1e4:	429c      	cmp	r4, r3
 801b1e6:	bf08      	it	eq
 801b1e8:	68ec      	ldreq	r4, [r5, #12]
 801b1ea:	e7da      	b.n	801b1a2 <_fflush_r+0x22>
 801b1ec:	0801fbfc 	.word	0x0801fbfc
 801b1f0:	0801fc1c 	.word	0x0801fc1c
 801b1f4:	0801fbdc 	.word	0x0801fbdc

0801b1f8 <std>:
 801b1f8:	2300      	movs	r3, #0
 801b1fa:	b510      	push	{r4, lr}
 801b1fc:	4604      	mov	r4, r0
 801b1fe:	e9c0 3300 	strd	r3, r3, [r0]
 801b202:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b206:	6083      	str	r3, [r0, #8]
 801b208:	8181      	strh	r1, [r0, #12]
 801b20a:	6643      	str	r3, [r0, #100]	; 0x64
 801b20c:	81c2      	strh	r2, [r0, #14]
 801b20e:	6183      	str	r3, [r0, #24]
 801b210:	4619      	mov	r1, r3
 801b212:	2208      	movs	r2, #8
 801b214:	305c      	adds	r0, #92	; 0x5c
 801b216:	f7ff fd65 	bl	801ace4 <memset>
 801b21a:	4b05      	ldr	r3, [pc, #20]	; (801b230 <std+0x38>)
 801b21c:	6263      	str	r3, [r4, #36]	; 0x24
 801b21e:	4b05      	ldr	r3, [pc, #20]	; (801b234 <std+0x3c>)
 801b220:	62a3      	str	r3, [r4, #40]	; 0x28
 801b222:	4b05      	ldr	r3, [pc, #20]	; (801b238 <std+0x40>)
 801b224:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b226:	4b05      	ldr	r3, [pc, #20]	; (801b23c <std+0x44>)
 801b228:	6224      	str	r4, [r4, #32]
 801b22a:	6323      	str	r3, [r4, #48]	; 0x30
 801b22c:	bd10      	pop	{r4, pc}
 801b22e:	bf00      	nop
 801b230:	0801bd35 	.word	0x0801bd35
 801b234:	0801bd57 	.word	0x0801bd57
 801b238:	0801bd8f 	.word	0x0801bd8f
 801b23c:	0801bdb3 	.word	0x0801bdb3

0801b240 <_cleanup_r>:
 801b240:	4901      	ldr	r1, [pc, #4]	; (801b248 <_cleanup_r+0x8>)
 801b242:	f000 b8c1 	b.w	801b3c8 <_fwalk_reent>
 801b246:	bf00      	nop
 801b248:	0801b181 	.word	0x0801b181

0801b24c <__sfmoreglue>:
 801b24c:	b570      	push	{r4, r5, r6, lr}
 801b24e:	2268      	movs	r2, #104	; 0x68
 801b250:	1e4d      	subs	r5, r1, #1
 801b252:	4355      	muls	r5, r2
 801b254:	460e      	mov	r6, r1
 801b256:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b25a:	f000 f9b1 	bl	801b5c0 <_malloc_r>
 801b25e:	4604      	mov	r4, r0
 801b260:	b140      	cbz	r0, 801b274 <__sfmoreglue+0x28>
 801b262:	2100      	movs	r1, #0
 801b264:	e9c0 1600 	strd	r1, r6, [r0]
 801b268:	300c      	adds	r0, #12
 801b26a:	60a0      	str	r0, [r4, #8]
 801b26c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b270:	f7ff fd38 	bl	801ace4 <memset>
 801b274:	4620      	mov	r0, r4
 801b276:	bd70      	pop	{r4, r5, r6, pc}

0801b278 <__sfp_lock_acquire>:
 801b278:	4801      	ldr	r0, [pc, #4]	; (801b280 <__sfp_lock_acquire+0x8>)
 801b27a:	f000 b8c5 	b.w	801b408 <__retarget_lock_acquire_recursive>
 801b27e:	bf00      	nop
 801b280:	200111ed 	.word	0x200111ed

0801b284 <__sfp_lock_release>:
 801b284:	4801      	ldr	r0, [pc, #4]	; (801b28c <__sfp_lock_release+0x8>)
 801b286:	f000 b8c0 	b.w	801b40a <__retarget_lock_release_recursive>
 801b28a:	bf00      	nop
 801b28c:	200111ed 	.word	0x200111ed

0801b290 <__sinit_lock_acquire>:
 801b290:	4801      	ldr	r0, [pc, #4]	; (801b298 <__sinit_lock_acquire+0x8>)
 801b292:	f000 b8b9 	b.w	801b408 <__retarget_lock_acquire_recursive>
 801b296:	bf00      	nop
 801b298:	200111ee 	.word	0x200111ee

0801b29c <__sinit_lock_release>:
 801b29c:	4801      	ldr	r0, [pc, #4]	; (801b2a4 <__sinit_lock_release+0x8>)
 801b29e:	f000 b8b4 	b.w	801b40a <__retarget_lock_release_recursive>
 801b2a2:	bf00      	nop
 801b2a4:	200111ee 	.word	0x200111ee

0801b2a8 <__sinit>:
 801b2a8:	b510      	push	{r4, lr}
 801b2aa:	4604      	mov	r4, r0
 801b2ac:	f7ff fff0 	bl	801b290 <__sinit_lock_acquire>
 801b2b0:	69a3      	ldr	r3, [r4, #24]
 801b2b2:	b11b      	cbz	r3, 801b2bc <__sinit+0x14>
 801b2b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b2b8:	f7ff bff0 	b.w	801b29c <__sinit_lock_release>
 801b2bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b2c0:	6523      	str	r3, [r4, #80]	; 0x50
 801b2c2:	4b13      	ldr	r3, [pc, #76]	; (801b310 <__sinit+0x68>)
 801b2c4:	4a13      	ldr	r2, [pc, #76]	; (801b314 <__sinit+0x6c>)
 801b2c6:	681b      	ldr	r3, [r3, #0]
 801b2c8:	62a2      	str	r2, [r4, #40]	; 0x28
 801b2ca:	42a3      	cmp	r3, r4
 801b2cc:	bf04      	itt	eq
 801b2ce:	2301      	moveq	r3, #1
 801b2d0:	61a3      	streq	r3, [r4, #24]
 801b2d2:	4620      	mov	r0, r4
 801b2d4:	f000 f820 	bl	801b318 <__sfp>
 801b2d8:	6060      	str	r0, [r4, #4]
 801b2da:	4620      	mov	r0, r4
 801b2dc:	f000 f81c 	bl	801b318 <__sfp>
 801b2e0:	60a0      	str	r0, [r4, #8]
 801b2e2:	4620      	mov	r0, r4
 801b2e4:	f000 f818 	bl	801b318 <__sfp>
 801b2e8:	2200      	movs	r2, #0
 801b2ea:	60e0      	str	r0, [r4, #12]
 801b2ec:	2104      	movs	r1, #4
 801b2ee:	6860      	ldr	r0, [r4, #4]
 801b2f0:	f7ff ff82 	bl	801b1f8 <std>
 801b2f4:	68a0      	ldr	r0, [r4, #8]
 801b2f6:	2201      	movs	r2, #1
 801b2f8:	2109      	movs	r1, #9
 801b2fa:	f7ff ff7d 	bl	801b1f8 <std>
 801b2fe:	68e0      	ldr	r0, [r4, #12]
 801b300:	2202      	movs	r2, #2
 801b302:	2112      	movs	r1, #18
 801b304:	f7ff ff78 	bl	801b1f8 <std>
 801b308:	2301      	movs	r3, #1
 801b30a:	61a3      	str	r3, [r4, #24]
 801b30c:	e7d2      	b.n	801b2b4 <__sinit+0xc>
 801b30e:	bf00      	nop
 801b310:	0801fb28 	.word	0x0801fb28
 801b314:	0801b241 	.word	0x0801b241

0801b318 <__sfp>:
 801b318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b31a:	4607      	mov	r7, r0
 801b31c:	f7ff ffac 	bl	801b278 <__sfp_lock_acquire>
 801b320:	4b1e      	ldr	r3, [pc, #120]	; (801b39c <__sfp+0x84>)
 801b322:	681e      	ldr	r6, [r3, #0]
 801b324:	69b3      	ldr	r3, [r6, #24]
 801b326:	b913      	cbnz	r3, 801b32e <__sfp+0x16>
 801b328:	4630      	mov	r0, r6
 801b32a:	f7ff ffbd 	bl	801b2a8 <__sinit>
 801b32e:	3648      	adds	r6, #72	; 0x48
 801b330:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b334:	3b01      	subs	r3, #1
 801b336:	d503      	bpl.n	801b340 <__sfp+0x28>
 801b338:	6833      	ldr	r3, [r6, #0]
 801b33a:	b30b      	cbz	r3, 801b380 <__sfp+0x68>
 801b33c:	6836      	ldr	r6, [r6, #0]
 801b33e:	e7f7      	b.n	801b330 <__sfp+0x18>
 801b340:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b344:	b9d5      	cbnz	r5, 801b37c <__sfp+0x64>
 801b346:	4b16      	ldr	r3, [pc, #88]	; (801b3a0 <__sfp+0x88>)
 801b348:	60e3      	str	r3, [r4, #12]
 801b34a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b34e:	6665      	str	r5, [r4, #100]	; 0x64
 801b350:	f000 f859 	bl	801b406 <__retarget_lock_init_recursive>
 801b354:	f7ff ff96 	bl	801b284 <__sfp_lock_release>
 801b358:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b35c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b360:	6025      	str	r5, [r4, #0]
 801b362:	61a5      	str	r5, [r4, #24]
 801b364:	2208      	movs	r2, #8
 801b366:	4629      	mov	r1, r5
 801b368:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b36c:	f7ff fcba 	bl	801ace4 <memset>
 801b370:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b374:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b378:	4620      	mov	r0, r4
 801b37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b37c:	3468      	adds	r4, #104	; 0x68
 801b37e:	e7d9      	b.n	801b334 <__sfp+0x1c>
 801b380:	2104      	movs	r1, #4
 801b382:	4638      	mov	r0, r7
 801b384:	f7ff ff62 	bl	801b24c <__sfmoreglue>
 801b388:	4604      	mov	r4, r0
 801b38a:	6030      	str	r0, [r6, #0]
 801b38c:	2800      	cmp	r0, #0
 801b38e:	d1d5      	bne.n	801b33c <__sfp+0x24>
 801b390:	f7ff ff78 	bl	801b284 <__sfp_lock_release>
 801b394:	230c      	movs	r3, #12
 801b396:	603b      	str	r3, [r7, #0]
 801b398:	e7ee      	b.n	801b378 <__sfp+0x60>
 801b39a:	bf00      	nop
 801b39c:	0801fb28 	.word	0x0801fb28
 801b3a0:	ffff0001 	.word	0xffff0001

0801b3a4 <fiprintf>:
 801b3a4:	b40e      	push	{r1, r2, r3}
 801b3a6:	b503      	push	{r0, r1, lr}
 801b3a8:	4601      	mov	r1, r0
 801b3aa:	ab03      	add	r3, sp, #12
 801b3ac:	4805      	ldr	r0, [pc, #20]	; (801b3c4 <fiprintf+0x20>)
 801b3ae:	f853 2b04 	ldr.w	r2, [r3], #4
 801b3b2:	6800      	ldr	r0, [r0, #0]
 801b3b4:	9301      	str	r3, [sp, #4]
 801b3b6:	f000 f9a1 	bl	801b6fc <_vfiprintf_r>
 801b3ba:	b002      	add	sp, #8
 801b3bc:	f85d eb04 	ldr.w	lr, [sp], #4
 801b3c0:	b003      	add	sp, #12
 801b3c2:	4770      	bx	lr
 801b3c4:	20000030 	.word	0x20000030

0801b3c8 <_fwalk_reent>:
 801b3c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b3cc:	4606      	mov	r6, r0
 801b3ce:	4688      	mov	r8, r1
 801b3d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b3d4:	2700      	movs	r7, #0
 801b3d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b3da:	f1b9 0901 	subs.w	r9, r9, #1
 801b3de:	d505      	bpl.n	801b3ec <_fwalk_reent+0x24>
 801b3e0:	6824      	ldr	r4, [r4, #0]
 801b3e2:	2c00      	cmp	r4, #0
 801b3e4:	d1f7      	bne.n	801b3d6 <_fwalk_reent+0xe>
 801b3e6:	4638      	mov	r0, r7
 801b3e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b3ec:	89ab      	ldrh	r3, [r5, #12]
 801b3ee:	2b01      	cmp	r3, #1
 801b3f0:	d907      	bls.n	801b402 <_fwalk_reent+0x3a>
 801b3f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b3f6:	3301      	adds	r3, #1
 801b3f8:	d003      	beq.n	801b402 <_fwalk_reent+0x3a>
 801b3fa:	4629      	mov	r1, r5
 801b3fc:	4630      	mov	r0, r6
 801b3fe:	47c0      	blx	r8
 801b400:	4307      	orrs	r7, r0
 801b402:	3568      	adds	r5, #104	; 0x68
 801b404:	e7e9      	b.n	801b3da <_fwalk_reent+0x12>

0801b406 <__retarget_lock_init_recursive>:
 801b406:	4770      	bx	lr

0801b408 <__retarget_lock_acquire_recursive>:
 801b408:	4770      	bx	lr

0801b40a <__retarget_lock_release_recursive>:
 801b40a:	4770      	bx	lr

0801b40c <__swhatbuf_r>:
 801b40c:	b570      	push	{r4, r5, r6, lr}
 801b40e:	460e      	mov	r6, r1
 801b410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b414:	2900      	cmp	r1, #0
 801b416:	b096      	sub	sp, #88	; 0x58
 801b418:	4614      	mov	r4, r2
 801b41a:	461d      	mov	r5, r3
 801b41c:	da08      	bge.n	801b430 <__swhatbuf_r+0x24>
 801b41e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801b422:	2200      	movs	r2, #0
 801b424:	602a      	str	r2, [r5, #0]
 801b426:	061a      	lsls	r2, r3, #24
 801b428:	d410      	bmi.n	801b44c <__swhatbuf_r+0x40>
 801b42a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b42e:	e00e      	b.n	801b44e <__swhatbuf_r+0x42>
 801b430:	466a      	mov	r2, sp
 801b432:	f000 fced 	bl	801be10 <_fstat_r>
 801b436:	2800      	cmp	r0, #0
 801b438:	dbf1      	blt.n	801b41e <__swhatbuf_r+0x12>
 801b43a:	9a01      	ldr	r2, [sp, #4]
 801b43c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b440:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b444:	425a      	negs	r2, r3
 801b446:	415a      	adcs	r2, r3
 801b448:	602a      	str	r2, [r5, #0]
 801b44a:	e7ee      	b.n	801b42a <__swhatbuf_r+0x1e>
 801b44c:	2340      	movs	r3, #64	; 0x40
 801b44e:	2000      	movs	r0, #0
 801b450:	6023      	str	r3, [r4, #0]
 801b452:	b016      	add	sp, #88	; 0x58
 801b454:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b458 <__smakebuf_r>:
 801b458:	898b      	ldrh	r3, [r1, #12]
 801b45a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b45c:	079d      	lsls	r5, r3, #30
 801b45e:	4606      	mov	r6, r0
 801b460:	460c      	mov	r4, r1
 801b462:	d507      	bpl.n	801b474 <__smakebuf_r+0x1c>
 801b464:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b468:	6023      	str	r3, [r4, #0]
 801b46a:	6123      	str	r3, [r4, #16]
 801b46c:	2301      	movs	r3, #1
 801b46e:	6163      	str	r3, [r4, #20]
 801b470:	b002      	add	sp, #8
 801b472:	bd70      	pop	{r4, r5, r6, pc}
 801b474:	ab01      	add	r3, sp, #4
 801b476:	466a      	mov	r2, sp
 801b478:	f7ff ffc8 	bl	801b40c <__swhatbuf_r>
 801b47c:	9900      	ldr	r1, [sp, #0]
 801b47e:	4605      	mov	r5, r0
 801b480:	4630      	mov	r0, r6
 801b482:	f000 f89d 	bl	801b5c0 <_malloc_r>
 801b486:	b948      	cbnz	r0, 801b49c <__smakebuf_r+0x44>
 801b488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b48c:	059a      	lsls	r2, r3, #22
 801b48e:	d4ef      	bmi.n	801b470 <__smakebuf_r+0x18>
 801b490:	f023 0303 	bic.w	r3, r3, #3
 801b494:	f043 0302 	orr.w	r3, r3, #2
 801b498:	81a3      	strh	r3, [r4, #12]
 801b49a:	e7e3      	b.n	801b464 <__smakebuf_r+0xc>
 801b49c:	4b0d      	ldr	r3, [pc, #52]	; (801b4d4 <__smakebuf_r+0x7c>)
 801b49e:	62b3      	str	r3, [r6, #40]	; 0x28
 801b4a0:	89a3      	ldrh	r3, [r4, #12]
 801b4a2:	6020      	str	r0, [r4, #0]
 801b4a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b4a8:	81a3      	strh	r3, [r4, #12]
 801b4aa:	9b00      	ldr	r3, [sp, #0]
 801b4ac:	6163      	str	r3, [r4, #20]
 801b4ae:	9b01      	ldr	r3, [sp, #4]
 801b4b0:	6120      	str	r0, [r4, #16]
 801b4b2:	b15b      	cbz	r3, 801b4cc <__smakebuf_r+0x74>
 801b4b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b4b8:	4630      	mov	r0, r6
 801b4ba:	f000 fcbb 	bl	801be34 <_isatty_r>
 801b4be:	b128      	cbz	r0, 801b4cc <__smakebuf_r+0x74>
 801b4c0:	89a3      	ldrh	r3, [r4, #12]
 801b4c2:	f023 0303 	bic.w	r3, r3, #3
 801b4c6:	f043 0301 	orr.w	r3, r3, #1
 801b4ca:	81a3      	strh	r3, [r4, #12]
 801b4cc:	89a0      	ldrh	r0, [r4, #12]
 801b4ce:	4305      	orrs	r5, r0
 801b4d0:	81a5      	strh	r5, [r4, #12]
 801b4d2:	e7cd      	b.n	801b470 <__smakebuf_r+0x18>
 801b4d4:	0801b241 	.word	0x0801b241

0801b4d8 <malloc>:
 801b4d8:	4b02      	ldr	r3, [pc, #8]	; (801b4e4 <malloc+0xc>)
 801b4da:	4601      	mov	r1, r0
 801b4dc:	6818      	ldr	r0, [r3, #0]
 801b4de:	f000 b86f 	b.w	801b5c0 <_malloc_r>
 801b4e2:	bf00      	nop
 801b4e4:	20000030 	.word	0x20000030

0801b4e8 <_free_r>:
 801b4e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b4ea:	2900      	cmp	r1, #0
 801b4ec:	d044      	beq.n	801b578 <_free_r+0x90>
 801b4ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b4f2:	9001      	str	r0, [sp, #4]
 801b4f4:	2b00      	cmp	r3, #0
 801b4f6:	f1a1 0404 	sub.w	r4, r1, #4
 801b4fa:	bfb8      	it	lt
 801b4fc:	18e4      	addlt	r4, r4, r3
 801b4fe:	f000 fcbb 	bl	801be78 <__malloc_lock>
 801b502:	4a1e      	ldr	r2, [pc, #120]	; (801b57c <_free_r+0x94>)
 801b504:	9801      	ldr	r0, [sp, #4]
 801b506:	6813      	ldr	r3, [r2, #0]
 801b508:	b933      	cbnz	r3, 801b518 <_free_r+0x30>
 801b50a:	6063      	str	r3, [r4, #4]
 801b50c:	6014      	str	r4, [r2, #0]
 801b50e:	b003      	add	sp, #12
 801b510:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b514:	f000 bcb6 	b.w	801be84 <__malloc_unlock>
 801b518:	42a3      	cmp	r3, r4
 801b51a:	d908      	bls.n	801b52e <_free_r+0x46>
 801b51c:	6825      	ldr	r5, [r4, #0]
 801b51e:	1961      	adds	r1, r4, r5
 801b520:	428b      	cmp	r3, r1
 801b522:	bf01      	itttt	eq
 801b524:	6819      	ldreq	r1, [r3, #0]
 801b526:	685b      	ldreq	r3, [r3, #4]
 801b528:	1949      	addeq	r1, r1, r5
 801b52a:	6021      	streq	r1, [r4, #0]
 801b52c:	e7ed      	b.n	801b50a <_free_r+0x22>
 801b52e:	461a      	mov	r2, r3
 801b530:	685b      	ldr	r3, [r3, #4]
 801b532:	b10b      	cbz	r3, 801b538 <_free_r+0x50>
 801b534:	42a3      	cmp	r3, r4
 801b536:	d9fa      	bls.n	801b52e <_free_r+0x46>
 801b538:	6811      	ldr	r1, [r2, #0]
 801b53a:	1855      	adds	r5, r2, r1
 801b53c:	42a5      	cmp	r5, r4
 801b53e:	d10b      	bne.n	801b558 <_free_r+0x70>
 801b540:	6824      	ldr	r4, [r4, #0]
 801b542:	4421      	add	r1, r4
 801b544:	1854      	adds	r4, r2, r1
 801b546:	42a3      	cmp	r3, r4
 801b548:	6011      	str	r1, [r2, #0]
 801b54a:	d1e0      	bne.n	801b50e <_free_r+0x26>
 801b54c:	681c      	ldr	r4, [r3, #0]
 801b54e:	685b      	ldr	r3, [r3, #4]
 801b550:	6053      	str	r3, [r2, #4]
 801b552:	4421      	add	r1, r4
 801b554:	6011      	str	r1, [r2, #0]
 801b556:	e7da      	b.n	801b50e <_free_r+0x26>
 801b558:	d902      	bls.n	801b560 <_free_r+0x78>
 801b55a:	230c      	movs	r3, #12
 801b55c:	6003      	str	r3, [r0, #0]
 801b55e:	e7d6      	b.n	801b50e <_free_r+0x26>
 801b560:	6825      	ldr	r5, [r4, #0]
 801b562:	1961      	adds	r1, r4, r5
 801b564:	428b      	cmp	r3, r1
 801b566:	bf04      	itt	eq
 801b568:	6819      	ldreq	r1, [r3, #0]
 801b56a:	685b      	ldreq	r3, [r3, #4]
 801b56c:	6063      	str	r3, [r4, #4]
 801b56e:	bf04      	itt	eq
 801b570:	1949      	addeq	r1, r1, r5
 801b572:	6021      	streq	r1, [r4, #0]
 801b574:	6054      	str	r4, [r2, #4]
 801b576:	e7ca      	b.n	801b50e <_free_r+0x26>
 801b578:	b003      	add	sp, #12
 801b57a:	bd30      	pop	{r4, r5, pc}
 801b57c:	200111f0 	.word	0x200111f0

0801b580 <sbrk_aligned>:
 801b580:	b570      	push	{r4, r5, r6, lr}
 801b582:	4e0e      	ldr	r6, [pc, #56]	; (801b5bc <sbrk_aligned+0x3c>)
 801b584:	460c      	mov	r4, r1
 801b586:	6831      	ldr	r1, [r6, #0]
 801b588:	4605      	mov	r5, r0
 801b58a:	b911      	cbnz	r1, 801b592 <sbrk_aligned+0x12>
 801b58c:	f000 fbc2 	bl	801bd14 <_sbrk_r>
 801b590:	6030      	str	r0, [r6, #0]
 801b592:	4621      	mov	r1, r4
 801b594:	4628      	mov	r0, r5
 801b596:	f000 fbbd 	bl	801bd14 <_sbrk_r>
 801b59a:	1c43      	adds	r3, r0, #1
 801b59c:	d00a      	beq.n	801b5b4 <sbrk_aligned+0x34>
 801b59e:	1cc4      	adds	r4, r0, #3
 801b5a0:	f024 0403 	bic.w	r4, r4, #3
 801b5a4:	42a0      	cmp	r0, r4
 801b5a6:	d007      	beq.n	801b5b8 <sbrk_aligned+0x38>
 801b5a8:	1a21      	subs	r1, r4, r0
 801b5aa:	4628      	mov	r0, r5
 801b5ac:	f000 fbb2 	bl	801bd14 <_sbrk_r>
 801b5b0:	3001      	adds	r0, #1
 801b5b2:	d101      	bne.n	801b5b8 <sbrk_aligned+0x38>
 801b5b4:	f04f 34ff 	mov.w	r4, #4294967295
 801b5b8:	4620      	mov	r0, r4
 801b5ba:	bd70      	pop	{r4, r5, r6, pc}
 801b5bc:	200111f4 	.word	0x200111f4

0801b5c0 <_malloc_r>:
 801b5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b5c4:	1ccd      	adds	r5, r1, #3
 801b5c6:	f025 0503 	bic.w	r5, r5, #3
 801b5ca:	3508      	adds	r5, #8
 801b5cc:	2d0c      	cmp	r5, #12
 801b5ce:	bf38      	it	cc
 801b5d0:	250c      	movcc	r5, #12
 801b5d2:	2d00      	cmp	r5, #0
 801b5d4:	4607      	mov	r7, r0
 801b5d6:	db01      	blt.n	801b5dc <_malloc_r+0x1c>
 801b5d8:	42a9      	cmp	r1, r5
 801b5da:	d905      	bls.n	801b5e8 <_malloc_r+0x28>
 801b5dc:	230c      	movs	r3, #12
 801b5de:	603b      	str	r3, [r7, #0]
 801b5e0:	2600      	movs	r6, #0
 801b5e2:	4630      	mov	r0, r6
 801b5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b5e8:	4e2e      	ldr	r6, [pc, #184]	; (801b6a4 <_malloc_r+0xe4>)
 801b5ea:	f000 fc45 	bl	801be78 <__malloc_lock>
 801b5ee:	6833      	ldr	r3, [r6, #0]
 801b5f0:	461c      	mov	r4, r3
 801b5f2:	bb34      	cbnz	r4, 801b642 <_malloc_r+0x82>
 801b5f4:	4629      	mov	r1, r5
 801b5f6:	4638      	mov	r0, r7
 801b5f8:	f7ff ffc2 	bl	801b580 <sbrk_aligned>
 801b5fc:	1c43      	adds	r3, r0, #1
 801b5fe:	4604      	mov	r4, r0
 801b600:	d14d      	bne.n	801b69e <_malloc_r+0xde>
 801b602:	6834      	ldr	r4, [r6, #0]
 801b604:	4626      	mov	r6, r4
 801b606:	2e00      	cmp	r6, #0
 801b608:	d140      	bne.n	801b68c <_malloc_r+0xcc>
 801b60a:	6823      	ldr	r3, [r4, #0]
 801b60c:	4631      	mov	r1, r6
 801b60e:	4638      	mov	r0, r7
 801b610:	eb04 0803 	add.w	r8, r4, r3
 801b614:	f000 fb7e 	bl	801bd14 <_sbrk_r>
 801b618:	4580      	cmp	r8, r0
 801b61a:	d13a      	bne.n	801b692 <_malloc_r+0xd2>
 801b61c:	6821      	ldr	r1, [r4, #0]
 801b61e:	3503      	adds	r5, #3
 801b620:	1a6d      	subs	r5, r5, r1
 801b622:	f025 0503 	bic.w	r5, r5, #3
 801b626:	3508      	adds	r5, #8
 801b628:	2d0c      	cmp	r5, #12
 801b62a:	bf38      	it	cc
 801b62c:	250c      	movcc	r5, #12
 801b62e:	4629      	mov	r1, r5
 801b630:	4638      	mov	r0, r7
 801b632:	f7ff ffa5 	bl	801b580 <sbrk_aligned>
 801b636:	3001      	adds	r0, #1
 801b638:	d02b      	beq.n	801b692 <_malloc_r+0xd2>
 801b63a:	6823      	ldr	r3, [r4, #0]
 801b63c:	442b      	add	r3, r5
 801b63e:	6023      	str	r3, [r4, #0]
 801b640:	e00e      	b.n	801b660 <_malloc_r+0xa0>
 801b642:	6822      	ldr	r2, [r4, #0]
 801b644:	1b52      	subs	r2, r2, r5
 801b646:	d41e      	bmi.n	801b686 <_malloc_r+0xc6>
 801b648:	2a0b      	cmp	r2, #11
 801b64a:	d916      	bls.n	801b67a <_malloc_r+0xba>
 801b64c:	1961      	adds	r1, r4, r5
 801b64e:	42a3      	cmp	r3, r4
 801b650:	6025      	str	r5, [r4, #0]
 801b652:	bf18      	it	ne
 801b654:	6059      	strne	r1, [r3, #4]
 801b656:	6863      	ldr	r3, [r4, #4]
 801b658:	bf08      	it	eq
 801b65a:	6031      	streq	r1, [r6, #0]
 801b65c:	5162      	str	r2, [r4, r5]
 801b65e:	604b      	str	r3, [r1, #4]
 801b660:	4638      	mov	r0, r7
 801b662:	f104 060b 	add.w	r6, r4, #11
 801b666:	f000 fc0d 	bl	801be84 <__malloc_unlock>
 801b66a:	f026 0607 	bic.w	r6, r6, #7
 801b66e:	1d23      	adds	r3, r4, #4
 801b670:	1af2      	subs	r2, r6, r3
 801b672:	d0b6      	beq.n	801b5e2 <_malloc_r+0x22>
 801b674:	1b9b      	subs	r3, r3, r6
 801b676:	50a3      	str	r3, [r4, r2]
 801b678:	e7b3      	b.n	801b5e2 <_malloc_r+0x22>
 801b67a:	6862      	ldr	r2, [r4, #4]
 801b67c:	42a3      	cmp	r3, r4
 801b67e:	bf0c      	ite	eq
 801b680:	6032      	streq	r2, [r6, #0]
 801b682:	605a      	strne	r2, [r3, #4]
 801b684:	e7ec      	b.n	801b660 <_malloc_r+0xa0>
 801b686:	4623      	mov	r3, r4
 801b688:	6864      	ldr	r4, [r4, #4]
 801b68a:	e7b2      	b.n	801b5f2 <_malloc_r+0x32>
 801b68c:	4634      	mov	r4, r6
 801b68e:	6876      	ldr	r6, [r6, #4]
 801b690:	e7b9      	b.n	801b606 <_malloc_r+0x46>
 801b692:	230c      	movs	r3, #12
 801b694:	603b      	str	r3, [r7, #0]
 801b696:	4638      	mov	r0, r7
 801b698:	f000 fbf4 	bl	801be84 <__malloc_unlock>
 801b69c:	e7a1      	b.n	801b5e2 <_malloc_r+0x22>
 801b69e:	6025      	str	r5, [r4, #0]
 801b6a0:	e7de      	b.n	801b660 <_malloc_r+0xa0>
 801b6a2:	bf00      	nop
 801b6a4:	200111f0 	.word	0x200111f0

0801b6a8 <__sfputc_r>:
 801b6a8:	6893      	ldr	r3, [r2, #8]
 801b6aa:	3b01      	subs	r3, #1
 801b6ac:	2b00      	cmp	r3, #0
 801b6ae:	b410      	push	{r4}
 801b6b0:	6093      	str	r3, [r2, #8]
 801b6b2:	da08      	bge.n	801b6c6 <__sfputc_r+0x1e>
 801b6b4:	6994      	ldr	r4, [r2, #24]
 801b6b6:	42a3      	cmp	r3, r4
 801b6b8:	db01      	blt.n	801b6be <__sfputc_r+0x16>
 801b6ba:	290a      	cmp	r1, #10
 801b6bc:	d103      	bne.n	801b6c6 <__sfputc_r+0x1e>
 801b6be:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b6c2:	f7ff bbf9 	b.w	801aeb8 <__swbuf_r>
 801b6c6:	6813      	ldr	r3, [r2, #0]
 801b6c8:	1c58      	adds	r0, r3, #1
 801b6ca:	6010      	str	r0, [r2, #0]
 801b6cc:	7019      	strb	r1, [r3, #0]
 801b6ce:	4608      	mov	r0, r1
 801b6d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b6d4:	4770      	bx	lr

0801b6d6 <__sfputs_r>:
 801b6d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b6d8:	4606      	mov	r6, r0
 801b6da:	460f      	mov	r7, r1
 801b6dc:	4614      	mov	r4, r2
 801b6de:	18d5      	adds	r5, r2, r3
 801b6e0:	42ac      	cmp	r4, r5
 801b6e2:	d101      	bne.n	801b6e8 <__sfputs_r+0x12>
 801b6e4:	2000      	movs	r0, #0
 801b6e6:	e007      	b.n	801b6f8 <__sfputs_r+0x22>
 801b6e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b6ec:	463a      	mov	r2, r7
 801b6ee:	4630      	mov	r0, r6
 801b6f0:	f7ff ffda 	bl	801b6a8 <__sfputc_r>
 801b6f4:	1c43      	adds	r3, r0, #1
 801b6f6:	d1f3      	bne.n	801b6e0 <__sfputs_r+0xa>
 801b6f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b6fc <_vfiprintf_r>:
 801b6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b700:	460d      	mov	r5, r1
 801b702:	b09d      	sub	sp, #116	; 0x74
 801b704:	4614      	mov	r4, r2
 801b706:	4698      	mov	r8, r3
 801b708:	4606      	mov	r6, r0
 801b70a:	b118      	cbz	r0, 801b714 <_vfiprintf_r+0x18>
 801b70c:	6983      	ldr	r3, [r0, #24]
 801b70e:	b90b      	cbnz	r3, 801b714 <_vfiprintf_r+0x18>
 801b710:	f7ff fdca 	bl	801b2a8 <__sinit>
 801b714:	4b89      	ldr	r3, [pc, #548]	; (801b93c <_vfiprintf_r+0x240>)
 801b716:	429d      	cmp	r5, r3
 801b718:	d11b      	bne.n	801b752 <_vfiprintf_r+0x56>
 801b71a:	6875      	ldr	r5, [r6, #4]
 801b71c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b71e:	07d9      	lsls	r1, r3, #31
 801b720:	d405      	bmi.n	801b72e <_vfiprintf_r+0x32>
 801b722:	89ab      	ldrh	r3, [r5, #12]
 801b724:	059a      	lsls	r2, r3, #22
 801b726:	d402      	bmi.n	801b72e <_vfiprintf_r+0x32>
 801b728:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b72a:	f7ff fe6d 	bl	801b408 <__retarget_lock_acquire_recursive>
 801b72e:	89ab      	ldrh	r3, [r5, #12]
 801b730:	071b      	lsls	r3, r3, #28
 801b732:	d501      	bpl.n	801b738 <_vfiprintf_r+0x3c>
 801b734:	692b      	ldr	r3, [r5, #16]
 801b736:	b9eb      	cbnz	r3, 801b774 <_vfiprintf_r+0x78>
 801b738:	4629      	mov	r1, r5
 801b73a:	4630      	mov	r0, r6
 801b73c:	f7ff fc0e 	bl	801af5c <__swsetup_r>
 801b740:	b1c0      	cbz	r0, 801b774 <_vfiprintf_r+0x78>
 801b742:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b744:	07dc      	lsls	r4, r3, #31
 801b746:	d50e      	bpl.n	801b766 <_vfiprintf_r+0x6a>
 801b748:	f04f 30ff 	mov.w	r0, #4294967295
 801b74c:	b01d      	add	sp, #116	; 0x74
 801b74e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b752:	4b7b      	ldr	r3, [pc, #492]	; (801b940 <_vfiprintf_r+0x244>)
 801b754:	429d      	cmp	r5, r3
 801b756:	d101      	bne.n	801b75c <_vfiprintf_r+0x60>
 801b758:	68b5      	ldr	r5, [r6, #8]
 801b75a:	e7df      	b.n	801b71c <_vfiprintf_r+0x20>
 801b75c:	4b79      	ldr	r3, [pc, #484]	; (801b944 <_vfiprintf_r+0x248>)
 801b75e:	429d      	cmp	r5, r3
 801b760:	bf08      	it	eq
 801b762:	68f5      	ldreq	r5, [r6, #12]
 801b764:	e7da      	b.n	801b71c <_vfiprintf_r+0x20>
 801b766:	89ab      	ldrh	r3, [r5, #12]
 801b768:	0598      	lsls	r0, r3, #22
 801b76a:	d4ed      	bmi.n	801b748 <_vfiprintf_r+0x4c>
 801b76c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b76e:	f7ff fe4c 	bl	801b40a <__retarget_lock_release_recursive>
 801b772:	e7e9      	b.n	801b748 <_vfiprintf_r+0x4c>
 801b774:	2300      	movs	r3, #0
 801b776:	9309      	str	r3, [sp, #36]	; 0x24
 801b778:	2320      	movs	r3, #32
 801b77a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b77e:	f8cd 800c 	str.w	r8, [sp, #12]
 801b782:	2330      	movs	r3, #48	; 0x30
 801b784:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b948 <_vfiprintf_r+0x24c>
 801b788:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b78c:	f04f 0901 	mov.w	r9, #1
 801b790:	4623      	mov	r3, r4
 801b792:	469a      	mov	sl, r3
 801b794:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b798:	b10a      	cbz	r2, 801b79e <_vfiprintf_r+0xa2>
 801b79a:	2a25      	cmp	r2, #37	; 0x25
 801b79c:	d1f9      	bne.n	801b792 <_vfiprintf_r+0x96>
 801b79e:	ebba 0b04 	subs.w	fp, sl, r4
 801b7a2:	d00b      	beq.n	801b7bc <_vfiprintf_r+0xc0>
 801b7a4:	465b      	mov	r3, fp
 801b7a6:	4622      	mov	r2, r4
 801b7a8:	4629      	mov	r1, r5
 801b7aa:	4630      	mov	r0, r6
 801b7ac:	f7ff ff93 	bl	801b6d6 <__sfputs_r>
 801b7b0:	3001      	adds	r0, #1
 801b7b2:	f000 80aa 	beq.w	801b90a <_vfiprintf_r+0x20e>
 801b7b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b7b8:	445a      	add	r2, fp
 801b7ba:	9209      	str	r2, [sp, #36]	; 0x24
 801b7bc:	f89a 3000 	ldrb.w	r3, [sl]
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	f000 80a2 	beq.w	801b90a <_vfiprintf_r+0x20e>
 801b7c6:	2300      	movs	r3, #0
 801b7c8:	f04f 32ff 	mov.w	r2, #4294967295
 801b7cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b7d0:	f10a 0a01 	add.w	sl, sl, #1
 801b7d4:	9304      	str	r3, [sp, #16]
 801b7d6:	9307      	str	r3, [sp, #28]
 801b7d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b7dc:	931a      	str	r3, [sp, #104]	; 0x68
 801b7de:	4654      	mov	r4, sl
 801b7e0:	2205      	movs	r2, #5
 801b7e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b7e6:	4858      	ldr	r0, [pc, #352]	; (801b948 <_vfiprintf_r+0x24c>)
 801b7e8:	f7e4 fd2a 	bl	8000240 <memchr>
 801b7ec:	9a04      	ldr	r2, [sp, #16]
 801b7ee:	b9d8      	cbnz	r0, 801b828 <_vfiprintf_r+0x12c>
 801b7f0:	06d1      	lsls	r1, r2, #27
 801b7f2:	bf44      	itt	mi
 801b7f4:	2320      	movmi	r3, #32
 801b7f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b7fa:	0713      	lsls	r3, r2, #28
 801b7fc:	bf44      	itt	mi
 801b7fe:	232b      	movmi	r3, #43	; 0x2b
 801b800:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b804:	f89a 3000 	ldrb.w	r3, [sl]
 801b808:	2b2a      	cmp	r3, #42	; 0x2a
 801b80a:	d015      	beq.n	801b838 <_vfiprintf_r+0x13c>
 801b80c:	9a07      	ldr	r2, [sp, #28]
 801b80e:	4654      	mov	r4, sl
 801b810:	2000      	movs	r0, #0
 801b812:	f04f 0c0a 	mov.w	ip, #10
 801b816:	4621      	mov	r1, r4
 801b818:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b81c:	3b30      	subs	r3, #48	; 0x30
 801b81e:	2b09      	cmp	r3, #9
 801b820:	d94e      	bls.n	801b8c0 <_vfiprintf_r+0x1c4>
 801b822:	b1b0      	cbz	r0, 801b852 <_vfiprintf_r+0x156>
 801b824:	9207      	str	r2, [sp, #28]
 801b826:	e014      	b.n	801b852 <_vfiprintf_r+0x156>
 801b828:	eba0 0308 	sub.w	r3, r0, r8
 801b82c:	fa09 f303 	lsl.w	r3, r9, r3
 801b830:	4313      	orrs	r3, r2
 801b832:	9304      	str	r3, [sp, #16]
 801b834:	46a2      	mov	sl, r4
 801b836:	e7d2      	b.n	801b7de <_vfiprintf_r+0xe2>
 801b838:	9b03      	ldr	r3, [sp, #12]
 801b83a:	1d19      	adds	r1, r3, #4
 801b83c:	681b      	ldr	r3, [r3, #0]
 801b83e:	9103      	str	r1, [sp, #12]
 801b840:	2b00      	cmp	r3, #0
 801b842:	bfbb      	ittet	lt
 801b844:	425b      	neglt	r3, r3
 801b846:	f042 0202 	orrlt.w	r2, r2, #2
 801b84a:	9307      	strge	r3, [sp, #28]
 801b84c:	9307      	strlt	r3, [sp, #28]
 801b84e:	bfb8      	it	lt
 801b850:	9204      	strlt	r2, [sp, #16]
 801b852:	7823      	ldrb	r3, [r4, #0]
 801b854:	2b2e      	cmp	r3, #46	; 0x2e
 801b856:	d10c      	bne.n	801b872 <_vfiprintf_r+0x176>
 801b858:	7863      	ldrb	r3, [r4, #1]
 801b85a:	2b2a      	cmp	r3, #42	; 0x2a
 801b85c:	d135      	bne.n	801b8ca <_vfiprintf_r+0x1ce>
 801b85e:	9b03      	ldr	r3, [sp, #12]
 801b860:	1d1a      	adds	r2, r3, #4
 801b862:	681b      	ldr	r3, [r3, #0]
 801b864:	9203      	str	r2, [sp, #12]
 801b866:	2b00      	cmp	r3, #0
 801b868:	bfb8      	it	lt
 801b86a:	f04f 33ff 	movlt.w	r3, #4294967295
 801b86e:	3402      	adds	r4, #2
 801b870:	9305      	str	r3, [sp, #20]
 801b872:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b958 <_vfiprintf_r+0x25c>
 801b876:	7821      	ldrb	r1, [r4, #0]
 801b878:	2203      	movs	r2, #3
 801b87a:	4650      	mov	r0, sl
 801b87c:	f7e4 fce0 	bl	8000240 <memchr>
 801b880:	b140      	cbz	r0, 801b894 <_vfiprintf_r+0x198>
 801b882:	2340      	movs	r3, #64	; 0x40
 801b884:	eba0 000a 	sub.w	r0, r0, sl
 801b888:	fa03 f000 	lsl.w	r0, r3, r0
 801b88c:	9b04      	ldr	r3, [sp, #16]
 801b88e:	4303      	orrs	r3, r0
 801b890:	3401      	adds	r4, #1
 801b892:	9304      	str	r3, [sp, #16]
 801b894:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b898:	482c      	ldr	r0, [pc, #176]	; (801b94c <_vfiprintf_r+0x250>)
 801b89a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b89e:	2206      	movs	r2, #6
 801b8a0:	f7e4 fcce 	bl	8000240 <memchr>
 801b8a4:	2800      	cmp	r0, #0
 801b8a6:	d03f      	beq.n	801b928 <_vfiprintf_r+0x22c>
 801b8a8:	4b29      	ldr	r3, [pc, #164]	; (801b950 <_vfiprintf_r+0x254>)
 801b8aa:	bb1b      	cbnz	r3, 801b8f4 <_vfiprintf_r+0x1f8>
 801b8ac:	9b03      	ldr	r3, [sp, #12]
 801b8ae:	3307      	adds	r3, #7
 801b8b0:	f023 0307 	bic.w	r3, r3, #7
 801b8b4:	3308      	adds	r3, #8
 801b8b6:	9303      	str	r3, [sp, #12]
 801b8b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8ba:	443b      	add	r3, r7
 801b8bc:	9309      	str	r3, [sp, #36]	; 0x24
 801b8be:	e767      	b.n	801b790 <_vfiprintf_r+0x94>
 801b8c0:	fb0c 3202 	mla	r2, ip, r2, r3
 801b8c4:	460c      	mov	r4, r1
 801b8c6:	2001      	movs	r0, #1
 801b8c8:	e7a5      	b.n	801b816 <_vfiprintf_r+0x11a>
 801b8ca:	2300      	movs	r3, #0
 801b8cc:	3401      	adds	r4, #1
 801b8ce:	9305      	str	r3, [sp, #20]
 801b8d0:	4619      	mov	r1, r3
 801b8d2:	f04f 0c0a 	mov.w	ip, #10
 801b8d6:	4620      	mov	r0, r4
 801b8d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b8dc:	3a30      	subs	r2, #48	; 0x30
 801b8de:	2a09      	cmp	r2, #9
 801b8e0:	d903      	bls.n	801b8ea <_vfiprintf_r+0x1ee>
 801b8e2:	2b00      	cmp	r3, #0
 801b8e4:	d0c5      	beq.n	801b872 <_vfiprintf_r+0x176>
 801b8e6:	9105      	str	r1, [sp, #20]
 801b8e8:	e7c3      	b.n	801b872 <_vfiprintf_r+0x176>
 801b8ea:	fb0c 2101 	mla	r1, ip, r1, r2
 801b8ee:	4604      	mov	r4, r0
 801b8f0:	2301      	movs	r3, #1
 801b8f2:	e7f0      	b.n	801b8d6 <_vfiprintf_r+0x1da>
 801b8f4:	ab03      	add	r3, sp, #12
 801b8f6:	9300      	str	r3, [sp, #0]
 801b8f8:	462a      	mov	r2, r5
 801b8fa:	4b16      	ldr	r3, [pc, #88]	; (801b954 <_vfiprintf_r+0x258>)
 801b8fc:	a904      	add	r1, sp, #16
 801b8fe:	4630      	mov	r0, r6
 801b900:	f3af 8000 	nop.w
 801b904:	4607      	mov	r7, r0
 801b906:	1c78      	adds	r0, r7, #1
 801b908:	d1d6      	bne.n	801b8b8 <_vfiprintf_r+0x1bc>
 801b90a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b90c:	07d9      	lsls	r1, r3, #31
 801b90e:	d405      	bmi.n	801b91c <_vfiprintf_r+0x220>
 801b910:	89ab      	ldrh	r3, [r5, #12]
 801b912:	059a      	lsls	r2, r3, #22
 801b914:	d402      	bmi.n	801b91c <_vfiprintf_r+0x220>
 801b916:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b918:	f7ff fd77 	bl	801b40a <__retarget_lock_release_recursive>
 801b91c:	89ab      	ldrh	r3, [r5, #12]
 801b91e:	065b      	lsls	r3, r3, #25
 801b920:	f53f af12 	bmi.w	801b748 <_vfiprintf_r+0x4c>
 801b924:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b926:	e711      	b.n	801b74c <_vfiprintf_r+0x50>
 801b928:	ab03      	add	r3, sp, #12
 801b92a:	9300      	str	r3, [sp, #0]
 801b92c:	462a      	mov	r2, r5
 801b92e:	4b09      	ldr	r3, [pc, #36]	; (801b954 <_vfiprintf_r+0x258>)
 801b930:	a904      	add	r1, sp, #16
 801b932:	4630      	mov	r0, r6
 801b934:	f000 f880 	bl	801ba38 <_printf_i>
 801b938:	e7e4      	b.n	801b904 <_vfiprintf_r+0x208>
 801b93a:	bf00      	nop
 801b93c:	0801fbfc 	.word	0x0801fbfc
 801b940:	0801fc1c 	.word	0x0801fc1c
 801b944:	0801fbdc 	.word	0x0801fbdc
 801b948:	0801fc3c 	.word	0x0801fc3c
 801b94c:	0801fc46 	.word	0x0801fc46
 801b950:	00000000 	.word	0x00000000
 801b954:	0801b6d7 	.word	0x0801b6d7
 801b958:	0801fc42 	.word	0x0801fc42

0801b95c <_printf_common>:
 801b95c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b960:	4616      	mov	r6, r2
 801b962:	4699      	mov	r9, r3
 801b964:	688a      	ldr	r2, [r1, #8]
 801b966:	690b      	ldr	r3, [r1, #16]
 801b968:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b96c:	4293      	cmp	r3, r2
 801b96e:	bfb8      	it	lt
 801b970:	4613      	movlt	r3, r2
 801b972:	6033      	str	r3, [r6, #0]
 801b974:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b978:	4607      	mov	r7, r0
 801b97a:	460c      	mov	r4, r1
 801b97c:	b10a      	cbz	r2, 801b982 <_printf_common+0x26>
 801b97e:	3301      	adds	r3, #1
 801b980:	6033      	str	r3, [r6, #0]
 801b982:	6823      	ldr	r3, [r4, #0]
 801b984:	0699      	lsls	r1, r3, #26
 801b986:	bf42      	ittt	mi
 801b988:	6833      	ldrmi	r3, [r6, #0]
 801b98a:	3302      	addmi	r3, #2
 801b98c:	6033      	strmi	r3, [r6, #0]
 801b98e:	6825      	ldr	r5, [r4, #0]
 801b990:	f015 0506 	ands.w	r5, r5, #6
 801b994:	d106      	bne.n	801b9a4 <_printf_common+0x48>
 801b996:	f104 0a19 	add.w	sl, r4, #25
 801b99a:	68e3      	ldr	r3, [r4, #12]
 801b99c:	6832      	ldr	r2, [r6, #0]
 801b99e:	1a9b      	subs	r3, r3, r2
 801b9a0:	42ab      	cmp	r3, r5
 801b9a2:	dc26      	bgt.n	801b9f2 <_printf_common+0x96>
 801b9a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b9a8:	1e13      	subs	r3, r2, #0
 801b9aa:	6822      	ldr	r2, [r4, #0]
 801b9ac:	bf18      	it	ne
 801b9ae:	2301      	movne	r3, #1
 801b9b0:	0692      	lsls	r2, r2, #26
 801b9b2:	d42b      	bmi.n	801ba0c <_printf_common+0xb0>
 801b9b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b9b8:	4649      	mov	r1, r9
 801b9ba:	4638      	mov	r0, r7
 801b9bc:	47c0      	blx	r8
 801b9be:	3001      	adds	r0, #1
 801b9c0:	d01e      	beq.n	801ba00 <_printf_common+0xa4>
 801b9c2:	6823      	ldr	r3, [r4, #0]
 801b9c4:	68e5      	ldr	r5, [r4, #12]
 801b9c6:	6832      	ldr	r2, [r6, #0]
 801b9c8:	f003 0306 	and.w	r3, r3, #6
 801b9cc:	2b04      	cmp	r3, #4
 801b9ce:	bf08      	it	eq
 801b9d0:	1aad      	subeq	r5, r5, r2
 801b9d2:	68a3      	ldr	r3, [r4, #8]
 801b9d4:	6922      	ldr	r2, [r4, #16]
 801b9d6:	bf0c      	ite	eq
 801b9d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b9dc:	2500      	movne	r5, #0
 801b9de:	4293      	cmp	r3, r2
 801b9e0:	bfc4      	itt	gt
 801b9e2:	1a9b      	subgt	r3, r3, r2
 801b9e4:	18ed      	addgt	r5, r5, r3
 801b9e6:	2600      	movs	r6, #0
 801b9e8:	341a      	adds	r4, #26
 801b9ea:	42b5      	cmp	r5, r6
 801b9ec:	d11a      	bne.n	801ba24 <_printf_common+0xc8>
 801b9ee:	2000      	movs	r0, #0
 801b9f0:	e008      	b.n	801ba04 <_printf_common+0xa8>
 801b9f2:	2301      	movs	r3, #1
 801b9f4:	4652      	mov	r2, sl
 801b9f6:	4649      	mov	r1, r9
 801b9f8:	4638      	mov	r0, r7
 801b9fa:	47c0      	blx	r8
 801b9fc:	3001      	adds	r0, #1
 801b9fe:	d103      	bne.n	801ba08 <_printf_common+0xac>
 801ba00:	f04f 30ff 	mov.w	r0, #4294967295
 801ba04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba08:	3501      	adds	r5, #1
 801ba0a:	e7c6      	b.n	801b99a <_printf_common+0x3e>
 801ba0c:	18e1      	adds	r1, r4, r3
 801ba0e:	1c5a      	adds	r2, r3, #1
 801ba10:	2030      	movs	r0, #48	; 0x30
 801ba12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ba16:	4422      	add	r2, r4
 801ba18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ba1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ba20:	3302      	adds	r3, #2
 801ba22:	e7c7      	b.n	801b9b4 <_printf_common+0x58>
 801ba24:	2301      	movs	r3, #1
 801ba26:	4622      	mov	r2, r4
 801ba28:	4649      	mov	r1, r9
 801ba2a:	4638      	mov	r0, r7
 801ba2c:	47c0      	blx	r8
 801ba2e:	3001      	adds	r0, #1
 801ba30:	d0e6      	beq.n	801ba00 <_printf_common+0xa4>
 801ba32:	3601      	adds	r6, #1
 801ba34:	e7d9      	b.n	801b9ea <_printf_common+0x8e>
	...

0801ba38 <_printf_i>:
 801ba38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ba3c:	7e0f      	ldrb	r7, [r1, #24]
 801ba3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ba40:	2f78      	cmp	r7, #120	; 0x78
 801ba42:	4691      	mov	r9, r2
 801ba44:	4680      	mov	r8, r0
 801ba46:	460c      	mov	r4, r1
 801ba48:	469a      	mov	sl, r3
 801ba4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ba4e:	d807      	bhi.n	801ba60 <_printf_i+0x28>
 801ba50:	2f62      	cmp	r7, #98	; 0x62
 801ba52:	d80a      	bhi.n	801ba6a <_printf_i+0x32>
 801ba54:	2f00      	cmp	r7, #0
 801ba56:	f000 80d8 	beq.w	801bc0a <_printf_i+0x1d2>
 801ba5a:	2f58      	cmp	r7, #88	; 0x58
 801ba5c:	f000 80a3 	beq.w	801bba6 <_printf_i+0x16e>
 801ba60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ba64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ba68:	e03a      	b.n	801bae0 <_printf_i+0xa8>
 801ba6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ba6e:	2b15      	cmp	r3, #21
 801ba70:	d8f6      	bhi.n	801ba60 <_printf_i+0x28>
 801ba72:	a101      	add	r1, pc, #4	; (adr r1, 801ba78 <_printf_i+0x40>)
 801ba74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ba78:	0801bad1 	.word	0x0801bad1
 801ba7c:	0801bae5 	.word	0x0801bae5
 801ba80:	0801ba61 	.word	0x0801ba61
 801ba84:	0801ba61 	.word	0x0801ba61
 801ba88:	0801ba61 	.word	0x0801ba61
 801ba8c:	0801ba61 	.word	0x0801ba61
 801ba90:	0801bae5 	.word	0x0801bae5
 801ba94:	0801ba61 	.word	0x0801ba61
 801ba98:	0801ba61 	.word	0x0801ba61
 801ba9c:	0801ba61 	.word	0x0801ba61
 801baa0:	0801ba61 	.word	0x0801ba61
 801baa4:	0801bbf1 	.word	0x0801bbf1
 801baa8:	0801bb15 	.word	0x0801bb15
 801baac:	0801bbd3 	.word	0x0801bbd3
 801bab0:	0801ba61 	.word	0x0801ba61
 801bab4:	0801ba61 	.word	0x0801ba61
 801bab8:	0801bc13 	.word	0x0801bc13
 801babc:	0801ba61 	.word	0x0801ba61
 801bac0:	0801bb15 	.word	0x0801bb15
 801bac4:	0801ba61 	.word	0x0801ba61
 801bac8:	0801ba61 	.word	0x0801ba61
 801bacc:	0801bbdb 	.word	0x0801bbdb
 801bad0:	682b      	ldr	r3, [r5, #0]
 801bad2:	1d1a      	adds	r2, r3, #4
 801bad4:	681b      	ldr	r3, [r3, #0]
 801bad6:	602a      	str	r2, [r5, #0]
 801bad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801badc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801bae0:	2301      	movs	r3, #1
 801bae2:	e0a3      	b.n	801bc2c <_printf_i+0x1f4>
 801bae4:	6820      	ldr	r0, [r4, #0]
 801bae6:	6829      	ldr	r1, [r5, #0]
 801bae8:	0606      	lsls	r6, r0, #24
 801baea:	f101 0304 	add.w	r3, r1, #4
 801baee:	d50a      	bpl.n	801bb06 <_printf_i+0xce>
 801baf0:	680e      	ldr	r6, [r1, #0]
 801baf2:	602b      	str	r3, [r5, #0]
 801baf4:	2e00      	cmp	r6, #0
 801baf6:	da03      	bge.n	801bb00 <_printf_i+0xc8>
 801baf8:	232d      	movs	r3, #45	; 0x2d
 801bafa:	4276      	negs	r6, r6
 801bafc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bb00:	485e      	ldr	r0, [pc, #376]	; (801bc7c <_printf_i+0x244>)
 801bb02:	230a      	movs	r3, #10
 801bb04:	e019      	b.n	801bb3a <_printf_i+0x102>
 801bb06:	680e      	ldr	r6, [r1, #0]
 801bb08:	602b      	str	r3, [r5, #0]
 801bb0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801bb0e:	bf18      	it	ne
 801bb10:	b236      	sxthne	r6, r6
 801bb12:	e7ef      	b.n	801baf4 <_printf_i+0xbc>
 801bb14:	682b      	ldr	r3, [r5, #0]
 801bb16:	6820      	ldr	r0, [r4, #0]
 801bb18:	1d19      	adds	r1, r3, #4
 801bb1a:	6029      	str	r1, [r5, #0]
 801bb1c:	0601      	lsls	r1, r0, #24
 801bb1e:	d501      	bpl.n	801bb24 <_printf_i+0xec>
 801bb20:	681e      	ldr	r6, [r3, #0]
 801bb22:	e002      	b.n	801bb2a <_printf_i+0xf2>
 801bb24:	0646      	lsls	r6, r0, #25
 801bb26:	d5fb      	bpl.n	801bb20 <_printf_i+0xe8>
 801bb28:	881e      	ldrh	r6, [r3, #0]
 801bb2a:	4854      	ldr	r0, [pc, #336]	; (801bc7c <_printf_i+0x244>)
 801bb2c:	2f6f      	cmp	r7, #111	; 0x6f
 801bb2e:	bf0c      	ite	eq
 801bb30:	2308      	moveq	r3, #8
 801bb32:	230a      	movne	r3, #10
 801bb34:	2100      	movs	r1, #0
 801bb36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801bb3a:	6865      	ldr	r5, [r4, #4]
 801bb3c:	60a5      	str	r5, [r4, #8]
 801bb3e:	2d00      	cmp	r5, #0
 801bb40:	bfa2      	ittt	ge
 801bb42:	6821      	ldrge	r1, [r4, #0]
 801bb44:	f021 0104 	bicge.w	r1, r1, #4
 801bb48:	6021      	strge	r1, [r4, #0]
 801bb4a:	b90e      	cbnz	r6, 801bb50 <_printf_i+0x118>
 801bb4c:	2d00      	cmp	r5, #0
 801bb4e:	d04d      	beq.n	801bbec <_printf_i+0x1b4>
 801bb50:	4615      	mov	r5, r2
 801bb52:	fbb6 f1f3 	udiv	r1, r6, r3
 801bb56:	fb03 6711 	mls	r7, r3, r1, r6
 801bb5a:	5dc7      	ldrb	r7, [r0, r7]
 801bb5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801bb60:	4637      	mov	r7, r6
 801bb62:	42bb      	cmp	r3, r7
 801bb64:	460e      	mov	r6, r1
 801bb66:	d9f4      	bls.n	801bb52 <_printf_i+0x11a>
 801bb68:	2b08      	cmp	r3, #8
 801bb6a:	d10b      	bne.n	801bb84 <_printf_i+0x14c>
 801bb6c:	6823      	ldr	r3, [r4, #0]
 801bb6e:	07de      	lsls	r6, r3, #31
 801bb70:	d508      	bpl.n	801bb84 <_printf_i+0x14c>
 801bb72:	6923      	ldr	r3, [r4, #16]
 801bb74:	6861      	ldr	r1, [r4, #4]
 801bb76:	4299      	cmp	r1, r3
 801bb78:	bfde      	ittt	le
 801bb7a:	2330      	movle	r3, #48	; 0x30
 801bb7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801bb80:	f105 35ff 	addle.w	r5, r5, #4294967295
 801bb84:	1b52      	subs	r2, r2, r5
 801bb86:	6122      	str	r2, [r4, #16]
 801bb88:	f8cd a000 	str.w	sl, [sp]
 801bb8c:	464b      	mov	r3, r9
 801bb8e:	aa03      	add	r2, sp, #12
 801bb90:	4621      	mov	r1, r4
 801bb92:	4640      	mov	r0, r8
 801bb94:	f7ff fee2 	bl	801b95c <_printf_common>
 801bb98:	3001      	adds	r0, #1
 801bb9a:	d14c      	bne.n	801bc36 <_printf_i+0x1fe>
 801bb9c:	f04f 30ff 	mov.w	r0, #4294967295
 801bba0:	b004      	add	sp, #16
 801bba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bba6:	4835      	ldr	r0, [pc, #212]	; (801bc7c <_printf_i+0x244>)
 801bba8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801bbac:	6829      	ldr	r1, [r5, #0]
 801bbae:	6823      	ldr	r3, [r4, #0]
 801bbb0:	f851 6b04 	ldr.w	r6, [r1], #4
 801bbb4:	6029      	str	r1, [r5, #0]
 801bbb6:	061d      	lsls	r5, r3, #24
 801bbb8:	d514      	bpl.n	801bbe4 <_printf_i+0x1ac>
 801bbba:	07df      	lsls	r7, r3, #31
 801bbbc:	bf44      	itt	mi
 801bbbe:	f043 0320 	orrmi.w	r3, r3, #32
 801bbc2:	6023      	strmi	r3, [r4, #0]
 801bbc4:	b91e      	cbnz	r6, 801bbce <_printf_i+0x196>
 801bbc6:	6823      	ldr	r3, [r4, #0]
 801bbc8:	f023 0320 	bic.w	r3, r3, #32
 801bbcc:	6023      	str	r3, [r4, #0]
 801bbce:	2310      	movs	r3, #16
 801bbd0:	e7b0      	b.n	801bb34 <_printf_i+0xfc>
 801bbd2:	6823      	ldr	r3, [r4, #0]
 801bbd4:	f043 0320 	orr.w	r3, r3, #32
 801bbd8:	6023      	str	r3, [r4, #0]
 801bbda:	2378      	movs	r3, #120	; 0x78
 801bbdc:	4828      	ldr	r0, [pc, #160]	; (801bc80 <_printf_i+0x248>)
 801bbde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801bbe2:	e7e3      	b.n	801bbac <_printf_i+0x174>
 801bbe4:	0659      	lsls	r1, r3, #25
 801bbe6:	bf48      	it	mi
 801bbe8:	b2b6      	uxthmi	r6, r6
 801bbea:	e7e6      	b.n	801bbba <_printf_i+0x182>
 801bbec:	4615      	mov	r5, r2
 801bbee:	e7bb      	b.n	801bb68 <_printf_i+0x130>
 801bbf0:	682b      	ldr	r3, [r5, #0]
 801bbf2:	6826      	ldr	r6, [r4, #0]
 801bbf4:	6961      	ldr	r1, [r4, #20]
 801bbf6:	1d18      	adds	r0, r3, #4
 801bbf8:	6028      	str	r0, [r5, #0]
 801bbfa:	0635      	lsls	r5, r6, #24
 801bbfc:	681b      	ldr	r3, [r3, #0]
 801bbfe:	d501      	bpl.n	801bc04 <_printf_i+0x1cc>
 801bc00:	6019      	str	r1, [r3, #0]
 801bc02:	e002      	b.n	801bc0a <_printf_i+0x1d2>
 801bc04:	0670      	lsls	r0, r6, #25
 801bc06:	d5fb      	bpl.n	801bc00 <_printf_i+0x1c8>
 801bc08:	8019      	strh	r1, [r3, #0]
 801bc0a:	2300      	movs	r3, #0
 801bc0c:	6123      	str	r3, [r4, #16]
 801bc0e:	4615      	mov	r5, r2
 801bc10:	e7ba      	b.n	801bb88 <_printf_i+0x150>
 801bc12:	682b      	ldr	r3, [r5, #0]
 801bc14:	1d1a      	adds	r2, r3, #4
 801bc16:	602a      	str	r2, [r5, #0]
 801bc18:	681d      	ldr	r5, [r3, #0]
 801bc1a:	6862      	ldr	r2, [r4, #4]
 801bc1c:	2100      	movs	r1, #0
 801bc1e:	4628      	mov	r0, r5
 801bc20:	f7e4 fb0e 	bl	8000240 <memchr>
 801bc24:	b108      	cbz	r0, 801bc2a <_printf_i+0x1f2>
 801bc26:	1b40      	subs	r0, r0, r5
 801bc28:	6060      	str	r0, [r4, #4]
 801bc2a:	6863      	ldr	r3, [r4, #4]
 801bc2c:	6123      	str	r3, [r4, #16]
 801bc2e:	2300      	movs	r3, #0
 801bc30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bc34:	e7a8      	b.n	801bb88 <_printf_i+0x150>
 801bc36:	6923      	ldr	r3, [r4, #16]
 801bc38:	462a      	mov	r2, r5
 801bc3a:	4649      	mov	r1, r9
 801bc3c:	4640      	mov	r0, r8
 801bc3e:	47d0      	blx	sl
 801bc40:	3001      	adds	r0, #1
 801bc42:	d0ab      	beq.n	801bb9c <_printf_i+0x164>
 801bc44:	6823      	ldr	r3, [r4, #0]
 801bc46:	079b      	lsls	r3, r3, #30
 801bc48:	d413      	bmi.n	801bc72 <_printf_i+0x23a>
 801bc4a:	68e0      	ldr	r0, [r4, #12]
 801bc4c:	9b03      	ldr	r3, [sp, #12]
 801bc4e:	4298      	cmp	r0, r3
 801bc50:	bfb8      	it	lt
 801bc52:	4618      	movlt	r0, r3
 801bc54:	e7a4      	b.n	801bba0 <_printf_i+0x168>
 801bc56:	2301      	movs	r3, #1
 801bc58:	4632      	mov	r2, r6
 801bc5a:	4649      	mov	r1, r9
 801bc5c:	4640      	mov	r0, r8
 801bc5e:	47d0      	blx	sl
 801bc60:	3001      	adds	r0, #1
 801bc62:	d09b      	beq.n	801bb9c <_printf_i+0x164>
 801bc64:	3501      	adds	r5, #1
 801bc66:	68e3      	ldr	r3, [r4, #12]
 801bc68:	9903      	ldr	r1, [sp, #12]
 801bc6a:	1a5b      	subs	r3, r3, r1
 801bc6c:	42ab      	cmp	r3, r5
 801bc6e:	dcf2      	bgt.n	801bc56 <_printf_i+0x21e>
 801bc70:	e7eb      	b.n	801bc4a <_printf_i+0x212>
 801bc72:	2500      	movs	r5, #0
 801bc74:	f104 0619 	add.w	r6, r4, #25
 801bc78:	e7f5      	b.n	801bc66 <_printf_i+0x22e>
 801bc7a:	bf00      	nop
 801bc7c:	0801fc4d 	.word	0x0801fc4d
 801bc80:	0801fc5e 	.word	0x0801fc5e

0801bc84 <_putc_r>:
 801bc84:	b570      	push	{r4, r5, r6, lr}
 801bc86:	460d      	mov	r5, r1
 801bc88:	4614      	mov	r4, r2
 801bc8a:	4606      	mov	r6, r0
 801bc8c:	b118      	cbz	r0, 801bc96 <_putc_r+0x12>
 801bc8e:	6983      	ldr	r3, [r0, #24]
 801bc90:	b90b      	cbnz	r3, 801bc96 <_putc_r+0x12>
 801bc92:	f7ff fb09 	bl	801b2a8 <__sinit>
 801bc96:	4b1c      	ldr	r3, [pc, #112]	; (801bd08 <_putc_r+0x84>)
 801bc98:	429c      	cmp	r4, r3
 801bc9a:	d124      	bne.n	801bce6 <_putc_r+0x62>
 801bc9c:	6874      	ldr	r4, [r6, #4]
 801bc9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bca0:	07d8      	lsls	r0, r3, #31
 801bca2:	d405      	bmi.n	801bcb0 <_putc_r+0x2c>
 801bca4:	89a3      	ldrh	r3, [r4, #12]
 801bca6:	0599      	lsls	r1, r3, #22
 801bca8:	d402      	bmi.n	801bcb0 <_putc_r+0x2c>
 801bcaa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bcac:	f7ff fbac 	bl	801b408 <__retarget_lock_acquire_recursive>
 801bcb0:	68a3      	ldr	r3, [r4, #8]
 801bcb2:	3b01      	subs	r3, #1
 801bcb4:	2b00      	cmp	r3, #0
 801bcb6:	60a3      	str	r3, [r4, #8]
 801bcb8:	da05      	bge.n	801bcc6 <_putc_r+0x42>
 801bcba:	69a2      	ldr	r2, [r4, #24]
 801bcbc:	4293      	cmp	r3, r2
 801bcbe:	db1c      	blt.n	801bcfa <_putc_r+0x76>
 801bcc0:	b2eb      	uxtb	r3, r5
 801bcc2:	2b0a      	cmp	r3, #10
 801bcc4:	d019      	beq.n	801bcfa <_putc_r+0x76>
 801bcc6:	6823      	ldr	r3, [r4, #0]
 801bcc8:	1c5a      	adds	r2, r3, #1
 801bcca:	6022      	str	r2, [r4, #0]
 801bccc:	701d      	strb	r5, [r3, #0]
 801bcce:	b2ed      	uxtb	r5, r5
 801bcd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bcd2:	07da      	lsls	r2, r3, #31
 801bcd4:	d405      	bmi.n	801bce2 <_putc_r+0x5e>
 801bcd6:	89a3      	ldrh	r3, [r4, #12]
 801bcd8:	059b      	lsls	r3, r3, #22
 801bcda:	d402      	bmi.n	801bce2 <_putc_r+0x5e>
 801bcdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bcde:	f7ff fb94 	bl	801b40a <__retarget_lock_release_recursive>
 801bce2:	4628      	mov	r0, r5
 801bce4:	bd70      	pop	{r4, r5, r6, pc}
 801bce6:	4b09      	ldr	r3, [pc, #36]	; (801bd0c <_putc_r+0x88>)
 801bce8:	429c      	cmp	r4, r3
 801bcea:	d101      	bne.n	801bcf0 <_putc_r+0x6c>
 801bcec:	68b4      	ldr	r4, [r6, #8]
 801bcee:	e7d6      	b.n	801bc9e <_putc_r+0x1a>
 801bcf0:	4b07      	ldr	r3, [pc, #28]	; (801bd10 <_putc_r+0x8c>)
 801bcf2:	429c      	cmp	r4, r3
 801bcf4:	bf08      	it	eq
 801bcf6:	68f4      	ldreq	r4, [r6, #12]
 801bcf8:	e7d1      	b.n	801bc9e <_putc_r+0x1a>
 801bcfa:	4629      	mov	r1, r5
 801bcfc:	4622      	mov	r2, r4
 801bcfe:	4630      	mov	r0, r6
 801bd00:	f7ff f8da 	bl	801aeb8 <__swbuf_r>
 801bd04:	4605      	mov	r5, r0
 801bd06:	e7e3      	b.n	801bcd0 <_putc_r+0x4c>
 801bd08:	0801fbfc 	.word	0x0801fbfc
 801bd0c:	0801fc1c 	.word	0x0801fc1c
 801bd10:	0801fbdc 	.word	0x0801fbdc

0801bd14 <_sbrk_r>:
 801bd14:	b538      	push	{r3, r4, r5, lr}
 801bd16:	4d06      	ldr	r5, [pc, #24]	; (801bd30 <_sbrk_r+0x1c>)
 801bd18:	2300      	movs	r3, #0
 801bd1a:	4604      	mov	r4, r0
 801bd1c:	4608      	mov	r0, r1
 801bd1e:	602b      	str	r3, [r5, #0]
 801bd20:	f7e5 fdaa 	bl	8001878 <_sbrk>
 801bd24:	1c43      	adds	r3, r0, #1
 801bd26:	d102      	bne.n	801bd2e <_sbrk_r+0x1a>
 801bd28:	682b      	ldr	r3, [r5, #0]
 801bd2a:	b103      	cbz	r3, 801bd2e <_sbrk_r+0x1a>
 801bd2c:	6023      	str	r3, [r4, #0]
 801bd2e:	bd38      	pop	{r3, r4, r5, pc}
 801bd30:	200111e4 	.word	0x200111e4

0801bd34 <__sread>:
 801bd34:	b510      	push	{r4, lr}
 801bd36:	460c      	mov	r4, r1
 801bd38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd3c:	f000 f8a8 	bl	801be90 <_read_r>
 801bd40:	2800      	cmp	r0, #0
 801bd42:	bfab      	itete	ge
 801bd44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801bd46:	89a3      	ldrhlt	r3, [r4, #12]
 801bd48:	181b      	addge	r3, r3, r0
 801bd4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801bd4e:	bfac      	ite	ge
 801bd50:	6563      	strge	r3, [r4, #84]	; 0x54
 801bd52:	81a3      	strhlt	r3, [r4, #12]
 801bd54:	bd10      	pop	{r4, pc}

0801bd56 <__swrite>:
 801bd56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd5a:	461f      	mov	r7, r3
 801bd5c:	898b      	ldrh	r3, [r1, #12]
 801bd5e:	05db      	lsls	r3, r3, #23
 801bd60:	4605      	mov	r5, r0
 801bd62:	460c      	mov	r4, r1
 801bd64:	4616      	mov	r6, r2
 801bd66:	d505      	bpl.n	801bd74 <__swrite+0x1e>
 801bd68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd6c:	2302      	movs	r3, #2
 801bd6e:	2200      	movs	r2, #0
 801bd70:	f000 f870 	bl	801be54 <_lseek_r>
 801bd74:	89a3      	ldrh	r3, [r4, #12]
 801bd76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bd7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bd7e:	81a3      	strh	r3, [r4, #12]
 801bd80:	4632      	mov	r2, r6
 801bd82:	463b      	mov	r3, r7
 801bd84:	4628      	mov	r0, r5
 801bd86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bd8a:	f000 b817 	b.w	801bdbc <_write_r>

0801bd8e <__sseek>:
 801bd8e:	b510      	push	{r4, lr}
 801bd90:	460c      	mov	r4, r1
 801bd92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd96:	f000 f85d 	bl	801be54 <_lseek_r>
 801bd9a:	1c43      	adds	r3, r0, #1
 801bd9c:	89a3      	ldrh	r3, [r4, #12]
 801bd9e:	bf15      	itete	ne
 801bda0:	6560      	strne	r0, [r4, #84]	; 0x54
 801bda2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801bda6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801bdaa:	81a3      	strheq	r3, [r4, #12]
 801bdac:	bf18      	it	ne
 801bdae:	81a3      	strhne	r3, [r4, #12]
 801bdb0:	bd10      	pop	{r4, pc}

0801bdb2 <__sclose>:
 801bdb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bdb6:	f000 b81b 	b.w	801bdf0 <_close_r>
	...

0801bdbc <_write_r>:
 801bdbc:	b538      	push	{r3, r4, r5, lr}
 801bdbe:	4d07      	ldr	r5, [pc, #28]	; (801bddc <_write_r+0x20>)
 801bdc0:	4604      	mov	r4, r0
 801bdc2:	4608      	mov	r0, r1
 801bdc4:	4611      	mov	r1, r2
 801bdc6:	2200      	movs	r2, #0
 801bdc8:	602a      	str	r2, [r5, #0]
 801bdca:	461a      	mov	r2, r3
 801bdcc:	f7e5 fd03 	bl	80017d6 <_write>
 801bdd0:	1c43      	adds	r3, r0, #1
 801bdd2:	d102      	bne.n	801bdda <_write_r+0x1e>
 801bdd4:	682b      	ldr	r3, [r5, #0]
 801bdd6:	b103      	cbz	r3, 801bdda <_write_r+0x1e>
 801bdd8:	6023      	str	r3, [r4, #0]
 801bdda:	bd38      	pop	{r3, r4, r5, pc}
 801bddc:	200111e4 	.word	0x200111e4

0801bde0 <abort>:
 801bde0:	b508      	push	{r3, lr}
 801bde2:	2006      	movs	r0, #6
 801bde4:	f000 f88e 	bl	801bf04 <raise>
 801bde8:	2001      	movs	r0, #1
 801bdea:	f7e5 fccd 	bl	8001788 <_exit>
	...

0801bdf0 <_close_r>:
 801bdf0:	b538      	push	{r3, r4, r5, lr}
 801bdf2:	4d06      	ldr	r5, [pc, #24]	; (801be0c <_close_r+0x1c>)
 801bdf4:	2300      	movs	r3, #0
 801bdf6:	4604      	mov	r4, r0
 801bdf8:	4608      	mov	r0, r1
 801bdfa:	602b      	str	r3, [r5, #0]
 801bdfc:	f7e5 fd07 	bl	800180e <_close>
 801be00:	1c43      	adds	r3, r0, #1
 801be02:	d102      	bne.n	801be0a <_close_r+0x1a>
 801be04:	682b      	ldr	r3, [r5, #0]
 801be06:	b103      	cbz	r3, 801be0a <_close_r+0x1a>
 801be08:	6023      	str	r3, [r4, #0]
 801be0a:	bd38      	pop	{r3, r4, r5, pc}
 801be0c:	200111e4 	.word	0x200111e4

0801be10 <_fstat_r>:
 801be10:	b538      	push	{r3, r4, r5, lr}
 801be12:	4d07      	ldr	r5, [pc, #28]	; (801be30 <_fstat_r+0x20>)
 801be14:	2300      	movs	r3, #0
 801be16:	4604      	mov	r4, r0
 801be18:	4608      	mov	r0, r1
 801be1a:	4611      	mov	r1, r2
 801be1c:	602b      	str	r3, [r5, #0]
 801be1e:	f7e5 fd02 	bl	8001826 <_fstat>
 801be22:	1c43      	adds	r3, r0, #1
 801be24:	d102      	bne.n	801be2c <_fstat_r+0x1c>
 801be26:	682b      	ldr	r3, [r5, #0]
 801be28:	b103      	cbz	r3, 801be2c <_fstat_r+0x1c>
 801be2a:	6023      	str	r3, [r4, #0]
 801be2c:	bd38      	pop	{r3, r4, r5, pc}
 801be2e:	bf00      	nop
 801be30:	200111e4 	.word	0x200111e4

0801be34 <_isatty_r>:
 801be34:	b538      	push	{r3, r4, r5, lr}
 801be36:	4d06      	ldr	r5, [pc, #24]	; (801be50 <_isatty_r+0x1c>)
 801be38:	2300      	movs	r3, #0
 801be3a:	4604      	mov	r4, r0
 801be3c:	4608      	mov	r0, r1
 801be3e:	602b      	str	r3, [r5, #0]
 801be40:	f7e5 fd01 	bl	8001846 <_isatty>
 801be44:	1c43      	adds	r3, r0, #1
 801be46:	d102      	bne.n	801be4e <_isatty_r+0x1a>
 801be48:	682b      	ldr	r3, [r5, #0]
 801be4a:	b103      	cbz	r3, 801be4e <_isatty_r+0x1a>
 801be4c:	6023      	str	r3, [r4, #0]
 801be4e:	bd38      	pop	{r3, r4, r5, pc}
 801be50:	200111e4 	.word	0x200111e4

0801be54 <_lseek_r>:
 801be54:	b538      	push	{r3, r4, r5, lr}
 801be56:	4d07      	ldr	r5, [pc, #28]	; (801be74 <_lseek_r+0x20>)
 801be58:	4604      	mov	r4, r0
 801be5a:	4608      	mov	r0, r1
 801be5c:	4611      	mov	r1, r2
 801be5e:	2200      	movs	r2, #0
 801be60:	602a      	str	r2, [r5, #0]
 801be62:	461a      	mov	r2, r3
 801be64:	f7e5 fcfa 	bl	800185c <_lseek>
 801be68:	1c43      	adds	r3, r0, #1
 801be6a:	d102      	bne.n	801be72 <_lseek_r+0x1e>
 801be6c:	682b      	ldr	r3, [r5, #0]
 801be6e:	b103      	cbz	r3, 801be72 <_lseek_r+0x1e>
 801be70:	6023      	str	r3, [r4, #0]
 801be72:	bd38      	pop	{r3, r4, r5, pc}
 801be74:	200111e4 	.word	0x200111e4

0801be78 <__malloc_lock>:
 801be78:	4801      	ldr	r0, [pc, #4]	; (801be80 <__malloc_lock+0x8>)
 801be7a:	f7ff bac5 	b.w	801b408 <__retarget_lock_acquire_recursive>
 801be7e:	bf00      	nop
 801be80:	200111ec 	.word	0x200111ec

0801be84 <__malloc_unlock>:
 801be84:	4801      	ldr	r0, [pc, #4]	; (801be8c <__malloc_unlock+0x8>)
 801be86:	f7ff bac0 	b.w	801b40a <__retarget_lock_release_recursive>
 801be8a:	bf00      	nop
 801be8c:	200111ec 	.word	0x200111ec

0801be90 <_read_r>:
 801be90:	b538      	push	{r3, r4, r5, lr}
 801be92:	4d07      	ldr	r5, [pc, #28]	; (801beb0 <_read_r+0x20>)
 801be94:	4604      	mov	r4, r0
 801be96:	4608      	mov	r0, r1
 801be98:	4611      	mov	r1, r2
 801be9a:	2200      	movs	r2, #0
 801be9c:	602a      	str	r2, [r5, #0]
 801be9e:	461a      	mov	r2, r3
 801bea0:	f7e5 fc7c 	bl	800179c <_read>
 801bea4:	1c43      	adds	r3, r0, #1
 801bea6:	d102      	bne.n	801beae <_read_r+0x1e>
 801bea8:	682b      	ldr	r3, [r5, #0]
 801beaa:	b103      	cbz	r3, 801beae <_read_r+0x1e>
 801beac:	6023      	str	r3, [r4, #0]
 801beae:	bd38      	pop	{r3, r4, r5, pc}
 801beb0:	200111e4 	.word	0x200111e4

0801beb4 <_raise_r>:
 801beb4:	291f      	cmp	r1, #31
 801beb6:	b538      	push	{r3, r4, r5, lr}
 801beb8:	4604      	mov	r4, r0
 801beba:	460d      	mov	r5, r1
 801bebc:	d904      	bls.n	801bec8 <_raise_r+0x14>
 801bebe:	2316      	movs	r3, #22
 801bec0:	6003      	str	r3, [r0, #0]
 801bec2:	f04f 30ff 	mov.w	r0, #4294967295
 801bec6:	bd38      	pop	{r3, r4, r5, pc}
 801bec8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801beca:	b112      	cbz	r2, 801bed2 <_raise_r+0x1e>
 801becc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bed0:	b94b      	cbnz	r3, 801bee6 <_raise_r+0x32>
 801bed2:	4620      	mov	r0, r4
 801bed4:	f000 f830 	bl	801bf38 <_getpid_r>
 801bed8:	462a      	mov	r2, r5
 801beda:	4601      	mov	r1, r0
 801bedc:	4620      	mov	r0, r4
 801bede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bee2:	f000 b817 	b.w	801bf14 <_kill_r>
 801bee6:	2b01      	cmp	r3, #1
 801bee8:	d00a      	beq.n	801bf00 <_raise_r+0x4c>
 801beea:	1c59      	adds	r1, r3, #1
 801beec:	d103      	bne.n	801bef6 <_raise_r+0x42>
 801beee:	2316      	movs	r3, #22
 801bef0:	6003      	str	r3, [r0, #0]
 801bef2:	2001      	movs	r0, #1
 801bef4:	e7e7      	b.n	801bec6 <_raise_r+0x12>
 801bef6:	2400      	movs	r4, #0
 801bef8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801befc:	4628      	mov	r0, r5
 801befe:	4798      	blx	r3
 801bf00:	2000      	movs	r0, #0
 801bf02:	e7e0      	b.n	801bec6 <_raise_r+0x12>

0801bf04 <raise>:
 801bf04:	4b02      	ldr	r3, [pc, #8]	; (801bf10 <raise+0xc>)
 801bf06:	4601      	mov	r1, r0
 801bf08:	6818      	ldr	r0, [r3, #0]
 801bf0a:	f7ff bfd3 	b.w	801beb4 <_raise_r>
 801bf0e:	bf00      	nop
 801bf10:	20000030 	.word	0x20000030

0801bf14 <_kill_r>:
 801bf14:	b538      	push	{r3, r4, r5, lr}
 801bf16:	4d07      	ldr	r5, [pc, #28]	; (801bf34 <_kill_r+0x20>)
 801bf18:	2300      	movs	r3, #0
 801bf1a:	4604      	mov	r4, r0
 801bf1c:	4608      	mov	r0, r1
 801bf1e:	4611      	mov	r1, r2
 801bf20:	602b      	str	r3, [r5, #0]
 801bf22:	f7e5 fc1f 	bl	8001764 <_kill>
 801bf26:	1c43      	adds	r3, r0, #1
 801bf28:	d102      	bne.n	801bf30 <_kill_r+0x1c>
 801bf2a:	682b      	ldr	r3, [r5, #0]
 801bf2c:	b103      	cbz	r3, 801bf30 <_kill_r+0x1c>
 801bf2e:	6023      	str	r3, [r4, #0]
 801bf30:	bd38      	pop	{r3, r4, r5, pc}
 801bf32:	bf00      	nop
 801bf34:	200111e4 	.word	0x200111e4

0801bf38 <_getpid_r>:
 801bf38:	f7e5 bc0c 	b.w	8001754 <_getpid>

0801bf3c <_init>:
 801bf3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf3e:	bf00      	nop
 801bf40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bf42:	bc08      	pop	{r3}
 801bf44:	469e      	mov	lr, r3
 801bf46:	4770      	bx	lr

0801bf48 <_fini>:
 801bf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf4a:	bf00      	nop
 801bf4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bf4e:	bc08      	pop	{r3}
 801bf50:	469e      	mov	lr, r3
 801bf52:	4770      	bx	lr
